{"version":3,"file":"material.umd.min.js","sources":["../../src/lib/tabs/tab-group.ts","../../src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/lib/tabs/tabs-module.ts","../../src/lib/toolbar/toolbar.ts","../../src/lib/toolbar/toolbar-module.ts","../../src/lib/tree/outlet.ts","../../src/lib/tree/node.ts","../../src/lib/tree/padding.ts","../../src/lib/tree/tree.ts","../../src/lib/tree/toggle.ts","../../src/lib/tree/tree-module.ts","../../src/lib/tree/data-source/flat-data-source.ts","../../src/lib/tree/data-source/nested-data-source.ts","../../src/lib/version.ts","../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/core/testing/month-constants.ts","../../src/lib/expansion/expansion-animations.ts","../../src/lib/select/select.ts","../../src/lib/tooltip/tooltip.ts","../../src/lib/table/cell.ts","../../src/lib/table/row.ts","../../src/lib/table/table-module.ts","../../src/lib/table/table-data-source.ts","../../src/lib/tabs/ink-bar.ts","../../src/lib/tabs/tab-content.ts","../../src/lib/tabs/tab-label.ts","../../src/lib/tabs/tab.ts","../../src/lib/tabs/tabs-animations.ts","../../src/lib/tabs/tab-body.ts","../../src/lib/tabs/tab-label-wrapper.ts","../../src/lib/tabs/tab-header.ts","../../src/lib/sort/sort-animations.ts","../../src/lib/sort/sort-header-intl.ts","../../src/lib/sort/sort-header.ts","../../src/lib/sort/sort-module.ts","../../src/lib/stepper/step-label.ts","../../src/lib/stepper/stepper-intl.ts","../../src/lib/stepper/step-header.ts","../../src/lib/stepper/stepper-animations.ts","../../src/lib/stepper/stepper-icon.ts","../../src/lib/stepper/stepper.ts","../../src/lib/stepper/stepper-button.ts","../../src/lib/stepper/stepper-module.ts","../../src/lib/table/table.ts","../../src/lib/slider/slider.ts","../../src/lib/slider/slider-module.ts","../../src/lib/snack-bar/snack-bar-ref.ts","../../src/lib/snack-bar/snack-bar-config.ts","../../src/lib/snack-bar/simple-snack-bar.ts","../../src/lib/snack-bar/snack-bar-animations.ts","../../src/lib/snack-bar/snack-bar-container.ts","../../src/lib/snack-bar/snack-bar-module.ts","../../src/lib/snack-bar/snack-bar.ts","../../src/lib/sort/sort.ts","../../src/lib/sidenav/drawer.ts","../../src/lib/sidenav/sidenav.ts","../../src/lib/sidenav/sidenav-module.ts","../../src/lib/slide-toggle/slide-toggle-config.ts","../../src/lib/slide-toggle/slide-toggle.ts","../../src/lib/slide-toggle/slide-toggle-module.ts","../../src/lib/progress-bar/progress-bar.ts","../../src/lib/progress-bar/progress-bar-module.ts","../../src/lib/progress-spinner/progress-spinner.ts","../../src/lib/progress-spinner/progress-spinner-module.ts","../../src/lib/radio/radio.ts","../../src/lib/radio/radio-module.ts","../../src/lib/sidenav/drawer-animations.ts","../../src/lib/select/select-module.ts","../../src/lib/tooltip/tooltip-animations.ts","../../src/lib/tooltip/tooltip-module.ts","../../src/lib/paginator/paginator-intl.ts","../../src/lib/paginator/paginator.ts","../../src/lib/paginator/paginator-module.ts","../../src/lib/menu/menu-content.ts","../../src/lib/menu/menu-animations.ts","../../src/lib/menu/menu-panel.ts","../../src/lib/menu/menu-item.ts","../../src/lib/menu/menu-directive.ts","../../src/lib/menu/menu-trigger.ts","../../src/lib/menu/menu-module.ts","../../src/lib/select/select-animations.ts","../../src/lib/list/selection-list.ts","../../src/lib/list/list-module.ts","../../src/lib/list/list.ts","../../src/lib/grid-list/grid-tile.ts","../../src/lib/grid-list/tile-coordinator.ts","../../src/lib/grid-list/tile-styler.ts","../../src/lib/grid-list/grid-list.ts","../../src/lib/grid-list/grid-list-module.ts","../../src/lib/icon/icon-registry.ts","../../src/lib/icon/icon.ts","../../src/lib/icon/icon-module.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-module.ts","../../src/lib/divider/divider.ts","../../src/lib/divider/divider-module.ts","../../src/lib/expansion/accordion-base.ts","../../src/lib/expansion/expansion-panel-content.ts","../../src/lib/expansion/expansion-panel.ts","../../src/lib/expansion/expansion-panel-header.ts","../../src/lib/expansion/accordion.ts","../../src/lib/expansion/expansion-module.ts","../../src/lib/grid-list/grid-list-base.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/datepicker/multi-year-view.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/datepicker/calendar.ts","../../src/lib/datepicker/datepicker-animations.ts","../../src/lib/chips/chip-list.ts","../../src/lib/chips/chip-input.ts","../../src/lib/chips/chips-module.ts","../../src/lib/dialog/dialog-config.ts","../../src/lib/dialog/dialog-animations.ts","../../src/lib/dialog/dialog-container.ts","../../src/lib/dialog/dialog-ref.ts","../../src/lib/dialog/dialog.ts","../../src/lib/dialog/dialog-content-directives.ts","../../src/lib/dialog/dialog-module.ts","../../src/lib/input/autosize.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/input.ts","../../src/lib/input/input-module.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/chips/chip.ts","../../src/lib/chips/chip-default-options.ts","../../src/lib/button/button.ts","../../src/lib/button/button-module.ts","../../src/lib/button-toggle/button-toggle.ts","../../src/lib/button-toggle/button-toggle-module.ts","../../src/lib/card/card.ts","../../src/lib/card/card-module.ts","../../src/lib/checkbox/checkbox-config.ts","../../src/lib/autocomplete/autocomplete.ts","../../src/lib/autocomplete/autocomplete-origin.ts","../../src/lib/autocomplete/autocomplete-module.ts","../../src/lib/badge/badge.ts","../../src/lib/badge/badge-module.ts","../../src/lib/bottom-sheet/bottom-sheet-config.ts","../../src/lib/bottom-sheet/bottom-sheet-animations.ts","../../src/lib/bottom-sheet/bottom-sheet-container.ts","../../src/lib/bottom-sheet/bottom-sheet-module.ts","../../src/lib/bottom-sheet/bottom-sheet-ref.ts","../../src/lib/bottom-sheet/bottom-sheet.ts","../../src/lib/core/option/option.ts","../../src/lib/core/option/index.ts","../../src/lib/core/label/label-options.ts","../../src/lib/form-field/error.ts","../../src/lib/form-field/form-field-animations.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/label.ts","../../src/lib/form-field/placeholder.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field-module.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/disable-ripple.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/core/common-behaviors/initialized.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/line/line.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/menu/menu-errors.ts","../../src/lib/select/select-errors.ts","../../src/lib/sort/sort-errors.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/datetime/date-formats.ts","../../src/lib/core/datetime/native-date-formats.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/option/optgroup.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\n\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n/** Object that can be used to configure the default options for the tabs module. */\nexport interface MatTabsConfig {\n  /** Duration for the tab animation. Must be a valid CSS value (e.g. 600ms). */\n  animationDuration?: string;\n}\n\n/** Injection token that can be used to provide the default options the tabs module. */\nexport const MAT_TABS_CONFIG = new InjectionToken('MAT_TABS_CONFIG');\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nexport class MatTabGroupBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabGroupMixinBase: CanColorCtor & CanDisableRippleCtor & typeof MatTabGroupBase =\n    mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://material.io/design/components/tabs.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\n\n  @ViewChild('tabBodyWrapper') _tabBodyWrapper: ElementRef;\n\n  @ViewChild('tabHeader') _tabHeader: MatTabHeader;\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n  private _dynamicHeight: boolean = false;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Duration for the tab animation. Must be a valid CSS value (e.g. 600ms). */\n  @Input() animationDuration: string;\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() readonly focusChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() readonly selectedTabChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\n\n  private _groupId: number;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_TABS_CONFIG) @Optional() defaultConfig?: MatTabsConfig) {\n    super(elementRef);\n    this._groupId = nextId++;\n    this.animationDuration = defaultConfig && defaultConfig.animationDuration ?\n        defaultConfig.animationDuration : '500ms';\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked() {\n    // Don't clamp the `indexToSelect` immediately in the setter because it can happen that\n    // the amount of tabs changes before the actual change detection runs.\n    const indexToSelect = this._indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect) {\n      const isFirstRun = this._selectedIndex == null;\n\n      if (!isFirstRun) {\n        this.selectedTabChange.emit(this._createChangeEvent(indexToSelect));\n      }\n\n      // Changing these values after change detection has run\n      // since the checked content may contain references to them.\n      Promise.resolve().then(() => {\n        this._tabs.forEach((tab, index) => tab.isActive = index === indexToSelect);\n\n        if (!isFirstRun) {\n          this.selectedIndexChange.emit(indexToSelect);\n        }\n      });\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      const indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n      // Maintain the previously-selected tab if a new tab is added or removed and there is no\n      // explicit change that selects a different tab.\n      if (indexToSelect === this._selectedIndex) {\n        const tabs = this._tabs.toArray();\n\n        for (let i = 0; i < tabs.length; i++) {\n          if (tabs[i].isActive) {\n            // Assign both to the `_indexToSelect` and `_selectedIndex` so we don't fire a changed\n            // event, otherwise the consumer may end up in an infinite loop in some edge cases like\n            // adding a tab within the `selectedIndexChange` event.\n            this._indexToSelect = this._selectedIndex = i;\n            break;\n          }\n        }\n      }\n\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  /** Re-aligns the ink bar to the selected tab element. */\n  realignInkBar() {\n    if (this._tabHeader) {\n      this._tabHeader._alignInkBarToSelectedTab();\n    }\n  }\n\n  _focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(...this._tabs.map(tab => tab._stateChanges))\n      .subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  /** Clamps the given index to the bounds of 0 and the tabs length. */\n  private _clampTabIndex(index: number | null): number {\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    return Math.min(this._tabs.length - 1, Math.max(index || 0, 0));\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    const wrapper = this._tabBodyWrapper.nativeElement;\n    this._tabBodyWrapperHeight = wrapper.clientHeight;\n    wrapper.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, index: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = index;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor, CanColorCtor,\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  HasTabIndex, HasTabIndexCtor,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex, RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from '../ink-bar';\nimport {FocusMonitor} from '@angular/cdk/a11y';\n\n\n// Boilerplate for applying mixins to MatTabNav.\n/** @docs-private */\nexport class MatTabNavBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabNavMixinBase: CanDisableRippleCtor & CanColorCtor & typeof MatTabNavBase =\n    mixinDisableRipple(mixinColor(MatTabNavBase, 'primary'));\n\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  exportAs: 'matTabNavBar, matTabNav',\n  inputs: ['color', 'disableRipple'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTabNav extends _MatTabNavMixinBase\n    implements AfterContentChecked, AfterContentInit, CanColor, CanDisableRipple, OnDestroy {\n\n  /** Subject that emits when the component has been destroyed. */\n  private readonly _onDestroy = new Subject<void>();\n\n  private _activeLinkChanged: boolean;\n  private _activeLinkElement: ElementRef<HTMLElement> | null;\n\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n\n  /** Query list of all tab links of the tab navigation. */\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true})\n  _tabLinks: QueryList<MatTabLink>;\n\n  /** Background color of the tab nav. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  constructor(elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler) {\n    super(elementRef);\n  }\n\n  /**\n   * Notifies the component that the active link has been changed.\n   * @breaking-change 8.0.0 `element` parameter to be removed.\n   */\n  updateActiveLink(element: ElementRef) {\n    // Note: keeping the `element` for backwards-compat, but isn't being used for anything.\n    // @breaking-change 8.0.0\n    this._activeLinkChanged = !!element;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  ngAfterContentInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      const dirChange = this._dir ? this._dir.change : observableOf(null);\n\n      return merge(dirChange, this._viewportRuler.change(10))\n          .pipe(takeUntil(this._onDestroy))\n          .subscribe(() => this._alignInkBar());\n    });\n  }\n\n  /** Checks if the active link has been changed and, if so, will update the ink bar. */\n  ngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      const activeTab = this._tabLinks.find(tab => tab.active);\n\n      this._activeLinkElement = activeTab ? activeTab._elementRef : null;\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Aligns the ink bar to the active link. */\n  _alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.show();\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    } else {\n      this._inkBar.hide();\n    }\n  }\n}\n\n\n// Boilerplate for applying mixins to MatTabLink.\nexport class MatTabLinkBase {}\nexport const _MatTabLinkMixinBase:\n    HasTabIndexCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatTabLinkBase =\n        mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\n\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n@Directive({\n  selector: '[mat-tab-link], [matTabLink]',\n  exportAs: 'matTabLink',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-current]': 'active',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabIndex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled',\n    '[class.mat-tab-label-active]': 'active',\n  }\n})\nexport class MatTabLink extends _MatTabLinkMixinBase\n    implements OnDestroy, CanDisable, CanDisableRipple, HasTabIndex, RippleTarget {\n\n  /** Whether the tab link is active or not. */\n  protected _isActive: boolean = false;\n\n  /** Reference to the RippleRenderer for the tab-link. */\n  protected _tabLinkRipple: RippleRenderer;\n\n  /** Whether the ripples are globally disabled through the RippleGlobalOptions */\n  private _ripplesGloballyDisabled = false;\n\n  /** Whether the link is active. */\n  @Input()\n  get active(): boolean { return this._isActive; }\n  set active(value: boolean) {\n    if (value !== this._isActive) {\n      this._isActive = value;\n      this._tabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._tabNavBar.disableRipple ||\n      this._ripplesGloballyDisabled;\n  }\n\n  constructor(private _tabNavBar: MatTabNav,\n              public _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Attribute('tabindex') tabIndex: string,\n              /**\n               * @deprecated\n               * @breaking-change 8.0.0 `_focusMonitor` parameter to be made required.\n               */\n              private _focusMonitor?: FocusMonitor) {\n    super();\n\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._tabLinkRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    if (globalOptions) {\n      // TODO(paul): Do not copy each option manually. Allow dynamic global option changes: #9729\n      this._ripplesGloballyDisabled = !!globalOptions.disabled;\n      this.rippleConfig = {\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n        animation: globalOptions.animation,\n      };\n    }\n\n    if (_focusMonitor) {\n      _focusMonitor.monitor(_elementRef);\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabLinkRipple._removeTriggerEvents();\n\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabContent} from './tab-content';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n    A11yModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n    MatTabContent,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader,\n    MatTabContent,\n  ],\n})\nexport class MatTabsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Inject,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\n\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nexport class MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatToolbarMixinBase: CanColorCtor & typeof MatToolbarBase =\n    mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': '_toolbarRows.length > 0',\n    '[class.mat-toolbar-single-row]': '_toolbarRows.length === 0',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n  private _document: Document;\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(\n    elementRef: ElementRef,\n    private _platform: Platform,\n    @Inject(DOCUMENT) document?: any) {\n    super(elementRef);\n\n    // TODO: make the document a required param when doing breaking changes.\n    this._document = document;\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = Array.from<HTMLElement>(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n      .some(node => !!(node.textContent && node.textContent.trim()));\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodeOutlet} from '@angular/cdk/tree';\nimport {\n  Directive,\n  ViewContainerRef,\n} from '@angular/core';\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({\n  selector: '[matTreeNodeOutlet]'\n})\nexport class MatTreeNodeOutlet implements CdkTreeNodeOutlet {\n  constructor(public viewContainer: ViewContainerRef) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkNestedTreeNode, CdkTree, CdkTreeNode, CdkTreeNodeDef} from '@angular/cdk/tree';\nimport {\n  AfterContentInit,\n  Attribute,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Input,\n  IterableDiffers,\n  OnDestroy,\n  QueryList,\n} from '@angular/core';\nimport {\n  CanDisable, CanDisableCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\nexport const _MatTreeNodeMixinBase: HasTabIndexCtor & CanDisableCtor & typeof CdkTreeNode =\n    mixinTabIndex(mixinDisabled(CdkTreeNode));\n\nexport const _MatNestedTreeNodeMixinBase:\n    HasTabIndexCtor & CanDisableCtor & typeof CdkNestedTreeNode =\n        mixinTabIndex(mixinDisabled(CdkNestedTreeNode));\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n  selector: 'mat-tree-node',\n  exportAs: 'matTreeNode',\n  inputs: ['disabled', 'tabIndex'],\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n    '[attr.role]': 'role',\n    'class': 'mat-tree-node'\n  },\n  providers: [{provide: CdkTreeNode, useExisting: MatTreeNode}]\n})\nexport class MatTreeNode<T> extends _MatTreeNodeMixinBase<T>\n    implements CanDisable, HasTabIndex {\n  @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n}\n\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeDef]',\n  inputs: [\n    'when: matTreeNodeDefWhen'\n  ],\n  providers: [{provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef}]\n})\nexport class MatTreeNodeDef<T> extends CdkTreeNodeDef<T> {\n  @Input('matTreeNode') data: T;\n}\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\n(MatTreeNodeDef as any)['ctorParameters'] = () => (CdkTreeNodeDef as any)['ctorParameters'];\n\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\n@Directive({\n  selector: 'mat-nested-tree-node',\n  exportAs: 'matNestedTreeNode',\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.role]': 'role',\n    'class': 'mat-nested-tree-node',\n  },\n  inputs: ['disabled', 'tabIndex'],\n  providers: [\n    {provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CdkTreeNode, useExisting: MatNestedTreeNode}\n  ]\n})\nexport class MatNestedTreeNode<T> extends _MatNestedTreeNodeMixinBase<T>\n    implements AfterContentInit, CanDisable, HasTabIndex, OnDestroy {\n\n  @Input('matNestedTreeNode') node: T;\n\n  @ContentChildren(MatTreeNodeOutlet) nodeOutlet: QueryList<MatTreeNodeOutlet>;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              protected _differs: IterableDiffers,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree, _differs);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n\n  // This is a workaround for https://github.com/angular/angular/issues/23091\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  // TODO(tinayuangao): Remove when the angular issue #23091 is fixed\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodePadding} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodePadding]',\n  providers: [{provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding}]\n})\nexport class MatTreeNodePadding<T> extends CdkTreeNodePadding<T> {\n\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  @Input('matTreeNodePadding') level: number;\n\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n  @Input('matTreeNodePaddingIndent') indent: number;\n}\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\n(MatTreeNodePadding as any)['ctorParameters'] = () =>\n    (CdkTreeNodePadding as any)['ctorParameters'];\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTree} from '@angular/cdk/tree';\nimport {ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation} from '@angular/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tree',\n  exportAs: 'matTree',\n  template: `<ng-container matTreeNodeOutlet></ng-container>`,\n  host: {\n    'class': 'mat-tree',\n    'role': 'tree',\n  },\n  styleUrls: ['tree.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [{provide: CdkTree, useExisting: MatTree}]\n})\nexport class MatTree<T> extends CdkTree<T> {\n  // Outlets within the tree's template where the dataNodes will be inserted.\n  @ViewChild(MatTreeNodeOutlet) _nodeOutlet: MatTreeNodeOutlet;\n}\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\n(MatTree as any)['ctorParameters'] = () => (CdkTree as any)['ctorParameters'];\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTreeNodeToggle} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeToggle]',\n  host: {\n    '(click)': '_toggle($event)',\n  },\n  providers: [{provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle}]\n})\nexport class MatTreeNodeToggle<T> extends CdkTreeNodeToggle<T> {\n  @Input('matTreeNodeToggleRecursive') recursive: boolean = false;\n}\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\n(MatTreeNodeToggle as any)['ctorParameters'] = () => (CdkTreeNodeToggle as any)['ctorParameters'];\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatNestedTreeNode, MatTreeNodeDef, MatTreeNode} from './node';\nimport {MatTree} from './tree';\nimport {MatTreeNodeToggle} from './toggle';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {MatTreeNodePadding} from './padding';\n\nconst MAT_TREE_DIRECTIVES = [\n  MatNestedTreeNode,\n  MatTreeNodeDef,\n  MatTreeNodePadding,\n  MatTreeNodeToggle,\n  MatTree,\n  MatTreeNode,\n  MatTreeNodeOutlet\n];\n\n@NgModule({\n  imports: [CdkTreeModule, CommonModule, MatCommonModule],\n  exports: MAT_TREE_DIRECTIVES,\n  declarations: MAT_TREE_DIRECTIVES,\n})\nexport class MatTreeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {FlatTreeControl, TreeControl} from '@angular/cdk/tree';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map, take} from 'rxjs/operators';\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class MatTreeFlattener<T, F> {\n\n  constructor(public transformFunction: (node: T, level: number) => F,\n              public getLevel: (node: F) => number,\n              public isExpandable: (node: F) => boolean,\n              public getChildren: (node: T) => Observable<T[]> | T[]) {}\n\n  _flattenNode(node: T, level: number,\n               resultNodes: F[], parentMap: boolean[]): F[] {\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n\n    if (this.isExpandable(flatNode)) {\n      const childrenNodes = this.getChildren(node);\n      if (Array.isArray(childrenNodes)) {\n        this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n      } else {\n        childrenNodes.pipe(take(1)).subscribe(children => {\n          this._flattenChildren(children, level, resultNodes, parentMap);\n        });\n      }\n    }\n    return resultNodes;\n  }\n\n  _flattenChildren(children: T[], level: number,\n                   resultNodes: F[], parentMap: boolean[]): void {\n    children.forEach((child, index) => {\n      let childParentMap: boolean[] = parentMap.slice();\n      childParentMap.push(index != children.length - 1);\n      this._flattenNode(child, level + 1, resultNodes, childParentMap);\n    });\n  }\n\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   */\n  flattenNodes(structuredData: T[]): F[] {\n    let resultNodes: F[] = [];\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   */\n  expandFlattenedNodes(nodes: F[], treeControl: TreeControl<F>): F[] {\n    let results: F[] = [];\n    let currentExpand: boolean[] = [];\n    currentExpand[0] = true;\n\n    nodes.forEach(node => {\n      let expand = true;\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n      if (expand) {\n        results.push(node);\n      }\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nexport class MatTreeFlatDataSource<T, F> extends DataSource<F> {\n  _flattenedData = new BehaviorSubject<F[]>([]);\n\n  _expandedData = new BehaviorSubject<F[]>([]);\n\n  _data: BehaviorSubject<T[]>;\n  get data() { return this._data.value; }\n  set data(value: T[]) {\n    this._data.next(value);\n    this._flattenedData.next(this.treeFlattener.flattenNodes(this.data));\n    this.treeControl.dataNodes = this._flattenedData.value;\n  }\n\n  constructor(private treeControl: FlatTreeControl<F>,\n              private treeFlattener: MatTreeFlattener<T, F>,\n              initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n  }\n\n  connect(collectionViewer: CollectionViewer): Observable<F[]> {\n    const changes = [\n      collectionViewer.viewChange,\n      this.treeControl.expansionModel.onChange,\n      this._flattenedData\n    ];\n    return merge(...changes).pipe(map(() => {\n      this._expandedData.next(\n        this.treeFlattener.expandFlattenedNodes(this._flattenedData.value, this.treeControl));\n      return this._expandedData.value;\n    }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nexport class MatTreeNestedDataSource<T> extends DataSource<T> {\n  _data = new BehaviorSubject<T[]>([]);\n\n  /**\n   * Data for the nested tree\n   */\n  get data() { return this._data.value; }\n  set data(value: T[]) { this._data.next(value); }\n\n  connect(collectionViewer: CollectionViewer): Observable<T[]> {\n    return merge(...[collectionViewer.viewChange, this._data])\n      .pipe(map(() => {\n        return this.data;\n      }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('7.0.2-d94d176');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {filter, take, switchMap, delay, tap, map} from 'rxjs/operators';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  MatOption,\n  MatOptionSelectionChange,\n} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {Subscription, defer, fromEvent, merge, of as observableOf, Subject, Observable} from 'rxjs';\nimport {MatAutocomplete} from './autocomplete';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    '[attr.autocomplete]': 'autocompleteAttribute',\n    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n    '[attr.aria-activedescendant]': 'activeOption?.id',\n    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n    '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  exportAs: 'matAutocompleteTrigger',\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal;\n  private _componentDestroyed = false;\n  private _autocompleteDisabled = false;\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n  private _previousValue: string | number | null;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Subscription to viewport size changes. */\n  private _viewportSubscription = Subscription.EMPTY;\n\n  /**\n   * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n   * closed autocomplete from being reopened if the user switches to another browser tab and then\n   * comes back.\n   */\n  private _canOpenOnNextFocus = true;\n\n  /** Stream of keyboard events that can close the panel. */\n  private readonly _closeKeyEventStream = new Subject<void>();\n\n  /**\n   * Event handler for when the window is blurred. Needs to be an\n   * arrow function in order to preserve the context.\n   */\n  private _windowBlurHandler = () => {\n    // If the user blurred the window while the autocomplete is focused, it means that it'll be\n    // refocused when they come back. In this case we want to skip the first focus event, if the\n    // pane was closed, in order to avoid reopening it unintentionally.\n    this._canOpenOnNextFocus =\n        document.activeElement !== this._element.nativeElement || this.panelOpen;\n  }\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when autocomplete has been touched` */\n  _onTouched = () => {};\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  /**\n   * Reference relative to which to position the autocomplete panel.\n   * Defaults to the autocomplete trigger element.\n   */\n  @Input('matAutocompleteConnectedTo') connectedTo: MatAutocompleteOrigin;\n\n  /**\n   * `autocomplete` attribute to be set on the input element.\n   * @docs-private\n   */\n  @Input('autocomplete') autocompleteAttribute: string = 'off';\n\n  /**\n   * Whether the autocomplete is disabled. When disabled, the element will\n   * act as a regular input and the user won't be able to open the panel.\n   */\n  @Input('matAutocompleteDisabled')\n  get autocompleteDisabled(): boolean { return this._autocompleteDisabled; }\n  set autocompleteDisabled(value: boolean) {\n    this._autocompleteDisabled = coerceBooleanProperty(value);\n  }\n\n  constructor(private _element: ElementRef<HTMLInputElement>, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @breaking-change 8.0.0 Make `_viewportRuler` required.\n              private _viewportRuler?: ViewportRuler) {\n\n    if (typeof window !== 'undefined') {\n      _zone.runOutsideAngular(() => {\n        window.addEventListener('blur', this._windowBlurHandler);\n      });\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngOnDestroy() {\n    if (typeof window !== 'undefined') {\n      window.removeEventListener('blur', this._windowBlurHandler);\n    }\n\n    this._viewportSubscription.unsubscribe();\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._overlayAttached && this.autocomplete.showPanel;\n  }\n  private _overlayAttached: boolean = false;\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (!this._overlayAttached) {\n      return;\n    }\n\n    if (this.panelOpen) {\n      // Only emit if the panel was visible.\n      this.autocomplete.closed.emit();\n    }\n\n    this.autocomplete._isOpen = this._overlayAttached = false;\n\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n\n    // Note that in some cases this can end up being called after the component is destroyed.\n    // Add a check to ensure that we don't try to run change detection on a destroyed view.\n    if (!this._componentDestroyed) {\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n   * within the viewport.\n   */\n  updatePosition(): void {\n    if (this._overlayAttached) {\n      this._overlayRef!.updatePosition();\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange|null> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)),\n      this._closeKeyEventStream,\n      this._getOutsideClickStream(),\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n          observableOf()\n    ).pipe(\n      // Normalize the output so we return a consistent type.\n      map(event => event instanceof MatOptionSelectionChange ? event : null)\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  readonly optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .asObservable()\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  });\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private _getOutsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return merge(\n      fromEvent<MouseEvent>(this._document, 'click'),\n      fromEvent<TouchEvent>(this._document, 'touchend')\n    )\n    .pipe(filter(event => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._overlayAttached &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n    if (keyCode === ESCAPE) {\n      event.preventDefault();\n    }\n\n    if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else if (this.autocomplete) {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    let target = event.target as HTMLInputElement;\n    let value: number | string | null = target.value;\n\n    // Based on `NumberValueAccessor` from forms.\n    if (target.type === 'number') {\n      value = value == '' ? null : parseFloat(value);\n    }\n\n    // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._previousValue !== value && document.activeElement === event.target) {\n      this._previousValue = value;\n      this._onChange(value);\n\n      if (this._canOpen()) {\n        this.openPanel();\n      }\n    }\n  }\n\n  _handleFocus(): void {\n    if (!this._canOpenOnNextFocus) {\n      this._canOpenOnNextFocus = true;\n    } else if (this._canOpen()) {\n      this._previousValue = this._element.nativeElement.value;\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const index = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(index,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n\n    const newScrollPosition = _getOptionScrollPosition(\n      index + labelCount,\n      AUTOCOMPLETE_OPTION_HEIGHT,\n      this.autocomplete._getScrollTop(),\n      AUTOCOMPLETE_PANEL_HEIGHT\n    );\n\n    this.autocomplete._setScrollTop(newScrollPosition);\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.reapplyLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n      .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n          this._resetActiveItem();\n          this.autocomplete._setVisibility();\n\n          if (this.panelOpen) {\n            this._overlayRef!.updatePosition();\n          }\n\n          return this.panelClosingActions;\n        }),\n        // when the first closing event occurs...\n        take(1)\n      )\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n\n    this._previousValue = inputValue;\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      this._overlayRef = this._overlay.create(this._getOverlayConfig());\n\n      // Use the `keydownEvents` in order to take advantage of\n      // the overlay event targeting provided by the CDK overlay.\n      this._overlayRef.keydownEvents().subscribe(event => {\n        // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n        // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n        if (event.keyCode === ESCAPE || (event.keyCode === UP_ARROW && event.altKey)) {\n          this._resetActiveItem();\n          this._closeKeyEventStream.next();\n        }\n      });\n\n      if (this._viewportRuler) {\n        this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n          if (this.panelOpen && this._overlayRef) {\n            this._overlayRef.updateSize({width: this._getPanelWidth()});\n          }\n        });\n      }\n    } else {\n      // Update the panel width and direction, in case anything has changed.\n      this._overlayRef.updateSize({width: this._getPanelWidth()});\n    }\n\n    if (this._overlayRef && !this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    const wasOpen = this.panelOpen;\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._overlayAttached = true;\n\n    // We need to do an extra `panelOpen` check in here, because the\n    // autocomplete won't be shown if there are no options.\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\n      this.autocomplete.opened.emit();\n    }\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getPanelWidth(),\n      direction: this._dir\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy = this._overlay.position()\n      .flexibleConnectedTo(this._getConnectedElement())\n      .withFlexibleDimensions(false)\n      .withPush(false)\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom',\n\n          // The overlay edge connected to the trigger should have squared corners, while\n          // the opposite end has rounded corners. We apply a CSS class to swap the\n          // border-radius based on the overlay position.\n          panelClass: 'mat-autocomplete-panel-above'\n        }\n      ]);\n\n    return this._positionStrategy;\n  }\n\n  private _getConnectedElement(): ElementRef {\n    if (this.connectedTo) {\n      return this.connectedTo.elementRef;\n    }\n\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n  }\n\n  private _getPanelWidth(): number | string {\n    return this.autocomplete.panelWidth || this._getHostWidth();\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n  }\n\n  /** Determines whether the panel can be opened. */\n  private _canOpen(): boolean {\n    const element = this._element.nativeElement;\n    return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n    OCT = 9, NOV = 10, DEC = 11;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  animateChild,\n  group,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/**\n * Animations used by the Material expansion panel.\n *\n * A bug in angular animation's `state` when ViewContainers are moved using ViewContainerRef.move()\n * causes the animation state of moved components to become `void` upon exit, and not update again\n * upon reentry into the DOM.  This can lead a to situation for the expansion panel where the state\n * of the panel is `expanded` or `collapsed` but the animation state is `void`.\n *\n * To correctly handle animating to the next state, we animate between `void` and `collapsed` which\n * are defined to have the same styles. Since angular animates from the current styles to the\n * destination state's style definition, in situations where we are moving from `void`'s styles to\n * `collapsed` this acts a noop since no style values change.\n *\n * In the case where angular's animation state is out of sync with the expansion panel's state, the\n * expansion panel being `expanded` and angular animations being `void`, the animation from the\n * `expanded`'s effective styles (though in a `void` animation state) to the collapsed state will\n * occur as expected.\n *\n * Angular Bug: https://github.com/angular/angular/issues/18847\n *\n * @docs-private\n */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed, void', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed, void', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '48px'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '64px'}\n    }),\n    transition('expanded <=> collapsed, void => collapsed', group([\n      query('@indicatorRotate', animateChild(), {optional: true}),\n      animate(EXPANSION_PANEL_ANIMATION_TIMING),\n    ])),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed, void', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  A,\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  SPACE,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {CdkConnectedOverlay, Overlay, ScrollStrategy} from '@angular/cdk/overlay';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinErrorState,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {defer, merge, Observable, Subject} from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  startWith,\n  switchMap,\n  take,\n  takeUntil,\n} from 'rxjs/operators';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n// TODO(josephperrott): Revert to a constant after 2018 spec updates are fully merged.\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * Calculated as:\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 16px.\n */\nexport let SELECT_MULTIPLE_PANEL_PADDING_X = 0;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nexport class MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatSelectMixinBase:\n    CanDisableCtor &\n    HasTabIndexCtor &\n    CanDisableRippleCtor &\n    CanUpdateErrorStateCtor &\n    typeof MatSelectBase =\n        mixinDisableRipple(mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_getAriaLabel()',\n    '[attr.aria-labelledby]': '_getAriaLabelledby()',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    '[class.mat-select-empty]': 'empty',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanel\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  private _scrollStrategyFactory: () => ScrollStrategy;\n\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form. */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Emits when the panel element is finished transforming in. */\n  _panelDoneAnimatingStream = new Subject<string>();\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy: ScrollStrategy;\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the component is disabling centering of the active option over the trigger. */\n  private _disableOptionCentering: boolean = false;\n\n  /** Whether the select is focused. */\n  get focused(): boolean {\n    return this._focused || this._panelOpen;\n  }\n  /**\n   * @deprecated Setter to be removed as this property is intended to be readonly.\n   * @breaking-change 8.0.0\n   */\n  set focused(value: boolean) {\n    this._focused = value;\n  }\n  private _focused = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger') trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether to center the active option over the trigger. */\n  @Input()\n  get disableOptionCentering(): boolean { return this._disableOptionCentering; }\n  set disableOptionCentering(value: boolean) {\n    this._disableOptionCentering = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Function used to sort the values in a select in multiple mode.\n   * Follows the same logic as `Array.prototype.sort`.\n   */\n  @Input() sortComparator: (a: MatOption, b: MatOption, options: MatOption[]) => number;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.options) {\n      return merge(...this.options.map(option => option.onSelectionChange));\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  });\n\n  /** Event emitted when the select panel has been toggled. */\n  @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the select has been opened. */\n  @Output('opened') readonly _openedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => o), map(() => {}));\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed') readonly _closedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => !o), map(() => {}));\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectChange> =\n      new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) scrollStrategyFactory: any) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this._scrollStrategyFactory = scrollStrategyFactory;\n    this._scrollStrategy = this._scrollStrategyFactory();\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple);\n    this.stateChanges.next();\n\n    // We need `distinctUntilChanged` here, because some browsers will\n    // fire the animation end event twice for the same animation. See:\n    // https://github.com/angular/angular/issues/24084\n    this._panelDoneAnimatingStream\n      .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n      .subscribe(() => {\n        if (this.panelOpen) {\n          this._scrollTop = 0;\n          this.openedChange.emit(true);\n        } else {\n          this.openedChange.emit(false);\n          this.overlayDir.offsetX = 0;\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this._selectionModel.onChange.pipe(takeUntil(this._destroy)).subscribe(event => {\n      event.added.forEach(option => option.select());\n      event.removed.forEach(option => option.deselect());\n    });\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes.disabled) {\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement).fontSize || '0');\n\n    this._panelOpen = true;\n    this._keyManager.withHorizontalOrientation(null);\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n                       keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n    const manager = this._keyManager;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      if (keyCode === HOME || keyCode === END) {\n        keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        manager.onKeydown(event);\n      }\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else if (this._multiple && keyCode === A && event.ctrlKey) {\n      event.preventDefault();\n      const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n\n      this.options.forEach(option => {\n        if (!option.disabled) {\n          hasDeselectedOptions ? option.select() : option.deselect();\n        }\n      });\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this._focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this._focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._setPseudoCheckboxPaddingSize();\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  // TODO(josephperrott): Remove after 2018 spec updates are fully merged.\n  /** Sets the pseudo checkbox padding size based on the width of the pseudo checkbox. */\n  private _setPseudoCheckboxPaddingSize() {\n    if (!SELECT_MULTIPLE_PANEL_PADDING_X && this.multiple) {\n      const pseudoCheckbox = this.panel.nativeElement.querySelector('.mat-pseudo-checkbox');\n      if (pseudoCheckbox) {\n        SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + pseudoCheckbox.offsetWidth;\n      }\n    }\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[]): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._selectionModel.clear();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n      this._sortValues();\n    } else {\n      this._selectionModel.clear();\n      const correspondingOption = this._selectValue(value);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(correspondingOption);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      this._selectionModel.select(correspondingOption);\n    }\n\n    return correspondingOption;\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\n      .withTypeAhead()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n      // Restore focus to the trigger before closing. Ensures that the focus\n      // position won't be lost if the user got focus into the overlay.\n      this.focus();\n      this.close();\n    });\n\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n      this._onSelect(event.source, event.isUserInput);\n\n      if (event.isUserInput && !this.multiple && this._panelOpen) {\n        this.close();\n        this.focus();\n      }\n    });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption, isUserInput: boolean): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    if (option.value == null && !this._multiple) {\n      option.deselect();\n      this._selectionModel.clear();\n      this._propagateChanges(option.value);\n    } else {\n      option.selected ? this._selectionModel.select(option) : this._selectionModel.deselect(option);\n\n      if (isUserInput) {\n        this._keyManager.setActiveItem(option);\n      }\n\n      if (this.multiple) {\n        this._sortValues();\n\n        if (isUserInput) {\n          // In case the user selected the option with their mouse, we\n          // want to restore focus back to the trigger, in order to\n          // prevent the select keyboard controls from clashing with\n          // the ones from `mat-option`.\n          this.focus();\n        }\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n\n    this.stateChanges.next();\n  }\n\n  /** Sorts the selected values in the selected based on their order in the panel. */\n  private _sortValues() {\n    if (this.multiple) {\n      const options = this.options.toArray();\n\n      this._selectionModel.sort((a, b) => {\n        return this.sortComparator ? this.sortComparator(a, b, options) :\n                                     options.indexOf(a) - options.indexOf(b);\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options,\n        this.optionGroups);\n\n    this.panel.nativeElement.scrollTop = _getOptionScrollPosition(\n      activeOptionIndex + labelCount,\n      this._getItemHeight(),\n      this.panel.nativeElement.scrollTop,\n      SELECT_PANEL_MAX_HEIGHT\n    );\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number | undefined, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options,\n        this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  _getAriaLabel(): string | null {\n    // If an ariaLabelledby value has been set by the consumer, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Returns the aria-labelledby of the select component. */\n  _getAriaLabelledby(): string | null {\n    if (this.ariaLabelledby) {\n      return this.ariaLabelledby;\n    }\n\n    // Note: we use `_getAriaLabel` here, because we want to check whether there's a\n    // computed label. `this.ariaLabel` is only the user-specified label.\n    if (!this._parentFormField || !this._parentFormField._hasFloatingLabel() ||\n      this._getAriaLabel()) {\n      return null;\n    }\n\n    return this._parentFormField._labelId || null;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n    // blurry content in some browsers.\n    this.overlayDir.offsetX = Math.round(offsetX);\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    // Disable offset if requested by user by returning 0 as value to offset\n    if (this._disableOptionCentering) {\n      return 0;\n    }\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height difference,\n    // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n    // The value is rounded to prevent some browsers from blurring the content.\n    return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {BreakpointObserver, Breakpoints, BreakpointState} from '@angular/cdk/layout';\nimport {HammerLoader, HAMMER_LOADER} from '@angular/platform-browser';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConnectionPosition,\n  OverlayRef,\n  VerticalConnectionPos,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject, Observable} from 'rxjs';\nimport {matTooltipAnimations} from './tooltip-animations';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * @docs-private\n */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition({scrollThrottle: SCROLL_THROTTLE_MS});\n}\n\n/** @docs-private */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options', {\n      providedIn: 'root',\n      factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY(): MatTooltipDefaultOptions {\n  return {\n    showDelay: 0,\n    hideDelay: 0,\n    touchendHideDelay: 1500,\n  };\n}\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.io/design/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': '_handleTouchend()',\n  },\n})\nexport class MatTooltip implements OnDestroy {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _portal: ComponentPortal<TooltipComponent>;\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      if (this._overlayRef) {\n        this._updatePosition();\n\n        if (this._tooltipInstance) {\n          this._tooltipInstance!.show(0);\n        }\n\n        this._overlayRef.updatePosition();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay = this._defaultOptions.showDelay;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay = this._defaultOptions.hideDelay;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, EventListenerOrEventListenerObject>();\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) scrollStrategy: any,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions: MatTooltipDefaultOptions,\n    @Optional() @Inject(HAMMER_LOADER) hammerLoader?: HammerLoader) {\n\n    this._scrollStrategy = scrollStrategy;\n    const element: HTMLElement = _elementRef.nativeElement;\n    const elementStyle = element.style as CSSStyleDeclaration & {webkitUserDrag: string};\n    const hasGestures = typeof window === 'undefined' || (window as any).Hammer || hammerLoader;\n\n    // The mouse events shouldn't be bound on mobile devices, because they can prevent the\n    // first tap from firing its click event or can cause the tooltip to open for clicks.\n    if (!platform.IOS && !platform.ANDROID) {\n      this._manualListeners\n        .set('mouseenter', () => this.show())\n        .set('mouseleave', () => this.hide());\n    } else if (!hasGestures) {\n      // If Hammerjs isn't loaded, fall back to showing on `touchstart`, otherwise\n      // there's no way for the user to trigger the tooltip on a touch device.\n      this._manualListeners.set('touchstart', () => this.show());\n    }\n\n    this._manualListeners.forEach((listener, event) => element.addEventListener(event, listener));\n\n    if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS and in Safari, because it will prevent users from typing in inputs.\n      // Since `user-select: none` is not needed for the `longpress` event and can cause unexpected\n      // behavior for text fields, we always clear the `user-select` to avoid such issues.\n      elementStyle.webkitUserSelect = elementStyle.userSelect = elementStyle.msUserSelect = '';\n    }\n\n    // Hammer applies `-webkit-user-drag: none` on all elements by default,\n    // which breaks the native drag&drop. If the consumer explicitly made\n    // the element draggable, clear the `-webkit-user-drag`.\n    if (element.draggable && elementStyle.webkitUserDrag === 'none') {\n      elementStyle.webkitUserDrag = '';\n    }\n\n    _focusMonitor.monitor(_elementRef).pipe(takeUntil(this._destroyed)).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin === 'keyboard') {\n        _ngZone.run(() => this.show());\n      }\n    });\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._tooltipInstance = null;\n    }\n\n    // Clean up the event listeners set in the constructor\n    this._manualListeners.forEach((listener, event) => {\n      this._elementRef.nativeElement.removeEventListener(event, listener);\n    });\n    this._manualListeners.clear();\n\n    this._destroyed.next();\n    this._destroyed.complete();\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message || (this._isTooltipVisible() &&\n      !this._tooltipInstance!._showTimeoutId && !this._tooltipInstance!._hideTimeoutId)) {\n        return;\n    }\n\n    const overlayRef = this._createOverlay();\n\n    this._detach();\n    this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    this._tooltipInstance = overlayRef.attach(this._portal).instance;\n    this._tooltipInstance.afterHidden()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Handles the touchend events on the host element. */\n  _handleTouchend() {\n    this.hide(this._defaultOptions.touchendHideDelay);\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    if (this._overlayRef) {\n      return this._overlayRef;\n    }\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay.position()\n      .flexibleConnectedTo(this._elementRef)\n      .withTransformOriginOn('.mat-tooltip')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8);\n\n    const scrollableAncestors = this._scrollDispatcher\n      .getAncestorScrollContainers(this._elementRef);\n\n    strategy.withScrollableContainers(scrollableAncestors);\n\n    strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        }\n      }\n    });\n\n    this._overlayRef = this._overlay.create({\n      direction: this._dir,\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._updatePosition();\n\n    this._overlayRef.detachments()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n\n    return this._overlayRef;\n  }\n\n  /** Detaches the currently-attached tooltip. */\n  private _detach() {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /** Updates the position of the current tooltip. */\n  private _updatePosition() {\n    const position =\n        this._overlayRef!.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    position.withPositions([\n      {...origin.main, ...overlay.main},\n      {...origin.fallback, ...overlay.fallback}\n    ]);\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let originPosition: OriginConnectionPosition;\n\n    if (position == 'above' || position == 'below') {\n      originPosition = {originX: 'center', originY: position == 'above' ? 'top' : 'bottom'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      originPosition = {originX: 'start', originY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      originPosition = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(originPosition.originX, originPosition.originY);\n\n    return {\n      main: originPosition,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let overlayPosition: OverlayConnectionPosition;\n\n    if (position == 'above') {\n      overlayPosition = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (position == 'below') {\n      overlayPosition = {overlayX: 'center', overlayY: 'top'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      overlayPosition = {overlayX: 'end', overlayY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      overlayPosition = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n    return {\n      main: overlayPosition,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(\n        take(1),\n        takeUntil(this._destroyed)\n      ).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number | null;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number | null;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private readonly _onHide: Subject<any> = new Subject();\n\n  /** Stream that emits whether the user has a handset-sized display.  */\n  _isHandset: Observable<BreakpointState> = this._breakpointObserver.observe(Breakpoints.Handset);\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _breakpointObserver: BreakpointObserver) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n      this._hideTimeoutId = null;\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n      this._showTimeoutId = null;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n      this._showTimeoutId = null;\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n      this._hideTimeoutId = null;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      this._closeOnInteraction = true;\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.io/design/components/tooltips.html#behavior\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef, CdkFooterCell, CdkFooterCellDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends CdkCellDef {}\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends CdkHeaderCellDef {}\n\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matFooterCellDef]',\n  providers: [{provide: CdkFooterCellDef, useExisting: MatFooterCellDef}]\n})\nexport class MatFooterCellDef extends CdkFooterCellDef {}\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\n(MatCellDef as any)['ctorParameters'] = () => (CdkCellDef as any)['ctorParameters'];\n(MatHeaderCellDef as any)['ctorParameters'] = () => (CdkHeaderCellDef as any)['ctorParameters'];\n(MatFooterCellDef as any)['ctorParameters'] = () => (MatFooterCellDef as any)['ctorParameters'];\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [\n    {provide: CdkColumnDef, useExisting: MatColumnDef},\n    {provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: MatColumnDef}\n  ],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n\n  /** Whether this column should be sticky positioned at the start of the row */\n  @Input() sticky: boolean;\n\n  /** Whether this column should be sticky positioned on the end of the row */\n  @Input() stickyEnd: boolean;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell, th[mat-header-cell]',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef<HTMLElement>) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Footer cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-footer-cell, td[mat-footer-cell]',\n  host: {\n    'class': 'mat-footer-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatFooterCell extends CdkFooterCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell, td[mat-cell]',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef<HTMLElement>) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  ViewEncapsulation\n} from '@angular/core';\nimport {\n  CDK_ROW_TEMPLATE, CdkFooterRow, CdkFooterRowDef,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef,\n} from '@angular/cdk/table';\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef', 'sticky: matHeaderRowDefSticky'],\n})\nexport class MatHeaderRowDef extends CdkHeaderRowDef {}\n\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\n@Directive({\n  selector: '[matFooterRowDef]',\n  providers: [{provide: CdkFooterRowDef, useExisting: MatFooterRowDef}],\n  inputs: ['columns: matFooterRowDef', 'sticky: matFooterRowDefSticky'],\n})\nexport class MatFooterRowDef extends CdkFooterRowDef {}\n\n/**\n * Data row definition for the mat-table.\n * Captures the data row's template and other properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends CdkRowDef<T> {}\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\n(MatHeaderRowDef as any)['ctorParameters'] = () => (CdkHeaderRowDef as any)['ctorParameters'];\n(MatFooterRowDef as any)['ctorParameters'] = () => (CdkFooterRowDef as any)['ctorParameters'];\n(MatRowDef as any)['ctorParameters'] = () => (CdkRowDef as any)['ctorParameters'];\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row, tr[mat-header-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n  providers: [{provide: CdkHeaderRow, useExisting: MatHeaderRow}],\n})\nexport class MatHeaderRow extends CdkHeaderRow { }\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-footer-row, tr[mat-footer-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-footer-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matFooterRow',\n  providers: [{provide: CdkFooterRow, useExisting: MatFooterRow}],\n})\nexport class MatFooterRow extends CdkFooterRow { }\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row, tr[mat-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n  providers: [{provide: CdkRow, useExisting: MatRow}],\n})\nexport class MatRow extends CdkRow { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {\n  MatCell,\n  MatCellDef,\n  MatColumnDef,\n  MatFooterCell,\n  MatFooterCellDef,\n  MatHeaderCell,\n  MatHeaderCellDef\n} from './cell';\nimport {\n  MatFooterRow,\n  MatFooterRowDef,\n  MatHeaderRow,\n  MatHeaderRowDef,\n  MatRow,\n  MatRowDef\n} from './row';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\nconst EXPORTED_DECLARATIONS = [\n  // Table\n  MatTable,\n\n  // Template defs\n  MatHeaderCellDef,\n  MatHeaderRowDef,\n  MatColumnDef,\n  MatCellDef,\n  MatRowDef,\n  MatFooterCellDef,\n  MatFooterRowDef,\n\n  // Cell directives\n  MatHeaderCell,\n  MatCell,\n  MatFooterCell,\n\n  // Row directions\n  MatHeaderRow,\n  MatRow,\n  MatFooterRow,\n];\n\n@NgModule({\n  imports: [CdkTableModule, CommonModule, MatCommonModule],\n  exports: EXPORTED_DECLARATIONS,\n  declarations: EXPORTED_DECLARATIONS,\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {_isNumberValue} from '@angular/cdk/coercion';\nimport {DataSource} from '@angular/cdk/table';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  merge,\n  Observable,\n  of as observableOf,\n  Subscription\n} from 'rxjs';\nimport {MatPaginator, PageEvent} from '@angular/material/paginator';\nimport {MatSort, Sort} from '@angular/material/sort';\nimport {map} from 'rxjs/operators';\n\n/**\n * Corresponds to `Number.MAX_SAFE_INTEGER`. Moved out into a variable here due to\n * flaky browser support and the value not being defined in Closure's typings.\n */\nconst MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport class MatTableDataSource<T> extends DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private readonly _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private readonly _filter = new BehaviorSubject<string>('');\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription = Subscription.EMPTY;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() { return this._data.value; }\n  set data(data: T[]) { this._data.next(data); }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter(): string { return this._filter.value; }\n  set filter(filter: string) { this._filter.next(filter); }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort(): MatSort | null { return this._sort; }\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): MatPaginator | null { return this._paginator; }\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting through\n   * the default sortData function.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value = (data as {[key: string]: any})[sortHeaderId];\n\n    if (_isNumberValue(value)) {\n      const numberValue = Number(value);\n\n      // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we\n      // leave them as strings. For more info: https://goo.gl/y5vbSg\n      return numberValue < MAX_SAFE_INTEGER ? numberValue : value;\n    }\n\n    return value;\n  }\n\n  /**\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n   * By default, the function retrieves the active sort and its direction and compares data\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n   * of data ordering.\n   * @param data The array of data that should be sorted.\n   * @param sort The connected MatSort that holds the current sort state.\n   */\n  sortData: ((data: T[], sort: MatSort) => T[]) = (data: T[], sort: MatSort): T[] => {\n    const active = sort.active;\n    const direction = sort.direction;\n    if (!active || direction == '') { return data; }\n\n    return data.sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n      // one value exists while the other doesn't. In this case, existing value should come first.\n      // This avoids inconsistent results when comparing values to undefined/null.\n      // If neither value exists, return 0 (equal).\n      let comparatorResult = 0;\n      if (valueA != null && valueB != null) {\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      } else if (valueA != null) {\n        comparatorResult = 1;\n      } else if (valueB != null) {\n        comparatorResult = -1;\n      }\n\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const dataStr = Object.keys(data).reduce((currentTerm: string, key: string) => {\n      // Use an obscure Unicode character to delimit the words in the concatenated string.\n      // This avoids matches where the values of two columns combined will match the user's query\n      // (e.g. `Flute` and `Stop` will match `Test`). The character is intended to be something\n      // that has a very low chance of being typed in by somebody in a text field. This one in\n      // particular is \"White up-pointing triangle with dot\" from\n      // https://en.wikipedia.org/wiki/List_of_Unicode_characters\n      return currentTerm + (data as {[key: string]: any})[key] + '◬';\n    }, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // The events should emit whenever the component emits a change or initializes, or if no\n    // component is provided, a stream with just a null event should be provided.\n    // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n    // pipeline can progress to the next step. Note that the value from these streams are not used,\n    // they purely act as a signal to progress in the pipeline.\n    const sortChange: Observable<Sort|null|void> = this._sort ?\n        merge<Sort|void>(this._sort.sortChange, this._sort.initialized) :\n        observableOf(null);\n    const pageChange: Observable<PageEvent|null|void> = this._paginator ?\n        merge<PageEvent|void>(this._paginator.page, this._paginator.initialized) :\n        observableOf(null);\n\n    const dataStream = this._data;\n    // Watch for base data or filter changes to provide a filtered set of data.\n    const filteredData = combineLatest(dataStream, this._filter)\n      .pipe(map(([data]) => this._filterData(data)));\n    // Watch for filtered data or sort changes to provide an ordered set of data.\n    const orderedData = combineLatest(filteredData, sortChange)\n      .pipe(map(([data]) => this._orderData(data)));\n    // Watch for ordered data or page changes to provide a paged set of data.\n    const paginatedData = combineLatest(orderedData, pageChange)\n      .pipe(map(([data]) => this._pageData(data)));\n    // Watched for paged data changes and send the result to the table to render.\n    this._renderChangesSubscription.unsubscribe();\n    this._renderChangesSubscription = paginatedData.subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overridden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) { return data; }\n\n    return this.sortData(data.slice(), this.sort);\n  }\n\n  /**\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice().splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      if (!this.paginator) { return; }\n\n      this.paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (this.paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(this.paginator.length / this.paginator.pageSize) - 1 || 0;\n        this.paginator.pageIndex = Math.min(this.paginator.pageIndex, lastPageIndex);\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Inject, InjectionToken, NgZone} from '@angular/core';\n\n\n/**\n * Interface for a a MatInkBar positioner method, defining the positioning and width of the ink\n * bar in a set of tabs.\n */\n// tslint:disable-next-line class-name Using leading underscore to denote internal interface.\nexport interface _MatInkBarPositioner {\n  (element: HTMLElement): { left: string, width: string };\n}\n\n/** Injection token for the MatInkBar's Positioner. */\nexport const _MAT_INK_BAR_POSITIONER =\n  new InjectionToken<_MatInkBarPositioner>('MatInkBarPositioner', {\n    providedIn: 'root',\n    factory: _MAT_INK_BAR_POSITIONER_FACTORY\n  });\n\n/**\n * The default positioner function for the MatInkBar.\n * @docs-private\n */\nexport function _MAT_INK_BAR_POSITIONER_FACTORY(): _MatInkBarPositioner {\n  const method = (element: HTMLElement) => ({\n    left: element ? (element.offsetLeft || 0) + 'px' : '0',\n    width: element ? (element.offsetWidth || 0) + 'px' : '0',\n  });\n\n  return method;\n}\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(_MAT_INK_BAR_POSITIONER) private _inkBarPositioner: _MatInkBarPositioner) { }\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n  private _setStyles(element: HTMLElement) {\n    const positions = this._inkBarPositioner(element);\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\n\n    inkBar.style.left = positions.left;\n    inkBar.style.width = positions.width;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/** Decorates the `ng-template` tags and reads out the template from it. */\n@Directive({selector: '[matTabContent]'})\nexport class MatTabContent {\n  constructor(public template: TemplateRef<any>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n})\nexport class MatTabLabel extends CdkPortal {}\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\n(MatTabLabel as any)['ctorParameters'] = () => (CdkPortal as any)['ctorParameters'];\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {MatTabContent} from './tab-content';\nimport {MatTabLabel} from './tab-label';\n\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nexport class MatTabBase {}\nexport const _MatTabMixinBase: CanDisableCtor & typeof MatTabBase =\n    mixinDisabled(MatTabBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matTab',\n})\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n  @ContentChild(MatTabLabel) templateLabel: MatTabLabel;\n\n  /**\n   * Template provided in the tab content that will be used if present, used to enable lazy-loading\n   */\n  @ContentChild(MatTabContent, {read: TemplateRef}) _explicitContent: TemplateRef<any>;\n\n  /** Template inside the MatTab view that contains an `<ng-content>`. */\n  @ViewChild(TemplateRef) _implicitContent: TemplateRef<any>;\n\n  /** Plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** Aria label for the tab. */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Reference to the element that the tab is labelled by.\n   * Will be cleared if `aria-label` is set at the same time.\n   */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the internal state of the tab changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel') || changes.hasOwnProperty('disabled')) {\n      this._stateChanges.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._stateChanges.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(\n        this._explicitContent || this._implicitContent, this._viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material tabs.\n * @docs-private\n */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n\n    // If the tab is either on the left or right, we additionally add a `min-height` of 1px\n    // in order to ensure that the element has a height before its state changes. This is\n    // necessary because Chrome does seem to skip the transition in RTL mode if the element does\n    // not have a static height and is not rendered. See related issue: #9465\n    state('left', style({transform: 'translate3d(-100%, 0, 0)', minHeight: '1px'})),\n    state('right', style({transform: 'translate3d(100%, 0, 0)', minHeight: '1px'})),\n\n    transition('* => left, * => right, left => center, right => center',\n        animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)'}),\n      animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)'}),\n      animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n    ])\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectorRef,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n  ViewChild,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet, PortalHostDirective} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {Subscription, Subject} from 'rxjs';\nimport {matTabsAnimations} from './tabs-animations';\nimport {startWith, distinctUntilChanged} from 'rxjs/operators';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]'\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** Subscription to events for when the tab body begins centering. */\n  private _centeringSub = Subscription.EMPTY;\n  /** Subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub = Subscription.EMPTY;\n\n  constructor(\n    componentFactoryResolver: ComponentFactoryResolver,\n    viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\n      super(componentFactoryResolver, viewContainerRef);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    this._centeringSub = this._host._beforeCentering\n      .pipe(startWith(this._host._isCenterPosition(this._host._position)))\n      .subscribe((isCentering: boolean) => {\n        if (isCentering && !this.hasAttached()) {\n          this.attach(this._host._content);\n        }\n      });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  /** Clean up centering subscription. */\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this._centeringSub.unsubscribe();\n    this._leavingSub.unsubscribe();\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  },\n})\nexport class MatTabBody implements OnInit, OnDestroy {\n\n  /** Current position of the tab-body in the tab-group. Zero means that the tab is visible. */\n  private _positionIndex: number;\n\n  /** Subscription to the directionality change observable. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** Tab body position state. Used by the animation trigger for the current state. */\n  _position: MatTabBodyPositionState;\n\n  /** Emits when an animation on the tab is complete. */\n  _translateTabComplete = new Subject<AnimationEvent>();\n\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() readonly _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() readonly _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n   /** The portal host inside of this container into which the tab body content will be loaded. */\n  @ViewChild(PortalHostDirective) _portalHost: PortalHostDirective;\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal;\n\n  /** Position that will be used when the tab is immediately becoming visible after creation. */\n  @Input() origin: number;\n\n  // Note that the default value will always be overwritten by `MatTabBody`, but we need one\n  // anyway to prevent the animations module from throwing an error if the body is used on its own.\n  /** Duration for the tab's animation. */\n  @Input() animationDuration: string = '500ms';\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  @Input()\n  set position(position: number) {\n    this._positionIndex = position;\n    this._computePositionAnimationState();\n  }\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality,\n              /**\n               * @breaking-change 8.0.0 changeDetectorRef to be made required.\n               */\n              changeDetectorRef?: ChangeDetectorRef) {\n\n    if (this._dir && changeDetectorRef) {\n      this._dirChangeSubscription = this._dir.change.subscribe((dir: Direction) => {\n        this._computePositionAnimationState(dir);\n        changeDetectorRef.markForCheck();\n      });\n    }\n\n    // Ensure that we get unique animation events, because the `.done` callback can get\n    // invoked twice in some browsers. See https://github.com/angular/angular/issues/24084.\n    this._translateTabComplete.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe(event => {\n      // If the transition to the center is complete, emit an event.\n      if (this._isCenterPosition(event.toState) && this._isCenterPosition(this._position)) {\n        this._onCentered.emit();\n      }\n\n      if (this._isCenterPosition(event.fromState) && !this._isCenterPosition(this._position)) {\n        this._afterLeavingCenter.emit();\n      }\n    });\n  }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this.origin != null) {\n      this._position = this._computePositionFromOrigin();\n    }\n  }\n\n  ngOnDestroy() {\n    this._dirChangeSubscription.unsubscribe();\n    this._translateTabComplete.complete();\n  }\n\n  _onTranslateTabStarted(event: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(event.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\n\n  /** Computes the position state that will be used for the tab-body animation trigger. */\n  private _computePositionAnimationState(dir: Direction = this._getLayoutDirection()) {\n    if (this._positionIndex < 0) {\n      this._position = dir == 'ltr' ? 'left' : 'right';\n    } else if (this._positionIndex > 0) {\n      this._position = dir == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n\n  /**\n   * Computes the position state based on the specified origin position. This is used if the\n   * tab is becoming visible immediately after creation.\n   */\n  private _computePositionFromOrigin(): MatTabBodyPositionState {\n    const dir = this._getLayoutDirection();\n\n    if ((dir == 'ltr' && this.origin <= 0) || (dir == 'rtl' && this.origin > 0)) {\n      return 'left-origin-center';\n    }\n\n    return 'right-origin-center';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\n\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nexport class MatTabLabelWrapperBase {}\nexport const _MatTabLabelWrapperMixinBase: CanDisableCtor & typeof MatTabLabelWrapperBase =\n    mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled',\n    '[attr.aria-disabled]': '!!disabled',\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {END, ENTER, HOME, SPACE} from '@angular/cdk/keycodes';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, CanDisableRippleCtor, mixinDisableRipple} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\n\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n// Boilerplate for applying mixins to MatTabHeader.\n/** @docs-private */\nexport class MatTabHeaderBase {}\nexport const _MatTabHeaderMixinBase: CanDisableRippleCtor & typeof MatTabHeaderBase =\n    mixinDisableRipple(MatTabHeaderBase);\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends _MatTabHeaderMixinBase\n    implements AfterContentChecked, AfterContentInit, OnDestroy, CanDisableRipple {\n\n  @ContentChildren(MatTabLabelWrapper) _labelWrappers: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer') _tabListContainer: ElementRef;\n  @ViewChild('tabList') _tabList: ElementRef;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  /** Used to manage focus between the tabs. */\n  private _keyManager: FocusKeyManager<MatTabLabelWrapper>;\n\n  private _selectedIndex: number = 0;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number { return this._selectedIndex; }\n  set selectedIndex(value: number) {\n    value = coerceNumberProperty(value);\n    this._selectedIndexChanged = this._selectedIndex != value;\n    this._selectedIndex = value;\n\n    if (this._keyManager) {\n      this._keyManager.updateActiveItemIndex(value);\n    }\n  }\n\n  /** Event emitted when the option is selected. */\n  @Output() readonly selectFocusedIndex = new EventEmitter();\n\n  /** Event emitted when a label is focused. */\n  @Output() readonly indexFocused = new EventEmitter();\n\n  constructor(private _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() private _dir: Directionality,\n              // @breaking-change 8.0.0 `_ngZone` parameter to be made required.\n              private _ngZone?: NgZone) {\n    super();\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this._updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case HOME:\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n        break;\n      case END:\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        event.preventDefault();\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Aligns the ink bar to the selected tab on load.\n   */\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this._updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    this._keyManager = new FocusKeyManager(this._labelWrappers)\n      .withHorizontalOrientation(this._getLayoutDirection())\n      .withWrap();\n\n    this._keyManager.updateActiveItem(0);\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n\n    // On dir change or window resize, realign the ink bar and update the orientation of\n    // the key manager if the direction has changed.\n    merge(dirChange, resize).pipe(takeUntil(this._destroyed)).subscribe(() => {\n      realign();\n      this._keyManager.withHorizontalOrientation(this._getLayoutDirection());\n    });\n\n    // If there is a change in the focus key manager we need to emit the `indexFocused`\n    // event in order to provide a public event that notifies about focus changes. Also we realign\n    // the tabs container by scrolling the new focused tab into the visible section.\n    this._keyManager.change.pipe(takeUntil(this._destroyed)).subscribe(newFocusIndex => {\n      this.indexFocused.emit(newFocusIndex);\n      this._setTabFocus(newFocusIndex);\n    });\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    const zoneCallback = () => {\n      this._updatePagination();\n      this._alignInkBarToSelectedTab();\n      this._changeDetectorRef.markForCheck();\n    };\n\n    // The content observer runs outside the `NgZone` by default, which\n    // means that we need to bring the callback back in ourselves.\n    // @breaking-change 8.0.0 Remove null check for `_ngZone` once it's a required parameter.\n    this._ngZone ? this._ngZone.run(zoneCallback) : zoneCallback();\n  }\n\n  /**\n   * Updating the view whether pagination should be enabled or not\n   */\n  _updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number {\n    return this._keyManager ? this._keyManager.activeItemIndex! : 0;\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this.focusIndex === value || !this._keyManager) {\n      return;\n    }\n\n    this._keyManager.setActiveItem(value);\n  }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    const scrollDistance = this.scrollDistance;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    // Don't use `translate3d` here because we don't want to create a new layer. A new layer\n    // seems to cause flickering and overflow in Internet Explorer. For example, the ink bar\n    // and ripples will exceed the boundaries of the visible tab bar.\n    // See: https://github.com/angular/material2/issues/10276\n    this._tabList.nativeElement.style.transform = `translateX(${translateX}px)`;\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  get scrollDistance(): number { return this._scrollDistance; }\n  set scrollDistance(v: number) {\n    this._scrollDistance = Math.max(0, Math.min(this._getMaxScrollDistance(), v));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n  }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(scrollDir: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    this.scrollDistance += (scrollDir == 'before' ? -1 : 1) * viewLength / 3;\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    const selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    const isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  _alignInkBarToSelectedTab(): void {\n    const selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\n        null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper!);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata, query, animateChild,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/**\n * Animations used by MatSort.\n * @docs-private\n */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly arrowOpacity: AnimationTriggerMetadata;\n  readonly arrowPosition: AnimationTriggerMetadata;\n  readonly allowChildren: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('active-asc, asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('active-desc, desc', style({transform: 'translateY(10px)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('active-asc, asc', style({transform: 'rotate(-45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('active-asc, asc', style({transform: 'rotate(45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(-45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that controls the arrow opacity. */\n  arrowOpacity: trigger('arrowOpacity', [\n    state('desc-to-active, asc-to-active, active', style({opacity: 1})),\n    state('desc-to-hint, asc-to-hint, hint', style({opacity: .54})),\n    state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc, void',\n        style({opacity: 0})),\n    // Transition between all states except for immediate transitions\n    transition('* => asc, * => desc, * => active, * => hint, * => void', animate('0ms')),\n    transition('* <=> *', animate(SORT_ANIMATION_TRANSITION)),\n  ]),\n\n  /**\n   * Animation for the translation of the arrow as a whole. States are separated into two\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n   * peek, and active. The other states define a specific animation (source-to-destination)\n   * and are determined as a function of their prev user-perceived state and what the next state\n   * should be.\n   */\n  arrowPosition: trigger('arrowPosition', [\n    // Hidden Above => Hint Center\n    transition('* => desc-to-hint, * => desc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(-25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Below\n    transition('* => hint-to-desc, * => active-to-desc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(25%)'})\n        ]))),\n    // Hidden Below => Hint Center\n    transition('* => asc-to-hint, * => asc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Above\n    transition('* => hint-to-asc, * => active-to-asc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(-25%)'})\n        ]))),\n    state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active',\n        style({transform: 'translateY(0)'})),\n    state('hint-to-desc, active-to-desc, desc',\n        style({transform: 'translateY(-25%)'})),\n    state('hint-to-asc, active-to-asc, asc',\n        style({transform: 'translateY(25%)'})),\n  ]),\n\n  /** Necessary trigger that calls animate on children animations. */\n  allowChildren: trigger('allowChildren', [\n    transition('* <=> *', [\n      query('@*', animateChild(), {optional: true})\n    ])\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable({providedIn: 'root'})\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatSort, MatSortable} from './sort';\nimport {matSortAnimations} from './sort-animations';\nimport {SortDirection} from './sort-direction';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {MatSortHeaderIntl} from './sort-header-intl';\n\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nexport class MatSortHeaderBase {}\nexport const _MatSortHeaderMixinBase: CanDisableCtor & typeof MatSortHeaderBase =\n    mixinDisabled(MatSortHeaderBase);\n\n/**\n * Valid positions for the arrow to be in for its opacity and translation. If the state is a\n * sort direction, the position of the arrow will be above/below and opacity 0. If the state is\n * hint, the arrow will be in the center with a slight opacity. Active state means the arrow will\n * be fully opaque in the center.\n *\n * @docs-private\n */\nexport type ArrowViewState = SortDirection | 'hint' | 'active';\n\n/**\n * States describing the arrow's animated position (animating fromState to toState).\n * If the fromState is not defined, there will be no animated transition to the toState.\n * @docs-private\n */\nexport interface ArrowViewStateTransition {\n  fromState?: ArrowViewState;\n  toState: ArrowViewState;\n}\n\n/** Column definition associated with a `MatSortHeader`. */\ninterface MatSortHeaderColumnDef {\n  name: string;\n}\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_handleClick()',\n    '(mouseenter)': '_setIndicatorHintVisible(true)',\n    '(longpress)': '_setIndicatorHintVisible(true)',\n    '(mouseleave)': '_setIndicatorHintVisible(false)',\n    '[attr.aria-sort]': '_getAriaSortAttribute()',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.arrowOpacity,\n    matSortAnimations.arrowPosition,\n    matSortAnimations.allowChildren,\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase\n    implements CanDisable, MatSortable, OnDestroy, OnInit {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n   * provide an affordance that the header is sortable by showing on focus and hover.\n   */\n  _showIndicatorHint: boolean = false;\n\n  /**\n   * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n   * position through the animation. If animations are currently disabled, the fromState is removed\n   * so that there is no animation displayed.\n   */\n  _viewState: ArrowViewStateTransition;\n\n  /** The direction the arrow should be facing according to the current state. */\n  _arrowDirection: SortDirection = '';\n\n  /**\n   * Whether the view state animation should show the transition between the `from` and `to` states.\n   */\n  _disableViewStateAnimation = false;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input() start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Inject('MAT_SORT_HEADER_COLUMN_DEF') @Optional()\n                  public _columnDef: MatSortHeaderColumnDef) {\n    // Note that we use a string token for the `_columnDef`, because the value is provided both by\n    // `material/table` and `cdk/table` and we can't have the CDK depending on Material,\n    // and we want to avoid having the sort header depending on the CDK table because\n    // of this single reference.\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n        .subscribe(() => {\n          if (this._isSorted()) {\n            this._updateArrowDirection();\n          }\n\n          // If this header was recently active and now no longer sorted, animate away the arrow.\n          if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = false;\n            this._setAnimationTransitionState({fromState: 'active', toState: this._arrowDirection});\n          }\n\n          changeDetectorRef.markForCheck();\n        });\n  }\n\n  ngOnInit() {\n    if (!this.id && this._columnDef) {\n      this.id = this._columnDef.name;\n    }\n\n    // Initialize the direction of the arrow and set the view state to be immediately that state.\n    this._updateArrowDirection();\n    this._setAnimationTransitionState(\n        {toState: this._isSorted() ? 'active' : this._arrowDirection});\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /**\n   * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n   * user showing what the active sort will become. If set to false, the arrow will fade away.\n   */\n  _setIndicatorHintVisible(visible: boolean) {\n    // No-op if the sort header is disabled - should not make the hint visible.\n    if (this._isDisabled() && visible) { return; }\n\n    this._showIndicatorHint = visible;\n\n    if (!this._isSorted()) {\n      this._updateArrowDirection();\n      if (this._showIndicatorHint) {\n        this._setAnimationTransitionState({fromState: this._arrowDirection, toState: 'hint'});\n      } else {\n        this._setAnimationTransitionState({fromState: 'hint', toState: this._arrowDirection});\n      }\n    }\n  }\n\n  /**\n   * Sets the animation transition view state for the arrow's position and opacity. If the\n   * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n   * no animation appears.\n   */\n  _setAnimationTransitionState(viewState: ArrowViewStateTransition) {\n    this._viewState = viewState;\n\n    // If the animation for arrow position state (opacity/translation) should be disabled,\n    // remove the fromState so that it jumps right to the toState.\n    if (this._disableViewStateAnimation) {\n      this._viewState = {toState: viewState.toState};\n    }\n  }\n\n  /** Triggers the sort on this sort header and removes the indicator hint. */\n  _handleClick() {\n    if (this._isDisabled()) { return; }\n\n    this._sort.sort(this);\n\n    // Do not show the animation if the header was already shown in the right position.\n    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n      this._disableViewStateAnimation = true;\n    }\n\n    // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n    // the direction it is facing.\n    const viewState: ArrowViewStateTransition = this._isSorted() ?\n        {fromState: this._arrowDirection, toState: 'active'} :\n        {fromState: 'active', toState: this._arrowDirection};\n    this._setAnimationTransitionState(viewState);\n\n    this._showIndicatorHint = false;\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  /** Returns the animation state for the arrow direction (indicator and pointers). */\n  _getArrowDirectionState() {\n    return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n  }\n\n  /** Returns the arrow position state (opacity, translation). */\n  _getArrowViewState() {\n    const fromState = this._viewState.fromState;\n    return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n  }\n\n  /**\n   * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n   * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n   * active sorted direction. The reason this is updated through a function is because the direction\n   * should only be changed at specific times - when deactivated but the hint is displayed and when\n   * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n   * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n   * preserving its direction, even though the next sort direction is actually different and should\n   * only be changed once the arrow displays again (hint or activation).\n   */\n  _updateArrowDirection() {\n    this._arrowDirection = this._isSorted() ?\n        this._sort.direction :\n        (this.start || this._sort.start);\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n\n  /**\n   * Gets the aria-sort attribute that should be applied to this sort header. If this header\n   * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n   * says that the aria-sort property should only be present on one header at a time, so removing\n   * ensures this is true.\n   */\n  _getAriaSortAttribute() {\n    if (!this._isSorted()) { return null; }\n\n    return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n\n@Directive({\n  selector: '[matStepLabel]',\n})\nexport class MatStepLabel extends CdkStepLabel {}\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\n(MatStepLabel as any)['ctorParameters'] = () => (CdkStepLabel as any)['ctorParameters'];\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Stepper data that is required for internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** Label that is rendered below optional steps. */\n  optionalLabel: string = 'Optional';\n}\n\n\n/** @docs-private */\nexport function MAT_STEPPER_INTL_PROVIDER_FACTORY(parentIntl: MatStepperIntl) {\n  return parentIntl || new MatStepperIntl();\n}\n\n/** @docs-private */\nexport const MAT_STEPPER_INTL_PROVIDER = {\n  provide: MatStepperIntl,\n  deps: [[new Optional(), new SkipSelf(), MatStepperIntl]],\n  useFactory: MAT_STEPPER_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  TemplateRef,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperIntl} from './stepper-intl';\nimport {MatStepperIconContext} from './stepper-icon';\nimport {CdkStepHeader, StepState} from '@angular/cdk/stepper';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStepHeader extends CdkStepHeader implements OnDestroy {\n  private _intlSubscription: Subscription;\n\n  /** State of the given step. */\n  @Input() state: StepState;\n\n  /** Label of the given step. */\n  @Input() label: MatStepLabel | string;\n\n  /** Error message to display when there's an error. */\n  @Input() errorMessage: string;\n\n  /** Overrides for the header icons, passed in via the stepper. */\n  @Input() iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>};\n\n  /** Index of the given step. */\n  @Input() index: number;\n\n  /** Whether the given step is selected. */\n  @Input() selected: boolean;\n\n  /** Whether the given step label is active. */\n  @Input() active: boolean;\n\n  /** Whether the given step is optional. */\n  @Input() optional: boolean;\n\n  constructor(\n    public _intl: MatStepperIntl,\n    private _focusMonitor: FocusMonitor,\n    _elementRef: ElementRef<HTMLElement>,\n    changeDetectorRef: ChangeDetectorRef) {\n    super(_elementRef);\n    _focusMonitor.monitor(_elementRef, true);\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Returns string label of given step if it is a text label. */\n  _stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n\n  /** Returns MatStepLabel if the label of given step is a template label. */\n  _templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n\n  /** Returns the host HTML element. */\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Template context variables that are exposed to the `matStepperIcon` instances. */\n  _getIconContext(): MatStepperIconContext {\n    return {\n      index: this.index,\n      active: this.active,\n      optional: this.optional\n    };\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material steppers.\n * @docs-private\n */\nexport const matStepperAnimations: {\n  readonly horizontalStepTransition: AnimationTriggerMetadata;\n  readonly verticalStepTransition: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions the step along the X axis in a horizontal stepper. */\n  horizontalStepTransition: trigger('stepTransition', [\n    state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n    state('current', style({transform: 'none', visibility: 'visible'})),\n    state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n    transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n  ]),\n\n  /** Animation that transitions the step along the Y axis in a vertical stepper. */\n  verticalStepTransition: trigger('stepTransition', [\n    state('previous', style({height: '0px', visibility: 'hidden'})),\n    state('next', style({height: '0px', visibility: 'hidden'})),\n    state('current', style({height: '*', visibility: 'visible'})),\n    transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, TemplateRef} from '@angular/core';\nimport {StepState} from '@angular/cdk/stepper';\n\n/** Template context available to an attached `matStepperIcon`. */\nexport interface MatStepperIconContext {\n  /** Index of the step. */\n  index: number;\n  /** Whether the step is currently active. */\n  active: boolean;\n  /** Whether the step is optional. */\n  optional: boolean;\n}\n\n/**\n * Template to be used to override the icons inside the step header.\n */\n@Directive({\n  selector: 'ng-template[matStepperIcon]',\n})\nexport class MatStepperIcon {\n  /** Name of the icon to be overridden. */\n  @Input('matStepperIcon') name: StepState;\n\n  constructor(public templateRef: TemplateRef<MatStepperIconContext>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  CdkStep,\n  CdkStepper,\n  StepContentPositionState,\n  MAT_STEPPER_GLOBAL_OPTIONS,\n  StepperOptions\n} from '@angular/cdk/stepper';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  QueryList,\n  SkipSelf,\n  TemplateRef,\n  ViewChildren,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {DOCUMENT} from '@angular/common';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {takeUntil, distinctUntilChanged} from 'rxjs/operators';\n\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {matStepperAnimations} from './stepper-animations';\nimport {MatStepperIcon, MatStepperIconContext} from './stepper-icon';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: ErrorStateMatcher, useExisting: MatStep}],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matStep',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\n  /** Content for step label given by `<ng-template matStepLabel>`. */\n  @ContentChild(MatStepLabel) stepLabel: MatStepLabel;\n\n  /** @breaking-change 8.0.0 remove the `?` after `stepperOptions` */\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher,\n              @Optional() @Inject(MAT_STEPPER_GLOBAL_OPTIONS) stepperOptions?: StepperOptions) {\n    super(stepper, stepperOptions);\n  }\n\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    const customErrorState = !!(control && control.invalid && this.interacted);\n\n    return originalErrorState || customErrorState;\n  }\n}\n\n\n@Directive({\n  selector: '[matStepper]'\n})\nexport class MatStepper extends CdkStepper implements AfterContentInit {\n  /** The list of step headers of the steps in the stepper. */\n  @ViewChildren(MatStepHeader) _stepHeader: QueryList<MatStepHeader>;\n\n  /** Steps that the stepper holds. */\n  @ContentChildren(MatStep) _steps: QueryList<MatStep>;\n\n  /** Custom icon overrides passed in by the consumer. */\n  @ContentChildren(MatStepperIcon) _icons: QueryList<MatStepperIcon>;\n\n  /** Event emitted when the current step is done transitioning in. */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Consumer-specified template-refs to be used to override the header icons. */\n  _iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>} = {};\n\n  /** Stream of animation `done` events when the body expands/collapses. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  ngAfterContentInit() {\n    this._icons.forEach(({name, templateRef}) => this._iconOverrides[name] = templateRef);\n\n    // Mark the component for change detection whenever the content children query changes\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\n\n    this._animationDone.pipe(\n      // This needs a `distinctUntilChanged` in order to avoid emitting the same event twice due\n      // to a bug in animations where the `.done` callback gets invoked twice on some browsers.\n      // See https://github.com/angular/angular/issues/24084\n      distinctUntilChanged((x, y) => x.fromState === y.fromState && x.toState === y.toState),\n      takeUntil(this._destroyed)\n    ).subscribe(event => {\n      if ((event.toState as StepContentPositionState) === 'current') {\n        this.animationDone.emit();\n      }\n    });\n  }\n}\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\n(MatStepper as any)['ctorParameters'] = () => (CdkStepper as any)['ctorParameters'];\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-horizontal-stepper',\n  exportAs: 'matHorizontalStepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    '[class.mat-stepper-label-position-end]': 'labelPosition == \"end\"',\n    '[class.mat-stepper-label-position-bottom]': 'labelPosition == \"bottom\"',\n    'aria-orientation': 'horizontal',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.horizontalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatHorizontalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatHorizontalStepper extends MatStepper {\n  /** Whether the label should display in bottom or end position. */\n  @Input()\n  labelPosition: 'bottom' | 'end' = 'end';\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-vertical-stepper',\n  exportAs: 'matVerticalStepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'aria-orientation': 'vertical',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.verticalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatVerticalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatVerticalStepper extends MatStepper {\n  constructor(\n    @Optional() dir: Directionality,\n    changeDetectorRef: ChangeDetectorRef,\n    // @breaking-change 8.0.0 `elementRef` and `_document` parameters to become required.\n    elementRef?: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) _document?: any) {\n    super(dir, changeDetectorRef, elementRef, _document);\n    this._orientation = 'vertical';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepper, CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {MatStepper} from './stepper';\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperNext]',\n  host: {\n    '(click)': '_stepper.next()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperNext extends CdkStepperNext {}\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperPrevious]',\n  host: {\n    '(click)': '_stepper.previous()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperPrevious extends CdkStepperPrevious {}\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\n(MatStepperNext as any)['ctorParameters'] = () => (CdkStepperNext as any)['ctorParameters'];\n(MatStepperPrevious as any)['ctorParameters'] = () =>\n    (CdkStepperPrevious as any)['ctorParameters'];\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {ErrorStateMatcher, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nimport {MatStepperIcon} from './stepper-icon';\nimport {MAT_STEPPER_INTL_PROVIDER} from './stepper-intl';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule,\n    MatRippleModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  declarations: [\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  providers: [MAT_STEPPER_INTL_PROVIDER, ErrorStateMatcher],\n})\nexport class MatStepperModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table, table[mat-table]',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTable<T> extends CdkTable<T> {\n  /** Overrides the sticky CSS class set by the `CdkTable`. */\n  protected stickyCssClass = 'mat-table-sticky';\n}\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\n(MatTable as any)['ctorParameters'] = () => (CdkTable as any)['ctorParameters'];\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  HammerInput,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subscription} from 'rxjs';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n * @docs-private\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nexport class MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSliderMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableCtor &\n    typeof MatSliderBase =\n        mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(mousedown)': '_onMousedown($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert(): boolean { return this._invert; }\n  set invert(value: boolean) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundToDecimal = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value: boolean) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /** Value of the slider. */\n  @Input()\n  get value(): number | null {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      let value = coerceNumberProperty(v);\n\n      // While incrementing by a decimal we can end up with values like 33.300000000000004.\n      // Truncate it to ensure that it matches the label and to make it easier to work with.\n      if (this._roundToDecimal) {\n        value = parseFloat(value.toFixed(this._roundToDecimal));\n      }\n\n      this._value = value;\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /**\n   * Function that will be used to format the value before it is displayed\n   * in the thumb label. Can be used to format very large number in order\n   * for them to fit into the slider thumb.\n   */\n  @Input() displayWith: (value: number | null) => string | number;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() readonly change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() readonly input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /**\n   * Emits when the raw value of the slider changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<number | null> = new EventEmitter<number | null>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    if (this.displayWith) {\n      return this.displayWith(this.value);\n    }\n\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundToDecimal && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundToDecimal);\n    }\n\n    return this.value || 0;\n  }\n\n  /** set focus to the host element */\n  focus() {\n    this._focusHostElement();\n  }\n\n  /** blur the host element */\n  blur() {\n    this._blurHostElement();\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${1 - this.percent}, 1` : `${1 - this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '-' : '';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${this.percent}, 1` : `${this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '' : '-';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._getDirection() == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundToDecimal: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper') private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  private _shouldInvertMouseCoords() {\n    return (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private _getDirection() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string,\n              // @breaking-change 8.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onMousedown(event: MouseEvent) {\n    if (this.disabled) {\n      return;\n    }\n\n    const oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    // Emit a change and input event if the value changed.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value && !this.disabled) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled) { return; }\n\n    let oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._getDirection() == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._getDirection() == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n\n    if (this._shouldInvertMouseCoords()) {\n      percent = 1 - percent;\n    }\n\n    // Since the steps may not divide cleanly into the max value, if the user\n    // slid to 0 or 100 percent, we jump to the min/max value. This approach\n    // is slightly more intuitive than using `Math.ceil` below, because it\n    // follows the user's pointer closer.\n    if (percent === 0) {\n      this.value = this.min;\n    } else if (percent === 1) {\n      this.value = this.max;\n    } else {\n      const exactValue = this._calculateValue(percent);\n\n      // This calculation finds the closest step by finding the closest\n      // whole number divisible by the step relative to the min.\n      const closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n\n      // The value needs to snap to the min and max.\n      this.value = this._clamp(closestValue, this.min, this.max);\n    }\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.valueChange.emit(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Blurs the native element. */\n  private _blurHostElement() {\n    this._elementRef.nativeElement.blur();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable, Subject} from 'rxjs';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n  /** Whether the snack bar was dismissed using the action button. */\n  dismissedByAction: boolean;\n}\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has been dismissed. */\n  private readonly _afterDismissed = new Subject<MatSnackBarDismiss>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private readonly _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  /** Whether the snack bar was dismissed using the action button. */\n  private _dismissedByAction = false;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  dismissWithAction(): void {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * @breaking-change 8.0.0\n   */\n  closeWithAction(): void {\n    this.dismissWithAction();\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<MatSnackBarDismiss> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /**\n   * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n   * component or template, the announcement message will default to the specified message.\n   */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: {message: string, action: string};\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.dismissWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material snack bar.\n * @docs-private\n */\nexport const matSnackBarAnimations: {\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('void, hidden', style({\n      transform: 'scale(0.8)',\n      opacity: 0,\n    })),\n    state('visible', style({\n      transform: 'scale(1)',\n      opacity: 1,\n    })),\n    transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\n      opacity: 0\n    }))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  CdkPortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  NgZone,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\nimport {matSnackBarAnimations} from './snack-bar-animations';\nimport {MatSnackBarConfig} from './snack-bar-config';\n\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    '[attr.role]': '_role',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  readonly _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  readonly _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  /** ARIA role for the snack bar container. */\n  _role: 'alert' | 'status' | null;\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    /** The snack bar configuration. */\n    public snackBarConfig: MatSnackBarConfig) {\n\n    super();\n\n    // Based on the ARIA spec, `alert` and `status` roles have an\n    // implicit `assertive` and `polite` politeness respectively.\n    if (snackBarConfig.politeness === 'assertive' && !snackBarConfig.announcementMessage) {\n      this._role = 'alert';\n    } else if (snackBarConfig.politeness === 'off') {\n      this._role = null;\n    } else {\n      this._role = 'status';\n    }\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\n      this._completeExit();\n    }\n\n    if (toState === 'visible') {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n    // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n    // `MatSnackBar.open`).\n    this._animationState = 'hidden';\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n  private _applySnackBarClasses() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClasses = this.snackBarConfig.panelClass;\n\n    if (panelClasses) {\n      if (Array.isArray(panelClasses)) {\n        // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n        panelClasses.forEach(cssClass => element.classList.add(cssClass));\n      } else {\n        element.classList.add(panelClasses);\n      }\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n  }\n\n  /** Asserts that no content is already attached to the container. */\n  private _assertNotAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatButtonModule,\n    MatCommonModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  EmbeddedViewRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n  OnDestroy,\n} from '@angular/core';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarModule} from './snack-bar-module';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/** Injection token that can be used to specify default snack bar. */\nexport const MAT_SNACK_BAR_DEFAULT_OPTIONS =\n    new InjectionToken<MatSnackBarConfig>('mat-snack-bar-default-options', {\n      providedIn: 'root',\n      factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY(): MatSnackBarConfig {\n  return new MatSnackBarConfig();\n}\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable({providedIn: MatSnackBarModule})\nexport class MatSnackBar implements OnDestroy {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar,\n      @Inject(MAT_SNACK_BAR_DEFAULT_OPTIONS) private _defaultConfig: MatSnackBarConfig) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig):\n    MatSnackBarRef<T> {\n    return this._attach(component, config) as MatSnackBarRef<T>;\n  }\n\n  /**\n   * Creates and dispatches a snack bar with a custom template for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param template Template to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromTemplate(template: TemplateRef<any>, config?: MatSnackBarConfig):\n    MatSnackBarRef<EmbeddedViewRef<any>> {\n    return this._attach(template, config);\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = {...this._defaultConfig, ...config};\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n\n    if (!_config.announcementMessage) {\n      _config.announcementMessage = message;\n    }\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  ngOnDestroy() {\n    // Only dismiss the snack bar at the current level on destroy.\n    if (this._snackBarRefAtThisLevel) {\n      this._snackBarRefAtThisLevel.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatSnackBarConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatSnackBarContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component or a template as the content of the snack bar container.\n   */\n  private _attach<T>(content: ComponentType<T> | TemplateRef<T>, userConfig?: MatSnackBarConfig):\n    MatSnackBarRef<T | EmbeddedViewRef<any>> {\n\n    const config = {...new MatSnackBarConfig(), ...this._defaultConfig, ...userConfig};\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T | EmbeddedViewRef<any>>(container, overlayRef);\n\n    if (content instanceof TemplateRef) {\n      const portal = new TemplatePortal(content, null!, {\n        $implicit: config.data,\n        snackBarRef\n      } as any);\n\n      snackBarRef.instance = container.attachTemplatePortal(portal);\n    } else {\n      const injector = this._createInjector(config, snackBarRef);\n      const portal = new ComponentPortal(content, undefined, injector);\n      const contentRef = container.attachComponentPortal<T>(portal);\n\n      // We can't pass this via the injector, because the injector is created earlier.\n      snackBarRef.instance = contentRef.instance;\n    }\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\n      takeUntil(overlayRef.detachments().pipe(take(1)))\n    ).subscribe(state => {\n      if (state.matches) {\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n      } else {\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n      }\n    });\n\n    this._animateSnackBar(snackBarRef, config);\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /** Animates the old snack bar out and the new one in. */\n  private _animateSnackBar(snackBarRef: MatSnackBarRef<any>, config: MatSnackBarConfig) {\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (config.duration && config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration!));\n    }\n\n    if (config.announcementMessage) {\n      this._live.announce(config.announcementMessage, config.politeness);\n    }\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    return new PortalInjector(userInjector || this._injector, new WeakMap<any, any>([\n      [MatSnackBarRef, snackBarRef],\n      [MAT_SNACK_BAR_DATA, config.data]\n    ]));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableCtor,\n  HasInitialized,\n  HasInitializedCtor,\n  mixinDisabled,\n  mixinInitialized,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError,\n  getSortInvalidDirectionError,\n} from './sort-errors';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nexport class MatSortBase {}\nexport const _MatSortMixinBase: HasInitializedCtor & CanDisableCtor & typeof MatSortBase =\n    mixinInitialized(mixinDisabled(MatSortBase));\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase\n    implements CanDisable, HasInitialized, OnChanges, OnDestroy, OnInit {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  get direction(): SortDirection { return this._direction; }\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable): void {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable): void {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable): void {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.emit({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnInit() {\n    this._markInitialized();\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusMonitor, FocusOrigin, FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {CdkScrollable, ScrollDispatcher} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {fromEvent, merge, Observable, Subject} from 'rxjs';\nimport {\n  debounceTime,\n  filter,\n  map,\n  startWith,\n  take,\n  takeUntil,\n  distinctUntilChanged,\n} from 'rxjs/operators';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/**\n * Throws an exception when two MatDrawer are matching the same position.\n * @docs-private\n */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/** Result of the toggle promise that indicates the state of the drawer. */\nexport type MatDrawerToggleResult = 'open' | 'close';\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n      providedIn: 'root',\n      factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY(): boolean {\n  return false;\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContent extends CdkScrollable implements AfterContentInit {\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) public _container: MatDrawerContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(elementRef, scrollDispatcher, ngZone);\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMarginChanges.subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  templateUrl: 'drawer.html',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_animationStarted.next($event)',\n    '(@transform.done)': '_animationEnd.next($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value: 'start' | 'end') {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value: 'over' | 'push' | 'side') {\n    this._mode = value;\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** Whether the drawer should focus the first focusable element automatically when opened. */\n  @Input()\n  get autoFocus(): boolean { return this._autoFocus; }\n  set autoFocus(value: boolean) { this._autoFocus = coerceBooleanProperty(value); }\n  private _autoFocus: boolean = true;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new Subject<AnimationEvent>();\n\n  /** Emits whenever the drawer is done animating. */\n  _animationEnd = new Subject<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() readonly openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer's position changes. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  readonly _modeChanged = new Subject();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              private _ngZone: NgZone,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n\n    /**\n     * Listen to `keydown` events outside the zone so that change detection is not run every\n     * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n     * and we don't have close disabled.\n     */\n    this._ngZone.runOutsideAngular(() => {\n        fromEvent<KeyboardEvent>(this._elementRef.nativeElement, 'keydown').pipe(\n            filter(event => event.keyCode === ESCAPE && !this.disableClose)\n        ).subscribe(event => this._ngZone.run(() => {\n            this.close();\n            event.stopPropagation();\n        }));\n    });\n\n    // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n    this._animationEnd.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe((event: AnimationEvent) => {\n      const {fromState, toState} = event;\n\n      if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n          (toState === 'void' && fromState.indexOf('open') === 0)) {\n        this.openedChange.emit(this._opened);\n      }\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n\n    this._animationStarted.complete();\n    this._animationEnd.complete();\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { this.toggle(coerceBooleanProperty(value)); }\n  private _opened: boolean = false;\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<MatDrawerToggleResult> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<MatDrawerToggleResult> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<MatDrawerToggleResult> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n\n    return new Promise<MatDrawerToggleResult>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n    });\n  }\n\n  get _width(): number {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n}\n\n\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContainer implements AfterContentInit, DoCheck, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent) _content: MatDrawerContent;\n  @ViewChild(MatDrawerContent) _userContent: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /**\n   * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n   * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n   * mode as well.\n   */\n  @Input()\n  get hasBackdrop() {\n    if (this._backdropOverride == null) {\n      return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n    }\n\n    return this._backdropOverride;\n  }\n  set hasBackdrop(value: any) {\n    this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n  }\n  _backdropOverride: boolean | null;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() readonly backdropClick: EventEmitter<void> = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private readonly _doCheckSubject = new Subject<void>();\n\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _contentMargins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  readonly _contentMarginChanges = new Subject<{left: number|null, right: number|null}>();\n\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n  get scrollable(): CdkScrollable {\n    return this._userContent || this._content;\n  }\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef<HTMLElement>,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this._updateContentMargins();\n      });\n    }\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this._updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this._updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      takeUntil(this._drawers.changes),\n      filter((event: AnimationEvent) => event.fromState !== event.toState)\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant' && this._animationMode !== 'NoopAnimations') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this._updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this._updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add('mat-drawer-opened');\n    } else {\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (this._dir && this._dir.value === 'rtl') {\n      this._left = this._end;\n      this._right = this._start;\n    } else {\n      this._left = this._start;\n      this._right = this._end;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer))\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||\n           (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end));\n  }\n\n  private _canHaveBackdrop(drawer: MatDrawer): boolean {\n    return drawer.mode !== 'side' || !!this._backdropOverride;\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): drawer is MatDrawer {\n    return drawer != null && drawer.opened;\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  private _updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        let width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        let width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    // If either `right` or `left` is zero, don't set a style to the element. This\n    // allows users to specify a custom size via CSS class in SSR scenarios where the\n    // measured widths will always be zero. Note that we reset to `null` here, rather\n    // than below, in order to ensure that the types in the `if` below are consistent.\n    left = left || null!;\n    right = right || null!;\n\n    if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n      this._contentMargins = {left, right};\n\n      // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n      // to do it only when something changed, otherwise we can end up hitting the zone too often.\n      this._ngZone.run(() => this._contentMarginChanges.next(this._contentMargins));\n    }\n\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  forwardRef,\n  Inject,\n  Input,\n  ViewEncapsulation,\n  QueryList,\n  ElementRef,\n  NgZone,\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(changeDetectorRef, container, elementRef, scrollDispatcher, ngZone);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  templateUrl: 'drawer.html',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_animationStarted.next($event)',\n    '(@transform.done)': '_animationEnd.next($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers: QueryList<MatSidenav>;\n  @ContentChild(MatSidenavContent) _content: MatSidenavContent;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {ScrollingModule} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    ScrollingModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/** Default `mat-slide-toggle` options that can be overridden. */\nexport interface MatSlideToggleDefaultOptions {\n  /** Whether toggle action triggers value changes in slide toggle. */\n  disableToggleValue?: boolean;\n  /** Whether drag action triggers value changes in slide toggle. */\n  disableDragValue?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-slide-toggle`. */\nexport const MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS =\n  new InjectionToken<MatSlideToggleDefaultOptions>('mat-slide-toggle-default-options', {\n    providedIn: 'root',\n    factory: () => ({disableToggleValue: false, disableDragValue: false})\n  });\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor, CanColorCtor,\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  HammerInput,\n  HasTabIndex, HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {\n  MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,\n  MatSlideToggleDefaultOptions\n} from './slide-toggle-config';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\n/** @docs-private */\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nexport class MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSlideToggleMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatSlideToggleBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    '[attr.tabindex]': '-1', // Needs to be `-1` so it can still receive programmatic focus.\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n    ControlValueAccessor, CanDisable, CanColor, HasTabIndex, CanDisableRipple {\n\n  private onChange = (_: any) => {};\n  private onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Whether the thumb is currently being dragged. */\n  private _dragging = false;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  private _dragPercentage: number;\n\n  /** Reference to the thumb HTMLElement. */\n  @ViewChild('thumbContainer') _thumbEl: ElementRef;\n\n  /** Reference to the thumb bar HTMLElement. */\n  @ViewChild('toggleBar') _thumbBarEl: ElementRef;\n\n  /** Name value will be applied to the input element if present. */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after'. */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\n      new EventEmitter<MatSlideToggleChange>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle input is toggled.\n   * This event is always emitted when the user toggles the slide toggle, but this does not mean\n   * the slide toggle's value has changed. The event does not fire when the user drags to change\n   * the slide toggle value.\n   */\n  @Output() readonly toggleChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle is dragged.\n   * This event is always emitted when the user drags the slide toggle to make a change greater\n   * than 50%. It does not mean the slide toggle's value is changed. The event is not emitted when\n   * the user toggles the slide toggle to change its value.\n   */\n  @Output() readonly dragChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated The `_platform` parameter to be removed.\n               * @breaking-change 8.0.0\n               */\n              _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string,\n              private _ngZone: NgZone,\n              @Inject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS)\n                  public defaults: MatSlideToggleDefaultOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              @Optional() private _dir?: Directionality) {\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin) {\n          // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n          // Angular does not expect events to be raised during change detection, so any state\n          // change (such as a form control's 'ng-touched') will cause a changed-after-checked\n          // error. See https://github.com/angular/angular/issues/17793. To work around this,\n          // we defer telling the form control it has been touched until the next tick.\n          Promise.resolve().then(() => this.onTouched());\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    if (!this._dragging) {\n      this.toggleChange.emit();\n    }\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back. Or when the slide toggle's config\n    // disabled toggle change event by setting `disableToggleValue: true`, the slide toggle's value\n    // does not change, and the checked state of the underlying input needs to be changed back.\n    if (this._dragging || this.defaults.disableToggleValue) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n    this.onChange(this.checked);\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this.onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n  _onDragStart() {\n    if (!this.disabled && !this._dragging) {\n      const thumbEl = this._thumbEl.nativeElement;\n      this._thumbBarWidth = this._thumbBarEl.nativeElement.clientWidth - thumbEl.clientWidth;\n      thumbEl.classList.add('mat-dragging');\n\n      this._previousChecked = this.checked;\n      this._dragging = true;\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._dragging) {\n      const direction = this._dir && this._dir.value === 'rtl' ? -1 : 1;\n      this._dragPercentage = this._getDragPercentage(event.deltaX * direction);\n      // Calculate the moved distance based on the thumb bar width.\n      const dragX = (this._dragPercentage / 100) * this._thumbBarWidth * direction;\n      this._thumbEl.nativeElement.style.transform = `translate3d(${dragX}px, 0, 0)`;\n    }\n  }\n\n  _onDragEnd() {\n    if (this._dragging) {\n      const newCheckedValue = this._dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.dragChange.emit();\n        if (!this.defaults.disableDragValue) {\n          this.checked = newCheckedValue;\n          this._emitChangeEvent();\n        }\n      }\n\n      // The drag should be stopped outside of the current event handler, otherwise the\n      // click event will be fired before it and will revert the drag change.\n      this._ngZone.runOutsideAngular(() => setTimeout(() => {\n        if (this._dragging) {\n          this._dragging = false;\n          this._thumbEl.nativeElement.classList.remove('mat-dragging');\n\n          // Reset the transform because the component will take care\n          // of the thumb position after drag.\n          this._thumbEl.nativeElement.style.transform = '';\n        }\n      }));\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the\n    // slide-toggle component will be only marked for check, but no actual change detection runs\n    // automatically. Instead of going back into the zone in order to trigger a change detection\n    // which causes *all* components to be checked (if explicitly marked or not using OnPush),\n    // we only trigger an explicit change detection for the slide-toggle view and it's children.\n    this._changeDetectorRef.detectChanges();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlideToggle} from './slide-toggle';\n\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatSlideToggle, MatCommonModule],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Inject,\n  Input,\n  Output,\n  EventEmitter,\n  Optional,\n  NgZone,\n  ViewEncapsulation,\n  AfterViewInit,\n  ViewChild,\n  OnDestroy,\n  InjectionToken,\n  inject,\n} from '@angular/core';\nimport {fromEvent, Subscription} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {DOCUMENT} from '@angular/common';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\n\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nexport class MatProgressBarBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/** Last animation end data. */\nexport interface ProgressAnimationEnd {\n  value: number;\n}\n\nexport const _MatProgressBarMixinBase: CanColorCtor & typeof MatProgressBarBase =\n    mixinColor(MatProgressBarBase, 'primary');\n\n/**\n * Injection token used to provide the current location to `MatProgressBar`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport const MAT_PROGRESS_BAR_LOCATION = new InjectionToken<MatProgressBarLocation>(\n  'mat-progress-bar-location',\n  {providedIn: 'root', factory: MAT_PROGRESS_BAR_LOCATION_FACTORY}\n);\n\n/**\n * Stubbed out location for `MatProgressBar`.\n * @docs-private\n */\nexport interface MatProgressBarLocation {\n  getPathname: () => string;\n}\n\n/** @docs-private */\nexport function MAT_PROGRESS_BAR_LOCATION_FACTORY(): MatProgressBarLocation {\n  const _document = inject(DOCUMENT);\n  const _location = _document ? _document.location : null;\n\n  return {\n    // Note that this needs to be a function, rather than a property, because Angular\n    // will only resolve it once, but we want the current path on each call.\n    getPathname: () => _location ? (_location.pathname + _location.search) : ''\n  };\n}\n\n\n/** Counter used to generate unique IDs for progress bars. */\nlet progressbarId = 0;\n\n/**\n * `<mat-progress-bar>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n    'class': 'mat-progress-bar',\n    '[class._mat-animation-noopable]': `_isNoopAnimation`,\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor,\n                                                      AfterViewInit, OnDestroy {\n  constructor(public _elementRef: ElementRef, private _ngZone: NgZone,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              /**\n               * @deprecated `location` parameter to be made required.\n               * @breaking-change 8.0.0\n               */\n              @Optional() @Inject(MAT_PROGRESS_BAR_LOCATION) location?: MatProgressBarLocation) {\n    super(_elementRef);\n\n    // We need to prefix the SVG reference with the current path, otherwise they won't work\n    // in Safari if the page has a `<base>` tag. Note that we need quotes inside the `url()`,\n\n    // because named route URLs can contain parentheses (see #12338). Also we don't use since\n    // we can't tell the difference between whether\n    // the consumer is using the hash location strategy or not, because `Location` normalizes\n    // both `/#/foo/bar` and `/foo/bar` to the same thing.\n    const path = location ? location.getPathname().split('#')[0] : '';\n    this._rectangleFillValue = `url('${path}#${this.progressbarId}')`;\n    this._isNoopAnimation = _animationMode === 'NoopAnimations';\n  }\n\n  /** Flag that indicates whether NoopAnimations mode is set to true. */\n  _isNoopAnimation = false;\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) {\n    this._value = clamp(v || 0);\n\n    // When noop animation is set to true, trigger animationEnd directly.\n    if (this._isNoopAnimation) {\n      this.emitAnimationEnd();\n    }\n  }\n  private _value: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue(): number { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n  private _bufferValue: number = 0;\n\n  @ViewChild('primaryValueBar') _primaryValueBar: ElementRef;\n\n  /**\n   * Event emitted when animation of the primary progress bar completes. This event will not\n   * be emitted when animations are disabled, nor will it be emitted for modes with continuous\n   * animations (indeterminate and query).\n   */\n  @Output() animationEnd = new EventEmitter<ProgressAnimationEnd>();\n\n  /** Reference to animation end subscription to be unsubscribed on destroy. */\n  private _animationEndSubscription: Subscription = Subscription.EMPTY;\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** ID of the progress bar. */\n  progressbarId = `mat-progress-bar-${progressbarId++}`;\n\n  /** Attribute to be used for the `fill` attribute on the internal `rect` element. */\n  _rectangleFillValue: string;\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    const scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode === 'buffer') {\n      const scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\n\n  ngAfterViewInit() {\n    if (!this._isNoopAnimation) {\n      // Run outside angular so change detection didn't get triggered on every transition end\n      // instead only on the animation that we care about (primary value bar's transitionend)\n      this._ngZone.runOutsideAngular((() => {\n        this._animationEndSubscription =\n            fromEvent<TransitionEvent>(this._primaryValueBar.nativeElement, 'transitionend')\n            .pipe(filter(((e: TransitionEvent) =>\n              e.target === this._primaryValueBar.nativeElement)))\n            .subscribe(_ => this._ngZone.run(() => this.emitAnimationEnd()));\n      }));\n    }\n  }\n\n  ngOnDestroy() {\n    this._animationEndSubscription.unsubscribe();\n  }\n\n  /** Emit an animationEnd event if in determinate or buffer mode. */\n  private emitAnimationEnd(): void {\n    if (this.mode === 'determinate' || this.mode === 'buffer') {\n      this.animationEnd.next({value: this.value});\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  Optional,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nexport class MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatProgressSpinnerMixinBase: CanColorCtor & typeof MatProgressSpinnerBase =\n    mixinColor(MatProgressSpinnerBase, 'primary');\n\n/** Default `mat-progress-spinner` options that can be overridden. */\nexport interface MatProgressSpinnerDefaultOptions {\n  /** Diameter of the spinner. */\n  diameter?: number;\n  /** Width of the spinner's stroke. */\n  strokeWidth?: number;\n  /**\n   * Whether the animations should be force to be enabled, ignoring if the current environment is\n   * using NoopAnimationsModule.\n   */\n  _forceAnimations?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-progress-spinner`. */\nexport const MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS =\n    new InjectionToken<MatProgressSpinnerDefaultOptions>('mat-progress-spinner-default-options', {\n      providedIn: 'root',\n      factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY(): MatProgressSpinnerDefaultOptions {\n  return {diameter: BASE_SIZE};\n}\n\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/material2/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * `<mat-progress-spinner>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor {\n\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /** Tracks diameters of existing instances to de-dupe generated styles (default d = 100) */\n  private static diameters = new Set<number>([BASE_SIZE]);\n\n  /**\n   * Used for storing all of the generated keyframe animations.\n   * @dynamic\n   */\n  private static styleTag: HTMLStyleElement|null = null;\n\n  /** Whether the _mat-animation-noopable class should be applied, disabling animations.  */\n  _noopAnimations: boolean = this.animationMode === 'NoopAnimations' && (\n      !!this.defaults && !this.defaults._forceAnimations);\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number { return this._diameter; }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    if (!this._fallbackAnimation && !MatProgressSpinner.diameters.has(this._diameter)) {\n      this._attachStyleNode();\n    }\n  }\n  private _diameter = BASE_SIZE;\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @breaking-change 8.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  private defaults?: MatProgressSpinnerDefaultOptions) {\n\n    super(_elementRef);\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n\n    if (defaults) {\n      if (defaults.diameter) {\n        this.diameter = defaults.diameter;\n      }\n\n      if (defaults.strokeWidth) {\n        this.strokeWidth = defaults.strokeWidth;\n      }\n    }\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    _elementRef.nativeElement.classList.add(animationClass);\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this.diameter * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    let styleTag = MatProgressSpinner.styleTag;\n\n    if (!styleTag) {\n      styleTag = this._document.createElement('style');\n      this._document.head.appendChild(styleTag);\n      MatProgressSpinner.styleTag = styleTag;\n    }\n\n    if (styleTag && styleTag.sheet) {\n      (styleTag.sheet as CSSStyleSheet).insertRule(this._getAnimationText(), 0);\n    }\n\n    MatProgressSpinner.diameters.add(this.diameter);\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n}\n\n\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any,\n              // @breaking-change 8.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  defaults?: MatProgressSpinnerDefaultOptions) {\n    super(elementRef, platform, document, animationMode, defaults);\n    this.mode = 'indeterminate';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  constructor(\n    /** The MatRadioButton that emits the change event. */\n    public source: MatRadioButton,\n    /** The value of the MatRadioButton. */\n    public value: any) {}\n}\n\n\n// Boilerplate for applying mixins to MatRadioGroup.\n/** @docs-private */\nexport class MatRadioGroupBase { }\nexport const _MatRadioGroupMixinBase: CanDisableCtor & typeof MatRadioGroupBase =\n    mixinDisabled(MatRadioGroupBase);\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n  inputs: ['disabled'],\n})\nexport class MatRadioGroup extends _MatRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n\n  /** Selected value for the radio group. */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n  set labelPosition(v) {\n    this._labelPosition = v === 'before' ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /**\n   * Value for the radio-group. Should equal the value of the selected radio button if there is\n   * a corresponding radio button with a matching value. If there is not such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value !== newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /**\n   * The currently selected radio button. If set to a new radio button, the radio group value\n   * will be updated to match the new selected button.\n   */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n    if (this._radios && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value === radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new MatRadioChange(this._selected!, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nexport class MatRadioButtonBase {\n  // Since the disabled property is manually defined for the MatRadioButton and isn't set up in\n  // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n  // defined to properly work.\n  disabled: boolean;\n\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nexport const _MatRadioButtonMixinBase:\n    CanColorCtor & CanDisableRippleCtor & HasTabIndexCtor & typeof MatRadioButtonBase =\n        mixinColor(mixinDisableRipple(mixinTabIndex(MatRadioButtonBase)), 'accent');\n\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['color', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[attr.tabindex]': 'null',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, CanDisableRipple, HasTabIndex {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n    if (this._checked !== newCheckedState) {\n      this._checked = newCheckedState;\n      if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value !== value) {\n      this._value = value;\n      if (this.radioGroup !== null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value === value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    const newDisabledState = coerceBooleanProperty(value);\n    if (this._disabled !== newDisabledState) {\n      this._disabled = newDisabledState;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio. */\n  private _value: any = null;\n\n  /** Unregister function for _radioDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id !== this.id && name === this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin && this.radioGroup) {\n          this.radioGroup._touch();\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    this.change.emit(new MatRadioChange(this, this._value));\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material drawers.\n * @docs-private\n */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    // We remove the `transform` here completely, rather than setting it to zero, because:\n    // 1. Having a transform can cause elements with ripples or an animated\n    //    transform to shift around in Chrome with an RTL layout (see #10023).\n    // 2. 3d transforms causes text to appear blurry on IE and Edge.\n    state('open, open-instant', style({\n      'transform': 'none',\n      'visibility': 'visible',\n    })),\n    state('void', style({\n      // Avoids the shadow showing up when closed in SSR.\n      'box-shadow': 'none',\n      'visibility': 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelect, MatSelectTrigger} from './select';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  keyframes,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * Animations used by MatTooltip.\n * @docs-private\n */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({opacity: 0, transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('200ms cubic-bezier(0, 0, 0.2, 1)', keyframes([\n      style({opacity: 0, transform: 'scale(0)', offset: 0}),\n      style({opacity: 0.5, transform: 'scale(0.99)', offset: 0.5}),\n      style({opacity: 1, transform: 'scale(1)', offset: 1})\n    ]))),\n    transition('* => hidden', animate('100ms cubic-bezier(0, 0, 0.2, 1)', style({opacity: 0}))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {\n  MatTooltip,\n  TooltipComponent,\n  MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './tooltip';\n\n@NgModule({\n  imports: [\n    A11yModule,\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [\n    MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig},\n  ]\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable({providedIn: 'root'})\nexport class MatPaginatorIntl {\n  /**\n   * Stream to emit from when labels are changed. Use this to notify components when the labels have\n   * changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel: string = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel: string = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel: string = 'Previous page';\n\n  /** A label for the button that moves to the first page. */\n  firstPageLabel: string = 'First page';\n\n  /** A label for the button that moves to the last page. */\n  lastPageLabel: string = 'Last page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatPaginatorIntl} from './paginator-intl';\nimport {\n  HasInitialized,\n  HasInitializedCtor,\n  mixinInitialized,\n  ThemePalette,\n  mixinDisabled,\n  CanDisableCtor,\n  CanDisable,\n} from '@angular/material/core';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /**\n   * Index of the page that was selected previously.\n   * @breaking-change 8.0.0 To be made into a required property.\n   */\n  previousPageIndex?: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n// Boilerplate for applying mixins to MatPaginator.\n/** @docs-private */\nexport class MatPaginatorBase {}\nexport const _MatPaginatorBase: CanDisableCtor & HasInitializedCtor & typeof MatPaginatorBase =\n    mixinDisabled(mixinInitialized(MatPaginatorBase));\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  inputs: ['disabled'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatPaginator extends _MatPaginatorBase implements OnInit, OnDestroy, CanDisable,\n  HasInitialized {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** Theme color to be used for the underlying form controls. */\n  @Input() color: ThemePalette;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(value: number) {\n    this._pageIndex = Math.max(coerceNumberProperty(value), 0);\n    this._changeDetectorRef.markForCheck();\n  }\n  _pageIndex: number = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(value: number) {\n    this._length = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  _length: number = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(value: number) {\n    this._pageSize = Math.max(coerceNumberProperty(value), 0);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(value: number[]) {\n    this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Whether to hide the page size selection UI from the user. */\n  @Input()\n  get hidePageSize(): boolean { return this._hidePageSize; }\n  set hidePageSize(value: boolean) {\n    this._hidePageSize = coerceBooleanProperty(value);\n  }\n  private _hidePageSize = false;\n\n\n  /** Whether to show the first/last buttons UI to the user. */\n  @Input()\n  get showFirstLastButtons(): boolean { return this._showFirstLastButtons; }\n  set showFirstLastButtons(value: boolean) {\n    this._showFirstLastButtons = coerceBooleanProperty(value);\n  }\n  private _showFirstLastButtons = false;\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() readonly page: EventEmitter<PageEvent> = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n    this._markInitialized();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage(): void {\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex++;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage(): void {\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex--;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the first page if not already there. */\n  firstPage(): void {\n    // hasPreviousPage being false implies at the start\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = 0;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the last page if not already there. */\n  lastPage(): void {\n    // hasNextPage being false implies at the end\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = this.getNumberOfPages() - 1;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage(): boolean {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage(): boolean {\n    const maxPageIndex = this.getNumberOfPages() - 1;\n    return this.pageIndex < maxPageIndex && this.pageSize != 0;\n  }\n\n  /** Calculate the number of pages */\n  getNumberOfPages(): number {\n    if (!this.pageSize) {\n      return 0;\n    }\n\n    return Math.ceil(this.length / this.pageSize);\n  }\n\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    const previousPageIndex = this.pageIndex;\n\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n    this.pageSize = pageSize;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Checks whether the buttons for going forwards should be disabled. */\n  _nextButtonsDisabled() {\n    return this.disabled || !this.hasNextPage();\n  }\n\n  /** Checks whether the buttons for going backwards should be disabled. */\n  _previousButtonsDisabled() {\n    return this.disabled || !this.hasPreviousPage();\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) === -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent(previousPageIndex: number) {\n    this.page.emit({\n      previousPageIndex,\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  TemplateRef,\n  ComponentFactoryResolver,\n  ApplicationRef,\n  Injector,\n  ViewContainerRef,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {TemplatePortal, DomPortalOutlet} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {Subject} from 'rxjs';\n\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\n@Directive({\n  selector: 'ng-template[matMenuContent]'\n})\nexport class MatMenuContent implements OnDestroy {\n  private _portal: TemplatePortal<any>;\n  private _outlet: DomPortalOutlet;\n\n  /** Emits when the menu content has been attached. */\n  _attached = new Subject<void>();\n\n  constructor(\n    private _template: TemplateRef<any>,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n    private _injector: Injector,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) private _document: any) {}\n\n  /**\n   * Attaches the content with a particular context.\n   * @docs-private\n   */\n  attach(context: any = {}) {\n    if (!this._portal) {\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n    }\n\n    this.detach();\n\n    if (!this._outlet) {\n      this._outlet = new DomPortalOutlet(this._document.createElement('div'),\n          this._componentFactoryResolver, this._appRef, this._injector);\n    }\n\n    const element: HTMLElement = this._template.elementRef.nativeElement;\n\n    // Because we support opening the same menu from different triggers (which in turn have their\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n    // risk it staying attached to a pane that's no longer in the DOM.\n    element.parentNode!.insertBefore(this._outlet.outletElement, element);\n    this._portal.attach(this._outlet, context);\n    this._attached.next();\n  }\n\n  /**\n   * Detaches the content.\n   * @docs-private\n   */\n  detach() {\n    if (this._portal.isAttached) {\n      this._portal.detach();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._outlet) {\n      this._outlet.dispose();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  query,\n  group,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n * @docs-private\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: AnimationTriggerMetadata;\n  readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(0.8)'\n    })),\n    transition('void => enter', group([\n      query('.mat-menu-content', animate('100ms linear', style({opacity: 1}))),\n      animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({transform: 'scale(1)'})),\n    ])),\n    transition('* => void', animate('100ms 25ms linear', style({opacity: 0})))\n  ]),\n\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n    // TODO(crisbeto): this is inside the `transformMenu`\n    // now. Remove next time we do breaking changes.\n    state('showing', style({opacity: 1})),\n    transition('void => *', [\n      style({opacity: 0}),\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const transformMenu = matMenuAnimations.transformMenu;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EventEmitter, TemplateRef, InjectionToken} from '@angular/core';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {Direction} from '@angular/cdk/bidi';\nimport {FocusOrigin} from '@angular/cdk/a11y';\nimport {MatMenuContent} from './menu-content';\n\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * @docs-private\n */\nexport const MAT_MENU_PANEL = new InjectionToken<MatMenuPanel>('MAT_MENU_PANEL');\n\n/**\n * Interface for a custom menu panel that can be used with `matMenuTriggerFor`.\n * @docs-private\n */\nexport interface MatMenuPanel<T = any> {\n  xPosition: MenuPositionX;\n  yPosition: MenuPositionY;\n  overlapTrigger: boolean;\n  templateRef: TemplateRef<any>;\n  close: EventEmitter<void | 'click' | 'keydown' | 'tab'>;\n  parentMenu?: MatMenuPanel | undefined;\n  direction?: Direction;\n  focusFirstItem: (origin?: FocusOrigin) => void;\n  resetActiveItem: () => void;\n  setPositionClasses?: (x: MenuPositionX, y: MenuPositionY) => void;\n  setElevation?(depth: number): void;\n  lazyContent?: MatMenuContent;\n  backdropClass?: string;\n  hasBackdrop?: boolean;\n  addItem?: (item: T) => void;\n  removeItem?: (item: T) => void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nexport class MatMenuItemBase {}\nexport const _MatMenuItemMixinBase: CanDisableRippleCtor & CanDisableCtor & typeof MatMenuItemBase =\n    mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    'role': 'menuitem',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n    '(click)': '_checkDisabled($event)',\n    '(mouseenter)': '_handleMouseEnter()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n\n  private _document: Document;\n\n  /** Stream that emits when the menu item is hovered. */\n  readonly _hovered: Subject<MatMenuItem> = new Subject<MatMenuItem>();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) document?: any,\n    private _focusMonitor?: FocusMonitor,\n    @Inject(MAT_MENU_PANEL) @Optional() private _parentMenu?: MatMenuPanel<MatMenuItem>) {\n\n    // @breaking-change 8.0.0 make `_focusMonitor` and `document` required params.\n    super();\n\n    if (_focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      _focusMonitor.monitor(this._elementRef, false);\n    }\n\n    if (_parentMenu && _parentMenu.addItem) {\n      _parentMenu.addItem(this);\n    }\n\n    this._document = document;\n  }\n\n  /** Focuses the menu item. */\n  focus(origin: FocusOrigin = 'program'): void {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin);\n    } else {\n      this._getHostElement().focus();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n\n    if (this._parentMenu && this._parentMenu.removeItem) {\n      this._parentMenu.removeItem(this);\n    }\n\n    this._hovered.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  _handleMouseEnter() {\n    this._hovered.next(this);\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === textNodeType) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager, FocusOrigin} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, LEFT_ARROW, RIGHT_ARROW, DOWN_ARROW, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Output,\n  TemplateRef,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  OnInit,\n} from '@angular/core';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, switchMap, take} from 'rxjs/operators';\nimport {matMenuAnimations} from './menu-animations';\nimport {MatMenuContent} from './menu-content';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {AnimationEvent} from '@angular/animations';\n\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n\n  /** Class to be applied to the menu's backdrop. */\n  backdropClass: string;\n\n  /** Whether the menu has a backdrop. */\n  hasBackdrop?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options', {\n      providedIn: 'root',\n      factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_MENU_DEFAULT_OPTIONS_FACTORY(): MatMenuDefaultOptions {\n  return {\n    overlapTrigger: false,\n    xPosition: 'after',\n    yPosition: 'below',\n    backdropClass: 'cdk-overlay-transparent-backdrop',\n  };\n}\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 4;\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matMenu',\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  providers: [\n    {provide: MAT_MENU_PANEL, useExisting: MatMenu}\n  ]\n})\nexport class MatMenu implements AfterContentInit, MatMenuPanel<MatMenuItem>, OnInit, OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** Menu items inside the current menu. */\n  private _items: MatMenuItem[] = [];\n\n  /** Emits whenever the amount of menu items changes. */\n  private _itemChanges = new Subject<MatMenuItem[]>();\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter' = 'void';\n\n  /** Emits whenever an animation on the menu completes. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  /** Whether the menu is animating. */\n  _isAnimating: boolean;\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Class to be added to the backdrop element. */\n  @Input() backdropClass: string = this._defaultOptions.backdropClass;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition(): MenuPositionX { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition(): MenuPositionY { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) templateRef: TemplateRef<any>;\n\n  /**\n   * List of the items inside of a menu.\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\n\n  /**\n   * Menu content that will be rendered lazily.\n   * @docs-private\n   */\n  @ContentChild(MatMenuContent) lazyContent: MatMenuContent;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  get overlapTrigger(): boolean { return this._overlapTrigger; }\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /** Whether the menu has a backdrop. */\n  @Input()\n  get hasBackdrop(): boolean | undefined { return this._hasBackdrop; }\n  set hasBackdrop(value: boolean | undefined) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n  private _hasBackdrop: boolean | undefined = this._defaultOptions.hasBackdrop;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    if (classes && classes.length) {\n      this._classList = classes.split(' ').reduce((obj: any, className: string) => {\n        obj[className] = true;\n        return obj;\n      }, {});\n\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   * @breaking-change 8.0.0\n   */\n  @Input()\n  get classList(): string { return this.panelClass; }\n  set classList(classes: string) { this.panelClass = classes; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() readonly closed: EventEmitter<void | 'click' | 'keydown' | 'tab'> =\n      new EventEmitter<void | 'click' | 'keydown' | 'tab'>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   * @breaking-change 8.0.0\n   */\n  @Output() close = this.closed;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngOnInit() {\n    this.setPositionClasses();\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatMenuItem>(this._items).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n  }\n\n  ngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    return this._itemChanges.pipe(\n      startWith(this._items),\n      switchMap(items => merge(...items.map(item => item._hovered)))\n    );\n  }\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n\n    switch (keyCode) {\n      case ESCAPE:\n        this.closed.emit('keydown');\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      default:\n        if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n          this._keyManager.setFocusOrigin('keyboard');\n        }\n\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n    if (this.lazyContent) {\n      this._ngZone.onStable.asObservable()\n        .pipe(take(1))\n        .subscribe(() => this._keyManager.setFocusOrigin(origin).setFirstItemActive());\n    } else {\n      this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n    }\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /**\n   * Registers a menu item with the menu.\n   * @docs-private\n   */\n  addItem(item: MatMenuItem) {\n    // We register the items through this method, rather than picking them up through\n    // `ContentChildren`, because we need the items to be picked up by their closest\n    // `mat-menu` ancestor. If we used `@ContentChildren(MatMenuItem, {descendants: true})`,\n    // all descendant items will bleed into the top-level menu in the case where the consumer\n    // has `mat-menu` instances nested inside each other.\n    if (this._items.indexOf(item) === -1) {\n      this._items.push(item);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Removes an item from the menu.\n   * @docs-private\n   */\n  removeItem(item: MatMenuItem) {\n    const index = this._items.indexOf(item);\n\n    if (this._items.indexOf(item) > -1) {\n      this._items.splice(index, 1);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Adds classes to the menu panel based on its position. Can be used by\n   * consumers to add specific styling based on the position.\n   * @param posX Position of the menu along the x axis.\n   * @param posY Position of the menu along the y axis.\n   * @docs-private\n   */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    const classes = this._classList;\n    classes['mat-menu-before'] = posX === 'before';\n    classes['mat-menu-after'] = posX === 'after';\n    classes['mat-menu-above'] = posY === 'above';\n    classes['mat-menu-below'] = posY === 'below';\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    // @breaking-change 8.0.0 Combine with _resetAnimation.\n    this._panelAnimationState = 'enter';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    // @breaking-change 8.0.0 Combine with _startAnimation.\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    this._animationDone.next(event);\n    this._isAnimating = false;\n\n    // Scroll the content element to the top once the animation is done. This is necessary, because\n    // we move focus to the first item while it's still being animated, which can throw the browser\n    // off when it determines the scroll position. Alternatively we can move focus when the\n    // animation is done, however moving focus asynchronously will interrupt screen readers\n    // which are in the process of reading out the menu already. We take the `element` from\n    // the `event` since we can't use a `ViewChild` to access the pane.\n    if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n      event.element.scrollTop = 0;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin, isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  VerticalConnectionPos,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {asapScheduler, merge, of as observableOf, Subscription} from 'rxjs';\nimport {delay, filter, take, takeUntil} from 'rxjs/operators';\nimport {MatMenu} from './menu-directive';\nimport {throwMatMenuMissingError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '[attr.aria-expanded]': 'menuOpen || null',\n    '(mousedown)': '_handleMousedown($event)',\n    '(touchstart)': '_openedBy = \"touch\"',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closeSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n  private _menuCloseSubscription = Subscription.EMPTY;\n  private _scrollStrategy: () => ScrollStrategy;\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  _openedBy: 'mouse' | 'touch' | null = null;\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel { return this.menu; }\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor')\n  get menu() { return this._menu; }\n  set menu(menu: MatMenuPanel) {\n    if (menu === this._menu) {\n      return;\n    }\n\n    this._menu = menu;\n    this._menuCloseSubscription.unsubscribe();\n\n    if (menu) {\n      this._menuCloseSubscription = menu.close.asObservable().subscribe(reason => {\n        this._destroyMenu();\n\n        // If a click closed the menu, we should close the entire chain of nested menus.\n        if ((reason === 'click' || reason === 'tab') && this._parentMenu) {\n          this._parentMenu.closed.emit(reason);\n        }\n      });\n    }\n  }\n  private _menu: MatMenuPanel;\n\n  /** Data to be passed along to any lazily-rendered content. */\n  @Input('matMenuTriggerData') menuData: any;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() readonly menuOpened: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   * @breaking-change 8.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuOpen: EventEmitter<void> = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() readonly menuClosed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   * @breaking-change 8.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuClose: EventEmitter<void> = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef<HTMLElement>,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _parentMenu: MatMenu,\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality,\n              // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n              // @breaking-change 8.0.0\n              private _focusMonitor?: FocusMonitor) {\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n    this._handleHover();\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._cleanUpSubscriptions();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (this._menuOpen) {\n      return;\n    }\n\n    this._checkMenu();\n\n    const overlayRef = this._createOverlay();\n    this._setPosition(overlayRef.getConfig().positionStrategy as FlexibleConnectedPositionStrategy);\n    overlayRef.attach(this._getPortal());\n\n    if (this.menu.lazyContent) {\n      this.menu.lazyContent.attach(this.menuData);\n    }\n\n    this._closeSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n    this._initMenu();\n\n    if (this.menu instanceof MatMenu) {\n      this.menu._startAnimation();\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n  focus(origin: FocusOrigin = 'program') {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._element, origin);\n    } else {\n      this._element.nativeElement.focus();\n    }\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (!this._overlayRef || !this.menuOpen) {\n      return;\n    }\n\n    const menu = this.menu;\n\n    this._closeSubscription.unsubscribe();\n    this._overlayRef.detach();\n\n    if (menu instanceof MatMenu) {\n      menu._resetAnimation();\n\n      if (menu.lazyContent) {\n        // Wait for the exit animation to finish before detaching the content.\n        menu._animationDone\n          .pipe(\n            filter(event => event.toState === 'void'),\n            take(1),\n            // Interrupt if the content got re-attached.\n            takeUntil(menu.lazyContent._attached)\n          )\n          .subscribe(() => menu.lazyContent!.detach(), undefined, () => {\n            // No matter whether the content got re-attached, reset the menu.\n            this._resetMenu();\n          });\n      } else {\n        this._resetMenu();\n      }\n    } else {\n      this._resetMenu();\n\n      if (menu.lazyContent) {\n        menu.lazyContent.detach();\n      }\n    }\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n    this.menu.focusFirstItem(this._openedBy || 'program');\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  /**\n   * This method resets the menu when it's closed, most importantly restoring\n   * focus to the menu trigger if the menu was opened via the keyboard.\n   */\n  private _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (!this._openedBy) {\n      // Note that the focus style will show up both for `program` and\n      // `keyboard` so we don't have to specify which one it is.\n      this.focus();\n    } else if (!this.triggersSubmenu()) {\n      this.focus(this._openedBy);\n    }\n\n    this._openedBy = null;\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as FlexibleConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n\n      // Consume the `keydownEvents` in order to prevent them from going to another overlay.\n      // Ideally we'd also have our keyboard event logic in here, however doing so will\n      // break anybody that may have implemented the `MatMenuPanel` themselves.\n      this._overlayRef.keydownEvents().subscribe();\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._overlay.position()\n          .flexibleConnectedTo(this._element)\n          .withLockedPosition()\n          .withTransformOriginOn('.mat-menu-panel'),\n      hasBackdrop: this.menu.hasBackdrop == null ? !this.triggersSubmenu() : this.menu.hasBackdrop,\n      backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n      scrollStrategy: this._scrollStrategy(),\n      direction: this._dir\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: FlexibleConnectedPositionStrategy): void {\n    if (this.menu.setPositionClasses) {\n      position.positionChanges.subscribe(change => {\n        const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n        const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n        this.menu.setPositionClasses!(posX, posY);\n      });\n    }\n  }\n\n  /**\n   * Sets the appropriate positions on a position strategy\n   * so the overlay connects with the trigger correctly.\n   * @param positionStrategy Strategy whose position to update.\n   */\n  private _setPosition(positionStrategy: FlexibleConnectedPositionStrategy) {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    positionStrategy.withPositions([\n      {originX, originY, overlayX, overlayY, offsetY},\n      {originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY},\n      {\n        originX,\n        originY: originFallbackY,\n        overlayX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      },\n      {\n        originX: originFallbackX,\n        originY: originFallbackY,\n        overlayX: overlayFallbackX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      }\n    ]);\n  }\n\n  /** Cleans up the active subscriptions. */\n  private _cleanUpSubscriptions(): void {\n    this._closeSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMenu ? this._parentMenu.closed : observableOf();\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      // Since right or middle button clicks won't trigger the `click` event,\n      // we shouldn't consider the menu as opened by mouse in those cases.\n      this._openedBy = event.button === 0 ? 'mouse' : null;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n  /** Handles the cases where the user hovers over the trigger. */\n  private _handleHover() {\n    // Subscribe to changes in the hovered item in order to toggle the panel.\n    if (!this.triggersSubmenu()) {\n      return;\n    }\n\n    this._hoverSubscription = this._parentMenu._hovered()\n      // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n      // with different data and triggers), we have to delay it by a tick to ensure that\n      // it won't be closed immediately after it is opened.\n      .pipe(\n        filter(active => active === this._menuItemInstance && !active.disabled),\n        delay(0, asapScheduler)\n      )\n      .subscribe(() => {\n        this._openedBy = 'mouse';\n\n        // If the same menu is used between multiple triggers, it might still be animating\n        // while the new trigger tries to re-open it. Wait for the animation to finish\n        // before doing so. Also interrupt if the user moves to another item.\n        if (this.menu instanceof MatMenu && this.menu._isAnimating) {\n          // We need the `delay(0)` here in order to avoid\n          // 'changed after checked' errors in some cases. See #12194.\n          this.menu._animationDone\n            .pipe(take(1), delay(0, asapScheduler), takeUntil(this._parentMenu._hovered()))\n            .subscribe(() => this.openMenu());\n        } else {\n          this.openMenu();\n        }\n      });\n  }\n\n  /** Gets the portal that should be attached to the overlay. */\n  private _getPortal(): TemplatePortal {\n    // Note that we can avoid this check by keeping the portal on the menu panel.\n    // While it would be cleaner, we'd have to introduce another required method on\n    // `MatMenuPanel`, making it harder to consume.\n    if (!this._portal || this._portal.templateRef !== this.menu.templateRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n    }\n\n    return this._portal;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatMenuContent} from './menu-content';\nimport {MatMenu} from './menu-directive';\nimport {MatMenuItem} from './menu-item';\nimport {\n  MatMenuTrigger,\n  MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './menu-trigger';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    MatRippleModule,\n    OverlayModule,\n  ],\n  exports: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent, MatCommonModule],\n  declarations: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent],\n  providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * @docs-private\n */\nexport const matSelectAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      transform: 'scaleY(0.8)',\n      minWidth: '100%',\n      opacity: 0\n    })),\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', animate('120ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void', animate('100ms 25ms linear', style({opacity: 0})))\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   * @deprecated Not used anymore. To be removed.\n   * @breaking-change 8.0.0\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {SPACE, ENTER, HOME, END, UP_ARROW, DOWN_ARROW, A} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple, CanDisableRippleCtor,\n  MatLine,\n  setLines,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Subscription} from 'rxjs';\nimport {MatListAvatarCssMatStyler, MatListIconCssMatStyler} from './list';\n\n\n/** @docs-private */\nexport class MatSelectionListBase {}\nexport const _MatSelectionListMixinBase: CanDisableRippleCtor & typeof MatSelectionListBase =\n    mixinDisableRipple(MatSelectionListBase);\n\n/** @docs-private */\nexport class MatListOptionBase {}\nexport const _MatListOptionMixinBase: CanDisableRippleCtor & typeof MatListOptionBase =\n    mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _selected = false;\n  private _disabled = false;\n  private _hasFocus = false;\n\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler) _icon: MatListIconCssMatStyler;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text') _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Value of the option */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */\n              @Inject(forwardRef(() => MatSelectionList)) public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    // List options that are selected at initialization can't be reported properly to the form\n    // control. This is because it takes some time until the selection-list knows about all\n    // available options. Also it can happen that the ControlValueAccessor has an initial value\n    // that should be used instead. Deferring the value change report to the next tick ensures\n    // that the form control value is not being overwritten.\n    const wasSelected = this._selected;\n\n    Promise.resolve().then(() => {\n      if (this._selected || wasSelected) {\n        this.selected = true;\n        this._changeDetector.markForCheck();\n      }\n    });\n  }\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => this.selected = false);\n    }\n\n    const hadFocus = this._hasFocus;\n    const newActiveItem = this.selectionList._removeOptionFromList(this);\n\n    // Only move focus if this option was focused at the time it was destroyed.\n    if (hadFocus && newActiveItem) {\n      newActiveItem.focus();\n    }\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? (this._text.nativeElement.textContent || '') : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n    }\n  }\n\n  _handleFocus() {\n    this.selectionList._setFocusedOption(this);\n    this._hasFocus = true;\n  }\n\n  _handleBlur() {\n    this.selectionList._onTouched();\n    this._hasFocus = false;\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. Returns whether the value has changed. */\n  _setSelected(selected: boolean): boolean {\n    if (selected === this._selected) {\n      return false;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n    return true;\n  }\n\n  /**\n   * Notifies Angular that the option needs to be checked in the next change detection run. Mainly\n   * used to trigger an update of the list option if the disabled state of the selection list\n   * changed.\n   */\n  _markForCheck() {\n    this._changeDetector.markForCheck();\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list',\n    '(focus)': 'focus()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    'aria-multiselectable': 'true',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\n    CanDisableRipple, AfterContentInit, ControlValueAccessor, OnDestroy {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** Tabindex of the selection list. */\n  @Input() tabIndex: number = 0;\n\n  /**\n   * Function used for comparing an option against the selected value when determining which\n   * options should appear as selected. The first argument is the value of an options. The second\n   * one is a value from the selected value. A boolean must be returned.\n   */\n  @Input() compareWith: (o1: any, o2: any) => boolean;\n\n  /** Whether the selection list is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // The `MatSelectionList` and `MatListOption` are using the `OnPush` change detection\n    // strategy. Therefore the options will not check for any changes if the `MatSelectionList`\n    // changed its state. Since we know that a change to `disabled` property of the list affects\n    // the state of the options, we manually mark each option for check.\n    if (this.options) {\n      this.options.forEach(option => option._markForCheck());\n    }\n  }\n  private _disabled: boolean = false;\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Used for storing the values that were assigned before the options were initialized. */\n  private _tempValues: string[]|null;\n\n  /** Subscription to sync value changes in the SelectionModel back to the SelectionList. */\n  private _modelChanges = Subscription.EMPTY;\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  constructor(private _element: ElementRef<HTMLElement>, @Attribute('tabindex') tabIndex: string) {\n    super();\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options)\n      .withWrap()\n      .withTypeAhead()\n      // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\n      // screenreader users, that allows reading the different options of the list.\n      .skipPredicate(() => false);\n\n    if (this._tempValues) {\n      this._setOptionsFromValues(this._tempValues);\n      this._tempValues = null;\n    }\n\n    // Sync external changes to the model back to the options.\n    this._modelChanges = this.selectedOptions.onChange.subscribe(event => {\n      if (event.added) {\n        for (let item of event.added) {\n          item.selected = true;\n        }\n      }\n\n      if (event.removed) {\n        for (let item of event.removed) {\n          item.selected = false;\n        }\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this._modelChanges.unsubscribe();\n  }\n\n  /** Focuses the last active list option. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this._setAllOptionsSelected(true);\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this._setAllOptionsSelected(false);\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItemIndex(this._getOptionIndex(option));\n  }\n\n  /**\n   * Removes an option from the selection list and updates the active item.\n   * @returns Currently-active item.\n   */\n  _removeOptionFromList(option: MatListOption): MatListOption | null {\n    const optionIndex = this._getOptionIndex(option);\n\n    if (optionIndex > -1 && this._keyManager.activeItemIndex === optionIndex) {\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.updateActiveItemIndex(optionIndex - 1);\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.updateActiveItemIndex(Math.min(optionIndex + 1, this.options.length - 1));\n      }\n    }\n\n    return this._keyManager.activeItem;\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n    const previousFocusIndex = manager.activeItemIndex;\n\n    switch (keyCode) {\n      case SPACE:\n      case ENTER:\n        this._toggleFocusedOption();\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n      case HOME:\n      case END:\n        keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case A:\n        if (event.ctrlKey) {\n          this.options.find(option => !option.selected) ? this.selectAll() : this.deselectAll();\n          event.preventDefault();\n        }\n        break;\n      default:\n        manager.onKeydown(event);\n    }\n\n    if ((keyCode === UP_ARROW || keyCode === DOWN_ARROW) && event.shiftKey &&\n        manager.activeItemIndex !== previousFocusIndex) {\n      this._toggleFocusedOption();\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    if (this.options) {\n      this._onChange(this._getSelectedOptionValues());\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    } else {\n      this._tempValues = values;\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values.forEach(value => {\n      const correspondingOption = this.options.find(option => {\n        // Skip options that are already in the model. This allows us to handle cases\n        // where the same primitive value is selected multiple times.\n        if (option.selected) {\n          return false;\n        }\n\n        return this.compareWith ? this.compareWith(option.value, value) : option.value === value;\n      });\n\n      if (correspondingOption) {\n        correspondingOption._setSelected(true);\n      }\n    });\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the state of the currently focused option if enabled. */\n  private _toggleFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption && !focusedOption.disabled) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n      }\n    }\n  }\n\n  /**\n   * Sets the selected state on all of the options\n   * and emits an event if anything changed.\n   */\n  private _setAllOptionsSelected(isSelected: boolean) {\n    // Keep track of whether anything changed, because we only want to\n    // emit the changed event when something actually changed.\n    let hasChanged = false;\n\n    this.options.forEach(option => {\n      if (option._setSelected(isSelected)) {\n        hasChanged = true;\n      }\n    });\n\n    if (hasChanged) {\n      this._reportValueChange();\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MatLine,\n  setLines,\n  mixinDisableRipple,\n} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nexport class MatListBase {}\nexport const _MatListMixinBase: CanDisableRippleCtor & typeof MatListBase =\n    mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nexport class MatListItemBase {}\nexport const _MatListItemMixinBase: CanDisableRippleCtor & typeof MatListItemBase =\n    mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list, mat-action-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {'class': 'mat-list'},\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple {\n  /**\n   * @deprecated _elementRef parameter to be made required.\n   * @breaking-change 8.0.0\n   */\n  constructor(private _elementRef?: ElementRef<HTMLElement>) {\n    super();\n  }\n\n  _getListType(): 'list' | 'action-list' | null {\n    const elementRef = this._elementRef;\n\n    // @breaking-change 8.0.0 Remove null check once _elementRef is a required param.\n    if (elementRef) {\n      const nodeName = elementRef.nativeElement.nodeName.toLowerCase();\n\n      if (nodeName === 'mat-list') {\n        return 'list';\n      }\n\n      if (nodeName === 'mat-action-list') {\n        return 'action-list';\n      }\n    }\n\n    return null;\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item], button[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    // @breaking-change 8.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\n    '[class.mat-list-item-avatar]': '_avatar || _icon',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple {\n  private _isInteractiveList: boolean = false;\n  private _list?: MatNavList | MatList;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler) _icon: MatListIconCssMatStyler;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              @Optional() navList?: MatNavList,\n              @Optional() list?: MatList) {\n    super();\n    this._isInteractiveList = !!(navList || (list && list._getListType() === 'action-list'));\n    this._list = navList || list;\n\n    // If no type attributed is specified for <button>, set it to \"button\".\n    // If a type attribute is already specified, do nothing.\n    const element = this._getHostElement();\n\n    if (element.nodeName.toLowerCase() === 'button' && !element.hasAttribute('type')) {\n      element.setAttribute('type', 'button');\n    }\n  }\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isInteractiveList || this.disableRipple ||\n           !!(this._list && this._list.disableRipple);\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  Optional,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n  Inject,\n} from '@angular/core';\nimport {MatLine, setLines} from '@angular/material/core';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MAT_GRID_LIST, MatGridListBase} from './grid-list-base';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(\n    private _element: ElementRef<HTMLElement>,\n    @Optional() @Inject(MAT_GRID_LIST) public _gridList?: MatGridListBase) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value: number) { this._rowspan = Math.round(coerceNumberProperty(value)); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value: number) { this._colspan = Math.round(coerceNumberProperty(value)); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    (this._element.nativeElement.style as any)[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridTileText implements AfterContentInit {\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef<HTMLElement>) {}\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    const lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  /**\n   * Updates the tile positions.\n   * @param numColumns Amount of columns in the grid.\n   */\n  update(numColumns: number, tiles: MatGridTile[]) {\n    this.columnIndex = 0;\n    this.rowIndex = 0;\n\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    const gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile. Since gapEndIndex is\n      // exclusive, gapEndIndex is 0 means we didn't find a gap and should continue.\n    } while ((gapEndIndex - gapStartIndex < tileCols) || (gapEndIndex == 0));\n\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * RegExp that can be used to check whether a value will\n * be allowed inside a CSS `calc()` expression.\n */\nconst cssCalcAllowedValue = /^-?\\d+((\\.\\d+)?[A-Za-z%$]?)+$/;\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'rtl' ? 'right' : 'left';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number): void;\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList): void;\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n\n    if (!cssCalcAllowedValue.test(this.fixedRowHeight)) {\n      throw Error(`Invalid value \"${this.fixedRowHeight}\" set as rowHeight.`);\n    }\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    if (list._tiles) {\n      list._tiles.forEach(tile => {\n        tile._setStyle('top', null);\n        tile._setStyle('height', null);\n      });\n    }\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height. */\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['paddingBottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('marginTop', null);\n      tile._setStyle('paddingTop', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    if (list._tiles) {\n      list._tiles.forEach(tile => {\n        tile._setStyle('top', null);\n        tile._setStyle('height', null);\n      });\n    }\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string { return `calc(${exp})`; }\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return (value.match(/px|em|rem/)) ? value : value + 'px';\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MAT_GRID_LIST, MatGridListBase} from './grid-list-base';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  providers: [{\n    provide: MAT_GRID_LIST,\n    useExisting: MatGridList\n  }],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridList implements MatGridListBase, OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /** Used for determiningthe position of each tile in the grid. */\n  private _tileCoordinator: TileCoordinator;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile, {descendants: true}) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols(): number { return this._cols; }\n  set cols(value: number) {\n    this._cols = Math.max(1, Math.round(coerceNumberProperty(value)));\n  }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize(): string { return this._gutter; }\n  set gutterSize(value: string) { this._gutter = `${value == null ? '' : value}`; }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  get rowHeight(): string | number { return this._rowHeight; }\n  set rowHeight(value: string | number) {\n    const newValue = `${value == null ? '' : value}`;\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    if (!this._tileCoordinator) {\n      this._tileCoordinator = new TileCoordinator();\n    }\n\n\n    const tracker = this._tileCoordinator;\n    const tiles = this._tiles.filter(tile => !tile._gridList || tile._gridList === this);\n    const direction = this._dir ? this._dir.value : 'ltr';\n\n    this._tileCoordinator.update(this.cols, tiles);\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      (this._element.nativeElement.style as any)[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {HttpClient, HttpErrorResponse} from '@angular/common/http';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n} from '@angular/core';\nimport {DomSanitizer, SafeResourceUrl, SafeHtml} from '@angular/platform-browser';\nimport {forkJoin, Observable, of as observableOf, throwError as observableThrow} from 'rxjs';\nimport {catchError, finalize, map, share, tap} from 'rxjs/operators';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeUrlError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeLiteralError(literal: SafeHtml): Error {\n  return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n               `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  url: SafeResourceUrl | null;\n  svgElement: SVGElement | null;\n\n  constructor(url: SafeResourceUrl);\n  constructor(svgElement: SVGElement);\n  constructor(data: SafeResourceUrl | SVGElement) {\n    // Note that we can't use `instanceof SVGElement` here,\n    // because it'll break during server-side rendering.\n    if (!!(data as any).nodeName) {\n      this.svgElement = data as SVGElement;\n    } else {\n      this.url = data as SafeResourceUrl;\n    }\n  }\n}\n\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable({providedIn: 'root'})\nexport class MatIconRegistry {\n  private _document: Document;\n\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document: any) {\n      this._document = document;\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n\n  /**\n   * Registers an icon using an HTML string in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteral(iconName: string, literal: SafeHtml): this {\n    return this.addSvgIconLiteralInNamespace('', iconName, literal);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon using an HTML string in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteralInNamespace(namespace: string, iconName: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._createSvgElementForSingleIcon(sanitizedLiteral);\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the default namespace.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteral(literal: SafeHtml): this {\n    return this.addSvgIconSetLiteralInNamespace('', literal);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteralInNamespace(namespace: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._svgElementFromString(sanitizedLiteral);\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the `<mat-icon>` element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    const cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg)),\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg)),\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: HttpErrorResponse): Observable<SVGElement | null> => {\n            const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the\n            // combined Observable won't necessarily fail.\n            console.error(`Loading icon set URL: ${url} failed: ${err.message}`);\n            return observableOf(null);\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // If the SVG for this icon set has already been parsed, do nothing.\n    if (config.svgElement) {\n      return observableOf(config.svgElement);\n    }\n\n    return this._fetchUrl(config.url).pipe(map(svgText => {\n      // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n      // only needs to occur if the cache is yet unset.\n      if (!config.svgElement) {\n        config.svgElement = this._svgElementFromString(svgText);\n      }\n\n      return config.svgElement;\n    }));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    const iconSource = iconSet.querySelector('#' + iconName);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.removeAttribute('id');\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    const div = this._document.createElement('DIV');\n    div.innerHTML = str;\n    const svg = div.querySelector('svg') as SVGElement;\n\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n\n    return svg;\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    let svg = this._svgElementFromString('<svg></svg>');\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl | null): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    if (safeUrl == null) {\n      throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finalize` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share(),\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n\n  /**\n   * Registers an icon config by name in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param iconName Name under which to register the config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconConfig(namespace: string, iconName: string, config: SvgIconConfig): this {\n    this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n    return this;\n  }\n\n  /**\n   * Registers an icon set config in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconSetConfig(namespace: string, config: SvgIconConfig): this {\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n\n    return this;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), DOCUMENT as InjectionToken<any>],\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n  Optional,\n  InjectionToken,\n  inject,\n  Inject,\n  OnDestroy,\n  AfterViewChecked,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nexport class MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatIconMixinBase: CanColorCtor & typeof MatIconBase =\n    mixinColor(MatIconBase);\n\n/**\n * Injection token used to provide the current location to `MatIcon`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport const MAT_ICON_LOCATION = new InjectionToken<MatIconLocation>('mat-icon-location', {\n  providedIn: 'root',\n  factory: MAT_ICON_LOCATION_FACTORY\n});\n\n/**\n * Stubbed out location for `MatIcon`.\n * @docs-private\n */\nexport interface MatIconLocation {\n  getPathname: () => string;\n}\n\n/** @docs-private */\nexport function MAT_ICON_LOCATION_FACTORY(): MatIconLocation {\n  const _document = inject(DOCUMENT);\n  const _location = _document ? _document.location : null;\n\n  return {\n    // Note that this needs to be a function, rather than a property, because Angular\n    // will only resolve it once, but we want the current path on each call.\n    getPathname: () => _location ? (_location.pathname + _location.search) : ''\n  };\n}\n\n\n/** SVG attributes that accept a FuncIRI (e.g. `url(<something>)`). */\nconst funcIriAttributes = [\n  'clip-path',\n  'color-profile',\n  'src',\n  'cursor',\n  'fill',\n  'filter',\n  'marker',\n  'marker-start',\n  'marker-mid',\n  'marker-end',\n  'mask',\n  'stroke'\n];\n\n/** Selector that can be used to find all elements that are using a `FuncIRI`. */\nconst funcIriAttributeSelector = funcIriAttributes.map(attr => `[${attr}]`).join(', ');\n\n/** Regex that can be used to extract the id out of a FuncIRI. */\nconst funcIriPattern = /^url\\(['\"]?#(.*?)['\"]?\\)$/;\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon',\n    '[class.mat-icon-inline]': 'inline',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, AfterViewChecked,\n  CanColor, OnDestroy {\n\n  /**\n   * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n   * the element the icon is contained in.\n   */\n  @Input()\n  get inline(): boolean {\n    return this._inline;\n  }\n  set inline(inline: boolean) {\n    this._inline = coerceBooleanProperty(inline);\n  }\n  private _inline: boolean = false;\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  /** Keeps track of the current page path. */\n  private _previousPath?: string;\n\n  /** Keeps track of the elements and attributes that we've prefixed with the current path. */\n  private _elementsWithExternalReferences?: Map<Element, {name: string, value: string}[]>;\n\n  constructor(\n      elementRef: ElementRef<HTMLElement>,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string,\n      /**\n       * @deprecated `location` parameter to be made required.\n       * @breaking-change 8.0.0\n       */\n      @Optional() @Inject(MAT_ICON_LOCATION) private _location?: MatIconLocation) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   `'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)`\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    if (changes.svgIcon) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngAfterViewChecked() {\n    const cachedElements = this._elementsWithExternalReferences;\n\n    if (cachedElements && this._location && cachedElements.size) {\n      const newPath = this._location.getPathname();\n\n      // We need to check whether the URL has changed on each change detection since\n      // the browser doesn't have an API that will let us react on link clicks and\n      // we can't depend on the Angular router. The references need to be updated,\n      // because while most browsers don't care whether the URL is correct after\n      // the first render, Safari will break if the user navigates to a different\n      // page and the SVG isn't re-rendered.\n      if (newPath !== this._previousPath) {\n        this._previousPath = newPath;\n        this._prependPathToReferences(newPath);\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._elementsWithExternalReferences) {\n      this._elementsWithExternalReferences.clear();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n\n    // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\n    // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\n    // Do this before inserting the element into the DOM, in order to avoid a style recalculation.\n    const styleTags = svg.querySelectorAll('style') as NodeListOf<HTMLStyleElement>;\n\n    for (let i = 0; i < styleTags.length; i++) {\n      styleTags[i].textContent += ' ';\n    }\n\n    // Note: we do this fix here, rather than the icon registry, because the\n    // references have to point to the URL at the time that the icon was created.\n    if (this._location) {\n      const path = this._location.getPathname();\n      this._previousPath = path;\n      this._cacheChildrenWithExternalReferences(svg);\n      this._prependPathToReferences(path);\n    }\n\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    let childCount = layoutElement.childNodes.length;\n\n    if (this._elementsWithExternalReferences) {\n      this._elementsWithExternalReferences.clear();\n    }\n\n    // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n    // we can't use innerHTML, because IE will throw if the element has a data binding.\n    while (childCount--) {\n      const child = layoutElement.childNodes[childCount];\n\n      // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n      // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n      if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n        layoutElement.removeChild(child);\n      }\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n\n  /**\n   * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`\n   * reference. This is required because WebKit browsers require references to be prefixed with\n   * the current path, if the page has a `base` tag.\n   */\n  private _prependPathToReferences(path: string) {\n    const elements = this._elementsWithExternalReferences;\n\n    if (elements) {\n      elements.forEach((attrs, element) => {\n        attrs.forEach(attr => {\n          element.setAttribute(attr.name, `url('${path}#${attr.value}')`);\n        });\n      });\n    }\n  }\n\n  /**\n   * Caches the children of an SVG element that have `url()`\n   * references that we need to prefix with the current path.\n   */\n  private _cacheChildrenWithExternalReferences(element: SVGElement) {\n    const elementsWithFuncIri = element.querySelectorAll(funcIriAttributeSelector);\n    const elements = this._elementsWithExternalReferences =\n        this._elementsWithExternalReferences || new Map();\n\n    for (let i = 0; i < elementsWithFuncIri.length; i++) {\n      funcIriAttributes.forEach(attr => {\n        const elementWithReference = elementsWithFuncIri[i];\n        const value = elementWithReference.getAttribute(attr);\n        const match = value ? value.match(funcIriPattern) : null;\n\n        if (match) {\n          let attributes = elements.get(elementWithReference);\n\n          if (!attributes) {\n            attributes = [];\n            elements.set(elementWithReference, attributes);\n          }\n\n          attributes!.push({name: attr, value: match[1]});\n        }\n      });\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  DateAdapter,\n  mixinColor,\n  ThemePalette,\n} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {merge, Subject, Subscription} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatCalendar} from './calendar';\nimport {matDatepickerAnimations} from './datepicker-animations';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatCalendarCellCssClasses} from './calendar-body';\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY,\n};\n\n// Boilerplate for applying mixins to MatDatepickerContent.\n/** @docs-private */\nexport class MatDatepickerContentBase {\n  constructor(public _elementRef: ElementRef) { }\n}\nexport const _MatDatepickerContentMixinBase: CanColorCtor & typeof MatDatepickerContentBase =\n    mixinColor(MatDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[@transformPanel]': '\"enter\"',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n  },\n  animations: [\n    matDatepickerAnimations.transformPanel,\n    matDatepickerAnimations.fadeInCalendar,\n  ],\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color'],\n})\nexport class MatDatepickerContent<D> extends _MatDatepickerContentMixinBase\n  implements AfterViewInit, CanColor {\n\n  /** Reference to the internal calendar component. */\n  @ViewChild(MatCalendar) _calendar: MatCalendar<D>;\n\n  /** Reference to the datepicker that created the overlay. */\n  datepicker: MatDatepicker<D>;\n\n  /** Whether the datepicker is above or below the input. */\n  _isAbove: boolean;\n\n  constructor(elementRef: ElementRef) {\n    super(elementRef);\n  }\n\n  ngAfterViewInit() {\n    this._calendar.focusActiveCell();\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDatepicker<D> implements OnDestroy, CanColor {\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** An input indicating the type of the custom header component for the calendar, if set. */\n  @Input() calendarHeaderComponent: ComponentType<any>;\n\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n  /** Color palette to use on the datepicker's calendar. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n        (this._datepickerInput ? this._datepickerInput._getThemePalette() : undefined);\n  }\n  set color(value: ThemePalette) {\n    this._color = value;\n  }\n  _color: ThemePalette;\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits selected year in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected month in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { value ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<MatDatepickerContent<D>> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** Reference to the component instantiated in popup mode. */\n  private _popupComponentRef: ComponentRef<MatDatepickerContent<D>> | null;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  /** Subscription to value changes in the associated input element. */\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  /** Emits new selected date when selected date changes. */\n  readonly _selectedChanged = new Subject<D>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n      this._popupComponentRef = null;\n    }\n  }\n\n  /** Selects the given date */\n  select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this._selectedChanged.next(date);\n    }\n  }\n\n  /** Emits the selected year in multiyear view */\n  _selectYear(normalizedYear: D): void {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Emits selected month in year view */\n  _selectMonth(normalizedMonth: D): void {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    // Usually this would be handled by `open` which ensures that we can only have one overlay\n    // open at a time, however since we reset the variables in async handlers some overlays\n    // may slip through if the user opens and closes multiple times in quick succession (e.g.\n    // by holding down the enter key).\n    if (this._dialogRef) {\n      this._dialogRef.close();\n    }\n\n    this._dialogRef = this._dialog.open<MatDatepickerContent<D>>(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n    this._setColor();\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal<MatDatepickerContent<D>>(MatDatepickerContent,\n                                                                          this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\n      this._popupComponentRef.instance.datepicker = this;\n      this._setColor();\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir,\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n    this._popupRef.overlayElement.setAttribute('role', 'dialog');\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => {\n        // Closing on alt + up is only valid when there's an input associated with the datepicker.\n        return event.keyCode === ESCAPE ||\n               (this._datepickerInput && event.altKey && event.keyCode === UP_ARROW);\n      }))\n    ).subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .flexibleConnectedTo(this._datepickerInput.getConnectedOverlayOrigin())\n      .withTransformOriginOn('.mat-datepicker-content')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8)\n      .withLockedPosition()\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom'\n        },\n        {\n          originX: 'end',\n          originY: 'bottom',\n          overlayX: 'end',\n          overlayY: 'top'\n        },\n        {\n          originX: 'end',\n          originY: 'top',\n          overlayX: 'end',\n          overlayY: 'bottom'\n        }\n      ]);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Passes the current theme color along to the calendar overlay. */\n  private _setColor(): void {\n    const color = this.color;\n    if (this._popupComponentRef) {\n      this._popupComponentRef.instance.color = color;\n    }\n    if (this._dialogRef) {\n      this._dialogRef.componentInstance.color = color;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators,\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats, ThemePalette} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/** @docs-private */\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n/** @docs-private */\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onBlur()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements ControlValueAccessor, OnDestroy, Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    if (!value) {\n      return;\n    }\n\n    this._datepicker = value;\n    this._datepicker._registerInput(this);\n    this._datepickerSubscription.unsubscribe();\n\n    this._datepickerSubscription = this._datepicker._selectedChanged.subscribe((selected: D) => {\n      this.value = selected;\n      this._cvaOnChange(selected);\n      this._onTouched();\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n      this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    });\n  }\n  _datepicker: MatDatepicker<D>;\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(value: (date: D | null) => boolean) {\n    this._dateFilter = value;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    const oldDate = this.value;\n    this._value = value;\n    this._formatValue(value);\n\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    const element = this._elementRef.nativeElement;\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n\n    // We need to null check the `blur` method, because it's undefined during SSR.\n    if (newValue && element.blur) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      element.blur();\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D | null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef<HTMLInputElement>,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** @docs-private */\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0 Use `getConnectedOverlayOrigin` instead\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this.getConnectedOverlayOrigin();\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    const isAltDownArrow = event.altKey && event.keyCode === DOWN_ARROW;\n\n    if (this._datepicker && isAltDownArrow && !this._elementRef.nativeElement.readOnly) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n\n    if (!this._dateAdapter.sameDate(date, this._value)) {\n      this._value = date;\n      this._cvaOnChange(date);\n      this._valueChange.emit(date);\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    }\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /** Returns the palette used by the input's form field, if any. */\n  _getThemePalette(): ThemePalette {\n    return this._formField ? this._formField.color : undefined;\n  }\n\n  /** Handles blur events on the input. */\n  _onBlur() {\n    // Reformat the input only if we have a valid value.\n    if (this.value) {\n      this._formatValue(this.value);\n    }\n\n    this._onTouched();\n  }\n\n  /** Formats a value and sets it on the input element. */\n  private _formatValue(value: D | null) {\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class MatDatepickerToggleIcon {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'class': 'mat-datepicker-toggle',\n    // Clear out the native tabindex here since we forward it to the underlying button\n    '[attr.tabindex]': 'null',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n    '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n    '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon) _customIcon: MatDatepickerToggleIcon;\n\n  constructor(\n    public _intl: MatDatepickerIntl,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Attribute('tabindex') defaultTabIndex: string) {\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.datepicker) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatCalendar, MatCalendarHeader} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {\n  MatDatepicker,\n  MatDatepickerContent,\n  MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    OverlayModule,\n    A11yModule,\n    PortalModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n    MatCalendarHeader,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-horizontal]': '!vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input()\n  get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [MatDivider, MatCommonModule],\n  declarations: [MatDivider],\n})\nexport class MatDividerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/**\n * Base interface for a `MatAccordion`.\n * @docs-private\n */\nexport interface MatAccordionBase extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  hideToggle: boolean;\n\n  /** Display mode used for all expansion panels in the accordion. */\n  displayMode: MatAccordionDisplayMode;\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown: (event: KeyboardEvent) => void;\n\n  /** Handles focus events on the panel headers. */\n  _handleHeaderFocus: (header: any) => void;\n}\n\n\n/**\n * Token used to provide a `MatAccordion` to `MatExpansionPanel`.\n * Used primarily to avoid circular imports between `MatAccordion` and `MatExpansionPanel`.\n */\nexport const MAT_ACCORDION = new InjectionToken<MatAccordionBase>('MAT_ACCORDION');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  EventEmitter,\n  ElementRef,\n  Input,\n  Inject,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  SkipSelf,\n  ViewContainerRef,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subject} from 'rxjs';\nimport {filter, startWith, take, distinctUntilChanged} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {MAT_ACCORDION, MatAccordionBase} from './accordion-base';\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  providers: [\n    // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n    // to the same accordion.\n    {provide: MAT_ACCORDION, useValue: undefined},\n  ],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  }\n})\nexport class MatExpansionPanel extends CdkAccordionItem implements AfterContentInit, OnChanges,\n  OnDestroy {\n\n  // @breaking-change 8.0.0 Remove `| undefined` from here\n  // when the `_document` constructor param is required.\n  private _document: Document | undefined;\n\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean {\n    return this._hideToggle || (this.accordion && this.accordion.hideToggle);\n  }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n  private _hideToggle = false;\n\n  /** An event emitted after the body's expansion animation happens. */\n  @Output() afterExpand = new EventEmitter<void>();\n\n  /** An event emitted after the body's collapse animation happens. */\n  @Output() afterCollapse = new EventEmitter<void>();\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordionBase;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent) _lazyContent: MatExpansionPanelContent;\n\n  /** Element containing the panel's user-provided content. */\n  @ViewChild('body') _body: ElementRef<HTMLElement>;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  /** Stream of body animation done events. */\n  _bodyAnimationDone = new Subject<AnimationEvent>();\n\n  constructor(@Optional() @SkipSelf() @Inject(MAT_ACCORDION) accordion: MatAccordionBase,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef,\n              // @breaking-change 8.0.0 _document and _animationMode to be made required\n              @Inject(DOCUMENT) _document?: any,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n    this._document = _document;\n\n    // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n    this._bodyAnimationDone.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe(event => {\n      if (event.fromState !== 'void') {\n        if (event.toState === 'expanded') {\n          this.afterExpand.emit();\n        } else if (event.toState === 'collapsed') {\n          this.afterCollapse.emit();\n        }\n      }\n    });\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      // We don't need to subscribe to the `stateChanges` of the parent accordion because each time\n      // the [displayMode] input changes, the change detection will also cover the host bindings\n      // of this expansion panel.\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith<void>(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._bodyAnimationDone.complete();\n    this._inputChanges.complete();\n  }\n\n  /** Checks whether the expansion panel's content contains the currently-focused element. */\n  _containsFocus(): boolean {\n    if (this._body && this._document) {\n      const focusedElement = this._document.activeElement;\n      const bodyElement = this._body.nativeElement;\n      return focusedElement === bodyElement || bodyElement.contains(focusedElement);\n    }\n\n    return false;\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusableOption, FocusOrigin} from '@angular/cdk/a11y';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, Subscription, EMPTY} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanel} from './expansion-panel';\n\n\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy, FocusableOption {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n      @Host() public panel: MatExpansionPanel,\n      private _element: ElementRef,\n      private _focusMonitor: FocusMonitor,\n      private _changeDetectorRef: ChangeDetectorRef) {\n\n    const accordionHideToggleChange = panel.accordion ?\n      panel.accordion._stateChanges.pipe(filter(changes => !!changes.hideToggle)) : EMPTY;\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to subscribe and trigger change detection manually.\n    this._parentChangeSubscription = merge(\n      panel.opened,\n      panel.closed,\n      accordionHideToggleChange,\n      panel._inputChanges.pipe(filter(changes => !!(changes.hideToggle || changes.disabled)))\n    )\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Avoids focus being lost if the panel contained the focused element and was closed.\n    panel.closed\n      .pipe(filter(() => panel._containsFocus()))\n      .subscribe(() => _focusMonitor.focusVia(_element, 'program'));\n\n    _focusMonitor.monitor(_element).subscribe(origin => {\n      if (origin && panel.accordion) {\n        panel.accordion._handleHeaderFocus(this);\n      }\n    });\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /**\n   * Whether the associated panel is disabled. Implemented as a part of `FocusableOption`.\n   * @docs-private\n   */\n  get disabled() {\n    return this.panel.disabled;\n  }\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    this.panel.toggle();\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        if (!event.altKey && !event.metaKey && !event.shiftKey && !event.ctrlKey) {\n          event.preventDefault();\n          this._toggle();\n        }\n\n        break;\n      default:\n        if (this.panel.accordion) {\n          this.panel.accordion._handleHeaderKeydown(event);\n        }\n\n        return;\n    }\n  }\n\n  /**\n   * Focuses the panel header. Implemented as a part of `FocusableOption`.\n   * @param origin Origin of the action that triggered the focus.\n   * @docs-private\n   */\n  focus(origin: FocusOrigin = 'program') {\n    this._focusMonitor.focusVia(this._element, origin);\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element);\n  }\n}\n\n/**\n * `<mat-panel-description>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host: {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * `<mat-panel-title>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host: {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, ContentChildren, QueryList, AfterContentInit} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {HOME, END} from '@angular/cdk/keycodes';\nimport {MAT_ACCORDION, MatAccordionBase, MatAccordionDisplayMode} from './accordion-base';\nimport {MatExpansionPanelHeader} from './expansion-panel-header';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  inputs: ['multi'],\n  providers: [{\n    provide: MAT_ACCORDION,\n    useExisting: MatAccordion\n  }],\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion implements MatAccordionBase, AfterContentInit {\n  private _keyManager: FocusKeyManager<MatExpansionPanelHeader>;\n\n  @ContentChildren(MatExpansionPanelHeader, {descendants: true})\n  _headers: QueryList<MatExpansionPanelHeader>;\n\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * Display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the rest of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager(this._headers).withWrap();\n  }\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown(event: KeyboardEvent) {\n    const {keyCode} = event;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME) {\n      manager.setFirstItemActive();\n      event.preventDefault();\n    } else if (keyCode === END) {\n      manager.setLastItemActive();\n      event.preventDefault();\n    } else {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  _handleHeaderFocus(header: MatExpansionPanelHeader) {\n    this._keyManager.updateActiveItem(header);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanel, MatExpansionPanelActionRow} from './expansion-panel';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/**\n * Injection token used to provide a grid list to a tile and to avoid circular imports.\n * @docs-private\n */\nexport const MAT_GRID_LIST = new InjectionToken<MatGridListBase>('MAT_GRID_LIST');\n\n/**\n * Base interface for a `MatGridList`.\n * @docs-private\n */\nexport interface MatGridListBase {\n  cols: number;\n  gutterSize: string;\n  rowHeight: number | string;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  NgZone,\n} from '@angular/core';\nimport {take} from 'rxjs/operators';\n\n/**\n * Extra CSS classes that can be associated with a calendar cell.\n */\nexport type MatCalendarCellCssClasses = string | string[] | Set<string> | {[key: string]: any};\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean,\n              public cssClasses?: MatCalendarCellCssClasses) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  constructor(private _elementRef: ElementRef<HTMLElement>, private _ngZone: NgZone) { }\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (cell.enabled) {\n      this.selectedValueChange.emit(cell.value);\n    }\n  }\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  get _firstRowOffset(): number {\n    return this.rows && this.rows.length && this.rows[0].length ?\n        this.numCols - this.rows[0].length : 0;\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        const activeCell: HTMLElement | null =\n            this._elementRef.nativeElement.querySelector('.mat-calendar-body-active');\n\n        if (activeCell) {\n          activeCell.focus();\n        }\n      });\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell, MatCalendarCellCssClasses} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** Function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n              this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n      case SPACE:\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n          this._dateSelected(this._dateAdapter.getDate(this._activeDate));\n          this._userSelection.emit();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(\n            this._dateAdapter.getYear(this.activeDate),\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const enabled = this._shouldEnableDate(date);\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      const cellClasses = this.dateClass ? this.dateClass(date) : undefined;\n\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled, cellClasses));\n    }\n  }\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new year is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\n    let activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n      case SPACE:\n        this._yearSelected(this._dateAdapter.getYear(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  _getActiveCell(): number {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _shouldEnableYear(year: number) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null ||\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n      return false;\n    }\n\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    const normalizedDate =\n          this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    this.monthSelected.emit(normalizedDate);\n\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n      case SPACE:\n        this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (month === undefined || month === null ||\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentPortal, ComponentType, Portal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView, yearsPerPage} from './multi-year-view';\nimport {MatYearView} from './year-view';\nimport {MatCalendarCellCssClasses} from './calendar-body';\n\n/**\n * Possible views for the calendar.\n * @docs-private\n */\nexport type MatCalendarView = 'month' | 'year' | 'multi-year';\n\n/** Default header for MatCalendar */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar-header',\n  templateUrl: 'calendar-header.html',\n  exportAs: 'matCalendarHeader',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarHeader<D> {\n  constructor(private _intl: MatDatepickerIntl,\n              @Inject(forwardRef(() => MatCalendar)) public calendar: MatCalendar<D>,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    this.calendar.stateChanges.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  /** The label for the current calendar view. */\n  get periodButtonText(): string {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter\n          .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\n              .toLocaleUpperCase();\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYearName(this.calendar.activeDate);\n    }\n    const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n    const lastYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  get periodButtonLabel(): string {\n    return this.calendar.currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the the previous button. */\n  get prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** The label for the the next button. */\n  get nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** Handles user clicks on the period label. */\n  currentPeriodClicked(): void {\n    this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  previousClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage\n            );\n  }\n\n  /** Handles user clicks on the next button. */\n  nextClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate,\n                    this.calendar.currentView == 'year' ? 1 : yearsPerPage\n            );\n  }\n\n  /** Whether the previous period button is enabled. */\n  previousEnabled(): boolean {\n    if (!this.calendar.minDate) {\n      return true;\n    }\n    return !this.calendar.minDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  nextEnabled(): boolean {\n    return !this.calendar.maxDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n}\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, AfterViewChecked, OnDestroy, OnChanges {\n  /** An input indicating the type of the header component, if set. */\n  @Input() headerComponent: ComponentType<any>;\n\n  /** A portal containing the header component type for this calendar. */\n  _calendarHeaderPortal: Portal<any>;\n\n  private _intlChanges: Subscription;\n\n  /**\n   * Used for scheduling that focus should be moved to the active cell on the next tick.\n   * We need to schedule it, rather than do it immediately, because we have to wait\n   * for Angular to re-evaluate the view children.\n   */\n  private _moveFocusOnNextTick = false;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: MatCalendarView = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** Function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView) multiYearView: MatMultiYearView<D>;\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get activeDate(): D { return this._clampedActiveDate; }\n  set activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n    this.stateChanges.next();\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  get currentView(): MatCalendarView { return this._currentView; }\n  set currentView(value: MatCalendarView) {\n    this._currentView = value;\n    this._moveFocusOnNextTick = true;\n  }\n  private _currentView: MatCalendarView;\n\n  /**\n   * Emits whenever there is a state change that the header may need to respond to.\n   */\n  stateChanges = new Subject<void>();\n\n  constructor(_intl: MatDatepickerIntl,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => {\n      _changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    });\n  }\n\n  ngAfterContentInit() {\n    this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || MatCalendarHeader);\n    this.activeDate = this.startAt || this._dateAdapter.today();\n\n    // Assign to the private property since we don't want to move focus on init.\n    this._currentView = this.startView;\n  }\n\n  ngAfterViewChecked() {\n    if (this._moveFocusOnNextTick) {\n      this._moveFocusOnNextTick = false;\n      this.focusActiveCell();\n    }\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n    this.stateChanges.complete();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change = changes.minDate || changes.maxDate || changes.dateFilter;\n\n    if (change && !change.firstChange) {\n      const view = this._getCurrentViewComponent();\n\n      if (view) {\n        // We need to `detectChanges` manually here, because the `minDate`, `maxDate` etc. are\n        // passed down to the view via data bindings which won't be up-to-date when we call `_init`.\n        this._changeDetectorRef.detectChanges();\n        view._init();\n      }\n    }\n\n    this.stateChanges.next();\n  }\n\n  focusActiveCell() {\n    this._getCurrentViewComponent()._focusActiveCell();\n  }\n\n  /** Updates today's date after an update of the active date */\n  updateTodaysDate() {\n    let view = this.currentView == 'month' ? this.monthView :\n            (this.currentView == 'year' ? this.yearView : this.multiYearView);\n\n    view.ngAfterContentInit();\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles year/month selection in the multi-year/year views. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this.activeDate = date;\n    this.currentView = view;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Returns the component instance that corresponds to the current calendar view. */\n  private _getCurrentViewComponent() {\n    return this.monthView || this.yearView || this.multiYearView;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material datepicker.\n * @docs-private\n */\nexport const matDatepickerAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n  /** Transforms the height of the datepicker's calendar. */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(1, 0.8)'\n    })),\n    transition('void => enter',  animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n      opacity: 1,\n      transform: 'scale(1, 1)'\n    }))),\n    transition('* => void', animate('100ms linear', style({opacity: 0})))\n  ]),\n\n  /** Fades in the content of the calendar. */\n  fadeInCalendar: trigger('fadeInCalendar', [\n    state('void', style({opacity: 0})),\n    state('enter', style({opacity: 1})),\n\n    // TODO(crisbeto): this animation should be removed since it isn't quite on spec, but we\n    // need to keep it until #12440 gets in, otherwise the exit animation will look glitchy.\n    transition('void => *', animate('120ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE, END, HOME} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, takeUntil} from 'rxjs/operators';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipTextControl} from './chip-text-control';\n\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nexport class MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatChipListMixinBase: CanUpdateErrorStateCtor & typeof MatChipListBase =\n    mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for it's similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': 'disabled ? null : _tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)',\n    '[id]': '_uid',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n  ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly controlType: string = 'mat-chip-list';\n\n  /**\n   * When a chip is destroyed, we store the index of the destroyed chip until the chips\n   * query list notifies about the update. This is necessary because we cannot determine an\n   * appropriate chip that should receive focus until the array of chips updated completely.\n   */\n  private _lastDestroyedChipIndex: number | null = null;\n\n  /** Subject that emits when the component has been destroyed. */\n  private _destroyed = new Subject<void>();\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription | null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription | null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription | null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription | null;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipTextControl;\n\n  /** Uid of the chip list */\n  _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The ARIA role applied to the chip list. */\n  get role(): string | null { return this.empty ? null : 'listbox'; }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n  private _multiple: boolean = false;\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith(): (o1: any, o2: any) => boolean { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  protected _value: any;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get id(): string {\n    return this._chipInput ? this._chipInput.id : this._uid;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  protected _required: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  protected _placeholder: string;\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return (this._chipInput && this._chipInput.focused) || this._hasFocusedChip();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    if (this.chips) {\n      this.chips.forEach(chip => chip.disabled = this._disabled);\n    }\n  }\n  protected _disabled: boolean = false;\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip list is selectable. When a chip list is not selectable,\n   * the selected states for all the chips inside the chip list are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n\n    if (this.chips) {\n      this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n    }\n  }\n  protected _selectable: boolean = true;\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroyed));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipListChange> =\n      new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips)\n      .withWrap()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => this._tabIndex = this._userTabIndex || 0);\n    });\n\n    // When the list changes, re-subscribe\n    this.chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this.stateChanges.complete();\n\n    this._dropSubscriptions();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipTextControl): void {\n    this._chipInput = inputElement;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick(event: MouseEvent) {\n    if (!this._originatesFromChip(event)) {\n      this.focus();\n    }\n  }\n\n  /**\n   * Focuses the the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(): void {\n    if (this.disabled) {\n      return;\n    }\n\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput();\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput() {\n    if (this._chipInput) {\n      this._chipInput.focus();\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    const target = event.target as HTMLElement;\n\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n    } else if (target && target.classList.contains('mat-chip')) {\n      if (event.keyCode === HOME) {\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n      } else if (event.keyCode === END) {\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        this._keyManager.onKeydown(event);\n      }\n\n      this.stateChanges.next();\n    }\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * If the amount of chips changed, we need to update the\n   * key manager state and focus the next closest chip.\n   */\n  protected _updateFocusForDestroyedChips() {\n    if (this._lastDestroyedChipIndex != null && this.chips.length) {\n      const newChipIndex = Math.min(this._lastDestroyedChipIndex, this.chips.length - 1);\n      this._keyManager.setActiveItem(newChipIndex);\n    }\n\n    this._lastDestroyedChipIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChip);\n        }\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    if (!this._hasFocusedChip()) {\n      this._keyManager.setActiveItem(-1);\n    }\n\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n\n    if (this._chipRemoveSubscription) {\n      this._chipRemoveSubscription.unsubscribe();\n      this._chipRemoveSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n      const chip = event.chip;\n      const chipIndex = this.chips.toArray().indexOf(event.chip);\n\n      // In case the chip that will be removed is currently focused, we temporarily store\n      // the index in order to be able to determine an appropriate sibling chip that will\n      // receive focus.\n      if (this._isValidIndex(chipIndex) && chip._hasFocus) {\n        this._lastDestroyedChipIndex = chipIndex;\n      }\n    });\n  }\n\n  /** Checks whether an event comes from inside a chip element. */\n  private _originatesFromChip(event: Event): boolean {\n    let currentElement = event.target as HTMLElement | null;\n\n    while (currentElement && currentElement !== this._elementRef.nativeElement) {\n      if (currentElement.classList.contains('mat-chip')) {\n        return true;\n      }\n\n      currentElement = currentElement.parentElement;\n    }\n\n    return false;\n  }\n\n  /** Checks whether any of the chips is focused. */\n  private _hasFocusedChip() {\n    return this.chips.some(chip => chip._hasFocus);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Directive, ElementRef, EventEmitter, Inject, Input, OnChanges, Output} from '@angular/core';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipList} from './chip-list';\nimport {MatChipTextControl} from './chip-text-control';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n    '[id]': 'id',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.placeholder]': 'placeholder || null',\n    '[attr.aria-invalid]': '_chipList && _chipList.ngControl ? _chipList.ngControl.invalid : null',\n  }\n})\nexport class MatChipInput implements MatChipTextControl, OnChanges {\n  /** Whether the control is focused. */\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  @Input('matChipInputSeparatorKeyCodes')\n  separatorKeyCodes: number[] | Set<number> = this._defaultOptions.separatorKeyCodes;\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /** The input's placeholder text. */\n  @Input() placeholder: string = '';\n\n  /** Unique id for the input. */\n  @Input() id: string = `mat-chip-list-input-${nextUniqueId++}`;\n\n  /** Whether the input is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled || (this._chipList && this._chipList.disabled); }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Whether the input is empty. */\n  get empty(): boolean { return !this._inputElement.value; }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement>,\n    @Inject(MAT_CHIPS_DEFAULT_OPTIONS) private _defaultOptions: MatChipsDefaultOptions) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  ngOnChanges() {\n    this._chipList.stateChanges.next();\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this._isSeparatorKey(event.keyCode)) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  /** Focuses the input. */\n  focus(): void {\n    this._inputElement.focus();\n  }\n\n  /** Checks whether a keycode is one of the configured separators. */\n  private _isSeparatorKey(keyCode: number) {\n    const separators = this.separatorKeyCodes;\n    return Array.isArray(separators) ? separators.indexOf(keyCode) > -1 : separators.has(keyCode);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChip, MatChipAvatar, MatChipRemove, MatChipTrailingIcon} from './chip';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipInput} from './chip-input';\nimport {MatChipList} from './chip-list';\n\nconst CHIP_DECLARATIONS = [\n  MatChipList,\n  MatChip,\n  MatChipInput,\n  MatChipRemove,\n  MatChipAvatar,\n  MatChipTrailingIcon,\n];\n\n@NgModule({\n  exports: CHIP_DECLARATIONS,\n  declarations: CHIP_DECLARATIONS,\n  providers: [\n    ErrorStateMatcher,\n    {\n      provide: MAT_CHIPS_DEFAULT_OPTIONS,\n      useValue: {\n        separatorKeyCodes: [ENTER]\n      } as MatChipsDefaultOptions\n    }\n  ]\n})\nexport class MatChipsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction;\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /**\n   * Whether the dialog should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n  restoreFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /**\n   * Whether the dialog should close when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n  closeOnNavigation?: boolean = true;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\nconst animationBody = [\n  // Note: The `enter` animation transitions to `transform: none`, because for some reason\n  // specifying the transform explicitly, causes IE both to blur the dialog content and\n  // decimate the animation performance. Leaving it as `none` solves both issues.\n  state('void, exit', style({opacity: 0, transform: 'scale(0.7)'})),\n  state('enter', style({transform: 'none'})),\n  transition('* => enter', animate('150ms cubic-bezier(0, 0, 0.2, 1)',\n      style({transform: 'none', opacity: 1}))),\n  transition('* => void, * => exit',\n      animate('75ms cubic-bezier(0.4, 0.0, 0.2, 1)', style({opacity: 0}))),\n];\n\n/**\n * Animations used by MatDialog.\n * @docs-private\n */\nexport const matDialogAnimations: {\n  readonly dialogContainer: AnimationTriggerMetadata;\n  readonly slideDialog: AnimationTriggerMetadata;\n} = {\n  /** Animation that is applied on the dialog container by defalt. */\n  dialogContainer: trigger('dialogContainer', animationBody),\n\n  /** @deprecated @breaking-change 8.0.0 Use `matDialogAnimations.dialogContainer` instead. */\n  slideDialog: trigger('slideDialog', animationBody)\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AnimationEvent} from '@angular/animations';\nimport {matDialogAnimations} from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.dialogContainer],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    'aria-modal': 'true',\n    '[attr.id]': '_id',\n    '[attr.role]': '_config.role',\n    '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config.ariaLabel',\n    '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n    '[@dialogContainer]': '_state',\n    '(@dialogContainer.start)': '_onAnimationStart($event)',\n    '(@dialogContainer.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null = null;\n\n  /** ID for the container DOM element. */\n  _id: string;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any,\n    /** The dialog configuration. */\n    public _config: MatDialogConfig) {\n\n    super();\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (this._config.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Note that there is no focus method when rendering on the server.\n      if (this._elementRef.nativeElement.focus) {\n        // Move focus onto the dialog immediately in order to prevent the user from accidentally\n        // opening multiple dialogs at the same time. Needs to be async, because the element\n        // may not be focusable immediately.\n        Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n      }\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {GlobalPositionStrategy, OverlayRef} from '@angular/cdk/overlay';\nimport {Location} from '@angular/common';\nimport {Observable, Subject} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {DialogPosition} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private readonly _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private readonly _beforeClosed = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    public _containerInstance: MatDialogContainer,\n    // @breaking-change 8.0.0 `_location` parameter to be removed.\n    _location?: Location,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Pass the id along to the container.\n    _containerInstance._id = id;\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    ).subscribe(() => this._overlayRef.dispose());\n\n    _overlayRef.detachments().subscribe(() => {\n      this._beforeClosed.next(this._result);\n      this._beforeClosed.complete();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n      this._overlayRef.dispose();\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose))\n      .subscribe(() => this.close());\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._beforeClosed.next(dialogResult);\n      this._beforeClosed.complete();\n      this._overlayRef.detachBackdrop();\n    });\n\n    this._containerInstance._startExitAnimation();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClosed(): Observable<R | undefined> {\n    return this._beforeClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = '', height: string = ''): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  afterOpen(): Observable<void> {\n    return this.afterOpened();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   * @deprecated Use `beforeClosed` instead.\n   * @breaking-change 8.0.0\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this.beforeClosed();\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayContainer,\n  OverlayRef,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  OnDestroy,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {defer, Observable, of as observableOf, Subject} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n  () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog implements OnDestroy {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private readonly _afterAllClosedAtThisLevel = new Subject<void>();\n  private readonly _afterOpenedAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpened(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when a dialog has been opened.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this.afterOpened;\n  }\n\n  get _afterAllClosed(): Subject<void> {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  readonly afterAllClosed: Observable<void> = defer<void>(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined)));\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() private _location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions: MatDialogConfig,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) scrollStrategy: any,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T, R> {\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef = this._attachDialogContent<T, R>(componentOrTemplateRef,\n                                                      dialogContainer,\n                                                      overlayRef,\n                                                      config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpened.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    this._closeDialogs(this.openDialogs);\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  ngOnDestroy() {\n    // Only close the dialogs at this level on destroy\n    // since the parent service may still be active.\n    this._closeDialogs(this._openDialogsAtThisLevel);\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight,\n      disposeOnNavigation: dialogConfig.closeOnNavigation\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatDialogConfig, config]\n    ]));\n    const containerPortal =\n        new ComponentPortal(MatDialogContainer, config.viewContainerRef, injector);\n    const containerRef = overlay.attach<MatDialogContainer>(containerPortal);\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T, R>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T, R> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef =\n        new MatDialogRef<T, R>(overlayRef, dialogContainer, this._location, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    const injectionTokens = new WeakMap<any, any>([\n      [MatDialogContainer, dialogContainer],\n      [MAT_DIALOG_DATA, config.data],\n      [MatDialogRef, dialogRef]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n  }\n\n  /** Closes all of the dialogs in an array. */\n  private _closeDialogs(dialogs: MatDialogRef<any>[]) {\n    let i = dialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      dialogs[i].close();\n    }\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string = 'Close dialog';\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes._matDialogClose || changes._matDialogCloseResult;\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent {}\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions {}\n\n\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef<HTMLElement>, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MatDialog} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogActions,\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTextareaAutosize} from '@angular/cdk/text-field';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deprecated Use `cdkTextareaAutosize` from `@angular/cdk/text-field` instead.\n * @breaking-change 8.0.0\n */\n@Directive({\n  selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n  exportAs: 'matTextareaAutosize',\n  inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n  host: {\n    'class': 'cdk-textarea-autosize mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n    '(input)': '_noopInputHandler()',\n  },\n})\nexport class MatTextareaAutosize extends CdkTextareaAutosize {\n  @Input()\n  get matAutosizeMinRows(): number { return this.minRows; }\n  set matAutosizeMinRows(value: number) { this.minRows = value; }\n\n  @Input()\n  get matAutosizeMaxRows(): number { return this.maxRows; }\n  set matAutosizeMaxRows(value: number) { this.maxRows = value; }\n\n  @Input('mat-autosize')\n  get matAutosize(): boolean { return this.enabled; }\n  set matAutosize(value: boolean) { this.enabled = value; }\n\n  @Input()\n  get matTextareaAutosize(): boolean { return this.enabled; }\n  set matTextareaAutosize(value: boolean) { this.enabled = value; }\n}\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\n(MatTextareaAutosize as any)['ctorParameters'] = () =>\n    (CdkTextareaAutosize as any)['ctorParameters'];\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {AutofillMonitor} from '@angular/cdk/text-field';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Self,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nexport class MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatInputMixinBase: CanUpdateErrorStateCtor & typeof MatInputBase =\n    mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput], select[matNativeControl],\n      input[matNativeControl], textarea[matNativeControl]`,\n  exportAs: 'matInput',\n  host: {\n    /**\n     * @breaking-change 8.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n     */\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[attr.placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[attr.readonly]': 'readonly && !_isNativeSelect || null',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, OnInit, DoCheck, CanUpdateErrorState {\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _inputValueAccessor: {value: any};\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /** Whether the component is a native html select. */\n  _isNativeSelect = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  focused: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly stateChanges: Subject<void> = new Subject<void>();\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  controlType: string = 'mat-input';\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  autofilled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n  protected _disabled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n  protected _id: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input() placeholder: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  protected _required = false;\n\n  /** Input type of the element. */\n  @Input()\n  get type(): string { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      (this._elementRef.nativeElement as HTMLInputElement).type = this._type;\n    }\n  }\n  protected _type = 'text';\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): string { return this._inputValueAccessor.value; }\n  set value(value: string) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\n  private _readonly = false;\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>,\n    protected _platform: Platform,\n    /** @docs-private */\n    @Optional() @Self() public ngControl: NgControl,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n    private _autofillMonitor: AutofillMonitor,\n    ngZone: NgZone) {\n\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n\n    const element = this._elementRef.nativeElement;\n\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || element;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      ngZone.runOutsideAngular(() => {\n        _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n          let el = event.target as HTMLInputElement;\n          if (!el.value && !el.selectionStart && !el.selectionEnd) {\n            // Note: Just setting `0, 0` doesn't fix the issue. Setting\n            // `1, 1` fixes it for the first time that you type text and\n            // then hold delete. Toggling to `1, 1` and then back to\n            // `0, 0` seems to completely fix it.\n            el.setSelectionRange(1, 1);\n            el.setSelectionRange(0, 0);\n          }\n        });\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n    this._isNativeSelect = element.nodeName.toLowerCase() === 'select';\n\n    if (this._isNativeSelect) {\n      this.controlType = (element as HTMLSelectElement).multiple ? 'mat-native-select-multiple' :\n                                                                   'mat-native-select';\n    }\n  }\n\n  ngOnInit() {\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n        this.autofilled = event.isAutofilled;\n        this.stateChanges.next();\n      });\n    }\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n  }\n\n  /** Focuses the input. */\n  focus(): void { this._elementRef.nativeElement.focus(); }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && !this.readonly) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this._elementRef.nativeElement.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. */\n  protected _isTextarea() {\n    return this._elementRef.nativeElement.nodeName.toLowerCase() === 'textarea';\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n        !this.autofilled;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    if (this._isNativeSelect) {\n      // For a single-selection `<select>`, the label should float when the selected option has\n      // a non-empty display value. For a `<select multiple>`, the label *always* floats to avoid\n      // overlapping the label with the options.\n      const selectElement = this._elementRef.nativeElement as HTMLSelectElement;\n\n      return selectElement.multiple || !this.empty || !!selectElement.options[0].label ||\n          this.focused;\n    } else {\n      return this.focused || !this.empty;\n    }\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    // Do not re-focus the input element if the element is already focused. Otherwise it can happen\n    // that someone clicks on a time input and the cursor resets to the \"hours\" field while the\n    // \"minutes\" field was actually clicked. See: https://github.com/angular/material2/issues/12849\n    if (!this.focused) {\n      this.focus();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TextFieldModule} from '@angular/cdk/text-field';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\n\n\n@NgModule({\n  declarations: [MatInput, MatTextareaAutosize],\n  imports: [\n    CommonModule,\n    TextFieldModule,\n    MatFormFieldModule,\n  ],\n  exports: [\n    TextFieldModule,\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher],\n})\nexport class MatInputModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel: string = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel: string = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel: string = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel: string = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel: string = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel: string = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel: string = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel: string = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel: string = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  AfterViewChecked,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n// TODO(josephperrott): Revert to constants for ripple radius once 2018 Checkbox updates have\n// landed.\n// The radius for the checkbox's ripple, in pixels.\nlet calculatedRippleRadius = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nexport class MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatCheckboxMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatCheckboxBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[attr.tabindex]': 'null',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewChecked, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  private _required: boolean;\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change: EventEmitter<MatCheckboxChange> =\n      new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  _onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  constructor(elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _ngZone: NgZone,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    this._focusMonitor.monitor(elementRef, true).subscribe(focusOrigin => {\n      if (!focusOrigin) {\n        // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n        // Angular does not expect events to be raised during change detection, so any state change\n        // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n        // See https://github.com/angular/angular/issues/17793. To work around this, we defer\n        // telling the form control it has been touched until the next tick.\n        Promise.resolve().then(() => this._onTouched());\n      }\n    });\n  }\n\n  ngAfterViewChecked() {\n    this._calculateRippleRadius();\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value != this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked: boolean = false;\n\n  /**\n   * Whether the checkbox is disabled. This fully overrides the implementation provided by\n   * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n   */\n  @Input()\n  get disabled() { return this._disabled; }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this.disabled) {\n      this._disabled = newValue;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean { return this._indeterminate; }\n  set indeterminate(value: boolean) {\n    const changed = value != this._indeterminate;\n    this._indeterminate = value;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n  private _indeterminate: boolean = false;\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the checkbox\n    // component will be only marked for check, but no actual change detection runs automatically.\n    // Instead of going back into the zone in order to trigger a change detection which causes\n    // *all* components to be checked (if explicitly marked or not using OnPush), we only trigger\n    // an explicit change detection for the checkbox view and it's children.\n    this._changeDetectorRef.detectChanges();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n\n      // Remove the animation class to avoid animation when the checkbox is moved between containers\n      const animationClass = this._currentAnimationClass;\n\n      this._ngZone.runOutsideAngular(() => {\n        setTimeout(() => {\n          element.classList.remove(animationClass);\n        }, 1000);\n      });\n    }\n  }\n\n  private _emitChangeEvent() {\n    const event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    // Don't transition if animations are disabled.\n    if (this._animationMode === 'NoopAnimations') {\n      return '';\n    }\n\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n\n  // TODO(josephperrott): Revert to constants for ripple radius once 2018 Checkbox updates have\n  // landed.\n  /**\n   * Calculate the radius for the ripple based on the ripple elements width.  Only calculated once\n   * for the application.\n   */\n  private _calculateRippleRadius() {\n    if (!calculatedRippleRadius) {\n      const rippleWidth =\n          this._elementRef.nativeElement.querySelector('.mat-checkbox-ripple').clientWidth || 0;\n      calculatedRippleRadius = rippleWidth / 2;\n    }\n    this.ripple.radius = calculatedRippleRadius;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule],\n  declarations: [MatCheckbox, MatCheckboxRequiredValidator],\n})\nexport class MatCheckboxModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nexport class MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatChipMixinBase:\n    CanColorCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatChipBase =\n        mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\n\nconst CHIP_ATTRIBUTE_NAMES = ['mat-basic-chip'];\n\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-avatar, [matChipAvatar]',\n  host: {'class': 'mat-chip-avatar'}\n})\nexport class MatChipAvatar {}\n\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n  host: {'class': 'mat-chip-trailing-icon'}\n})\nexport class MatChipTrailingIcon {}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled', 'disableRipple'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[class.mat-chip-with-avatar]': 'avatar',\n    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[class.mat-chip-disabled]': 'disabled',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n  },\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable, CanDisableRipple, RippleTarget {\n\n  /** Reference to the RippleRenderer for the chip. */\n  private _chipRipple: RippleRenderer;\n\n  /** Whether the ripples are globally disabled through the RippleGlobalOptions */\n  private _ripplesGloballyDisabled = false;\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._ripplesGloballyDisabled;\n  }\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether the chip list is selectable */\n  chipListSelectable: boolean = true;\n\n  /** The chip avatar */\n  @ContentChild(MatChipAvatar) avatar: MatChipAvatar;\n\n  /** The chip's trailing icon. */\n  @ContentChild(MatChipTrailingIcon) trailingIcon: MatChipTrailingIcon;\n\n  /** The chip's remove toggler. */\n  @ContentChild(forwardRef(() => MatChipRemove)) removeIcon: MatChipRemove;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) {\n    const coercedValue = coerceBooleanProperty(value);\n\n    if (coercedValue !== this._selected) {\n      this._selected = coercedValue;\n      this._dispatchSelectionChange();\n    }\n  }\n  protected _selected: boolean = false;\n\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n  @Input()\n  get value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(value: any) { this._value = value; }\n  protected _value: any;\n\n  /**\n   * Whether or not the chip is selectable. When a chip is not selectable,\n   * changes to it's selected state are always ignored. By default a chip is\n   * selectable, and it becomes non-selectable if it's parent chip list is\n   * not selectable.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable && this.chipListSelectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  protected _selectable: boolean = true;\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (removed) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  protected _removable: boolean = true;\n\n  /** Emits when the chip is focused. */\n  readonly _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  readonly _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\n      new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** Emitted when a chip is to be removed. */\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** The ARIA selected applied to the chip. */\n  get ariaSelected(): string | null {\n    return this.selectable ? this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef,\n              private _ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions) {\n    super(_elementRef);\n\n    this._addHostClassName();\n\n    this._chipRipple = new RippleRenderer(this, _ngZone, _elementRef, platform);\n    this._chipRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    if (globalOptions) {\n      // TODO(paul): Do not copy each option manually. Allow dynamic global option changes: #9729\n      this._ripplesGloballyDisabled = !!globalOptions.disabled;\n      this.rippleConfig = {\n        animation: globalOptions.animation,\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n      };\n    }\n  }\n\n  _addHostClassName() {\n    // Add class for the different chips\n    for (const attr of CHIP_ATTRIBUTE_NAMES) {\n      if (this._elementRef.nativeElement.hasAttribute(attr) ||\n        this._elementRef.nativeElement.tagName.toLowerCase() === attr) {\n        (this._elementRef.nativeElement as HTMLElement).classList.add(attr);\n        return;\n      }\n    }\n    (this._elementRef.nativeElement as HTMLElement).classList.add('mat-standard-chip');\n  }\n\n  ngOnDestroy() {\n    this.destroyed.emit({chip: this});\n    this._chipRipple._removeTriggerEvents();\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._dispatchSelectionChange();\n    }\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._dispatchSelectionChange();\n    }\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._dispatchSelectionChange(true);\n    }\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n    this._dispatchSelectionChange(isUserInput);\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    if (!this._hasFocus) {\n      this._elementRef.nativeElement.focus();\n      this._onFocus.next({chip: this});\n    }\n    this._hasFocus = true;\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Handles click events on the chip. */\n  _handleClick(event: Event) {\n    if (this.disabled) {\n      event.preventDefault();\n    } else {\n      event.stopPropagation();\n    }\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    // When animations are enabled, Angular may end up removing the chip from the DOM a little\n    // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\n    // that moves focus not the next item. To work around the issue, we defer marking the chip\n    // as not focused until the next time the zone stabilizes.\n    this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1))\n      .subscribe(() => {\n        this._ngZone.run(() => {\n          this._hasFocus = false;\n          this._onBlur.next({chip: this});\n        });\n      });\n  }\n\n  private _dispatchSelectionChange(isUserInput = false) {\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove mat-chip-trailing-icon',\n    '(click)': '_handleClick($event)',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {}\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(event: Event): void {\n    if (this._parentChip.removable) {\n      this._parentChip.remove();\n    }\n\n    // We need to stop event propagation because otherwise the event will bubble up to the\n    // form field and cause the `onContainerClick` method to be invoked. This method would then\n    // reset the focused chip that has been focused after chip removal. Usually the parent\n    // the parent click listener of the `MatChip` would prevent propagation, but it can happen\n    // that the chip is being removed before the event bubbles up.\n    event.stopPropagation();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** Default options, for the chips module, that can be overridden. */\nexport interface MatChipsDefaultOptions {\n  /** The list of key codes that will trigger a chipEnd event. */\n  separatorKeyCodes: number[] | Set<number>;\n}\n\n/** Injection token to be used to override the default options for the chips module. */\nexport const MAT_CHIPS_DEFAULT_OPTIONS =\n    new InjectionToken<MatChipsDefaultOptions>('mat-chips-default-options');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n  Input,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  CanColorCtor,\n  CanDisableCtor,\n  CanDisableRippleCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n/**\n * List of classes to add to MatButton instances based on host attributes to\n * style as different variants.\n */\nconst BUTTON_HOST_ATTRIBUTES = [\n  'mat-button',\n  'mat-flat-button',\n  'mat-icon-button',\n  'mat-raised-button',\n  'mat-stroked-button',\n  'mat-mini-fab',\n  'mat-fab',\n];\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nexport class MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatButtonMixinBase:\n    CanDisableRippleCtor & CanDisableCtor & CanColorCtor & typeof MatButtonBase =\n        mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\n             button[mat-flat-button]`,\n  exportAs: 'matButton',\n  host: {\n    '[disabled]': 'disabled || null',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n\n  /** Whether the button is round. */\n  readonly isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  readonly isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated Platform checks for SSR are no longer needed\n               * @breaking-change 8.0.0\n               */\n              // tslint:disable-next-line:no-unused-variable\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 8.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // For each of the variant selectors that is prevent in the button's host\n    // attributes, add the correct corresponding class.\n    for (const attr of BUTTON_HOST_ATTRIBUTES) {\n      if (this._hasHostAttributes(attr)) {\n        (elementRef.nativeElement as HTMLElement).classList.add(attr);\n      }\n    }\n\n    this._focusMonitor.monitor(this._elementRef, true);\n\n    if (this.isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Raised Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    // Note that we ignore the user-specified tabindex when it's disabled for\n    // consistency with the `mat-button` applied on native buttons where even\n    // though they have an index, they're not tabbable.\n    '[attr.tabindex]': 'disabled ? -1 : (tabIndex || 0)',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n  /** Tabindex of the button. */\n  @Input() tabIndex: number;\n\n  constructor(\n    platform: Platform,\n    focusMonitor: FocusMonitor,\n    elementRef: ElementRef,\n    // @breaking-change 8.0.0 `animationMode` parameter to be made required.\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n    super(elementRef, platform, focusMonitor, animationMode);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatAnchor, MatButton} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisableRipple,\n  mixinDisableRipple,\n  CanDisableRippleCtor,\n} from '@angular/material/core';\n\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n/** Possible appearance styles for the button toggle. */\nexport type MatButtonToggleAppearance = 'legacy' | 'standard';\n\n/**\n * Represents the default options for the button toggle that can be configured\n * using the `MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatButtonToggleDefaultOptions {\n  appearance?: MatButtonToggleAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all button toggles within an app.\n */\nexport const MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS =\n    new InjectionToken<MatButtonToggleDefaultOptions>('MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS');\n\n\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\n/**\n * @deprecated Use `MatButtonToggleGroup` instead.\n * @breaking-change 8.0.0\n */\nexport class MatButtonToggleGroupMultiple {}\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  constructor(\n    /** The MatButtonToggle that emits the event. */\n    public source: MatButtonToggle,\n\n    /** The value assigned to the MatButtonToggle. */\n    public value: any) {}\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group',\n  providers: [\n    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n    {provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup},\n  ],\n  host: {\n    'role': 'group',\n    'class': 'mat-button-toggle-group',\n    '[attr.aria-disabled]': 'disabled',\n    '[class.mat-button-toggle-vertical]': 'vertical',\n    '[class.mat-button-toggle-group-appearance-standard]': 'appearance === \"standard\"',\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup implements ControlValueAccessor, OnInit, AfterContentInit {\n  private _vertical = false;\n  private _multiple = false;\n  private _disabled = false;\n  private _selectionModel: SelectionModel<MatButtonToggle>;\n\n  /**\n   * Reference to the raw value that the consumer tried to assign. The real\n   * value will exclude any values from this one that don't correspond to a\n   * toggle. Useful for the cases where the value is assigned before the toggles\n   * have been initialized or at the same that they're being swapped out.\n   */\n  private _rawValue: any;\n\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** The appearance for all the buttons in the group. */\n  @Input() appearance: MatButtonToggleAppearance;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle.name = this._name);\n    }\n  }\n  private _name = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any {\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\n\n    if (this.multiple) {\n      return selected.map(toggle => toggle.value);\n    }\n\n    return selected[0] ? selected[0].value : undefined;\n  }\n  set value(newValue: any) {\n    this._setSelectionByValue(newValue);\n    this.valueChange.emit(this.value);\n  }\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() readonly valueChange = new EventEmitter<any>();\n\n  /** Selected button toggles in the group. */\n  get selected() {\n    const selected = this._selectionModel.selected;\n    return this.multiple ? selected : (selected[0] || null);\n  }\n\n  /** Whether multiple button toggles can be selected. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether multiple button toggle group is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle._markForCheck());\n    }\n  }\n\n  /** Event emitted when the group's value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(\n    private _changeDetector: ChangeDetectorRef,\n    @Optional() @Inject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS)\n        defaultOptions?: MatButtonToggleDefaultOptions) {\n\n      this.appearance =\n          defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n    }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatButtonToggle>(this.multiple, undefined, false);\n  }\n\n  ngAfterContentInit() {\n    this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    const selected = this.selected;\n    const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n    const event = new MatButtonToggleChange(source!, this.value);\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  /**\n   * Syncs a button toggle's selected state with the model value.\n   * @param toggle Toggle to be synced.\n   * @param select Whether the toggle should be selected.\n   * @param isUserInput Whether the change was a result of a user interaction.\n   */\n  _syncButtonToggle(toggle: MatButtonToggle, select: boolean, isUserInput = false) {\n    // Deselect the currently-selected toggle, if we're in single-selection\n    // mode and the button being toggled isn't selected at the moment.\n    if (!this.multiple && this.selected && !toggle.checked) {\n      (this.selected as MatButtonToggle).checked = false;\n    }\n\n    if (select) {\n      this._selectionModel.select(toggle);\n    } else {\n      this._selectionModel.deselect(toggle);\n    }\n\n    // Only emit the change event for user input.\n    if (isUserInput) {\n      this._emitChangeEvent();\n    }\n\n    // Note: we emit this one no matter whether it was a user interaction, because\n    // it is used by Angular to sync up the two-way data binding.\n    this.valueChange.emit(this.value);\n  }\n\n  /** Checks whether a button toggle is selected. */\n  _isSelected(toggle: MatButtonToggle) {\n    return this._selectionModel.isSelected(toggle);\n  }\n\n  /** Determines whether a button toggle should be checked on init. */\n  _isPrechecked(toggle: MatButtonToggle) {\n    if (typeof this._rawValue === 'undefined') {\n      return false;\n    }\n\n    if (this.multiple && Array.isArray(this._rawValue)) {\n      return this._rawValue.some(value => toggle.value != null && value === toggle.value);\n    }\n\n    return toggle.value === this._rawValue;\n  }\n\n  /** Updates the selection state of the toggles in the group based on a value. */\n  private _setSelectionByValue(value: any|any[]) {\n    this._rawValue = value;\n\n    if (!this._buttonToggles) {\n      return;\n    }\n\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw Error('Value must be an array in multiple-selection mode.');\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n    } else {\n      this._clearSelection();\n      this._selectValue(value);\n    }\n  }\n\n  /** Clears the selected toggles. */\n  private _clearSelection() {\n    this._selectionModel.clear();\n    this._buttonToggles.forEach(toggle => toggle.checked = false);\n  }\n\n  /** Selects a value if there's a toggle that corresponds to it. */\n  private _selectValue(value: any) {\n    const correspondingOption = this._buttonToggles.find(toggle => {\n      return toggle.value != null && toggle.value === value;\n    });\n\n    if (correspondingOption) {\n      correspondingOption.checked = true;\n      this._selectionModel.select(correspondingOption);\n    }\n  }\n}\n\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nexport class MatButtonToggleBase {}\nexport const _MatButtonToggleMixinBase: CanDisableRippleCtor & typeof MatButtonToggleBase =\n    mixinDisableRipple(MatButtonToggleBase);\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disableRipple'],\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    '[class.mat-button-toggle-appearance-standard]': 'appearance === \"standard\"',\n    'class': 'mat-button-toggle',\n    // Always reset the tabindex to -1 so it doesn't conflict with the one on the `button`,\n    // but can still receive focus from things like cdkFocusInitial.\n    '[attr.tabindex]': '-1',\n    '[attr.id]': 'id',\n    '(focus)': 'focus()',\n  }\n})\nexport class MatButtonToggle extends _MatButtonToggleMixinBase implements OnInit,\n  CanDisableRipple, OnDestroy {\n\n  private _isSingleSelector = false;\n  private _checked = false;\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  @ViewChild('button') _buttonElement: ElementRef<HTMLButtonElement>;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** Unique ID for the underlying `button` element. */\n  get buttonId(): string { return `${this.id}-button`; }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input() value: any;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** The appearance style of the button. */\n  @Input()\n  get appearance(): MatButtonToggleAppearance {\n    return this.buttonToggleGroup ? this.buttonToggleGroup.appearance : this._appearance;\n  }\n  set appearance(value: MatButtonToggleAppearance) {\n    this._appearance = value;\n  }\n  private _appearance: MatButtonToggleAppearance;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean {\n    return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n  }\n  set checked(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._checked) {\n      this._checked = newValue;\n\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n      }\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n  }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Event emitted when the group value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _elementRef: ElementRef<HTMLElement>,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 8.0.0 `defaultTabIndex` to be made a required parameter.\n              @Attribute('tabindex') defaultTabIndex: string,\n              @Optional() @Inject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS)\n                  defaultOptions?: MatButtonToggleDefaultOptions) {\n    super();\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n    this.buttonToggleGroup = toggleGroup;\n    this.appearance =\n        defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n  }\n\n  ngOnInit() {\n    this._isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n    this._type = this._isSingleSelector ? 'radio' : 'checkbox';\n    this.id = this.id || `mat-button-toggle-${_uniqueIdCounter++}`;\n\n    if (this._isSingleSelector) {\n      this.name = this.buttonToggleGroup.name;\n    }\n\n    if (this.buttonToggleGroup && this.buttonToggleGroup._isPrechecked(this)) {\n      this.checked = true;\n    }\n\n    this._focusMonitor.monitor(this._elementRef, true);\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._buttonElement.nativeElement.focus();\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native button. */\n  _onButtonClick() {\n    const newChecked = this._isSingleSelector ? true : !this._checked;\n\n    if (newChecked !== this._checked) {\n      this._checked = newChecked;\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n        this.buttonToggleGroup._onTouched();\n      }\n    }\n    // Emit a change event when it's the single selector\n    this.change.emit(new MatButtonToggleChange(this, this.value));\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When the group value changes, the button will not be notified.\n    // Use `markForCheck` to explicit update button toggle's status.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatButtonToggle, MatButtonToggleGroup} from './button-toggle';\n\n\n@NgModule({\n  imports: [MatCommonModule, MatRippleModule],\n  exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n  declarations: [MatButtonToggleGroup, MatButtonToggle],\n})\nexport class MatButtonToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n} from '@angular/core';\n\n\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-content',\n  host: {'class': 'mat-card-content'}\n})\nexport class MatCardContent {}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n})\nexport class MatCardTitle {}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n})\nexport class MatCardSubtitle {}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-actions',\n  exportAs: 'matCardActions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n})\nexport class MatCardActions {\n  /** Position of the actions inside the card. */\n  @Input() align: 'start' | 'end' = 'start';\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n})\nexport class MatCardFooter {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-image], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n})\nexport class MatCardImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n})\nexport class MatCardSmImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-md-image], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n})\nexport class MatCardMdImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n})\nexport class MatCardLgImage {}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n})\nexport class MatCardXlImage {}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-avatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n})\nexport class MatCardAvatar {}\n\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card',\n  exportAs: 'matCard',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card'}\n})\nexport class MatCard {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n})\nexport class MatCardHeader {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n})\nexport class MatCardTitleGroup {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatCard,\n  MatCardActions,\n  MatCardAvatar,\n  MatCardContent,\n  MatCardFooter,\n  MatCardHeader,\n  MatCardImage,\n  MatCardLgImage,\n  MatCardMdImage,\n  MatCardSmImage,\n  MatCardSubtitle,\n  MatCardTitle,\n  MatCardTitleGroup,\n  MatCardXlImage,\n} from './card';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatCard,\n    MatCardHeader,\n    MatCardTitleGroup,\n    MatCardContent,\n    MatCardTitle,\n    MatCardSubtitle,\n    MatCardActions,\n    MatCardFooter,\n    MatCardSmImage,\n    MatCardMdImage,\n    MatCardLgImage,\n    MatCardImage,\n    MatCardXlImage,\n    MatCardAvatar,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n    MatCardXlImage, MatCardAvatar,\n  ],\n})\nexport class MatCardModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  mixinDisableRipple,\n} from '@angular/material/core';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected. */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nexport class MatAutocompleteBase {}\nexport const _MatAutocompleteMixinBase: CanDisableRippleCtor & typeof MatAutocompleteBase =\n    mixinDisableRipple(MatAutocompleteBase);\n\n/** Default `mat-autocomplete` options that can be overridden. */\nexport interface MatAutocompleteDefaultOptions {\n  /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n  autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nexport const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<MatAutocompleteDefaultOptions>('mat-autocomplete-default-options', {\n      providedIn: 'root',\n      factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY(): MatAutocompleteDefaultOptions {\n  return {autoActiveFirstOption: false};\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel: boolean = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean { return this._isOpen && this.showPanel; }\n  _isOpen: boolean = false;\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /**\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n   */\n  @Input()\n  get autoActiveFirstOption(): boolean { return this._autoActiveFirstOption; }\n  set autoActiveFirstOption(value: boolean) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  private _autoActiveFirstOption: boolean;\n\n  /**\n   * Specify the width of the autocomplete panel.  Can be any CSS sizing value, otherwise it will\n   * match the width of its host.\n   */\n  @Input() panelWidth: string | number;\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /** Event that is emitted when the autocomplete panel is opened. */\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event that is emitted when the autocomplete panel is closed. */\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(value: string) {\n    if (value && value.length) {\n      value.split(' ').forEach(className => this._classList[className.trim()] = true);\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS) defaults: MatAutocompleteDefaultOptions) {\n    super();\n\n    this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibility state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._classList['mat-autocomplete-visible'] = this.showPanel;\n    this._classList['mat-autocomplete-hidden'] = !this.showPanel;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\n\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\n@Directive({\n  selector: '[matAutocompleteOrigin]',\n  exportAs: 'matAutocompleteOrigin',\n})\nexport class MatAutocompleteOrigin {\n  constructor(\n      /** Reference to the element on which the directive is applied. */\n      public elementRef: ElementRef<HTMLElement>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './autocomplete-trigger';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [\n    MatAutocomplete,\n    MatOptionModule,\n    MatAutocompleteTrigger,\n    MatAutocompleteOrigin,\n    MatCommonModule\n  ],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n})\nexport class MatAutocompleteModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AriaDescriber} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Renderer2,\n} from '@angular/core';\nimport {ThemePalette, mixinDisabled, CanDisableCtor, CanDisable} from '@angular/material/core';\n\n\nlet nextId = 0;\n\n// Boilerplate for applying mixins to MatBadge.\n/** @docs-private */\nexport class MatBadgeBase {}\n\nexport const _MatBadgeMixinBase:\n    CanDisableCtor & typeof MatBadgeBase = mixinDisabled(MatBadgeBase);\n\nexport type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after';\nexport type MatBadgeSize = 'small' | 'medium' | 'large';\n\n/** Directive to display a text badge. */\n@Directive({\n  selector: '[matBadge]',\n  inputs: ['disabled: matBadgeDisabled'],\n  host: {\n    'class': 'mat-badge',\n    '[class.mat-badge-overlap]': 'overlap',\n    '[class.mat-badge-above]': 'isAbove()',\n    '[class.mat-badge-below]': '!isAbove()',\n    '[class.mat-badge-before]': '!isAfter()',\n    '[class.mat-badge-after]': 'isAfter()',\n    '[class.mat-badge-small]': 'size === \"small\"',\n    '[class.mat-badge-medium]': 'size === \"medium\"',\n    '[class.mat-badge-large]': 'size === \"large\"',\n    '[class.mat-badge-hidden]': 'hidden || !_hasContent',\n    '[class.mat-badge-disabled]': 'disabled',\n  },\n})\nexport class MatBadge extends _MatBadgeMixinBase implements OnDestroy, CanDisable {\n  /** Whether the badge has any content. */\n  _hasContent = false;\n\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n  @Input('matBadgeColor')\n  get color(): ThemePalette { return this._color; }\n  set color(value: ThemePalette) {\n    this._setColor(value);\n    this._color = value;\n  }\n  private _color: ThemePalette = 'primary';\n\n  /** Whether the badge should overlap its contents or not */\n  @Input('matBadgeOverlap')\n  get overlap(): boolean { return this._overlap; }\n  set overlap(val: boolean) {\n    this._overlap = coerceBooleanProperty(val);\n  }\n  private _overlap: boolean = true;\n\n  /**\n   * Position the badge should reside.\n   * Accepts any combination of 'above'|'below' and 'before'|'after'\n   */\n  @Input('matBadgePosition') position: MatBadgePosition = 'above after';\n\n  /** The content for the badge */\n  @Input('matBadge')\n  get content(): string { return this._content; }\n  set content(value: string) {\n    this._content = value;\n    this._hasContent = value != null && `${value}`.trim().length > 0;\n    this._updateTextContent();\n  }\n  private _content: string;\n\n  /** Message used to describe the decorated element via aria-describedby */\n  @Input('matBadgeDescription')\n  get description(): string { return this._description; }\n  set description(newDescription: string) {\n    if (newDescription !== this._description) {\n      this._updateHostAriaDescription(newDescription, this._description);\n      this._description = newDescription;\n    }\n  }\n  private _description: string;\n\n  /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n  @Input('matBadgeSize') size: MatBadgeSize = 'medium';\n\n  /** Whether the badge is hidden. */\n  @Input('matBadgeHidden')\n  get hidden(): boolean { return this._hidden; }\n  set hidden(val: boolean) {\n    this._hidden = coerceBooleanProperty(val);\n  }\n  private _hidden: boolean;\n\n  /** Unique id for the badge */\n  _id: number = nextId++;\n\n  private _badgeElement: HTMLElement;\n\n  constructor(\n      @Optional() @Inject(DOCUMENT) private _document: any,\n      private _ngZone: NgZone,\n      private _elementRef: ElementRef<HTMLElement>,\n      private _ariaDescriber: AriaDescriber,\n      /** @breaking-change 8.0.0 Make _renderer a required param and remove _document. */\n      private _renderer?: Renderer2) {\n        super();\n      }\n\n  /** Whether the badge is above the host or not */\n  isAbove(): boolean {\n    return this.position.indexOf('below') === -1;\n  }\n\n  /** Whether the badge is after the host or not */\n  isAfter(): boolean {\n    return this.position.indexOf('before') === -1;\n  }\n\n  ngOnDestroy() {\n    if (this.description && this._badgeElement) {\n      this._ariaDescriber.removeDescription(this._badgeElement, this.description);\n    }\n  }\n\n  /** Injects a span element into the DOM with the content. */\n  private _updateTextContent(): HTMLSpanElement {\n    if (!this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n    } else {\n      this._badgeElement.textContent = this.content;\n    }\n    return this._badgeElement;\n  }\n\n  /** Creates the badge element */\n  private _createBadgeElement(): HTMLElement {\n    // @breaking-change 8.0.0 Remove null check for _renderer\n    const rootNode = this._renderer || this._document;\n    const badgeElement = rootNode.createElement('span');\n    const activeClass = 'mat-badge-active';\n\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n    badgeElement.classList.add('mat-badge-content');\n    badgeElement.textContent = this.content;\n\n    if (this.description) {\n      badgeElement.setAttribute('aria-label', this.description);\n    }\n\n    this._elementRef.nativeElement.appendChild(badgeElement);\n\n    // animate in after insertion\n    if (typeof requestAnimationFrame === 'function') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          badgeElement.classList.add(activeClass);\n        });\n      });\n    } else {\n      badgeElement.classList.add(activeClass);\n    }\n\n    return badgeElement;\n  }\n\n  /** Sets the aria-label property on the element */\n  private _updateHostAriaDescription(newDescription: string, oldDescription: string): void {\n    // ensure content available before setting label\n    const content = this._updateTextContent();\n\n    if (oldDescription) {\n      this._ariaDescriber.removeDescription(content, oldDescription);\n    }\n\n    if (newDescription) {\n      this._ariaDescriber.describe(content, newDescription);\n    }\n  }\n\n  /** Adds css theme class given the color to the component host */\n  private _setColor(colorPalette: ThemePalette) {\n    if (colorPalette !== this._color) {\n      if (this._color) {\n        this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\n      }\n      if (colorPalette) {\n        this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatBadge} from './badge';\n\n\n@NgModule({\n  imports: [\n    A11yModule,\n    MatCommonModule\n  ],\n  exports: [MatBadge],\n  declarations: [MatBadge],\n})\nexport class MatBadgeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a bottom sheet. */\nexport const MAT_BOTTOM_SHEET_DATA = new InjectionToken<any>('MatBottomSheetData');\n\n/**\n * Configuration used when opening a bottom sheet.\n */\nexport class MatBottomSheetConfig<D = any> {\n  /** The view container to place the overlay for the bottom sheet into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** Extra CSS classes to be added to the bottom sheet container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the bottom sheet. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Whether the bottom sheet has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop. */\n  backdropClass?: string;\n\n  /** Whether the user can use escape or clicking outside to close the bottom sheet. */\n  disableClose?: boolean = false;\n\n  /** Aria label to assign to the bottom sheet element. */\n  ariaLabel?: string | null = null;\n\n  /**\n   * Whether the bottom sheet should close when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n  closeOnNavigation?: boolean = true;\n\n  /** Whether the bottom sheet should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /**\n   * Whether the bottom sheet should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n  restoreFocus?: boolean = true;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material bottom sheet. */\nexport const matBottomSheetAnimations: {\n  readonly bottomSheetState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a bottom sheet. */\n  bottomSheetState: trigger('state', [\n    state('void, hidden', style({transform: 'translateY(100%)'})),\n    state('visible', style({transform: 'translateY(0%)'})),\n    transition('visible => void, visible => hidden',\n        animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible',\n        animate(`${AnimationDurations.EXITING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  EventEmitter,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {MatBottomSheetConfig} from './bottom-sheet-config';\nimport {matBottomSheetAnimations} from './bottom-sheet-animations';\nimport {Subscription} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\n\n// TODO(crisbeto): consolidate some logic between this, MatDialog and MatSnackBar\n\n/**\n * Internal component that wraps user-provided bottom sheet content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-bottom-sheet-container',\n  templateUrl: 'bottom-sheet-container.html',\n  styleUrls: ['bottom-sheet-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matBottomSheetAnimations.bottomSheetState],\n  host: {\n    'class': 'mat-bottom-sheet-container',\n    'tabindex': '-1',\n    'role': 'dialog',\n    'aria-modal': 'true',\n    '[attr.aria-label]': 'bottomSheetConfig?.ariaLabel',\n    '[@state]': '_animationState',\n    '(@state.start)': '_onAnimationStart($event)',\n    '(@state.done)': '_onAnimationDone($event)'\n  },\n})\nexport class MatBottomSheetContainer extends BasePortalOutlet implements OnDestroy {\n  private _breakpointSubscription: Subscription;\n\n  /** The portal outlet inside of this container into which the content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The state of the bottom sheet animations. */\n  _animationState: 'void' | 'visible' | 'hidden' = 'void';\n\n  /** Emits whenever the state of the animation changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** The class that traps and manages focus within the bottom sheet. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the bottom sheet was opened. */\n  private _elementFocusedBeforeOpened: HTMLElement | null = null;\n\n  /** Server-side rendering-compatible reference to the global document object. */\n  private _document: Document;\n\n  /** Whether the component has been destroyed. */\n  private _destroyed: boolean;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    breakpointObserver: BreakpointObserver,\n    @Optional() @Inject(DOCUMENT) document: any,\n    /** The bottom sheet configuration. */\n    public bottomSheetConfig: MatBottomSheetConfig) {\n    super();\n\n    this._document = document;\n    this._breakpointSubscription = breakpointObserver\n      .observe([Breakpoints.Medium, Breakpoints.Large, Breakpoints.XLarge])\n      .subscribe(() => {\n        this._toggleClass('mat-bottom-sheet-container-medium',\n            breakpointObserver.isMatched(Breakpoints.Medium));\n        this._toggleClass('mat-bottom-sheet-container-large',\n            breakpointObserver.isMatched(Breakpoints.Large));\n        this._toggleClass('mat-bottom-sheet-container-xlarge',\n            breakpointObserver.isMatched(Breakpoints.XLarge));\n      });\n  }\n\n  /** Attach a component portal as content to this bottom sheet container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this bottom sheet container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Begin animation of bottom sheet entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the bottom sheet exiting from view. */\n  exit(): void {\n    if (!this._destroyed) {\n      this._animationState = 'hidden';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._breakpointSubscription.unsubscribe();\n    this._destroyed = true;\n  }\n\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'hidden') {\n      this._restoreFocus();\n    } else if (event.toState === 'visible' && this.bottomSheetConfig.autoFocus) {\n      this._trapFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  private _toggleClass(cssClass: string, add: boolean) {\n    const classList = this._elementRef.nativeElement.classList;\n    add ? classList.add(cssClass) : classList.remove(cssClass);\n  }\n\n  private _validatePortalAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach bottom sheet content after content is already attached');\n    }\n  }\n\n  private _setPanelClass() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClass = this.bottomSheetConfig.panelClass;\n\n    if (Array.isArray(panelClass)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      panelClass.forEach(cssClass => element.classList.add(cssClass));\n    } else if (panelClass) {\n      element.classList.add(panelClass);\n    }\n  }\n\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    this._focusTrap.focusInitialElementWhenReady();\n  }\n\n  /** Restores focus to the element that was focused before the bottom sheet was opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (this.bottomSheetConfig.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the bottom sheet was opened. */\n  private _savePreviouslyFocusedElement() {\n    this._elementFocusedBeforeOpened = this._document.activeElement as HTMLElement;\n\n    // The `focus` method isn't available during server-side rendering.\n    if (this._elementRef.nativeElement.focus) {\n      Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PortalModule,\n  ],\n  exports: [MatBottomSheetContainer, MatCommonModule],\n  declarations: [MatBottomSheetContainer],\n  entryComponents: [MatBottomSheetContainer],\n})\nexport class MatBottomSheetModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Location} from '@angular/common';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {merge, Observable, Subject} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n/**\n * Reference to a bottom sheet dispatched from the bottom sheet service.\n */\nexport class MatBottomSheetRef<T = any, R = any> {\n  /** Instance of the component making up the content of the bottom sheet. */\n  instance: T;\n\n  /**\n   * Instance of the component into which the bottom sheet content is projected.\n   * @docs-private\n   */\n  containerInstance: MatBottomSheetContainer;\n\n  /** Subject for notifying the user that the bottom sheet has been dismissed. */\n  private readonly _afterDismissed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the bottom sheet has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Result to be passed down to the `afterDismissed` stream. */\n  private _result: R | undefined;\n\n  constructor(\n    containerInstance: MatBottomSheetContainer,\n    private _overlayRef: OverlayRef,\n    // @breaking-change 8.0.0 `_location` parameter to be removed.\n    _location?: Location) {\n    this.containerInstance = containerInstance;\n\n    // Emit when opening animation completes\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'visible'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'hidden'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._overlayRef.dispose();\n      this._afterDismissed.next(this._result);\n      this._afterDismissed.complete();\n    });\n\n    if (!containerInstance.bottomSheetConfig.disableClose) {\n      merge(\n        _overlayRef.backdropClick(),\n        _overlayRef.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE))\n      ).subscribe(() => this.dismiss());\n    }\n  }\n\n  /**\n   * Dismisses the bottom sheet.\n   * @param result Data to be passed back to the bottom sheet opener.\n   */\n  dismiss(result?: R): void {\n    if (!this._afterDismissed.closed) {\n      // Transition the backdrop in parallel to the bottom sheet.\n      this.containerInstance._animationStateChanged.pipe(\n        filter(event => event.phaseName === 'start'),\n        take(1)\n      ).subscribe(() => this._overlayRef.detachBackdrop());\n\n      this._result = result;\n      this.containerInstance.exit();\n    }\n  }\n\n  /** Gets an observable that is notified when the bottom sheet is finished closing. */\n  afterDismissed(): Observable<R | undefined> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the bottom sheet has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  Injectable,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n  InjectionToken,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {Location} from '@angular/common';\nimport {of as observableOf} from 'rxjs';\nimport {MAT_BOTTOM_SHEET_DATA, MatBottomSheetConfig} from './bottom-sheet-config';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\nimport {MatBottomSheetModule} from './bottom-sheet-module';\nimport {MatBottomSheetRef} from './bottom-sheet-ref';\n\n\n/** Injection token that can be used to specify default bottom sheet options. */\nexport const MAT_BOTTOM_SHEET_DEFAULT_OPTIONS =\n    new InjectionToken<MatBottomSheetConfig>('mat-bottom-sheet-default-options');\n\n/**\n * Service to trigger Material Design bottom sheets.\n */\n@Injectable({providedIn: MatBottomSheetModule})\nexport class MatBottomSheet implements OnDestroy {\n  private _bottomSheetRefAtThisLevel: MatBottomSheetRef<any> | null = null;\n\n  /** Reference to the currently opened bottom sheet. */\n  get _openedBottomSheetRef(): MatBottomSheetRef<any> | null {\n    const parent = this._parentBottomSheet;\n    return parent ? parent._openedBottomSheetRef : this._bottomSheetRefAtThisLevel;\n  }\n\n  set _openedBottomSheetRef(value: MatBottomSheetRef<any> | null) {\n    if (this._parentBottomSheet) {\n      this._parentBottomSheet._openedBottomSheetRef = value;\n    } else {\n      this._bottomSheetRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() @SkipSelf() private _parentBottomSheet: MatBottomSheet,\n      @Optional() private _location?: Location,\n      @Optional() @Inject(MAT_BOTTOM_SHEET_DEFAULT_OPTIONS)\n          private _defaultOptions?: MatBottomSheetConfig) {}\n\n  open<T, D = any, R = any>(component: ComponentType<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n  open<T, D = any, R = any>(template: TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R> {\n\n    const _config =\n        _applyConfigDefaults(this._defaultOptions || new MatBottomSheetConfig(), config);\n    const overlayRef = this._createOverlay(_config);\n    const container = this._attachContainer(overlayRef, _config);\n    const ref = new MatBottomSheetRef<T, R>(container, overlayRef, this._location);\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      container.attachTemplatePortal(new TemplatePortal<T>(componentOrTemplateRef, null!, {\n        $implicit: _config.data,\n        bottomSheetRef: ref\n      } as any));\n    } else {\n      const portal = new ComponentPortal(componentOrTemplateRef, undefined,\n            this._createInjector(_config, ref));\n      const contentRef = container.attachComponentPortal(portal);\n      ref.instance = contentRef.instance;\n    }\n\n    // When the bottom sheet is dismissed, clear the reference to it.\n    ref.afterDismissed().subscribe(() => {\n      // Clear the bottom sheet ref if it hasn't already been replaced by a newer one.\n      if (this._openedBottomSheetRef == ref) {\n        this._openedBottomSheetRef = null;\n      }\n    });\n\n    if (this._openedBottomSheetRef) {\n      // If a bottom sheet is already in view, dismiss it and enter the\n      // new bottom sheet after exit animation is complete.\n      this._openedBottomSheetRef.afterDismissed().subscribe(() => ref.containerInstance.enter());\n      this._openedBottomSheetRef.dismiss();\n    } else {\n      // If no bottom sheet is in view, enter the new bottom sheet.\n      ref.containerInstance.enter();\n    }\n\n    this._openedBottomSheetRef = ref;\n\n    return ref;\n  }\n\n  /**\n   * Dismisses the currently-visible bottom sheet.\n   */\n  dismiss(): void {\n    if (this._openedBottomSheetRef) {\n      this._openedBottomSheetRef.dismiss();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._bottomSheetRefAtThisLevel) {\n      this._bottomSheetRefAtThisLevel.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the bottom sheet container component to the overlay.\n   */\n  private _attachContainer(overlayRef: OverlayRef,\n                           config: MatBottomSheetConfig): MatBottomSheetContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatBottomSheetConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatBottomSheetContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatBottomSheetContainer> = overlayRef.attach(containerPortal);\n    return containerRef.instance;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified bottom sheet config.\n   */\n  private _createOverlay(config: MatBottomSheetConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig({\n      direction: config.direction,\n      hasBackdrop: config.hasBackdrop,\n      disposeOnNavigation: config.closeOnNavigation,\n      maxWidth: '100%',\n      scrollStrategy: this._overlay.scrollStrategies.block(),\n      positionStrategy: this._overlay.position()\n        .global()\n        .centerHorizontally()\n        .bottom('0')\n    });\n\n    if (config.backdropClass) {\n      overlayConfig.backdropClass = config.backdropClass;\n    }\n\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a bottom sheet component.\n   * @param config Config that was used to create the bottom sheet.\n   * @param bottomSheetRef Reference to the bottom sheet.\n   */\n  private _createInjector<T>(config: MatBottomSheetConfig,\n                             bottomSheetRef: MatBottomSheetRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap<any, any>([\n      [MatBottomSheetRef, bottomSheetRef],\n      [MAT_BOTTOM_SHEET_DATA, config.data]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the bottom sheet config.\n * @param defaults Object containing the default values to which to fall back.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(defaults: MatBottomSheetConfig,\n                              config?: MatBottomSheetConfig): MatBottomSheetConfig {\n  return {...defaults, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {MatOptgroup} from './optgroup';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT =\n    new InjectionToken<MatOptionParentComponent>('MAT_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  styleUrls: ['option.css'],\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption implements AfterViewChecked, OnDestroy {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _mostRecentViewValue = '';\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() { return this._parent && this._parent.multiple; }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** The unique ID of the option. */\n  @Input() id: string = `mat-option-${_uniqueIdCounter++}`;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple() { return this._parent && this._parent.disableRipple; }\n\n  /** Event emitted when the option is selected or deselected. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n\n  /** Emits when the state of the option changes and any parents have to be notified. */\n  readonly _stateChanges = new Subject<void>();\n\n  constructor(\n    private _element: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() readonly group: MatOptgroup) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Sets focus onto this option. */\n  focus(): void {\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * `Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.`\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  ngAfterViewChecked() {\n    // Since parent components could be using the option's label to display the selected values\n    // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n    // relatively cheap, however we still limit them only to selected options in order to avoid\n    // hitting the DOM too often.\n    if (this._selected) {\n      const viewValue = this.viewValue;\n\n      if (viewValue !== this._mostRecentViewValue) {\n        this._mostRecentViewValue = viewValue;\n        this._stateChanges.next();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function _countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n  optionGroups: QueryList<MatOptgroup>): number {\n\n  if (optionGroups.length) {\n    let optionsArray = options.toArray();\n    let groups = optionGroups.toArray();\n    let groupCounter = 0;\n\n    for (let i = 0; i < optionIndex + 1; i++) {\n      if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n        groupCounter++;\n      }\n    }\n\n    return groupCounter;\n  }\n\n  return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function _getOptionScrollPosition(optionIndex: number, optionHeight: number,\n    currentScrollPosition: number, panelHeight: number): number {\n  const optionOffset = optionIndex * optionHeight;\n\n  if (optionOffset < currentScrollPosition) {\n    return optionOffset;\n  }\n\n  if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n    return Math.max(0, optionOffset - panelHeight + optionHeight);\n  }\n\n  return currentScrollPosition;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n\n@NgModule({\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup]\n})\nexport class MatOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MAT_LABEL_GLOBAL_OPTIONS =\n  new InjectionToken<LabelOptions>('mat-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n  /**\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n   * Default behavior is assumed to be `auto`.\n   */\n  float?: FloatLabelType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the MatFormField.\n * @docs-private\n */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /**\n   * Whether the input is currently in an autofilled state. If property is not present on the\n   * control it is assumed to be false.\n   */\n  readonly autofilled?: boolean;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/**\n * The placeholder text for an `MatFormField`.\n * @deprecated Use `<mat-label>` to specify the label and the `placeholder` attribute to specify the\n *     placeholder.\n * @breaking-change 8.0.0\n */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed the the front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor, CanColorCtor,\n  FloatLabelType,\n  LabelOptions,\n  MAT_LABEL_GLOBAL_OPTIONS,\n  mixinColor,\n} from '@angular/material/core';\nimport {fromEvent, merge} from 'rxjs';\nimport {startWith, take} from 'rxjs/operators';\nimport {MatError} from './error';\nimport {matFormFieldAnimations} from './form-field-animations';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {Platform} from '@angular/cdk/platform';\nimport {NgControl} from '@angular/forms';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nlet nextUniqueId = 0;\nconst floatingLabelScale = 0.75;\nconst outlineGapPadding = 5;\n\n\n/**\n * Boilerplate for applying mixins to MatFormField.\n * @docs-private\n */\nexport class MatFormFieldBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/**\n * Base class to which we're applying the form field mixins.\n * @docs-private\n */\nexport const _MatFormFieldMixinBase: CanColorCtor & typeof MatFormFieldBase =\n    mixinColor(MatFormFieldBase, 'primary');\n\n/** Possible appearance styles for the form field. */\nexport type MatFormFieldAppearance = 'legacy' | 'standard' | 'fill' | 'outline';\n\n/**\n * Represents the default options form the form field that can be configured\n * using the `MAT_FORM_FIELD_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatFormFieldDefaultOptions {\n  appearance?: MatFormFieldAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all form field within an app.\n */\nexport const MAT_FORM_FIELD_DEFAULT_OPTIONS =\n    new InjectionToken<MatFormFieldDefaultOptions>('MAT_FORM_FIELD_DEFAULT_OPTIONS');\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here\n  // in form-field-input.css. The MatInput styles are fairly minimal so it shouldn't be a\n  // big deal for people who aren't using MatInput.\n  styleUrls: [\n    'form-field.css',\n    'form-field-fill.css',\n    'form-field-input.css',\n    'form-field-legacy.css',\n    'form-field-outline.css',\n    'form-field-standard.css',\n  ],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-form-field',\n    '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n    '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n    '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n    '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-form-field-autofilled]': '_control.autofilled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n    '[class._mat-animation-noopable]': '!_animationsEnabled',\n  },\n  inputs: ['color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField extends _MatFormFieldMixinBase\n    implements AfterContentInit, AfterContentChecked, AfterViewInit, CanColor {\n  private _labelOptions: LabelOptions;\n  private _outlineGapCalculationNeeded = false;\n\n  /** The form-field appearance style. */\n  @Input()\n  get appearance(): MatFormFieldAppearance { return this._appearance; }\n  set appearance(value: MatFormFieldAppearance) {\n    const oldValue = this._appearance;\n\n    this._appearance = value || (this._defaults && this._defaults.appearance) || 'legacy';\n\n    if (this._appearance === 'outline' && oldValue !== value) {\n      this._updateOutlineGapOnStable();\n    }\n  }\n  _appearance: MatFormFieldAppearance;\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker(): boolean { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: boolean) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat(): boolean {\n    return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat(): boolean { return this.floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel(): string { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  // Unique id for the internal form field label.\n  _labelId = `mat-form-field-label-${nextUniqueId++}`;\n\n  /**\n   * Whether the label should always float, never float or float as the user types.\n   *\n   * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n   * way to make the floating label emulate the behavior of a standard input placeholder. However\n   * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n   * appearances the `never` option has been disabled in favor of just using the placeholder.\n   */\n  @Input()\n  get floatLabel(): FloatLabelType {\n    return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n  }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  /** Whether the Angular animations are enabled. */\n  _animationsEnabled: boolean;\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @ViewChild('underline') underlineRef: ElementRef;\n\n  @ViewChild('connectionContainer') _connectionContainerRef: ElementRef;\n  @ViewChild('inputContainer') _inputContainerRef: ElementRef;\n  @ViewChild('label') private _label: ElementRef;\n  @ContentChild(MatFormFieldControl) _control: MatFormFieldControl<any>;\n  @ContentChild(MatPlaceholder) _placeholderChild: MatPlaceholder;\n  @ContentChild(MatLabel) _labelChild: MatLabel;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions,\n      @Optional() private _dir: Directionality,\n      @Optional() @Inject(MAT_FORM_FIELD_DEFAULT_OPTIONS)\n          private _defaults: MatFormFieldDefaultOptions,\n      // @breaking-change 8.0.0 _platform, _ngZone and _animationMode to be made required.\n      private _platform?: Platform,\n      private _ngZone?: NgZone,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) _animationMode?: string) {\n    super(_elementRef);\n\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n    this._animationsEnabled = _animationMode !== 'NoopAnimations';\n\n    // Set the default through here so we invoke the setter on the first run.\n    this.appearance = (_defaults && _defaults.appearance) ? _defaults.appearance : 'legacy';\n  }\n\n  /**\n   * Gets an ElementRef for the element that a overlay attached to the form-field should be\n   * positioned relative to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._connectionContainerRef || this._elementRef;\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n\n    const control = this._control;\n\n    if (control.controlType) {\n      this._elementRef.nativeElement.classList.add(`mat-form-field-type-${control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    control.stateChanges.pipe(startWith<void>(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Run change detection if the value changes.\n    if (control.ngControl && control.ngControl.valueChanges) {\n      control.ngControl.valueChanges.subscribe(() => this._changeDetectorRef.markForCheck());\n    }\n\n    // Run change detection and update the outline if the suffix or prefix changes.\n    merge(this._prefixChildren.changes, this._suffixChildren.changes).subscribe(() => {\n      this._updateOutlineGapOnStable();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n    if (this._outlineGapCalculationNeeded) {\n      this.updateOutlineGap();\n    }\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: keyof NgControl): boolean {\n    const ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && ngControl[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control && this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this.appearance === 'legacy' && !this._hasLabel() ||\n        this._hasLabel() && !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      // If animations are disabled, we shouldn't go in here,\n      // because the `transitionend` will never fire.\n      if (this._animationsEnabled) {\n        this._showAlwaysAnimate = true;\n\n        fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n          this._showAlwaysAnimate = false;\n        });\n      }\n\n      this.floatLabel = 'always';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align === 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align === 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        const startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        const endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n\n  /**\n   * Updates the width and position of the gap in the outline. Only relevant for the outline\n   * appearance.\n   */\n  updateOutlineGap() {\n    const labelEl = this._label ? this._label.nativeElement : null;\n\n    if (this.appearance !== 'outline' || !labelEl || !labelEl.children.length ||\n        !labelEl.textContent.trim()) {\n      return;\n    }\n\n    if (this._platform && !this._platform.isBrowser) {\n      // getBoundingClientRect isn't available on the server.\n      return;\n    }\n    // If the element is not present in the DOM, the outline gap will need to be calculated\n    // the next time it is checked and in the DOM.\n    if (!document.documentElement!.contains(this._elementRef.nativeElement)) {\n      this._outlineGapCalculationNeeded = true;\n      return;\n    }\n\n    let startWidth = 0;\n    let gapWidth = 0;\n    const startEls = this._connectionContainerRef.nativeElement.querySelectorAll(\n      '.mat-form-field-outline-start');\n    const gapEls = this._connectionContainerRef.nativeElement.querySelectorAll(\n        '.mat-form-field-outline-gap');\n    if (this._label && this._label.nativeElement.children.length) {\n      const containerStart = this._getStartEnd(\n          this._connectionContainerRef.nativeElement.getBoundingClientRect());\n      const labelStart = this._getStartEnd(labelEl.children[0].getBoundingClientRect());\n      let labelWidth = 0;\n\n      for (const child of labelEl.children) {\n        labelWidth += child.offsetWidth;\n      }\n      startWidth = labelStart - containerStart - outlineGapPadding;\n      gapWidth = labelWidth > 0 ? labelWidth * floatingLabelScale + outlineGapPadding * 2 : 0;\n    }\n\n    for (let i = 0; i < startEls.length; i++) {\n      startEls.item(i).style.width = `${startWidth}px`;\n    }\n    for (let i = 0; i < gapEls.length; i++) {\n      gapEls.item(i).style.width = `${gapWidth}px`;\n    }\n\n    this._outlineGapCalculationNeeded = false;\n  }\n\n  /** Gets the start end of the rect considering the current directionality. */\n  private _getStartEnd(rect: ClientRect): number {\n    return this._dir && this._dir.value === 'rtl' ? rect.right : rect.left;\n  }\n\n  /** Updates the outline gap the new time the zone stabilizes. */\n  private _updateOutlineGapOnStable() {\n    // @breaking-change 8.0.0 Remove this check and else block once _ngZone is required.\n    if (this._ngZone) {\n      this._ngZone.onStable.pipe(take(1)).subscribe(() => this.updateOutlineGap());\n    } else {\n      Promise.resolve().then(() => this.updateOutlineGap());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n  imports: [\n    CommonModule,\n    ObserversModule,\n  ],\n  exports: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n})\nexport class MatFormFieldModule {}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {HammerLoader, HAMMER_LOADER} from '@angular/platform-browser';\nimport {BidiModule} from '@angular/cdk/bidi';\n\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks', {\n  providedIn: 'root',\n  factory: MATERIAL_SANITY_CHECKS_FACTORY,\n});\n\n/** @docs-private */\nexport function MATERIAL_SANITY_CHECKS_FACTORY(): boolean {\n  return true;\n}\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  /** Whether we've already checked for HammerJs availability. */\n  private _hasCheckedHammer = false;\n\n  /** Reference to the global `document` object. */\n  private _document = typeof document === 'object' && document ? document : null;\n\n  /** Reference to the global 'window' object. */\n  private _window = typeof window === 'object' && window ? window : null;\n\n  constructor(\n    @Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecksEnabled: boolean,\n    @Optional() @Inject(HAMMER_LOADER) private _hammerLoader?: HammerLoader) {\n\n    if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n      this._checkDoctypeIsDefined();\n      this._checkThemeIsPresent();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n\n  /** Whether any sanity checks are enabled */\n  private _areChecksEnabled(): boolean {\n    return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n  }\n\n  /** Whether the code is running in tests. */\n  private _isTestEnv() {\n    const window = this._window as any;\n    return window && (window.__karma__ || window.jasmine);\n  }\n\n  private _checkDoctypeIsDefined(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n\n  private _checkThemeIsPresent(): void {\n    // We need to assert that the `body` is defined, because these checks run very early\n    // and the `body` won't be defined if the consumer put their scripts in the `head`.\n    if (!this._document || !this._document.body || typeof getComputedStyle !== 'function') {\n      return;\n    }\n\n    const testElement = this._document.createElement('div');\n\n    testElement.classList.add('mat-theme-loaded-marker');\n    this._document.body.appendChild(testElement);\n\n    const computedStyle = getComputedStyle(testElement);\n\n    // In some situations the computed style of the test element can be null. For example in\n    // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n    // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n    if (computedStyle && computedStyle.display !== 'none') {\n      console.warn(\n        'Could not find Angular Material core theme. Most Material ' +\n        'components may not work as expected. For more info refer ' +\n        'to the theming guide: https://material.angular.io/guide/theming'\n      );\n    }\n\n    this._document.body.removeChild(testElement);\n  }\n\n  /** Checks whether HammerJS is available. */\n  _checkHammerIsAvailable(): void {\n    if (this._hasCheckedHammer || !this._window) {\n      return;\n    }\n\n    if (this._areChecksEnabled() && !(this._window as any)['Hammer'] && !this._hammerLoader) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material components may not work correctly.');\n    }\n    this._hasCheckedHammer = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  /** Whether the component is disabled. */\n  disabled: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableCtor = Constructor<CanDisable>;\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): CanDisableCtor & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled() { return this._disabled; }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  /** Theme color palette for the component. */\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport type CanColorCtor = Constructor<CanColor>;\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values. */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(\n    base: T, defaultColor?: ThemePalette): CanColorCtor & T {\n  return class extends base {\n    private _color: ThemePalette;\n\n    get color(): ThemePalette { return this._color; }\n    set color(value: ThemePalette) {\n      const colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  /** Whether ripples are disabled. */\n  disableRipple: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableRippleCtor = Constructor<CanDisableRipple>;\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T): CanDisableRippleCtor & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n\n/** @docs-private */\nexport interface HasTabIndex {\n  /** Tabindex of the component. */\n  tabIndex: number;\n}\n\n/** @docs-private */\nexport type HasTabIndexCtor = Constructor<HasTabIndex>;\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : HasTabIndexCtor & T {\n  return class extends base {\n    private _tabIndex: number = defaultTabIndex;\n\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {Constructor} from './constructor';\n\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  updateErrorState(): void;\n  readonly stateChanges: Subject<void>;\n  errorState: boolean;\n  errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport type CanUpdateErrorStateCtor = Constructor<CanUpdateErrorState>;\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n  ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n: CanUpdateErrorStateCtor & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping\n     * `MatFormField` needs to run change detection.\n     */\n    readonly stateChanges = new Subject<void>();\n\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable, Subscriber} from 'rxjs';\nimport {Constructor} from './constructor';\n\n\n/**\n * Mixin that adds an initialized property to a directive which, when subscribed to, will emit a\n * value once markInitialized has been called, which should be done during the ngOnInit function.\n * If the subscription is made after it has already been marked as initialized, then it will trigger\n * an emit immediately.\n * @docs-private\n */\nexport interface HasInitialized {\n  /** Stream that emits once during the directive/component's ngOnInit. */\n  initialized: Observable<void>;\n\n  /**\n   * Sets the state as initialized and must be called during ngOnInit to notify subscribers that\n   * the directive has been initialized.\n   * @docs-private\n   */\n  _markInitialized: () => void;\n}\n\n/** @docs-private */\nexport type HasInitializedCtor = Constructor<HasInitialized>;\n\n/** Mixin to augment a directive with an initialized property that will emits when ngOnInit ends. */\nexport function mixinInitialized<T extends Constructor<{}>>(base: T):\n    HasInitializedCtor & T {\n  return class extends base {\n    /** Whether this directive has been marked as initialized. */\n    _isInitialized = false;\n\n    /**\n     * List of subscribers that subscribed before the directive was initialized. Should be notified\n     * during _markInitialized. Set to null after pending subscribers are notified, and should\n     * not expect to be populated after.\n     */\n    _pendingSubscribers: Subscriber<void>[] | null = [];\n\n    /**\n     * Observable stream that emits when the directive initializes. If already initialized, the\n     * subscriber is stored to be notified once _markInitialized is called.\n     */\n    initialized = new Observable<void>(subscriber => {\n      // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify\n      // when _markInitialized is called.\n      if (this._isInitialized) {\n        this._notifySubscriber(subscriber);\n      } else {\n        this._pendingSubscribers!.push(subscriber);\n      }\n    });\n\n    constructor(...args: any[]) { super(...args); }\n\n    /**\n     * Marks the state as initialized and notifies pending subscribers. Should be called at the end\n     * of ngOnInit.\n     * @docs-private\n     */\n    _markInitialized(): void {\n      if (this._isInitialized) {\n        throw Error('This directive has already been marked as initialized and ' +\n            'should not be called twice.');\n      }\n\n      this._isInitialized = true;\n\n      this._pendingSubscribers!.forEach(this._notifySubscriber);\n      this._pendingSubscribers = null;\n    }\n\n    /** Emits and completes the subscriber stream (should only emit once). */\n    _notifySubscriber(subscriber: Subscriber<void>): void {\n      subscriber.next();\n      subscriber.complete();\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {inject, InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE', {\n  providedIn: 'root',\n  factory: MAT_DATE_LOCALE_FACTORY,\n});\n\n/** @docs-private */\nexport function MAT_DATE_LOCALE_FACTORY(): string {\n  return inject(LOCALE_ID);\n}\n\n/**\n * No longer needed since MAT_DATE_LOCALE has been changed to a scoped injectable.\n * If you are importing and providing this in your code you can simply remove it.\n * @deprecated\n * @breaking-change 8.0.0\n */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges = new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n  private readonly _clampDate: boolean;\n\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   *\n   * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\n   * getting the string representation of a Date object from it's utc representation. We're keeping\n   * it here for sometime, just for precaution, in case we decide to revert some of these changes\n   * though.\n   */\n  useUtcForDisplay: boolean = true;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string, platform: Platform) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    this.useUtcForDisplay = !platform.TRIDENT;\n    this._clampDate = platform.TRIDENT || platform.EDGE;\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {month: style, timeZone: 'utc'});\n      return range(12, i =>\n          this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric', timeZone: 'utc'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {weekday: style, timeZone: 'utc'});\n      return range(7, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric', timeZone: 'utc'});\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    if (SUPPORTS_INTL_API) {\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n        date = this.clone(date);\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n      }\n\n      displayFormat = {...displayFormat, timeZone: 'utc'};\n\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    const result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n\n  /**\n   * When converting Date object to string, javascript built-in functions may return wrong\n   * results because it applies its internal DST rules. The DST rules around the world change\n   * very frequently, and the current valid rule is not always valid in previous years though.\n   * We work around this problem building a new Date object which has its internal UTC\n   * representation with the local date and time.\n   * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\n   *    timeZone set to 'utc' to work fine.\n   * @param date Date from which we want to get the string representation according to dtf\n   * @returns A Date object with its UTC representation based on the passed in date info\n   */\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\n    const d = new Date(Date.UTC(\n        date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n        date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n    return dtf.format(d);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  NgModule,\n  Directive,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {startWith} from 'rxjs/operators';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport function setLines(lines: QueryList<MatLine>, element: ElementRef<HTMLElement>) {\n  // Note: doesn't need to unsubscribe, because `changes`\n  // gets completed by Angular when the view is destroyed.\n  lines.changes.pipe(startWith<QueryList<MatLine>>(lines)).subscribe(({length}) => {\n    setClass(element, 'mat-2-line', false);\n    setClass(element, 'mat-3-line', false);\n    setClass(element, 'mat-multi-line', false);\n\n    if (length === 2 || length === 3) {\n      setClass(element, `mat-${length}-line`, true);\n    } else if (length > 3) {\n      setClass(element, `mat-multi-line`, true);\n    }\n  });\n}\n\n/** Adds or removes a class from an element. */\nfunction setClass(element: ElementRef<HTMLElement>, className: string, isAdd: boolean): void {\n  const classList = element.nativeElement.classList;\n  isAdd ? classList.add(className) : classList.remove(className);\n}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n * @deprecated Use `setLines` instead.\n * @breaking-change 8.0.0\n */\nexport class MatLineSetter {\n  constructor(lines: QueryList<MatLine>, element: ElementRef<HTMLElement>) {\n    setLines(lines, element);\n  }\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {RippleRef, RippleState} from './ripple-ref';\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  persistent?: boolean;\n  animation?: RippleAnimationConfig;\n  terminateOnPointerUp?: boolean;\n};\n\n/**\n * Interface that describes the configuration for the animation of a ripple.\n * There are two animation phases with different durations for the ripples.\n */\nexport interface RippleAnimationConfig {\n  /** Duration in milliseconds for the enter animation (expansion from point of contact). */\n  enterDuration?: number;\n  /** Duration in milliseconds for the exit animation (fade-out). */\n  exitDuration?: number;\n}\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nexport const defaultRippleAnimationConfig = {\n  enterDuration: 450,\n  exitDuration: 400\n};\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst ignoreMouseEventsTimeout = 800;\n\n/** Options that apply to all the event listeners that are bound by the ripple renderer. */\nconst passiveEventOptions = normalizePassiveListenerOptions({passive: true});\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer {\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /** Events to be registered on the trigger element. */\n  private _triggerEvents = new Map<string, any>();\n\n  /** Set of currently active ripple references. */\n  private _activeRipples = new Set<RippleRef>();\n\n  /** Latest non-persistent ripple that was triggered. */\n  private _mostRecentTransientRipple: RippleRef | null;\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /**\n   * Cached dimensions of the ripple container. Set when the first\n   * ripple is shown and cleared once no more ripples are visible.\n   */\n  private _containerRect: ClientRect | null;\n\n  constructor(private _target: RippleTarget,\n              private _ngZone: NgZone,\n              elementRef: ElementRef<HTMLElement>,\n              platform: Platform) {\n\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents\n        .set('mousedown', this.onMousedown)\n        .set('mouseup', this.onPointerUp)\n        .set('mouseleave', this.onPointerUp)\n\n        .set('touchstart', this.onTouchStart)\n        .set('touchend', this.onPointerUp)\n        .set('touchcancel', this.onPointerUp);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = this._containerRect =\n                          this._containerRect || this._containerElement.getBoundingClientRect();\n    const animationConfig = {...defaultRippleAnimationConfig, ...config.animation};\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n    const duration = animationConfig.enterDuration;\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    if (!config.persistent) {\n      this._mostRecentTransientRipple = rippleRef;\n    }\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      const isMostRecentTransientRipple = rippleRef === this._mostRecentTransientRipple;\n\n      rippleRef.state = RippleState.VISIBLE;\n\n      // When the timer runs out while the user has kept their pointer down, we want to\n      // keep only the persistent ripples and the latest transient ripple. We do this,\n      // because we don't want stacked transient ripples to appear after their enter\n      // animation has finished.\n      if (!config.persistent && (!isMostRecentTransientRipple || !this._isPointerDown)) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    const wasActive = this._activeRipples.delete(rippleRef);\n\n    if (rippleRef === this._mostRecentTransientRipple) {\n      this._mostRecentTransientRipple = null;\n    }\n\n    // Clear out the cached bounding rect if we have no more ripples.\n    if (!this._activeRipples.size) {\n      this._containerRect = null;\n    }\n\n    // For ripples that are not active anymore, don't re-un the fade-out animation.\n    if (!wasActive) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n    const animationConfig = {...defaultRippleAnimationConfig, ...rippleRef.config.animation};\n\n    rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n    rippleEl.style.opacity = '0';\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode!.removeChild(rippleEl);\n    }, animationConfig.exitDuration);\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(element: HTMLElement) {\n    if (!element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n\n    this._ngZone.runOutsideAngular(() => {\n      this._triggerEvents.forEach((fn, type) => {\n        element.addEventListener(type, fn, passiveEventOptions);\n      });\n    });\n\n    this._triggerElement = element;\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private onMousedown = (event: MouseEvent) => {\n    // Screen readers will fire fake mouse events for space/enter. Skip launching a\n    // ripple in this case for consistency with the non-screen-reader experience.\n    const isFakeMousedown = isFakeMousedownFromScreenReader(event);\n    const isSyntheticEvent = this._lastTouchStartEvent &&\n        Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n\n    if (!this._target.rippleDisabled && !isFakeMousedown && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private onTouchStart = (event: TouchEvent) => {\n    if (!this._target.rippleDisabled) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      // Use `changedTouches` so we skip any touches where the user put\n      // their finger down, but used another finger to tap the element again.\n      const touches = event.changedTouches;\n\n      for (let i = 0; i < touches.length; i++) {\n        this.fadeInRipple(touches[i].clientX, touches[i].clientY, this._target.rippleConfig);\n      }\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private onPointerUp = () => {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      // By default, only ripples that are completely visible will fade out on pointer release.\n      // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\n      const isVisible = ripple.state === RippleState.VISIBLE ||\n        ripple.config.terminateOnPointerUp && ripple.state === RippleState.FADING_IN;\n\n      if (!ripple.config.persistent && isVisible) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n  private runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => {\n        this._triggerElement!.removeEventListener(type, fn, passiveEventOptions);\n      });\n    }\n  }\n}\n\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`matMenuTriggerFor: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`xPosition value must be either 'before' or after'.\n      Example: <mat-menu xPosition=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`yPosition value must be either 'above' or below'.\n      Example: <mat-menu yPosition=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {DateAdapter} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n  imports: [PlatformModule],\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n  ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({providedIn: 'root'})\nexport class ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {\n  HammerStatic,\n  HammerInstance,\n  Recognizer,\n  RecognizerStatic,\n  HammerOptions,\n} from './gesture-annotations';\n\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\n\nconst ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES = [\n  'longpress',\n  'slide',\n  'slidestart',\n  'slideend',\n  'slideright',\n  'slideleft'\n];\n\n/**\n * Fake HammerInstance that is used when a Hammer instance is requested when HammerJS has not\n * been loaded on the page.\n */\nconst noopHammerInstance: HammerInstance = {\n  on: () => {},\n  off: () => {},\n};\n\n/** Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class GestureConfig extends HammerGestureConfig {\n  /** List of new event names to add to the gesture support list */\n  events = ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES;\n\n  constructor(\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\n    @Optional() commonModule?: MatCommonModule) {\n    super();\n    if (commonModule) {\n      commonModule._checkHammerIsAvailable();\n    }\n  }\n\n  /**\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://material.io/design/#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * @param element Element to which to assign the new HammerJS gestures.\n   * @returns Newly-created HammerJS instance.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\n\n    if (!hammer) {\n      // If HammerJS is not loaded here, return the noop HammerInstance. This is necessary to\n      // ensure that omitting HammerJS completely will not cause any errors while *also* supporting\n      // the lazy-loading of HammerJS via the HAMMER_LOADER token introduced in Angular 6.1.\n      // Because we can't depend on HAMMER_LOADER's existance until 7.0, we have to always set\n      // `this.events` to the set we support, instead of conditionally setting it to `[]` if\n      // `HAMMER_LOADER` is present (and then throwing an Error here if `window.Hammer` is\n      // undefined).\n      // @breaking-change 8.0.0\n      return noopHammerInstance;\n    }\n\n    const mc = new hammer(element, this._hammerOptions || undefined);\n\n    // Default Hammer Recognizers.\n    const pan = new hammer.Pan();\n    const swipe = new hammer.Swipe();\n    const press = new hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Since the slide event threshold is set to zero, the slide recognizer can fire and\n    // accidentally reset the longpress recognizer. In order to make sure that the two\n    // recognizers can run simultaneously but don't affect each other, we allow the slide\n    // recognizer to recognize while a longpress is being processed.\n    // See: https://github.com/hammerjs/hammer.js/blob/master/src/manager.js#L123-L124\n    longpress.recognizeWith(slide);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return mc as HammerInstance;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\n\n/** Possible states for a ripple element. */\nexport enum RippleState {\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n\n  /** Current state of the ripple. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: RippleRenderer,\n    /** Reference to the ripple HTML element. */\n    public element: HTMLElement,\n    /** Ripple configuration used for the ripple. */\n    public config: RippleConfig) {\n  }\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {RippleRef} from './ripple-ref';\nimport {RippleAnimationConfig, RippleConfig, RippleRenderer, RippleTarget} from './ripple-renderer';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * Configuration for the animation duration of the ripples. There are two phases with different\n   * durations for the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  animation?: RippleAnimationConfig;\n\n  /**\n   * Whether ripples should start fading out immediately after the mouse our touch is released. By\n   * default, ripples will wait for the enter animation to complete and for mouse or touch release.\n   */\n  terminateOnPointerUp?: boolean;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * Configuration for the ripple animation. Allows modifying the enter and exit animation\n   * duration of the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  @Input('matRippleAnimation') animation: RippleAnimationConfig;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() { return this._trigger || this._elementRef.nativeElement; }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** Whether ripple directive is initialized and the input bindings are set. */\n  private _isInitialized: boolean = false;\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n\n    if (animationMode === 'NoopAnimations') {\n      this._globalOptions.animation = {enterDuration: 0, exitDuration: 0};\n    }\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /**\n   * Ripple configuration from the directive's input values.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      radius: this.radius,\n      color: this.color,\n      animation: {...this._globalOptions.animation, ...this.animation},\n      terminateOnPointerUp: this._globalOptions.terminateOnPointerUp,\n    };\n  }\n\n  /**\n   * Whether ripples on pointer-down are disabled or not.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n\n  /**\n   * Launches a manual ripple using the specified ripple configuration.\n   * @param config Configuration for the manual ripple.\n   */\n  launch(config: RippleConfig): RippleRef;\n\n  /**\n   * Launches a manual ripple at the specified coordinates within the element.\n   * @param x Coordinate within the element, along the X axis at which to fade-in the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to fade-in the ripple.\n   * @param config Optional ripple configuration for the manual ripple.\n   */\n  launch(x: number, y: number, config?: RippleConfig): RippleRef;\n\n  /** Launches a manual ripple at the specified coordinated or just by the ripple config. */\n  launch(configOrX: number | RippleConfig, y: number = 0, config?: RippleConfig): RippleRef {\n    if (typeof configOrX === 'number') {\n      return this._rippleRenderer.fadeInRipple(configOrX, y, {...this.rippleConfig, ...config});\n    } else {\n      return this._rippleRenderer.fadeInRipple(0, 0, {...this.rippleConfig, ...configOrX});\n    }\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  Input,\n  ChangeDetectionStrategy,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/**\n * Possible states for a pseudo checkbox.\n * @docs-private\n */\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n\n  constructor(@Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n})\nexport class MatPseudoCheckboxModule { }\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '../common-behaviors/disabled';\n\n\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nexport class MatOptgroupBase { }\nexport const _MatOptgroupMixinBase: CanDisableCtor & typeof MatOptgroupBase =\n    mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  styleUrls: ['optgroup.css'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n})\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n"],"names":["type","undefined","decorators","Inject","args","MAT_TABS_CONFIG","Optional","MatTabGroup","propDecorators","_tabHeader","ViewChild","dynamicHeight","Input","selectedIndex","headerPosition","animationDuration","backgroundColor","selectedIndexChange","Output","focusChange","animationDone","selectedTabChange","MatTabNavBase","_elementRef","this","_MatTabNavMixinBase","mixinDisableRipple","mixinColor","MatTabNav","elementRef","_dir","_ngZone","_changeDetectorRef","_viewportRuler","_this","_super","call","_onDestroy","Subject","tslib_1.__extends","Object","defineProperty","prototype","_backgroundColor","value","nativeElement","classList","remove","add","updateActiveLink","element","_activeLinkChanged","markForCheck","ngAfterContentInit","runOutsideAngular","dirChange","change","observableOf","merge","pipe","takeUntil","subscribe","_alignInkBar","ngAfterContentChecked","activeTab","_tabLinks","find","tab","active","_activeLinkElement","ngOnDestroy","next","complete","_inkBar","show","alignToElement","hide","Component","selector","exportAs","inputs","template","styles","host","class","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","NgZone","ChangeDetectorRef","ViewportRuler","MatTabLinkBase","_MatTabLinkMixinBase","mixinTabIndex","mixinDisabled","_tabNavBar","_focusMonitor","_tabLinkRipple","setupTriggerEvents","tabIndex","parseInt","globalOptions","_ripplesGloballyDisabled","disabled","terminateOnPointerUp","animation","monitor","get","_isActive","enumerable","configurable","stopMonitoring","MatTabLink","Directive","[attr.aria-current]","[attr.aria-disabled]","[attr.tabIndex]","[class.mat-tab-disabled]","[class.mat-tab-label-active]","Platform","MAT_RIPPLE_GLOBAL_OPTIONS","String","Attribute","FocusMonitor","NgModule","imports","CommonModule","MatCommonModule","PortalModule","MatRippleModule","ObserversModule","A11yModule","exports","MatTabLabel","MatTab","MatTabContent","declarations","MatInkBar","MatTabLabelWrapper","MatTabBody","MatTabBodyPortal","MatTabHeader","MatTabsModule","MatToolbarBase","_MatToolbarMixinBase","MatToolbarRow","MatToolbar","_platform","document","_document","ngAfterViewInit","isDevMode","isBrowser","_checkToolbarMixedModes","_toolbarRows","changes","length","Array","from","childNodes","filter","node","contains","nodeType","COMMENT_NODE","some","textContent","trim","throwToolbarMixedModesError","[class.mat-toolbar-multiple-rows]","[class.mat-toolbar-single-row]","DOCUMENT","MatToolbarModule","MatTreeNodeOutlet","viewContainer","ViewContainerRef","_MatTreeNodeMixinBase","CdkTreeNode","_MatNestedTreeNodeMixinBase","CdkNestedTreeNode","MatTreeNode","_tree","role","Number","[attr.aria-expanded]","[attr.aria-level]","[attr.role]","providers","provide","useExisting","ElementRef","CdkTree","MatTreeNodeDef","CdkTreeNodeDef","data","MatNestedTreeNode","_differs","IterableDiffers","nodeOutlet","ContentChildren","MatTreeNodePadding","CdkTreeNodePadding","level","indent","MatTree","recursive","MatTreeNodeToggle","(click)","CdkTreeNodeToggle","MAT_TREE_DIRECTIVES","CdkTreeModule","MatTreeModule","MatTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","_flattenNode","resultNodes","parentMap","flatNode","push","childrenNodes","isArray","_flattenChildren","take","children","forEach","child","index","childParentMap","slice","flattenNodes","structuredData","expandFlattenedNodes","nodes","treeControl","results","currentExpand","expand","i","isExpanded","MatTreeFlatDataSource","treeFlattener","initialData","_flattenedData","BehaviorSubject","_expandedData","_data","dataNodes","connect","collectionViewer","viewChange","expansionModel","onChange","apply","map","disconnect","DataSource","MatTreeNestedDataSource","VERSION","Version","SELECT_PANEL_PADDING_X","columnDef","cssClassFriendlyName","MatHeaderCell","CdkColumnDef","CdkHeaderCell","MatFooterCell","CdkFooterCell","MatCell","CdkCell","MatHeaderRowDef","CdkHeaderRowDef","MatFooterRowDef","CdkFooterRowDef","MatRowDef","CdkRowDef","MatHeaderRow","CDK_ROW_TEMPLATE","CdkHeaderRow","arguments","CdkFooterRow","MatFooterRow","MatRow","CdkRow","EXPORTED_DECLARATIONS","MatTable","MatHeaderCellDef","MatColumnDef","MatCellDef","MatFooterCellDef","CdkTableModule","MatTableModule","MAX_SAFE_INTEGER","MatTableDataSource","_renderData","_filter","_renderChangesSubscription","Subscription","EMPTY","sortingDataAccessor","sortHeaderId","_isNumberValue","numberValue","sortData","sort","direction","a","b","valueA","valueB","comparatorResult","filterPredicate","dataStr","keys","reduce","currentTerm","key","toLowerCase","transformedFilter","indexOf","_updateChangeSubscription","_sort","_paginator","paginator","sortChange","initialized","pageChange","page","dataStream","filteredData","combineLatest","_a","_filterData","orderedData","_orderData","paginatedData","_pageData","unsubscribe","obj","_updatePaginator","startIndex","pageIndex","pageSize","splice","filteredDataLength","Promise","resolve","then","lastPageIndex","Math","ceil","min","_MAT_INK_BAR_POSITIONER","InjectionToken","providedIn","factory","_MAT_INK_BAR_POSITIONER_FACTORY","_inkBarPositioner","requestAnimationFrame","_setStyles","style","visibility","positions","inkBar","left","width","TemplateRef","CdkPortal","MatTabBase","_MatTabMixinBase","_viewContainerRef","textLabel","_contentPortal","_stateChanges","position","origin","isActive","ngOnChanges","hasOwnProperty","ngOnInit","TemplatePortal","_explicitContent","_implicitContent","ariaLabel","ariaLabelledby","matTabsAnimations","translateTab","trigger","state","transform","minHeight","transition","animate","componentFactoryResolver","viewContainerRef","_host","_centeringSub","_leavingSub","_beforeCentering","startWith","_isCenterPosition","_position","isCentering","hasAttached","attach","_content","_afterLeavingCenter","detach","ComponentFactoryResolver","forwardRef","CdkPortalOutlet","changeDetectorRef","_dirChangeSubscription","_translateTabComplete","_onCentering","EventEmitter","_onCentered","dir","_computePositionAnimationState","distinctUntilChanged","x","y","fromState","toState","event","emit","_positionIndex","_computePositionFromOrigin","_onTranslateTabStarted","clientHeight","_getLayoutDirection","animations","_portalHost","PortalHostDirective","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","focus","getOffsetLeft","offsetLeft","getOffsetWidth","offsetWidth","MatTabHeaderBase","_MatTabHeaderMixinBase","_scrollDistance","_selectedIndexChanged","_destroyed","_showPaginationControls","_disableScrollAfter","_disableScrollBefore","_selectedIndex","selectFocusedIndex","indexFocused","coerceNumberProperty","_keyManager","updateActiveItemIndex","_tabLabelCount","_labelWrappers","_updatePagination","_scrollToLabel","_checkScrollingControls","_alignInkBarToSelectedTab","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","keyCode","HOME","setFirstItemActive","preventDefault","END","setLastItemActive","ENTER","SPACE","focusIndex","onKeydown","resize","realign","FocusKeyManager","withHorizontalOrientation","withWrap","updateActiveItem","newFocusIndex","_setTabFocus","_onContentChanges","zoneCallback","run","_checkPaginationEnabled","_isValidIndex","setActiveItem","toArray","containerEl","_tabListContainer","scrollLeft","scrollWidth","scrollDistance","translateX","_tabList","v","max","_getMaxScrollDistance","_scrollHeader","scrollDir","viewLength","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","beforeVisiblePos","afterVisiblePos","isEnabled","selectedLabelWrapper","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","Directionality","nextId","MatTabChangeEvent","MatTabGroupBase","_MatTabGroupMixinBase","defaultConfig","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","_tabLabelSubscription","_dynamicHeight","_groupId","coerceBooleanProperty","indexToSelect","_clampTabIndex","isFirstRun_1","_createChangeEvent","_tabs","_subscribeToTabLabels","tabs","realignInkBar","_focusChanged","_getTabLabelId","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","height","offsetHeight","_removeTabBodyWrapperHeight","_handleClick","tabHeader","_getTabIndex","idx","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","SORT_ANIMATION_TRANSITION","leftPointer","rightPointer","arrowOpacity","opacity","arrowPosition","keyframes","allowChildren","query","animateChild","optional","sortButtonLabel","id","Injectable","MatSortHeaderIntl","MAT_SORT_HEADER_INTL_PROVIDER","deps","SkipSelf","useFactory","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","MatSortHeaderBase","_MatSortHeaderMixinBase","MatSortHeader","_intl","_columnDef","_showIndicatorHint","_arrowDirection","_disableViewStateAnimation","getSortHeaderNotContainedWithinSortError","_rerenderSubscription","_isSorted","_updateArrowDirection","_viewState","_setAnimationTransitionState","_disableClear","name","register","deregister","_setIndicatorHintVisible","visible","_isDisabled","viewState","_getArrowDirectionState","_getArrowViewState","start","_getAriaSortAttribute","(mouseenter)","(longpress)","(mouseleave)","[attr.aria-sort]","[class.mat-sort-header-disabled]","matSortAnimations","indicator","MatSort","disableClear","MatSortModule","MatStepLabel","CdkStepLabel","optionalLabel","MatStepperIntl","MAT_STEPPER_INTL_PROVIDER","MAT_STEPPER_INTL_PROVIDER_FACTORY","MatStepHeader","_intlSubscription","_stringLabel","label","_templateLabel","_getHostElement","_getIconContext","errorMessage","iconOverrides","selected","matStepperAnimations","horizontalStepTransition","verticalStepTransition","MatStepperIcon","templateRef","MatStep","stepper","_errorStateMatcher","stepperOptions","isErrorState","control","form","originalErrorState","customErrorState","invalid","interacted","ErrorStateMatcher","MAT_STEPPER_GLOBAL_OPTIONS","MatStepper","_icons","_iconOverrides","_steps","_stateChanged","MatHorizontalStepper","[class.mat-stepper-label-position-end]","[class.mat-stepper-label-position-bottom]","aria-orientation","labelPosition","MatVerticalStepper","_orientation","ctorParameters","MatStepperNext","[type]","CdkStepper","CdkStepperNext","MatStepperPrevious","CdkStepperPrevious","MatButtonModule","CdkStepperModule","MatIconModule","MatStepperModule","stickyCssClass","CDK_TABLE_TEMPLATE","CdkCellDef","CdkHeaderCellDef","CdkFooterCellDef","sticky","stickyEnd","MatSlider","_max","_percent","_calculatePercentage","_value","_min","_step","_roundToDecimal","toString","split","pop","_thumbLabel","_tickInterval","parseFloat","toFixed","_vertical","displayWith","_focusHostElement","blur","_blurHostElement","_clamp","vertical","invert","percent","_isMinValue","thumbLabel","axis","scale","_shouldInvertMouseCoords","_thumbGap","_getDirection","_tickIntervalPercent","tickSize","backgroundSize","sign","rotate","_invertAxis","detectChanges","_onMouseenter","_sliderDimensions","_getSliderDimensions","_updateTickIntervalPercent","_onMousedown","oldValue","_isSliding","_updateValueFromPosition","clientX","clientY","_emitInputEvent","_emitChangeEvent","_onSlide","_onSlideStart","center","_valueOnSlideStart","_onSlideEnd","_onFocus","_onBlur","onTouched","_onKeydown","PAGE_UP","_increment","PAGE_DOWN","LEFT_ARROW","UP_ARROW","RIGHT_ARROW","DOWN_ARROW","_onKeyup","numSteps","step","pos","offset","top","size","posComponent","exactValue","_calculateValue","closestValue","round","_controlValueAccessorChangeFn","valueChange","input","tickInterval","trackSize","pixelsPerStep","stepsPerTick","pixelsPerTick","MatSliderChange","source","percentage","_sliderWrapper","getBoundingClientRect","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","MAT_SLIDER_VALUE_ACCESSOR","(focus)","(blur)","(mousedown)","(keydown)","(keyup)","(slide)","(slideend)","(slidestart)","[tabIndex]","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[attr.aria-orientation]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[class.mat-slider-axis-inverted]","[class.mat-slider-sliding]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","[class._mat-animation-noopable]","ANIMATION_MODULE_TYPE","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MatSliderModule","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","dismiss","_onExit","_finishDismiss","closed","exit","clearTimeout","_durationTimeoutId","dismissWithAction","closeWithAction","_dismissAfter","duration","setTimeout","_open","dispose","dismissedByAction","afterDismissed","asObservable","afterOpened","_onEnter","MAT_SNACK_BAR_DATA","MatSnackBarConfig","politeness","announcementMessage","horizontalPosition","verticalPosition","SimpleSnackBar","snackBarRef","action","matSnackBarAnimations","snackBarState","MatSnackBarContainer","snackBarConfig","_animationState","_role","attachComponentPortal","portal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","attachTemplatePortal","onAnimationEnd","_completeExit","onEnter_1","enter","onMicrotaskEmpty","panelClasses","panelClass","cssClass","Error","[@state]","(@state.done)","OverlayModule","entryComponents","MatSnackBarModule","MAT_SNACK_BAR_DEFAULT_OPTIONS","MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","openFromComponent","component","config","_attach","openFromTemplate","open","message","_config","tslib_1.__assign","_attachSnackBarContainer","overlayRef","userInjector","injector","PortalInjector","WeakMap","containerPortal","ComponentPortal","containerRef","instance","content","userConfig","_createOverlay","container","$implicit","_createInjector","contentRef","observe","Breakpoints","Handset","detachments","matches","overlayElement","_animateSnackBar","announce","overlayConfig","OverlayConfig","positionStrategy","global","isRtl","isLeft","isRight","right","centerHorizontally","bottom","create","Overlay","LiveAnnouncer","Injector","BreakpointObserver","MatSortBase","_MatSortMixinBase","mixinInitialized","sortables","Map","_direction","getSortInvalidDirectionError","sortable","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","set","delete","getNextSortDirection","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","_markInitialized","AnimationDurations","ENTERING","AnimationCurves","STANDARD_CURVE","MatDrawerContent","_container","_contentMarginChanges","[style.margin-left.px]","[style.margin-right.px]","ScrollDispatcher","_focusTrapFactory","_doc","_elementFocusedBeforeDrawerWasOpened","_mode","_disableClose","_autoFocus","openedChange","opened","_isFocusTrapEnabled","_focusTrap","_trapFocus","_restoreFocus","close","stopPropagation","_opened","MatDrawer","onPositionChanged","_modeChanged","mode","focusInitialElementWhenReady","hasMovedFocus","activeEl","activeElement","HTMLElement","focusVia","_openedVia","enabled","destroy","_animationStarted","_animationEnd","isOpen","openedVia","_enableAnimations","matDrawerAnimations","transformDrawer","[@transform]","(@transform.start)","(@transform.done)","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","_openedStream","openedStart","_closedStream","closedStart","_element","_animationMode","backdropClick","_doCheckSubject","_autosize","defaultAutosize","MatDrawerContainer","_backdropOverride","_drawers","drawer","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","_isDrawerOpen","_start","_end","_updateContentMargins","debounceTime","ngDoCheck","_setContainerClass","throwMatDuplicatedDrawerError","_right","_left","_closeModalDrawer","disableClose","_canHaveBackdrop","_isShowingBackdrop","_width","_contentMargins","[class.mat-drawer-container-explicit-backdrop]","ContentChild","_userContent","autosize","MatSidenavContent","scrollDispatcher","ngZone","MatSidenav","_fixedBottomGap","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","fixedInViewport","fixedTopGap","MatSidenavContainer","MatSidenavModule","ScrollingModule","PlatformModule","MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS","disableToggleValue","disableDragValue","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlideToggle","multi","MatSlideToggleChange","checked","MatSlideToggleBase","_MatSlideToggleMixinBase","defaults","_","_uniqueId","_required","_checked","_dragging","toggleChange","dragChange","focusOrigin","_onChangeEvent","_inputElement","_onInputClick","toggle","_getDragPercentage","distance","_thumbBarWidth","_previousChecked","_onDragStart","thumbEl","_thumbEl","_thumbBarEl","clientWidth","_onDrag","_dragPercentage","deltaX","dragX","_onDragEnd","newCheckedValue","_onLabelTextChange","[id]","[attr.tabindex]","[class.mat-checked]","[class.mat-slide-toggle-label-before]","required","MatSlideToggleModule","MatSliderBase","_MatSliderMixinBase","_invert","MAT_PROGRESS_BAR_LOCATION","MatProgressBar","_primaryValueBar","animationEnd","MatProgressBarModule","BASE_SIZE","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY","INDETERMINATE_ANIMATION_TEMPLATE","MatProgressSpinner","platform","animationMode","_fallbackAnimation","_noopAnimations","_forceAnimations","_diameter","EDGE","TRIDENT","diameter","strokeWidth","animationClass","diameters","_attachStyleNode","_strokeWidth","newValue","viewBox","_circleRadius","PI","_strokeCircumference","styleTag","createElement","head","appendChild","sheet","insertRule","_getAnimationText","replace","Set","[style.width.px]","[style.height.px]","[attr.mode]","MatSpinner","MatProgressSpinnerModule","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MatRadioGroup","MatRadioChange","MatRadioGroupBase","_MatRadioGroupMixinBase","_changeDetector","_name","_selected","_isInitialized","_labelPosition","_disabled","_updateRadioButtonNames","_markRadiosForCheck","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_touch","_radios","radio","isAlreadySelected","_markForCheck","MatRadioButton","descendants","MatRadioButtonBase","_MatRadioButtonMixinBase","radioGroup","_radioDispatcher","_removeUniqueSelectionListener","listen","newCheckedState","notify","newDisabledState","_isRippleDisabled","disableRipple","_onInputChange","groupValueChanged","[class.mat-radio-checked]","[class.mat-radio-disabled]","[attr.id]","UniqueSelectionDispatcher","ariaDescribedby","MatRadioModule","box-shadow","MAT_DRAWER_DEFAULT_AUTOSIZE","MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY","activeOptionIndex","activeItemIndex","labelCount","_countGroupLabelsBeforeOption","options","optionGroups","panel","scrollTop","_getOptionScrollPosition","_getItemHeight","MatSelect","_getOptionIndex","option","result","current","_calculateOverlayPosition","itemHeight","items","_getItemCount","panelHeight","scrollContainerHeight","maxScroll","selectedOptionOffset","empty","_selectionModel","scrollBuffer","_scrollTop","_calculateOverlayScroll","_offsetY","_calculateOverlayOffsetY","_checkOverlayWithinViewport","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","_getAriaLabel","placeholder","_getAriaLabelledby","_parentFormField","_hasFloatingLabel","_labelId","_getAriaActiveDescendant","panelOpen","activeItem","_calculateOverlayOffsetX","offsetX","overlayRect","overlayDir","viewportSize","getViewportSize","_isRtl","paddingWidth","multiple","SELECT_MULTIPLE_PANEL_PADDING_X","first","group","leftOverflow","rightOverflow","updatePosition","optionOffsetFromPanelTop","optionHeightAdjustment","_triggerRect","maxOptionsDisplayed","floor","_disableOptionCentering","firstDisplayedIndex","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_transformOrigin","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","_triggerFontSize","setDescribedByIds","ids","_ariaDescribedby","join","onContainerClick","_panelOpen","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","[class.mat-select-empty]","matSelectAnimations","transformPanel","MatFormFieldControl","MAT_OPTION_PARENT_COMPONENT","NgForm","FormGroupDirective","MatFormField","NgControl","Self","MAT_SELECT_SCROLL_STRATEGY","CdkConnectedOverlay","MatOption","MatOptgroup","customTrigger","MatSelectTrigger","disableOptionCentering","compareWith","errorStateMatcher","sortComparator","selectionChange","MatOptionModule","MatFormFieldModule","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","MatSelectModule","matTooltipAnimations","tooltipState","SCROLL_THROTTLE_MS","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY","MAT_TOOLTIP_DEFAULT_OPTIONS","MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY","MatTooltip","_scrollDispatcher","_ariaDescriber","scrollStrategy","_defaultOptions","hammerLoader","showDelay","hideDelay","_message","_manualListeners","_scrollStrategy","elementStyle","hasGestures","window","Hammer","IOS","ANDROID","listener","addEventListener","nodeName","webkitUserSelect","userSelect","msUserSelect","draggable","webkitUserDrag","_updatePosition","_tooltipInstance","removeDescription","_isTooltipVisible","_updateTooltipMessage","describe","_tooltipClass","_setTooltipClass","removeEventListener","clear","delay","_showTimeoutId","_hideTimeoutId","_detach","_portal","TooltipComponent","afterHidden","isVisible","e","ESCAPE","_handleTouchend","touchendHideDelay","strategy","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","scrollableAncestors","getAncestorScrollContainers","withScrollableContainers","positionChanges","scrollableViewProperties","isOverlayClipped","getConfig","_getOrigin","overlay","_getOverlayPosition","withPositions","main","fallback","originPosition","isLtr","originX","originY","getMatTooltipInvalidPositionError","_invertPosition","overlayPosition","overlayX","overlayY","tooltipClass","(touchend)","AriaDescriber","HAMMER_LOADER","_visibility","_closeOnInteraction","_onHide","_isHandset","_animationStart","_animationDone","_handleBodyInteraction","aria-hidden","MatTooltipModule","itemsPerPageLabel","nextPageLabel","previousPageLabel","firstPageLabel","lastPageLabel","getRangeLabel","MatPaginatorIntl","MAT_PAGINATOR_INTL_PROVIDER","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","PageEvent","MatPaginatorBase","_MatPaginatorBase","MatPaginator","_pageIndex","_length","_pageSizeOptions","_hidePageSize","_showFirstLastButtons","_intlChanges","_pageSize","_updateDisplayedPageSizeOptions","p","_initialized","nextPage","hasNextPage","previousPageIndex","_emitPageEvent","previousPage","hasPreviousPage","firstPage","lastPage","getNumberOfPages","maxPageIndex","_changePageSize","_nextButtonsDisabled","_previousButtonsDisabled","pageSizeOptions","_displayedPageSizeOptions","hidePageSize","showFirstLastButtons","MatPaginatorModule","MatProgressBarBase","_MatProgressBarMixinBase","MAT_PROGRESS_BAR_LOCATION_FACTORY","progressbarId","location","_isNoopAnimation","_bufferValue","_animationEndSubscription","path","getPathname","_rectangleFillValue","clamp","emitAnimationEnd","_primaryTransform","_bufferTransform","bufferValue","fromEvent","target","aria-valuemin","aria-valuemax","_appRef","_attached","MatMenuContent","context","_template","_outlet","DomPortalOutlet","_componentFactoryResolver","insertBefore","outletElement","isAttached","ApplicationRef","matMenuAnimations","transformMenu","fadeInItems","MAT_MENU_PANEL","MatMenuItemBase","_MatMenuItemMixinBase","MatMenuItem","_parentMenu","_hovered","_highlighted","_triggersSubmenu","addItem","removeItem","_checkDisabled","_handleMouseEnter","getLabel","textNodeType","TEXT_NODE","output","length_1","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","MAT_MENU_DEFAULT_OPTIONS","MAT_MENU_DEFAULT_OPTIONS_FACTORY","MatMenu","_xPosition","xPosition","_yPosition","yPosition","_items","_itemChanges","_tabSubscription","_classList","_panelAnimationState","backdropClass","_overlapTrigger","overlapTrigger","_hasBackdrop","hasBackdrop","throwMatMenuInvalidPositionX","setPositionClasses","throwMatMenuInvalidPositionY","classes","className","withTypeAhead","tabOut","switchMap","item","parentMenu","setFocusOrigin","focusFirstItem","lazyContent","onStable","resetActiveItem","setElevation","depth","newElevation","customElevation","c","startsWith","_previousElevation","posX","posY","_startAnimation","_resetAnimation","_onAnimationDone","_isAnimating","MAT_MENU_SCROLL_STRATEGY","MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_MENU_SCROLL_STRATEGY_FACTORY","MatMenuTrigger","_menuItemInstance","_menuOpen","_closeSubscription","_hoverSubscription","_menuCloseSubscription","_openedBy","menuOpened","onMenuOpen","menuClosed","onMenuClose","triggersSubmenu","menu","_menu","reason","_destroyMenu","_checkMenu","_handleHover","_cleanUpSubscriptions","toggleMenu","closeMenu","openMenu","_setPosition","_getPortal","menuData","_menuClosingActions","_initMenu","menuOpen","_resetMenu","_setMenuElevation","_setIsMenuOpen","throwMatMenuMissingError","_getOverlayConfig","_subscribeToPositions","keydownEvents","withLockedPosition","connectionPair","originFallbackX","_b","overlayFallbackY","_c","originFallbackY","_d","overlayFallbackX","offsetY","backdrop","parentClose","hover","_handleMousedown","isFakeMousedownFromScreenReader","button","asapScheduler","aria-haspopup","(touchstart)","_deprecatedMatMenuTriggerFor","MatMenuModule","minWidth","fadeInContent","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinErrorState","scrollStrategyFactory","_multiple","_compareWith","o1","o2","_uid","_destroy","_onChange","_onTouched","_optionIds","_panelDoneAnimatingStream","_positions","_focused","controlType","optionSelectionChanges","defer","onSelectionChange","o","valueAccessor","_scrollStrategyFactory","_placeholder","stateChanges","getMatSelectDynamicMultipleError","getMatSelectNonFunctionValueError","_initializeSelection","_id","SelectionModel","_initKeyManager","added","select","removed","deselect","_resetOptions","updateErrorState","getComputedStyle","fontSize","_highlightCorrectOption","_setSelectionByValue","selectedOptions","viewValue","reverse","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","isOpenKey","manager","altKey","A","ctrlKey","hasDeselectedOptions_1","opt","previouslyFocusedIndex","shiftKey","_selectViaInteraction","_onAttached","positionChange","_setPseudoCheckboxPaddingSize","_getPanelTheme","color","pseudoCheckbox","querySelector","isEmpty","getMatSelectNonArrayValueError","currentValue","_selectValue","_sortValues","correspondingOption","error","console","warn","ActiveDescendantKeyManager","withVerticalOrientation","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","isUserInput","_setOptionIds","wasSelected","isSelected","_propagateChanges","options_1","fallbackValue","valueToEmit","MAT_SELECTION_LIST_VALUE_ACCESSOR","MatSelectionList","MatListOption","_MatSelectionListMixinBase","MatLineModule","MatPseudoCheckboxModule","MatList","MatNavList","MatListItem","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatListSubheaderCssMatStyler","MatDividerModule","MatListModule","_isInteractiveList","navList","list","_getListType","_list","hasAttribute","setAttribute","setLines","_lines","[class.mat-list-item-avatar]","[class.mat-list-item-with-avatar]","_avatar","_icon","MatSelectionListBase","MatListOptionBase","_MatListOptionMixinBase","MatSelectionListChange","selectionList","_hasFocus","checkboxPosition","_setSelected","_reportValueChange","hadFocus","newActiveItem","_removeOptionFromList","_text","_handleFocus","_setFocusedOption","_handleBlur","tabindex","[class.mat-list-item-disabled]","[attr.aria-selected]","MatLine","skipPredicate","_tempValues","_setOptionsFromValues","_modelChanges","_i","optionIndex","previousFocusIndex","_toggleFocusedOption","selectAll","deselectAll","_getSelectedOptionValues","values","focusedOption","focusedIndex","hasChanged","aria-multiselectable","MatGridTile","MatGridTileText","MatGridAvatarCssMatStyler","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","TileCoordinator","columnIndex","rowIndex","lastRowMax","tracker","rowCount","update","numColumns","tiles","fill","tile","_trackTile","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","rowspan","row","col","cssCalcAllowedValue","TileStyler","_rows","_rowspan","init","gutterSize","cols","_gutterSize","normalizeUnits","_cols","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","_setStyle","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","test","reset","_setListStyle","_tiles","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","FitTileStyler","gutterHeightPerTile","MatGridList","_gutter","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","rowHeight","_tileStyler","_tileCoordinator","_gridList","MAT_GRID_LIST","MatGridListModule","SvgIconConfig","svgElement","url","MatIconRegistry","_httpClient","_sanitizer","_svgIconConfigs","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","iconName","addSvgIconInNamespace","addSvgIconLiteral","literal","addSvgIconLiteralInNamespace","namespace","_addSvgIconConfig","sanitizedLiteral","sanitize","SecurityContext","HTML","getMatIconFailedToSanitizeLiteralError","_createSvgElementForSingleIcon","addSvgIconSet","addSvgIconSetInNamespace","addSvgIconSetLiteral","addSvgIconSetLiteralInNamespace","_addSvgIconSetConfig","_svgElementFromString","registerFontClassAlias","alias","classNameForFontAlias","setDefaultFontSetClass","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","RESOURCE_URL","getMatIconFailedToSanitizeUrlError","cachedIcon","cloneSvg","_loadSvgIconFromConfig","tap","svg","getNamedSvgIcon","iconKey","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","observableThrow","getMatIconNameNotFoundError","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","catchError","err","forkJoin","foundIcon","_extractSvgIconFromSet","_fetchUrl","svgText","responseText","_setSvgAttributes","iconSet","iconSource","iconElement","cloneNode","removeAttribute","_toSvgElement","str","div","innerHTML","ELEMENT_NODE","getMatIconNoHttpProviderError","inProgressFetch","req","responseType","finalize","share","configNamespace","HttpClient","DomSanitizer","ICON_REGISTRY_PROVIDER","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","_MatIconMixinBase","MAT_ICON_LOCATION","MAT_ICON_LOCATION_FACTORY","funcIriAttributes","ɵ0","attr","funcIriAttributeSelector","funcIriPattern","MatIcon","_iconRegistry","ariaHidden","_location","_inline","inline","_fontSet","_cleanupFontValue","_fontIcon","_splitIconName","parts","svgIcon","_setSvgElement","log","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","ngAfterViewChecked","cachedElements","_elementsWithExternalReferences","newPath","_previousPath","_prependPathToReferences","styleTags","querySelectorAll","_cacheChildrenWithExternalReferences","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","_previousFontSetClass","fontIcon","_previousFontIconClass","elements","attrs","elementsWithFuncIri","elementWithReference","getAttribute","match","attributes","[class.mat-icon-inline]","MatListBase","_MatListMixinBase","MatListItemBase","_MatListItemMixinBase","MatDatepickerContent","_dateAdapter","createMissingDateImplError","MatDatepicker","_datepickerInput","_getThemePalette","_disabledChange","_inputSubscription","_popupRef","_popupComponentRef","sameDate","_selectedChanged","date","_valueChange","_focusedElementBeforeOpen","touchUi","_openAsDialog","_openAsPopup","openedStream","_dialogRef","_calendarPortal","completeClose","closedStream","_dialog","afterClosed","componentInstance","datepicker","_setColor","_createPopup","MatDialog","MAT_DATEPICKER_SCROLL_STRATEGY","DateAdapter","calendarHeaderComponent","startAt","yearSelected","monthSelected","dateClass","MAT_DATEPICKER_VALUE_ACCESSOR","MatDatepickerInput","MAT_DATEPICKER_VALIDATORS","NG_VALIDATORS","MatDatepickerInputEvent","targetElement","_dateFormats","_formField","dateChange","dateInput","_cvaOnChange","_validatorOnChange","_datepickerSubscription","_localeSubscription","_parseValidator","_lastValueValid","matDatepickerParse","text","_minValidator","controlValue","_getValidDateOrNull","deserialize","compareDate","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_filterValidator","_dateFilter","matDatepickerFilter","_validator","Validators","compose","localeChanges","_datepicker","_registerInput","isValid","oldDate","_formatValue","registerOnValidatorChange","validate","getPopupConnectionElementRef","getConnectedOverlayOrigin","isAltDownArrow","readOnly","_onInput","parse","format","display","isDateInstance","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","MAT_DATE_FORMATS","matDatepicker","MatDatepickerToggleIcon","MatDatepickerToggle","defaultTabIndex","parsedTabIndex","_watchStateChanges","datepickerDisabled","inputDisabled","datepickerToggled","[class.mat-accent]","[class.mat-warn]","_customIcon","MatDialogModule","MatCalendar","MatCalendarBody","MatMonthView","MatYearView","MatMultiYearView","MatCalendarHeader","MatDatepickerIntl","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER","MatDatepickerModule","_inset","MatDivider","[class.mat-divider-vertical]","[class.mat-divider-horizontal]","[class.mat-divider-inset]","MAT_ACCORDION","matExpansionAnimations","indicatorRotate","expansionHeaderHeight","params","collapsedHeight","expandedHeight","bodyExpansion","MatExpansionPanelContent","uniqueId","MatExpansionPanel","accordion","_uniqueSelectionDispatcher","_hideToggle","afterExpand","afterCollapse","_inputChanges","_headerId","_bodyAnimationDone","hideToggle","_hasSpacing","expanded","displayMode","_getExpandedState","_lazyContent","_containsFocus","_body","focusedElement","bodyElement","outputs","[class.mat-expanded]","[class.mat-expansion-panel-spacing]","MatExpansionPanelActionRow","MatExpansionPanelHeader","_parentChangeSubscription","accordionHideToggleChange","_handleHeaderFocus","_toggle","_isExpanded","_getPanelId","_showToggle","_keydown","metaKey","_handleHeaderKeydown","[attr.aria-controls]","[@expansionHeight]","MatExpansionPanelDescription","MatExpansionPanelTitle","MatAccordion","_headers","header","CdkAccordion","CdkAccordionModule","MatExpansionModule","_colspan","property","todayValue","selectedValue","labelMinRequiredCells","numCols","activeCell","cellAspectRatio","selectedValueChange","selectedChange","_userSelection","activeDateChange","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","_weekdays","concat","_activeDate","today","oldActiveDate","validDate","clampDate","minDate","maxDate","_hasSameMonthAndYear","_init","_selectedDate","_getDateInCurrentMonth","_minDate","_maxDate","_dateSelected","selectedYear","getYear","activeDate","selectedMonth","getMonth","selectedDate","createDate","_handleCalendarBodyKeydown","addCalendarDays","getDate","getNumDaysInMonth","addCalendarYears","addCalendarMonths","dateFilter","_focusActiveCell","_todayDate","_monthLabel","getMonthNames","toLocaleUpperCase","firstOfMonth","_firstWeekOffset","getDayOfWeek","_createWeekCells","_matCalendarBody","daysInMonth","dateNames","getDateNames","_weeks","cell","_shouldEnableDate","dateA11yLabel","cellClasses","MatCalendarCell","d1","d2","_selectedYear","_todayYear","activeYear","activeOffset","_years","year","_createCellForYear","_yearSelected","month","yearsPerPage","_getActiveCell","yearName","getYearName","_shouldEnableYear","firstOfYear","_selectedMonth","_getMonthInCurrentYear","_monthSelected","normalizedDate","_todayMonth","_yearLabel","monthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","_shouldEnableMonth","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","maxYear","maxMonth","minYear","minMonth","calendar","currentView","monthYearLabel","switchToMultiYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","multi-year","prevMultiYearLabel","nextMonthLabel","nextYearLabel","nextMultiYearLabel","currentPeriodClicked","previousClicked","nextClicked","previousEnabled","_isSameView","nextEnabled","date1","date2","_moveFocusOnNextTick","_currentView","startView","focusActiveCell","view","_getCurrentViewComponent","monthView","headerComponent","yearView","multiYearView","matDatepickerAnimations","fadeInCalendar","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY","MatDatepickerContentBase","_MatDatepickerContentMixinBase","_calendar","[@transformPanel]","[class.mat-datepicker-content-touch]","MatChipList","ariaOrientation","selectable","chips","MatChip","MatChipInput","focused","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","registerInput","_emitChipEnd","_blur","addOnBlur","_focus","_isSeparatorKey","separators","[attr.placeholder]","MAT_CHIPS_DEFAULT_OPTIONS","chipList","CHIP_DECLARATIONS","MatChipRemove","MatChipAvatar","MatChipTrailingIcon","useValue","MatChipsModule","MatDialogConfig","maxWidth","ariaDescribedBy","autoFocus","restoreFocus","closeOnNavigation","animationBody","matDialogAnimations","dialogContainer","slideDialog","MatDialogContainer","_elementFocusedBeforeDialogWasOpened","_state","_animationStateChanged","_ariaLabelledBy","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","toFocus","_onAnimationStart","_startExitAnimation","aria-modal","[@dialogContainer]","(@dialogContainer.start)","(@dialogContainer.done)","MatDialogRef","_containerInstance","_afterClosed","_beforeClosed","phaseName","_result","dialogResult","detachBackdrop","beforeClosed","_getPositionStrategy","centerVertically","updateSize","afterOpen","beforeClose","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenedAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","componentOrTemplateRef","_applyConfigDefaults","getDialogById","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","_closeDialogs","dialog","dialogConfig","maxHeight","disposeOnNavigation","injectionTokens","previousValue","overlayContainer","getContainerElement","parentElement","siblings","sibling","dialogs","Location","OverlayContainer","dialogElementUid","MatDialogClose","getClosestDialog","proxiedChange","_matDialogClose","MatDialogTitle","MatDialogContent","MatDialogActions","MatTextareaAutosize","minRows","maxRows","rows","matAutosizeMinRows","matAutosizeMaxRows","matAutosize","matTextareaAutosize","CdkTextareaAutosize","MAT_INPUT_INVALID_TYPES","MatInputBase","_MatInputMixinBase","MatInput","inputValueAccessor","_autofillMonitor","_isServer","_isNativeSelect","autofilled","_type","_readonly","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","el","selectionStart","selectionEnd","setSelectionRange","_validateType","_isTextarea","isAutofilled","_dirtyCheckNativeValue","isFocused","readonly","getMatInputUnsupportedTypeError","_isNeverEmpty","_isBadInput","validity","badInput","selectElement","[class.mat-input-server]","[required]","[attr.readonly]","AutofillMonitor","TextFieldModule","MatInputModule","calendarLabel","openCalendarLabel","displayValue","cssClasses","_cellClicked","_isActiveCell","cellNumber","_firstRowOffset","aria-readonly","MatCheckbox","Init","Checked","Unchecked","Indeterminate","TransitionCheckState","MatCheckboxChange","MatCheckboxBase","_MatCheckboxMixinBase","_clickAction","indeterminateChange","_currentAnimationClass","_currentCheckState","_indeterminate","_calculateRippleRadius","changed","_transitionCheckState","_getAriaChecked","indeterminate","newState","oldState","_getAnimationClassForCheckStateTransition","animationClass_1","_onInteractionEvent","animSuffix","calculatedRippleRadius","rippleWidth","ripple","radius","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MAT_CHECKBOX_CLICK_ACTION","MatRipple","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","MatCheckboxModule","MatChipSelectionChange","MatChipBase","_MatChipMixinBase","CHIP_ATTRIBUTE_NAMES","rippleConfig","chipListSelectable","_selectable","_removable","destroyed","_addHostClassName","_chipRipple","RippleRenderer","coercedValue","_dispatchSelectionChange","CHIP_ATTRIBUTE_NAMES_1","tagName","chip","_removeTriggerEvents","selectViaInteraction","toggleSelected","removable","DELETE","BACKSPACE","[class.mat-chip-selected]","[class.mat-chip-with-avatar]","[class.mat-chip-with-trailing-icon]","[class.mat-chip-disabled]","avatar","trailingIcon","removeIcon","_parentChip","MatChipListBase","_MatChipListMixinBase","MatChipListChange","_lastDestroyedChipIndex","_tabIndex","_userTabIndex","_chipInput","_hasFocusedChip","_resetChips","_updateTabIndex","_updateFocusForDestroyedChips","_dropSubscriptions","inputElement","_originatesFromChip","_focusInput","_isInputEmpty","newChipIndex","_clearSelection","correspondingChip","skip","_markAsTouched","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","_chipRemoveSubscription","chipSelectionChanges","chipFocusChanges","chipIndex","chipBlurChanges","chipRemoveChanges","currentElement","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","[class.mat-chip-list-required]","MatButton","stopImmediatePropagation","MatAnchor","MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","MatButtonToggleGroupMultiple","_uniqueIdCounter","MatButtonToggleChange","defaultOptions","appearance","_buttonToggles","_syncButtonToggle","_isSelected","_isPrechecked","_rawValue","[class.mat-button-toggle-vertical]","[class.mat-button-toggle-group-appearance-standard]","MatButtonToggle","MatButtonToggleBase","_MatButtonToggleMixinBase","toggleGroup","_isSingleSelector","buttonToggleGroup","_appearance","_buttonElement","_onButtonClick","newChecked","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","[class.mat-button-toggle-appearance-standard]","MatButtonToggleModule","MatCardContent","MatCardTitle","MatCardSubtitle","align","[class.mat-card-actions-align-end]","MatCardActions","MatCardFooter","MatCardImage","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardXlImage","MatCardAvatar","MatCard","MatCardHeader","MatCardTitleGroup","MatCardModule","MatAutocomplete","_autoActiveFirstOption","_setVisibility","_setScrollTop","_getScrollTop","showPanel","_emitSelectEvent","MatAutocompleteSelectedEvent","optionSelected","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","autoActiveFirstOption","panelWidth","MatAutocompleteOrigin","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","_zone","_componentDestroyed","_autocompleteDisabled","_manuallyFloatingLabel","_viewportSubscription","_canOpenOnNextFocus","_closeKeyEventStream","_windowBlurHandler","autocompleteAttribute","_overlayAttached","optionSelections","autocomplete","_destroyPanel","openPanel","_attachOverlay","_floatLabel","closePanel","_resetLabel","_isOpen","_closingActionsSubscription","_getOutsideClickStream","MatOptionSelectionChange","clickTarget","formField","_setTriggerValue","activeOption","_resetActiveItem","prevActiveItem","TAB","_canOpen","_scrollToOption","_handleInput","_previousValue","shouldAnimate","floatLabel","_animateAndLockLabel","newScrollPosition","_subscribeToClosingActions","firstStable","optionChanges","_positionStrategy","reapplyLastPosition","panelClosingActions","_setValueAndClose","toDisplay","inputValue","_control","_clearPreviousSelectedOption","getMatAutocompleteMissingPanelError","_getPanelWidth","wasOpen","_getConnectedElement","withPush","connectedTo","_getHostWidth","[attr.autocomplete]","[attr.aria-autocomplete]","(focusin)","Host","autocompleteDisabled","MatAutocompleteModule","MatBadgeBase","_MatBadgeMixinBase","MatBadge","_renderer","_hasContent","_color","_overlap","val","_updateTextContent","_description","newDescription","_updateHostAriaDescription","_hidden","isAbove","isAfter","description","_badgeElement","_createBadgeElement","rootNode","badgeElement","oldDescription","colorPalette","[class.mat-badge-overlap]","[class.mat-badge-above]","[class.mat-badge-below]","[class.mat-badge-before]","[class.mat-badge-after]","[class.mat-badge-small]","[class.mat-badge-medium]","[class.mat-badge-large]","[class.mat-badge-hidden]","[class.mat-badge-disabled]","Renderer2","overlap","hidden","MatBadgeModule","MAT_BOTTOM_SHEET_DATA","MatBottomSheetConfig","matBottomSheetAnimations","bottomSheetState","COMPLEX","ACCELERATION_CURVE","EXITING","DECELERATION_CURVE","MatBottomSheetContainer","breakpointObserver","bottomSheetConfig","_elementFocusedBeforeOpened","_breakpointSubscription","Medium","Large","XLarge","_toggleClass","isMatched","_validatePortalAttached","_setPanelClass","(@state.start)","FocusTrapFactory","MatBottomSheetModule","MatBottomSheetRef","MAT_BOTTOM_SHEET_DEFAULT_OPTIONS","MatBottomSheet","_parentBottomSheet","_bottomSheetRefAtThisLevel","_openedBottomSheetRef","_attachContainer","ref","bottomSheetRef","scrollStrategies","block","DEFAULT_ROUND_BUTTON_COLOR","BUTTON_HOST_ATTRIBUTES","MatButtonBase","_MatButtonMixinBase","isRoundButton","_hasHostAttributes","isIconButton","BUTTON_HOST_ATTRIBUTES_1","attribute","_active","_emitSelectionChangeEvent","setActiveStyles","setInactiveStyles","_mostRecentViewValue","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]","MAT_LABEL_GLOBAL_OPTIONS","MatError","matFormFieldAnimations","transitionMessages","[class.mat-right]","MatHint","MatLabel","MatPlaceholder","MatPrefix","MatSuffix","MatFormFieldBase","_MatFormFieldMixinBase","MAT_FORM_FIELD_DEFAULT_OPTIONS","labelOptions","_defaults","_outlineGapCalculationNeeded","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_labelOptions","float","_animationsEnabled","_updateOutlineGapOnStable","_hideRequiredMarker","_processHints","_connectionContainerRef","_validateControlChild","_validatePlaceholders","_syncDescribedByIds","valueChanges","_prefixChildren","_suffixChildren","_hintChildren","_errorChildren","updateOutlineGap","_shouldForward","prop","_hasPlaceholder","_placeholderChild","_hasLabel","_labelChild","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_getDisplayedMessages","errorState","_label","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","hintLabel","getMatFormFieldDuplicatedHintError","startHint","endHint","getMatFormFieldMissingControlError","labelEl","startWidth","gapWidth","startEls","gapEls","containerStart","_getStartEnd","labelStart","labelWidth","outlineGapPadding","rect","[class.mat-form-field-appearance-standard]","[class.mat-form-field-appearance-fill]","[class.mat-form-field-appearance-outline]","[class.mat-form-field-appearance-legacy]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-form-field-autofilled]","[class.mat-focused]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","hideRequiredMarker","underlineRef","_inputContainerRef","_uniqueAutocompleteIdCounter","MatAutocompleteBase","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","__extends","d","__","constructor","extendStatics","MATERIAL_SANITY_CHECKS_FACTORY","base","class_1","defaultColor","_disableRipple","matcher","_pendingSubscribers","Observable","subscriber","_notifySubscriber","MAT_DATE_LOCALE_FACTORY","inject","LOCALE_ID","range","valueFunction","valuesArray","lines","setClass","isAdd","enforceStyleRecalculation","getPropertyValue","distanceToFurthestCorner","distX","distY","sqrt","optionsArray","groups","groupCounter","optionOffset","optionHeight","currentScrollPosition","reposition","MAT_DIALOG_SCROLL_STRATEGY_FACTORY","provider","exp","parentRegistry","httpClient","sanitizer","pathname","search","scrollThrottle","parentIntl","sortOrder","setPrototypeOf","__proto__","__assign","assign","s","n","SHARP_CURVE","MATERIAL_SANITY_CHECKS","_sanityChecksEnabled","_hammerLoader","_hasDoneGlobalChecks","_hasCheckedHammer","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","__karma__","jasmine","doctype","body","testElement","computedStyle","_checkHammerIsAvailable","BidiModule","Boolean","MAT_DATE_LOCALE","MAT_DATE_LOCALE_PROVIDER","_localeChanges","setLocale","locale","second","firstValid","secondValid","SUPPORTS_INTL_API","Intl","DEFAULT_MONTH_NAMES","short","DEFAULT_DATE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","NativeDateAdapter","matDateLocale","useUtcForDisplay","_clampDate","getFullYear","getDay","dtf_1","DateTimeFormat","timeZone","_stripDirectionalityCharacters","_format","Date","dtf_2","day","dtf_3","weekday","dtf","_createDateWithOverflow","clone","displayFormat","setFullYear","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","isNaN","getTime","NaN","UTC","getHours","getMinutes","getSeconds","getMilliseconds","MAT_NATIVE_DATE_FORMATS","NativeDateModule","MatNativeDateModule","ShowOnDirtyErrorStateMatcher","dirty","submitted","touched","MAT_HAMMER_OPTIONS","ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES","ɵ1","noopHammerInstance","on","off","_hammerOptions","commonModule","events","buildHammer","hammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","MatLineSetter","FADING_IN","VISIBLE","FADING_OUT","HIDDEN","RippleState","RippleRef","fadeOut","fadeOutRipple","defaultRippleAnimationConfig","enterDuration","exitDuration","ignoreMouseEventsTimeout","passiveEventOptions","normalizePassiveListenerOptions","passive","_target","_isPointerDown","_triggerEvents","_activeRipples","onMousedown","isFakeMousedown","isSyntheticEvent","_lastTouchStartEvent","now","rippleDisabled","fadeInRipple","onTouchStart","touches","changedTouches","onPointerUp","persistent","_containerElement","containerRect","_containerRect","animationConfig","centered","transitionDuration","rippleRef","_mostRecentTransientRipple","runTimeoutOutsideZone","isMostRecentTransientRipple","wasActive","rippleEl","fadeOutAll","_triggerElement","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","_trigger","launch","configOrX","[class.mat-ripple-unbounded]","unbounded","MatPseudoCheckbox","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter","[class.mat-optgroup-disabled]","_parent"],"mappings":"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"}