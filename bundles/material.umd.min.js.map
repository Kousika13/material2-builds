{"version":3,"file":"material.umd.min.js","sources":["../../src/lib/tooltip/tooltip.ts","../../src/lib/tabs/tab-header.ts","../../src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/lib/tabs/tabs-module.ts","../../src/lib/toolbar/toolbar.ts","../../src/lib/toolbar/toolbar-module.ts","../../src/lib/tree/outlet.ts","../../src/lib/tree/node.ts","../../src/lib/tree/padding.ts","../../src/lib/tree/tree.ts","../../src/lib/tree/toggle.ts","../../src/lib/tree/tree-module.ts","../../src/lib/tree/data-source/flat-data-source.ts","../../src/lib/tree/data-source/nested-data-source.ts","../../src/lib/version.ts","../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/core/testing/month-constants.ts","../../src/lib/expansion/expansion-animations.ts","../../src/lib/select/select.ts","../../src/lib/stepper/step-header.ts","../../src/lib/stepper/stepper-animations.ts","../../src/lib/stepper/stepper-icon.ts","../../src/lib/stepper/stepper.ts","../../src/lib/stepper/stepper-button.ts","../../src/lib/stepper/stepper-module.ts","../../src/lib/table/table.ts","../../src/lib/table/cell.ts","../../src/lib/table/row.ts","../../src/lib/table/table-module.ts","../../src/lib/table/table-data-source.ts","../../src/lib/tabs/ink-bar.ts","../../src/lib/tabs/tab-label.ts","../../src/lib/tabs/tab-content.ts","../../src/lib/tabs/tab.ts","../../src/lib/tabs/tabs-animations.ts","../../src/lib/tabs/tab-body.ts","../../src/lib/tabs/tab-group.ts","../../src/lib/tabs/tab-label-wrapper.ts","../../src/lib/slider/slider.ts","../../src/lib/slider/slider-module.ts","../../src/lib/snack-bar/snack-bar-ref.ts","../../src/lib/snack-bar/snack-bar-config.ts","../../src/lib/snack-bar/snack-bar-animations.ts","../../src/lib/snack-bar/simple-snack-bar.ts","../../src/lib/snack-bar/snack-bar-container.ts","../../src/lib/snack-bar/snack-bar.ts","../../src/lib/snack-bar/snack-bar-module.ts","../../src/lib/sort/sort.ts","../../src/lib/sort/sort-header-intl.ts","../../src/lib/sort/sort-animations.ts","../../src/lib/sort/sort-header.ts","../../src/lib/sort/sort-module.ts","../../src/lib/stepper/step-label.ts","../../src/lib/stepper/stepper-intl.ts","../../src/lib/sidenav/sidenav.ts","../../src/lib/sidenav/sidenav-module.ts","../../src/lib/slide-toggle/slide-toggle.ts","../../src/lib/slide-toggle/slide-toggle-module.ts","../../src/lib/progress-spinner/progress-spinner.ts","../../src/lib/progress-spinner/progress-spinner-module.ts","../../src/lib/radio/radio.ts","../../src/lib/radio/radio-module.ts","../../src/lib/sidenav/drawer-animations.ts","../../src/lib/sidenav/drawer.ts","../../src/lib/select/select-module.ts","../../src/lib/tooltip/tooltip-animations.ts","../../src/lib/tooltip/tooltip-module.ts","../../src/lib/paginator/paginator-intl.ts","../../src/lib/paginator/paginator.ts","../../src/lib/paginator/paginator-module.ts","../../src/lib/progress-bar/progress-bar.ts","../../src/lib/progress-bar/progress-bar-module.ts","../../src/lib/menu/menu-directive.ts","../../src/lib/menu/menu-trigger.ts","../../src/lib/menu/menu-module.ts","../../src/lib/select/select-animations.ts","../../src/lib/list/selection-list.ts","../../src/lib/list/list-module.ts","../../src/lib/menu/menu-content.ts","../../src/lib/menu/menu-animations.ts","../../src/lib/menu/menu-item.ts","../../src/lib/list/list.ts","../../src/lib/icon/icon-registry.ts","../../src/lib/icon/icon.ts","../../src/lib/icon/icon-module.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-module.ts","../../src/lib/divider/divider.ts","../../src/lib/divider/divider-module.ts","../../src/lib/expansion/accordion.ts","../../src/lib/expansion/expansion-panel-content.ts","../../src/lib/expansion/expansion-panel.ts","../../src/lib/expansion/expansion-panel-header.ts","../../src/lib/expansion/expansion-module.ts","../../src/lib/grid-list/grid-tile.ts","../../src/lib/grid-list/tile-coordinator.ts","../../src/lib/grid-list/tile-styler.ts","../../src/lib/grid-list/grid-list.ts","../../src/lib/grid-list/grid-list-module.ts","../../src/lib/datepicker/multi-year-view.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/datepicker/calendar.ts","../../src/lib/datepicker/datepicker-animations.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/dialog/dialog-container.ts","../../src/lib/dialog/dialog-ref.ts","../../src/lib/dialog/dialog.ts","../../src/lib/dialog/dialog-content-directives.ts","../../src/lib/dialog/dialog-module.ts","../../src/lib/input/autosize.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/input.ts","../../src/lib/input/input-module.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/chips/chip.ts","../../src/lib/chips/chip-default-options.ts","../../src/lib/chips/chip-list.ts","../../src/lib/chips/chip-input.ts","../../src/lib/chips/chips-module.ts","../../src/lib/dialog/dialog-config.ts","../../src/lib/dialog/dialog-animations.ts","../../src/lib/button/button.ts","../../src/lib/button/button-module.ts","../../src/lib/button-toggle/button-toggle.ts","../../src/lib/button-toggle/button-toggle-module.ts","../../src/lib/card/card.ts","../../src/lib/card/card-module.ts","../../src/lib/checkbox/checkbox-config.ts","../../src/lib/autocomplete/autocomplete-module.ts","../../src/lib/badge/badge.ts","../../src/lib/badge/badge-module.ts","../../src/lib/bottom-sheet/bottom-sheet-config.ts","../../src/lib/bottom-sheet/bottom-sheet-ref.ts","../../src/lib/bottom-sheet/bottom-sheet-animations.ts","../../src/lib/bottom-sheet/bottom-sheet-container.ts","../../src/lib/bottom-sheet/bottom-sheet.ts","../../src/lib/bottom-sheet/bottom-sheet-module.ts","../../src/lib/core/option/option.ts","../../src/lib/core/option/index.ts","../../src/lib/core/label/label-options.ts","../../src/lib/form-field/error.ts","../../src/lib/form-field/form-field-animations.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/label.ts","../../src/lib/form-field/placeholder.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field-module.ts","../../src/lib/autocomplete/autocomplete.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/disable-ripple.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/core/common-behaviors/initialized.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/grid-list/grid-list-measure.ts","../../src/lib/menu/menu-errors.ts","../../src/lib/select/select-errors.ts","../../src/lib/sort/sort-errors.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/datetime/date-formats.ts","../../src/lib/core/datetime/native-date-formats.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/line/line.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/option/optgroup.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {BreakpointObserver, Breakpoints, BreakpointState} from '@angular/cdk/layout';\nimport {\n  ConnectionPositionPair,\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConnectionPosition,\n  OverlayRef,\n  ScrollDispatcher,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject, Observable} from 'rxjs';\nimport {matTooltipAnimations} from './tooltip-animations';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/** Creates an error to be thrown if the user supplied an invalid tooltip position. */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy', {\n      providedIn: 'root',\n      factory: () => {\n        const overlay = inject(Overlay);\n        return () => overlay.scrollStrategies.reposition({scrollThrottle: SCROLL_THROTTLE_MS});\n      }\n    });\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options', {\n      providedIn: 'root',\n      factory: () => ({\n        showDelay: 0,\n        hideDelay: 0,\n        touchendHideDelay: 1500,\n      })\n    });\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.google.com/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': '_handleTouchend()',\n  },\n})\nexport class MatTooltip implements OnDestroy {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _portal: ComponentPortal<TooltipComponent>;\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      if (this._overlayRef) {\n        this._updatePosition();\n        this._tooltipInstance!.show(value, 0);\n        this._overlayRef.updatePosition();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay = this._defaultOptions.showDelay;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay = this._defaultOptions.hideDelay;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, Function>();\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    private _platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) private _scrollStrategy,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions: MatTooltipDefaultOptions) {\n\n    const element: HTMLElement = _elementRef.nativeElement;\n\n    // The mouse events shouldn't be bound on iOS devices, because\n    // they can prevent the first tap from firing its click event.\n    if (!_platform.IOS) {\n      this._manualListeners.set('mouseenter', () => this.show());\n      this._manualListeners.set('mouseleave', () => this.hide());\n\n      this._manualListeners\n        .forEach((listener, event) => _elementRef.nativeElement.addEventListener(event, listener));\n    } else if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS, because it will prevent users from typing in inputs. If\n      // we're on iOS and the tooltip is attached on an input or textarea, we clear\n      // the `user-select` to avoid these issues.\n      element.style.webkitUserSelect = element.style.userSelect = '';\n    }\n\n    _focusMonitor.monitor(element).pipe(takeUntil(this._destroyed)).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin !== 'program') {\n        _ngZone.run(() => this.show());\n      }\n    });\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._tooltipInstance = null;\n    }\n\n    // Clean up the event listeners set in the constructor\n    if (!this._platform.IOS) {\n      this._manualListeners.forEach((listener, event) =>\n        this._elementRef.nativeElement.removeEventListener(event, listener));\n\n      this._manualListeners.clear();\n    }\n\n    this._destroyed.next();\n    this._destroyed.complete();\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message) { return; }\n\n    const overlayRef = this._createOverlay();\n\n    this._detach();\n    this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    this._tooltipInstance = overlayRef.attach(this._portal).instance;\n    this._tooltipInstance.afterHidden()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(this._position, delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Handles the touchend events on the host element. */\n  _handleTouchend() {\n    this.hide(this._defaultOptions.touchendHideDelay);\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    if (this._overlayRef) {\n      return this._overlayRef;\n    }\n\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n    const direction = this._dir ? this._dir.value : 'ltr';\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay.position()\n      .flexibleConnectedTo(this._elementRef)\n      .withFlexibleHeight(false)\n      .withFlexibleWidth(false)\n      .withViewportMargin(8)\n      .withPositions([\n        {...origin.main, ...overlay.main},\n        {...origin.fallback, ...overlay.fallback}\n      ]);\n\n    const scrollableAncestors = this._scrollDispatcher\n      .getAncestorScrollContainers(this._elementRef);\n\n    strategy.withScrollableContainers(scrollableAncestors);\n\n    strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        } else {\n          // Otherwise recalculate the origin based on the new position.\n          this._tooltipInstance._setTransformOrigin(change.connectionPair, direction);\n        }\n      }\n    });\n\n    this._overlayRef = this._overlay.create({\n      direction,\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._overlayRef.detachments()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n\n    return this._overlayRef;\n  }\n\n  /** Detaches the currently-attached tooltip. */\n  private _detach() {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /** Updates the position of the current tooltip. */\n  private _updatePosition() {\n    const position =\n        this._overlayRef!.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    position\n      .withPositions([\n        {...origin.main, ...overlay.main},\n        {...origin.fallback, ...overlay.fallback}\n      ]);\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let originPosition: OriginConnectionPosition;\n\n    if (position == 'above' || position == 'below') {\n      originPosition = {originX: 'center', originY: position == 'above' ? 'top' : 'bottom'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      originPosition = {originX: 'start', originY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      originPosition = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(originPosition.originX, originPosition.originY);\n\n    return {\n      main: originPosition,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let overlayPosition: OverlayConnectionPosition;\n\n    if (position == 'above') {\n      overlayPosition = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (position == 'below') {\n      overlayPosition = {overlayX: 'center', overlayY: 'top'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      overlayPosition = {overlayX: 'end', overlayY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      overlayPosition = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n    return {\n      main: overlayPosition,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(\n        take(1),\n        takeUntil(this._destroyed)\n      ).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** The transform origin used in the animation for showing and hiding the tooltip */\n  _transformOrigin: 'top' | 'bottom' | 'left' | 'right' = 'bottom';\n\n  /** Current position of the tooltip. */\n  private _position: TooltipPosition;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private readonly _onHide: Subject<any> = new Subject();\n\n  /** Stream that emits whether the user has a handset-sized display.  */\n  _isHandset: Observable<BreakpointState> = this._breakpointObserver.observe(Breakpoints.Handset);\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _breakpointObserver: BreakpointObserver) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param position Position of the tooltip.\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(position: TooltipPosition, delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._position = position;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  /** Sets the tooltip transform origin according to the position of the tooltip overlay. */\n  _setTransformOrigin(overlayPosition: ConnectionPositionPair, direction: Direction) {\n    const axis = (this._position === 'above' || this._position === 'below') ? 'Y' : 'X';\n    const position = axis == 'X' ? overlayPosition.overlayX : overlayPosition.overlayY;\n\n    if (position === 'top' || position === 'bottom') {\n      this._transformOrigin = position;\n    } else if (position === 'start') {\n      this._transformOrigin = direction === 'ltr' ? 'left' : 'right';\n    } else if (position === 'end') {\n      this._transformOrigin = direction === 'ltr' ? 'right' : 'left';\n    } else {\n      throw getMatTooltipInvalidPositionError(this._position);\n    }\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      this._closeOnInteraction = true;\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.google.com/components/tooltips.html#tooltips-interaction\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {ENTER, LEFT_ARROW, RIGHT_ARROW, SPACE, HOME, END} from '@angular/cdk/keycodes';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, mixinDisableRipple} from '@angular/material/core';\nimport {merge} from 'rxjs';\nimport {of as observableOf} from 'rxjs';\nimport {Subscription} from 'rxjs';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\n\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n// Boilerplate for applying mixins to MatTabHeader.\n/** @docs-private */\nexport class MatTabHeaderBase {}\nexport const _MatTabHeaderMixinBase = mixinDisableRipple(MatTabHeaderBase);\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends _MatTabHeaderMixinBase\n    implements AfterContentChecked, AfterContentInit, OnDestroy, CanDisableRipple {\n\n  @ContentChildren(MatTabLabelWrapper) _labelWrappers: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer') _tabListContainer: ElementRef;\n  @ViewChild('tabList') _tabList: ElementRef;\n\n  /** The tab index that is focused. */\n  private _focusIndex: number = 0;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Combines listeners that will re-align the ink bar whenever they're invoked. */\n  private _realignInkBar = Subscription.EMPTY;\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  private _selectedIndex: number = 0;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number { return this._selectedIndex; }\n  set selectedIndex(value: number) {\n    value = coerceNumberProperty(value);\n    this._selectedIndexChanged = this._selectedIndex != value;\n    this._selectedIndex = value;\n    this._focusIndex = value;\n  }\n\n  /** Event emitted when the option is selected. */\n  @Output() readonly selectFocusedIndex = new EventEmitter();\n\n  /** Event emitted when a label is focused. */\n  @Output() readonly indexFocused = new EventEmitter();\n\n  constructor(private _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() private _dir: Directionality) {\n    super();\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this._updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case RIGHT_ARROW:\n        this._focusNextTab();\n        break;\n      case LEFT_ARROW:\n        this._focusPreviousTab();\n        break;\n      case HOME:\n        this._focusFirstTab();\n        event.preventDefault();\n        break;\n      case END:\n        this._focusLastTab();\n        event.preventDefault();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        event.preventDefault();\n        break;\n    }\n  }\n\n  /**\n   * Aligns the ink bar to the selected tab on load.\n   */\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this._updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n    this._realignInkBar = merge(dirChange, resize).subscribe(realign);\n  }\n\n  ngOnDestroy() {\n    this._realignInkBar.unsubscribe();\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    this._updatePagination();\n    this._alignInkBarToSelectedTab();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Updating the view whether pagination should be enabled or not\n   */\n  _updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this._focusIndex == value) { return; }\n\n    this._focusIndex = value;\n    this.indexFocused.emit(value);\n    this._setTabFocus(value);\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number { return this._focusIndex; }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /**\n   * Moves the focus towards the beginning or the end of the list depending on the offset provided.\n   * Valid offsets are 1 and -1.\n   */\n  _moveFocus(offset: number) {\n    if (this._labelWrappers) {\n      const tabs: MatTabLabelWrapper[] = this._labelWrappers.toArray();\n\n      for (let i = this.focusIndex + offset; i < tabs.length && i >= 0; i += offset) {\n        if (this._isValidIndex(i)) {\n          this.focusIndex = i;\n          return;\n        }\n      }\n    }\n  }\n\n  /** Increment the focus index by 1 until a valid tab is found. */\n  _focusNextTab(): void {\n    this._moveFocus(this._getLayoutDirection() == 'ltr' ? 1 : -1);\n  }\n\n  /** Decrement the focus index by 1 until a valid tab is found. */\n  _focusPreviousTab(): void {\n    this._moveFocus(this._getLayoutDirection() == 'ltr' ? -1 : 1);\n  }\n\n  /** Focuses the first tab. */\n  private _focusFirstTab(): void {\n    for (let i = 0; i < this._labelWrappers.length; i++) {\n      if (this._isValidIndex(i)) {\n        this.focusIndex = i;\n        break;\n      }\n    }\n  }\n\n  /** Focuses the last tab. */\n  private _focusLastTab(): void {\n    for (let i = this._labelWrappers.length - 1; i > -1; i--) {\n      if (this._isValidIndex(i)) {\n        this.focusIndex = i;\n        break;\n      }\n    }\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    const scrollDistance = this.scrollDistance;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    this._tabList.nativeElement.style.transform = `translate3d(${translateX}px, 0, 0)`;\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  get scrollDistance(): number { return this._scrollDistance; }\n  set scrollDistance(v: number) {\n    this._scrollDistance = Math.max(0, Math.min(this._getMaxScrollDistance(), v));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n  }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(scrollDir: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    this.scrollDistance += (scrollDir == 'before' ? -1 : 1) * viewLength / 3;\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    const selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    const isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  private _alignInkBarToSelectedTab(): void {\n    const selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\n        null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex, RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge} from 'rxjs';\nimport {of as observableOf} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {Subject} from 'rxjs';\nimport {MatInkBar} from '../ink-bar';\n\n\n// Boilerplate for applying mixins to MatTabNav.\n/** @docs-private */\nexport class MatTabNavBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabNavMixinBase = mixinColor(MatTabNavBase, 'primary');\n\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  exportAs: 'matTabNavBar, matTabNav',\n  inputs: ['color'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTabNav extends _MatTabNavMixinBase implements AfterContentInit, CanColor,\n    OnDestroy {\n\n  /** Subject that emits when the component has been destroyed. */\n  private readonly _onDestroy = new Subject<void>();\n\n  _activeLinkChanged: boolean;\n  _activeLinkElement: ElementRef;\n\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n\n  /** Query list of all tab links of the tab navigation. */\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true})\n  _tabLinks: QueryList<MatTabLink>;\n\n  /** Background color of the tab nav. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Whether ripples should be disabled for all links or not. */\n  @Input()\n  get disableRipple() { return this._disableRipple; }\n  set disableRipple(value: boolean) {\n    this._disableRipple = coerceBooleanProperty(value);\n    this._setLinkDisableRipple();\n  }\n  private _disableRipple: boolean = false;\n\n  constructor(elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler) {\n    super(elementRef);\n  }\n\n  /** Notifies the component that the active link has been changed. */\n  updateActiveLink(element: ElementRef) {\n    this._activeLinkChanged = this._activeLinkElement != element;\n    this._activeLinkElement = element;\n\n    if (this._activeLinkChanged) {\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      const dirChange = this._dir ? this._dir.change : observableOf(null);\n\n      return merge(dirChange, this._viewportRuler.change(10)).pipe(takeUntil(this._onDestroy))\n          .subscribe(() => this._alignInkBar());\n    });\n\n    this._setLinkDisableRipple();\n  }\n\n  /** Checks if the active link has been changed and, if so, will update the ink bar. */\n  ngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Aligns the ink bar to the active link. */\n  _alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    }\n  }\n\n  /** Sets the `disableRipple` property on each link of the navigation bar. */\n  private _setLinkDisableRipple() {\n    if (this._tabLinks) {\n      this._tabLinks.forEach(link => link.disableRipple = this.disableRipple);\n    }\n  }\n}\n\n\n// Boilerplate for applying mixins to MatTabLink.\nexport class MatTabLinkBase {}\nexport const _MatTabLinkMixinBase =\n  mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\n\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n@Directive({\n  selector: '[mat-tab-link], [matTabLink]',\n  exportAs: 'matTabLink',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabIndex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled',\n    '[class.mat-tab-label-active]': 'active',\n    '(click)': '_handleClick($event)'\n  }\n})\nexport class MatTabLink extends _MatTabLinkMixinBase\n    implements OnDestroy, CanDisable, CanDisableRipple, HasTabIndex, RippleTarget {\n\n  /** Whether the tab link is active or not. */\n  private _isActive: boolean = false;\n\n  /** Reference to the RippleRenderer for the tab-link. */\n  private _tabLinkRipple: RippleRenderer;\n\n  /** Whether the link is active. */\n  @Input()\n  get active(): boolean { return this._isActive; }\n  set active(value: boolean) {\n    this._isActive = value;\n    if (value) {\n      this._tabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple;\n  }\n\n  constructor(private _tabNavBar: MatTabNav,\n              private _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Attribute('tabindex') tabIndex: string) {\n    super();\n\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._tabLinkRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    if (globalOptions) {\n      this.rippleConfig = {\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n        speedFactor: globalOptions.baseSpeedFactor,\n        animation: globalOptions.animation,\n      };\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabLinkRipple._removeTriggerEvents();\n  }\n\n  /**\n   * Handles the click event, preventing default navigation if the tab link is disabled.\n   */\n  _handleClick(event: MouseEvent) {\n    if (this.disabled) {\n      event.preventDefault();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabContent} from './tab-content';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n    MatTabContent,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader,\n    MatTabContent,\n  ],\n})\nexport class MatTabsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nexport class MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatToolbarMixinBase = mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': 'this._toolbarRows.length',\n    '[class.mat-toolbar-single-row]': '!this._toolbarRows.length'\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n  private _document: Document;\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(\n    elementRef: ElementRef,\n    private _platform: Platform,\n    @Inject(DOCUMENT) document?: any) {\n    super(elementRef);\n\n    // TODO: make the document a required param when doing breaking changes.\n    this._document = document;\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = [].slice.call(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n      .some(node => node.textContent.trim());\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodeOutlet} from '@angular/cdk/tree';\nimport {\n  Directive,\n  ViewContainerRef,\n} from '@angular/core';\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({\n  selector: '[matTreeNodeOutlet]'\n})\nexport class MatTreeNodeOutlet implements CdkTreeNodeOutlet {\n  constructor(public viewContainer: ViewContainerRef) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Attribute,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Input,\n  QueryList\n} from '@angular/core';\nimport {\n  CdkNestedTreeNode,\n  CdkTree,\n  CdkTreeNodeDef,\n  CdkTreeNode,\n} from '@angular/cdk/tree';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {mixinTabIndex, mixinDisabled, CanDisable, HasTabIndex} from '@angular/material/core';\n\n\nexport const _MatTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkTreeNode));\nexport const _MatNestedTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkNestedTreeNode));\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n  selector: 'mat-tree-node',\n  exportAs: 'matTreeNode',\n  inputs: ['disabled', 'tabIndex'],\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.aria-level]': 'level',\n    '[attr.role]': 'role',\n    'class': 'mat-tree-node'\n  },\n  providers: [{provide: CdkTreeNode, useExisting: MatTreeNode}]\n})\nexport class MatTreeNode<T> extends _MatTreeNodeMixinBase<T> implements HasTabIndex, CanDisable {\n  @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n  constructor(protected _elementRef: ElementRef,\n              protected _tree: CdkTree<T>,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n}\n\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeDef]',\n  inputs: [\n    'when: matTreeNodeDefWhen'\n  ],\n  providers: [{provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef}]\n})\nexport class MatTreeNodeDef<T> extends CdkTreeNodeDef<T> {\n  @Input('matTreeNode') data: T;\n}\n\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\n@Directive({\n  selector: 'mat-nested-tree-node',\n  exportAs: 'matNestedTreeNode',\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.role]': 'role',\n    'class': 'mat-nested-tree-node',\n  },\n  inputs: ['disabled', 'tabIndex'],\n  providers: [\n    {provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CdkTreeNode, useExisting: MatNestedTreeNode}\n  ]\n})\nexport class MatNestedTreeNode<T> extends _MatNestedTreeNodeMixinBase<T>\n    implements HasTabIndex, CanDisable {\n\n  @Input('matNestedTreeNode') node: T;\n\n  @ContentChildren(MatTreeNodeOutlet) nodeOutlet: QueryList<MatTreeNodeOutlet>;\n\n  constructor(protected _elementRef: ElementRef,\n              protected _tree: CdkTree<T>,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodePadding} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodePadding]',\n  providers: [{provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding}]\n})\nexport class MatTreeNodePadding<T> extends CdkTreeNodePadding<T> {\n\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  @Input('matTreeNodePadding') level: number;\n\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n  @Input('matTreeNodePaddingIndent') indent: number;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation} from '@angular/core';\nimport {CdkTree} from '@angular/cdk/tree';\nimport {MatTreeNodeOutlet} from './outlet';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tree',\n  exportAs: 'matTree',\n  template: `<ng-container matTreeNodeOutlet></ng-container>`,\n  host: {\n    'class': 'mat-tree',\n    'role': 'tree',\n  },\n  styleUrls: ['tree.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [{provide: CdkTree, useExisting: MatTree}]\n})\nexport class MatTree<T> extends CdkTree<T> {\n  // Outlets within the tree's template where the dataNodes will be inserted.\n  @ViewChild(MatTreeNodeOutlet) _nodeOutlet: MatTreeNodeOutlet;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\nimport {CdkTreeNodeToggle} from '@angular/cdk/tree';\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeToggle]',\n  host: {\n    '(click)': '_toggle($event)',\n  },\n  providers: [{provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle}]\n})\nexport class MatTreeNodeToggle<T> extends CdkTreeNodeToggle<T> {\n  @Input('matTreeNodeToggleRecursive') recursive: boolean = true;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatNestedTreeNode, MatTreeNodeDef, MatTreeNode} from './node';\nimport {MatTree} from './tree';\nimport {MatTreeNodeToggle} from './toggle';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {MatTreeNodePadding} from './padding';\n\nconst MAT_TREE_DIRECTIVES = [\n  MatNestedTreeNode,\n  MatTreeNodeDef,\n  MatTreeNodePadding,\n  MatTreeNodeToggle,\n  MatTree,\n  MatTreeNode,\n  MatTreeNodeOutlet\n];\n\n@NgModule({\n  imports: [CdkTreeModule, CommonModule, MatCommonModule],\n  exports: MAT_TREE_DIRECTIVES,\n  declarations: MAT_TREE_DIRECTIVES,\n})\nexport class MatTreeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {FlatTreeControl, TreeControl} from '@angular/cdk/tree';\nimport {Observable} from 'rxjs';\nimport {merge} from 'rxjs';\nimport {map} from 'rxjs/operators';\nimport {take} from 'rxjs/operators';\nimport {BehaviorSubject} from 'rxjs';\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class MatTreeFlattener<T, F> {\n\n  constructor(public transformFunction: (node: T, level: number) => F,\n              public getLevel: (node: F) => number,\n              public isExpandable: (node: F) => boolean,\n              public getChildren: (node: T) => Observable<T[]>) {}\n\n  _flattenNode(node: T, level: number,\n               resultNodes: F[], parentMap: boolean[]): F[] {\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n\n    if (this.isExpandable(flatNode)) {\n      this.getChildren(node).pipe(take(1)).subscribe(children => {\n        children.forEach((child, index) => {\n          let childParentMap: boolean[] = parentMap.slice();\n          childParentMap.push(index != children.length - 1);\n          this._flattenNode(child, level + 1, resultNodes, childParentMap);\n        });\n      });\n    }\n    return resultNodes;\n  }\n\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   */\n  flattenNodes(structuredData: T[]): F[] {\n    let resultNodes: F[] = [];\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   */\n  expandFlattenedNodes(nodes: F[], treeControl: TreeControl<F>): F[] {\n    let results: F[] = [];\n    let currentExpand: boolean[] = [];\n    currentExpand[0] = true;\n\n    nodes.forEach((node) => {\n      let expand = true;\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n      if (expand) {\n        results.push(node);\n      }\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nexport class MatTreeFlatDataSource<T, F> extends DataSource<F> {\n  _flattenedData = new BehaviorSubject<F[]>([]);\n\n  _expandedData = new BehaviorSubject<F[]>([]);\n\n  _data: BehaviorSubject<T[]>;\n  get data() { return this._data.value; }\n  set data(value: T[]) {\n    this._data.next(value);\n    this._flattenedData.next(this.treeFlattener.flattenNodes(this.data));\n    this.treeControl.dataNodes = this._flattenedData.value;\n  }\n\n  constructor(private treeControl: FlatTreeControl<F>,\n              private treeFlattener: MatTreeFlattener<T, F>,\n              initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n  }\n\n  connect(collectionViewer: CollectionViewer): Observable<F[]> {\n    const changes = [\n      collectionViewer.viewChange,\n      this.treeControl.expansionModel.onChange!,\n      this._flattenedData\n    ];\n    return merge(...changes).pipe(map(() => {\n      this._expandedData.next(\n        this.treeFlattener.expandFlattenedNodes(this._flattenedData.value, this.treeControl));\n      return this._expandedData.value;\n    }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {Observable} from 'rxjs';\nimport {merge} from 'rxjs';\nimport {map} from 'rxjs/operators';\nimport {BehaviorSubject} from 'rxjs';\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nexport class MatTreeNestedDataSource<T> extends DataSource<T> {\n  _data = new BehaviorSubject<T[]>([]);\n\n  /**\n   * Data for the nested treee\n   */\n  get data() { return this._data.value; }\n  set data(value: T[]) { this._data.next(value); }\n\n  connect(collectionViewer: CollectionViewer): Observable<T[]> {\n    return merge(...[collectionViewer.viewChange, this._data])\n      .pipe(map(() => {\n        return this.data;\n      }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('6.0.0-beta.5-4e298a6');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {filter, take, switchMap, delay, tap} from 'rxjs/operators';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  MatOption,\n  MatOptionSelectionChange,\n} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {Subscription, defer, fromEvent, merge, of as observableOf, Subject, Observable} from 'rxjs';\nimport {MatAutocomplete} from './autocomplete';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy', {\n      providedIn: 'root',\n      factory: () => {\n        const overlay = inject(Overlay);\n        return () => overlay.scrollStrategies.reposition();\n      }\n    });\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    'role': 'combobox',\n    'autocomplete': 'off',\n    'aria-autocomplete': 'list',\n    '[attr.aria-activedescendant]': 'activeOption?.id',\n    '[attr.aria-expanded]': 'panelOpen.toString()',\n    '[attr.aria-owns]': 'autocomplete?.id',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  exportAs: 'matAutocompleteTrigger',\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal;\n  private _componentDestroyed = false;\n\n  /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n  private _previousValue: string | number | null;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Stream of keyboard events that can close the panel. */\n  private readonly _closeKeyEventStream = new Subject<void>();\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when autocomplete has been touched` */\n  _onTouched = () => {};\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  constructor(private _element: ElementRef, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any) {}\n\n  ngOnDestroy() {\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._overlayAttached && this.autocomplete.showPanel;\n  }\n  private _overlayAttached: boolean = false;\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (!this._overlayAttached) {\n      return;\n    }\n\n    if (this.panelOpen) {\n      // Only emit if the panel was visible.\n      this.autocomplete.closed.emit();\n    }\n\n    this.autocomplete._isOpen = this._overlayAttached = false;\n\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n\n    // Note that in some cases this can end up being called after the component is destroyed.\n    // Add a check to ensure that we don't try to run change detection on a destroyed view.\n    if (!this._componentDestroyed) {\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)),\n      this._closeKeyEventStream,\n      this._outsideClickStream,\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n          observableOf()\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  readonly optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .asObservable()\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  });\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private get _outsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return merge(\n      fromEvent(this._document, 'click'),\n      fromEvent(this._document, 'touchend')\n    )\n    .pipe(filter((event: MouseEvent | TouchEvent) => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._overlayAttached &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n    if (keyCode === ESCAPE) {\n      event.preventDefault();\n    }\n\n    // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n    // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n    if (this.panelOpen && (keyCode === ESCAPE || (keyCode === UP_ARROW && event.altKey))) {\n      this._resetActiveItem();\n      this._closeKeyEventStream.next();\n      event.stopPropagation();\n    } else if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    let target = event.target as HTMLInputElement;\n    let value: number | string | null = target.value;\n\n    // Based on `NumberValueAccessor` from forms.\n    if (target.type === 'number') {\n      value = value == '' ? null : parseFloat(value);\n    }\n\n    // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._canOpen() && this._previousValue !== value &&\n      document.activeElement === event.target) {\n      this._previousValue = value;\n      this._onChange(value);\n      this.openPanel();\n    }\n  }\n\n  _handleFocus(): void {\n    if (this._canOpen()) {\n      this._previousValue = this._element.nativeElement.value;\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const index = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(index,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n\n    const newScrollPosition = _getOptionScrollPosition(\n      index + labelCount,\n      AUTOCOMPLETE_OPTION_HEIGHT,\n      this.autocomplete._getScrollTop(),\n      AUTOCOMPLETE_PANEL_HEIGHT\n    );\n\n    this.autocomplete._setScrollTop(newScrollPosition);\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.reapplyLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n      .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n          this._resetActiveItem();\n          this.autocomplete._setVisibility();\n          return this.panelClosingActions;\n        }),\n        // when the first closing event occurs...\n        take(1)\n      )\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      this._overlayRef = this._overlay.create(this._getOverlayConfig());\n    } else {\n      /** Update the panel width, in case the host width has changed */\n      this._overlayRef.updateSize({width: this._getHostWidth()});\n    }\n\n    if (this._overlayRef && !this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    const wasOpen = this.panelOpen;\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._overlayAttached = true;\n\n    // We need to do an extra `panelOpen` check in here, because the\n    // autocomplete won't be shown if there are no options.\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\n      this.autocomplete.opened.emit();\n    }\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getHostWidth(),\n      direction: this._dir ? this._dir.value : 'ltr'\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy = this._overlay.position()\n      .flexibleConnectedTo(this._getConnectedElement())\n      .withFlexibleHeight(false)\n      .withFlexibleWidth(false)\n      .withPush(false)\n      .withPositions([\n        {originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top'},\n        {originX: 'start', originY: 'top', overlayX: 'start', overlayY: 'bottom'}\n      ]);\n\n    return this._positionStrategy;\n  }\n\n  private _getConnectedElement(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n  }\n\n  /** Determines whether the panel can be opened. */\n  private _canOpen(): boolean {\n    const element: HTMLInputElement = this._element.nativeElement;\n    return !element.readOnly && !element.disabled;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n    OCT = 9, NOV = 10, DEC = 11;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  animateChild,\n  group,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/** Animations used by the Material expansion panel. */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '48px'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '64px'}\n    }),\n    transition('expanded <=> collapsed', group([\n      query('@indicatorRotate', animateChild(), {optional: true}),\n      animate(EXPANSION_PANEL_ANIMATION_TIMING),\n    ])),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  SPACE,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  CdkConnectedOverlay,\n  Overlay,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  ViewportRuler,\n} from '@angular/cdk/overlay';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  CanDisable,\n  CanDisableRipple,\n  CanUpdateErrorState,\n  ErrorStateMatcher,\n  HasTabIndex,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinErrorState,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {defer, merge, Observable, Subject} from 'rxjs';\nimport {filter, map, startWith, switchMap, take, takeUntil} from 'rxjs/operators';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 20px.\n */\nexport const SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 20;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nexport class MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatSelectMixinBase = mixinDisableRipple(\n    mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_ariaLabel',\n    '[attr.aria-labelledby]': 'ariaLabelledby',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanel,\n    matSelectAnimations.fadeInContent\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form. */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Whether the panel's animation is done. */\n  _panelDoneAnimating: boolean = false;\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy = this._scrollStrategyFactory();\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the component is disabling centering of the active option over the trigger. */\n  private _disableOptionCentering: boolean = false;\n\n  /** Whether the select is focused. */\n  focused: boolean = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger') trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether to center the active option over the trigger. */\n  @Input()\n  get disableOptionCentering(): boolean { return this._disableOptionCentering; }\n  set disableOptionCentering(value: boolean) {\n    this._disableOptionCentering = coerceBooleanProperty(value);\n  }\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.options) {\n      return merge(...this.options.map(option => option.onSelectionChange));\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  });\n\n   /** Event emitted when the select panel has been toggled. */\n   @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the select has been opened. */\n  @Output('opened') readonly _openedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => o), map(() => {}));\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed') readonly _closedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => !o), map(() => {}));\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectChange> =\n      new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) private _scrollStrategyFactory) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes.disabled) {\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);\n\n    this._panelOpen = true;\n    this._keyManager.withHorizontalOrientation(null);\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n        keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  /**\n   * When the panel element is finished transforming in (though not fading in), it\n   * emits an event and focuses an option if the panel is open.\n   */\n  _onPanelDone(): void {\n    if (this.panelOpen) {\n      this._scrollTop = 0;\n      this.openedChange.emit(true);\n    } else {\n      this.openedChange.emit(false);\n      this._panelDoneAnimating = false;\n      this.overlayDir.offsetX = 0;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * When the panel content is done fading in, the _panelDoneAnimating property is\n   * set so the proper class can be added to the panel.\n   */\n  _onFadeInDone(): void {\n    this._panelDoneAnimating = this.panelOpen;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this.focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this.focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[], isUserInput = false): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      this._clearSelection();\n\n      const correspondingOption = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(correspondingOption);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput = false): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      isUserInput ? correspondingOption._selectViaInteraction() : correspondingOption.select();\n      this._selectionModel.select(correspondingOption);\n      this.stateChanges.next();\n    }\n\n    return correspondingOption;\n  }\n\n\n  /**\n   * Clears the select trigger and deselects every option in the list.\n   * @param skip Option that should not be deselected.\n   */\n  private _clearSelection(skip?: MatOption): void {\n    this._selectionModel.clear();\n    this.options.forEach(option => {\n      if (option !== skip) {\n        option.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\n      .withTypeAhead()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n\n      this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => this.close());\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges\n      .pipe(takeUntil(changedOrDestroyed), filter(event => event.isUserInput))\n      .subscribe(event => {\n        this._onSelect(event.source);\n\n        if (!this.multiple && this._panelOpen) {\n          this.close();\n          this.focus();\n        }\n      });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    // TODO(crisbeto): handle blank/null options inside multi-select.\n    if (this.multiple) {\n      this._selectionModel.toggle(option);\n      this.stateChanges.next();\n      wasSelected ? option.deselect() : option.select();\n      this._keyManager.setActiveItem(option);\n      this._sortValues();\n    } else {\n      this._clearSelection(option.value == null ? undefined : option);\n\n      if (option.value == null) {\n        this._propagateChanges(option.value);\n      } else {\n        this._selectionModel.select(option);\n        this.stateChanges.next();\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.options.forEach(option => {\n        if (option.selected) {\n          this._selectionModel.select(option);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options,\n        this.optionGroups);\n\n    this.panel.nativeElement.scrollTop = _getOptionScrollPosition(\n      activeOptionIndex + labelCount,\n      this._getItemHeight(),\n      this.panel.nativeElement.scrollTop,\n      SELECT_PANEL_MAX_HEIGHT\n    );\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options,\n        this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  get _ariaLabel(): string | null {\n    // If an ariaLabelledby value has been set, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors.\n    this.overlayDir.offsetX = offsetX;\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    // Disable offset if requested by user by returning 0 as value to offset\n    if (this._disableOptionCentering) {\n      return 0;\n    }\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height\n    // difference, multiplied by -1 to ensure that the overlay moves in the correct\n    // direction up the page.\n    return optionOffsetFromPanelTop * -1 - optionHeightAdjustment;\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  TemplateRef,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperIntl} from './stepper-intl';\nimport {MatStepperIconContext} from './stepper-icon';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStepHeader implements OnDestroy {\n  private _intlSubscription: Subscription;\n\n  /** State of the given step. */\n  @Input() state: string;\n\n  /** Label of the given step. */\n  @Input() label: MatStepLabel | string;\n\n  /** Overrides for the header icons, passed in via the stepper. */\n  @Input() iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>};\n\n  /** Index of the given step. */\n  @Input() index: number;\n\n  /** Whether the given step is selected. */\n  @Input() selected: boolean;\n\n  /** Whether the given step label is active. */\n  @Input() active: boolean;\n\n  /** Whether the given step is optional. */\n  @Input() optional: boolean;\n\n  constructor(\n    public _intl: MatStepperIntl,\n    private _focusMonitor: FocusMonitor,\n    private _element: ElementRef,\n    changeDetectorRef: ChangeDetectorRef) {\n    _focusMonitor.monitor(_element.nativeElement, true);\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n\n  /** Returns string label of given step if it is a text label. */\n  _stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n\n  /** Returns MatStepLabel if the label of given step is a template label. */\n  _templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n\n  /** Returns the host HTML element. */\n  _getHostElement() {\n    return this._element.nativeElement;\n  }\n\n  /** Template context variables that are exposed to the `matStepperIcon` instances. */\n  _getIconContext(): MatStepperIconContext {\n    return {\n      index: this.index,\n      active: this.active,\n      optional: this.optional\n    };\n  }\n\n  focus() {\n    this._getHostElement().focus();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material steppers. */\nexport const matStepperAnimations: {\n  readonly horizontalStepTransition: AnimationTriggerMetadata;\n  readonly verticalStepTransition: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions the step along the X axis in a horizontal stepper. */\n  horizontalStepTransition: trigger('stepTransition', [\n    state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n    state('current', style({transform: 'none', visibility: 'visible'})),\n    state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n    transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n  ]),\n\n  /** Animation that transitions the step along the Y axis in a vertical stepper. */\n  verticalStepTransition: trigger('stepTransition', [\n    state('previous', style({height: '0px', visibility: 'hidden'})),\n    state('next', style({height: '0px', visibility: 'hidden'})),\n    state('current', style({height: '*', visibility: 'visible'})),\n    transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, TemplateRef} from '@angular/core';\n\n/** Template context available to an attached `matStepperIcon`. */\nexport interface MatStepperIconContext {\n  /** Index of the step. */\n  index: number;\n  /** Whether the step is currently active. */\n  active: boolean;\n  /** Whether the step is optional. */\n  optional: boolean;\n}\n\n/**\n * Template to be used to override the icons inside the step header.\n */\n@Directive({\n  selector: 'ng-template[matStepperIcon]',\n})\nexport class MatStepperIcon {\n  /** Name of the icon to be overridden. */\n  @Input('matStepperIcon') name: 'edit' | 'done' | 'number';\n\n  constructor(public templateRef: TemplateRef<MatStepperIconContext>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {CdkStep, CdkStepper} from '@angular/cdk/stepper';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  forwardRef,\n  Inject,\n  Optional,\n  QueryList,\n  SkipSelf,\n  TemplateRef,\n  ViewChildren,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {takeUntil} from 'rxjs/operators';\nimport {matStepperAnimations} from './stepper-animations';\nimport {MatStepperIcon, MatStepperIconContext} from './stepper-icon';\n\n/** Workaround for https://github.com/angular/angular/issues/17849 */\nexport const _MatStep = CdkStep;\nexport const _MatStepper = CdkStepper;\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: ErrorStateMatcher, useExisting: MatStep}],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matStep',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\n  /** Content for step label given by `<ng-template matStepLabel>`. */\n  @ContentChild(MatStepLabel) stepLabel: MatStepLabel;\n\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher) {\n    super(stepper);\n  }\n\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    const customErrorState = !!(control && control.invalid && this.interacted);\n\n    return originalErrorState || customErrorState;\n  }\n}\n\n\n@Directive({\n  selector: '[matStepper]'\n})\nexport class MatStepper extends CdkStepper implements AfterContentInit {\n  /** The list of step headers of the steps in the stepper. */\n  @ViewChildren(MatStepHeader) _stepHeader: QueryList<MatStepHeader>;\n\n  /** Steps that the stepper holds. */\n  @ContentChildren(MatStep) _steps: QueryList<MatStep>;\n\n  /** Custom icon overrides passed in by the consumer. */\n  @ContentChildren(MatStepperIcon) _icons: QueryList<MatStepperIcon>;\n\n  /** Consumer-specified template-refs to be used to override the header icons. */\n  _iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>} = {};\n\n  ngAfterContentInit() {\n    const icons = this._icons.toArray();\n\n    ['edit', 'done', 'number'].forEach(name => {\n      const override = icons.find(icon => icon.name === name);\n\n      if (override) {\n        this._iconOverrides[name] = override.templateRef;\n      }\n    });\n\n    // Mark the component for change detection whenever the content children query changes\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-horizontal-stepper',\n  exportAs: 'matHorizontalStepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    'aria-orientation': 'horizontal',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.horizontalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatHorizontalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatHorizontalStepper extends MatStepper { }\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-vertical-stepper',\n  exportAs: 'matVerticalStepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'aria-orientation': 'vertical',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.verticalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatVerticalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatVerticalStepper extends MatStepper {\n  constructor(@Optional() dir: Directionality, changeDetectorRef: ChangeDetectorRef) {\n    super(dir, changeDetectorRef);\n    this._orientation = 'vertical';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepper, CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {MatStepper} from './stepper';\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperNext]',\n  host: {\n    '(click)': '_stepper.next()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperNext extends CdkStepperNext {}\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperPrevious]',\n  host: {\n    '(click)': '_stepper.previous()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperPrevious extends CdkStepperPrevious {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {ErrorStateMatcher, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nimport {MatStepperIcon} from './stepper-icon';\nimport {MatStepperIntl} from './stepper-intl';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule,\n    MatRippleModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  declarations: [\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  providers: [MatStepperIntl, ErrorStateMatcher],\n})\nexport class MatStepperModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTable<T> extends CdkTable<T> { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends CdkCellDef { }\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends CdkHeaderCellDef { }\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [{provide: CdkColumnDef, useExisting: MatColumnDef}],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Directive, ViewEncapsulation} from '@angular/core';\nimport {\n  CDK_ROW_TEMPLATE,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef,\n} from '@angular/cdk/table';\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef'],\n})\nexport class MatHeaderRowDef extends CdkHeaderRowDef { }\n\n/**\n * Data row definition for the mat-table.\n * Captures the header row's template and other row properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends CdkRowDef<T> {\n}\n\n/** Header template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n})\nexport class MatHeaderRow extends CdkHeaderRow { }\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n})\nexport class MatRow extends CdkRow { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {MatCell, MatCellDef, MatColumnDef, MatHeaderCell, MatHeaderCellDef} from './cell';\nimport {MatHeaderRow, MatHeaderRowDef, MatRow, MatRowDef} from './row';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\n@NgModule({\n  imports: [CdkTableModule, CommonModule, MatCommonModule],\n  exports: [\n    MatCell,\n    MatCellDef,\n    MatColumnDef,\n    MatHeaderCell,\n    MatHeaderCellDef,\n    MatHeaderRow,\n    MatHeaderRowDef,\n    MatRow,\n    MatRowDef,\n    MatTable,\n  ],\n  declarations: [\n    MatCell,\n    MatCellDef,\n    MatColumnDef,\n    MatHeaderCell,\n    MatHeaderCellDef,\n    MatHeaderRow,\n    MatHeaderRowDef,\n    MatRow,\n    MatRowDef,\n    MatTable,\n  ],\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DataSource} from '@angular/cdk/table';\nimport {BehaviorSubject, Observable} from 'rxjs';\nimport {MatPaginator, PageEvent} from '@angular/material/paginator';\nimport {MatSort, Sort} from '@angular/material/sort';\nimport {Subscription, combineLatest} from 'rxjs';\nimport {map} from 'rxjs/operators';\nimport {startWith} from 'rxjs/operators';\nimport {empty} from 'rxjs';\nimport {_isNumberValue} from '@angular/cdk/coercion';\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport class MatTableDataSource<T> extends DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private readonly _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private readonly _filter = new BehaviorSubject<string>('');\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription: Subscription;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() { return this._data.value; }\n  set data(data: T[]) { this._data.next(data); }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter(): string { return this._filter.value; }\n  set filter(filter: string) { this._filter.next(filter); }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort(): MatSort | null { return this._sort; }\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): MatPaginator | null { return this._paginator; }\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting through\n   * the default sortData function.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value: any = data[sortHeaderId];\n    return _isNumberValue(value) ? Number(value) : value;\n  }\n\n  /**\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n   * By default, the function retrieves the active sort and its direction and compares data\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n   * of data ordering.\n   * @param data The array of data that should be sorted.\n   * @param sort The connected MatSort that holds the current sort state.\n   */\n  sortData: ((data: T[], sort: MatSort) => T[]) = (data: T[], sort: MatSort): T[] => {\n    const active = sort.active;\n    const direction = sort.direction;\n    if (!active || direction == '') { return data; }\n\n    return data.sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n      // one value exists while the other doesn't. In this case, existing value should come first.\n      // This avoids inconsistent results when comparing values to undefined/null.\n      // If neither value exists, return 0 (equal).\n      let comparatorResult = 0;\n      if (valueA && valueB) {\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      } else if (valueA) {\n        comparatorResult = 1;\n      } else if (valueB) {\n        comparatorResult = -1;\n      }\n\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const accumulator = (currentTerm, key) => currentTerm + data[key];\n    const dataStr = Object.keys(data).reduce(accumulator, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // Otherwise, use an empty observable stream to take their place.\n    const sortChange: Observable<Sort> = this._sort ? this._sort.sortChange : empty();\n    const pageChange: Observable<PageEvent> = this._paginator ? this._paginator.page : empty();\n\n    if (this._renderChangesSubscription) {\n      this._renderChangesSubscription.unsubscribe();\n    }\n\n    const dataStream = this._data;\n    // Watch for base data or filter changes to provide a filtered set of data.\n    const filteredData = combineLatest(dataStream, this._filter)\n      .pipe(map(([data]) => this._filterData(data)));\n    // Watch for filtered data or sort changes to provide an ordered set of data.\n    const orderedData = combineLatest(filteredData, sortChange.pipe(startWith(null!)))\n      .pipe(map(([data]) => this._orderData(data)));\n    // Watch for ordered data or page changes to provide a paged set of data.\n    const paginatedData = combineLatest(orderedData, pageChange.pipe(startWith(null!)))\n      .pipe(map(([data]) => this._pageData(data)));\n    // Watched for paged data changes and send the result to the table to render.\n    paginatedData.subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overridden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) { return data; }\n\n    return this.sortData(data.slice(), this.sort);\n  }\n\n  /**\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice().splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      if (!this.paginator) { return; }\n\n      this.paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (this.paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(this.paginator.length / this.paginator.pageSize) - 1 || 0;\n        this.paginator.pageIndex = Math.min(this.paginator.pageIndex, lastPageIndex);\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport { Directive, ElementRef, Inject, InjectionToken, NgZone } from '@angular/core';\n\n/**\n * Interface for a a MatInkBar positioner method, defining the positioning and width of the ink\n * bar in a set of tabs.\n */\n// tslint:disable-next-line class-name Using leading underscore to denote internal interface.\nexport interface _MatInkBarPositioner {\n  (element: HTMLElement): { left: string, width: string };\n}\n\n/** Injection token for the MatInkBar's Positioner. */\nexport const _MAT_INK_BAR_POSITIONER =\n  new InjectionToken<_MatInkBarPositioner>('MatInkBarPositioner', {\n    providedIn: 'root',\n    factory: () => _matInkBarPositioner\n  });\n\n/**\n * The default positioner function for the MatInkBar.\n */\nexport const _matInkBarPositioner: _MatInkBarPositioner = (element: HTMLElement) => {\n  return {\n    left: element ? (element.offsetLeft || 0) + 'px' : '0',\n    width: element ? (element.offsetWidth || 0) + 'px' : '0',\n  };\n};\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone,\n    @Inject(_MAT_INK_BAR_POSITIONER) private _inkBarPositioner: _MatInkBarPositioner) { }\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n  private _setStyles(element: HTMLElement) {\n    const positions = this._inkBarPositioner(element);\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\n\n    inkBar.style.left = positions.left;\n    inkBar.style.width = positions.width;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef, ViewContainerRef} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n})\nexport class MatTabLabel extends CdkPortal {\n  constructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\n    super(templateRef, viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/** Decorates the `ng-template` tags and reads out the template from it. */\n@Directive({selector: '[matTabContent]'})\nexport class MatTabContent {\n  constructor(public template: TemplateRef<any>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabContent} from './tab-content';\n\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nexport class MatTabBase {}\nexport const _MatTabMixinBase = mixinDisabled(MatTabBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matTab',\n})\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n  @ContentChild(MatTabLabel) templateLabel: MatTabLabel;\n\n  /**\n   * Template provided in the tab content that will be used if present, used to enable lazy-loading\n   */\n  @ContentChild(MatTabContent, {read: TemplateRef}) _explicitContent: TemplateRef<any>;\n\n  /** Template inside the MatTab view that contains an `<ng-content>`. */\n  @ViewChild(TemplateRef) _implicitContent: TemplateRef<any>;\n\n  /** The plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** The portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the label changes. */\n  readonly _labelChange = new Subject<void>();\n\n  /** Emits whenever the disable changes */\n  readonly _disableChange = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel')) {\n      this._labelChange.next();\n    }\n\n    if (changes.hasOwnProperty('disabled')) {\n      this._disableChange.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._disableChange.complete();\n    this._labelChange.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(\n        this._explicitContent || this._implicitContent, this._viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material tabs. */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n    state('left', style({transform: 'translate3d(-100%, 0, 0)'})),\n    state('right', style({transform: 'translate3d(100%, 0, 0)'})),\n    transition('* => left, * => right, left => center, right => center',\n        animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ])\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n  ViewChild,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet, PortalHostDirective} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {Subscription} from 'rxjs';\nimport {matTabsAnimations} from './tabs-animations';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]'\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** A subscription to events for when the tab body begins centering. */\n  private _centeringSub: Subscription;\n  /** A subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub: Subscription;\n\n  constructor(\n    _componentFactoryResolver: ComponentFactoryResolver,\n    _viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\n      super(_componentFactoryResolver, _viewContainerRef);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  ngOnInit(): void {\n    if (this._host._isCenterPosition(this._host._position)) {\n      this.attach(this._host._content);\n    }\n    this._centeringSub = this._host._beforeCentering.subscribe((isCentering: boolean) => {\n      if (isCentering && !this.hasAttached()) {\n        this.attach(this._host._content);\n      }\n    });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  /** Clean up centering subscription. */\n  ngOnDestroy(): void {\n    if (this._centeringSub && !this._centeringSub.closed) {\n      this._centeringSub.unsubscribe();\n    }\n\n    if (this._leavingSub && !this._leavingSub.closed) {\n      this._leavingSub.unsubscribe();\n    }\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  },\n})\nexport class MatTabBody implements OnInit {\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() readonly _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() readonly _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n   /** The portal host inside of this container into which the tab body content will be loaded. */\n  @ViewChild(PortalHostDirective) _portalHost: PortalHostDirective;\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal;\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  @Input()\n  set position(position: number) {\n    if (position < 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'left' : 'right';\n    } else if (position > 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n  _position: MatTabBodyPositionState;\n\n  /** The origin position from which this tab should appear when it is centered into view. */\n  @Input()\n  set origin(origin: number) {\n    if (origin == null) { return; }\n\n    const dir = this._getLayoutDirection();\n    if ((dir == 'ltr' && origin <= 0) || (dir == 'rtl' && origin > 0)) {\n      this._origin = 'left';\n    } else {\n      this._origin = 'right';\n    }\n  }\n  _origin: MatTabBodyOriginState;\n\n  constructor(private _elementRef: ElementRef,\n              @Optional() private _dir: Directionality) { }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this._origin) {\n      this._position = this._origin == 'left' ? 'left-origin-center' : 'right-origin-center';\n    }\n  }\n\n  _onTranslateTabStarted(e: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(e.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  _onTranslateTabComplete(e: AnimationEvent): void {\n    // If the transition to the center is complete, emit an event.\n    if (this._isCenterPosition(e.toState) && this._isCenterPosition(this._position)) {\n      this._onCentered.emit();\n    }\n\n    if (this._isCenterPosition(e.fromState) && !this._isCenterPosition(this._position)) {\n      this._afterLeavingCenter.emit();\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {Subscription} from 'rxjs';\nimport {MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\nimport {merge} from 'rxjs';\nimport {\n  CanColor,\n  CanDisableRipple,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette\n} from '@angular/material/core';\n\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nexport class MatTabGroupBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabGroupMixinBase = mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://www.google.com/design/spec/components/tabs.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\n\n  @ViewChild('tabBodyWrapper') _tabBodyWrapper: ElementRef;\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n  private _dynamicHeight: boolean = false;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() readonly focusChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() readonly selectedTabChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\n\n  private _groupId: number;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super(elementRef);\n    this._groupId = nextId++;\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked() {\n    // Clamp the next selected index to the boundsof 0 and the tabs length.\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    let indexToSelect = this._indexToSelect =\n        Math.min(this._tabs.length - 1, Math.max(this._indexToSelect || 0, 0));\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect && this._selectedIndex != null) {\n      const tabChangeEvent = this._createChangeEvent(indexToSelect);\n      this.selectedTabChange.emit(tabChangeEvent);\n      // Emitting this value after change detection has run\n      // since the checked content may contain this variable'\n      Promise.resolve().then(() => this.selectedIndexChange.emit(indexToSelect));\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n      tab.isActive = index === indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  _focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(\n        ...this._tabs.map(tab => tab._disableChange),\n        ...this._tabs.map(tab => tab._labelChange)).subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    this._tabBodyWrapperHeight = this._tabBodyWrapper.nativeElement.clientHeight;\n    this._tabBodyWrapper.nativeElement.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, idx: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = idx;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nexport class MatTabLabelWrapperBase {}\nexport const _MatTabLabelWrapperMixinBase = mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled'\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  HammerInput,\n  HasTabIndex,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {Subscription} from 'rxjs';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nexport class MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSliderMixinBase =\n  mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(click)': '_onClick($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert(): boolean { return this._invert; }\n  set invert(value: boolean) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundLabelTo = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value: boolean) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /** Value of the slider. */\n  @Input()\n  get value(): number | null {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      this._value = coerceNumberProperty(v);\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /**\n   * Function that will be used to format the value before it is displayed\n   * in the thumb label. Can be used to format very large number in order\n   * for them to fit into the slider thumb.\n   */\n  @Input() displayWith: (value: number | null) => string | number;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() readonly change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() readonly input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    if (this.displayWith) {\n      return this.displayWith(this.value);\n    }\n\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundLabelTo && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundLabelTo);\n    }\n\n    return this.value || 0;\n  }\n\n  /** set focus to the host element */\n  focus() {\n    this._focusHostElement();\n  }\n\n  /** blur the host element */\n  blur() {\n    this._blurHostElement();\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    let sign = this._invertMouseCoords ? '-' : '';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${1 - this.percent})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    let sign = this._invertMouseCoords ? '' : '-';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${this.percent})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._direction == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._direction == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._direction == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundLabelTo: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper') private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  private get _invertMouseCoords() {\n    return (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private get _direction() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef.nativeElement, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onClick(event: MouseEvent) {\n    if (this.disabled) {\n      return;\n    }\n\n    let oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    // Emit a change and input event if the value changed.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value && !this.disabled) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled) { return; }\n\n    let oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._direction == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._direction == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n\n    if (this._invertMouseCoords) {\n      percent = 1 - percent;\n    }\n\n    // Since the steps may not divide cleanly into the max value, if the user\n    // slid to 0 or 100 percent, we jump to the min/max value. This approach\n    // is slightly more intuitive than using `Math.ceil` below, because it\n    // follows the user's pointer closer.\n    if (percent === 0) {\n      this.value = this.min;\n    } else if (percent === 1) {\n      this.value = this.max;\n    } else {\n      let exactValue = this._calculateValue(percent);\n\n      // This calculation finds the closest step by finding the closest\n      // whole number divisible by the step relative to the min.\n      let closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n\n      // The value needs to snap to the min and max.\n      this.value = this._clamp(closestValue, this.min, this.max);\n    }\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Blurs the native element. */\n  private _blurHostElement() {\n    this._elementRef.nativeElement.blur();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to eb triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable} from 'rxjs';\nimport {Subject} from 'rxjs';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n  /** Whether the snack bar was dismissed using the action button. */\n  dismissedByAction: boolean;\n}\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has been dismissed. */\n  private readonly _afterDismissed = new Subject<MatSnackBarDismiss>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private readonly _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  /** Whether the snack bar was dismissed using the action button. */\n  private _dismissedByAction = false;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  dismissWithAction(): void {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * @deletion-target 7.0.0\n   */\n  closeWithAction(): void {\n    this.dismissWithAction();\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<MatSnackBarDismiss> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /** Message to be announced by the MatAriaLiveAnnouncer */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material snack bar. */\nexport const matSnackBarAnimations: {\n  readonly contentFade: AnimationTriggerMetadata;\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  contentFade: trigger('contentFade', [\n    transition(':enter', [\n      style({opacity: '0'}),\n      animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.STANDARD_CURVE}`)\n    ])\n  ]),\n\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('visible-top, visible-bottom', style({transform: 'translateY(0%)'})),\n    transition('visible-top => hidden-top, visible-bottom => hidden-bottom',\n      animate(`${AnimationDurations.EXITING} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible-top, void => visible-bottom',\n      animate(`${AnimationDurations.ENTERING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\nimport {matSnackBarAnimations} from './snack-bar-animations';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matSnackBarAnimations.contentFade],\n  host: {\n    '[@contentFade]': '',\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: { message: string, action: string };\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.dismissWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  NgZone,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal,\n} from '@angular/cdk/portal';\nimport {take} from 'rxjs/operators';\nimport {Observable} from 'rxjs';\nimport {Subject} from 'rxjs';\nimport {MatSnackBarConfig} from './snack-bar-config';\nimport {matSnackBarAnimations} from './snack-bar-animations';\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    'role': 'alert',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  readonly _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  readonly _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  /** The snack bar configuration. */\n  snackBarConfig: MatSnackBarConfig;\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState.startsWith('hidden')) {\n      this._completeExit();\n    }\n\n    if (toState.startsWith('visible')) {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = `visible-${this.snackBarConfig.verticalPosition}`;\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    this._animationState = `hidden-${this.snackBarConfig.verticalPosition}`;\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n  private _applySnackBarClasses() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClasses = this.snackBarConfig.panelClass;\n\n    if (panelClasses) {\n      if (Array.isArray(panelClasses)) {\n        // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n        panelClasses.forEach(cssClass => element.classList.add(cssClass));\n      } else {\n        element.classList.add(panelClasses);\n      }\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n  }\n\n  /** Asserts that no content is already attached to the container. */\n  private _assertNotAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, TemplatePortal, ComponentType, PortalInjector} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  EmbeddedViewRef,\n  Inject,\n  Injectable,\n  Injector,\n  InjectionToken,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {take} from 'rxjs/operators';\nimport {takeUntil} from 'rxjs/operators';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/** Injection token that can be used to specify default snack bar. */\nexport const MAT_SNACK_BAR_DEFAULT_OPTIONS =\n    new InjectionToken<MatSnackBarConfig>('mat-snack-bar-default-options', {\n      providedIn: 'root',\n      factory: () => new MatSnackBarConfig(),\n    });\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable()\nexport class MatSnackBar {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar,\n      @Inject(MAT_SNACK_BAR_DEFAULT_OPTIONS) private _defaultConfig: MatSnackBarConfig) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig):\n    MatSnackBarRef<T> {\n    return this._attach(component, config) as MatSnackBarRef<T>;\n  }\n\n  /**\n   * Creates and dispatches a snack bar with a custom template for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param template Template to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromTemplate(template: TemplateRef<any>, config?: MatSnackBarConfig):\n    MatSnackBarRef<EmbeddedViewRef<any>> {\n    return this._attach(template, config);\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = {...this._defaultConfig, ...config};\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n    _config.announcementMessage = message;\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n    const containerPortal = new ComponentPortal(MatSnackBarContainer, config.viewContainerRef);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component or a template as the content of the snack bar container.\n   */\n  private _attach<T>(content: ComponentType<T> | TemplateRef<T>, userConfig?: MatSnackBarConfig):\n    MatSnackBarRef<T | EmbeddedViewRef<any>> {\n\n    const config = {...this._defaultConfig, ...userConfig};\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T | EmbeddedViewRef<any>>(container, overlayRef);\n\n    if (content instanceof TemplateRef) {\n      const portal = new TemplatePortal(content, null!, {\n        $implicit: config.data,\n        snackBarRef\n      } as any);\n\n      snackBarRef.instance = container.attachTemplatePortal(portal);\n    } else {\n      const injector = this._createInjector(config, snackBarRef);\n      const portal = new ComponentPortal(content, undefined, injector);\n      const contentRef = container.attachComponentPortal<T>(portal);\n\n      // We can't pass this via the injector, because the injector is created earlier.\n      snackBarRef.instance = contentRef.instance;\n    }\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\n      takeUntil(overlayRef.detachments().pipe(take(1)))\n    ).subscribe(state => {\n      if (state.matches) {\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n      } else {\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n      }\n    });\n\n    this._animateSnackBar(snackBarRef, config);\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /** Animates the old snack bar out and the new one in. */\n  private _animateSnackBar(snackBarRef: MatSnackBarRef<any>, config: MatSnackBarConfig) {\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (config.duration && config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration!));\n    }\n\n    if (config.announcementMessage) {\n      this._live.announce(config.announcementMessage, config.politeness);\n    }\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap();\n\n    injectionTokens.set(MatSnackBarRef, snackBarRef);\n    injectionTokens.set(MAT_SNACK_BAR_DATA, config.data);\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MatSnackBar} from './snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatCommonModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n  providers: [MatSnackBar]\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  Output,\n  OnChanges,\n  OnDestroy,\n} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortInvalidDirectionError,\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError\n} from './sort-errors';\nimport {Subject} from 'rxjs';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nexport class MatSortBase {}\nexport const _MatSortMixinBase = mixinDisabled(MatSortBase);\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase implements CanDisable, OnChanges, OnDestroy {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  get direction(): SortDirection { return this._direction; }\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable): void {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable): void {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable): void {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.emit({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {SortDirection} from './sort-direction';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable({providedIn: 'root'})\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n\n  /** A label to describe the current sort (visible only to screenreaders). */\n  sortDescriptionLabel = (id: string, direction: SortDirection) => {\n    return `Sorted by ${id} ${direction == 'asc' ? 'ascending' : 'descending'}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata, query, animateChild,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/** Animations used by MatSort. */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly arrowOpacity: AnimationTriggerMetadata;\n  readonly arrowPosition: AnimationTriggerMetadata;\n  readonly allowChildren: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('active-asc, asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('active-desc, desc', style({transform: 'translateY(10px)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('active-asc, asc', style({transform: 'rotate(-45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('active-asc, asc', style({transform: 'rotate(45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(-45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that controls the arrow opacity. */\n  arrowOpacity: trigger('arrowOpacity', [\n    state('desc-to-active, asc-to-active, active', style({opacity: 1})),\n    state('desc-to-hint, asc-to-hint, hint', style({opacity: .54})),\n    state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc',\n        style({opacity: 0})),\n    // Transition between all states except for immediate transitions\n    transition('* => asc, * => desc, * => active, * => hint', animate('0ms')),\n    transition('* <=> *', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /**\n   * Animation for the translation of the arrow as a whole. States are separated into two\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n   * peek, and active. The other states define a specific animation (source-to-destination)\n   * and are determined as a function of their prev user-perceived state and what the next state\n   * should be.\n   */\n  arrowPosition: trigger('arrowPosition', [\n    // Hidden Above => Hint Center\n    transition('* => desc-to-hint, * => desc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(-25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Below\n    transition('* => hint-to-desc, * => active-to-desc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(25%)'})\n        ]))),\n    // Hidden Below => Hint Center\n    transition('* => asc-to-hint, * => asc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Above\n    transition('* => hint-to-asc, * => active-to-asc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(-25%)'})\n        ]))),\n    state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active',\n        style({transform: 'translateY(0)'})),\n    state('hint-to-desc, active-to-desc, desc',\n        style({transform: 'translateY(-25%)'})),\n    state('hint-to-asc, active-to-asc, asc',\n        style({transform: 'translateY(25%)'})),\n  ]),\n\n  /** Necessary trigger that calls animate on children animations. */\n  allowChildren: trigger('allowChildren', [\n    transition('* <=> *', [\n      query('@*', animateChild(), {optional: true})\n    ])\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkColumnDef} from '@angular/cdk/table';\nimport {Subscription} from 'rxjs';\nimport {merge} from 'rxjs';\nimport {MatSort, MatSortable} from './sort';\nimport {SortDirection} from './sort-direction';\nimport {MatSortHeaderIntl} from './sort-header-intl';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {matSortAnimations} from './sort-animations';\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nexport class MatSortHeaderBase {}\nexport const _MatSortHeaderMixinBase = mixinDisabled(MatSortHeaderBase);\n\n/**\n * Valid positions for the arrow to be in for its opacity and translation. If the state is a\n * sort direction, the position of the arrow will be above/below and opacity 0. If the state is\n * hint, the arrow will be in the center with a slight opacity. Active state means the arrow will\n * be fully opaque in the center.\n *\n * @docs-private\n */\nexport type ArrowViewState = SortDirection | 'hint' | 'active';\n\n/**\n * States describing the arrow's animated position (animating fromState to toState).\n * If the fromState is not defined, there will be no animated transition to the toState.\n * @docs-private\n */\nexport interface ArrowViewStateTransition {\n  fromState?: ArrowViewState;\n  toState: ArrowViewState;\n}\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_handleClick()',\n    '(mouseenter)': '_setIndicatorHintVisible(true)',\n    '(longpress)': '_setIndicatorHintVisible(true)',\n    '(mouseleave)': '_setIndicatorHintVisible(false)',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.arrowOpacity,\n    matSortAnimations.arrowPosition,\n    matSortAnimations.allowChildren,\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase implements MatSortable, CanDisable {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n   * provide an affordance that the header is sortable by showing on focus and hover.\n   */\n  _showIndicatorHint: boolean = false;\n\n  /**\n   * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n   * position through the animation. If animations are currently disabled, the fromState is removed\n   * so that there is no animation displayed.\n   */\n  _viewState: ArrowViewStateTransition;\n\n  /** The direction the arrow should be facing according to the current state. */\n  _arrowDirection: SortDirection = '';\n\n  /**\n   * Whether the view state animation should show the transition between the `from` and `to` states.\n   */\n  _disableViewStateAnimation = false;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input() start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Optional() public _cdkColumnDef: CdkColumnDef) {\n\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n        .subscribe(() => {\n          if (this._isSorted()) {\n            this._updateArrowDirection();\n          }\n\n          // If this header was recently active and now no longer sorted, animate away the arrow.\n          if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = false;\n            this._setAnimationTransitionState({fromState: 'active', toState: this._arrowDirection});\n          }\n\n          changeDetectorRef.markForCheck();\n        });\n  }\n\n  ngOnInit() {\n    if (!this.id && this._cdkColumnDef) {\n      this.id = this._cdkColumnDef.name;\n    }\n\n    // Initialize the direction of the arrow and set the view state to be immediately that state.\n    this._updateArrowDirection();\n    this._setAnimationTransitionState(\n        {toState: this._isSorted() ? 'active' : this._arrowDirection});\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /**\n   * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n   * user showing what the active sort will become. If set to false, the arrow will fade away.\n   */\n  _setIndicatorHintVisible(visible: boolean) {\n    // No-op if the sort header is disabled - should not make the hint visible.\n    if (this._isDisabled() && visible) { return; }\n\n    this._showIndicatorHint = visible;\n\n    if (!this._isSorted()) {\n      this._updateArrowDirection();\n      if (this._showIndicatorHint) {\n        this._setAnimationTransitionState({fromState: this._arrowDirection, toState: 'hint'});\n      } else {\n        this._setAnimationTransitionState({fromState: 'hint', toState: this._arrowDirection});\n      }\n    }\n  }\n\n  /**\n   * Sets the animation transition view state for the arrow's position and opacity. If the\n   * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n   * no animation appears.\n   */\n  _setAnimationTransitionState(viewState: ArrowViewStateTransition) {\n    this._viewState = viewState;\n\n    // If the animation for arrow position state (opacity/translation) should be disabled,\n    // remove the fromState so that it jumps right to the toState.\n    if (this._disableViewStateAnimation) {\n      this._viewState = {toState: viewState.toState};\n    }\n  }\n\n  /** Triggers the sort on this sort header and removes the indicator hint. */\n  _handleClick() {\n    if (this._isDisabled()) { return; }\n\n    this._sort.sort(this);\n\n    // Do not show the animation if the header was already shown in the right position.\n    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n      this._disableViewStateAnimation = true;\n    }\n\n    // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n    // the direction it is facing.\n    const viewState: ArrowViewStateTransition = this._isSorted() ?\n        {fromState: this._arrowDirection, toState: 'active'} :\n        {fromState: 'active', toState: this._arrowDirection};\n    this._setAnimationTransitionState(viewState);\n\n    this._showIndicatorHint = false;\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  /** Returns the animation state for the arrow direction (indicator and pointers). */\n  _getArrowDirectionState() {\n    return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n  }\n\n  /** Returns the arrow position state (opacity, translation). */\n  _getArrowViewState() {\n    const fromState = this._viewState.fromState;\n    return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n  }\n\n  /**\n   * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n   * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n   * active sorted direction. The reason this is updated through a function is because the direction\n   * should only be changed at specific times - when deactivated but the hint is displayed and when\n   * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n   * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n   * preserving its direction, even though the next sort direction is actually different and should\n   * only be changed once the arrow displays again (hint or activation).\n   */\n  _updateArrowDirection() {\n    this._arrowDirection = this._isSorted() ?\n        this._sort.direction :\n        (this.start || this._sort.start);\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n\n@Directive({\n  selector: '[matStepLabel]',\n})\nexport class MatStepLabel extends CdkStepLabel {\n  constructor(template: TemplateRef<any>) {\n    super(template);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Stepper data that is required for internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** Label that is rendered below optional steps. */\n  optionalLabel: string = 'Optional';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  forwardRef,\n  Inject,\n  Input,\n  ViewEncapsulation,\n  QueryList,\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_margins.left',\n    '[style.margin-right.px]': '_margins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer) {\n    super(changeDetectorRef, container);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers: QueryList<MatSidenav>;\n  @ContentChild(MatSidenavContent) _content: MatSidenavContent;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {ScrollDispatchModule} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    ScrollDispatchModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HammerInput,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nexport class MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSlideToggleMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n    ControlValueAccessor, CanDisable, CanColor, HasTabIndex, CanDisableRipple {\n\n  private onChange = (_: any) => {};\n  private onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _slideRenderer: SlideToggleRenderer;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Reference to the focus state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the slide-toggle element is checked or not */\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\n      new EventEmitter<MatSlideToggleChange>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** Reference to the ripple directive on the thumb container. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string) {\n\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._slideRenderer = new SlideToggleRenderer(this._elementRef, this._platform);\n\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back.\n    if (this._slideRenderer.dragging) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      // For keyboard focus show a persistent ripple as focus indicator.\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      this.onTouched();\n\n      // Fade out and clear the focus ripple if one is currently present.\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this.onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  _onDragStart() {\n    if (!this.disabled) {\n      this._slideRenderer.startThumbDrag(this.checked);\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._slideRenderer.dragging) {\n      this._slideRenderer.updateThumbPosition(event.deltaX);\n    }\n  }\n\n  _onDragEnd() {\n    if (this._slideRenderer.dragging) {\n      const newCheckedValue = this._slideRenderer.dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.checked = newCheckedValue;\n        this._emitChangeEvent();\n      }\n\n      // The drag should be stopped outside of the current event handler, because otherwise the\n      // click event will be fired before and will revert the drag change.\n      setTimeout(() => this._slideRenderer.stopThumbDrag());\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the slide-toggle changes.\n    // Since the slide-toggle uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n\n/**\n * Renderer for the Slide Toggle component, which separates DOM modification in its own class\n */\nclass SlideToggleRenderer {\n\n  /** Reference to the thumb HTMLElement. */\n  private _thumbEl: HTMLElement;\n\n  /** Reference to the thumb bar HTMLElement. */\n  private _thumbBarEl: HTMLElement;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  dragPercentage: number;\n\n  /** Whether the thumb is currently being dragged. */\n  dragging: boolean = false;\n\n  constructor(elementRef: ElementRef, platform: Platform) {\n    // We only need to interact with these elements when we're on the browser, so only grab\n    // the reference in that case.\n    if (platform.isBrowser) {\n      this._thumbEl = elementRef.nativeElement.querySelector('.mat-slide-toggle-thumb-container');\n      this._thumbBarEl = elementRef.nativeElement.querySelector('.mat-slide-toggle-bar');\n    }\n  }\n\n  /** Initializes the drag of the slide-toggle. */\n  startThumbDrag(checked: boolean): void {\n    if (this.dragging) { return; }\n\n    this._thumbBarWidth = this._thumbBarEl.clientWidth - this._thumbEl.clientWidth;\n    this._thumbEl.classList.add('mat-dragging');\n\n    this._previousChecked = checked;\n    this.dragging = true;\n  }\n\n  /** Resets the current drag and returns the new checked value. */\n  stopThumbDrag(): boolean {\n    if (!this.dragging) { return false; }\n\n    this.dragging = false;\n    this._thumbEl.classList.remove('mat-dragging');\n\n    // Reset the transform because the component will take care of the thumb position after drag.\n    this._thumbEl.style.transform = '';\n\n    return this.dragPercentage > 50;\n  }\n\n  /** Updates the thumb containers position from the specified distance. */\n  updateThumbPosition(distance: number): void {\n    this.dragPercentage = this._getDragPercentage(distance);\n    // Calculate the moved distance based on the thumb bar width.\n    const dragX = (this.dragPercentage / 100) * this._thumbBarWidth;\n    this._thumbEl.style.transform = `translate3d(${dragX}px, 0, 0)`;\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlideToggle} from './slide-toggle';\n\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatSlideToggle, MatCommonModule],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  Input,\n  ElementRef,\n  SimpleChanges,\n  OnChanges,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nexport class MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatProgressSpinnerMixinBase = mixinColor(MatProgressSpinnerBase, 'primary');\n\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/material2/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * `<mat-progress-spinner>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[style.width.px]': '_elementSize',\n    '[style.height.px]': '_elementSize',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor,\n  OnChanges {\n\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /** The width and height of the host element. Will grow with stroke width. */\n  _elementSize = BASE_SIZE;\n\n  /** Tracks diameters of existing instances to de-dupe generated styles (default d = 100) */\n  private static diameters = new Set<number>([BASE_SIZE]);\n\n  /**\n   * Used for storing all of the generated keyframe animations.\n   * @dynamic\n   */\n  private static styleTag: HTMLStyleElement|null = null;\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number { return this._diameter; }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    if (!this._fallbackAnimation && !MatProgressSpinner.diameters.has(this._diameter)) {\n      this._attachStyleNode();\n    }\n    this._updateElementSize();\n  }\n  private _diameter = BASE_SIZE;\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n\n    super(_elementRef);\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    _elementRef.nativeElement.classList.add(animationClass);\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.strokeWidth || changes.diameter) {\n      this._updateElementSize();\n    }\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this._elementSize * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    let styleTag = MatProgressSpinner.styleTag;\n\n    if (!styleTag) {\n      styleTag = this._document.createElement('style');\n      this._document.head.appendChild(styleTag);\n      MatProgressSpinner.styleTag = styleTag;\n    }\n\n    if (styleTag && styleTag.sheet) {\n      (styleTag.sheet as CSSStyleSheet).insertRule(this._getAnimationText(), 0);\n    }\n\n    MatProgressSpinner.diameters.add(this.diameter);\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n\n  /** Updates the spinner element size based on its diameter. */\n  private _updateElementSize() {\n    this._elementSize = this._diameter + Math.max(this.strokeWidth - BASE_STROKE_WIDTH, 0);\n  }\n}\n\n\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[style.width.px]': '_elementSize',\n    '[style.height.px]': '_elementSize',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any) {\n    super(elementRef, platform, document);\n    this.mode = 'indeterminate';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  constructor(\n    /** The MatRadioButton that emits the change event. */\n    public source: MatRadioButton,\n    /** The value of the MatRadioButton. */\n    public value: any) {}\n}\n\n\n// Boilerplate for applying mixins to MatRadioGroup.\n/** @docs-private */\nexport class MatRadioGroupBase { }\nexport const _MatRadioGroupMixinBase = mixinDisabled(MatRadioGroupBase);\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n  inputs: ['disabled'],\n})\nexport class MatRadioGroup extends _MatRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n  /**\n   * Selected value for group. Should equal the value of the selected radio button if there *is*\n   * a corresponding radio button with a matching value. If there is *not* such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n  set labelPosition(v) {\n    this._labelPosition = v === 'before' ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /** Value of the radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value != newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /** Whether the radio button is selected. */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected != null && this._selected.value == this._value;\n\n    if (this._radios != null && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value == radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new MatRadioChange(this._selected!, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nexport class MatRadioButtonBase {\n  // Since the disabled property is manually defined for the MatRadioButton and isn't set up in\n  // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n  // defined to properly work.\n  disabled: boolean;\n\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nexport const _MatRadioButtonMixinBase =\n    mixinColor(mixinDisableRipple(mixinTabIndex(MatRadioButtonBase)), 'accent');\n\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['color', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, CanDisableRipple, HasTabIndex {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n\n    if (this._checked != newCheckedState) {\n      this._checked = newCheckedState;\n\n      if (newCheckedState && this.radioGroup && this.radioGroup.value != this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value == this.value) {\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value != value) {\n      this._value = value;\n      if (this.radioGroup != null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value == value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup != null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio. */\n  private _value: any = null;\n\n  /** The child ripple instance. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  /** Reference to the current focus ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Unregister function for _radioDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id != this.id && name == this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    this.change.emit(new MatRadioChange(this, this._value));\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value != this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      if (this.radioGroup) {\n        this.radioGroup._touch();\n      }\n\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material drawers. */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    state('open, open-instant', style({\n      transform: 'translate3d(0, 0, 0)',\n      visibility: 'visible',\n    })),\n    state('void', style({\n      visibility: 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusMonitor, FocusOrigin, FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {CdkScrollable} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {filter, take, startWith, takeUntil, map, debounceTime} from 'rxjs/operators';\nimport {merge, fromEvent, Observable, Subject} from 'rxjs';\nimport {matDrawerAnimations} from './drawer-animations';\n\n\n/** Throws an exception when two MatDrawer are matching the same position. */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/** Result of the toggle promise that indicates the state of the drawer. */\nexport type MatDrawerToggleResult = 'open' | 'close';\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n      providedIn: 'root',\n      factory: () => false,\n    });\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_margins.left',\n    '[style.margin-right.px]': '_margins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContent implements AfterContentInit {\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _margins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) private _container: MatDrawerContainer) {\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMargins.subscribe(margins => {\n      this._margins = margins;\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value: 'start' | 'end') {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value: 'over' | 'push' | 'side') {\n    this._mode = value;\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new EventEmitter<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() readonly openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer's position changes. */\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  readonly _modeChanged = new Subject();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              private _ngZone: NgZone,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n\n    /**\n     * Listen to `keydown` events outside the zone so that change detection is not run every\n     * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n     * and we don't have close disabled.\n     */\n    this._ngZone.runOutsideAngular(() => {\n        fromEvent(this._elementRef.nativeElement, 'keydown').pipe(\n            filter((event: KeyboardEvent) => event.keyCode === ESCAPE && !this.disableClose)\n        ).subscribe((event) => this._ngZone.run(() => {\n            this.close();\n            event.stopPropagation();\n        }));\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { this.toggle(coerceBooleanProperty(value)); }\n  private _opened: boolean = false;\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<MatDrawerToggleResult> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<MatDrawerToggleResult> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<MatDrawerToggleResult> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n\n    return new Promise<MatDrawerToggleResult>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n    });\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStarted.emit(event);\n  }\n\n  _onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n        (toState === 'void' && fromState.indexOf('open') === 0)) {\n      this.openedChange.emit(this._opened);\n    }\n  }\n\n  get _width(): number {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n}\n\n\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContainer implements AfterContentInit, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent) _content: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /**\n   * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n   * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n   * mode as well.\n   */\n  @Input()\n  get hasBackdrop() {\n    if (this._backdropOverride == null) {\n      return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n    }\n\n    return this._backdropOverride;\n  }\n  set hasBackdrop(value: any) {\n    this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n  }\n  _backdropOverride: boolean | null;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() readonly backdropClick: EventEmitter<void> = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private readonly _doCheckSubject = new Subject<void>();\n\n  readonly _contentMargins = new Subject<{left: number|null, right: number|null}>();\n\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n  @ViewChild(CdkScrollable) scrollable: CdkScrollable;\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this._updateContentMargins();\n      });\n    }\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this._updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this._updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      takeUntil(this._drawers.changes),\n      filter((event: AnimationEvent) => event.fromState !== event.toState)\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this._updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this._updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add('mat-drawer-opened');\n    } else {\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (!this._dir || this._dir.value == 'ltr') {\n      this._left = this._start;\n      this._right = this._end;\n    } else {\n      this._left = this._end;\n      this._right = this._start;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer))\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||\n           (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end));\n  }\n\n  private _canHaveBackdrop(drawer: MatDrawer): boolean {\n    return drawer.mode !== 'side' || !!this._backdropOverride;\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): drawer is MatDrawer {\n    return drawer != null && drawer.opened;\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  private _updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        let width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        let width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    // Pull back into the NgZone since in some cases we could be outside.\n    this._ngZone.run(() => this._contentMargins.next({left, right}));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelect, MatSelectTrigger} from './select';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by MatTooltip. */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('150ms cubic-bezier(0.0, 0.0, 0.2, 1)')),\n    transition('* => hidden', animate('150ms cubic-bezier(0.4, 0.0, 1, 1)')),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatTooltip, TooltipComponent} from './tooltip';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional } from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable({providedIn: 'root'})\nexport class MatPaginatorIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel: string = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel: string = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel: string = 'Previous page';\n\n  /** A label for the button that moves to the first page. */\n  firstPageLabel: string = 'First page';\n\n  /** A label for the button that moves to the last page. */\n  lastPageLabel: string = 'Last page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatPaginatorIntl} from './paginator-intl';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatPaginator implements OnInit, OnDestroy {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(value: number) {\n    this._pageIndex = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  _pageIndex: number = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(value: number) {\n    this._length = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  _length: number = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(value: number) {\n    this._pageSize = coerceNumberProperty(value);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(value: number[]) {\n    this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Whether to hide the page size selection UI from the user. */\n  @Input()\n  get hidePageSize(): boolean { return this._hidePageSize; }\n  set hidePageSize(value: boolean) {\n    this._hidePageSize = coerceBooleanProperty(value);\n  }\n  private _hidePageSize = false;\n\n\n  /** Whether to show the first/last buttons UI to the user. */\n  @Input()\n  get showFirstLastButtons(): boolean { return this._showFirstLastButtons; }\n  set showFirstLastButtons(value: boolean) {\n    this._showFirstLastButtons = coerceBooleanProperty(value);\n  }\n  private _showFirstLastButtons = false;\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() readonly page: EventEmitter<PageEvent> = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage(): void {\n    if (!this.hasNextPage()) { return; }\n    this.pageIndex++;\n    this._emitPageEvent();\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage(): void {\n    if (!this.hasPreviousPage()) { return; }\n    this.pageIndex--;\n    this._emitPageEvent();\n  }\n\n  /** Move to the first page if not already there. */\n  firstPage(): void {\n    // hasPreviousPage being false implies at the start\n    if (!this.hasPreviousPage()) { return; }\n    this.pageIndex = 0;\n    this._emitPageEvent();\n  }\n\n  /** Move to the last page if not already there. */\n  lastPage(): void {\n    // hasNextPage being false implies at the end\n    if (!this.hasNextPage()) { return; }\n    this.pageIndex = this.getNumberOfPages();\n    this._emitPageEvent();\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage(): boolean {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage(): boolean {\n    const numberOfPages = this.getNumberOfPages();\n    return this.pageIndex < numberOfPages && this.pageSize != 0;\n  }\n\n  /** Calculate the number of pages */\n  getNumberOfPages(): number {\n    return Math.ceil(this.length / this.pageSize) - 1;\n  }\n\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n\n    this.pageSize = pageSize;\n    this._emitPageEvent();\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) == -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent() {\n    this.page.emit({\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Input,\n  ViewEncapsulation\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\n\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nexport class MatProgressBarBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\nexport const _MatProgressBarMixinBase = mixinColor(MatProgressBarBase, 'primary');\n\n/** Counter used to generate unique IDs for progress bars. */\nlet progressbarId = 0;\n\n/**\n * `<mat-progress-bar>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n    'class': 'mat-progress-bar',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor {\n\n  constructor(public _elementRef: ElementRef) {\n    super(_elementRef);\n  }\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) { this._value = clamp(v || 0); }\n  private _value: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue(): number { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n  private _bufferValue: number = 0;\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** The id of the progress bar. */\n  progressbarId = `mat-progress-bar-${progressbarId++}`;\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    const scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode === 'buffer') {\n      const scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ESCAPE, LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {startWith} from 'rxjs/operators';\nimport {switchMap} from 'rxjs/operators';\nimport {take} from 'rxjs/operators';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n  OnInit,\n} from '@angular/core';\nimport {Observable} from 'rxjs';\nimport {Subject} from 'rxjs';\nimport {merge} from 'rxjs';\nimport {Subscription} from 'rxjs';\nimport {matMenuAnimations} from './menu-animations';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MatMenuContent} from './menu-content';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {FocusOrigin} from '@angular/cdk/a11y';\n\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n\n  /** Class to be applied to the menu's backdrop. */\n  backdropClass: string;\n\n  /** Whether the menu has a backdrop. */\n  hasBackdrop?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options', {\n      providedIn: 'root',\n      factory: () => ({\n        overlapTrigger: true,\n        xPosition: 'after',\n        yPosition: 'below',\n        backdropClass: 'cdk-overlay-transparent-backdrop',\n      })\n    });\n\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 2;\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  exportAs: 'matMenu'\n})\nexport class MatMenu implements OnInit, AfterContentInit, MatMenuPanel, OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter' = 'void';\n\n  /** Emits whenever an animation on the menu completes. */\n  _animationDone = new Subject<void>();\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Class to be added to the backdrop element. */\n  @Input() backdropClass: string = this._defaultOptions.backdropClass;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition(): MenuPositionX { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition(): MenuPositionY { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) templateRef: TemplateRef<any>;\n\n  /** List of the items inside of a menu. */\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\n\n  /**\n   * Menu content that will be rendered lazily.\n   * @docs-private\n   */\n  @ContentChild(MatMenuContent) lazyContent: MatMenuContent;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  get overlapTrigger(): boolean { return this._overlapTrigger; }\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /** Whether the menu has a backdrop. */\n  @Input()\n  get hasBackdrop(): boolean | undefined { return this._hasBackdrop; }\n  set hasBackdrop(value: boolean | undefined) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n  private _hasBackdrop: boolean | undefined = this._defaultOptions.hasBackdrop;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    if (classes && classes.length) {\n      this._classList = classes.split(' ').reduce((obj: any, className: string) => {\n        obj[className] = true;\n        return obj;\n      }, {});\n\n      this._elementRef.nativeElement.className = '';\n      this.setPositionClasses();\n    }\n  }\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   * @deletion-target 6.0.0\n   */\n  @Input()\n  get classList(): string { return this.panelClass; }\n  set classList(classes: string) { this.panelClass = classes; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() readonly closed: EventEmitter<void | 'click' | 'keydown' | 'tab'> =\n      new EventEmitter<void | 'click' | 'keydown' | 'tab'>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   * @deletion-target 6.0.0\n   */\n  @Output() close = this.closed;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngOnInit() {\n    this.setPositionClasses();\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatMenuItem>(this.items).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.close.emit('tab'));\n  }\n\n  ngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    if (this.items) {\n      return this.items.changes.pipe(\n        startWith(this.items),\n        switchMap(items => merge(...items.map(item => item._hovered)))\n      );\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this._hovered()));\n  }\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case ESCAPE:\n        this.closed.emit('keydown');\n        event.stopPropagation();\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n    if (this.lazyContent) {\n      this._ngZone.onStable.asObservable()\n        .pipe(take(1))\n        .subscribe(() => this._keyManager.setFocusOrigin(origin).setFirstItemActive());\n    } else {\n      this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n    }\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * It's necessary to set position-based classes to ensure the menu panel animation\n   * folds out from the correct direction.\n   */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    this._classList['mat-menu-before'] = posX === 'before';\n    this._classList['mat-menu-after'] = posX === 'after';\n    this._classList['mat-menu-above'] = posY === 'above';\n    this._classList['mat-menu-below'] = posY === 'below';\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    // @deletion-target 6.0.0 Combine with _resetAnimation.\n    this._panelAnimationState = 'enter';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    // @deletion-target 6.0.0 Combine with _startAnimation.\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone() {\n    this._animationDone.next();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin, isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {filter, take} from 'rxjs/operators';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {Subscription, merge, of as observableOf} from 'rxjs';\nimport {MatMenu} from './menu-directive';\nimport {throwMatMenuMissingError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy', {\n      providedIn: 'root',\n      factory: () => {\n        const overlay = inject(Overlay);\n        return () => overlay.scrollStrategies.reposition();\n      }\n    });\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closeSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  private _openedByMouse: boolean = false;\n\n  /**\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel {\n    return this.menu;\n  }\n\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor') menu: MatMenuPanel;\n\n  /** Data to be passed along to any lazily-rendered content. */\n  @Input('matMenuTriggerData') menuData: any;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() readonly menuOpened: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly onMenuOpen: EventEmitter<void> = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() readonly menuClosed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly onMenuClose: EventEmitter<void> = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _parentMenu: MatMenu,\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality,\n              // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n              private _focusMonitor?: FocusMonitor) {\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n\n    this.menu.close.subscribe(reason => {\n      this._destroyMenu();\n\n      // If a click closed the menu, we should close the entire chain of nested menus.\n      if ((reason === 'click' || reason === 'tab') && this._parentMenu) {\n        this._parentMenu.closed.emit(reason);\n      }\n    });\n\n    if (this.triggersSubmenu()) {\n      // Subscribe to changes in the hovered item in order to toggle the panel.\n      this._hoverSubscription = this._parentMenu._hovered()\n          .pipe(filter(active => active === this._menuItemInstance))\n          .subscribe(() => {\n            this._openedByMouse = true;\n            this.openMenu();\n          });\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._cleanUpSubscriptions();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (this._menuOpen) {\n      return;\n    }\n\n    this._createOverlay().attach(this._portal);\n\n    if (this.menu.lazyContent) {\n      this.menu.lazyContent.attach(this.menuData);\n    }\n\n    this._closeSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n    this._initMenu();\n\n    if (this.menu instanceof MatMenu) {\n      this.menu._startAnimation();\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n  focus(origin: FocusOrigin = 'program') {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._element.nativeElement, origin);\n    } else {\n      this._element.nativeElement.focus();\n    }\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (!this._overlayRef || !this.menuOpen) {\n      return;\n    }\n\n    const menu = this.menu;\n\n    this._resetMenu();\n    this._closeSubscription.unsubscribe();\n    this._overlayRef.detach();\n\n    if (menu instanceof MatMenu) {\n      menu._resetAnimation();\n\n      if (menu.lazyContent) {\n        // Wait for the exit animation to finish before detaching the content.\n        menu._animationDone\n          .pipe(take(1))\n          .subscribe(() => menu.lazyContent!.detach());\n      }\n    } else if (menu.lazyContent) {\n      menu.lazyContent.detach();\n    }\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n    this.menu.focusFirstItem(this._openedByMouse ? 'mouse' : 'program');\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  /**\n   * This method resets the menu when it's closed, most importantly restoring\n   * focus to the menu trigger if the menu was opened via the keyboard.\n   */\n  private _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (!this._openedByMouse) {\n      // Note that the focus style will show up both for `program` and\n      // `keyboard` so we don't have to specify which one it is.\n      this.focus();\n    } else if (!this.triggersSubmenu()) {\n      this.focus('mouse');\n    }\n\n    this._openedByMouse = false;\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as FlexibleConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getPosition(),\n      hasBackdrop: this.menu.hasBackdrop == null ? !this.triggersSubmenu() : this.menu.hasBackdrop,\n      backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n      direction: this.dir,\n      scrollStrategy: this._scrollStrategy()\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: FlexibleConnectedPositionStrategy): void {\n    position.positionChanges.subscribe(change => {\n      const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n      const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n      this.menu.setPositionClasses(posX, posY);\n    });\n  }\n\n  /**\n   * This method builds the position strategy for the overlay, so the menu is properly connected\n   * to the trigger.\n   * @returns ConnectedPositionStrategy\n   */\n  private _getPosition(): FlexibleConnectedPositionStrategy {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    return this._overlay.position()\n        .flexibleConnectedTo(this._element)\n        .withPositions([\n          {originX, originY, overlayX, overlayY, offsetY},\n          {originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY},\n          {\n            originX,\n            originY: originFallbackY,\n            overlayX,\n            overlayY: overlayFallbackY,\n            offsetY: -offsetY\n          },\n          {\n            originX: originFallbackX,\n            originY: originFallbackY,\n            overlayX: overlayFallbackX,\n            overlayY: overlayFallbackY,\n            offsetY: -offsetY\n          }\n        ]);\n  }\n\n  /** Cleans up the active subscriptions. */\n  private _cleanUpSubscriptions(): void {\n    this._closeSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMenu ? this._parentMenu.close : observableOf();\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      this._openedByMouse = true;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatMenuContent} from './menu-content';\nimport {MatMenu} from './menu-directive';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuTrigger} from './menu-trigger';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    MatRippleModule,\n    OverlayModule,\n  ],\n  exports: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent, MatCommonModule],\n  declarations: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent],\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  animateChild,\n  group,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n */\nexport const matSelectAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      transform: 'scaleY(0)',\n      minWidth: '100%',\n      opacity: 0\n    })),\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', group([\n      query('@fadeInContent', animateChild()),\n      animate('150ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n    ])),\n    transition('* => void', [\n      animate('250ms 100ms linear', style({opacity: 0}))\n    ])\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {SPACE, ENTER, HOME, END} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  MatLine,\n  MatLineSetter,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Subscription} from 'rxjs';\n\n\n/** @docs-private */\nexport class MatSelectionListBase {}\nexport const _MatSelectionListMixinBase = mixinDisableRipple(mixinDisabled(MatSelectionListBase));\n\n/** @docs-private */\nexport class MatListOptionBase {}\nexport const _MatListOptionMixinBase = mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-focus]': '_hasFocus',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _selected = false;\n  private _disabled = false;\n\n  /** Whether the option has focus. */\n  _hasFocus: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text') _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Value of the option */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  constructor(private _element: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */\n              @Inject(forwardRef(() => MatSelectionList)) public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    // List options that are selected at initialization can't be reported properly to the form\n    // control. This is because it takes some time until the selection-list knows about all\n    // available options. Also it can happen that the ControlValueAccessor has an initial value\n    // that should be used instead. Deferring the value change report to the next tick ensures\n    // that the form control value is not being overwritten.\n    const wasSelected = this._selected;\n\n    Promise.resolve().then(() => {\n      if (this._selected || wasSelected) {\n        this.selected = true;\n        this._changeDetector.markForCheck();\n      }\n    });\n  }\n\n  ngAfterContentInit() {\n    // TODO: consider turning the setter into a function, it doesn't do anything as a class.\n    // tslint:disable-next-line:no-unused-expression\n    new MatLineSetter(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => this.selected = false);\n    }\n\n    this.selectionList._removeOptionFromList(this);\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? this._text.nativeElement.textContent : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n    }\n  }\n\n  _handleFocus() {\n    this._hasFocus = true;\n    this.selectionList._setFocusedOption(this);\n  }\n\n  _handleBlur() {\n    this._hasFocus = false;\n    this.selectionList._onTouched();\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. */\n  _setSelected(selected: boolean) {\n    if (selected === this._selected) {\n      return;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list',\n    '(focus)': 'focus()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\n    CanDisable, CanDisableRipple, AfterContentInit, ControlValueAccessor, OnDestroy {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** Tabindex of the selection list. */\n  @Input() tabIndex: number = 0;\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Used for storing the values that were assigned before the options were initialized. */\n  private _tempValues: string[]|null;\n\n  private _modelChanges = Subscription.EMPTY;\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  constructor(private _element: ElementRef, @Attribute('tabindex') tabIndex: string) {\n    super();\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options)\n      .withWrap()\n      .withTypeAhead()\n      // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\n      // screenreader users, that allows reading the different options of the list.\n      .skipPredicate(() => false);\n\n    if (this._tempValues) {\n      this._setOptionsFromValues(this._tempValues);\n      this._tempValues = null;\n    }\n\n    // Sync external changes to the model back to the options.\n    this._modelChanges = this.selectedOptions.onChange!.subscribe(event => {\n      if (event.added) {\n        for (let item of event.added) {\n          item.selected = true;\n        }\n      }\n\n      if (event.removed) {\n        for (let item of event.removed) {\n          item.selected = false;\n        }\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this._modelChanges.unsubscribe();\n  }\n\n  /** Focuses the last active list option. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this.options.forEach(option => option._setSelected(true));\n    this._reportValueChange();\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this.options.forEach(option => option._setSelected(false));\n    this._reportValueChange();\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItemIndex(this._getOptionIndex(option));\n  }\n\n  /** Removes an option from the selection list and updates the active item. */\n  _removeOptionFromList(option: MatListOption) {\n    if (option._hasFocus) {\n      const optionIndex = this._getOptionIndex(option);\n\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.setPreviousItemActive();\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.setNextItemActive();\n      }\n    }\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case SPACE:\n      case ENTER:\n        if (!this.disabled) {\n          this._toggleSelectOnFocusedOption();\n\n          // Always prevent space from scrolling the page since the list has focus\n          event.preventDefault();\n        }\n        break;\n      case HOME:\n      case END:\n        event.keyCode === HOME ? this._keyManager.setFirstItemActive() :\n                                 this._keyManager.setLastItemActive();\n        event.preventDefault();\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    if (this.options) {\n      this._onChange(this._getSelectedOptionValues());\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    } else {\n      this._tempValues = values;\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    if (this.options) {\n      this.options.forEach(option => option.disabled = isDisabled);\n    }\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Returns the option with the specified value. */\n  private _getOptionByValue(value: string): MatListOption | undefined {\n    return this.options.find(option => option.value === value);\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values\n      .map(value => this._getOptionByValue(value))\n      .filter(Boolean)\n      .forEach(option => option!._setSelected(true));\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the selected state of the currently focused option. */\n  private _toggleSelectOnFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n      }\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  TemplateRef,\n  ComponentFactoryResolver,\n  ApplicationRef,\n  Injector,\n  ViewContainerRef,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {TemplatePortal, DomPortalOutlet} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\n\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\n@Directive({\n  selector: 'ng-template[matMenuContent]'\n})\nexport class MatMenuContent implements OnDestroy {\n  private _portal: TemplatePortal<any>;\n  private _outlet: DomPortalOutlet;\n\n  constructor(\n    private _template: TemplateRef<any>,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n    private _injector: Injector,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) private _document: any) {}\n\n  /**\n   * Attaches the content with a particular context.\n   * @docs-private\n   */\n  attach(context: any = {}) {\n    if (!this._portal) {\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n    }\n\n    this.detach();\n\n    if (!this._outlet) {\n      this._outlet = new DomPortalOutlet(this._document.createElement('div'),\n          this._componentFactoryResolver, this._appRef, this._injector);\n    }\n\n    const element: HTMLElement = this._template.elementRef.nativeElement;\n\n    // Because we support opening the same menu from different triggers (which in turn have their\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n    // risk it staying attached to a pane that's no longer in the DOM.\n    element.parentNode!.insertBefore(this._outlet.outletElement, element);\n    this._portal.attach(this._outlet, context);\n  }\n\n  /**\n   * Detaches the content.\n   * @docs-private\n   */\n  detach() {\n    if (this._portal.isAttached) {\n      this._portal.detach();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._outlet) {\n      this._outlet.dispose();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  query,\n  group,\n  sequence,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: AnimationTriggerMetadata;\n  readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [\n    state('void', style({\n      opacity: 0,\n      // This starts off from 0.01, instead of 0, because there's an issue in the Angular animations\n      // as of 4.2, which causes the animation to be skipped if it starts from 0.\n      transform: 'scale(0.01, 0.01)'\n    })),\n    transition('void => enter', sequence([\n      query('.mat-menu-content', style({opacity: 0})),\n      animate('100ms linear', style({opacity: 1, transform: 'scale(1, 0.5)'})),\n      group([\n        query('.mat-menu-content', animate('400ms cubic-bezier(0.55, 0, 0.55, 0.2)',\n          style({opacity: 1})\n        )),\n        animate('300ms cubic-bezier(0.25, 0.8, 0.25, 1)', style({transform: 'scale(1, 1)'})),\n      ])\n    ])),\n    transition('* => void', animate('150ms 50ms linear', style({opacity: 0})))\n  ]),\n\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n    // TODO(crisbeto): this is inside the `transformMenu`\n    // now. Remove next time we do breaking changes.\n    state('showing', style({opacity: 1})),\n    transition('void => *', [\n      style({opacity: 0}),\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const transformMenu = matMenuAnimations.transformMenu;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nexport class MatMenuItemBase {}\nexport const _MatMenuItemMixinBase = mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    'role': 'menuitem',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n    '(click)': '_checkDisabled($event)',\n    '(mouseenter)': '_emitHoverEvent()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n\n  private _document: Document;\n\n  /** Stream that emits when the menu item is hovered. */\n  readonly _hovered: Subject<MatMenuItem> = new Subject<MatMenuItem>();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(\n    private _elementRef: ElementRef,\n    @Inject(DOCUMENT) document?: any,\n    private _focusMonitor?: FocusMonitor) {\n\n    // @deletion-target 6.0.0 make `_focusMonitor` and `document` required params.\n    super();\n\n    if (_focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      _focusMonitor.monitor(this._getHostElement(), false);\n    }\n\n    this._document = document;\n  }\n\n  /** Focuses the menu item. */\n  focus(origin: FocusOrigin = 'program'): void {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin);\n    } else {\n      this._getHostElement().focus();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._getHostElement());\n    }\n\n    this._hovered.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  _emitHoverEvent() {\n    if (!this.disabled) {\n      this._hovered.next(this);\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === textNodeType) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, MatLine, MatLineSetter, mixinDisableRipple} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nexport class MatListBase {}\nexport const _MatListMixinBase = mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nexport class MatListItemBase {}\nexport const _MatListItemMixinBase = mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {'class': 'mat-list'},\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    // @deletion-target 7.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\n    '[class.mat-list-item-avatar]': '_avatar',\n    '[class.mat-list-item-with-avatar]': '_avatar',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple {\n  private _isNavList: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n\n  constructor(private _element: ElementRef,\n              @Optional() private _navList: MatNavList) {\n    super();\n    this._isNavList = !!_navList;\n  }\n\n  ngAfterContentInit() {\n    // TODO: consider turning the setter into a function, it doesn't do anything as a class.\n    // tslint:disable-next-line:no-unused-expression\n    new MatLineSetter(this._lines, this._element);\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isNavList || this.disableRipple || this._navList.disableRipple;\n  }\n\n  _handleFocus() {\n    this._element.nativeElement.classList.add('mat-list-item-focus');\n  }\n\n  _handleBlur() {\n    this._element.nativeElement.classList.remove('mat-list-item-focus');\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {catchError} from 'rxjs/operators';\nimport {tap} from 'rxjs/operators';\nimport {finalize} from 'rxjs/operators';\nimport {map} from 'rxjs/operators';\nimport {share} from 'rxjs/operators';\nimport {\n  Injectable,\n  Inject,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {DomSanitizer, SafeResourceUrl} from '@angular/platform-browser';\nimport {Observable} from 'rxjs';\nimport {forkJoin} from 'rxjs';\nimport {of as observableOf} from 'rxjs';\nimport {throwError as observableThrow} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  svgElement: SVGElement | null = null;\n  constructor(public url: SafeResourceUrl) { }\n}\n\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable({providedIn: 'root'})\nexport class MatIconRegistry {\n  private _document: Document;\n\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document: any) {\n      this._document = document;\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    const key = iconKey(namespace, iconName);\n    this._svgIconConfigs.set(key, new SvgIconConfig(url));\n    return this;\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    const config = new SvgIconConfig(url);\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n    return this;\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the `<mat-icon>` element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    let url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeError(safeUrl);\n    }\n\n    let cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg)),\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg)),\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: any): Observable<SVGElement | null> => {\n            let url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the combined Observable won't\n            // necessarily fail.\n            console.log(`Loading icon set URL: ${url} failed: ${err}`);\n            return observableOf(null);\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // If the SVG for this icon set has already been parsed, do nothing.\n    if (config.svgElement) {\n      return observableOf(config.svgElement);\n    }\n\n    return this._fetchUrl(config.url).pipe(map(svgText => {\n      // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n      // only needs to occur if the cache is yet unset.\n      if (!config.svgElement) {\n        config.svgElement = this._svgElementFromString(svgText);\n      }\n\n      return config.svgElement;\n    }));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    const iconSource = iconSet.querySelector('#' + iconName);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.id = '';\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    const div = this._document.createElement('DIV');\n    div.innerHTML = str;\n    const svg = div.querySelector('svg') as SVGElement;\n\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n\n    return svg;\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    let svg = this._svgElementFromString('<svg></svg>');\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finally` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share(),\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), DOCUMENT as InjectionToken<any>],\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nexport class MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatIconMixinBase = mixinColor(MatIconBase);\n\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon',\n    '[class.mat-icon-inline]': 'inline',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, CanColor {\n\n  /**\n   * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n   * the element the icon is contained in.\n   */\n  @Input()\n  get inline(): boolean {\n    return this._inline;\n  }\n  set inline(inline: boolean) {\n    this._inline = coerceBooleanProperty(inline);\n  }\n  private _inline: boolean = false;\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  constructor(\n      elementRef: ElementRef,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   `'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)`\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    if (changes.svgIcon) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    const childCount = layoutElement.childNodes.length;\n\n    // Remove existing child nodes and add the new SVG element. Note that we can't\n    // use innerHTML, because IE will throw if the element has a data binding.\n    for (let i = 0; i < childCount; i++) {\n      layoutElement.removeChild(layoutElement.childNodes[i]);\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\nimport {ICON_REGISTRY_PROVIDER} from './icon-registry';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n  providers: [ICON_REGISTRY_PROVIDER],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements AfterContentInit, ControlValueAccessor, OnDestroy,\n    Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    this.registerDatepicker(value);\n  }\n  _datepicker: MatDatepicker<D>;\n\n  private registerDatepicker(value: MatDatepicker<D>) {\n    if (value) {\n      this._datepicker = value;\n      this._datepicker._registerInput(this);\n    }\n  }\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(value: (date: D | null) => boolean) {\n    this._dateFilter = value;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    let oldDate = this.value;\n    this._value = value;\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    const element = this._elementRef.nativeElement;\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n\n    // We need to null check the `blur` method, because it's undefined during SSR.\n    if (newValue && element.blur) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      element.blur();\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D | null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngAfterContentInit() {\n    if (this._datepicker) {\n      this._datepickerSubscription = this._datepicker._selectedChanged.subscribe((selected: D) => {\n        this.value = selected;\n        this._cvaOnChange(selected);\n        this._onTouched();\n        this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n        this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** @docs-private */\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * @deprecated\n   * @deletion-target 7.0.0 Use `getConnectedOverlayOrigin` instead\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this.getConnectedOverlayOrigin();\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (event.altKey && event.keyCode === DOWN_ARROW) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n    this._value = date;\n    this._cvaOnChange(date);\n    this._valueChange.emit(date);\n    this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /** Returns the palette used by the input's form field, if any. */\n  _getThemePalette() {\n    return this._formField ? this._formField.color : undefined;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n  Directive,\n  ContentChild,\n} from '@angular/core';\nimport {merge} from 'rxjs';\nimport {of as observableOf} from 'rxjs';\nimport {Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class MatDatepickerToggleIcon {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'class': 'mat-datepicker-toggle',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n    '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n    '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon) _customIcon: MatDatepickerToggleIcon;\n\n  constructor(public _intl: MatDatepickerIntl, private _changeDetectorRef: ChangeDetectorRef) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.datepicker) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatCalendar} from './calendar';\nimport {MatCalendarHeader} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {MatDatepicker, MatDatepickerContent} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\nimport {PortalModule} from '@angular/cdk/portal';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    OverlayModule,\n    A11yModule,\n    PortalModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader\n  ],\n  providers: [\n    MatDatepickerIntl,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n    MatCalendarHeader,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input()\n  get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [MatDivider, MatCommonModule],\n  declarations: [MatDivider],\n})\nexport class MatDividerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * The display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the reset of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  Host,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  SimpleChanges,\n  ViewEncapsulation,\n  ViewContainerRef,\n  AfterContentInit,\n  ContentChild,\n} from '@angular/core';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\nimport {filter} from 'rxjs/operators';\nimport {startWith} from 'rxjs/operators';\nimport {MatAccordion} from './accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {matExpansionAnimations} from './expansion-animations';\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  }\n})\nexport class MatExpansionPanel extends CdkAccordionItem\n    implements AfterContentInit, OnChanges, OnDestroy {\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n  private _hideToggle = false;\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordion;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent) _lazyContent: MatExpansionPanelContent;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  constructor(@Optional() @Host() accordion: MatAccordion,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n  }\n\n  /** Whether the expansion indicator should be hidden. */\n  _getHideToggle(): boolean {\n    if (this.accordion) {\n      return this.accordion.hideToggle;\n    }\n    return this.hideToggle;\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._inputChanges.complete();\n  }\n\n  _bodyAnimation(event: AnimationEvent) {\n    const classList = event.element.classList;\n    const cssClass = 'mat-expanded';\n    const {phaseName, toState} = event;\n\n    // Toggle the body's `overflow: hidden` class when closing starts or when expansion ends in\n    // order to prevent the cases where switching too early would cause the animation to jump.\n    // Note that we do it directly on the DOM element to avoid the slight delay that comes\n    // with doing it via change detection.\n    if (phaseName === 'done' && toState === 'expanded') {\n      classList.add(cssClass);\n    } else if (phaseName === 'start' && toState === 'collapsed') {\n      classList.remove(cssClass);\n    }\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {filter} from 'rxjs/operators';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge} from 'rxjs';\nimport {Subscription} from 'rxjs';\nimport {MatExpansionPanel} from './expansion-panel';\nimport {matExpansionAnimations} from './expansion-animations';\n\n\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'panel.disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n    @Host() public panel: MatExpansionPanel,\n    private _element: ElementRef,\n    private _focusMonitor: FocusMonitor,\n    private _changeDetectorRef: ChangeDetectorRef) {\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to  subscribe and trigger change detection manually.\n    this._parentChangeSubscription = merge(\n      panel.opened,\n      panel.closed,\n      panel._inputChanges.pipe(filter(changes => !!(changes.hideToggle || changes.disabled)))\n    )\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    _focusMonitor.monitor(_element.nativeElement);\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    this.panel.toggle();\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        event.preventDefault();\n        this._toggle();\n        break;\n      default:\n        return;\n    }\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n}\n\n/**\n * `<mat-panel-description>`\n *\n * This direction is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host : {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * `<mat-panel-title>`\n *\n * This direction is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host : {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanel, MatExpansionPanelActionRow} from './expansion-panel';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatLine, MatLineSetter} from '@angular/material/core';\nimport {coerceToNumber} from './grid-list-measure';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(private _element: ElementRef) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value: number) { this._rowspan = coerceToNumber(value); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value: number) { this._colspan = coerceToNumber(value); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    this._element.nativeElement.style[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridTileText implements AfterContentInit {\n  /**\n   *  Helper that watches the number of lines in a text area and sets\n   * a class on the host element that matches the line count.\n   */\n  _lineSetter: MatLineSetter;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef) {}\n\n  ngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {QueryList} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    let lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  constructor(numColumns: number, tiles: QueryList<MatGridTile>) {\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    let gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile.\n    } while (gapEndIndex - gapStartIndex < tileCols);\n\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'rtl' ? 'right' : 'left';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number);\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList);\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height. */\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['paddingBottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('marginTop', null);\n      tile._setStyle('paddingTop', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string { return `calc(${exp})`; }\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return (value.match(/px|em|rem/)) ? value : value + 'px';\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  coerceToString,\n  coerceToNumber,\n} from './grid-list-measure';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridList implements OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef, @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols(): number { return this._cols; }\n  set cols(value: number) { this._cols = coerceToNumber(value); }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize(): string { return this._gutter; }\n  set gutterSize(value: string) { this._gutter = coerceToString(value); }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  set rowHeight(value: string | number) {\n    const newValue = coerceToString(value);\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    const tracker = new TileCoordinator(this.cols, this._tiles);\n    const direction = this._dir ? this._dir.value : 'ltr';\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    this._tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      this._element.nativeElement.style[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new year is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody;\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n    this._focusActiveCell();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\n    let activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n        this._yearSelected(this._dateAdapter.getYear(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  _getActiveCell(): number {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  private _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _shouldEnableYear(year: number) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null ||\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n      return false;\n    }\n\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody;\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n    this._focusActiveCell();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    const normalizedDate =\n          this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    this.monthSelected.emit(normalizedDate);\n\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n        this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  private _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (month === undefined || month === null ||\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentPortal, ComponentType, Portal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  forwardRef,\n  Host,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {takeUntil} from 'rxjs/operators';\nimport {Observable, Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView, yearsPerPage} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n/** Default header for MatCalendar */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar-header',\n  templateUrl: 'calendar-header.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarHeader<D> implements OnDestroy {\n  /** Subject that emits when the component has been destroyed. */\n  private _destroyed = new Subject<void>();\n\n  constructor(private _intl: MatDatepickerIntl,\n              @Host() @Inject(forwardRef(() => MatCalendar)) public calendar: MatCalendar<D>,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n    this.calendar.stateChanges.pipe(takeUntil(this._destroyed))\n        .subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  /** The label for the current calendar view. */\n  get periodButtonText(): string {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter\n          .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\n              .toLocaleUpperCase();\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYearName(this.calendar.activeDate);\n    }\n    const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n    const lastYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  get periodButtonLabel(): string {\n    return this.calendar.currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the the previous button. */\n  get prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** The label for the the next button. */\n  get nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** Handles user clicks on the period label. */\n  currentPeriodClicked(): void {\n    this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  previousClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage\n            );\n  }\n\n  /** Handles user clicks on the next button. */\n  nextClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate,\n                    this.calendar.currentView == 'year' ? 1 : yearsPerPage\n            );\n  }\n\n  /** Whether the previous period button is enabled. */\n  previousEnabled(): boolean {\n    if (!this.calendar.minDate) {\n      return true;\n    }\n    return !this.calendar.minDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  nextEnabled(): boolean {\n    return !this.calendar.maxDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n}\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, OnDestroy, OnChanges {\n  /** An input indicating the type of the header component, if set. */\n  @Input() headerComponent: ComponentType<any>;\n\n  /** A portal containing the header component type for this calendar. */\n  _calendarHeaderPortal: Portal<any>;\n\n  private _intlChanges: Subscription;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView) multiYearView: MatMultiYearView<D>;\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get activeDate(): D { return this._clampedActiveDate; }\n  set activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n    this._stateChanges.next();\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  currentView: 'month' | 'year' | 'multi-year';\n\n  /**\n   * An observable that emits whenever there is a state change that the header may need to respond\n   * to.\n   */\n  get stateChanges(): Observable<void> {\n    return this._stateChanges.asObservable();\n  }\n  private _stateChanges = new Subject<void>();\n\n  constructor(_intl: MatDatepickerIntl,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => {\n      changeDetectorRef.markForCheck();\n      this._stateChanges.next();\n    });\n  }\n\n  ngAfterContentInit() {\n    this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || MatCalendarHeader);\n\n    this.activeDate = this.startAt || this._dateAdapter.today();\n    this.currentView = this.startView;\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change = changes.minDate || changes.maxDate || changes.dateFilter;\n\n    if (change && !change.firstChange) {\n      const view = this.monthView || this.yearView || this.multiYearView;\n\n      if (view) {\n        view._init();\n      }\n    }\n\n    this._stateChanges.next();\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles year/month selection in the multi-year/year views. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this.activeDate = date;\n    this.currentView = view;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material datepicker. */\nexport const matDatepickerAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n  /** Transforms the height of the datepicker's calendar. */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({opacity: 0, transform: 'scale(1, 0)'})),\n    state('enter', style({opacity: 1, transform: 'scale(1, 1)'})),\n    transition('void => enter', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n    transition('* => void', animate('100ms linear', style({opacity: 0})))\n  ]),\n\n  /** Fades in the content of the calendar. */\n  fadeInCalendar: trigger('fadeInCalendar', [\n    state('void', style({opacity: 0})),\n    state('enter', style({opacity: 1})),\n    transition('void => *', animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {take, filter} from 'rxjs/operators';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, DateAdapter, mixinColor, ThemePalette} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {merge, Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatCalendar} from './calendar';\nimport {matDatepickerAnimations} from './datepicker-animations';\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy', {\n      providedIn: 'root',\n      factory: () => {\n        const overlay = inject(Overlay);\n        return () => overlay.scrollStrategies.reposition();\n      }\n    });\n\n// Boilerplate for applying mixins to MatDatepickerContent.\n/** @docs-private */\nexport class MatDatepickerContentBase {\n  constructor(public _elementRef: ElementRef) { }\n}\nexport const _MatDatepickerContentMixinBase = mixinColor(MatDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[@transformPanel]': '\"enter\"',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n    '[class.mat-datepicker-content-above]': '_isAbove',\n  },\n  animations: [\n    matDatepickerAnimations.transformPanel,\n    matDatepickerAnimations.fadeInCalendar,\n  ],\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color'],\n})\nexport class MatDatepickerContent<D> extends _MatDatepickerContentMixinBase\n  implements AfterContentInit, CanColor, OnInit, OnDestroy {\n\n  /** Subscription to changes in the overlay's position. */\n  private _positionChange: Subscription|null;\n\n  /** Reference to the internal calendar component. */\n  @ViewChild(MatCalendar) _calendar: MatCalendar<D>;\n\n  /** Reference to the datepicker that created the overlay. */\n  datepicker: MatDatepicker<D>;\n\n  /** Whether the datepicker is above or below the input. */\n  _isAbove: boolean;\n\n  constructor(\n    elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone) {\n    super(elementRef);\n  }\n\n  ngOnInit() {\n    if (!this.datepicker._popupRef || this._positionChange) {\n      return;\n    }\n\n    const positionStrategy =\n      this.datepicker._popupRef.getConfig().positionStrategy! as FlexibleConnectedPositionStrategy;\n\n    this._positionChange = positionStrategy.positionChanges.subscribe(change => {\n      const isAbove = change.connectionPair.overlayY === 'bottom';\n\n      if (isAbove !== this._isAbove) {\n        this._ngZone.run(() => {\n          this._isAbove = isAbove;\n          this._changeDetectorRef.markForCheck();\n        });\n      }\n    });\n  }\n\n  ngAfterContentInit() {\n    this._focusActiveCell();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  private _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._elementRef.nativeElement.querySelector('.mat-calendar-body-active').focus();\n      });\n    });\n  }\n\n  ngOnDestroy() {\n    if (this._positionChange) {\n      this._positionChange.unsubscribe();\n      this._positionChange = null;\n    }\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDatepicker<D> implements OnDestroy, CanColor {\n  /** An input indicating the type of the custom header component for the calendar, if set. */\n  @Input() calendarHeaderComponent: ComponentType<any>;\n\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' = 'month';\n\n  /** Color palette to use on the datepicker's calendar. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n        (this._datepickerInput ? this._datepickerInput._getThemePalette() : undefined);\n  }\n  set color(value: ThemePalette) {\n    this._color = value;\n  }\n  _color: ThemePalette;\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits selected year in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected month in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { value ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<MatDatepickerContent<D>> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** Reference to the component instantiated in popup mode. */\n  private _popupComponentRef: ComponentRef<MatDatepickerContent<D>> | null;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  /** Subscription to value changes in the associated input element. */\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  /** Emits new selected date when selected date changes. */\n  readonly _selectedChanged = new Subject<D>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n      this._popupComponentRef = null;\n    }\n  }\n\n  /** Selects the given date */\n  _select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this._selectedChanged.next(date);\n    }\n  }\n\n  /** Emits the selected year in multiyear view */\n  _selectYear(normalizedYear: D): void {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Emits selected month in year view */\n  _selectMonth(normalizedMonth: D): void {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    this._dialogRef = this._dialog.open<MatDatepickerContent<D>>(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n    if (this._dialogRef) {\n      this._dialogRef.afterClosed().subscribe(() => this.close());\n      this._dialogRef.componentInstance.datepicker = this;\n    }\n    this._setColor();\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal<MatDatepickerContent<D>>(MatDatepickerContent,\n                                                                          this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\n      this._popupComponentRef.instance.datepicker = this;\n      this._setColor();\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir ? this._dir.value : 'ltr',\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE))\n    ).subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .flexibleConnectedTo(this._datepickerInput.getPopupConnectionElementRef())\n      .withFlexibleHeight(false)\n      .withFlexibleWidth(false)\n      .withViewportMargin(8)\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom'\n        },\n        {\n          originX: 'end',\n          originY: 'bottom',\n          overlayX: 'end',\n          overlayY: 'top'\n        },\n        {\n          originX: 'end',\n          originY: 'top',\n          overlayX: 'end',\n          overlayY: 'bottom'\n        }\n      ]);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Passes the current theme color along to the calendar overlay. */\n  private _setColor(): void {\n    const color = this.color;\n    if (this._popupComponentRef) {\n      this._popupComponentRef.instance.color = color;\n    }\n    if (this._dialogRef) {\n      this._dialogRef.componentInstance.color = color;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AnimationEvent} from '@angular/animations';\nimport {matDialogAnimations} from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.slideDialog],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    '[attr.id]': '_id',\n    '[attr.role]': '_config?.role',\n    '[attr.aria-labelledby]': '_config?.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config?.ariaLabel',\n    '[attr.aria-describedby]': '_config?.ariaDescribedBy || null',\n    '[@slideDialog]': '_state',\n    '(@slideDialog.start)': '_onAnimationStart($event)',\n    '(@slideDialog.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** The dialog configuration. */\n  _config: MatDialogConfig;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null = null;\n\n  /** ID for the container DOM element. */\n  _id: string;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any) {\n\n    super();\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Note that there is no focus method when rendering on the server.\n      if (this._elementRef.nativeElement.focus) {\n        // Move focus onto the dialog immediately in order to prevent the user from accidentally\n        // opening multiple dialogs at the same time. Needs to be async, because the element\n        // may not be focusable immediately.\n        Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n      }\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef, GlobalPositionStrategy} from '@angular/cdk/overlay';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Location} from '@angular/common';\nimport {filter} from 'rxjs/operators';\nimport {take} from 'rxjs/operators';\nimport {DialogPosition} from './dialog-config';\nimport {Observable, SubscriptionLike} from 'rxjs';\nimport {Subject} from 'rxjs';\nimport {Subscription} from 'rxjs';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private readonly _afterOpen = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private readonly _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private readonly _beforeClose = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  /** Subscription to changes in the user's location. */\n  private _locationChanges: SubscriptionLike = Subscription.EMPTY;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    public _containerInstance: MatDialogContainer,\n    location?: Location,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Pass the id along to the container.\n    _containerInstance._id = id;\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpen.next();\n      this._afterOpen.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._overlayRef.dispose();\n      this._locationChanges.unsubscribe();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose))\n      .subscribe(() => this.close());\n\n    if (location) {\n      // Close the dialog when the user goes forwards/backwards in history or when the location\n      // hash changes. Note that this usually doesn't include clicking on links (unless the user\n      // is using the `HashLocationStrategy`).\n      this._locationChanges = location.subscribe(() => {\n        if (this._containerInstance._config.closeOnNavigation) {\n          this.close();\n        }\n      });\n    }\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._beforeClose.next(dialogResult);\n      this._beforeClose.complete();\n      this._overlayRef.detachBackdrop();\n    });\n\n    this._containerInstance._startExitAnimation();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpen(): Observable<void> {\n    return this._afterOpen.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this._beforeClose.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = 'auto', height: string = 'auto'): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayContainer,\n  OverlayRef,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  ComponentRef,\n  Inject,\n  inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {Observable} from 'rxjs';\nimport {defer} from 'rxjs';\nimport {of as observableOf} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {Subject} from 'rxjs';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy', {\n      providedIn: 'root',\n      factory: () => {\n        const overlay = inject(Overlay);\n        return () => overlay.scrollStrategies.block();\n      }\n    });\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private readonly _afterAllClosedAtThisLevel = new Subject<void>();\n  private readonly _afterOpenAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpen : this._afterOpenAtThisLevel;\n  }\n\n  get _afterAllClosed() {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  readonly afterAllClosed: Observable<void> = defer<void>(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined)));\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() private _location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) private _scrollStrategy,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {}\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T> {\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef =\n        this._attachDialogContent<T>(componentOrTemplateRef, dialogContainer, overlayRef, config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpen.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    let i = this.openDialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      this.openDialogs[i].close();\n    }\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    let containerPortal = new ComponentPortal(MatDialogContainer, config.viewContainerRef);\n    let containerRef: ComponentRef<MatDialogContainer> = overlay.attach(containerPortal);\n    containerRef.instance._config = config;\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef = new MatDialogRef<T>(overlayRef, dialogContainer, this._location, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap();\n\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    injectionTokens\n      .set(MatDialogContainer, dialogContainer)\n      .set(MAT_DIALOG_DATA, config.data)\n      .set(MatDialogRef, dialogRef);\n\n    if (!userInjector || !userInjector.get(Directionality, null)) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string = 'Close dialog';\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes._matDialogClose || changes._matDialogCloseResult;\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent {}\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions {}\n\n\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MatDialog} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogActions,\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTextareaAutosize} from '@angular/cdk/text-field';\nimport {Directive, Input} from '@angular/core';\n\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deletion-target 7.0.0 deprecate in favor of `cdkTextareaAutosize`.\n */\n@Directive({\n  selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n  exportAs: 'matTextareaAutosize',\n  inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n  host: {\n    'class': 'cdk-textarea-autosize mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n    '(input)': '_noopInputHandler()',\n  },\n})\nexport class MatTextareaAutosize extends CdkTextareaAutosize {\n  @Input()\n  get matAutosizeMinRows(): number { return this.minRows; }\n  set matAutosizeMinRows(value: number) { this.minRows = value; }\n\n  @Input()\n  get matAutosizeMaxRows(): number { return this.maxRows; }\n  set matAutosizeMaxRows(value: number) { this.maxRows = value; }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Self,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {CanUpdateErrorState, ErrorStateMatcher, mixinErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs';\nimport {AutofillMonitor} from '@angular/cdk/text-field';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nexport class MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatInputMixinBase = mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput]`,\n  exportAs: 'matInput',\n  host: {\n    /**\n     * @deletion-target 7.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n     */\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[attr.placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[readonly]': 'readonly',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, OnInit, DoCheck, CanUpdateErrorState {\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _inputValueAccessor: {value: any};\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  focused: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly stateChanges: Subject<void> = new Subject<void>();\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  controlType: string = 'mat-input';\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  autofilled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n  protected _disabled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n  protected _id: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input() placeholder: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  protected _required = false;\n\n  /** Input type of the element. */\n  @Input()\n  get type(): string { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      this._elementRef.nativeElement.type = this._type;\n    }\n  }\n  protected _type = 'text';\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): string { return this._inputValueAccessor.value; }\n  set value(value: string) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\n  private _readonly = false;\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(protected _elementRef: ElementRef,\n              protected _platform: Platform,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n              private _autofillMonitor: AutofillMonitor) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || this._elementRef.nativeElement;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n        let el = event.target as HTMLInputElement;\n        if (!el.value && !el.selectionStart && !el.selectionEnd) {\n          // Note: Just setting `0, 0` doesn't fix the issue. Setting `1, 1` fixes it for the first\n          // time that you type text and then hold delete. Toggling to `1, 1` and then back to\n          // `0, 0` seems to completely fix it.\n          el.setSelectionRange(1, 1);\n          el.setSelectionRange(0, 0);\n        }\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n  }\n\n  ngOnInit() {\n    this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n      this.autofilled = event.isAutofilled;\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n    this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n  }\n\n  /** Focuses the input. */\n  focus(): void { this._elementRef.nativeElement.focus(); }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && !this.readonly) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. */\n  protected _isTextarea() {\n    return this._elementRef.nativeElement.nodeName.toLowerCase() === 'textarea';\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n        !this.autofilled;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return this.focused || !this.empty; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() { this.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TextFieldModule} from '@angular/cdk/text-field';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\n\n\n@NgModule({\n  declarations: [MatInput, MatTextareaAutosize],\n  imports: [\n    CommonModule,\n    TextFieldModule,\n    MatFormFieldModule,\n  ],\n  exports: [\n    TextFieldModule,\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher],\n})\nexport class MatInputModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel: string = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel: string = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel: string = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel: string = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel: string = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel: string = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel: string = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel: string = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel: string = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  NgZone,\n} from '@angular/core';\nimport {take} from 'rxjs/operators';\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'attr.aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** Whether to allow selection of disabled cells. */\n  @Input() allowDisabledSelection = false;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  constructor(private _elementRef: ElementRef, private _ngZone: NgZone) { }\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (!this.allowDisabledSelection && !cell.enabled) {\n      return;\n    }\n    this.selectedValueChange.emit(cell.value);\n  }\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  get _firstRowOffset(): number {\n    return this.rows && this.rows.length && this.rows[0].length ?\n        this.numCols - this.rows[0].length : 0;\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._elementRef.nativeElement.querySelector('.mat-calendar-body-active').focus();\n      });\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody;\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n    this._focusActiveCell();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n\n    const isRtl = this._isRtl();\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n              this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n          this._dateSelected(this._dateAdapter.getDate(this._activeDate));\n          this._userSelection.emit();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  private _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(\n            this._dateAdapter.getYear(this.activeDate),\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const enabled = this._shouldEnableDate(date);\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));\n    }\n  }\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterViewInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nexport class MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatCheckboxMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://www.google.com/design/spec/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewInit, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  private _required: boolean;\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change: EventEmitter<MatCheckboxChange> =\n      new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  _onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Reference to the focused state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value != this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked: boolean = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean { return this._indeterminate; }\n  set indeterminate(value: boolean) {\n    const changed = value != this._indeterminate;\n    this._indeterminate = value;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n  private _indeterminate: boolean = false;\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the checkbox changes.\n    // Since the checkbox uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n    }\n  }\n\n  private _emitChangeEvent() {\n    let event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this.ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      this._removeFocusRipple();\n      this._onTouched();\n    }\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n\n  /** Fades out the focus state ripple. */\n  private _removeFocusRipple(): void {\n    if (this._focusRipple) {\n      this._focusRipple.fadeOut();\n      this._focusRipple = null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule],\n  declarations: [MatCheckbox, MatCheckboxRequiredValidator],\n})\nexport class MatCheckboxModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nexport class MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatChipMixinBase =\n    mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\n\nconst CHIP_ATTRIBUTE_NAMES = ['mat-basic-chip'];\n\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-avatar, [matChipAvatar]',\n  host: {'class': 'mat-chip-avatar'}\n})\nexport class MatChipAvatar {}\n\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n  host: {'class': 'mat-chip-trailing-icon'}\n})\nexport class MatChipTrailingIcon {}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled', 'disableRipple'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[class.mat-chip-with-avatar]': 'avatar',\n    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[class.mat-chip-disabled]': 'disabled',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n  },\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable, CanDisableRipple, RippleTarget {\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /** Reference to the RippleRenderer for the chip. */\n  private _chipRipple: RippleRenderer;\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple;\n  }\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether the chip list is selectable */\n  chipListSelectable: boolean = true;\n\n  /** The chip avatar */\n  @ContentChild(MatChipAvatar) avatar: MatChipAvatar;\n\n  /** The chip's trailing icon. */\n  @ContentChild(MatChipTrailingIcon) trailingIcon: MatChipTrailingIcon;\n\n  /** The chip's remove toggler. */\n  @ContentChild(forwardRef(() => MatChipRemove)) removeIcon: MatChipRemove;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) {\n    this._selected = coerceBooleanProperty(value);\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: value\n    });\n  }\n  protected _selected: boolean = false;\n\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n  @Input()\n  get value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(value: any) { this._value = value; }\n  protected _value: any;\n\n  /**\n   * Whether or not the chip is selectable. When a chip is not selectable,\n   * changes to it's selected state are always ignored. By default a chip is\n   * selectable, and it becomes non-selectable if it's parent chip list is\n   * not selectable.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable && this.chipListSelectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  protected _selectable: boolean = true;\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (removed) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  protected _removable: boolean = true;\n\n  /** Emits when the chip is focused. */\n  readonly _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  readonly _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\n      new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** Emitted when a chip is to be removed. */\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** The ARIA selected applied to the chip. */\n  get ariaSelected(): string | null {\n    return this.selectable ? this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions) {\n    super(_elementRef);\n\n    this._addHostClassName();\n\n    this._chipRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._chipRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    if (globalOptions) {\n      this.rippleConfig = {\n        speedFactor: globalOptions.baseSpeedFactor,\n        animation: globalOptions.animation,\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n      };\n    }\n  }\n\n  _addHostClassName() {\n    // Add class for the different chips\n    for (const attr of CHIP_ATTRIBUTE_NAMES) {\n      if (this._elementRef.nativeElement.hasAttribute(attr) ||\n        this._elementRef.nativeElement.tagName.toLowerCase() === attr) {\n        (this._elementRef.nativeElement as HTMLElement).classList.add(attr);\n        return;\n      }\n    }\n    (this._elementRef.nativeElement as HTMLElement).classList.add('mat-standard-chip');\n  }\n\n  ngOnDestroy() {\n    this.destroyed.emit({chip: this});\n    this._chipRipple._removeTriggerEvents();\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    this._selected = true;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: true\n    });\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    this._selected = false;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: false\n    });\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    this._selected = true;\n    // Emit select event when selected changes.\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: true,\n      selected: true\n    });\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    if (!this._hasFocus) {\n      this._elementRef.nativeElement.focus();\n      this._onFocus.next({chip: this});\n    }\n    this._hasFocus = true;\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Ensures events fire properly upon click. */\n  _handleClick(event: Event) {\n    // Check disabled\n    if (this.disabled) {\n      return;\n    }\n\n    event.preventDefault();\n    event.stopPropagation();\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    this._hasFocus = false;\n    this._onBlur.next({chip: this});\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove mat-chip-trailing-icon',\n    '(click)': '_handleClick()',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {\n  }\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(): void {\n    if (this._parentChip.removable) {\n      this._parentChip.remove();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** Default options, for the chips module, that can be overridden. */\nexport interface MatChipsDefaultOptions {\n  /** The list of key codes that will trigger a chipEnd event. */\n  separatorKeyCodes: number[];\n}\n\n/** Injection token to be used to override the default options for the chips module. */\nexport const MAT_CHIPS_DEFAULT_OPTIONS =\n    new InjectionToken<MatChipsDefaultOptions>('mat-chips-default-options');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {CanUpdateErrorState, ErrorStateMatcher, mixinErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Observable} from 'rxjs';\nimport {merge} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {Subscription} from 'rxjs';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipInput} from './chip-input';\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nexport class MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatChipListMixinBase = mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for it's similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': '_tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)',\n    '[id]': '_uid',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n  ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly controlType: string = 'mat-chip-list';\n\n  /** When a chip is destroyed, we track the index so we can focus the appropriate next chip. */\n  protected _lastDestroyedIndex: number|null = null;\n\n  /** Track which chips we're listening to for focus/destruction. */\n  protected _chipSet: WeakMap<MatChip, boolean> = new WeakMap();\n\n  /** Subscription to tabbing out from the chip list. */\n  private _tabOutSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the chip list. */\n  private _changeSubscription: Subscription;\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription | null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription | null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription | null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription | null;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipInput;\n\n  /** Uid of the chip list */\n  _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The ARIA role applied to the chip list. */\n  get role(): string | null { return this.empty ? null : 'listbox'; }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n  private _multiple: boolean = false;\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith(): (o1: any, o2: any) => boolean { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  protected _value: any;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get id(): string {\n    return this._chipInput ? this._chipInput.id : this._uid;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  protected _required: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  protected _placeholder: string;\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return this.chips.some(chip => chip._hasFocus) ||\n      (this._chipInput && this._chipInput.focused);\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  protected _disabled: boolean = false;\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip list is selectable. When a chip list is not selectable,\n   * the selected states for all the chips inside the chip list are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n    if (this.chips) {\n      this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n    }\n  }\n  protected _selectable: boolean = true;\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroyed));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipListChange> =\n      new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips)\n      .withWrap()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._tabOutSubscription = this._keyManager.tabOut.subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => this._tabIndex = this._userTabIndex || 0);\n    });\n\n    // When the list changes, re-subscribe\n    this._changeSubscription = this.chips.changes.pipe(startWith(null)).subscribe(() => {\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabOutSubscription.unsubscribe();\n\n    if (this._changeSubscription) {\n      this._changeSubscription.unsubscribe();\n    }\n\n    if (this._chipRemoveSubscription) {\n      this._chipRemoveSubscription.unsubscribe();\n    }\n\n    this._dropSubscriptions();\n    this.stateChanges.complete();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipInput): void {\n    this._chipInput = inputElement;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._elementRef.nativeElement.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() { this.focus(); }\n\n  /**\n   * Focuses the the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(): void {\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput();\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput() {\n    if (this._chipInput) {\n      this._chipInput.focus();\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    const target = event.target as HTMLElement;\n\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n    } else if (target && target.classList.contains('mat-chip')) {\n      this._keyManager.onKeydown(event);\n      this.stateChanges.next();\n    }\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * Update key manager's active item when chip is deleted.\n   * If the deleted chip is the last chip in chip list, focus the new last chip.\n   * Otherwise focus the next chip in the list.\n   * Save `_lastDestroyedIndex` so we can set the correct focus.\n   */\n  protected _updateKeyManager(chip: MatChip) {\n    let chipIndex: number = this.chips.toArray().indexOf(chip);\n    if (this._isValidIndex(chipIndex)) {\n      if (chip._hasFocus) {\n        // Check whether the chip is not the last item\n        if (chipIndex < this.chips.length - 1) {\n          this._keyManager.setActiveItem(chipIndex);\n        } else if (chipIndex - 1 >= 0) {\n          this._keyManager.setActiveItem(chipIndex - 1);\n        }\n      }\n      if (this._keyManager.activeItemIndex === chipIndex) {\n        this._lastDestroyedIndex = chipIndex;\n      }\n    }\n  }\n\n  /**\n   * Checks to see if a focus chip was recently destroyed so that we can refocus the next closest\n   * one.\n   */\n  protected _updateFocusForDestroyedChips() {\n    let chipsArray = this.chips;\n\n    if (this._lastDestroyedIndex != null && chipsArray.length > 0 && this.focused) {\n      // Check whether the destroyed chip was the last item\n      const newFocusIndex = Math.min(this._lastDestroyedIndex, chipsArray.length - 1);\n      this._keyManager.setActiveItem(newFocusIndex);\n      let focusChip = this._keyManager.activeItem;\n      // Focus the chip\n      if (focusChip) {\n        focusChip.focus();\n      }\n    }\n\n    // Reset our destroyed index\n    this._lastDestroyedIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChip);\n        }\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    this._keyManager.setActiveItem(-1);\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n      this._updateKeyManager(event.chip);\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Directive, ElementRef, EventEmitter, Input, Output, Inject} from '@angular/core';\nimport {MatChipList} from './chip-list';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n    '[id]': 'id',\n  }\n})\nexport class MatChipInput {\n  /** Whether the control is focused. */\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  // TODO(tinayuangao): Support Set here\n  @Input('matChipInputSeparatorKeyCodes')\n  separatorKeyCodes: number[] = this._defaultOptions.separatorKeyCodes;\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /** The input's placeholder text. */\n  @Input() placeholder: string = '';\n\n  /** Unique id for the input. */\n  @Input() id: string = `mat-chip-list-input-${nextUniqueId++}`;\n\n  /** Whether the input is empty. */\n  get empty(): boolean { return !this._inputElement.value; }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(\n    protected _elementRef: ElementRef,\n    @Inject(MAT_CHIPS_DEFAULT_OPTIONS) private _defaultOptions: MatChipsDefaultOptions) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this.separatorKeyCodes.indexOf(event.keyCode) > -1) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  /** Focuses the input. */\n  focus(): void { this._inputElement.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChip, MatChipAvatar, MatChipRemove, MatChipTrailingIcon} from './chip';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipInput} from './chip-input';\nimport {MatChipList} from './chip-list';\n\nconst CHIP_DECLARATIONS = [\n  MatChipList,\n  MatChip,\n  MatChipInput,\n  MatChipRemove,\n  MatChipAvatar,\n  MatChipTrailingIcon,\n];\n\n@NgModule({\n  exports: CHIP_DECLARATIONS,\n  declarations: CHIP_DECLARATIONS,\n  providers: [\n    ErrorStateMatcher,\n    {\n      provide: MAT_CHIPS_DEFAULT_OPTIONS,\n      useValue: {\n        separatorKeyCodes: [ENTER]\n      } as MatChipsDefaultOptions\n    }\n  ]\n})\nexport class MatChipsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking outside to close a modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction;\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /** Whether the dialog should close when the user goes backwards/forwards in history. */\n  closeOnNavigation?: boolean = true;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by MatDialog. */\nexport const matDialogAnimations: {\n  readonly slideDialog: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  slideDialog: trigger('slideDialog', [\n    // Note: The `enter` animation doesn't transition to something like `translate3d(0, 0, 0)\n    // scale(1)`, because for some reason specifying the transform explicitly, causes IE both\n    // to blur the dialog content and decimate the animation performance. Leaving it as `none`\n    // solves both issues.\n    state('enter', style({ transform: 'none', opacity: 1 })),\n    state('void', style({ transform: 'translate3d(0, 25%, 0) scale(0.9)', opacity: 0 })),\n    state('exit', style({ transform: 'translate3d(0, 25%, 0)', opacity: 0 })),\n    transition('* => *', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n/** Default color palette for flat buttons (mat-flat-button) */\nconst DEFAULT_FLAT_BUTTON_COLOR = 'primary';\n\n/**\n * List of classes to add to MatButton instances based on host attributes to\n * style as different variants.\n */\nconst BUTTON_HOST_ATTRIBUTES = [\n  'mat-button',\n  'mat-flat-button',\n  'mat-icon-button',\n  'mat-raised-button',\n  'mat-stroked-button',\n  'mat-mini-fab',\n  'mat-fab',\n];\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nexport class MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatButtonMixinBase = mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\n             button[mat-flat-button]`,\n  exportAs: 'matButton',\n  host: {\n    '[disabled]': 'disabled || null',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n\n  /** Whether the button is round. */\n  _isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  _isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated Platform checks for SSR are no longer needed\n               * @deletion-target 7.0.0\n               */\n              // tslint:disable-next-line:no-unused-variable\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor) {\n    super(elementRef);\n\n    // For each of the variant selectors that is prevent in the button's host\n    // attributes, add the correct corresponding class.\n    for (const attr of BUTTON_HOST_ATTRIBUTES) {\n      if (this._hasHostAttributes(attr)) {\n        (elementRef.nativeElement as HTMLElement).classList.add(attr);\n      }\n    }\n\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n\n    if (this._isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    } else if (this._hasHostAttributes('mat-flat-button')) {\n      this.color = DEFAULT_FLAT_BUTTON_COLOR;\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Raised Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n\n  constructor(platform: Platform, focusMonitor: FocusMonitor, elementRef: ElementRef) {\n    super(elementRef, platform, focusMonitor);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatAnchor, MatButton} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {SelectionModel} from '@angular/cdk/collections';\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n// Boilerplate for applying mixins to MatButtonToggleGroup and MatButtonToggleGroupMultiple\n/** @docs-private */\nexport class MatButtonToggleGroupBase {}\nexport const _MatButtonToggleGroupMixinBase = mixinDisabled(MatButtonToggleGroupBase);\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\n/**\n * @deprecated Use `MatButtonToggleGroup` instead.\n * @deletion-target 7.0.0\n */\nexport class MatButtonToggleGroupMultiple {}\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  constructor(\n    /** The MatButtonToggle that emits the event. */\n    public source: MatButtonToggle,\n\n    /** The value assigned to the MatButtonToggle. */\n    public value: any) {}\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group',\n  providers: [\n    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n    {provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup},\n  ],\n  inputs: ['disabled'],\n  host: {\n    '[attr.role]': 'multiple ? \"group\" : \"radiogroup\"',\n    'class': 'mat-button-toggle-group',\n    '[class.mat-button-toggle-vertical]': 'vertical'\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup extends _MatButtonToggleGroupMixinBase implements\n  ControlValueAccessor, CanDisable, OnInit, AfterContentInit {\n\n  private _vertical = false;\n  private _multiple = false;\n  private _selectionModel: SelectionModel<MatButtonToggle>;\n\n  /**\n   * Used for storing a value temporarily, if it is assigned\n   * before the button toggles are initialized.\n   */\n  private _tempValue: any;\n\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle.name = this._name);\n    }\n  }\n  private _name = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any {\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\n\n    if (this.multiple) {\n      return selected.map(toggle => toggle.value);\n    }\n\n    return selected[0] ? selected[0].value : undefined;\n  }\n  set value(newValue: any) {\n    this._setSelectionByValue(newValue);\n    this.valueChange.emit(this.value);\n  }\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() readonly valueChange = new EventEmitter<any>();\n\n  /** Selected button toggles in the group. */\n  get selected() {\n    const selected = this._selectionModel.selected;\n    return this.multiple ? selected : (selected[0] || null);\n  }\n\n  /** Whether multiple button toggles can be selected. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Event emitted when the group's value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatButtonToggle>(this.multiple, undefined, false);\n  }\n\n  ngAfterContentInit() {\n    // If there was an attempt to assign a value before init, use it to set the\n    // initial selection, otherwise check the `checked` state of the toggles.\n    if (typeof this._tempValue !== 'undefined') {\n      this._setSelectionByValue(this._tempValue);\n      this._tempValue = undefined;\n    } else {\n      this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle._markForCheck());\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    const selected = this.selected;\n    const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n    const event = new MatButtonToggleChange(source!, this.value);\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  /**\n   * Syncs a button toggle's selected state with the model value.\n   * @param toggle Toggle to be synced.\n   * @param select Whether the toggle should be selected.\n   * @param isUserInput Whether the change was a result of a user interaction.\n   */\n  _syncButtonToggle(toggle: MatButtonToggle, select: boolean, isUserInput = false) {\n    // Deselect the currently-selected toggle, if we're in single-selection\n    // mode and the button being toggled isn't selected at the moment.\n    if (!this.multiple && this.selected && !toggle.checked) {\n      (this.selected as MatButtonToggle).checked = false;\n    }\n\n    if (select) {\n      this._selectionModel.select(toggle);\n    } else {\n      this._selectionModel.deselect(toggle);\n    }\n\n    // Only emit the change event for user input.\n    if (isUserInput) {\n      this._emitChangeEvent();\n    }\n\n    // Note: we emit this one no matter whether it was a user interaction, because\n    // it is used by Angular to sync up the two-way data binding.\n    this.valueChange.emit(this.value);\n  }\n\n  /** Checks whether a button toggle is selected. */\n  _isSelected(toggle: MatButtonToggle) {\n    return this._selectionModel.isSelected(toggle);\n  }\n\n  /** Updates the selection state of the toggles in the group based on a value. */\n  private _setSelectionByValue(value: any|any[]) {\n    // If the toggles haven't been initialized yet, save the value for later.\n    if (!this._buttonToggles) {\n      this._tempValue = value;\n      return;\n    }\n\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw Error('Value must be an array in multiple-selection mode.');\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n    } else {\n      this._clearSelection();\n      this._selectValue(value);\n    }\n  }\n\n  /** Clears the selected toggles. */\n  private _clearSelection() {\n    this._selectionModel.clear();\n    this._buttonToggles.forEach(toggle => toggle.checked = false);\n  }\n\n  /** Selects a value if there's a toggle that corresponds to it. */\n  private _selectValue(value: any) {\n    const correspondingOption = this._buttonToggles.find(toggle => {\n      return toggle.value != null && toggle.value === value;\n    });\n\n    if (correspondingOption) {\n      correspondingOption.checked = true;\n      this._selectionModel.select(correspondingOption);\n    }\n  }\n}\n\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nexport class MatButtonToggleBase {}\nexport const _MatButtonToggleMixinBase = mixinDisableRipple(MatButtonToggleBase);\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disableRipple'],\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    'class': 'mat-button-toggle',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatButtonToggle extends _MatButtonToggleMixinBase implements OnInit, CanDisableRipple {\n\n  private _isSingleSelector = false;\n  private _checked = false;\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** Unique ID for the underlying `input` element. */\n  get inputId(): string { return `${this.id}-input`; }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input() value: any;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean {\n    return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n  }\n  set checked(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._checked) {\n      this._checked = newValue;\n\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n      }\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n  }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Event emitted when the group value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor) {\n    super();\n\n    this.buttonToggleGroup = toggleGroup;\n  }\n\n  ngOnInit() {\n    this._isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n    this._type = this._isSingleSelector ? 'radio' : 'checkbox';\n    this.id = this.id || `mat-button-toggle-${_uniqueIdCounter++}`;\n\n    if (this._isSingleSelector) {\n      this.name = this.buttonToggleGroup.name;\n    }\n\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._inputElement.nativeElement.focus();\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native input. */\n  _onInputChange(event: Event) {\n    event.stopPropagation();\n\n    this._checked = this._isSingleSelector ? true : !this._checked;\n\n    if (this.buttonToggleGroup) {\n      this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n      this.buttonToggleGroup._onTouched();\n    }\n\n    // Emit a change event when the native input does.\n    this.change.emit(new MatButtonToggleChange(this, this.value));\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update button toggle's status\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatButtonToggle, MatButtonToggleGroup} from './button-toggle';\n\n\n@NgModule({\n  imports: [MatCommonModule, MatRippleModule],\n  exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n  declarations: [MatButtonToggleGroup, MatButtonToggle],\n})\nexport class MatButtonToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n} from '@angular/core';\n\n\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-content',\n  host: {'class': 'mat-card-content'}\n})\nexport class MatCardContent {}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n})\nexport class MatCardTitle {}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n})\nexport class MatCardSubtitle {}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-actions',\n  exportAs: 'matCardActions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n})\nexport class MatCardActions {\n  /** Position of the actions inside the card. */\n  @Input() align: 'start' | 'end' = 'start';\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n})\nexport class MatCardFooter {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-image], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n})\nexport class MatCardImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n})\nexport class MatCardSmImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-md-image], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n})\nexport class MatCardMdImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n})\nexport class MatCardLgImage {}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n})\nexport class MatCardXlImage {}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-avatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n})\nexport class MatCardAvatar {}\n\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card',\n  exportAs: 'matCard',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card'}\n})\nexport class MatCard {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n})\nexport class MatCardHeader {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n})\nexport class MatCardTitleGroup {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatCard,\n  MatCardActions,\n  MatCardAvatar,\n  MatCardContent,\n  MatCardFooter,\n  MatCardHeader,\n  MatCardImage,\n  MatCardLgImage,\n  MatCardMdImage,\n  MatCardSmImage,\n  MatCardSubtitle,\n  MatCardTitle,\n  MatCardTitleGroup,\n  MatCardXlImage,\n} from './card';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatCard,\n    MatCardHeader,\n    MatCardTitleGroup,\n    MatCardContent,\n    MatCardTitle,\n    MatCardSubtitle,\n    MatCardActions,\n    MatCardFooter,\n    MatCardSmImage,\n    MatCardMdImage,\n    MatCardLgImage,\n    MatCardImage,\n    MatCardXlImage,\n    MatCardAvatar,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n    MatCardXlImage, MatCardAvatar,\n  ],\n})\nexport class MatCardModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n} from './autocomplete-trigger';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [MatAutocomplete, MatOptionModule, MatAutocompleteTrigger, MatCommonModule],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger],\n})\nexport class MatAutocompleteModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AriaDescriber} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOCUMENT} from '@angular/common';\nimport {Directive, ElementRef, Inject, Input, NgZone, OnDestroy, Optional} from '@angular/core';\nimport {ThemePalette} from '@angular/material/core';\n\n\nlet nextId = 0;\n\nexport type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after';\nexport type MatBadgeSize = 'small' | 'medium' | 'large';\n\n/** Directive to display a text badge. */\n@Directive({\n  selector: '[matBadge]',\n  host: {\n    'class': 'mat-badge',\n    '[class.mat-badge-overlap]': 'overlap',\n    '[class.mat-badge-above]': 'isAbove()',\n    '[class.mat-badge-below]': '!isAbove()',\n    '[class.mat-badge-before]': '!isAfter()',\n    '[class.mat-badge-after]': 'isAfter()',\n    '[class.mat-badge-small]': 'size === \"small\"',\n    '[class.mat-badge-medium]': 'size === \"medium\"',\n    '[class.mat-badge-large]': 'size === \"large\"',\n    '[class.mat-badge-hidden]': 'hidden',\n  },\n})\nexport class MatBadge implements OnDestroy {\n\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n  @Input('matBadgeColor')\n  get color(): ThemePalette { return this._color; }\n  set color(value: ThemePalette) {\n    this._setColor(value);\n    this._color = value;\n  }\n  private _color: ThemePalette = 'primary';\n\n  /** Whether the badge should overlap its contents or not */\n  @Input('matBadgeOverlap')\n  get overlap(): boolean { return this._overlap; }\n  set overlap(val: boolean) {\n    this._overlap = coerceBooleanProperty(val);\n  }\n  private _overlap: boolean = true;\n\n  /**\n   * Position the badge should reside.\n   * Accepts any combination of 'above'|'below' and 'before'|'after'\n   */\n  @Input('matBadgePosition') position: MatBadgePosition = 'above after';\n\n  /** The content for the badge */\n  @Input('matBadge')\n  get content(): string { return this._content; }\n  set content(val: string) {\n    this._content = val;\n    this._updateTextContent();\n  }\n  private _content: string;\n\n  /** Message used to describe the decorated element via aria-describedby */\n  @Input('matBadgeDescription')\n  get description(): string { return this._description; }\n  set description(newDescription: string) {\n    if (newDescription !== this._description) {\n      this._updateHostAriaDescription(newDescription, this._description);\n      this._description = newDescription;\n    }\n  }\n  private _description: string;\n\n  /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n  @Input('matBadgeSize') size: MatBadgeSize = 'medium';\n\n  /** Whether the badge is hidden. */\n  @Input('matBadgeHidden')\n  get hidden(): boolean { return this._hidden; }\n  set hidden(val: boolean) {\n    this._hidden = coerceBooleanProperty(val);\n  }\n  private _hidden: boolean;\n\n  /** Unique id for the badge */\n  _id: number = nextId++;\n\n  private _badgeElement: HTMLElement;\n\n  constructor(\n      @Optional() @Inject(DOCUMENT) private _document: any,\n      private _ngZone: NgZone,\n      private _elementRef: ElementRef,\n      private _ariaDescriber: AriaDescriber) {}\n\n  /** Whether the badge is above the host or not */\n  isAbove(): boolean {\n    return this.position.indexOf('below') === -1;\n  }\n\n  /** Whether the badge is after the host or not */\n  isAfter(): boolean {\n    return this.position.indexOf('before') === -1;\n  }\n\n  ngOnDestroy() {\n    if (this.description && this._badgeElement) {\n      this._ariaDescriber.removeDescription(this._badgeElement, this.description);\n    }\n  }\n\n  /** Injects a span element into the DOM with the content. */\n  private _updateTextContent(): HTMLSpanElement {\n    if (!this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n    } else {\n      this._badgeElement.textContent = this.content;\n    }\n    return this._badgeElement;\n  }\n\n  /** Creates the badge element */\n  private _createBadgeElement(): HTMLElement {\n    const badgeElement = this._document.createElement('span');\n    const activeClass = 'mat-badge-active';\n\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n    badgeElement.classList.add('mat-badge-content');\n    badgeElement.textContent = this.content;\n\n    if (this.description) {\n      badgeElement.setAttribute('aria-label', this.description);\n    }\n\n    this._elementRef.nativeElement.appendChild(badgeElement);\n\n    // animate in after insertion\n    if (typeof requestAnimationFrame === 'function') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          badgeElement.classList.add(activeClass);\n        });\n      });\n    } else {\n      badgeElement.classList.add(activeClass);\n    }\n\n    return badgeElement;\n  }\n\n  /** Sets the aria-label property on the element */\n  private _updateHostAriaDescription(newDescription: string, oldDescription: string): void {\n    // ensure content available before setting label\n    const content = this._updateTextContent();\n\n    if (oldDescription) {\n      this._ariaDescriber.removeDescription(content, oldDescription);\n    }\n\n    if (newDescription) {\n      this._ariaDescriber.describe(content, newDescription);\n    }\n  }\n\n  /** Adds css theme class given the color to the component host */\n  private _setColor(colorPalette: ThemePalette) {\n    if (colorPalette !== this._color) {\n      if (this._color) {\n        this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\n      }\n      if (colorPalette) {\n        this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatBadge} from './badge';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatBadge],\n  declarations: [MatBadge],\n})\nexport class MatBadgeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a bottom sheet. */\nexport const MAT_BOTTOM_SHEET_DATA = new InjectionToken<any>('MatBottomSheetData');\n\n/**\n * Configuration used when opening a bottom sheet.\n */\nexport class MatBottomSheetConfig<D = any> {\n  /** The view container to place the overlay for the bottom sheet into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** Extra CSS classes to be added to the bottom sheet container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the bottom sheet. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Whether the bottom sheet has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop. */\n  backdropClass?: string;\n\n  /** Whether the user can use escape or clicking outside to close the bottom sheet. */\n  disableClose?: boolean = false;\n\n  /** Aria label to assign to the bottom sheet element. */\n  ariaLabel?: string | null = null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Observable} from 'rxjs';\nimport {Subject} from 'rxjs';\nimport {merge} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {take} from 'rxjs/operators';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n/**\n * Reference to a bottom sheet dispatched from the bottom sheet service.\n */\nexport class MatBottomSheetRef<T = any, R = any> {\n  /** Instance of the component making up the content of the bottom sheet. */\n  instance: T;\n\n  /**\n   * Instance of the component into which the bottom sheet content is projected.\n   * @docs-private\n   */\n  containerInstance: MatBottomSheetContainer;\n\n  /** Subject for notifying the user that the bottom sheet has been dismissed. */\n  private readonly _afterDismissed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the bottom sheet has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Result to be passed down to the `afterDismissed` stream. */\n  private _result: R | undefined;\n\n  constructor(containerInstance: MatBottomSheetContainer, private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n\n    // Emit when opening animation completes\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'visible'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'hidden'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._overlayRef.dispose();\n      this._afterDismissed.next(this._result);\n      this._afterDismissed.complete();\n    });\n\n    if (!containerInstance.bottomSheetConfig.disableClose) {\n      merge(\n        _overlayRef.backdropClick(),\n        _overlayRef._keydownEvents.pipe(filter(event => event.keyCode === ESCAPE))\n      ).subscribe(() => this.dismiss());\n    }\n  }\n\n  /**\n   * Dismisses the bottom sheet.\n   * @param result Data to be passed back to the bottom sheet opener.\n   */\n  dismiss(result?: R): void {\n    if (!this._afterDismissed.closed) {\n      // Transition the backdrop in parallel to the bottom sheet.\n      this.containerInstance._animationStateChanged.pipe(\n        filter(event => event.phaseName === 'start'),\n        take(1)\n      ).subscribe(() => this._overlayRef.detachBackdrop());\n\n      this._result = result;\n      this.containerInstance.exit();\n    }\n  }\n\n  /** Gets an observable that is notified when the bottom sheet is finished closing. */\n  afterDismissed(): Observable<R | undefined> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the bottom sheet has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material bottom sheet. */\nexport const matBottomSheetAnimations: {\n  readonly bottomSheetState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a bottom sheet. */\n  bottomSheetState: trigger('state', [\n    state('void, hidden', style({transform: 'translateY(100%)'})),\n    state('visible', style({transform: 'translateY(0%)'})),\n    transition('visible => void, visible => hidden',\n        animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible',\n        animate(`${AnimationDurations.EXITING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  EventEmitter,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {MatBottomSheetConfig} from './bottom-sheet-config';\nimport {matBottomSheetAnimations} from './bottom-sheet-animations';\nimport {Subscription} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\n\n// TODO(crisbeto): consolidate some logic between this, MatDialog and MatSnackBar\n\n/**\n * Internal component that wraps user-provided bottom sheet content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-bottom-sheet-container',\n  templateUrl: 'bottom-sheet-container.html',\n  styleUrls: ['bottom-sheet-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matBottomSheetAnimations.bottomSheetState],\n  host: {\n    'class': 'mat-bottom-sheet-container',\n    'tabindex': '-1',\n    'role': 'dialog',\n    '[attr.aria-label]': 'bottomSheetConfig?.ariaLabel',\n    '[@state]': '_animationState',\n    '(@state.start)': '_onAnimationStart($event)',\n    '(@state.done)': '_onAnimationDone($event)'\n  },\n})\nexport class MatBottomSheetContainer extends BasePortalOutlet implements OnDestroy {\n  private _breakpointSubscription: Subscription;\n\n  /** The portal outlet inside of this container into which the content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The state of the bottom sheet animations. */\n  _animationState: 'void' | 'visible' | 'hidden' = 'void';\n\n  /** Emits whenever the state of the animation changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** The bottom sheet configuration. */\n  bottomSheetConfig: MatBottomSheetConfig;\n\n  /** The class that traps and manages focus within the bottom sheet. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the bottom sheet was opened. */\n  private _elementFocusedBeforeOpened: HTMLElement | null = null;\n\n  /** Server-side rendering-compatible reference to the global document object. */\n  private _document: Document;\n\n  /** Whether the component has been destroyed. */\n  private _destroyed: boolean;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    breakpointObserver: BreakpointObserver,\n    @Optional() @Inject(DOCUMENT) document: any) {\n    super();\n\n    this._document = document;\n    this._breakpointSubscription = breakpointObserver\n      .observe([Breakpoints.Medium, Breakpoints.Large, Breakpoints.XLarge])\n      .subscribe(() => {\n        this._toggleClass('mat-bottom-sheet-container-medium',\n            breakpointObserver.isMatched(Breakpoints.Medium));\n        this._toggleClass('mat-bottom-sheet-container-large',\n            breakpointObserver.isMatched(Breakpoints.Large));\n        this._toggleClass('mat-bottom-sheet-container-xlarge',\n            breakpointObserver.isMatched(Breakpoints.XLarge));\n      });\n  }\n\n  /** Attach a component portal as content to this bottom sheet container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this bottom sheet container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Begin animation of bottom sheet entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the bottom sheet exiting from view. */\n  exit(): void {\n    if (!this._destroyed) {\n      this._animationState = 'hidden';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._breakpointSubscription.unsubscribe();\n    this._destroyed = true;\n  }\n\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'visible') {\n      this._trapFocus();\n    } else if (event.toState === 'hidden') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  private _toggleClass(cssClass: string, add: boolean) {\n    const classList = this._elementRef.nativeElement.classList;\n    add ? classList.add(cssClass) : classList.remove(cssClass);\n  }\n\n  private _validatePortalAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach bottom sheet content after content is already attached');\n    }\n  }\n\n  private _setPanelClass() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClass = this.bottomSheetConfig.panelClass;\n\n    if (Array.isArray(panelClass)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      panelClass.forEach(cssClass => element.classList.add(cssClass));\n    } else if (panelClass) {\n      element.classList.add(panelClass);\n    }\n  }\n\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    this._focusTrap.focusInitialElementWhenReady();\n  }\n\n  /** Restores focus to the element that was focused before the bottom sheet opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the bottom sheet was opened. */\n  private _savePreviouslyFocusedElement() {\n    this._elementFocusedBeforeOpened = this._document.activeElement as HTMLElement;\n    Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, TemplatePortal, ComponentType, PortalInjector} from '@angular/cdk/portal';\nimport {ComponentRef, TemplateRef, Injectable, Injector, Optional, SkipSelf} from '@angular/core';\nimport {MatBottomSheetConfig, MAT_BOTTOM_SHEET_DATA} from './bottom-sheet-config';\nimport {MatBottomSheetRef} from './bottom-sheet-ref';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\nimport {of as observableOf} from 'rxjs';\nimport {Directionality} from '@angular/cdk/bidi';\n\n/**\n * Service to trigger Material Design bottom sheets.\n */\n@Injectable()\nexport class MatBottomSheet {\n  private _bottomSheetRefAtThisLevel: MatBottomSheetRef<any> | null = null;\n\n  /** Reference to the currently opened bottom sheet. */\n  get _openedBottomSheetRef(): MatBottomSheetRef<any> | null {\n    const parent = this._parentBottomSheet;\n    return parent ? parent._openedBottomSheetRef : this._bottomSheetRefAtThisLevel;\n  }\n\n  set _openedBottomSheetRef(value: MatBottomSheetRef<any> | null) {\n    if (this._parentBottomSheet) {\n      this._parentBottomSheet._openedBottomSheetRef = value;\n    } else {\n      this._bottomSheetRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() @SkipSelf() private _parentBottomSheet: MatBottomSheet) {}\n\n  open<T, D = any, R = any>(component: ComponentType<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n  open<T, D = any, R = any>(template: TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R> {\n\n    const _config = _applyConfigDefaults(config);\n    const overlayRef = this._createOverlay(_config);\n    const container = this._attachContainer(overlayRef, _config);\n    const ref = new MatBottomSheetRef<T, R>(container, overlayRef);\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      container.attachTemplatePortal(new TemplatePortal<T>(componentOrTemplateRef, null!, {\n        $implicit: _config.data,\n        bottomSheetRef: ref\n      } as any));\n    } else {\n      const portal = new ComponentPortal(componentOrTemplateRef, undefined,\n            this._createInjector(_config, ref));\n      const contentRef = container.attachComponentPortal(portal);\n      ref.instance = contentRef.instance;\n    }\n\n    // When the bottom sheet is dismissed, clear the reference to it.\n    ref.afterDismissed().subscribe(() => {\n      // Clear the bottom sheet ref if it hasn't already been replaced by a newer one.\n      if (this._openedBottomSheetRef == ref) {\n        this._openedBottomSheetRef = null;\n      }\n    });\n\n    if (this._openedBottomSheetRef) {\n      // If a bottom sheet is already in view, dismiss it and enter the\n      // new bottom sheet after exit animation is complete.\n      this._openedBottomSheetRef.afterDismissed().subscribe(() => ref.containerInstance.enter());\n      this._openedBottomSheetRef.dismiss();\n    } else {\n      // If no bottom sheet is in view, enter the new bottom sheet.\n      ref.containerInstance.enter();\n    }\n\n    this._openedBottomSheetRef = ref;\n\n    return ref;\n  }\n\n  /**\n   * Dismisses the currently-visible bottom sheet.\n   */\n  dismiss(): void {\n    if (this._openedBottomSheetRef) {\n      this._openedBottomSheetRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the bottom sheet container component to the overlay.\n   */\n  private _attachContainer(overlayRef: OverlayRef,\n                           config: MatBottomSheetConfig): MatBottomSheetContainer {\n    const containerPortal = new ComponentPortal(MatBottomSheetContainer, config.viewContainerRef);\n    const containerRef: ComponentRef<MatBottomSheetContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.bottomSheetConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified bottom sheet config.\n   */\n  private _createOverlay(config: MatBottomSheetConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig({\n      direction: config.direction,\n      hasBackdrop: config.hasBackdrop,\n      maxWidth: '100%',\n      scrollStrategy: this._overlay.scrollStrategies.block(),\n      positionStrategy: this._overlay.position()\n        .global()\n        .centerHorizontally()\n        .bottom('0')\n    });\n\n    if (config.backdropClass) {\n      overlayConfig.backdropClass = config.backdropClass;\n    }\n\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a bottom sheet component.\n   * @param config Config that was used to create the bottom sheet.\n   * @param bottomSheetRef Reference to the bottom sheet.\n   */\n  private _createInjector<T>(config: MatBottomSheetConfig,\n                             bottomSheetRef: MatBottomSheetRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap();\n\n    injectionTokens.set(MatBottomSheetRef, bottomSheetRef);\n    injectionTokens.set(MAT_BOTTOM_SHEET_DATA, config.data);\n\n    if (!userInjector || !userInjector.get(Directionality, null)) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the bottom sheet config.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(config?: MatBottomSheetConfig): MatBottomSheetConfig {\n  return {...new MatBottomSheetConfig(), ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatBottomSheet} from './bottom-sheet';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PortalModule,\n  ],\n  exports: [MatBottomSheetContainer, MatCommonModule],\n  declarations: [MatBottomSheetContainer],\n  entryComponents: [MatBottomSheetContainer],\n  providers: [MatBottomSheet],\n})\nexport class MatBottomSheetModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {Subject} from 'rxjs';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n  AfterViewChecked,\n  OnDestroy,\n} from '@angular/core';\nimport {MatOptgroup} from './optgroup';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT =\n    new InjectionToken<MatOptionParentComponent>('MAT_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  styleUrls: ['option.css'],\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption implements AfterViewChecked, OnDestroy {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _id = `mat-option-${_uniqueIdCounter++}`;\n  private _mostRecentViewValue = '';\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() { return this._parent && this._parent.multiple; }\n\n  /** The unique ID of the option. */\n  get id(): string { return this._id; }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple() { return this._parent && this._parent.disableRipple; }\n\n  /** Event emitted when the option is selected or deselected. */\n  @Output() readonly onSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n\n  /** Emits when the state of the option changes and any parents have to be notified. */\n  readonly _stateChanges = new Subject<void>();\n\n  constructor(\n    private _element: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() readonly group: MatOptgroup) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    this._selected = true;\n    this._changeDetectorRef.markForCheck();\n    this._emitSelectionChangeEvent();\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    this._selected = false;\n    this._changeDetectorRef.markForCheck();\n    this._emitSelectionChangeEvent();\n  }\n\n  /** Sets focus onto this option. */\n  focus(): void {\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * `Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.`\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  ngAfterViewChecked() {\n    // Since parent components could be using the option's label to display the selected values\n    // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n    // relatively cheap, however we still limit them only to selected options in order to avoid\n    // hitting the DOM too often.\n    if (this._selected) {\n      const viewValue = this.viewValue;\n\n      if (viewValue !== this._mostRecentViewValue) {\n        this._mostRecentViewValue = viewValue;\n        this._stateChanges.next();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function _countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n  optionGroups: QueryList<MatOptgroup>): number {\n\n  if (optionGroups.length) {\n    let optionsArray = options.toArray();\n    let groups = optionGroups.toArray();\n    let groupCounter = 0;\n\n    for (let i = 0; i < optionIndex + 1; i++) {\n      if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n        groupCounter++;\n      }\n    }\n\n    return groupCounter;\n  }\n\n  return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function _getOptionScrollPosition(optionIndex: number, optionHeight: number,\n    currentScrollPosition: number, panelHeight: number): number {\n  const optionOffset = optionIndex * optionHeight;\n\n  if (optionOffset < currentScrollPosition) {\n    return optionOffset;\n  }\n\n  if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n    return Math.max(0, optionOffset - panelHeight + optionHeight);\n  }\n\n  return currentScrollPosition;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n\n@NgModule({\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup]\n})\nexport class MatOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MAT_LABEL_GLOBAL_OPTIONS =\n  new InjectionToken<LabelOptions>('mat-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n  /**\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n   * Default behavior is assumed to be `auto`.\n   */\n  float?: FloatLabelType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the MatFormField. */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /**\n   * Whether the input is currently in an autofilled state. If property is not present on the\n   * control it is assumed to be false.\n   */\n  readonly autofilled?: boolean;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The placeholder text for an `MatFormField`. */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed the the front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  FloatLabelType,\n  LabelOptions,\n  MAT_LABEL_GLOBAL_OPTIONS,\n  mixinColor,\n} from '@angular/material/core';\nimport {fromEvent} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {take} from 'rxjs/operators';\nimport {MatError} from './error';\nimport {matFormFieldAnimations} from './form-field-animations';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\n\n\nlet nextUniqueId = 0;\nconst floatingLabelScale = 0.75;\nconst outlineGapPadding = 5;\n\n\n// Boilerplate for applying mixins to MatFormField.\n/** @docs-private */\nexport class MatFormFieldBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n\nexport const _MatFormFieldMixinBase = mixinColor(MatFormFieldBase, 'primary');\n\n\nexport type MatFormFieldAppearance = 'legacy' | 'standard' | 'fill' | 'outline';\n\n\nexport interface MatFormFieldDefaultOptions {\n  appearance?: MatFormFieldAppearance;\n}\n\nexport const MAT_FORM_FIELD_DEFAULT_OPTIONS =\n    new InjectionToken<MatFormFieldDefaultOptions>('MAT_FORM_FIELD_DEFAULT_OPTIONS');\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here.\n  // The MatInput styles are fairly minimal so it shouldn't be a big deal for people who\n  // aren't using MatInput.\n  styleUrls: [\n    'form-field.css',\n    'form-field-fill.css',\n    'form-field-legacy.css',\n    'form-field-outline.css',\n    'form-field-standard.css',\n    '../input/input.css',\n  ],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-form-field',\n    '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n    '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n    '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n    '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-form-field-autofilled]': '_control.autofilled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n  },\n  inputs: ['color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField extends _MatFormFieldMixinBase\n    implements AfterContentInit, AfterContentChecked, AfterViewInit, CanColor {\n  private _labelOptions: LabelOptions;\n\n  /** The form-field appearance style. */\n  @Input()\n  get appearance(): MatFormFieldAppearance {\n    return this._appearance || this._defaultOptions && this._defaultOptions.appearance || 'legacy';\n  }\n  set appearance(value: MatFormFieldAppearance) {\n    this._appearance = value;\n  }\n  _appearance: MatFormFieldAppearance;\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker(): boolean { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: boolean) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat(): boolean {\n    return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat(): boolean { return this.floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel(): string { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  /**\n   * Whether the label should always float, never float or float as the user types.\n   *\n   * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n   * way to make the floating label emulate the behavior of a standard input placeholder. However\n   * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n   * appearances the `never` option has been disabled in favor of just using the placeholder.\n   */\n  @Input()\n  get floatLabel(): FloatLabelType {\n    return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n  }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  _outlineGapWidth = 0;\n\n  _outlineGapStart = 0;\n\n  /**\n   * @deprecated\n   * @deletion-target 7.0.0\n   */\n  @ViewChild('underline') underlineRef: ElementRef;\n\n  @ViewChild('connectionContainer') _connectionContainerRef: ElementRef;\n  @ViewChild('inputContainer') _inputContainerRef: ElementRef;\n  @ViewChild('label') private _label: ElementRef;\n  @ContentChild(MatFormFieldControl) _control: MatFormFieldControl<any>;\n  @ContentChild(MatPlaceholder) _placeholderChild: MatPlaceholder;\n  @ContentChild(MatLabel) _labelChild: MatLabel;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions,\n      @Optional() private _dir: Directionality,\n      @Optional() @Inject(MAT_FORM_FIELD_DEFAULT_OPTIONS) private _defaultOptions:\n          MatFormFieldDefaultOptions) {\n    super(_elementRef);\n\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n  }\n\n  /**\n   * Gets an ElementRef for the element that a overlay attached to the form-field should be\n   * positioned relative to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._connectionContainerRef || this._elementRef;\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n    if (this._control.controlType) {\n      this._elementRef.nativeElement.classList\n          .add(`mat-form-field-type-${this._control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    this._control.stateChanges.pipe(startWith(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    let ngControl = this._control.ngControl;\n    if (ngControl && ngControl.valueChanges) {\n      ngControl.valueChanges.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    Promise.resolve().then(() => {\n      this.updateOutlineGap();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: string): boolean {\n    let ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && (ngControl as any)[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control && this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this.appearance === 'legacy' && !this._hasLabel() ||\n        this._hasLabel() && !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      this._showAlwaysAnimate = true;\n      this.floatLabel = 'always';\n\n      fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n        this._showAlwaysAnimate = false;\n      });\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align === 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align === 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        let startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        let endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n\n  /**\n   * Updates the width and position of the gap in the outline. Only relevant for the outline\n   * appearance.\n   */\n  updateOutlineGap() {\n    if (this.appearance === 'outline' && this._label && this._label.nativeElement.children.length) {\n      const containerStart = this._getStartEnd(\n          this._connectionContainerRef.nativeElement.getBoundingClientRect());\n      const labelStart = this._getStartEnd(\n          this._label.nativeElement.children[0].getBoundingClientRect());\n      let labelWidth = 0;\n      for (const child of this._label.nativeElement.children) {\n        labelWidth += child.offsetWidth;\n      }\n      this._outlineGapStart = labelStart - containerStart - outlineGapPadding;\n      this._outlineGapWidth = labelWidth * floatingLabelScale + outlineGapPadding * 2;\n    } else {\n      this._outlineGapStart = 0;\n      this._outlineGapWidth = 0;\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Gets the start end of the rect considering the current directionality. */\n  private _getStartEnd(rect: ClientRect): number {\n    return this._dir && this._dir.value === 'rtl' ? rect.right : rect.left;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n  imports: [CommonModule],\n  exports: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n})\nexport class MatFormFieldModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  ElementRef,\n  Input,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n  EventEmitter,\n  Output,\n  InjectionToken,\n  Inject,\n} from '@angular/core';\nimport {\n  MatOption,\n  MatOptgroup,\n  MAT_OPTION_PARENT_COMPONENT,\n  mixinDisableRipple,\n  CanDisableRipple,\n} from '@angular/material/core';\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected. */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nexport class MatAutocompleteBase {}\nexport const _MatAutocompleteMixinBase = mixinDisableRipple(MatAutocompleteBase);\n\n/** Default `mat-autocomplete` options that can be overridden. */\nexport interface MatAutocompleteDefaultOptions {\n  /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n  autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nexport const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<MatAutocompleteDefaultOptions>('mat-autocomplete-default-options', {\n      providedIn: 'root',\n      factory: () => ({autoActiveFirstOption: false}),\n    });\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel: boolean = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean { return this._isOpen && this.showPanel; }\n  _isOpen: boolean = false;\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /**\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n   */\n  @Input()\n  get autoActiveFirstOption(): boolean { return this._autoActiveFirstOption; }\n  set autoActiveFirstOption(value: boolean) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  private _autoActiveFirstOption: boolean;\n\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /** Event that is emitted when the autocomplete panel is opened. */\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event that is emitted when the autocomplete panel is closed. */\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(value: string) {\n    if (value && value.length) {\n      value.split(' ').forEach(className => this._classList[className.trim()] = true);\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef,\n    @Inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS) defaults: MatAutocompleteDefaultOptions) {\n    super();\n\n    this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibility state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._classList['mat-autocomplete-visible'] = this.showPanel;\n    this._classList['mat-autocomplete-hidden'] = !this.showPanel;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n}\n\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  /** Whether the component is disabled. */\n  disabled: boolean;\n}\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): Constructor<CanDisable> & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled() { return this._disabled; }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  /** Theme color palette for the component. */\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values. */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(base: T,\n    defaultColor?: ThemePalette): Constructor<CanColor> & T {\n  return class extends base {\n    private _color: ThemePalette;\n\n    get color(): ThemePalette { return this._color; }\n    set color(value: ThemePalette) {\n      const colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  /** Whether ripples are disabled. */\n  disableRipple: boolean;\n}\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T)\n    : Constructor<CanDisableRipple> & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n/** @docs-private */\nexport interface HasTabIndex {\n  /** Tabindex of the component. */\n  tabIndex: number;\n}\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : Constructor<HasTabIndex> & T {\n  return class extends base {\n    private _tabIndex: number = defaultTabIndex;\n\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs';\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  updateErrorState();\n  readonly stateChanges: Subject<void>;\n  errorState: boolean;\n  errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n  ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n: Constructor<CanUpdateErrorState> & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping\n     * `MatFormField` needs to run change detection.\n     */\n    readonly stateChanges = new Subject<void>();\n\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {Observable} from 'rxjs';\nimport {Subscriber} from 'rxjs';\n\n/**\n * Mixin that adds an initialized property to a directive which, when subscribed to, will emit a\n * value once markInitialized has been called, which should be done during the ngOnInit function.\n * If the subscription is made after it has already been marked as initialized, then it will trigger\n * an emit immediately.\n * @docs-private\n */\nexport interface HasInitialized {\n  /** Stream that emits once during the directive/component's ngOnInit. */\n  initialized: Observable<void>;\n\n  /**\n   * Sets the state as initialized and must be called during ngOnInit to notify subscribers that\n   * the directive has been initialized.\n   * @docs-private\n   */\n  _markInitialized: () => void;\n}\n\n/** Mixin to augment a directive with an initialized property that will emits when ngOnInit ends. */\nexport function mixinInitialized<T extends Constructor<{}>>(base: T):\n    Constructor<HasInitialized> & T {\n  return class extends base {\n    /** Whether this directive has been marked as initialized. */\n    _isInitialized = false;\n\n    /**\n     * List of subscribers that subscribed before the directive was initialized. Should be notified\n     * during _markInitialized. Set to null after pending subscribers are notified, and should\n     * not expect to be populated after.\n     */\n    _pendingSubscribers: Subscriber<void>[] | null = [];\n\n    /**\n     * Observable stream that emits when the directive initializes. If already initialized, the\n     * subscriber is stored to be notified once _markInitialized is called.\n     */\n    initialized = new Observable<void>(subscriber => {\n      // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify\n      // when _markInitialized is called.\n      if (this._isInitialized) {\n        this._notifySubscriber(subscriber);\n      } else {\n        this._pendingSubscribers!.push(subscriber);\n      }\n    });\n\n    constructor(...args: any[]) { super(...args); }\n\n    /**\n     * Marks the state as initialized and notifies pending subscribers. Should be called at the end\n     * of ngOnInit.\n     * @docs-private\n     */\n    _markInitialized(): void {\n      if (this._isInitialized) {\n        throw Error('This directive has already been marked as initialized and ' +\n            'should not be called twice.');\n      }\n\n      this._isInitialized = true;\n\n      this._pendingSubscribers!.forEach(this._notifySubscriber);\n      this._pendingSubscribers = null;\n    }\n\n    /** Emits and completes the subscriber stream (should only emit once). */\n    _notifySubscriber(subscriber: Subscriber<void>): void {\n      subscriber.next();\n      subscriber.complete();\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n  private readonly _clampDate: boolean;\n\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   *\n   * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\n   * getting the string representation of a Date object from it's utc representation. We're keeping\n   * it here for sometime, just for precaution, in case we decide to revert some of these changes\n   * though.\n   */\n  useUtcForDisplay: boolean = true;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string, platform: Platform) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    this.useUtcForDisplay = !platform.TRIDENT;\n    this._clampDate = platform.TRIDENT || platform.EDGE;\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {month: style, timeZone: 'utc'});\n      return range(12, i =>\n          this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric', timeZone: 'utc'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {weekday: style, timeZone: 'utc'});\n      return range(7, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric', timeZone: 'utc'});\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    if (SUPPORTS_INTL_API) {\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n        date = this.clone(date);\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n      }\n\n      displayFormat = {...displayFormat, timeZone: 'utc'};\n\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    const result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n\n  /**\n   * When converting Date object to string, javascript built-in functions may return wrong\n   * results because it applies its internal DST rules. The DST rules around the world change\n   * very frequently, and the current valid rule is not always valid in previous years though.\n   * We work around this problem building a new Date object which has its internal UTC\n   * representation with the local date and time.\n   * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\n   *    timeZone set to 'utc' to work fine.\n   * @param date Date from which we want to get the string representation according to dtf\n   * @returns A Date object with its UTC representation based on the passed in date info\n   */\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\n    const d = new Date(Date.UTC(\n        date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n        date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n    return dtf.format(d);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, supportsPassiveEventListeners} from '@angular/cdk/platform';\nimport {RippleRef, RippleState} from './ripple-ref';\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  persistent?: boolean;\n  animation?: RippleAnimationConfig;\n  terminateOnPointerUp?: boolean;\n  /**\n   * @deprecated Use the `animation` property instead.\n   * @deletion-target 7.0.0\n   */\n  speedFactor?: number;\n};\n\n/**\n * Interface that describes the configuration for the animation of a ripple.\n * There are two animation phases with different durations for the ripples.\n */\nexport interface RippleAnimationConfig {\n  /** Duration in milliseconds for the enter animation (expansion from point of contact). */\n  enterDuration?: number;\n  /** Duration in milliseconds for the exit animation (fade-out). */\n  exitDuration?: number;\n}\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nexport const defaultRippleAnimationConfig = {\n  enterDuration: 450,\n  exitDuration: 400\n};\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst ignoreMouseEventsTimeout = 800;\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer {\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /** Events to be registered on the trigger element. */\n  private _triggerEvents = new Map<string, any>();\n\n  /** Set of currently active ripple references. */\n  private _activeRipples = new Set<RippleRef>();\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /** Options that apply to all the event listeners that are bound by the renderer. */\n  private _eventOptions = supportsPassiveEventListeners() ? ({passive: true} as any) : false;\n\n  /**\n   * Cached dimensions of the ripple container. Set when the first\n   * ripple is shown and cleared once no more ripples are visible.\n   */\n  private _containerRect: ClientRect | null;\n\n  constructor(private _target: RippleTarget,\n              private _ngZone: NgZone,\n              elementRef: ElementRef,\n              platform: Platform) {\n\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents.set('mousedown', this.onMousedown);\n      this._triggerEvents.set('mouseup', this.onPointerUp);\n      this._triggerEvents.set('mouseleave', this.onPointerUp);\n\n      this._triggerEvents.set('touchstart', this.onTouchStart);\n      this._triggerEvents.set('touchend', this.onPointerUp);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = this._containerRect =\n                          this._containerRect || this._containerElement.getBoundingClientRect();\n    const animationConfig = {...defaultRippleAnimationConfig, ...config.animation};\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n    const duration = animationConfig.enterDuration / (config.speedFactor || 1);\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.VISIBLE;\n\n      if (!config.persistent && !this._isPointerDown) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    const wasActive = this._activeRipples.delete(rippleRef);\n\n    // Clear out the cached bounding rect if we have no more ripples.\n    if (!this._activeRipples.size) {\n      this._containerRect = null;\n    }\n\n    // For ripples that are not active anymore, don't re-un the fade-out animation.\n    if (!wasActive) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n    const animationConfig = {...defaultRippleAnimationConfig, ...rippleRef.config.animation};\n\n    rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n    rippleEl.style.opacity = '0';\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode!.removeChild(rippleEl);\n    }, animationConfig.exitDuration);\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(element: HTMLElement) {\n    if (!element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n\n    this._ngZone.runOutsideAngular(() => {\n      this._triggerEvents.forEach((fn, type) =>\n          element.addEventListener(type, fn, this._eventOptions));\n    });\n\n    this._triggerElement = element;\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private onMousedown = (event: MouseEvent) => {\n    const isSyntheticEvent = this._lastTouchStartEvent &&\n        Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n\n    if (!this._target.rippleDisabled && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private onTouchStart = (event: TouchEvent) => {\n    if (!this._target.rippleDisabled) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      this.fadeInRipple(\n          event.touches[0].clientX, event.touches[0].clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private onPointerUp = () => {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      // By default, only ripples that are completely visible will fade out on pointer release.\n      // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\n      const isVisible = ripple.state === RippleState.VISIBLE ||\n        ripple.config.terminateOnPointerUp && ripple.state === RippleState.FADING_IN;\n\n      if (!ripple.config.persistent && isVisible) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n  private runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => {\n        this._triggerElement!.removeEventListener(type, fn, this._eventOptions);\n      });\n    }\n  }\n}\n\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Converts values into strings. Falsy values become empty strings.\n * @docs-private\n */\nexport function coerceToString(value: string | number): string {\n  return `${value || ''}`;\n}\n\n/**\n * Converts a value that might be a string into a number.\n * @docs-private\n */\nexport function coerceToNumber(value: string | number): number {\n  return typeof value === 'string' ? parseInt(value, 10) : value;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`mat-menu-trigger: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`x-position value must be either 'before' or after'.\n      Example: <mat-menu x-position=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`y-position value must be either 'above' or below'.\n      Example: <mat-menu y-position=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {BidiModule} from '@angular/cdk/bidi';\n\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks', {\n  providedIn: 'root',\n  factory: () => true,\n});\n\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  /** Whether we've already checked for HammerJs availability. */\n  private _hasCheckedHammer = false;\n\n  /** Reference to the global `document` object. */\n  private _document = typeof document === 'object' && document ? document : null;\n\n  /** Reference to the global 'window' object. */\n  private _window = typeof window === 'object' && window ? window : null;\n\n  constructor(@Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecksEnabled: boolean) {\n    if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n      this._checkDoctypeIsDefined();\n      this._checkThemeIsPresent();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n\n  /** Whether any sanity checks are enabled */\n  private _areChecksEnabled(): boolean {\n    return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n  }\n\n  /** Whether the code is running in tests. */\n  private _isTestEnv() {\n    return this._window && (this._window['__karma__'] || this._window['jasmine']);\n  }\n\n  private _checkDoctypeIsDefined(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n\n  private _checkThemeIsPresent(): void {\n    if (this._document && typeof getComputedStyle === 'function') {\n      const testElement = this._document.createElement('div');\n\n      testElement.classList.add('mat-theme-loaded-marker');\n      this._document.body.appendChild(testElement);\n\n      const computedStyle = getComputedStyle(testElement);\n\n      // In some situations, the computed style of the test element can be null. For example in\n      // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n      // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n      if (computedStyle && computedStyle.display !== 'none') {\n        console.warn(\n          'Could not find Angular Material core theme. Most Material ' +\n          'components may not work as expected. For more info refer ' +\n          'to the theming guide: https://material.angular.io/guide/theming'\n        );\n      }\n\n      this._document.body.removeChild(testElement);\n    }\n  }\n\n  /** Checks whether HammerJS is available. */\n  _checkHammerIsAvailable(): void {\n    if (this._hasCheckedHammer || !this._window) {\n      return;\n    }\n\n    if (this._areChecksEnabled() && !this._window['Hammer']) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material components may not work correctly.');\n    }\n    this._hasCheckedHammer = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {inject, InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE', {\n  providedIn: 'root',\n  factory: () => inject(LOCALE_ID)\n});\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges = new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {DateAdapter} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n  imports: [PlatformModule],\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n  ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({providedIn: 'root'})\nexport class ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {\n  HammerStatic,\n  HammerInstance,\n  Recognizer,\n  RecognizerStatic,\n  HammerOptions,\n} from './gesture-annotations';\n\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\n\n/** Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class GestureConfig extends HammerGestureConfig {\n  private _hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\n\n  /** List of new event names to add to the gesture support list */\n  events: string[] = this._hammer ? [\n    'longpress',\n    'slide',\n    'slidestart',\n    'slideend',\n    'slideright',\n    'slideleft'\n  ] : [];\n\n  constructor(\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\n    @Optional() commonModule?: MatCommonModule) {\n    super();\n    if (commonModule) {\n      commonModule._checkHammerIsAvailable();\n    }\n  }\n\n  /**\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://www.google.com/design/spec/patterns/gestures.html#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * @param element Element to which to assign the new HammerJS gestures.\n   * @returns Newly-created HammerJS instance.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const mc = new this._hammer(element, this._hammerOptions || undefined);\n\n    // Default Hammer Recognizers.\n    const pan = new this._hammer.Pan();\n    const swipe = new this._hammer.Swipe();\n    const press = new this._hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return mc as HammerInstance;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  NgModule,\n  Directive,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport class MatLineSetter {\n  constructor(private _lines: QueryList<MatLine>, private _element: ElementRef) {\n    this._setLineClass(this._lines.length);\n\n    this._lines.changes.subscribe(() => {\n      this._setLineClass(this._lines.length);\n    });\n  }\n\n  private _setLineClass(count: number): void {\n    this._resetClasses();\n    if (count === 2 || count === 3) {\n      this._setClass(`mat-${count}-line`, true);\n    } else if (count > 3) {\n      this._setClass(`mat-multi-line`, true);\n    }\n  }\n\n  private _resetClasses(): void {\n    this._setClass('mat-2-line', false);\n    this._setClass('mat-3-line', false);\n    this._setClass('mat-multi-line', false);\n  }\n\n  private _setClass(className: string, isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add(className);\n    } else {\n      this._element.nativeElement.classList.remove(className);\n    }\n  }\n\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\n\n/** Possible states for a ripple element. */\nexport enum RippleState {\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n\n  /** Current state of the ripple reference. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: RippleRenderer,\n    public element: HTMLElement,\n    public config: RippleConfig) {\n  }\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {RippleRef} from './ripple-ref';\nimport {RippleAnimationConfig, RippleConfig, RippleRenderer, RippleTarget} from './ripple-renderer';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * Configuration for the animation duration of the ripples.\n   * There are two phases with different durations for the ripples.\n   */\n  animation?: RippleAnimationConfig;\n\n  /**\n   * If set, the default duration of the fade-in animation is divided by this value. For example,\n   * setting it to 0.5 will cause the ripple fade-in animation to take twice as long.\n   * A changed speedFactor will not affect the fade-out duration of the ripples.\n   * @deprecated Use the `animation` global option instead.\n   * @deletion-target 7.0.0\n   */\n  baseSpeedFactor?: number;\n\n  /**\n   * Whether ripples should start fading out immediately after the mouse our touch is released. By\n   * default, ripples will wait for the enter animation to complete and for mouse or touch release.\n   */\n  terminateOnPointerUp?: boolean;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * If set, the normal duration of ripple animations is divided by this value. For example,\n   * setting it to 0.5 will cause the animations to take twice as long.\n   * A changed speedFactor will not modify the fade-out duration of the ripples.\n   * @deprecated Use the [matRippleAnimation] binding instead.\n   * @deletion-target 7.0.0\n   */\n  @Input('matRippleSpeedFactor') speedFactor: number = 1;\n\n  /**\n   * Configuration for the ripple animation. Allows modifying the enter and exit animation\n   * duration of the ripples.\n   */\n  @Input('matRippleAnimation') animation: RippleAnimationConfig;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() { return this._trigger || this._elementRef.nativeElement; }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** Whether ripple directive is initialized and the input bindings are set. */\n  private _isInitialized: boolean = false;\n\n  constructor(private _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions) {\n\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /** Ripple configuration from the directive's input values. */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      radius: this.radius,\n      color: this.color,\n      animation: {...this._globalOptions.animation, ...this.animation},\n      terminateOnPointerUp: this._globalOptions.terminateOnPointerUp,\n      speedFactor: this.speedFactor * (this._globalOptions.baseSpeedFactor || 1),\n    };\n  }\n\n  /** Whether ripples on pointer-down are disabled or not. */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n\n  /**\n   * Launches a manual ripple using the specified ripple configuration.\n   * @param config Configuration for the manual ripple.\n   */\n  launch(config: RippleConfig): RippleRef;\n\n  /**\n   * Launches a manual ripple at the specified coordinates within the element.\n   * @param x Coordinate within the element, along the X axis at which to fade-in the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to fade-in the ripple.\n   * @param config Optional ripple configuration for the manual ripple.\n   */\n  launch(x: number, y: number, config?: RippleConfig): RippleRef;\n\n  /** Launches a manual ripple at the specified coordinated or just by the ripple config. */\n  launch(configOrX: number | RippleConfig, y: number = 0, config?: RippleConfig): RippleRef {\n    if (typeof configOrX === 'number') {\n      return this._rippleRenderer.fadeInRipple(configOrX, y, {...this.rippleConfig, ...config});\n    } else {\n      return this._rippleRenderer.fadeInRipple(0, 0, {...this.rippleConfig, ...configOrX});\n    }\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\n\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n})\nexport class MatPseudoCheckboxModule { }\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\nimport {mixinDisabled, CanDisable} from '../common-behaviors/disabled';\n\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nexport class MatOptgroupBase { }\nexport const _MatOptgroupMixinBase = mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  styleUrls: ['optgroup.css'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n})\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n"],"names":["MatTabHeaderBase","_MatTabHeaderMixinBase","mixinDisableRipple","MatTabHeader","_elementRef","_changeDetectorRef","_viewportRuler","_dir","_this","_super","call","this","_focusIndex","_scrollDistance","_selectedIndexChanged","_realignInkBar","Subscription","EMPTY","_showPaginationControls","_disableScrollAfter","_disableScrollBefore","_selectedIndex","selectFocusedIndex","EventEmitter","indexFocused","tslib_1.__extends","Object","defineProperty","prototype","value","coerceNumberProperty","ngAfterContentChecked","_tabLabelCount","_labelWrappers","length","_updatePagination","markForCheck","_scrollToLabel","_checkScrollingControls","_alignInkBarToSelectedTab","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","event","keyCode","RIGHT_ARROW","_focusNextTab","LEFT_ARROW","_focusPreviousTab","HOME","_focusFirstTab","preventDefault","END","_focusLastTab","ENTER","SPACE","emit","focusIndex","ngAfterContentInit","dirChange","change","observableOf","resize","realign","requestAnimationFrame","merge","subscribe","ngOnDestroy","unsubscribe","_onContentChanges","_checkPaginationEnabled","_isValidIndex","_setTabFocus","index","tab","toArray","disabled","tabIndex","focus","containerEl","_tabListContainer","nativeElement","dir","_getLayoutDirection","scrollLeft","scrollWidth","offsetWidth","_moveFocus","offset","tabs","i","scrollDistance","translateX","_tabList","style","transform","v","Math","max","min","_getMaxScrollDistance","_scrollHeader","scrollDir","viewLength","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","getOffsetLeft","getOffsetWidth","beforeVisiblePos","afterVisiblePos","isEnabled","selectedLabelWrapper","selectedIndex","elementRef","_inkBar","alignToElement","type","Component","args","selector","template","styles","inputs","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","host","class","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","ViewportRuler","Directionality","decorators","Optional","propDecorators","ViewChild","Input","Output","MatTabNavBase","_MatTabNavMixinBase","mixinColor","MatTabNav","_ngZone","_onDestroy","Subject","_disableRipple","_backgroundColor","classList","remove","backgroundColor","add","coerceBooleanProperty","_setLinkDisableRipple","updateActiveLink","element","_activeLinkChanged","_activeLinkElement","runOutsideAngular","pipe","takeUntil","_alignInkBar","next","complete","_tabLinks","forEach","link","disableRipple","exportAs","NgZone","ChangeDetectorRef","MatTabLinkBase","_MatTabLinkMixinBase","mixinTabIndex","mixinDisabled","_tabNavBar","_tabLinkRipple","setupTriggerEvents","parseInt","globalOptions","rippleConfig","terminateOnPointerUp","speedFactor","baseSpeedFactor","animation","get","enumerable","configurable","MatTabLink","Directive","[attr.aria-disabled]","[attr.tabIndex]","[class.mat-tab-disabled]","[class.mat-tab-label-active]","(click)","Platform","undefined","Inject","MAT_RIPPLE_GLOBAL_OPTIONS","Attribute","NgModule","imports","CommonModule","MatCommonModule","PortalModule","MatRippleModule","ObserversModule","exports","MatTabGroup","MatTabLabel","MatTab","MatTabContent","declarations","MatInkBar","MatTabLabelWrapper","MatTabBody","MatTabBodyPortal","MatTabsModule","MatToolbarBase","_MatToolbarMixinBase","MatToolbarRow","MatToolbar","_platform","document","_document","ngAfterViewInit","isDevMode","isBrowser","_checkToolbarMixedModes","_toolbarRows","changes","slice","childNodes","filter","node","contains","nodeType","COMMENT_NODE","some","textContent","trim","throwToolbarMixedModesError","[class.mat-toolbar-multiple-rows]","[class.mat-toolbar-single-row]","DOCUMENT","MatToolbarModule","MatTreeNodeOutlet","viewContainer","ViewContainerRef","_MatTreeNodeMixinBase","CdkTreeNode","_MatNestedTreeNodeMixinBase","CdkNestedTreeNode","MatTreeNode","_tree","role","Number","[attr.aria-expanded]","[attr.aria-level]","[attr.role]","providers","provide","useExisting","ElementRef","CdkTree","MatTreeNodeDef","CdkTreeNodeDef","data","MatNestedTreeNode","nodeOutlet","ContentChildren","MatTreeNodePadding","CdkTreeNodePadding","level","indent","MatTree","recursive","MatTreeNodeToggle","CdkTreeNodeToggle","MAT_TREE_DIRECTIVES","CdkTreeModule","MatTreeModule","MatTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","_flattenNode","resultNodes","parentMap","flatNode","push","take","children","child","childParentMap","flattenNodes","structuredData","expandFlattenedNodes","nodes","treeControl","results","currentExpand","expand","isExpanded","MatTreeFlatDataSource","treeFlattener","initialData","_flattenedData","BehaviorSubject","_expandedData","_data","dataNodes","connect","collectionViewer","viewChange","expansionModel","apply","map","disconnect","DataSource","MatTreeNestedDataSource","VERSION","Version","SELECT_PANEL_PADDING_X","MatStepHeader","iconOverrides","selected","active","optional","matStepperAnimations","horizontalStepTransition","trigger","state","visibility","transition","animate","verticalStepTransition","height","MatStepperIcon","templateRef","TemplateRef","name","_MatStep","CdkStep","_MatStepper","CdkStepper","MatStep","stepper","_errorStateMatcher","isErrorState","control","form","originalErrorState","customErrorState","invalid","interacted","ErrorStateMatcher","MatStepper","arguments","icons","_icons","override","find","icon","_iconOverrides","_steps","_destroyed","_stateChanged","MatHorizontalStepper","aria-orientation","animations","ctorParameters","MatVerticalStepper","MatStepperNext","[type]","CdkStepperNext","MatStepperPrevious","CdkStepperPrevious","MatButtonModule","CdkStepperModule","MatIconModule","MatStepLabel","MatStepperIntl","MatStepperModule","MatTable","CDK_TABLE_TEMPLATE","MatCellDef","CdkCellDef","MatHeaderCellDef","CdkHeaderCellDef","MatColumnDef","CdkColumnDef","MatHeaderCell","columnDef","cssClassFriendlyName","CdkHeaderCell","MatCell","CdkCell","MatHeaderRowDef","CdkHeaderRowDef","MatRowDef","CdkRowDef","MatHeaderRow","CDK_ROW_TEMPLATE","MatRow","CdkTableModule","MatTableModule","MatTableDataSource","_renderData","_filter","sortingDataAccessor","sortHeaderId","_isNumberValue","sortData","sort","direction","a","b","valueA","valueB","comparatorResult","filterPredicate","accumulator","currentTerm","key","dataStr","keys","reduce","toLowerCase","transformedFilter","indexOf","_updateChangeSubscription","_sort","_paginator","paginator","sortChange","empty","pageChange","page","_renderChangesSubscription","dataStream","filteredData","combineLatest","_a","_filterData","orderedData","startWith","_orderData","_pageData","obj","_updatePaginator","startIndex","pageIndex","pageSize","splice","filteredDataLength","Promise","resolve","then","lastPageIndex","ceil","_MAT_INK_BAR_POSITIONER","InjectionToken","providedIn","factory","_matInkBarPositioner","left","offsetLeft","width","_inkBarPositioner","show","_setStyles","hide","positions","inkBar","viewContainerRef","CdkPortal","MatTabBase","_MatTabMixinBase","_viewContainerRef","textLabel","_contentPortal","_labelChange","_disableChange","position","origin","isActive","ngOnChanges","hasOwnProperty","ngOnInit","TemplatePortal","_explicitContent","_implicitContent","matTabsAnimations","translateTab","_componentFactoryResolver","_host","_isCenterPosition","_position","attach","_content","_centeringSub","_beforeCentering","isCentering","hasAttached","_leavingSub","_afterLeavingCenter","detach","closed","ComponentFactoryResolver","forwardRef","CdkPortalOutlet","_onCentering","_onCentered","_origin","_onTranslateTabStarted","e","toState","clientHeight","_onTranslateTabComplete","fromState","_portalHost","PortalHostDirective","nextId","MatTabChangeEvent","MatTabGroupBase","_MatTabGroupMixinBase","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","_tabLabelSubscription","_dynamicHeight","headerPosition","selectedIndexChange","focusChange","animationDone","selectedTabChange","_groupId","indexToSelect","_tabs","tabChangeEvent","_createChangeEvent","_subscribeToTabLabels","_focusChanged","concat","_getTabLabelId","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","offsetHeight","_removeTabBodyWrapperHeight","_handleClick","tabHeader","idx","_getTabIndex","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","dynamicHeight","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","MatSlider","step","thumbLabel","tickInterval","displayWith","vertical","input","_sliderWrapper","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MatSliderModule","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","dismiss","_onExit","_finishDismiss","exit","clearTimeout","_durationTimeoutId","dismissWithAction","closeWithAction","_dismissAfter","duration","setTimeout","_open","dispose","dismissedByAction","afterDismissed","asObservable","afterOpened","_onEnter","MAT_SNACK_BAR_DATA","MatSnackBarConfig","politeness","announcementMessage","horizontalPosition","verticalPosition","matSnackBarAnimations","contentFade","opacity","AnimationDurations","COMPLEX","AnimationCurves","STANDARD_CURVE","snackBarState","EXITING","ACCELERATION_CURVE","ENTERING","DECELERATION_CURVE","SimpleSnackBar","snackBarRef","action","[@contentFade]","MatSnackBarContainer","_animationState","attachComponentPortal","portal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","attachTemplatePortal","onAnimationEnd","startsWith","_completeExit","onEnter_1","run","enter","snackBarConfig","detectChanges","onMicrotaskEmpty","panelClasses","panelClass","Array","isArray","cssClass","Error","[@state]","(@state.done)","MAT_SNACK_BAR_DEFAULT_OPTIONS","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","openFromComponent","component","config","_attach","openFromTemplate","open","message","_config","tslib_1.__assign","_attachSnackBarContainer","overlayRef","containerPortal","ComponentPortal","containerRef","instance","content","userConfig","_createOverlay","container","$implicit","injector","_createInjector","contentRef","observe","Breakpoints","Handset","detachments","matches","overlayElement","_animateSnackBar","announce","overlayConfig","OverlayConfig","positionStrategy","global","isRtl","isLeft","isRight","right","centerHorizontally","top","bottom","create","userInjector","injectionTokens","WeakMap","set","PortalInjector","Injectable","Overlay","LiveAnnouncer","Injector","BreakpointObserver","SkipSelf","OverlayModule","entryComponents","MatSnackBarModule","MatSortBase","_MatSortMixinBase","sortables","Map","_stateChanges","start","_direction","MatSort","getSortInvalidDirectionError","_disableClear","register","sortable","id","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","deregister","delete","getNextSortDirection","disableClear","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","sortButtonLabel","sortDescriptionLabel","MatSortHeaderIntl","MAT_SORT_HEADER_INTL_PROVIDER","deps","useFactory","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","SORT_ANIMATION_TRANSITION","matSortAnimations","indicator","leftPointer","rightPointer","arrowOpacity","arrowPosition","keyframes","allowChildren","query","animateChild","MatSortHeaderBase","_MatSortHeaderMixinBase","MatSortHeader","_intl","changeDetectorRef","_cdkColumnDef","_showIndicatorHint","_arrowDirection","_disableViewStateAnimation","getSortHeaderNotContainedWithinSortError","_rerenderSubscription","_isSorted","_updateArrowDirection","_viewState","_setAnimationTransitionState","_setIndicatorHintVisible","visible","_isDisabled","viewState","_getArrowDirectionState","_getArrowViewState","(mouseenter)","(longpress)","(mouseleave)","[class.mat-sort-header-disabled]","MatSortModule","CdkStepLabel","optionalLabel","_focusMonitor","_element","monitor","_intlSubscription","stopMonitoring","_stringLabel","label","_templateLabel","_getHostElement","_getIconContext","[style.margin-right.px]","MatSidenavContent","MatSidenav","_fixedBottomGap","matDrawerAnimations","transformDrawer","[@transform]","(@transform.start)","(@transform.done)","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","MatDrawer","MatSidenavContainer","[class.mat-drawer-container-explicit-backdrop]","_drawers","ContentChild","MatSidenavModule","ScrollDispatchModule","PlatformModule","MatDrawerContainer","MatDrawerContent","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlideToggle","multi","MatSlideToggleChange","source","checked","MatSlideToggleBase","_MatSlideToggleMixinBase","onChange","_","onTouched","_uniqueId","_required","_checked","labelPosition","ariaLabel","ariaLabelledby","_slideRenderer","SlideToggleRenderer","_inputElement","focusOrigin","_onInputFocusChange","_onChangeEvent","stopPropagation","dragging","_emitChangeEvent","_onInputClick","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","focusVia","toggle","_focusRipple","fadeOut","_ripple","launch","persistent","_onDragStart","startThumbDrag","_onDrag","updateThumbPosition","deltaX","_onDragEnd","newCheckedValue","dragPercentage","stopThumbDrag","_onLabelTextChange","[id]","[class.mat-checked]","[class.mat-disabled]","[class.mat-slide-toggle-label-before]","FocusMonitor","required","MatRipple","_thumbBarEl","querySelector","_thumbBarWidth","clientWidth","_thumbEl","_previousChecked","dragX","percentage","MatSlideToggleModule","MAT_SLIDER_VALUE_ACCESSOR","MatSliderChange","MatSliderBase","_MatSliderMixinBase","_invert","_max","_min","_step","_thumbLabel","_tickInterval","_value","_vertical","_percent","_isSliding","_isActive","_tickIntervalPercent","_sliderDimensions","_controlValueAccessorChangeFn","_dirChangeSubscription","_calculatePercentage","_roundLabelTo","toString","split","pop","toFixed","_focusHostElement","blur","_blurHostElement","_clamp","invert","percent","_isMinValue","axis","_invertMouseCoords","_thumbGap","tickSize","backgroundSize","sign","rotate","_invertAxis","_onMouseenter","_getSliderDimensions","_updateTickIntervalPercent","_onClick","oldValue","_updateValueFromPosition","x","clientX","y","clientY","_emitInputEvent","_onSlide","_onSlideStart","center","_valueOnSlideStart","_onSlideEnd","_onFocus","_onBlur","_onKeydown","PAGE_UP","_increment","PAGE_DOWN","UP_ARROW","DOWN_ARROW","_onKeyup","numSteps","pos","size","posComponent","exactValue","_calculateValue","closestValue","round","trackSize","pixelsPerStep","stepsPerTick","pixelsPerTick","getBoundingClientRect","(focus)","(blur)","(keydown)","(keyup)","(slide)","(slideend)","(slidestart)","[tabIndex]","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[attr.aria-orientation]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[class.mat-slider-axis-inverted]","[class.mat-slider-sliding]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","MatProgressSpinner","mode","platform","[style.width.px]","[style.height.px]","MatSpinner","MatProgressSpinnerModule","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MatRadioGroup","MatRadioChange","MatRadioGroupBase","_MatRadioGroupMixinBase","_changeDetector","_name","_selected","_isInitialized","_labelPosition","_disabled","_updateRadioButtonNames","_markRadiosForCheck","newValue","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_touch","_radios","radio","isAlreadySelected","_markForCheck","MatRadioButton","descendants","MatRadioButtonBase","_MatRadioButtonMixinBase","radioGroup","_radioDispatcher","_removeUniqueSelectionListener","listen","newCheckedState","notify","_isRippleDisabled","_onInputChange","groupValueChanged","[class.mat-radio-checked]","[class.mat-radio-disabled]","[attr.id]","UniqueSelectionDispatcher","ariaDescribedby","MatRadioModule","MAT_DRAWER_DEFAULT_AUTOSIZE","_container","_margins","_contentMargins","margins","[style.margin-left.px]","_focusTrapFactory","_doc","_elementFocusedBeforeDrawerWasOpened","_mode","_disableClose","openedChange","opened","_isFocusTrapEnabled","_focusTrap","_trapFocus","_restoreFocus","close","onPositionChanged","_modeChanged","HTMLElement","_openedVia","enabled","destroy","isOpen","openedVia","_opened","_enableAnimations","_openedStream","openedStart","_closedStream","closedStart","backdropClick","_doCheckSubject","_autosize","defaultAutosize","drawer","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","_isDrawerOpen","_start","_end","_updateContentMargins","debounceTime","ngDoCheck","_setContainerClass","throwMatDuplicatedDrawerError","_right","_left","_closeModalDrawer","disableClose","_canHaveBackdrop","_isShowingBackdrop","_width","autosize","hasBackdrop","MatSelect","MatOptionModule","MatFormFieldModule","MatSelectTrigger","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","MatSelectModule","matTooltipAnimations","tooltipState","MAT_TOOLTIP_SCROLL_STRATEGY","overlay","inject","scrollStrategies","reposition","scrollThrottle","MAT_TOOLTIP_DEFAULT_OPTIONS","showDelay","hideDelay","touchendHideDelay","MatTooltip","_scrollDispatcher","_ariaDescriber","_scrollStrategy","_defaultOptions","_message","_manualListeners","IOS","nodeName","webkitUserSelect","userSelect","listener","addEventListener","_updatePosition","updatePosition","removeDescription","_isTooltipVisible","_updateTooltipMessage","describe","_tooltipClass","_tooltipInstance","_setTooltipClass","removeEventListener","clear","delay","_detach","_portal","TooltipComponent","afterHidden","isVisible","ESCAPE","_handleTouchend","_getOrigin","_getOverlayPosition","strategy","flexibleConnectedTo","withFlexibleHeight","withFlexibleWidth","withViewportMargin","withPositions","main","fallback","scrollableAncestors","getAncestorScrollContainers","withScrollableContainers","positionChanges","scrollableViewProperties","isOverlayClipped","_setTransformOrigin","connectionPair","scrollStrategy","getConfig","originPosition","isLtr","originX","originY","getMatTooltipInvalidPositionError","_invertPosition","overlayPosition","overlayX","overlayY","tooltipClass","(touchend)","ScrollDispatcher","AriaDescriber","_visibility","_closeOnInteraction","_transformOrigin","_onHide","_isHandset","_hideTimeoutId","_showTimeoutId","_animationStart","_animationDone","_handleBodyInteraction","aria-hidden","MatTooltipModule","itemsPerPageLabel","nextPageLabel","previousPageLabel","firstPageLabel","lastPageLabel","getRangeLabel","MatPaginatorIntl","MAT_PAGINATOR_INTL_PROVIDER","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","PageEvent","MatPaginator","_pageIndex","_length","_pageSizeOptions","_hidePageSize","_showFirstLastButtons","_intlChanges","_pageSize","_updateDisplayedPageSizeOptions","p","_initialized","nextPage","hasNextPage","_emitPageEvent","previousPage","hasPreviousPage","firstPage","lastPage","getNumberOfPages","numberOfPages","_changePageSize","floor","pageSizeOptions","_displayedPageSizeOptions","hidePageSize","showFirstLastButtons","MatPaginatorModule","MatProgressBarBase","_MatProgressBarMixinBase","progressbarId","MatProgressBar","_bufferValue","clamp","_primaryTransform","_bufferTransform","bufferValue","aria-valuemin","aria-valuemax","[attr.mode]","MatProgressBarModule","BASE_SIZE","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","INDETERMINATE_ANIMATION_TEMPLATE","_fallbackAnimation","_elementSize","_diameter","EDGE","TRIDENT","animationClass","diameters","_attachStyleNode","_updateElementSize","_strokeWidth","diameter","viewBox","_circleRadius","strokeWidth","PI","_strokeCircumference","styleTag","createElement","head","appendChild","sheet","insertRule","_getAnimationText","replace","Set","MatMenu","_onAnimationDone","matMenuAnimations","transformMenu","fadeInItems","MAT_MENU_DEFAULT_OPTIONS","yPosition","items","MatMenuItem","lazyContent","MatMenuContent","overlapTrigger","MAT_MENU_SCROLL_STRATEGY","MatMenuTrigger","_parentMenu","_menuItemInstance","_menuOpen","_closeSubscription","_hoverSubscription","_openedByMouse","menuOpened","onMenuOpen","menuClosed","onMenuClose","_triggersSubmenu","triggersSubmenu","menu","_checkMenu","reason","_destroyMenu","_hovered","openMenu","_cleanUpSubscriptions","toggleMenu","closeMenu","menuData","_menuClosingActions","_initMenu","_startAnimation","menuOpen","_resetMenu","_resetAnimation","parentMenu","_setMenuElevation","_setIsMenuOpen","focusFirstItem","setElevation","depth","_highlighted","throwMatMenuMissingError","_getOverlayConfig","_subscribeToPositions","_getPosition","backdropClass","posX","posY","setPositionClasses","xPosition","originFallbackX","_b","overlayFallbackY","_c","originFallbackY","_d","overlayFallbackX","offsetY","backdrop","parentClose","hover","_handleMousedown","isFakeMousedownFromScreenReader","aria-haspopup","(mousedown)","Self","_deprecatedMatMenuTriggerFor","MatMenuModule","matSelectAnimations","transformPanel","minWidth","group","fadeInContent","MAT_SELECT_SCROLL_STRATEGY","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinErrorState","_parentFormField","_scrollStrategyFactory","_panelOpen","_scrollTop","_multiple","_compareWith","o1","o2","_uid","_destroy","_triggerFontSize","_onChange","_onTouched","_optionIds","_panelDoneAnimating","_offsetY","_positions","_disableOptionCentering","focused","controlType","optionSelectionChanges","defer","options","option","onSelectionChange","onStable","switchMap","o","selectionChange","valueChange","valueAccessor","_placeholder","stateChanges","_selectionModel","getMatSelectDynamicMultipleError","getMatSelectNonFunctionValueError","_initializeSelection","_id","SelectionModel","multiple","_initKeyManager","_resetOptions","updateErrorState","panelOpen","_triggerRect","getComputedStyle","_keyManager","withHorizontalOrientation","_calculateOverlayPosition","_highlightCorrectOption","overlayDir","fontSize","_isRtl","_setSelectionByValue","selectedOptions","viewValue","reverse","join","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","altKey","onKeydown","manager","setFirstItemActive","setLastItemActive","activeItem","previouslyFocusedIndex","activeItemIndex","shiftKey","_selectViaInteraction","_onPanelDone","offsetX","_onFadeInDone","_onAttached","positionChange","_calculateOverlayOffsetX","panel","scrollTop","_getPanelTheme","color","isEmpty","isUserInput","getMatSelectNonArrayValueError","_clearSelection","currentValue","_selectValue","_sortValues","correspondingOption","setActiveItem","error","console","warn","select","skip","deselect","ActiveDescendantKeyManager","withTypeAhead","withVerticalOrientation","tabOut","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","_setOptionIds","wasSelected","isSelected","_propagateChanges","fallbackValue","valueToEmit","activeOptionIndex","labelCount","_countGroupLabelsBeforeOption","optionGroups","_getOptionScrollPosition","_getItemHeight","_getOptionIndex","result","current","itemHeight","_getItemCount","panelHeight","scrollContainerHeight","maxScroll","selectedOptionOffset","scrollBuffer","_calculateOverlayScroll","_calculateOverlayOffsetY","_checkOverlayWithinViewport","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","placeholder","_getAriaActiveDescendant","overlayRect","viewportSize","getViewportSize","paddingWidth","SELECT_MULTIPLE_PANEL_PADDING_X","first","leftOverflow","rightOverflow","optionOffsetFromPanelTop","optionHeightAdjustment","maxOptionsDisplayed","firstDisplayedIndex","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","setDescribedByIds","ids","_ariaDescribedby","onContainerClick","[attr.tabindex]","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","MatFormFieldControl","MAT_OPTION_PARENT_COMPONENT","NgForm","FormGroupDirective","MatFormField","NgControl","CdkConnectedOverlay","MatOption","MatOptgroup","customTrigger","disableOptionCentering","compareWith","errorStateMatcher","MatSelectionList","MAT_SELECTION_LIST_VALUE_ACCESSOR","MatListOption","_MatSelectionListMixinBase","MatLineModule","MatPseudoCheckboxModule","MatList","MatNavList","MatListItem","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatListSubheaderCssMatStyler","MatDividerModule","MatListModule","_template","_appRef","context","_outlet","DomPortalOutlet","insertBefore","outletElement","isAttached","ApplicationRef","sequence","MatMenuItemBase","_MatMenuItemMixinBase","_checkDisabled","_emitHoverEvent","getLabel","textNodeType","TEXT_NODE","output","length_1","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","_xPosition","_yPosition","_tabSubscription","_classList","_panelAnimationState","_overlapTrigger","_hasBackdrop","throwMatMenuInvalidPositionX","throwMatMenuInvalidPositionY","classes","className","FocusKeyManager","withWrap","item","setFocusOrigin","resetActiveItem","newElevation","customElevation","c","_previousElevation","_navList","_isNavList","_handleFocus","_handleBlur","[class.mat-list-item-avatar]","[class.mat-list-item-with-avatar]","MatSelectionListBase","MatListOptionBase","_MatListOptionMixinBase","MatSelectionListChange","selectionList","_hasFocus","checkboxPosition","_setSelected","_reportValueChange","MatLineSetter","_lines","_removeOptionFromList","_text","_setFocusedOption","tabindex","[class.mat-list-item-disabled]","[class.mat-list-item-focus]","[attr.aria-selected]","skipPredicate","_tempValues","_setOptionsFromValues","_modelChanges","_i","added","removed","optionIndex","setNextItemActive","_toggleSelectOnFocusedOption","_getSelectedOptionValues","values","_getOptionByValue","Boolean","focusedOption","focusedIndex","iconElement","_setSvgAttributes","_toSvgElement","svg","_svgElementFromString","MatIconRegistry","str","div","innerHTML","ELEMENT_NODE","cloneNode","setAttribute","_fetchUrl","safeUrl","_httpClient","getMatIconNoHttpProviderError","url","_sanitizer","sanitize","SecurityContext","RESOURCE_URL","getMatIconFailedToSanitizeError","inProgressFetch","_inProgressUrlFetches","req","responseType","finalize","share","HttpClient","DomSanitizer","ICON_REGISTRY_PROVIDER","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","_MatIconMixinBase","MatIcon","_iconRegistry","ariaHidden","_inline","inline","_fontSet","_cleanupFontValue","_fontIcon","_splitIconName","iconName","parts","svgIcon","namespace","getNamedSvgIcon","_setSvgElement","err","log","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","classNameForFontAlias","getDefaultFontSetClass","_previousFontSetClass","fontIcon","_previousFontIconClass","[class.mat-icon-inline]","MatListBase","_MatListMixinBase","MatListItemBase","_MatListItemMixinBase","_disabledChange","MatDatepickerInput","_datepicker","_datepickerSubscription","_selectedChanged","_cvaOnChange","dateInput","MatDatepickerInputEvent","dateChange","_localeSubscription","_valueChange","registerOnValidatorChange","_validatorOnChange","validate","_validator","getPopupConnectionElementRef","getConnectedOverlayOrigin","_formField","_onInput","date","_dateAdapter","parse","_dateFormats","_lastValueValid","isValid","_getValidDateOrNull","_getThemePalette","isDateInstance","MAT_DATEPICKER_VALUE_ACCESSOR","MAT_DATEPICKER_VALIDATORS","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","DateAdapter","MAT_DATE_FORMATS","matDatepicker","matDatepickerFilter","MatDatepickerToggleIcon","MatDatepickerToggle","datepicker","_watchStateChanges","datepickerDisabled","inputDisabled","_datepickerInput","datepickerToggled","openedStream","closedStream","[class.mat-datepicker-toggle-active]","[class.mat-accent]","[class.mat-warn]","_customIcon","MatDialogModule","A11yModule","MatCalendar","MatCalendarBody","MatDatepicker","MatDatepickerContent","MatMonthView","MatYearView","MatMultiYearView","MatCalendarHeader","MatDatepickerIntl","MatDatepickerModule","_inset","MatDivider","[class.mat-divider-vertical]","[class.mat-divider-inset]","_hideToggle","displayMode","MatAccordion","hideToggle","CdkAccordion","MatExpansionPanelContent","matExpansionAnimations","indicatorRotate","expansionHeaderHeight","params","collapsedHeight","expandedHeight","bodyExpansion","uniqueId","MatExpansionPanel","accordion","_uniqueSelectionDispatcher","_inputChanges","_headerId","_getHideToggle","_hasSpacing","expanded","_getExpandedState","_lazyContent","_bodyAnimation","phaseName","outputs","[class.mat-expanded]","[class.mat-expansion-panel-spacing]","MatExpansionPanelActionRow","MatExpansionPanelHeader","_parentChangeSubscription","_toggle","_isExpanded","_getPanelId","_showToggle","_keydown","[attr.aria-controls]","[@expansionHeight]","CdkAccordionModule","MatExpansionPanelTitle","MatExpansionPanelDescription","MatExpansionModule","MatGridTile","_rowspan","_colspan","coerceToNumber","_setStyle","property","MatGridTileText","MatGridAvatarCssMatStyler","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","TileCoordinator","numColumns","tiles","columnIndex","rowIndex","tracker","fill","tile","_trackTile","lastRowMax","rowCount","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","rowspan","row","col","TileStyler","_rows","init","gutterSize","cols","_gutterSize","normalizeUnits","_cols","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","reset","list","_setListStyle","_tiles","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","parseFloat","FitTileStyler","gutterHeightPerTile","MatGridList","_gutter","coerceToString","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","rowHeight","_tileStyler","MatGridListModule","SvgIconConfig","svgElement","_svgIconConfigs","_iconSetConfigs","_cachedIconsByUrl","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","addSvgIconInNamespace","iconKey","addSvgIconSet","addSvgIconSetInNamespace","configNamespace","registerFontClassAlias","alias","setDefaultFontSetClass","getSvgIconFromUrl","cachedIcon","cloneSvg","_loadSvgIconFromConfig","tap","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","observableThrow","getMatIconNameNotFoundError","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","catchError","forkJoin","foundIcon","_extractSvgIconFromSet","svgText","_createSvgElementForSingleIcon","responseText","iconSet","iconSource","yearName","getYearName","createDate","year","MatCalendarCell","_shouldEnableYear","maxDate","getYear","minDate","dateFilter","firstOfYear","addCalendarDays","selectedChange","yearSelected","_matCalendarBody","monthSelected","createMissingDateImplError","_activeDate","today","oldActiveDate","validDate","deserialize","clampDate","_init","_selectedMonth","_getMonthInCurrentYear","_minDate","_maxDate","_focusActiveCell","_monthSelected","month","normalizedDate","activeDate","daysInMonth","getNumDaysInMonth","getDate","_handleCalendarBodyKeydown","addCalendarMonths","getMonth","addCalendarYears","_todayMonth","_yearLabel","monthNames","getMonthNames","_months","_createCellForMonth","monthName","format","display","monthYearA11yLabel","toLocaleUpperCase","_shouldEnableMonth","activeYear","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","firstOfMonth","maxYear","maxMonth","minYear","minMonth","calendar","currentView","monthYearLabel","switchToMultiYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","multi-year","prevMultiYearLabel","nextMonthLabel","nextYearLabel","nextMultiYearLabel","currentPeriodClicked","previousClicked","nextClicked","previousEnabled","_isSameView","nextEnabled","date1","date2","preserveWhitespaces","startAt","startView","firstChange","view","monthView","yearView","multiYearView","headerComponent","_userSelection","matDatepickerAnimations","fadeInCalendar","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY","MatDatepickerContentBase","_MatDatepickerContentMixinBase","_popupRef","_positionChange","isAbove","_isAbove","[@transformPanel]","[class.mat-datepicker-content-touch]","[class.mat-datepicker-content-above]","_inputSubscription","_popupComponentRef","sameDate","_focusedElementBeforeOpen","activeElement","touchUi","_openAsDialog","_openAsPopup","_dialogRef","_calendarPortal","completeClose","afterClosed","componentInstance","_setColor","_createPopup","keydownEvents","MatDialog","calendarHeaderComponent","NG_VALIDATORS","target","targetElement","_parseValidator","matDatepickerParse","text","_minValidator","controlValue","compareDate","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_filterValidator","_dateFilter","Validators","compose","localeChanges","registerDatepicker","_registerInput","oldDate","[@slideDialog]","(@slideDialog.start)","(@slideDialog.done)","MatDialogContainer","MatDialogRef","_containerInstance","location","_afterOpen","_afterClosed","_beforeClose","_locationChanges","_animationStateChanged","_result","closeOnNavigation","dialogResult","detachBackdrop","_startExitAnimation","afterOpen","beforeClose","_getPositionStrategy","centerVertically","updateSize","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","block","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","_location","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","componentOrTemplateRef","_applyConfigDefaults","MatDialogConfig","getDialogById","dialogContainer","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","dialog","dialogConfig","minHeight","maxWidth","maxHeight","previousValue","removeAttribute","overlayContainer","getContainerElement","parentElement","siblings","sibling","hasAttribute","getAttribute","Location","OverlayContainer","dialogElementUid","MatDialogClose","_dialog","getClosestDialog","proxiedChange","_matDialogClose","MatDialogTitle","_ariaLabelledBy","MatDialogContent","MatDialogActions","MatTextareaAutosize","minRows","maxRows","rows","matAutosizeMinRows","matAutosizeMaxRows","CdkTextareaAutosize","MAT_INPUT_INVALID_TYPES","MatInputBase","_MatInputMixinBase","MatInput","inputValueAccessor","_autofillMonitor","_isServer","autofilled","_type","_readonly","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","el","selectionStart","selectionEnd","setSelectionRange","_validateType","_isTextarea","isAutofilled","_dirtyCheckNativeValue","isFocused","readonly","getMatInputUnsupportedTypeError","_isNeverEmpty","_isBadInput","validity","badInput","[class.mat-input-server]","[attr.placeholder]","[required]","[readonly]","AutofillMonitor","TextFieldModule","MatInputModule","calendarLabel","openCalendarLabel","displayValue","numCols","allowDisabledSelection","activeCell","cellAspectRatio","selectedValueChange","_cellClicked","cell","_isActiveCell","cellNumber","_firstRowOffset","attr.aria-readonly","todayValue","selectedValue","labelMinRequiredCells","activeDateChange","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","_weekdays","_hasSameMonthAndYear","_selectedDate","_getDateInCurrentMonth","_dateSelected","selectedYear","selectedMonth","selectedDate","_todayDate","_monthLabel","_firstWeekOffset","getDayOfWeek","_createWeekCells","dateNames","getDateNames","_weeks","_shouldEnableDate","dateA11yLabel","d1","d2","_selectedYear","_todayYear","activeOffset","_years","_createCellForYear","_yearSelected","yearsPerPage","_getActiveCell","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MAT_CHECKBOX_CLICK_ACTION","MatCheckbox","indeterminateChange","ripple","indeterminate","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","MatCheckboxModule","MatChipSelectionChange","MatChipBase","_MatChipMixinBase","CHIP_ATTRIBUTE_NAMES","MatChipAvatar","MatChipTrailingIcon","MatChip","ngZone","chipListSelectable","_selectable","_removable","destroyed","_addHostClassName","_chipRipple","RippleRenderer","selectable","CHIP_ATTRIBUTE_NAMES_1","attr","tagName","chip","_removeTriggerEvents","selectViaInteraction","toggleSelected","removable","DELETE","BACKSPACE","_blur","[class.mat-chip-selected]","[class.mat-chip-with-avatar]","[class.mat-chip-with-trailing-icon]","[class.mat-chip-disabled]","avatar","trailingIcon","removeIcon","MatChipRemove","_parentChip","MAT_CHIPS_DEFAULT_OPTIONS","MatChipListBase","_MatChipListMixinBase","MatChipListChange","MatChipList","_lastDestroyedIndex","_chipSet","_tabOutSubscription","_tabIndex","_userTabIndex","ariaOrientation","_chipInput","chips","_changeSubscription","_resetChips","_updateTabIndex","_updateFocusForDestroyedChips","_chipRemoveSubscription","_dropSubscriptions","registerInput","inputElement","_focusInput","_isInputEmpty","_updateKeyManager","chipIndex","chipsArray","newFocusIndex","focusChip","correspondingChip","_markAsTouched","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","chipSelectionChanges","chipFocusChanges","updateActiveItemIndex","chipBlurChanges","chipRemoveChanges","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","[class.mat-chip-list-required]","MatChipInput","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","_emitChipEnd","addOnBlur","_focus","chipList","CHIP_DECLARATIONS","ɵ0","useValue","MatChipsModule","ariaDescribedBy","autoFocus","matDialogAnimations","slideDialog","_elementFocusedBeforeDialogWasOpened","_state","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","focusInitialElementWhenReady","toFocus","_onAnimationStart","MatAnchor","MatButton","MatButtonToggleGroupBase","_MatButtonToggleGroupMixinBase","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","MatButtonToggleGroupMultiple","_uniqueIdCounter","MatButtonToggleChange","_buttonToggles","_tempValue","_syncButtonToggle","_isSelected","[class.mat-button-toggle-vertical]","MatButtonToggle","MatButtonToggleBase","_MatButtonToggleMixinBase","toggleGroup","_isSingleSelector","buttonToggleGroup","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","MatButtonToggleModule","MatCardContent","MatCardTitle","MatCardSubtitle","align","[class.mat-card-actions-align-end]","MatCardActions","MatCardFooter","MatCardImage","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardXlImage","MatCardAvatar","MatCardHeader","MatCardTitleGroup","MatCard","MatCardModule","MatCheckboxChange","MatCheckboxBase","_MatCheckboxMixinBase","_clickAction","_currentAnimationClass","_currentCheckState","TransitionCheckState","Init","_indeterminate","changed","_transitionCheckState","Indeterminate","Checked","Unchecked","_getAriaChecked","newState","oldState","_getAnimationClassForCheckStateTransition","_removeFocusRipple","_onInteractionEvent","animSuffix","openPanel","MatAutocompleteTrigger","_canOpen","_previousValue","_attachOverlay","_floatLabel","shouldAnimate","floatLabel","_animateAndLockLabel","_manuallyFloatingLabel","_resetLabel","_scrollToOption","autocomplete","newScrollPosition","_getScrollTop","_setScrollTop","_subscribeToClosingActions","firstStable","_zone","optionChanges","_positionStrategy","reapplyLastPosition","_resetActiveItem","_setVisibility","panelClosingActions","_setValueAndClose","_destroyPanel","closePanel","_setTriggerValue","toDisplay","inputValue","_control","_clearPreviousSelectedOption","_emitSelectEvent","getMatAutocompleteMissingPanelError","_getHostWidth","_closingActionsSubscription","wasOpen","_isOpen","_overlayAttached","_getConnectedElement","withPush","autoActiveFirstOption","readOnly","aria-autocomplete","(focusin)","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","Host","MatAutocomplete","MatAutocompleteModule","MatBadge","_color","_overlap","val","_updateTextContent","_description","newDescription","_updateHostAriaDescription","_hidden","isAfter","description","_badgeElement","_createBadgeElement","badgeElement","oldDescription","colorPalette","[class.mat-badge-overlap]","[class.mat-badge-above]","[class.mat-badge-below]","[class.mat-badge-before]","[class.mat-badge-after]","[class.mat-badge-small]","[class.mat-badge-medium]","[class.mat-badge-large]","[class.mat-badge-hidden]","overlap","hidden","MatBadgeModule","MAT_BOTTOM_SHEET_DATA","MatBottomSheetConfig","MatBottomSheetRef","bottomSheetConfig","_keydownEvents","matBottomSheetAnimations","bottomSheetState","MatBottomSheetContainer","breakpointObserver","_elementFocusedBeforeOpened","_breakpointSubscription","Medium","Large","XLarge","_toggleClass","isMatched","_validatePortalAttached","_setPanelClass","(@state.start)","FocusTrapFactory","MatBottomSheet","_parentBottomSheet","_bottomSheetRefAtThisLevel","_openedBottomSheetRef","_attachContainer","ref","bottomSheetRef","MatBottomSheetModule","DEFAULT_ROUND_BUTTON_COLOR","DEFAULT_FLAT_BUTTON_COLOR","BUTTON_HOST_ATTRIBUTES","MatButtonBase","_MatButtonMixinBase","_isRoundButton","_hasHostAttributes","_isIconButton","BUTTON_HOST_ATTRIBUTES_1","attributes","attribute","focusMonitor","stopImmediatePropagation","_emitSelectionChangeEvent","MatOptionSelectionChange","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]","MAT_LABEL_GLOBAL_OPTIONS","MatError","matFormFieldAnimations","transitionMessages","[class.mat-right]","MatHint","MatLabel","MatPlaceholder","MatPrefix","MatSuffix","MatFormFieldBase","_MatFormFieldMixinBase","MAT_FORM_FIELD_DEFAULT_OPTIONS","labelOptions","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_outlineGapWidth","_outlineGapStart","_labelOptions","float","_appearance","appearance","_hideRequiredMarker","_processHints","_connectionContainerRef","_validateControlChild","_validatePlaceholders","_syncDescribedByIds","valueChanges","_hintChildren","_errorChildren","updateOutlineGap","_shouldForward","prop","_hasPlaceholder","_placeholderChild","_hasLabel","_labelChild","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_hasFloatingLabel","_getDisplayedMessages","errorState","fromEvent","_label","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","hintLabel","getMatFormFieldDuplicatedHintError","startHint","endHint","getMatFormFieldMissingControlError","containerStart","_getStartEnd","labelStart","labelWidth","outlineGapPadding","rect","[class.mat-form-field-appearance-standard]","[class.mat-form-field-appearance-fill]","[class.mat-form-field-appearance-outline]","[class.mat-form-field-appearance-legacy]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-form-field-autofilled]","[class.mat-focused]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","underlineRef","_inputContainerRef","_prefixChildren","_suffixChildren","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","MatAutocompleteBase","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","defaults","showPanel","optionSelected","_autoActiveFirstOption","_componentDestroyed","_closeKeyEventStream","optionSelections","_outsideClickStream","clickTarget","formField","activeOption","prevActiveItem","TAB","_handleInput","__extends","d","__","constructor","extendStatics","base","class_1","defaultColor","defaultTabIndex","matcher","mixinInitialized","_pendingSubscribers","initialized","Observable","subscriber","_notifySubscriber","_markInitialized","range","valueFunction","valuesArray","enforceStyleRecalculation","window","getPropertyValue","distanceToFurthestCorner","distX","distY","sqrt","optionsArray","groups","groupCounter","optionOffset","currentScrollPosition","optionHeight","defaultOptions","provider","exp","match","parentRegistry","httpClient","sanitizer","parentIntl","sortOrder","setPrototypeOf","__proto__","__assign","assign","s","n","SHARP_CURVE","MATERIAL_SANITY_CHECKS","_sanityChecksEnabled","_hasDoneGlobalChecks","_hasCheckedHammer","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","doctype","testElement","body","computedStyle","_checkHammerIsAvailable","BidiModule","MAT_DATE_LOCALE","LOCALE_ID","_localeChanges","setLocale","locale","second","firstValid","secondValid","SUPPORTS_INTL_API","Intl","DEFAULT_MONTH_NAMES","short","String","DEFAULT_DATE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","NativeDateAdapter","matDateLocale","useUtcForDisplay","_clampDate","getFullYear","getDay","dtf_1","DateTimeFormat","timeZone","_stripDirectionalityCharacters","_format","Date","dtf_2","day","dtf_3","weekday","dtf","_createDateWithOverflow","clone","displayFormat","setFullYear","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","test","isNaN","getTime","NaN","UTC","getHours","getMinutes","getSeconds","getMilliseconds","MAT_NATIVE_DATE_FORMATS","NativeDateModule","MatNativeDateModule","ShowOnDirtyErrorStateMatcher","dirty","submitted","touched","MAT_HAMMER_OPTIONS","_hammerOptions","commonModule","_hammer","Hammer","events","buildHammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","MatLine","_setLineClass","count","_resetClasses","_setClass","isAdd","RippleRef","_renderer","RippleState","HIDDEN","fadeOutRipple","defaultRippleAnimationConfig","enterDuration","exitDuration","ignoreMouseEventsTimeout","_target","_isPointerDown","_triggerEvents","_activeRipples","_eventOptions","supportsPassiveEventListeners","passive","onMousedown","isSyntheticEvent","_lastTouchStartEvent","now","rippleDisabled","fadeInRipple","onTouchStart","touches","onPointerUp","VISIBLE","FADING_IN","_containerElement","containerRect","_containerRect","animationConfig","centered","radius","transitionDuration","rippleRef","runTimeoutOutsideZone","wasActive","rippleEl","FADING_OUT","fadeOutAll","_triggerElement","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","_trigger","configOrX","[class.mat-ripple-unbounded]","unbounded","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatPseudoCheckbox","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter","_labelId","[class.mat-optgroup-disabled]","_parent","_active","_mostRecentViewValue","setActiveStyles","setInactiveStyles","ngAfterViewChecked"],"mappings":"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"}