{"version":3,"file":"material.umd.min.js","sources":["../../src/lib/expansion/expansion-animations.ts","../../src/lib/select/select.ts","../../src/lib/tooltip/tooltip.ts","../../src/lib/tabs/tab-header.ts","../../src/lib/tabs/tab-group.ts","../../src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/lib/tabs/tabs-module.ts","../../src/lib/toolbar/toolbar.ts","../../src/lib/toolbar/toolbar-module.ts","../../src/lib/tree/outlet.ts","../../src/lib/tree/node.ts","../../src/lib/tree/padding.ts","../../src/lib/tree/tree.ts","../../src/lib/tree/toggle.ts","../../src/lib/tree/tree-module.ts","../../src/lib/tree/data-source/flat-data-source.ts","../../src/lib/tree/data-source/nested-data-source.ts","../../src/lib/version.ts","../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/core/testing/month-constants.ts","../../src/lib/stepper/step-header.ts","../../src/lib/stepper/stepper-animations.ts","../../src/lib/stepper/stepper-icon.ts","../../src/lib/stepper/stepper.ts","../../src/lib/stepper/stepper-button.ts","../../src/lib/stepper/stepper-module.ts","../../src/lib/table/table.ts","../../src/lib/table/cell.ts","../../src/lib/table/row.ts","../../src/lib/table/table-module.ts","../../src/lib/table/table-data-source.ts","../../src/lib/tabs/ink-bar.ts","../../src/lib/tabs/tab-label.ts","../../src/lib/tabs/tab-content.ts","../../src/lib/tabs/tab.ts","../../src/lib/tabs/tabs-animations.ts","../../src/lib/tabs/tab-body.ts","../../src/lib/tabs/tab-label-wrapper.ts","../../src/lib/slider/slider.ts","../../src/lib/slider/slider-module.ts","../../src/lib/snack-bar/snack-bar-ref.ts","../../src/lib/snack-bar/snack-bar-config.ts","../../src/lib/snack-bar/snack-bar-animations.ts","../../src/lib/snack-bar/simple-snack-bar.ts","../../src/lib/snack-bar/snack-bar-container.ts","../../src/lib/snack-bar/snack-bar-module.ts","../../src/lib/snack-bar/snack-bar.ts","../../src/lib/sort/sort.ts","../../src/lib/sort/sort-animations.ts","../../src/lib/sort/sort-header-intl.ts","../../src/lib/sort/sort-header.ts","../../src/lib/sort/sort-module.ts","../../src/lib/stepper/step-label.ts","../../src/lib/stepper/stepper-intl.ts","../../src/lib/sidenav/drawer.ts","../../src/lib/sidenav/sidenav.ts","../../src/lib/sidenav/sidenav-module.ts","../../src/lib/slide-toggle/slide-toggle-config.ts","../../src/lib/slide-toggle/slide-toggle.ts","../../src/lib/slide-toggle/slide-toggle-module.ts","../../src/lib/progress-spinner/progress-spinner.ts","../../src/lib/progress-spinner/progress-spinner-module.ts","../../src/lib/radio/radio.ts","../../src/lib/radio/radio-module.ts","../../src/lib/sidenav/drawer-animations.ts","../../src/lib/select/select-module.ts","../../src/lib/tooltip/tooltip-animations.ts","../../src/lib/tooltip/tooltip-module.ts","../../src/lib/paginator/paginator-intl.ts","../../src/lib/paginator/paginator.ts","../../src/lib/paginator/paginator-module.ts","../../src/lib/progress-bar/progress-bar.ts","../../src/lib/progress-bar/progress-bar-module.ts","../../src/lib/menu/menu-directive.ts","../../src/lib/menu/menu-trigger.ts","../../src/lib/menu/menu-module.ts","../../src/lib/select/select-animations.ts","../../src/lib/list/selection-list.ts","../../src/lib/list/list-module.ts","../../src/lib/menu/menu-content.ts","../../src/lib/menu/menu-animations.ts","../../src/lib/menu/menu-panel.ts","../../src/lib/menu/menu-item.ts","../../src/lib/list/list.ts","../../src/lib/icon/icon-registry.ts","../../src/lib/icon/icon.ts","../../src/lib/icon/icon-module.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-module.ts","../../src/lib/divider/divider.ts","../../src/lib/divider/divider-module.ts","../../src/lib/expansion/accordion.ts","../../src/lib/expansion/expansion-panel-content.ts","../../src/lib/expansion/expansion-panel.ts","../../src/lib/expansion/expansion-panel-header.ts","../../src/lib/expansion/expansion-module.ts","../../src/lib/grid-list/grid-tile.ts","../../src/lib/grid-list/tile-coordinator.ts","../../src/lib/grid-list/tile-styler.ts","../../src/lib/grid-list/grid-list.ts","../../src/lib/grid-list/grid-list-module.ts","../../src/lib/datepicker/multi-year-view.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/datepicker/calendar.ts","../../src/lib/datepicker/datepicker-animations.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/dialog/dialog-container.ts","../../src/lib/dialog/dialog-ref.ts","../../src/lib/dialog/dialog.ts","../../src/lib/dialog/dialog-content-directives.ts","../../src/lib/dialog/dialog-module.ts","../../src/lib/input/autosize.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/input.ts","../../src/lib/input/input-module.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/chips/chip.ts","../../src/lib/chips/chip-default-options.ts","../../src/lib/chips/chip-list.ts","../../src/lib/chips/chip-input.ts","../../src/lib/chips/chips-module.ts","../../src/lib/dialog/dialog-config.ts","../../src/lib/dialog/dialog-animations.ts","../../src/lib/button/button.ts","../../src/lib/button/button-module.ts","../../src/lib/button-toggle/button-toggle.ts","../../src/lib/button-toggle/button-toggle-module.ts","../../src/lib/card/card.ts","../../src/lib/card/card-module.ts","../../src/lib/checkbox/checkbox-config.ts","../../src/lib/autocomplete/autocomplete.ts","../../src/lib/autocomplete/autocomplete-origin.ts","../../src/lib/autocomplete/autocomplete-module.ts","../../src/lib/badge/badge.ts","../../src/lib/badge/badge-module.ts","../../src/lib/bottom-sheet/bottom-sheet-config.ts","../../src/lib/bottom-sheet/bottom-sheet-animations.ts","../../src/lib/bottom-sheet/bottom-sheet-container.ts","../../src/lib/bottom-sheet/bottom-sheet-module.ts","../../src/lib/bottom-sheet/bottom-sheet-ref.ts","../../src/lib/bottom-sheet/bottom-sheet.ts","../../src/lib/core/option/option.ts","../../src/lib/core/option/index.ts","../../src/lib/core/label/label-options.ts","../../src/lib/form-field/error.ts","../../src/lib/form-field/form-field-animations.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/label.ts","../../src/lib/form-field/placeholder.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field-module.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/disable-ripple.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/core/common-behaviors/initialized.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/grid-list/grid-list-measure.ts","../../src/lib/menu/menu-errors.ts","../../src/lib/select/select-errors.ts","../../src/lib/sort/sort-errors.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/datetime/date-formats.ts","../../src/lib/core/datetime/native-date-formats.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/line/line.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/option/optgroup.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  animateChild,\n  group,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/** Animations used by the Material expansion panel. */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '48px'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '64px'}\n    }),\n    transition('expanded <=> collapsed', group([\n      query('@indicatorRotate', animateChild(), {optional: true}),\n      animate(EXPANSION_PANEL_ANIMATION_TIMING),\n    ])),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  SPACE,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  CdkConnectedOverlay,\n  Overlay,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  ViewportRuler,\n} from '@angular/cdk/overlay';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  CanDisable,\n  CanDisableRipple,\n  CanUpdateErrorState,\n  ErrorStateMatcher,\n  HasTabIndex,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinErrorState,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {defer, merge, Observable, Subject} from 'rxjs';\nimport {\n  filter,\n  map,\n  startWith,\n  switchMap,\n  take,\n  takeUntil,\n  distinctUntilChanged,\n} from 'rxjs/operators';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 20px.\n */\nexport const SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 20;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nexport class MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatSelectMixinBase = mixinDisableRipple(\n    mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_getAriaLabel()',\n    '[attr.aria-labelledby]': '_getAriaLabelledby()',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanel,\n    matSelectAnimations.fadeInContent\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form. */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Whether the panel's animation is done. */\n  _panelDoneAnimating: boolean = false;\n\n  /** Emits when the panel element is finished transforming in. */\n  _panelDoneAnimatingStream = new Subject<string>();\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy = this._scrollStrategyFactory();\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the component is disabling centering of the active option over the trigger. */\n  private _disableOptionCentering: boolean = false;\n\n  /** Whether the select is focused. */\n  get focused(): boolean {\n    return this._focused || this._panelOpen;\n  }\n  /**\n   * @deprecated Setter to be removed as this property is intended to be readonly.\n   * @deletion-target 8.0.0\n   */\n  set focused(value: boolean) {\n    this._focused = value;\n  }\n  private _focused = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger') trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether to center the active option over the trigger. */\n  @Input()\n  get disableOptionCentering(): boolean { return this._disableOptionCentering; }\n  set disableOptionCentering(value: boolean) {\n    this._disableOptionCentering = coerceBooleanProperty(value);\n  }\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.options) {\n      return merge(...this.options.map(option => option.onSelectionChange));\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  });\n\n   /** Event emitted when the select panel has been toggled. */\n   @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the select has been opened. */\n  @Output('opened') readonly _openedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => o), map(() => {}));\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed') readonly _closedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => !o), map(() => {}));\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectChange> =\n      new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) private _scrollStrategyFactory) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple);\n    this.stateChanges.next();\n\n    // We need `distinctUntilChanged` here, because some browsers will\n    // fire the animation end event twice for the same animation. See:\n    // https://github.com/angular/angular/issues/24084\n    this._panelDoneAnimatingStream\n      .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n      .subscribe(() => {\n        if (this.panelOpen) {\n          this._scrollTop = 0;\n          this.openedChange.emit(true);\n        } else {\n          this.openedChange.emit(false);\n          this._panelDoneAnimating = false;\n          this.overlayDir.offsetX = 0;\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this._selectionModel.onChange!.pipe(takeUntil(this._destroy)).subscribe(event => {\n      event.added.forEach(option => option.select());\n      event.removed.forEach(option => option.deselect());\n    });\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes.disabled) {\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);\n\n    this._panelOpen = true;\n    this._keyManager.withHorizontalOrientation(null);\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n        keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  /**\n   * When the panel content is done fading in, the _panelDoneAnimating property is\n   * set so the proper class can be added to the panel.\n   */\n  _onFadeInDone(): void {\n    this._panelDoneAnimating = this.panelOpen;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this._focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this._focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[]): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._selectionModel.clear();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n      this._sortValues();\n    } else {\n      this._selectionModel.clear();\n      const correspondingOption = this._selectValue(value);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(correspondingOption);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      this._selectionModel.select(correspondingOption);\n    }\n\n    return correspondingOption;\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\n      .withTypeAhead()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n      // Restore focus to the trigger before closing. Ensures that the focus\n      // position won't be lost if the user got focus into the overlay.\n      this.focus();\n      this.close();\n    });\n\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n      this._onSelect(event.source, event.isUserInput);\n\n      if (event.isUserInput && !this.multiple && this._panelOpen) {\n        this.close();\n        this.focus();\n      }\n    });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption, isUserInput: boolean): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    if (option.value == null && !this._multiple) {\n      option.deselect();\n      this._selectionModel.clear();\n      this._propagateChanges(option.value);\n    } else {\n      option.selected ? this._selectionModel.select(option) : this._selectionModel.deselect(option);\n\n      if (this.multiple) {\n        this._sortValues();\n\n        if (isUserInput) {\n          this._keyManager.setActiveItem(option);\n\n          // In case the user selected the option with their mouse, we\n          // want to restore focus back to the trigger, in order to\n          // prevent the select keyboard controls from clashing with\n          // the ones from `mat-option`.\n          this.focus();\n        }\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n\n    this.stateChanges.next();\n  }\n\n  /** Sorts the selected values in the selected based on their order in the panel. */\n  private _sortValues() {\n    if (this.multiple) {\n      const options = this.options.toArray();\n      this._selectionModel.sort((a, b) => options.indexOf(a) - options.indexOf(b));\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options,\n        this.optionGroups);\n\n    this.panel.nativeElement.scrollTop = _getOptionScrollPosition(\n      activeOptionIndex + labelCount,\n      this._getItemHeight(),\n      this.panel.nativeElement.scrollTop,\n      SELECT_PANEL_MAX_HEIGHT\n    );\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options,\n        this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  _getAriaLabel(): string | null {\n    // If an ariaLabelledby value has been set by the consumer, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Returns the aria-labelledby of the select component. */\n  _getAriaLabelledby(): string | null {\n    if (this.ariaLabelledby) {\n      return this.ariaLabelledby;\n    }\n\n    // Note: we use `_getAriaLabel` here, because we want to check whether there's a\n    // computed label. `this.ariaLabel` is only the user-specified label.\n    if (!this._parentFormField || this._getAriaLabel()) {\n      return null;\n    }\n\n    return this._parentFormField._labelId || null;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n    // blurry content in some browsers.\n    this.overlayDir.offsetX = Math.round(offsetX);\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    // Disable offset if requested by user by returning 0 as value to offset\n    if (this._disableOptionCentering) {\n      return 0;\n    }\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height difference,\n    // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n    // The value is rounded to prevent some browsers from blurring the content.\n    return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {BreakpointObserver, Breakpoints, BreakpointState} from '@angular/cdk/layout';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConnectionPosition,\n  OverlayRef,\n  ScrollDispatcher,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject, Observable} from 'rxjs';\nimport {matTooltipAnimations} from './tooltip-animations';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/** Creates an error to be thrown if the user supplied an invalid tooltip position. */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition({scrollThrottle: SCROLL_THROTTLE_MS});\n}\n\n/** @docs-private */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options', {\n      providedIn: 'root',\n      factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n    });\n\nexport function MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY(): MatTooltipDefaultOptions {\n  return {\n    showDelay: 0,\n    hideDelay: 0,\n    touchendHideDelay: 1500,\n  };\n}\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.google.com/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': '_handleTouchend()',\n  },\n})\nexport class MatTooltip implements OnDestroy {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _portal: ComponentPortal<TooltipComponent>;\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      if (this._overlayRef) {\n        this._updatePosition();\n\n        if (this._tooltipInstance) {\n          this._tooltipInstance!.show(0);\n        }\n\n        this._overlayRef.updatePosition();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay = this._defaultOptions.showDelay;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay = this._defaultOptions.hideDelay;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, Function>();\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    private _platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) private _scrollStrategy,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions: MatTooltipDefaultOptions) {\n\n    const element: HTMLElement = _elementRef.nativeElement;\n\n    // The mouse events shouldn't be bound on iOS devices, because\n    // they can prevent the first tap from firing its click event.\n    if (!_platform.IOS) {\n      this._manualListeners.set('mouseenter', () => this.show());\n      this._manualListeners.set('mouseleave', () => this.hide());\n\n      this._manualListeners\n        .forEach((listener, event) => _elementRef.nativeElement.addEventListener(event, listener));\n    } else if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS, because it will prevent users from typing in inputs. If\n      // we're on iOS and the tooltip is attached on an input or textarea, we clear\n      // the `user-select` to avoid these issues.\n      element.style.webkitUserSelect = element.style.userSelect = '';\n    }\n\n    _focusMonitor.monitor(element).pipe(takeUntil(this._destroyed)).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin === 'keyboard') {\n        _ngZone.run(() => this.show());\n      }\n    });\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._tooltipInstance = null;\n    }\n\n    // Clean up the event listeners set in the constructor\n    if (!this._platform.IOS) {\n      this._manualListeners.forEach((listener, event) =>\n        this._elementRef.nativeElement.removeEventListener(event, listener));\n\n      this._manualListeners.clear();\n    }\n\n    this._destroyed.next();\n    this._destroyed.complete();\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message) { return; }\n\n    const overlayRef = this._createOverlay();\n\n    this._detach();\n    this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    this._tooltipInstance = overlayRef.attach(this._portal).instance;\n    this._tooltipInstance.afterHidden()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Handles the touchend events on the host element. */\n  _handleTouchend() {\n    this.hide(this._defaultOptions.touchendHideDelay);\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    if (this._overlayRef) {\n      return this._overlayRef;\n    }\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay.position()\n      .flexibleConnectedTo(this._elementRef)\n      .withTransformOriginOn('.mat-tooltip')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8);\n\n    const scrollableAncestors = this._scrollDispatcher\n      .getAncestorScrollContainers(this._elementRef);\n\n    strategy.withScrollableContainers(scrollableAncestors);\n\n    strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        }\n      }\n    });\n\n    this._overlayRef = this._overlay.create({\n      direction: this._dir,\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._updatePosition();\n\n    this._overlayRef.detachments()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n\n    return this._overlayRef;\n  }\n\n  /** Detaches the currently-attached tooltip. */\n  private _detach() {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /** Updates the position of the current tooltip. */\n  private _updatePosition() {\n    const position =\n        this._overlayRef!.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    position.withPositions([\n      {...origin.main, ...overlay.main},\n      {...origin.fallback, ...overlay.fallback}\n    ]);\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let originPosition: OriginConnectionPosition;\n\n    if (position == 'above' || position == 'below') {\n      originPosition = {originX: 'center', originY: position == 'above' ? 'top' : 'bottom'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      originPosition = {originX: 'start', originY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      originPosition = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(originPosition.originX, originPosition.originY);\n\n    return {\n      main: originPosition,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let overlayPosition: OverlayConnectionPosition;\n\n    if (position == 'above') {\n      overlayPosition = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (position == 'below') {\n      overlayPosition = {overlayX: 'center', overlayY: 'top'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      overlayPosition = {overlayX: 'end', overlayY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      overlayPosition = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n    return {\n      main: overlayPosition,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(\n        take(1),\n        takeUntil(this._destroyed)\n      ).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private readonly _onHide: Subject<any> = new Subject();\n\n  /** Stream that emits whether the user has a handset-sized display.  */\n  _isHandset: Observable<BreakpointState> = this._breakpointObserver.observe(Breakpoints.Handset);\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _breakpointObserver: BreakpointObserver) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      this._closeOnInteraction = true;\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.google.com/components/tooltips.html#tooltips-interaction\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {END, ENTER, HOME, SPACE} from '@angular/cdk/keycodes';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, mixinDisableRipple} from '@angular/material/core';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\n\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n// Boilerplate for applying mixins to MatTabHeader.\n/** @docs-private */\nexport class MatTabHeaderBase {}\nexport const _MatTabHeaderMixinBase = mixinDisableRipple(MatTabHeaderBase);\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends _MatTabHeaderMixinBase\n    implements AfterContentChecked, AfterContentInit, OnDestroy, CanDisableRipple {\n\n  @ContentChildren(MatTabLabelWrapper) _labelWrappers: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer') _tabListContainer: ElementRef;\n  @ViewChild('tabList') _tabList: ElementRef;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Combines listeners that will re-align the ink bar whenever they're invoked. */\n  private _realignInkBar = Subscription.EMPTY;\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  /** Used to manage focus between the tabs. */\n  private _keyManager: FocusKeyManager<MatTabLabelWrapper>;\n\n  private _selectedIndex: number = 0;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number { return this._selectedIndex; }\n  set selectedIndex(value: number) {\n    value = coerceNumberProperty(value);\n    this._selectedIndexChanged = this._selectedIndex != value;\n    this._selectedIndex = value;\n\n    if (this._keyManager) {\n      this._keyManager.updateActiveItemIndex(value);\n    }\n  }\n\n  /** Event emitted when the option is selected. */\n  @Output() readonly selectFocusedIndex = new EventEmitter();\n\n  /** Event emitted when a label is focused. */\n  @Output() readonly indexFocused = new EventEmitter();\n\n  constructor(private _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() private _dir: Directionality) {\n    super();\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this._updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case HOME:\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n        break;\n      case END:\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        event.preventDefault();\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Aligns the ink bar to the selected tab on load.\n   */\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this._updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    this._keyManager = new FocusKeyManager(this._labelWrappers)\n      .withHorizontalOrientation(this._getLayoutDirection());\n\n    this._keyManager.updateActiveItemIndex(0);\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n\n    this._realignInkBar = merge(dirChange, resize).subscribe(() => {\n      realign();\n      this._keyManager.withHorizontalOrientation(this._getLayoutDirection());\n    });\n  }\n\n  ngOnDestroy() {\n    this._realignInkBar.unsubscribe();\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    this._updatePagination();\n    this._alignInkBarToSelectedTab();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Updating the view whether pagination should be enabled or not\n   */\n  _updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number {\n    return this._keyManager ? this._keyManager.activeItemIndex! : 0;\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this.focusIndex == value || !this._keyManager) { return; }\n\n    this._keyManager.setActiveItem(value);\n    this.indexFocused.emit(value);\n    this._setTabFocus(value);\n  }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    const scrollDistance = this.scrollDistance;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    this._tabList.nativeElement.style.transform = `translate3d(${translateX}px, 0, 0)`;\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  get scrollDistance(): number { return this._scrollDistance; }\n  set scrollDistance(v: number) {\n    this._scrollDistance = Math.max(0, Math.min(this._getMaxScrollDistance(), v));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n  }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(scrollDir: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    this.scrollDistance += (scrollDir == 'before' ? -1 : 1) * viewLength / 3;\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    const selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    const isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  _alignInkBarToSelectedTab(): void {\n    const selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\n        null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisableRipple,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette\n} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\n\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nexport class MatTabGroupBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabGroupMixinBase = mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://material.io/design/components/tabs.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\n\n  @ViewChild('tabBodyWrapper') _tabBodyWrapper: ElementRef;\n\n  @ViewChild('tabHeader') _tabHeader: MatTabHeader;\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n  private _dynamicHeight: boolean = false;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() readonly focusChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() readonly selectedTabChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\n\n  private _groupId: number;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super(elementRef);\n    this._groupId = nextId++;\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked() {\n    // Clamp the next selected index to the boundsof 0 and the tabs length.\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    let indexToSelect = this._indexToSelect =\n        Math.min(this._tabs.length - 1, Math.max(this._indexToSelect || 0, 0));\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect && this._selectedIndex != null) {\n      const tabChangeEvent = this._createChangeEvent(indexToSelect);\n      this.selectedTabChange.emit(tabChangeEvent);\n      // Emitting this value after change detection has run\n      // since the checked content may contain this variable'\n      Promise.resolve().then(() => this.selectedIndexChange.emit(indexToSelect));\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n      tab.isActive = index === indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  /** Re-aligns the ink bar to the selected tab element. */\n  realignInkBar() {\n    if (this._tabHeader) {\n      this._tabHeader._alignInkBarToSelectedTab();\n    }\n  }\n\n  _focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(\n        ...this._tabs.map(tab => tab._disableChange),\n        ...this._tabs.map(tab => tab._labelChange)).subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    this._tabBodyWrapperHeight = this._tabBodyWrapper.nativeElement.clientHeight;\n    this._tabBodyWrapper.nativeElement.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, idx: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = idx;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex, RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from '../ink-bar';\n\n\n// Boilerplate for applying mixins to MatTabNav.\n/** @docs-private */\nexport class MatTabNavBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabNavMixinBase = mixinDisableRipple(mixinColor(MatTabNavBase, 'primary'));\n\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  exportAs: 'matTabNavBar, matTabNav',\n  inputs: ['color', 'disableRipple'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTabNav extends _MatTabNavMixinBase\n    implements AfterContentChecked, AfterContentInit, CanColor, CanDisableRipple, OnDestroy {\n\n  /** Subject that emits when the component has been destroyed. */\n  private readonly _onDestroy = new Subject<void>();\n\n  private _activeLinkChanged: boolean;\n  private _activeLinkElement: ElementRef | null;\n\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n\n  /** Query list of all tab links of the tab navigation. */\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true})\n  _tabLinks: QueryList<MatTabLink>;\n\n  /** Background color of the tab nav. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  constructor(elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler) {\n    super(elementRef);\n  }\n\n  /**\n   * Notifies the component that the active link has been changed.\n   * @deletion-target 7.0.0 `element` parameter to be removed.\n   */\n  updateActiveLink(element: ElementRef) {\n    // Note: keeping the `element` for backwards-compat, but isn't being used for anything.\n    // @deletion-target 7.0.0\n    this._activeLinkChanged = !!element;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  ngAfterContentInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      const dirChange = this._dir ? this._dir.change : observableOf(null);\n\n      return merge(dirChange, this._viewportRuler.change(10))\n          .pipe(takeUntil(this._onDestroy))\n          .subscribe(() => this._alignInkBar());\n    });\n  }\n\n  /** Checks if the active link has been changed and, if so, will update the ink bar. */\n  ngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      const activeTab = this._tabLinks.find(tab => tab.active);\n\n      this._activeLinkElement = activeTab ? activeTab._elementRef : null;\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Aligns the ink bar to the active link. */\n  _alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.show();\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    } else {\n      this._inkBar.hide();\n    }\n  }\n}\n\n\n// Boilerplate for applying mixins to MatTabLink.\nexport class MatTabLinkBase {}\nexport const _MatTabLinkMixinBase =\n  mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\n\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n@Directive({\n  selector: '[mat-tab-link], [matTabLink]',\n  exportAs: 'matTabLink',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-current]': 'active',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabIndex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled',\n    '[class.mat-tab-label-active]': 'active',\n    '(click)': '_handleClick($event)'\n  }\n})\nexport class MatTabLink extends _MatTabLinkMixinBase\n    implements OnDestroy, CanDisable, CanDisableRipple, HasTabIndex, RippleTarget {\n\n  /** Whether the tab link is active or not. */\n  protected _isActive: boolean = false;\n\n  /** Reference to the RippleRenderer for the tab-link. */\n  protected _tabLinkRipple: RippleRenderer;\n\n  /** Whether the link is active. */\n  @Input()\n  get active(): boolean { return this._isActive; }\n  set active(value: boolean) {\n    if (value !== this._isActive) {\n      this._isActive = value;\n      this._tabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._tabNavBar.disableRipple;\n  }\n\n  constructor(private _tabNavBar: MatTabNav,\n              public _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Attribute('tabindex') tabIndex: string) {\n    super();\n\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._tabLinkRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    if (globalOptions) {\n      // TODO(paul): Once the speedFactor is removed, we no longer need to copy each single option.\n      this.rippleConfig = {\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n        speedFactor: globalOptions.baseSpeedFactor,\n        animation: globalOptions.animation,\n      };\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabLinkRipple._removeTriggerEvents();\n  }\n\n  /**\n   * Handles the click event, preventing default navigation if the tab link is disabled.\n   */\n  _handleClick(event: MouseEvent) {\n    if (this.disabled) {\n      event.preventDefault();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabContent} from './tab-content';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n    MatTabContent,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader,\n    MatTabContent,\n  ],\n})\nexport class MatTabsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nexport class MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatToolbarMixinBase = mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': 'this._toolbarRows.length',\n    '[class.mat-toolbar-single-row]': '!this._toolbarRows.length'\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n  private _document: Document;\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(\n    elementRef: ElementRef,\n    private _platform: Platform,\n    @Inject(DOCUMENT) document?: any) {\n    super(elementRef);\n\n    // TODO: make the document a required param when doing breaking changes.\n    this._document = document;\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = [].slice.call(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n      .some(node => node.textContent.trim());\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodeOutlet} from '@angular/cdk/tree';\nimport {\n  Directive,\n  ViewContainerRef,\n} from '@angular/core';\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({\n  selector: '[matTreeNodeOutlet]'\n})\nexport class MatTreeNodeOutlet implements CdkTreeNodeOutlet {\n  constructor(public viewContainer: ViewContainerRef) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  CdkNestedTreeNode,\n  CdkTree,\n  CdkTreeNode,\n  CdkTreeNodeDef,\n} from '@angular/cdk/tree';\nimport {\n  AfterContentInit,\n  Attribute,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Input,\n  IterableDiffers,\n  OnDestroy,\n  QueryList\n} from '@angular/core';\nimport {CanDisable, HasTabIndex, mixinDisabled, mixinTabIndex} from '@angular/material/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\n\nexport const _MatTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkTreeNode));\nexport const _MatNestedTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkNestedTreeNode));\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n  selector: 'mat-tree-node',\n  exportAs: 'matTreeNode',\n  inputs: ['disabled', 'tabIndex'],\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n    '[attr.role]': 'role',\n    'class': 'mat-tree-node'\n  },\n  providers: [{provide: CdkTreeNode, useExisting: MatTreeNode}]\n})\nexport class MatTreeNode<T> extends _MatTreeNodeMixinBase<T>\n    implements CanDisable, HasTabIndex {\n  @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n  constructor(protected _elementRef: ElementRef,\n              protected _tree: CdkTree<T>,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n}\n\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeDef]',\n  inputs: [\n    'when: matTreeNodeDefWhen'\n  ],\n  providers: [{provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef}]\n})\nexport class MatTreeNodeDef<T> extends CdkTreeNodeDef<T> {\n  @Input('matTreeNode') data: T;\n}\n\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\n@Directive({\n  selector: 'mat-nested-tree-node',\n  exportAs: 'matNestedTreeNode',\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.role]': 'role',\n    'class': 'mat-nested-tree-node',\n  },\n  inputs: ['disabled', 'tabIndex'],\n  providers: [\n    {provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CdkTreeNode, useExisting: MatNestedTreeNode}\n  ]\n})\nexport class MatNestedTreeNode<T> extends _MatNestedTreeNodeMixinBase<T>\n    implements AfterContentInit, CanDisable, HasTabIndex, OnDestroy {\n\n  @Input('matNestedTreeNode') node: T;\n\n  @ContentChildren(MatTreeNodeOutlet) nodeOutlet: QueryList<MatTreeNodeOutlet>;\n\n  constructor(protected _elementRef: ElementRef,\n              protected _tree: CdkTree<T>,\n              protected _differs: IterableDiffers,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree, _differs);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n\n  // This is a workaround for https://github.com/angular/angular/issues/23091\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  // TODO(tinayuangao): Remove when the angular issue #23091 is fixed\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodePadding} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodePadding]',\n  providers: [{provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding}]\n})\nexport class MatTreeNodePadding<T> extends CdkTreeNodePadding<T> {\n\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  @Input('matTreeNodePadding') level: number;\n\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n  @Input('matTreeNodePaddingIndent') indent: number;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation} from '@angular/core';\nimport {CdkTree} from '@angular/cdk/tree';\nimport {MatTreeNodeOutlet} from './outlet';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tree',\n  exportAs: 'matTree',\n  template: `<ng-container matTreeNodeOutlet></ng-container>`,\n  host: {\n    'class': 'mat-tree',\n    'role': 'tree',\n  },\n  styleUrls: ['tree.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [{provide: CdkTree, useExisting: MatTree}]\n})\nexport class MatTree<T> extends CdkTree<T> {\n  // Outlets within the tree's template where the dataNodes will be inserted.\n  @ViewChild(MatTreeNodeOutlet) _nodeOutlet: MatTreeNodeOutlet;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\nimport {CdkTreeNodeToggle} from '@angular/cdk/tree';\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeToggle]',\n  host: {\n    '(click)': '_toggle($event)',\n  },\n  providers: [{provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle}]\n})\nexport class MatTreeNodeToggle<T> extends CdkTreeNodeToggle<T> {\n  @Input('matTreeNodeToggleRecursive') recursive: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatNestedTreeNode, MatTreeNodeDef, MatTreeNode} from './node';\nimport {MatTree} from './tree';\nimport {MatTreeNodeToggle} from './toggle';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {MatTreeNodePadding} from './padding';\n\nconst MAT_TREE_DIRECTIVES = [\n  MatNestedTreeNode,\n  MatTreeNodeDef,\n  MatTreeNodePadding,\n  MatTreeNodeToggle,\n  MatTree,\n  MatTreeNode,\n  MatTreeNodeOutlet\n];\n\n@NgModule({\n  imports: [CdkTreeModule, CommonModule, MatCommonModule],\n  exports: MAT_TREE_DIRECTIVES,\n  declarations: MAT_TREE_DIRECTIVES,\n})\nexport class MatTreeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {FlatTreeControl, TreeControl} from '@angular/cdk/tree';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map, take} from 'rxjs/operators';\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class MatTreeFlattener<T, F> {\n\n  constructor(public transformFunction: (node: T, level: number) => F,\n              public getLevel: (node: F) => number,\n              public isExpandable: (node: F) => boolean,\n              public getChildren: (node: T) => Observable<T[]>) {}\n\n  _flattenNode(node: T, level: number,\n               resultNodes: F[], parentMap: boolean[]): F[] {\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n\n    if (this.isExpandable(flatNode)) {\n      this.getChildren(node).pipe(take(1)).subscribe(children => {\n        children.forEach((child, index) => {\n          let childParentMap: boolean[] = parentMap.slice();\n          childParentMap.push(index != children.length - 1);\n          this._flattenNode(child, level + 1, resultNodes, childParentMap);\n        });\n      });\n    }\n    return resultNodes;\n  }\n\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   */\n  flattenNodes(structuredData: T[]): F[] {\n    let resultNodes: F[] = [];\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   */\n  expandFlattenedNodes(nodes: F[], treeControl: TreeControl<F>): F[] {\n    let results: F[] = [];\n    let currentExpand: boolean[] = [];\n    currentExpand[0] = true;\n\n    nodes.forEach(node => {\n      let expand = true;\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n      if (expand) {\n        results.push(node);\n      }\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nexport class MatTreeFlatDataSource<T, F> extends DataSource<F> {\n  _flattenedData = new BehaviorSubject<F[]>([]);\n\n  _expandedData = new BehaviorSubject<F[]>([]);\n\n  _data: BehaviorSubject<T[]>;\n  get data() { return this._data.value; }\n  set data(value: T[]) {\n    this._data.next(value);\n    this._flattenedData.next(this.treeFlattener.flattenNodes(this.data));\n    this.treeControl.dataNodes = this._flattenedData.value;\n  }\n\n  constructor(private treeControl: FlatTreeControl<F>,\n              private treeFlattener: MatTreeFlattener<T, F>,\n              initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n  }\n\n  connect(collectionViewer: CollectionViewer): Observable<F[]> {\n    const changes = [\n      collectionViewer.viewChange,\n      this.treeControl.expansionModel.onChange!,\n      this._flattenedData\n    ];\n    return merge(...changes).pipe(map(() => {\n      this._expandedData.next(\n        this.treeFlattener.expandFlattenedNodes(this._flattenedData.value, this.treeControl));\n      return this._expandedData.value;\n    }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nexport class MatTreeNestedDataSource<T> extends DataSource<T> {\n  _data = new BehaviorSubject<T[]>([]);\n\n  /**\n   * Data for the nested tree\n   */\n  get data() { return this._data.value; }\n  set data(value: T[]) { this._data.next(value); }\n\n  connect(collectionViewer: CollectionViewer): Observable<T[]> {\n    return merge(...[collectionViewer.viewChange, this._data])\n      .pipe(map(() => {\n        return this.data;\n      }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('6.3.1-69a7f7c');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n  ViewportRuler,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {filter, take, switchMap, delay, tap, map} from 'rxjs/operators';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  MatOption,\n  MatOptionSelectionChange,\n} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {Subscription, defer, fromEvent, merge, of as observableOf, Subject, Observable} from 'rxjs';\nimport {MatAutocomplete} from './autocomplete';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    'autocomplete': 'off',\n    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n    '[attr.aria-activedescendant]': 'activeOption?.id',\n    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n    '[attr.aria-owns]': 'autocompleteDisabled ? null : autocomplete?.id',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  exportAs: 'matAutocompleteTrigger',\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal;\n  private _componentDestroyed = false;\n  private _autocompleteDisabled = false;\n\n  /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n  private _previousValue: string | number | null;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Subscription to viewport size changes. */\n  private _viewportSubscription = Subscription.EMPTY;\n\n  /** Stream of keyboard events that can close the panel. */\n  private readonly _closeKeyEventStream = new Subject<void>();\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when autocomplete has been touched` */\n  _onTouched = () => {};\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  /**\n   * Reference relative to which to position the autocomplete panel.\n   * Defaults to the autocomplete trigger element.\n   */\n  @Input('matAutocompleteConnectedTo') connectedTo: MatAutocompleteOrigin;\n\n  /**\n   * Whether the autocomplete is disabled. When disabled, the element will\n   * act as a regular input and the user won't be able to open the panel.\n   */\n  @Input('matAutocompleteDisabled')\n  get autocompleteDisabled(): boolean { return this._autocompleteDisabled; }\n  set autocompleteDisabled(value: boolean) {\n    this._autocompleteDisabled = coerceBooleanProperty(value);\n  }\n\n  constructor(private _element: ElementRef, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @deletion-target 7.0.0 Make `_viewportRuler` required.\n              private _viewportRuler?: ViewportRuler) {}\n\n  ngOnDestroy() {\n    this._viewportSubscription.unsubscribe();\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._overlayAttached && this.autocomplete.showPanel;\n  }\n  private _overlayAttached: boolean = false;\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (!this._overlayAttached) {\n      return;\n    }\n\n    if (this.panelOpen) {\n      // Only emit if the panel was visible.\n      this.autocomplete.closed.emit();\n    }\n\n    this.autocomplete._isOpen = this._overlayAttached = false;\n\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n\n    // Note that in some cases this can end up being called after the component is destroyed.\n    // Add a check to ensure that we don't try to run change detection on a destroyed view.\n    if (!this._componentDestroyed) {\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange|null> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)),\n      this._closeKeyEventStream,\n      this._outsideClickStream,\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n          observableOf()\n    ).pipe(\n      // Normalize the output so we return a consistent type.\n      map(event => event instanceof MatOptionSelectionChange ? event : null)\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  readonly optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .asObservable()\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  });\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private get _outsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return merge(\n      fromEvent(this._document, 'click'),\n      fromEvent(this._document, 'touchend')\n    )\n    .pipe(filter((event: MouseEvent | TouchEvent) => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._overlayAttached &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n    if (keyCode === ESCAPE) {\n      event.preventDefault();\n    }\n\n    // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n    // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n    if (this.panelOpen && (keyCode === ESCAPE || (keyCode === UP_ARROW && event.altKey))) {\n      this._resetActiveItem();\n      this._closeKeyEventStream.next();\n      event.stopPropagation();\n    } else if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    let target = event.target as HTMLInputElement;\n    let value: number | string | null = target.value;\n\n    // Based on `NumberValueAccessor` from forms.\n    if (target.type === 'number') {\n      value = value == '' ? null : parseFloat(value);\n    }\n\n    // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._previousValue !== value && document.activeElement === event.target) {\n      this._previousValue = value;\n      this._onChange(value);\n\n      if (this._canOpen()) {\n        this.openPanel();\n      }\n    }\n  }\n\n  _handleFocus(): void {\n    if (this._canOpen()) {\n      this._previousValue = this._element.nativeElement.value;\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const index = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(index,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n\n    const newScrollPosition = _getOptionScrollPosition(\n      index + labelCount,\n      AUTOCOMPLETE_OPTION_HEIGHT,\n      this.autocomplete._getScrollTop(),\n      AUTOCOMPLETE_PANEL_HEIGHT\n    );\n\n    this.autocomplete._setScrollTop(newScrollPosition);\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.reapplyLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n      .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n          this._resetActiveItem();\n          this.autocomplete._setVisibility();\n          return this.panelClosingActions;\n        }),\n        // when the first closing event occurs...\n        take(1)\n      )\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      this._overlayRef = this._overlay.create(this._getOverlayConfig());\n\n      if (this._viewportRuler) {\n        this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n          if (this.panelOpen && this._overlayRef) {\n            this._overlayRef.updateSize({width: this._getHostWidth()});\n          }\n        });\n      }\n    } else {\n      // Update the panel width and direction, in case anything has changed.\n      this._overlayRef.updateSize({width: this._getHostWidth()});\n    }\n\n    if (this._overlayRef && !this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    const wasOpen = this.panelOpen;\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._overlayAttached = true;\n\n    // We need to do an extra `panelOpen` check in here, because the\n    // autocomplete won't be shown if there are no options.\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\n      this.autocomplete.opened.emit();\n    }\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getHostWidth(),\n      direction: this._dir\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy = this._overlay.position()\n      .flexibleConnectedTo(this._getConnectedElement())\n      .withFlexibleDimensions(false)\n      .withPush(false)\n      .withPositions([\n        {originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top'},\n        {originX: 'start', originY: 'top', overlayX: 'start', overlayY: 'bottom'}\n      ]);\n\n    return this._positionStrategy;\n  }\n\n  private _getConnectedElement(): ElementRef {\n    if (this.connectedTo) {\n      return this.connectedTo.elementRef;\n    }\n\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n  }\n\n  /** Determines whether the panel can be opened. */\n  private _canOpen(): boolean {\n    const element: HTMLInputElement = this._element.nativeElement;\n    return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n    OCT = 9, NOV = 10, DEC = 11;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  TemplateRef,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperIntl} from './stepper-intl';\nimport {MatStepperIconContext} from './stepper-icon';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStepHeader implements OnDestroy {\n  private _intlSubscription: Subscription;\n\n  /** State of the given step. */\n  @Input() state: string;\n\n  /** Label of the given step. */\n  @Input() label: MatStepLabel | string;\n\n  /** Overrides for the header icons, passed in via the stepper. */\n  @Input() iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>};\n\n  /** Index of the given step. */\n  @Input() index: number;\n\n  /** Whether the given step is selected. */\n  @Input() selected: boolean;\n\n  /** Whether the given step label is active. */\n  @Input() active: boolean;\n\n  /** Whether the given step is optional. */\n  @Input() optional: boolean;\n\n  constructor(\n    public _intl: MatStepperIntl,\n    private _focusMonitor: FocusMonitor,\n    private _element: ElementRef,\n    changeDetectorRef: ChangeDetectorRef) {\n    _focusMonitor.monitor(_element.nativeElement, true);\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n\n  /** Returns string label of given step if it is a text label. */\n  _stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n\n  /** Returns MatStepLabel if the label of given step is a template label. */\n  _templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n\n  /** Returns the host HTML element. */\n  _getHostElement() {\n    return this._element.nativeElement;\n  }\n\n  /** Template context variables that are exposed to the `matStepperIcon` instances. */\n  _getIconContext(): MatStepperIconContext {\n    return {\n      index: this.index,\n      active: this.active,\n      optional: this.optional\n    };\n  }\n\n  focus() {\n    this._getHostElement().focus();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material steppers. */\nexport const matStepperAnimations: {\n  readonly horizontalStepTransition: AnimationTriggerMetadata;\n  readonly verticalStepTransition: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions the step along the X axis in a horizontal stepper. */\n  horizontalStepTransition: trigger('stepTransition', [\n    state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n    state('current', style({transform: 'none', visibility: 'visible'})),\n    state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n    transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n  ]),\n\n  /** Animation that transitions the step along the Y axis in a vertical stepper. */\n  verticalStepTransition: trigger('stepTransition', [\n    state('previous', style({height: '0px', visibility: 'hidden'})),\n    state('next', style({height: '0px', visibility: 'hidden'})),\n    state('current', style({height: '*', visibility: 'visible'})),\n    transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, TemplateRef} from '@angular/core';\n\n/** Template context available to an attached `matStepperIcon`. */\nexport interface MatStepperIconContext {\n  /** Index of the step. */\n  index: number;\n  /** Whether the step is currently active. */\n  active: boolean;\n  /** Whether the step is optional. */\n  optional: boolean;\n}\n\n/**\n * Template to be used to override the icons inside the step header.\n */\n@Directive({\n  selector: 'ng-template[matStepperIcon]',\n})\nexport class MatStepperIcon {\n  /** Name of the icon to be overridden. */\n  @Input('matStepperIcon') name: 'edit' | 'done' | 'number';\n\n  constructor(public templateRef: TemplateRef<MatStepperIconContext>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {CdkStep, CdkStepper, StepContentPositionState} from '@angular/cdk/stepper';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Optional,\n  Output,\n  QueryList,\n  SkipSelf,\n  TemplateRef,\n  ViewChildren,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {takeUntil} from 'rxjs/operators';\nimport {matStepperAnimations} from './stepper-animations';\nimport {MatStepperIcon, MatStepperIconContext} from './stepper-icon';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: ErrorStateMatcher, useExisting: MatStep}],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matStep',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\n  /** Content for step label given by `<ng-template matStepLabel>`. */\n  @ContentChild(MatStepLabel) stepLabel: MatStepLabel;\n\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher) {\n    super(stepper);\n  }\n\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    const customErrorState = !!(control && control.invalid && this.interacted);\n\n    return originalErrorState || customErrorState;\n  }\n}\n\n\n@Directive({\n  selector: '[matStepper]'\n})\nexport class MatStepper extends CdkStepper implements AfterContentInit {\n  /** The list of step headers of the steps in the stepper. */\n  @ViewChildren(MatStepHeader) _stepHeader: QueryList<MatStepHeader>;\n\n  /** Steps that the stepper holds. */\n  @ContentChildren(MatStep) _steps: QueryList<MatStep>;\n\n  /** Custom icon overrides passed in by the consumer. */\n  @ContentChildren(MatStepperIcon) _icons: QueryList<MatStepperIcon>;\n\n  /** Event emitted when the current step is done transitioning in. */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Consumer-specified template-refs to be used to override the header icons. */\n  _iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>} = {};\n\n  ngAfterContentInit() {\n    const icons = this._icons.toArray();\n\n    ['edit', 'done', 'number'].forEach(name => {\n      const override = icons.find(icon => icon.name === name);\n\n      if (override) {\n        this._iconOverrides[name] = override.templateRef;\n      }\n    });\n\n    // Mark the component for change detection whenever the content children query changes\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\n  }\n\n  _animationDone(event: AnimationEvent) {\n    if ((event.toState as StepContentPositionState) === 'current') {\n      this.animationDone.emit();\n    }\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-horizontal-stepper',\n  exportAs: 'matHorizontalStepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    'aria-orientation': 'horizontal',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.horizontalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatHorizontalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatHorizontalStepper extends MatStepper { }\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-vertical-stepper',\n  exportAs: 'matVerticalStepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'aria-orientation': 'vertical',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.verticalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatVerticalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatVerticalStepper extends MatStepper {\n  constructor(@Optional() dir: Directionality, changeDetectorRef: ChangeDetectorRef) {\n    super(dir, changeDetectorRef);\n    this._orientation = 'vertical';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepper, CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {MatStepper} from './stepper';\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperNext]',\n  host: {\n    '(click)': '_stepper.next()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperNext extends CdkStepperNext {}\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperPrevious]',\n  host: {\n    '(click)': '_stepper.previous()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperPrevious extends CdkStepperPrevious {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {ErrorStateMatcher, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nimport {MatStepperIcon} from './stepper-icon';\nimport {MatStepperIntl} from './stepper-intl';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule,\n    MatRippleModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  declarations: [\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  providers: [MatStepperIntl, ErrorStateMatcher],\n})\nexport class MatStepperModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  IterableDiffers,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\nimport {Directionality} from '@angular/cdk/bidi';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table, table[mat-table]',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTable<T> extends CdkTable<T> {\n  /** Overrides the sticky CSS class set by the `CdkTable`. */\n  protected stickyCssClass = 'mat-table-sticky';\n\n  // TODO(andrewseguin): Remove this explicitly set constructor when the compiler knows how to\n  // properly build the es6 version of the class. Currently sets ctorParameters to empty due to a\n  // fixed bug.\n  // https://github.com/angular/tsickle/pull/760 - tsickle PR that fixed this\n  // https://github.com/angular/angular/pull/23531 - updates compiler-cli to fixed version\n  constructor(protected _differs: IterableDiffers,\n              protected _changeDetectorRef: ChangeDetectorRef,\n              protected _elementRef: ElementRef,\n              @Attribute('role') role: string,\n              @Optional() protected readonly _dir: Directionality) {\n    super(_differs, _changeDetectorRef, _elementRef, role, _dir);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input, TemplateRef} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef, CdkFooterCell, CdkFooterCellDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends CdkCellDef {\n  // TODO(andrewseguin): Remove this constructor after compiler-cli is updated; see issue #9329\n  constructor(/** @docs-private */ public template: TemplateRef<any>) {\n    super(template);\n  }\n}\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends CdkHeaderCellDef {\n  // TODO(andrewseguin): Remove this constructor after compiler-cli is updated; see issue #9329\n  constructor(/** @docs-private */ public template: TemplateRef<any>) {\n    super(template);\n  }\n}\n\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matFooterCellDef]',\n  providers: [{provide: CdkFooterCellDef, useExisting: MatFooterCellDef}]\n})\nexport class MatFooterCellDef extends CdkFooterCellDef {\n  // TODO(andrewseguin): Remove this constructor after compiler-cli is updated; see issue #9329\n  constructor(/** @docs-private */ public template: TemplateRef<any>) {\n    super(template);\n  }\n}\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [{provide: CdkColumnDef, useExisting: MatColumnDef}],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n\n  /** Whether this column should be sticky positioned at the start of the row */\n  @Input() sticky: boolean;\n\n  /** Whether this column should be sticky positioned on the end of the row */\n  @Input() stickyEnd: boolean;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell, th[mat-header-cell]',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Footer cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-footer-cell, td[mat-footer-cell]',\n  host: {\n    'class': 'mat-footer-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatFooterCell extends CdkFooterCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell, td[mat-cell]',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  IterableDiffers, TemplateRef,\n  ViewEncapsulation\n} from '@angular/core';\nimport {\n  CDK_ROW_TEMPLATE, CdkFooterRow, CdkFooterRowDef,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef,\n} from '@angular/cdk/table';\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef', 'sticky: matHeaderRowDefSticky'],\n})\nexport class MatHeaderRowDef extends CdkHeaderRowDef {\n  // TODO(andrewseguin): Remove this constructor after compiler-cli is updated; see issue #9329\n  constructor(template: TemplateRef<any>, _differs: IterableDiffers) {\n    super(template, _differs);\n  }\n}\n\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\n@Directive({\n  selector: '[matFooterRowDef]',\n  providers: [{provide: CdkFooterRowDef, useExisting: MatFooterRowDef}],\n  inputs: ['columns: matFooterRowDef', 'sticky: matFooterRowDefSticky'],\n})\nexport class MatFooterRowDef extends CdkFooterRowDef {\n  // TODO(andrewseguin): Remove this constructor after compiler-cli is updated; see issue #9329\n  constructor(template: TemplateRef<any>, _differs: IterableDiffers) {\n    super(template, _differs);\n  }\n}\n\n/**\n * Data row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends CdkRowDef<T> {\n  // TODO(andrewseguin): Remove this constructor after compiler-cli is updated; see issue #9329\n  constructor(template: TemplateRef<any>, _differs: IterableDiffers) {\n    super(template, _differs);\n  }\n}\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row, tr[mat-header-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n  providers: [{provide: CdkHeaderRow, useExisting: MatHeaderRow}],\n})\nexport class MatHeaderRow extends CdkHeaderRow { }\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-footer-row, tr[mat-footer-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-footer-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matFooterRow',\n  providers: [{provide: CdkFooterRow, useExisting: MatFooterRow}],\n})\nexport class MatFooterRow extends CdkFooterRow { }\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row, tr[mat-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n  providers: [{provide: CdkRow, useExisting: MatRow}],\n})\nexport class MatRow extends CdkRow { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {\n  MatCell,\n  MatCellDef,\n  MatColumnDef,\n  MatFooterCell,\n  MatFooterCellDef,\n  MatHeaderCell,\n  MatHeaderCellDef\n} from './cell';\nimport {\n  MatFooterRow,\n  MatFooterRowDef,\n  MatHeaderRow,\n  MatHeaderRowDef,\n  MatRow,\n  MatRowDef\n} from './row';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\nconst EXPORTED_DECLARATIONS = [\n  // Table\n  MatTable,\n\n  // Template defs\n  MatHeaderCellDef,\n  MatHeaderRowDef,\n  MatColumnDef,\n  MatCellDef,\n  MatRowDef,\n  MatFooterCellDef,\n  MatFooterRowDef,\n\n  // Cell directives\n  MatHeaderCell,\n  MatCell,\n  MatFooterCell,\n\n  // Row directions\n  MatHeaderRow,\n  MatRow,\n  MatFooterRow,\n];\n\n@NgModule({\n  imports: [CdkTableModule, CommonModule, MatCommonModule],\n  exports: EXPORTED_DECLARATIONS,\n  declarations: EXPORTED_DECLARATIONS,\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {_isNumberValue} from '@angular/cdk/coercion';\nimport {DataSource} from '@angular/cdk/table';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  merge,\n  Observable,\n  of as observableOf,\n  Subscription\n} from 'rxjs';\nimport {MatPaginator, PageEvent} from '@angular/material/paginator';\nimport {MatSort, Sort} from '@angular/material/sort';\nimport {map} from 'rxjs/operators';\n\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport class MatTableDataSource<T> extends DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private readonly _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private readonly _filter = new BehaviorSubject<string>('');\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription = Subscription.EMPTY;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() { return this._data.value; }\n  set data(data: T[]) { this._data.next(data); }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter(): string { return this._filter.value; }\n  set filter(filter: string) { this._filter.next(filter); }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort(): MatSort | null { return this._sort; }\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): MatPaginator | null { return this._paginator; }\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting through\n   * the default sortData function.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value: any = data[sortHeaderId];\n    return _isNumberValue(value) ? Number(value) : value;\n  }\n\n  /**\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n   * By default, the function retrieves the active sort and its direction and compares data\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n   * of data ordering.\n   * @param data The array of data that should be sorted.\n   * @param sort The connected MatSort that holds the current sort state.\n   */\n  sortData: ((data: T[], sort: MatSort) => T[]) = (data: T[], sort: MatSort): T[] => {\n    const active = sort.active;\n    const direction = sort.direction;\n    if (!active || direction == '') { return data; }\n\n    return data.sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n      // one value exists while the other doesn't. In this case, existing value should come first.\n      // This avoids inconsistent results when comparing values to undefined/null.\n      // If neither value exists, return 0 (equal).\n      let comparatorResult = 0;\n      if (valueA != null && valueB != null) {\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      } else if (valueA != null) {\n        comparatorResult = 1;\n      } else if (valueB != null) {\n        comparatorResult = -1;\n      }\n\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const accumulator = (currentTerm, key) => currentTerm + data[key];\n    const dataStr = Object.keys(data).reduce(accumulator, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // The events should emit whenever the component emits a change or initializes, or if no\n    // component is provided, a stream with just a null event should be provided.\n    // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n    // pipeline can progress to the next step. Note that the value from these streams are not used,\n    // they purely act as a signal to progress in the pipeline.\n    const sortChange: Observable<Sort|null> = this._sort ?\n        merge<Sort>(this._sort.sortChange, this._sort.initialized) :\n        observableOf(null);\n    const pageChange: Observable<PageEvent|null> = this._paginator ?\n        merge<PageEvent>(this._paginator.page, this._paginator.initialized) :\n        observableOf(null);\n\n    const dataStream = this._data;\n    // Watch for base data or filter changes to provide a filtered set of data.\n    const filteredData = combineLatest(dataStream, this._filter)\n      .pipe(map(([data]) => this._filterData(data)));\n    // Watch for filtered data or sort changes to provide an ordered set of data.\n    const orderedData = combineLatest(filteredData, sortChange)\n      .pipe(map(([data]) => this._orderData(data)));\n    // Watch for ordered data or page changes to provide a paged set of data.\n    const paginatedData = combineLatest(orderedData, pageChange)\n      .pipe(map(([data]) => this._pageData(data)));\n    // Watched for paged data changes and send the result to the table to render.\n    this._renderChangesSubscription.unsubscribe();\n    this._renderChangesSubscription = paginatedData.subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overridden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) { return data; }\n\n    return this.sortData(data.slice(), this.sort);\n  }\n\n  /**\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice().splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      if (!this.paginator) { return; }\n\n      this.paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (this.paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(this.paginator.length / this.paginator.pageSize) - 1 || 0;\n        this.paginator.pageIndex = Math.min(this.paginator.pageIndex, lastPageIndex);\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Inject, InjectionToken, NgZone} from '@angular/core';\n\n\n/**\n * Interface for a a MatInkBar positioner method, defining the positioning and width of the ink\n * bar in a set of tabs.\n */\n// tslint:disable-next-line class-name Using leading underscore to denote internal interface.\nexport interface _MatInkBarPositioner {\n  (element: HTMLElement): { left: string, width: string };\n}\n\n/** Injection token for the MatInkBar's Positioner. */\nexport const _MAT_INK_BAR_POSITIONER =\n  new InjectionToken<_MatInkBarPositioner>('MatInkBarPositioner', {\n    providedIn: 'root',\n    factory: _MAT_INK_BAR_POSITIONER_FACTORY\n  });\n\n/**\n * The default positioner function for the MatInkBar.\n * @docs-private\n */\nexport function _MAT_INK_BAR_POSITIONER_FACTORY(): _MatInkBarPositioner {\n  const method = (element: HTMLElement) => ({\n    left: element ? (element.offsetLeft || 0) + 'px' : '0',\n    width: element ? (element.offsetWidth || 0) + 'px' : '0',\n  });\n\n  return method;\n}\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone,\n    @Inject(_MAT_INK_BAR_POSITIONER) private _inkBarPositioner: _MatInkBarPositioner) { }\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n  private _setStyles(element: HTMLElement) {\n    const positions = this._inkBarPositioner(element);\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\n\n    inkBar.style.left = positions.left;\n    inkBar.style.width = positions.width;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef, ViewContainerRef} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n})\nexport class MatTabLabel extends CdkPortal {\n  constructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\n    super(templateRef, viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/** Decorates the `ng-template` tags and reads out the template from it. */\n@Directive({selector: '[matTabContent]'})\nexport class MatTabContent {\n  constructor(public template: TemplateRef<any>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabContent} from './tab-content';\n\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nexport class MatTabBase {}\nexport const _MatTabMixinBase = mixinDisabled(MatTabBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matTab',\n})\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n  @ContentChild(MatTabLabel) templateLabel: MatTabLabel;\n\n  /**\n   * Template provided in the tab content that will be used if present, used to enable lazy-loading\n   */\n  @ContentChild(MatTabContent, {read: TemplateRef}) _explicitContent: TemplateRef<any>;\n\n  /** Template inside the MatTab view that contains an `<ng-content>`. */\n  @ViewChild(TemplateRef) _implicitContent: TemplateRef<any>;\n\n  /** The plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** The portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the label changes. */\n  readonly _labelChange = new Subject<void>();\n\n  /** Emits whenever the disable changes */\n  readonly _disableChange = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel')) {\n      this._labelChange.next();\n    }\n\n    if (changes.hasOwnProperty('disabled')) {\n      this._disableChange.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._disableChange.complete();\n    this._labelChange.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(\n        this._explicitContent || this._implicitContent, this._viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material tabs. */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n    state('left', style({transform: 'translate3d(-100%, 0, 0)'})),\n    state('right', style({transform: 'translate3d(100%, 0, 0)'})),\n    transition('* => left, * => right, left => center, right => center',\n        animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ])\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n  ViewChild,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet, PortalHostDirective} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {Subscription} from 'rxjs';\nimport {matTabsAnimations} from './tabs-animations';\nimport {startWith} from 'rxjs/operators';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]'\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** Subscription to events for when the tab body begins centering. */\n  private _centeringSub = Subscription.EMPTY;\n  /** Subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub = Subscription.EMPTY;\n\n  constructor(\n    componentFactoryResolver: ComponentFactoryResolver,\n    viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\n      super(componentFactoryResolver, viewContainerRef);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    this._centeringSub = this._host._beforeCentering\n      .pipe(startWith(this._host._isCenterPosition(this._host._position)))\n      .subscribe((isCentering: boolean) => {\n        if (isCentering && !this.hasAttached()) {\n          this.attach(this._host._content);\n        }\n      });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  /** Clean up centering subscription. */\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this._centeringSub.unsubscribe();\n    this._leavingSub.unsubscribe();\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  },\n})\nexport class MatTabBody implements OnInit {\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() readonly _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() readonly _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n   /** The portal host inside of this container into which the tab body content will be loaded. */\n  @ViewChild(PortalHostDirective) _portalHost: PortalHostDirective;\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal;\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  @Input()\n  set position(position: number) {\n    if (position < 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'left' : 'right';\n    } else if (position > 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n  _position: MatTabBodyPositionState;\n\n  /** The origin position from which this tab should appear when it is centered into view. */\n  @Input()\n  set origin(origin: number) {\n    if (origin == null) { return; }\n\n    const dir = this._getLayoutDirection();\n    if ((dir == 'ltr' && origin <= 0) || (dir == 'rtl' && origin > 0)) {\n      this._origin = 'left';\n    } else {\n      this._origin = 'right';\n    }\n  }\n  _origin: MatTabBodyOriginState;\n\n  constructor(private _elementRef: ElementRef,\n              @Optional() private _dir: Directionality) { }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this._origin) {\n      this._position = this._origin == 'left' ? 'left-origin-center' : 'right-origin-center';\n    }\n  }\n\n  _onTranslateTabStarted(e: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(e.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  _onTranslateTabComplete(e: AnimationEvent): void {\n    // If the transition to the center is complete, emit an event.\n    if (this._isCenterPosition(e.toState) && this._isCenterPosition(this._position)) {\n      this._onCentered.emit();\n    }\n\n    if (this._isCenterPosition(e.fromState) && !this._isCenterPosition(this._position)) {\n      this._afterLeavingCenter.emit();\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nexport class MatTabLabelWrapperBase {}\nexport const _MatTabLabelWrapperMixinBase = mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled'\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  HammerInput,\n  HasTabIndex,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {Subscription} from 'rxjs';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nexport class MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSliderMixinBase =\n  mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(click)': '_onClick($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert(): boolean { return this._invert; }\n  set invert(value: boolean) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundToDecimal = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value: boolean) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /** Value of the slider. */\n  @Input()\n  get value(): number | null {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      let value = coerceNumberProperty(v);\n\n      // While incrementing by a decimal we can end up with values like 33.300000000000004.\n      // Truncate it to ensure that it matches the label and to make it easier to work with.\n      if (this._roundToDecimal) {\n        value = parseFloat(value.toFixed(this._roundToDecimal));\n      }\n\n      this._value = value;\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /**\n   * Function that will be used to format the value before it is displayed\n   * in the thumb label. Can be used to format very large number in order\n   * for them to fit into the slider thumb.\n   */\n  @Input() displayWith: (value: number | null) => string | number;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() readonly change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() readonly input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    if (this.displayWith) {\n      return this.displayWith(this.value);\n    }\n\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundToDecimal && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundToDecimal);\n    }\n\n    return this.value || 0;\n  }\n\n  /** set focus to the host element */\n  focus() {\n    this._focusHostElement();\n  }\n\n  /** blur the host element */\n  blur() {\n    this._blurHostElement();\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    let sign = this._invertMouseCoords ? '-' : '';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${1 - this.percent})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    let sign = this._invertMouseCoords ? '' : '-';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${this.percent})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._direction == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._direction == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._direction == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundToDecimal: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper') private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  private get _invertMouseCoords() {\n    return (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private get _direction() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string,\n              // @deletion-target 7.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef.nativeElement, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onClick(event: MouseEvent) {\n    if (this.disabled) {\n      return;\n    }\n\n    let oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    // Emit a change and input event if the value changed.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value && !this.disabled) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled) { return; }\n\n    let oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._direction == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._direction == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n\n    if (this._invertMouseCoords) {\n      percent = 1 - percent;\n    }\n\n    // Since the steps may not divide cleanly into the max value, if the user\n    // slid to 0 or 100 percent, we jump to the min/max value. This approach\n    // is slightly more intuitive than using `Math.ceil` below, because it\n    // follows the user's pointer closer.\n    if (percent === 0) {\n      this.value = this.min;\n    } else if (percent === 1) {\n      this.value = this.max;\n    } else {\n      const exactValue = this._calculateValue(percent);\n\n      // This calculation finds the closest step by finding the closest\n      // whole number divisible by the step relative to the min.\n      const closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n\n      // The value needs to snap to the min and max.\n      this.value = this._clamp(closestValue, this.min, this.max);\n    }\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Blurs the native element. */\n  private _blurHostElement() {\n    this._elementRef.nativeElement.blur();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable, Subject} from 'rxjs';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n  /** Whether the snack bar was dismissed using the action button. */\n  dismissedByAction: boolean;\n}\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has been dismissed. */\n  private readonly _afterDismissed = new Subject<MatSnackBarDismiss>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private readonly _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  /** Whether the snack bar was dismissed using the action button. */\n  private _dismissedByAction = false;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  dismissWithAction(): void {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * @deletion-target 7.0.0\n   */\n  closeWithAction(): void {\n    this.dismissWithAction();\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<MatSnackBarDismiss> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /** Message to be announced by the MatAriaLiveAnnouncer */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material snack bar. */\nexport const matSnackBarAnimations: {\n  readonly contentFade: AnimationTriggerMetadata;\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  contentFade: trigger('contentFade', [\n    transition(':enter', [\n      style({opacity: '0'}),\n      animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.STANDARD_CURVE}`)\n    ])\n  ]),\n\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('visible-top, visible-bottom', style({transform: 'translateY(0%)'})),\n    transition('visible-top => hidden-top, visible-bottom => hidden-bottom',\n      animate(`${AnimationDurations.EXITING} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible-top, void => visible-bottom',\n      animate(`${AnimationDurations.ENTERING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\nimport {matSnackBarAnimations} from './snack-bar-animations';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matSnackBarAnimations.contentFade],\n  host: {\n    '[@contentFade]': '',\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: { message: string, action: string };\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.dismissWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  CdkPortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  NgZone,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\nimport {matSnackBarAnimations} from './snack-bar-animations';\nimport {MatSnackBarConfig} from './snack-bar-config';\n\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    'role': 'alert',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  readonly _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  readonly _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    /** The snack bar configuration. */\n    public snackBarConfig: MatSnackBarConfig) {\n\n    super();\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState.startsWith('hidden')) {\n      this._completeExit();\n    }\n\n    if (toState.startsWith('visible')) {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = `visible-${this.snackBarConfig.verticalPosition}`;\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    this._animationState = `hidden-${this.snackBarConfig.verticalPosition}`;\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n  private _applySnackBarClasses() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClasses = this.snackBarConfig.panelClass;\n\n    if (panelClasses) {\n      if (Array.isArray(panelClasses)) {\n        // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n        panelClasses.forEach(cssClass => element.classList.add(cssClass));\n      } else {\n        element.classList.add(panelClasses);\n      }\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n  }\n\n  /** Asserts that no content is already attached to the container. */\n  private _assertNotAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatButtonModule,\n    MatCommonModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  EmbeddedViewRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarModule} from './snack-bar-module';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/** Injection token that can be used to specify default snack bar. */\nexport const MAT_SNACK_BAR_DEFAULT_OPTIONS =\n    new InjectionToken<MatSnackBarConfig>('mat-snack-bar-default-options', {\n      providedIn: 'root',\n      factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY(): MatSnackBarConfig {\n  return new MatSnackBarConfig();\n}\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable({providedIn: MatSnackBarModule})\nexport class MatSnackBar {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar,\n      @Inject(MAT_SNACK_BAR_DEFAULT_OPTIONS) private _defaultConfig: MatSnackBarConfig) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig):\n    MatSnackBarRef<T> {\n    return this._attach(component, config) as MatSnackBarRef<T>;\n  }\n\n  /**\n   * Creates and dispatches a snack bar with a custom template for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param template Template to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromTemplate(template: TemplateRef<any>, config?: MatSnackBarConfig):\n    MatSnackBarRef<EmbeddedViewRef<any>> {\n    return this._attach(template, config);\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = {...this._defaultConfig, ...config};\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n    _config.announcementMessage = message;\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatSnackBarConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatSnackBarContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component or a template as the content of the snack bar container.\n   */\n  private _attach<T>(content: ComponentType<T> | TemplateRef<T>, userConfig?: MatSnackBarConfig):\n    MatSnackBarRef<T | EmbeddedViewRef<any>> {\n\n    const config = {...new MatSnackBarConfig(), ...this._defaultConfig, ...userConfig};\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T | EmbeddedViewRef<any>>(container, overlayRef);\n\n    if (content instanceof TemplateRef) {\n      const portal = new TemplatePortal(content, null!, {\n        $implicit: config.data,\n        snackBarRef\n      } as any);\n\n      snackBarRef.instance = container.attachTemplatePortal(portal);\n    } else {\n      const injector = this._createInjector(config, snackBarRef);\n      const portal = new ComponentPortal(content, undefined, injector);\n      const contentRef = container.attachComponentPortal<T>(portal);\n\n      // We can't pass this via the injector, because the injector is created earlier.\n      snackBarRef.instance = contentRef.instance;\n    }\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\n      takeUntil(overlayRef.detachments().pipe(take(1)))\n    ).subscribe(state => {\n      if (state.matches) {\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n      } else {\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n      }\n    });\n\n    this._animateSnackBar(snackBarRef, config);\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /** Animates the old snack bar out and the new one in. */\n  private _animateSnackBar(snackBarRef: MatSnackBarRef<any>, config: MatSnackBarConfig) {\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (config.duration && config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration!));\n    }\n\n    if (config.announcementMessage) {\n      this._live.announce(config.announcementMessage, config.politeness);\n    }\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    return new PortalInjector(userInjector || this._injector, new WeakMap<any, any>([\n      [MatSnackBarRef, snackBarRef],\n      [MAT_SNACK_BAR_DATA, config.data]\n    ]));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CanDisable, HasInitialized, mixinDisabled, mixinInitialized} from '@angular/material/core';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError,\n  getSortInvalidDirectionError\n} from './sort-errors';\nimport {Subject} from 'rxjs';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nexport class MatSortBase {}\nexport const _MatSortMixinBase = mixinInitialized(mixinDisabled(MatSortBase));\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase\n    implements CanDisable, HasInitialized, OnChanges, OnDestroy, OnInit {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  get direction(): SortDirection { return this._direction; }\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable): void {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable): void {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable): void {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.emit({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnInit() {\n    this._markInitialized();\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata, query, animateChild,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/** Animations used by MatSort. */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly arrowOpacity: AnimationTriggerMetadata;\n  readonly arrowPosition: AnimationTriggerMetadata;\n  readonly allowChildren: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('active-asc, asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('active-desc, desc', style({transform: 'translateY(10px)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('active-asc, asc', style({transform: 'rotate(-45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('active-asc, asc', style({transform: 'rotate(45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(-45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that controls the arrow opacity. */\n  arrowOpacity: trigger('arrowOpacity', [\n    state('desc-to-active, asc-to-active, active', style({opacity: 1})),\n    state('desc-to-hint, asc-to-hint, hint', style({opacity: .54})),\n    state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc',\n        style({opacity: 0})),\n    // Transition between all states except for immediate transitions\n    transition('* => asc, * => desc, * => active, * => hint', animate('0ms')),\n    transition('* <=> *', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /**\n   * Animation for the translation of the arrow as a whole. States are separated into two\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n   * peek, and active. The other states define a specific animation (source-to-destination)\n   * and are determined as a function of their prev user-perceived state and what the next state\n   * should be.\n   */\n  arrowPosition: trigger('arrowPosition', [\n    // Hidden Above => Hint Center\n    transition('* => desc-to-hint, * => desc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(-25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Below\n    transition('* => hint-to-desc, * => active-to-desc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(25%)'})\n        ]))),\n    // Hidden Below => Hint Center\n    transition('* => asc-to-hint, * => asc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Above\n    transition('* => hint-to-asc, * => active-to-asc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(-25%)'})\n        ]))),\n    state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active',\n        style({transform: 'translateY(0)'})),\n    state('hint-to-desc, active-to-desc, desc',\n        style({transform: 'translateY(-25%)'})),\n    state('hint-to-asc, active-to-asc, asc',\n        style({transform: 'translateY(25%)'})),\n  ]),\n\n  /** Necessary trigger that calls animate on children animations. */\n  allowChildren: trigger('allowChildren', [\n    transition('* <=> *', [\n      query('@*', animateChild(), {optional: true})\n    ])\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable({providedIn: 'root'})\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkColumnDef} from '@angular/cdk/table';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatSort, MatSortable} from './sort';\nimport {matSortAnimations} from './sort-animations';\nimport {SortDirection} from './sort-direction';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {MatSortHeaderIntl} from './sort-header-intl';\n\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nexport class MatSortHeaderBase {}\nexport const _MatSortHeaderMixinBase = mixinDisabled(MatSortHeaderBase);\n\n/**\n * Valid positions for the arrow to be in for its opacity and translation. If the state is a\n * sort direction, the position of the arrow will be above/below and opacity 0. If the state is\n * hint, the arrow will be in the center with a slight opacity. Active state means the arrow will\n * be fully opaque in the center.\n *\n * @docs-private\n */\nexport type ArrowViewState = SortDirection | 'hint' | 'active';\n\n/**\n * States describing the arrow's animated position (animating fromState to toState).\n * If the fromState is not defined, there will be no animated transition to the toState.\n * @docs-private\n */\nexport interface ArrowViewStateTransition {\n  fromState?: ArrowViewState;\n  toState: ArrowViewState;\n}\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_handleClick()',\n    '(mouseenter)': '_setIndicatorHintVisible(true)',\n    '(longpress)': '_setIndicatorHintVisible(true)',\n    '(mouseleave)': '_setIndicatorHintVisible(false)',\n    '[attr.aria-sort]': '_getAriaSortAttribute()',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.arrowOpacity,\n    matSortAnimations.arrowPosition,\n    matSortAnimations.allowChildren,\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase\n    implements CanDisable, MatSortable, OnDestroy, OnInit {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n   * provide an affordance that the header is sortable by showing on focus and hover.\n   */\n  _showIndicatorHint: boolean = false;\n\n  /**\n   * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n   * position through the animation. If animations are currently disabled, the fromState is removed\n   * so that there is no animation displayed.\n   */\n  _viewState: ArrowViewStateTransition;\n\n  /** The direction the arrow should be facing according to the current state. */\n  _arrowDirection: SortDirection = '';\n\n  /**\n   * Whether the view state animation should show the transition between the `from` and `to` states.\n   */\n  _disableViewStateAnimation = false;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input() start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Optional() public _cdkColumnDef: CdkColumnDef) {\n\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n        .subscribe(() => {\n          if (this._isSorted()) {\n            this._updateArrowDirection();\n          }\n\n          // If this header was recently active and now no longer sorted, animate away the arrow.\n          if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = false;\n            this._setAnimationTransitionState({fromState: 'active', toState: this._arrowDirection});\n          }\n\n          changeDetectorRef.markForCheck();\n        });\n  }\n\n  ngOnInit() {\n    if (!this.id && this._cdkColumnDef) {\n      this.id = this._cdkColumnDef.name;\n    }\n\n    // Initialize the direction of the arrow and set the view state to be immediately that state.\n    this._updateArrowDirection();\n    this._setAnimationTransitionState(\n        {toState: this._isSorted() ? 'active' : this._arrowDirection});\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /**\n   * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n   * user showing what the active sort will become. If set to false, the arrow will fade away.\n   */\n  _setIndicatorHintVisible(visible: boolean) {\n    // No-op if the sort header is disabled - should not make the hint visible.\n    if (this._isDisabled() && visible) { return; }\n\n    this._showIndicatorHint = visible;\n\n    if (!this._isSorted()) {\n      this._updateArrowDirection();\n      if (this._showIndicatorHint) {\n        this._setAnimationTransitionState({fromState: this._arrowDirection, toState: 'hint'});\n      } else {\n        this._setAnimationTransitionState({fromState: 'hint', toState: this._arrowDirection});\n      }\n    }\n  }\n\n  /**\n   * Sets the animation transition view state for the arrow's position and opacity. If the\n   * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n   * no animation appears.\n   */\n  _setAnimationTransitionState(viewState: ArrowViewStateTransition) {\n    this._viewState = viewState;\n\n    // If the animation for arrow position state (opacity/translation) should be disabled,\n    // remove the fromState so that it jumps right to the toState.\n    if (this._disableViewStateAnimation) {\n      this._viewState = {toState: viewState.toState};\n    }\n  }\n\n  /** Triggers the sort on this sort header and removes the indicator hint. */\n  _handleClick() {\n    if (this._isDisabled()) { return; }\n\n    this._sort.sort(this);\n\n    // Do not show the animation if the header was already shown in the right position.\n    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n      this._disableViewStateAnimation = true;\n    }\n\n    // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n    // the direction it is facing.\n    const viewState: ArrowViewStateTransition = this._isSorted() ?\n        {fromState: this._arrowDirection, toState: 'active'} :\n        {fromState: 'active', toState: this._arrowDirection};\n    this._setAnimationTransitionState(viewState);\n\n    this._showIndicatorHint = false;\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  /** Returns the animation state for the arrow direction (indicator and pointers). */\n  _getArrowDirectionState() {\n    return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n  }\n\n  /** Returns the arrow position state (opacity, translation). */\n  _getArrowViewState() {\n    const fromState = this._viewState.fromState;\n    return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n  }\n\n  /**\n   * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n   * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n   * active sorted direction. The reason this is updated through a function is because the direction\n   * should only be changed at specific times - when deactivated but the hint is displayed and when\n   * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n   * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n   * preserving its direction, even though the next sort direction is actually different and should\n   * only be changed once the arrow displays again (hint or activation).\n   */\n  _updateArrowDirection() {\n    this._arrowDirection = this._isSorted() ?\n        this._sort.direction :\n        (this.start || this._sort.start);\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n\n  /**\n   * Gets the aria-sort attribute that should be applied to this sort header. If this header\n   * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n   * says that the aria-sort property should only be present on one header at a time, so removing\n   * ensures this is true.\n   */\n  _getAriaSortAttribute() {\n    if (!this._isSorted()) { return null; }\n\n    return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n\n@Directive({\n  selector: '[matStepLabel]',\n})\nexport class MatStepLabel extends CdkStepLabel {\n  constructor(template: TemplateRef<any>) {\n    super(template);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Stepper data that is required for internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** Label that is rendered below optional steps. */\n  optionalLabel: string = 'Optional';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusMonitor, FocusOrigin, FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {CdkScrollable} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {fromEvent, merge, Observable, Subject} from 'rxjs';\nimport {debounceTime, filter, map, startWith, take, takeUntil} from 'rxjs/operators';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/** Throws an exception when two MatDrawer are matching the same position. */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/** Result of the toggle promise that indicates the state of the drawer. */\nexport type MatDrawerToggleResult = 'open' | 'close';\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n      providedIn: 'root',\n      factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY(): boolean {\n  return false;\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContent implements AfterContentInit {\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) public _container: MatDrawerContainer) {\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMarginChanges.subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value: 'start' | 'end') {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value: 'over' | 'push' | 'side') {\n    this._mode = value;\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** Whether the drawer should focus the first focusable element automatically when opened. */\n  @Input()\n  get autoFocus(): boolean { return this._autoFocus; }\n  set autoFocus(value: boolean) { this._autoFocus = coerceBooleanProperty(value); }\n  private _autoFocus: boolean = true;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new EventEmitter<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() readonly openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer's position changes. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  readonly _modeChanged = new Subject();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              private _ngZone: NgZone,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n\n    /**\n     * Listen to `keydown` events outside the zone so that change detection is not run every\n     * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n     * and we don't have close disabled.\n     */\n    this._ngZone.runOutsideAngular(() => {\n        fromEvent(this._elementRef.nativeElement, 'keydown').pipe(\n            filter((event: KeyboardEvent) => event.keyCode === ESCAPE && !this.disableClose)\n        ).subscribe((event) => this._ngZone.run(() => {\n            this.close();\n            event.stopPropagation();\n        }));\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { this.toggle(coerceBooleanProperty(value)); }\n  private _opened: boolean = false;\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<MatDrawerToggleResult> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<MatDrawerToggleResult> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<MatDrawerToggleResult> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n\n    return new Promise<MatDrawerToggleResult>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n    });\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStarted.emit(event);\n  }\n\n  _onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n        (toState === 'void' && fromState.indexOf('open') === 0)) {\n      this.openedChange.emit(this._opened);\n    }\n  }\n\n  get _width(): number {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n}\n\n\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContainer implements AfterContentInit, DoCheck, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent) _content: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /**\n   * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n   * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n   * mode as well.\n   */\n  @Input()\n  get hasBackdrop() {\n    if (this._backdropOverride == null) {\n      return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n    }\n\n    return this._backdropOverride;\n  }\n  set hasBackdrop(value: any) {\n    this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n  }\n  _backdropOverride: boolean | null;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() readonly backdropClick: EventEmitter<void> = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private readonly _doCheckSubject = new Subject<void>();\n\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _contentMargins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  readonly _contentMarginChanges = new Subject<{left: number|null, right: number|null}>();\n\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n  @ViewChild(CdkScrollable) scrollable: CdkScrollable;\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this._updateContentMargins();\n      });\n    }\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this._updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this._updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      takeUntil(this._drawers.changes),\n      filter((event: AnimationEvent) => event.fromState !== event.toState)\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant' && this._animationMode !== 'NoopAnimations') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this._updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this._updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add('mat-drawer-opened');\n    } else {\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (this._dir && this._dir.value === 'rtl') {\n      this._left = this._end;\n      this._right = this._start;\n    } else {\n      this._left = this._start;\n      this._right = this._end;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer))\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||\n           (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end));\n  }\n\n  private _canHaveBackdrop(drawer: MatDrawer): boolean {\n    return drawer.mode !== 'side' || !!this._backdropOverride;\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): drawer is MatDrawer {\n    return drawer != null && drawer.opened;\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  private _updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        let width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        let width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n      this._contentMargins = {left, right};\n\n      // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n      // to do it only when something changed, otherwise we can end up hitting the zone too often.\n      this._ngZone.run(() => this._contentMarginChanges.next(this._contentMargins));\n    }\n\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  forwardRef,\n  Inject,\n  Input,\n  ViewEncapsulation,\n  QueryList,\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer) {\n    super(changeDetectorRef, container);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers: QueryList<MatSidenav>;\n  @ContentChild(MatSidenavContent) _content: MatSidenavContent;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {ScrollDispatchModule} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    ScrollDispatchModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/** Default `mat-slide-toggle` options that can be overridden. */\nexport interface MatSlideToggleDefaultOptions {\n  /** Whether toggle action triggers value changes in slide toggle. */\n  disableToggleValue?: boolean;\n  /** Whether drag action triggers value changes in slide toggle. */\n  disableDragValue?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-slide-toggle`. */\nexport const MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS =\n  new InjectionToken<MatSlideToggleDefaultOptions>('mat-slide-toggle-default-options', {\n    providedIn: 'root',\n    factory: () => ({disableToggleValue: false, disableDragValue: false})\n  });\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HammerInput,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {\n  MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,\n  MatSlideToggleDefaultOptions\n} from './slide-toggle-config';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nexport class MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSlideToggleMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n    ControlValueAccessor, CanDisable, CanColor, HasTabIndex, CanDisableRipple {\n\n  private onChange = (_: any) => {};\n  private onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Reference to the focus state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Whether the thumb is currently being dragged. */\n  private _dragging = false;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  private _dragPercentage: number;\n\n  /** Reference to the thumb HTMLElement. */\n  @ViewChild('thumbContainer') _thumbEl: ElementRef<HTMLElement>;\n\n  /** Reference to the thumb bar HTMLElement. */\n  @ViewChild('toggleBar') _thumbBarEl: ElementRef<HTMLElement>;\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the slide-toggle element is checked or not */\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\n      new EventEmitter<MatSlideToggleChange>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle input is toggled.\n   * This event always fire when user toggle the slide toggle, but does not mean the slide toggle's\n   * value is changed. The event does not fire when user drag to change the slide toggle value.\n   */\n  @Output() readonly toggleChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle is dragged.\n   * This event always fire when user drag the slide toggle to make a change that greater than 50%.\n   * It does not mean the slide toggle's value is changed. The event does not fire when user toggle\n   * the slide toggle to change the slide toggle's value.\n   */\n  @Output() readonly dragChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** Reference to the ripple directive on the thumb container. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated The `_platform` parameter to be removed.\n               * @deletion-target 7.0.0\n               */\n              _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string,\n              private _ngZone: NgZone,\n              @Inject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS)\n                  public defaults: MatSlideToggleDefaultOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    if (!this._dragging) {\n      this.toggleChange.emit();\n    }\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back. Or when the slide toggle's config\n    // disabled toggle change event by setting `disableToggleValue: true`, the slide toggle's value\n    // does not change, and the checked state of the underlying input needs to be changed back.\n    if (this._dragging || this.defaults.disableToggleValue) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      // For keyboard focus show a persistent ripple as focus indicator.\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      this.onTouched();\n\n      // Fade out and clear the focus ripple if one is currently present.\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this.onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n  _onDragStart() {\n    if (!this.disabled && !this._dragging) {\n      const thumbEl = this._thumbEl.nativeElement;\n      this._thumbBarWidth = this._thumbBarEl.nativeElement.clientWidth - thumbEl.clientWidth;\n      thumbEl.classList.add('mat-dragging');\n\n      this._previousChecked = this.checked;\n      this._dragging = true;\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._dragging) {\n      this._dragPercentage = this._getDragPercentage(event.deltaX);\n      // Calculate the moved distance based on the thumb bar width.\n      const dragX = (this._dragPercentage / 100) * this._thumbBarWidth;\n      this._thumbEl.nativeElement.style.transform = `translate3d(${dragX}px, 0, 0)`;\n    }\n  }\n\n  _onDragEnd() {\n    if (this._dragging) {\n      const newCheckedValue = this._dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.dragChange.emit();\n        if (!this.defaults.disableDragValue) {\n          this.checked = newCheckedValue;\n          this._emitChangeEvent();\n        }\n      }\n\n      // The drag should be stopped outside of the current event handler, otherwise the\n      // click event will be fired before it and will revert the drag change.\n      this._ngZone.runOutsideAngular(() => setTimeout(() => {\n        if (this._dragging) {\n          this._dragging = false;\n          this._thumbEl.nativeElement.classList.remove('mat-dragging');\n\n          // Reset the transform because the component will take care\n          // of the thumb position after drag.\n          this._thumbEl.nativeElement.style.transform = '';\n        }\n      }));\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the slide-toggle changes.\n    // Since the slide-toggle uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlideToggle} from './slide-toggle';\n\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatSlideToggle, MatCommonModule],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  Inject,\n  Input,\n  ElementRef,\n  ViewEncapsulation,\n  Optional,\n  InjectionToken,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nexport class MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatProgressSpinnerMixinBase = mixinColor(MatProgressSpinnerBase, 'primary');\n\n/** Default `mat-progress-spinner` options that can be overridden. */\nexport interface MatProgressSpinnerDefaultOptions {\n  /** Diameter of the spinner. */\n  diameter?: number;\n  /** Width of the spinner's stroke. */\n  strokeWidth?: number;\n  /**\n   * Whether the animations should be force to be enabled, ignoring if the current environment is\n   * using NoopAnimationsModule.\n   */\n  _forceAnimations?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-progress-spinner`. */\nexport const MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS =\n    new InjectionToken<MatProgressSpinnerDefaultOptions>('mat-progress-spinner-default-options', {\n      providedIn: 'root',\n      factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY(): MatProgressSpinnerDefaultOptions {\n  return {diameter: BASE_SIZE};\n}\n\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/material2/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * `<mat-progress-spinner>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor {\n\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /** Tracks diameters of existing instances to de-dupe generated styles (default d = 100) */\n  private static diameters = new Set<number>([BASE_SIZE]);\n\n  /**\n   * Used for storing all of the generated keyframe animations.\n   * @dynamic\n   */\n  private static styleTag: HTMLStyleElement|null = null;\n\n  /** Whether the _mat-animation-noopable class should be applied, disabling animations.  */\n  _noopAnimations: boolean = this.animationMode === 'NoopAnimations' && (\n      !!this.defaults && !this.defaults._forceAnimations);\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number { return this._diameter; }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    if (!this._fallbackAnimation && !MatProgressSpinner.diameters.has(this._diameter)) {\n      this._attachStyleNode();\n    }\n  }\n  private _diameter = BASE_SIZE;\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @deletion-target 7.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  private defaults?: MatProgressSpinnerDefaultOptions) {\n\n    super(_elementRef);\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n\n    if (defaults) {\n      if (defaults.diameter) {\n        this.diameter = defaults.diameter;\n      }\n\n      if (defaults.strokeWidth) {\n        this.strokeWidth = defaults.strokeWidth;\n      }\n    }\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    _elementRef.nativeElement.classList.add(animationClass);\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this.diameter * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    let styleTag = MatProgressSpinner.styleTag;\n\n    if (!styleTag) {\n      styleTag = this._document.createElement('style');\n      this._document.head.appendChild(styleTag);\n      MatProgressSpinner.styleTag = styleTag;\n    }\n\n    if (styleTag && styleTag.sheet) {\n      (styleTag.sheet as CSSStyleSheet).insertRule(this._getAnimationText(), 0);\n    }\n\n    MatProgressSpinner.diameters.add(this.diameter);\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n}\n\n\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any,\n              // @deletion-targets 7.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  defaults?: MatProgressSpinnerDefaultOptions) {\n    super(elementRef, platform, document, animationMode, defaults);\n    this.mode = 'indeterminate';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  constructor(\n    /** The MatRadioButton that emits the change event. */\n    public source: MatRadioButton,\n    /** The value of the MatRadioButton. */\n    public value: any) {}\n}\n\n\n// Boilerplate for applying mixins to MatRadioGroup.\n/** @docs-private */\nexport class MatRadioGroupBase { }\nexport const _MatRadioGroupMixinBase = mixinDisabled(MatRadioGroupBase);\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n  inputs: ['disabled'],\n})\nexport class MatRadioGroup extends _MatRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n  /**\n   * Selected value for group. Should equal the value of the selected radio button if there *is*\n   * a corresponding radio button with a matching value. If there is *not* such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n  set labelPosition(v) {\n    this._labelPosition = v === 'before' ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /** Value of the radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value !== newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /** Whether the radio button is selected. */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n    if (this._radios && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value === radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new MatRadioChange(this._selected!, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nexport class MatRadioButtonBase {\n  // Since the disabled property is manually defined for the MatRadioButton and isn't set up in\n  // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n  // defined to properly work.\n  disabled: boolean;\n\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nexport const _MatRadioButtonMixinBase =\n    mixinColor(mixinDisableRipple(mixinTabIndex(MatRadioButtonBase)), 'accent');\n\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['color', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, CanDisableRipple, HasTabIndex {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n    if (this._checked !== newCheckedState) {\n      this._checked = newCheckedState;\n      if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value !== value) {\n      this._value = value;\n      if (this.radioGroup !== null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value === value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    const newDisabledState = coerceBooleanProperty(value);\n    if (this._disabled !== newDisabledState) {\n      this._disabled = newDisabledState;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio. */\n  private _value: any = null;\n\n  /** The child ripple instance. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  /** Reference to the current focus ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Unregister function for _radioDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id !== this.id && name === this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    this.change.emit(new MatRadioChange(this, this._value));\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      if (this.radioGroup) {\n        this.radioGroup._touch();\n      }\n\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material drawers. */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    state('open, open-instant', style({\n      'transform': 'translate3d(0, 0, 0)',\n      'visibility': 'visible',\n    })),\n    state('void', style({\n      // Avoids the shadow showing up when closed in SSR.\n      'box-shadow': 'none',\n      'visibility': 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelect, MatSelectTrigger} from './select';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by MatTooltip. */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('150ms cubic-bezier(0.0, 0.0, 0.2, 1)')),\n    transition('* => hidden', animate('150ms cubic-bezier(0.4, 0.0, 1, 1)')),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatTooltip,\n  TooltipComponent,\n  MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './tooltip';\n\n@NgModule({\n  imports: [\n    A11yModule,\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable({providedIn: 'root'})\nexport class MatPaginatorIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel: string = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel: string = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel: string = 'Previous page';\n\n  /** A label for the button that moves to the first page. */\n  firstPageLabel: string = 'First page';\n\n  /** A label for the button that moves to the last page. */\n  lastPageLabel: string = 'Last page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatPaginatorIntl} from './paginator-intl';\nimport {HasInitialized, mixinInitialized} from '@angular/material/core';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /**\n   * Index of the page that was selected previously.\n   * @deletion-target 7.0.0 To be made into a required property.\n   */\n  previousPageIndex?: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n// Boilerplate for applying mixins to MatPaginator.\n/** @docs-private */\nexport class MatPaginatorBase {}\nexport const _MatPaginatorBase = mixinInitialized(MatPaginatorBase);\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatPaginator extends _MatPaginatorBase implements OnInit, OnDestroy, HasInitialized {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(value: number) {\n    this._pageIndex = Math.max(coerceNumberProperty(value), 0);\n    this._changeDetectorRef.markForCheck();\n  }\n  _pageIndex: number = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(value: number) {\n    this._length = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  _length: number = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(value: number) {\n    this._pageSize = Math.max(coerceNumberProperty(value), 0);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(value: number[]) {\n    this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Whether to hide the page size selection UI from the user. */\n  @Input()\n  get hidePageSize(): boolean { return this._hidePageSize; }\n  set hidePageSize(value: boolean) {\n    this._hidePageSize = coerceBooleanProperty(value);\n  }\n  private _hidePageSize = false;\n\n\n  /** Whether to show the first/last buttons UI to the user. */\n  @Input()\n  get showFirstLastButtons(): boolean { return this._showFirstLastButtons; }\n  set showFirstLastButtons(value: boolean) {\n    this._showFirstLastButtons = coerceBooleanProperty(value);\n  }\n  private _showFirstLastButtons = false;\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() readonly page: EventEmitter<PageEvent> = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n    this._markInitialized();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage(): void {\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex++;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage(): void {\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex--;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the first page if not already there. */\n  firstPage(): void {\n    // hasPreviousPage being false implies at the start\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = 0;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the last page if not already there. */\n  lastPage(): void {\n    // hasNextPage being false implies at the end\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = this.getNumberOfPages();\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage(): boolean {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage(): boolean {\n    const numberOfPages = this.getNumberOfPages();\n    return this.pageIndex < numberOfPages && this.pageSize != 0;\n  }\n\n  /** Calculate the number of pages */\n  getNumberOfPages(): number {\n    return Math.ceil(this.length / this.pageSize) - 1;\n  }\n\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    const previousPageIndex = this.pageIndex;\n\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n    this.pageSize = pageSize;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) === -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent(previousPageIndex: number) {\n    this.page.emit({\n      previousPageIndex,\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Inject,\n  Input,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {CanColor, mixinColor} from '@angular/material/core';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\n\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nexport class MatProgressBarBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\nexport const _MatProgressBarMixinBase = mixinColor(MatProgressBarBase, 'primary');\n\n/** Counter used to generate unique IDs for progress bars. */\nlet progressbarId = 0;\n\n/**\n * `<mat-progress-bar>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n    'class': 'mat-progress-bar',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor {\n\n\n  constructor(public _elementRef: ElementRef,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(_elementRef);\n  }\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) { this._value = clamp(v || 0); }\n  private _value: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue(): number { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n  private _bufferValue: number = 0;\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** The id of the progress bar. */\n  progressbarId = `mat-progress-bar-${progressbarId++}`;\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    const scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode === 'buffer') {\n      const scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager, FocusOrigin} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, LEFT_ARROW, RIGHT_ARROW, DOWN_ARROW, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Output,\n  TemplateRef,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  OnInit,\n} from '@angular/core';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, switchMap, take} from 'rxjs/operators';\nimport {matMenuAnimations} from './menu-animations';\nimport {MatMenuContent} from './menu-content';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {AnimationEvent} from '@angular/animations';\n\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n\n  /** Class to be applied to the menu's backdrop. */\n  backdropClass: string;\n\n  /** Whether the menu has a backdrop. */\n  hasBackdrop?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options', {\n      providedIn: 'root',\n      factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_MENU_DEFAULT_OPTIONS_FACTORY(): MatMenuDefaultOptions {\n  return {\n    overlapTrigger: true,\n    xPosition: 'after',\n    yPosition: 'below',\n    backdropClass: 'cdk-overlay-transparent-backdrop',\n  };\n}\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 2;\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matMenu',\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  providers: [\n    {provide: MAT_MENU_PANEL, useExisting: MatMenu}\n  ]\n})\nexport class MatMenu implements AfterContentInit, MatMenuPanel<MatMenuItem>, OnInit, OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** Menu items inside the current menu. */\n  private _items: MatMenuItem[] = [];\n\n  /** Emits whenever the amount of menu items changes. */\n  private _itemChanges = new Subject<MatMenuItem[]>();\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter' = 'void';\n\n  /** Emits whenever an animation on the menu completes. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  /** Whether the menu is animating. */\n  _isAnimating: boolean;\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Class to be added to the backdrop element. */\n  @Input() backdropClass: string = this._defaultOptions.backdropClass;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition(): MenuPositionX { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition(): MenuPositionY { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) templateRef: TemplateRef<any>;\n\n  /**\n   * List of the items inside of a menu.\n   * @deprecated\n   * @deletion-target 7.0.0\n   */\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\n\n  /**\n   * Menu content that will be rendered lazily.\n   * @docs-private\n   */\n  @ContentChild(MatMenuContent) lazyContent: MatMenuContent;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  get overlapTrigger(): boolean { return this._overlapTrigger; }\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /** Whether the menu has a backdrop. */\n  @Input()\n  get hasBackdrop(): boolean | undefined { return this._hasBackdrop; }\n  set hasBackdrop(value: boolean | undefined) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n  private _hasBackdrop: boolean | undefined = this._defaultOptions.hasBackdrop;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    if (classes && classes.length) {\n      this._classList = classes.split(' ').reduce((obj: any, className: string) => {\n        obj[className] = true;\n        return obj;\n      }, {});\n\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   * @deletion-target 7.0.0\n   */\n  @Input()\n  get classList(): string { return this.panelClass; }\n  set classList(classes: string) { this.panelClass = classes; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() readonly closed: EventEmitter<void | 'click' | 'keydown' | 'tab'> =\n      new EventEmitter<void | 'click' | 'keydown' | 'tab'>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   * @deletion-target 7.0.0\n   */\n  @Output() close = this.closed;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngOnInit() {\n    this.setPositionClasses();\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatMenuItem>(this._items).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n  }\n\n  ngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    return this._itemChanges.pipe(\n      startWith(this._items),\n      switchMap(items => merge(...items.map(item => item._hovered)))\n    );\n  }\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n\n    switch (keyCode) {\n      case ESCAPE:\n        this.closed.emit('keydown');\n        event.stopPropagation();\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      default:\n        if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n          this._keyManager.setFocusOrigin('keyboard');\n        }\n\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n    if (this.lazyContent) {\n      this._ngZone.onStable.asObservable()\n        .pipe(take(1))\n        .subscribe(() => this._keyManager.setFocusOrigin(origin).setFirstItemActive());\n    } else {\n      this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n    }\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /**\n   * Registers a menu item with the menu.\n   * @docs-private\n   */\n  addItem(item: MatMenuItem) {\n    // We register the items through this method, rather than picking them up through\n    // `ContentChildren`, because we need the items to be picked up by their closest\n    // `mat-menu` ancestor. If we used `@ContentChildren(MatMenuItem, {descendants: true})`,\n    // all descendant items will bleed into the top-level menu in the case where the consumer\n    // has `mat-menu` instances nested inside each other.\n    if (this._items.indexOf(item) === -1) {\n      this._items.push(item);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Removes an item from the menu.\n   * @docs-private\n   */\n  removeItem(item: MatMenuItem) {\n    const index = this._items.indexOf(item);\n\n    if (this._items.indexOf(item) > -1) {\n      this._items.splice(index, 1);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Adds classes to the menu panel based on its position. Can be used by\n   * consumers to add specific styling based on the position.\n   * @param posX Position of the menu along the x axis.\n   * @param posY Position of the menu along the y axis.\n   * @docs-private\n   */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    const classes = this._classList;\n    classes['mat-menu-before'] = posX === 'before';\n    classes['mat-menu-after'] = posX === 'after';\n    classes['mat-menu-above'] = posY === 'above';\n    classes['mat-menu-below'] = posY === 'below';\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    // @deletion-target 7.0.0 Combine with _resetAnimation.\n    this._panelAnimationState = 'enter';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    // @deletion-target 7.0.0 Combine with _startAnimation.\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    this._animationDone.next(event);\n    this._isAnimating = false;\n\n    // Scroll the content element to the top once the animation is done. This is necessary, because\n    // we move focus to the first item while it's still being animated, which can throw the browser\n    // off when it determines the scroll position. Alternatively we can move focus when the\n    // animation is done, however moving focus asynchronously will interrupt screen readers\n    // which are in the process of reading out the menu already. We take the `element` from\n    // the `event` since we can't use a `ViewChild` to access the pane.\n    if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n      event.element.scrollTop = 0;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin, isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {asapScheduler, merge, of as observableOf, Subscription} from 'rxjs';\nimport {delay, filter, take, takeUntil} from 'rxjs/operators';\nimport {MatMenu} from './menu-directive';\nimport {throwMatMenuMissingError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '[attr.aria-expanded]': 'menuOpen || null',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closeSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  private _openedByMouse: boolean = false;\n\n  /**\n   * @deprecated\n   * @deletion-target 7.0.0\n   */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel {\n    return this.menu;\n  }\n\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor') menu: MatMenuPanel;\n\n  /** Data to be passed along to any lazily-rendered content. */\n  @Input('matMenuTriggerData') menuData: any;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() readonly menuOpened: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   * @deletion-target 7.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuOpen: EventEmitter<void> = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() readonly menuClosed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   * @deletion-target 7.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuClose: EventEmitter<void> = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _parentMenu: MatMenu,\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality,\n              // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n              // @deletion-target 7.0.0\n              private _focusMonitor?: FocusMonitor) {\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n\n    this.menu.close.subscribe(reason => {\n      this._destroyMenu();\n\n      // If a click closed the menu, we should close the entire chain of nested menus.\n      if ((reason === 'click' || reason === 'tab') && this._parentMenu) {\n        this._parentMenu.closed.emit(reason);\n      }\n    });\n\n    this._handleHover();\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._cleanUpSubscriptions();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (this._menuOpen) {\n      return;\n    }\n\n    const overlayRef = this._createOverlay();\n    this._setPosition(overlayRef.getConfig().positionStrategy as FlexibleConnectedPositionStrategy);\n    overlayRef.attach(this._portal);\n\n    if (this.menu.lazyContent) {\n      this.menu.lazyContent.attach(this.menuData);\n    }\n\n    this._closeSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n    this._initMenu();\n\n    if (this.menu instanceof MatMenu) {\n      this.menu._startAnimation();\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n  focus(origin: FocusOrigin = 'program') {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._element.nativeElement, origin);\n    } else {\n      this._element.nativeElement.focus();\n    }\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (!this._overlayRef || !this.menuOpen) {\n      return;\n    }\n\n    const menu = this.menu;\n\n    this._closeSubscription.unsubscribe();\n    this._overlayRef.detach();\n\n    if (menu instanceof MatMenu) {\n      menu._resetAnimation();\n\n      if (menu.lazyContent) {\n        // Wait for the exit animation to finish before detaching the content.\n        menu._animationDone\n          .pipe(filter(event => event.toState === 'void'), take(1))\n          .subscribe(() => {\n            menu.lazyContent!.detach();\n            this._resetMenu();\n          });\n      } else {\n        this._resetMenu();\n      }\n    } else {\n      this._resetMenu();\n\n      if (menu.lazyContent) {\n        menu.lazyContent.detach();\n      }\n    }\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n    this.menu.focusFirstItem(this._openedByMouse ? 'mouse' : 'program');\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  /**\n   * This method resets the menu when it's closed, most importantly restoring\n   * focus to the menu trigger if the menu was opened via the keyboard.\n   */\n  private _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (!this._openedByMouse) {\n      // Note that the focus style will show up both for `program` and\n      // `keyboard` so we don't have to specify which one it is.\n      this.focus();\n    } else if (!this.triggersSubmenu()) {\n      this.focus('mouse');\n    }\n\n    this._openedByMouse = false;\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as FlexibleConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._overlay.position()\n          .flexibleConnectedTo(this._element)\n          .withTransformOriginOn('.mat-menu-panel'),\n      hasBackdrop: this.menu.hasBackdrop == null ? !this.triggersSubmenu() : this.menu.hasBackdrop,\n      backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n      scrollStrategy: this._scrollStrategy(),\n      direction: this._dir\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: FlexibleConnectedPositionStrategy): void {\n    if (this.menu.setPositionClasses) {\n      position.positionChanges.subscribe(change => {\n        const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n        const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n        this.menu.setPositionClasses!(posX, posY);\n      });\n    }\n  }\n\n  /**\n   * Sets the appropriate positions on a position strategy\n   * so the overlay connects with the trigger correctly.\n   * @param positionStrategy Strategy whose position to update.\n   */\n  private _setPosition(positionStrategy: FlexibleConnectedPositionStrategy) {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    positionStrategy.withPositions([\n      {originX, originY, overlayX, overlayY, offsetY},\n      {originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY},\n      {\n        originX,\n        originY: originFallbackY,\n        overlayX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      },\n      {\n        originX: originFallbackX,\n        originY: originFallbackY,\n        overlayX: overlayFallbackX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      }\n    ]);\n  }\n\n  /** Cleans up the active subscriptions. */\n  private _cleanUpSubscriptions(): void {\n    this._closeSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMenu ? this._parentMenu.closed : observableOf();\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      this._openedByMouse = true;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n  /** Handles the cases where the user hovers over the trigger. */\n  private _handleHover() {\n    // Subscribe to changes in the hovered item in order to toggle the panel.\n    if (!this.triggersSubmenu()) {\n      return;\n    }\n\n    this._hoverSubscription = this._parentMenu._hovered()\n      // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n      // with different data and triggers), we have to delay it by a tick to ensure that\n      // it won't be closed immediately after it is opened.\n      .pipe(\n        filter(active => active === this._menuItemInstance && !active.disabled),\n        delay(0, asapScheduler)\n      )\n      .subscribe(() => {\n        this._openedByMouse = true;\n\n        // If the same menu is used between multiple triggers, it might still be animating\n        // while the new trigger tries to re-open it. Wait for the animation to finish\n        // before doing so. Also interrupt if the user moves to another item.\n        if (this.menu instanceof MatMenu && this.menu._isAnimating) {\n          this.menu._animationDone\n            .pipe(take(1), takeUntil(this._parentMenu._hovered()))\n            .subscribe(() => this.openMenu());\n        } else {\n          this.openMenu();\n        }\n      });\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatMenuContent} from './menu-content';\nimport {MatMenu} from './menu-directive';\nimport {MatMenuItem} from './menu-item';\nimport {\n  MatMenuTrigger,\n  MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './menu-trigger';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    MatRippleModule,\n    OverlayModule,\n  ],\n  exports: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent, MatCommonModule],\n  declarations: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent],\n  providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  animateChild,\n  group,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n */\nexport const matSelectAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      transform: 'scaleY(0)',\n      minWidth: '100%',\n      opacity: 0\n    })),\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', group([\n      query('@fadeInContent', animateChild()),\n      animate('150ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n    ])),\n    transition('* => void', [\n      animate('250ms 100ms linear', style({opacity: 0}))\n    ])\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {SPACE, ENTER, HOME, END, UP_ARROW, DOWN_ARROW, A} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  MatLine,\n  MatLineSetter,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Subscription} from 'rxjs';\n\n\n/** @docs-private */\nexport class MatSelectionListBase {}\nexport const _MatSelectionListMixinBase = mixinDisableRipple(mixinDisabled(MatSelectionListBase));\n\n/** @docs-private */\nexport class MatListOptionBase {}\nexport const _MatListOptionMixinBase = mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-focus]': '_hasFocus',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _selected = false;\n  private _disabled = false;\n\n  /** Whether the option has focus. */\n  _hasFocus: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text') _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Value of the option */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  constructor(private _element: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */\n              @Inject(forwardRef(() => MatSelectionList)) public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    // List options that are selected at initialization can't be reported properly to the form\n    // control. This is because it takes some time until the selection-list knows about all\n    // available options. Also it can happen that the ControlValueAccessor has an initial value\n    // that should be used instead. Deferring the value change report to the next tick ensures\n    // that the form control value is not being overwritten.\n    const wasSelected = this._selected;\n\n    Promise.resolve().then(() => {\n      if (this._selected || wasSelected) {\n        this.selected = true;\n        this._changeDetector.markForCheck();\n      }\n    });\n  }\n\n  ngAfterContentInit() {\n    // TODO: consider turning the setter into a function, it doesn't do anything as a class.\n    // tslint:disable-next-line:no-unused-expression\n    new MatLineSetter(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => this.selected = false);\n    }\n\n    this.selectionList._removeOptionFromList(this);\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? this._text.nativeElement.textContent : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n    }\n  }\n\n  _handleFocus() {\n    this._hasFocus = true;\n    this.selectionList._setFocusedOption(this);\n  }\n\n  _handleBlur() {\n    this._hasFocus = false;\n    this.selectionList._onTouched();\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. Returns whether the value has changed. */\n  _setSelected(selected: boolean): boolean {\n    if (selected === this._selected) {\n      return false;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n    return true;\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list',\n    '(focus)': 'focus()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\n    CanDisable, CanDisableRipple, AfterContentInit, ControlValueAccessor, OnDestroy {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** Tabindex of the selection list. */\n  @Input() tabIndex: number = 0;\n\n  /**\n   * Function used for comparing an option against the selected value when determining which\n   * options should appear as selected. The first argument is the value of an options. The second\n   * one is a value from the selected value. A boolean must be returned.\n   */\n  @Input() compareWith: (o1: any, o2: any) => boolean;\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Used for storing the values that were assigned before the options were initialized. */\n  private _tempValues: string[]|null;\n\n  private _modelChanges = Subscription.EMPTY;\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  constructor(private _element: ElementRef, @Attribute('tabindex') tabIndex: string) {\n    super();\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options)\n      .withWrap()\n      .withTypeAhead()\n      // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\n      // screenreader users, that allows reading the different options of the list.\n      .skipPredicate(() => false);\n\n    if (this._tempValues) {\n      this._setOptionsFromValues(this._tempValues);\n      this._tempValues = null;\n    }\n\n    // Sync external changes to the model back to the options.\n    this._modelChanges = this.selectedOptions.onChange!.subscribe(event => {\n      if (event.added) {\n        for (let item of event.added) {\n          item.selected = true;\n        }\n      }\n\n      if (event.removed) {\n        for (let item of event.removed) {\n          item.selected = false;\n        }\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this._modelChanges.unsubscribe();\n  }\n\n  /** Focuses the last active list option. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this._setAllOptionsSelected(true);\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this._setAllOptionsSelected(false);\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItemIndex(this._getOptionIndex(option));\n  }\n\n  /** Removes an option from the selection list and updates the active item. */\n  _removeOptionFromList(option: MatListOption) {\n    if (option._hasFocus) {\n      const optionIndex = this._getOptionIndex(option);\n\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.setPreviousItemActive();\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.setNextItemActive();\n      }\n    }\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n    const previousFocusIndex = manager.activeItemIndex;\n\n    switch (keyCode) {\n      case SPACE:\n      case ENTER:\n        if (!this.disabled) {\n          this._toggleSelectOnFocusedOption();\n\n          // Always prevent space from scrolling the page since the list has focus\n          event.preventDefault();\n        }\n        break;\n      case HOME:\n      case END:\n        keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case A:\n        if (event.ctrlKey) {\n          this.options.find(option => !option.selected) ? this.selectAll() : this.deselectAll();\n          event.preventDefault();\n        }\n        break;\n      default:\n        manager.onKeydown(event);\n    }\n\n    if ((keyCode === UP_ARROW || keyCode === DOWN_ARROW) && event.shiftKey &&\n        manager.activeItemIndex !== previousFocusIndex) {\n      this._toggleSelectOnFocusedOption();\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    if (this.options) {\n      this._onChange(this._getSelectedOptionValues());\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    } else {\n      this._tempValues = values;\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    if (this.options) {\n      this.options.forEach(option => option.disabled = isDisabled);\n    }\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values\n      .map(value => {\n        return this.options.find(option =>\n            this.compareWith ? this.compareWith(option.value, value) : option.value === value);\n      })\n      .filter(Boolean)\n      .forEach(option => option!._setSelected(true));\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the selected state of the currently focused option. */\n  private _toggleSelectOnFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n      }\n    }\n  }\n\n  /**\n   * Sets the selected state on all of the options\n   * and emits an event if anything changed.\n   */\n  private _setAllOptionsSelected(isSelected: boolean) {\n    // Keep track of whether anything changed, because we only want to\n    // emit the changed event when something actually changed.\n    let hasChanged = false;\n\n    this.options.forEach(option => {\n      if (option._setSelected(isSelected)) {\n        hasChanged = true;\n      }\n    });\n\n    if (hasChanged) {\n      this._reportValueChange();\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  TemplateRef,\n  ComponentFactoryResolver,\n  ApplicationRef,\n  Injector,\n  ViewContainerRef,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {TemplatePortal, DomPortalOutlet} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\n\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\n@Directive({\n  selector: 'ng-template[matMenuContent]'\n})\nexport class MatMenuContent implements OnDestroy {\n  private _portal: TemplatePortal<any>;\n  private _outlet: DomPortalOutlet;\n\n  constructor(\n    private _template: TemplateRef<any>,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n    private _injector: Injector,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) private _document: any) {}\n\n  /**\n   * Attaches the content with a particular context.\n   * @docs-private\n   */\n  attach(context: any = {}) {\n    if (!this._portal) {\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n    }\n\n    this.detach();\n\n    if (!this._outlet) {\n      this._outlet = new DomPortalOutlet(this._document.createElement('div'),\n          this._componentFactoryResolver, this._appRef, this._injector);\n    }\n\n    const element: HTMLElement = this._template.elementRef.nativeElement;\n\n    // Because we support opening the same menu from different triggers (which in turn have their\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n    // risk it staying attached to a pane that's no longer in the DOM.\n    element.parentNode!.insertBefore(this._outlet.outletElement, element);\n    this._portal.attach(this._outlet, context);\n  }\n\n  /**\n   * Detaches the content.\n   * @docs-private\n   */\n  detach() {\n    if (this._portal.isAttached) {\n      this._portal.detach();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._outlet) {\n      this._outlet.dispose();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  query,\n  group,\n  sequence,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: AnimationTriggerMetadata;\n  readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [\n    state('void', style({\n      opacity: 0,\n      // This starts off from 0.01, instead of 0, because there's an issue in the Angular animations\n      // as of 4.2, which causes the animation to be skipped if it starts from 0.\n      transform: 'scale(0.01, 0.01)'\n    })),\n    transition('void => enter', sequence([\n      query('.mat-menu-content', style({opacity: 0})),\n      animate('100ms linear', style({opacity: 1, transform: 'scale(1, 0.5)'})),\n      group([\n        query('.mat-menu-content', animate('400ms cubic-bezier(0.55, 0, 0.55, 0.2)',\n          style({opacity: 1})\n        )),\n        animate('300ms cubic-bezier(0.25, 0.8, 0.25, 1)', style({transform: 'scale(1, 1)'})),\n      ])\n    ])),\n    transition('* => void', animate('150ms 50ms linear', style({opacity: 0})))\n  ]),\n\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n    // TODO(crisbeto): this is inside the `transformMenu`\n    // now. Remove next time we do breaking changes.\n    state('showing', style({opacity: 1})),\n    transition('void => *', [\n      style({opacity: 0}),\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const transformMenu = matMenuAnimations.transformMenu;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EventEmitter, TemplateRef, InjectionToken} from '@angular/core';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {Direction} from '@angular/cdk/bidi';\nimport {FocusOrigin} from '@angular/cdk/a11y';\nimport {MatMenuContent} from './menu-content';\n\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * @docs-private\n */\nexport const MAT_MENU_PANEL = new InjectionToken<MatMenuPanel>('MAT_MENU_PANEL');\n\n/**\n * Interface for a custom menu panel that can be used with `matMenuTriggerFor`.\n * @docs-private\n */\nexport interface MatMenuPanel<T = any> {\n  xPosition: MenuPositionX;\n  yPosition: MenuPositionY;\n  overlapTrigger: boolean;\n  templateRef: TemplateRef<any>;\n  close: EventEmitter<void | 'click' | 'keydown' | 'tab'>;\n  parentMenu?: MatMenuPanel | undefined;\n  direction?: Direction;\n  focusFirstItem: (origin?: FocusOrigin) => void;\n  resetActiveItem: () => void;\n  setPositionClasses?: (x: MenuPositionX, y: MenuPositionY) => void;\n  setElevation?(depth: number): void;\n  lazyContent?: MatMenuContent;\n  backdropClass?: string;\n  hasBackdrop?: boolean;\n  addItem?: (item: T) => void;\n  removeItem?: (item: T) => void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nexport class MatMenuItemBase {}\nexport const _MatMenuItemMixinBase = mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    'role': 'menuitem',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n    '(click)': '_checkDisabled($event)',\n    '(mouseenter)': '_handleMouseEnter()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n\n  private _document: Document;\n\n  /** Stream that emits when the menu item is hovered. */\n  readonly _hovered: Subject<MatMenuItem> = new Subject<MatMenuItem>();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(\n    private _elementRef: ElementRef,\n    @Inject(DOCUMENT) document?: any,\n    private _focusMonitor?: FocusMonitor,\n    @Inject(MAT_MENU_PANEL) @Optional() private _parentMenu?: MatMenuPanel<MatMenuItem>) {\n\n    // @deletion-target 7.0.0 make `_focusMonitor` and `document` required params.\n    super();\n\n    if (_focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      _focusMonitor.monitor(this._getHostElement(), false);\n    }\n\n    if (_parentMenu && _parentMenu.addItem) {\n      _parentMenu.addItem(this);\n    }\n\n    this._document = document;\n  }\n\n  /** Focuses the menu item. */\n  focus(origin: FocusOrigin = 'program'): void {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin);\n    } else {\n      this._getHostElement().focus();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._getHostElement());\n    }\n\n    if (this._parentMenu && this._parentMenu.removeItem) {\n      this._parentMenu.removeItem(this);\n    }\n\n    this._hovered.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  _handleMouseEnter() {\n    this._hovered.next(this);\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === textNodeType) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, MatLine, MatLineSetter, mixinDisableRipple} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nexport class MatListBase {}\nexport const _MatListMixinBase = mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nexport class MatListItemBase {}\nexport const _MatListItemMixinBase = mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {'class': 'mat-list'},\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    // @deletion-target 7.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\n    '[class.mat-list-item-avatar]': '_avatar',\n    '[class.mat-list-item-with-avatar]': '_avatar',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple {\n  private _isNavList: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n\n  constructor(private _element: ElementRef,\n              @Optional() private _navList: MatNavList) {\n    super();\n    this._isNavList = !!_navList;\n  }\n\n  ngAfterContentInit() {\n    // TODO: consider turning the setter into a function, it doesn't do anything as a class.\n    // tslint:disable-next-line:no-unused-expression\n    new MatLineSetter(this._lines, this._element);\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isNavList || this.disableRipple || this._navList.disableRipple;\n  }\n\n  _handleFocus() {\n    this._element.nativeElement.classList.add('mat-list-item-focus');\n  }\n\n  _handleBlur() {\n    this._element.nativeElement.classList.remove('mat-list-item-focus');\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {HttpClient, HttpErrorResponse} from '@angular/common/http';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n} from '@angular/core';\nimport {DomSanitizer, SafeResourceUrl, SafeHtml} from '@angular/platform-browser';\nimport {forkJoin, Observable, of as observableOf, throwError as observableThrow} from 'rxjs';\nimport {catchError, finalize, map, share, tap} from 'rxjs/operators';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeUrlError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeLiteralError(literal: SafeHtml): Error {\n  return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n               `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  url: SafeResourceUrl | null;\n  svgElement: SVGElement | null;\n\n  constructor(url: SafeResourceUrl);\n  constructor(svgElement: SVGElement);\n  constructor(data: SafeResourceUrl | SVGElement) {\n    // Note that we can't use `instanceof SVGElement` here,\n    // because it'll break during server-side rendering.\n    if (!!(data as any).nodeName) {\n      this.svgElement = data as SVGElement;\n    } else {\n      this.url = data as SafeResourceUrl;\n    }\n  }\n}\n\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable({providedIn: 'root'})\nexport class MatIconRegistry {\n  private _document: Document;\n\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document: any) {\n      this._document = document;\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n\n  /**\n   * Registers an icon using an HTML string in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteral(iconName: string, literal: SafeHtml): this {\n    return this.addSvgIconLiteralInNamespace('', iconName, literal);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon using an HTML string in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteralInNamespace(namespace: string, iconName: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._createSvgElementForSingleIcon(sanitizedLiteral);\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the default namespace.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteral(literal: SafeHtml): this {\n    return this.addSvgIconSetLiteralInNamespace('', literal);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteralInNamespace(namespace: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._svgElementFromString(sanitizedLiteral);\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the `<mat-icon>` element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    const cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg)),\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg)),\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: HttpErrorResponse): Observable<SVGElement | null> => {\n            const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the\n            // combined Observable won't necessarily fail.\n            console.error(`Loading icon set URL: ${url} failed: ${err.message}`);\n            return observableOf(null);\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // If the SVG for this icon set has already been parsed, do nothing.\n    if (config.svgElement) {\n      return observableOf(config.svgElement);\n    }\n\n    return this._fetchUrl(config.url).pipe(map(svgText => {\n      // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n      // only needs to occur if the cache is yet unset.\n      if (!config.svgElement) {\n        config.svgElement = this._svgElementFromString(svgText);\n      }\n\n      return config.svgElement;\n    }));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    const iconSource = iconSet.querySelector('#' + iconName);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.removeAttribute('id');\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    const div = this._document.createElement('DIV');\n    div.innerHTML = str;\n    const svg = div.querySelector('svg') as SVGElement;\n\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n\n    return svg;\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    let svg = this._svgElementFromString('<svg></svg>');\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl | null): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    if (safeUrl == null) {\n      throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finalize` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share(),\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n\n  /**\n   * Registers an icon config by name in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param iconName Name under which to register the config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconConfig(namespace: string, iconName: string, config: SvgIconConfig): this {\n    this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n    return this;\n  }\n\n  /**\n   * Registers an icon set config in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconSetConfig(namespace: string, config: SvgIconConfig): this {\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n\n    return this;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), DOCUMENT as InjectionToken<any>],\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nexport class MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatIconMixinBase = mixinColor(MatIconBase);\n\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon',\n    '[class.mat-icon-inline]': 'inline',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, CanColor {\n\n  /**\n   * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n   * the element the icon is contained in.\n   */\n  @Input()\n  get inline(): boolean {\n    return this._inline;\n  }\n  set inline(inline: boolean) {\n    this._inline = coerceBooleanProperty(inline);\n  }\n  private _inline: boolean = false;\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  constructor(\n      elementRef: ElementRef,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   `'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)`\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    if (changes.svgIcon) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n\n    // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\n    // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\n    // Do this before inserting the element into the DOM, in order to avoid a style recalculation.\n    const styleTags = svg.querySelectorAll('style') as NodeListOf<HTMLStyleElement>;\n\n    for (let i = 0; i < styleTags.length; i++) {\n      styleTags[i].textContent += ' ';\n    }\n\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    const childCount = layoutElement.childNodes.length;\n\n    // Remove existing child nodes and add the new SVG element. Note that we can't\n    // use innerHTML, because IE will throw if the element has a data binding.\n    for (let i = 0; i < childCount; i++) {\n      layoutElement.removeChild(layoutElement.childNodes[i]);\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onBlur()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements AfterContentInit, ControlValueAccessor, OnDestroy,\n    Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    this.registerDatepicker(value);\n  }\n  _datepicker: MatDatepicker<D>;\n\n  private registerDatepicker(value: MatDatepicker<D>) {\n    if (value) {\n      this._datepicker = value;\n      this._datepicker._registerInput(this);\n    }\n  }\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(value: (date: D | null) => boolean) {\n    this._dateFilter = value;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    const oldDate = this.value;\n    this._value = value;\n    this._formatValue(value);\n\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    const element = this._elementRef.nativeElement;\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n\n    // We need to null check the `blur` method, because it's undefined during SSR.\n    if (newValue && element.blur) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      element.blur();\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D | null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngAfterContentInit() {\n    if (this._datepicker) {\n      this._datepickerSubscription = this._datepicker._selectedChanged.subscribe((selected: D) => {\n        this.value = selected;\n        this._cvaOnChange(selected);\n        this._onTouched();\n        this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n        this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** @docs-private */\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * @deprecated\n   * @deletion-target 7.0.0 Use `getConnectedOverlayOrigin` instead\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this.getConnectedOverlayOrigin();\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (event.altKey && event.keyCode === DOWN_ARROW) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n\n    if (!this._dateAdapter.sameDate(date, this._value)) {\n      this._value = date;\n      this._cvaOnChange(date);\n      this._valueChange.emit(date);\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    }\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /** Returns the palette used by the input's form field, if any. */\n  _getThemePalette() {\n    return this._formField ? this._formField.color : undefined;\n  }\n\n  /** Handles blur events on the input. */\n  _onBlur() {\n    // Reformat the input only if we have a valid value.\n    if (this.value) {\n      this._formatValue(this.value);\n    }\n\n    this._onTouched();\n  }\n\n  /** Formats a value and sets it on the input element. */\n  private _formatValue(value: D | null) {\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class MatDatepickerToggleIcon {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'class': 'mat-datepicker-toggle',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n    '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n    '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon) _customIcon: MatDatepickerToggleIcon;\n\n  constructor(public _intl: MatDatepickerIntl, private _changeDetectorRef: ChangeDetectorRef) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.datepicker) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatCalendar, MatCalendarHeader} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {\n  MatDatepicker,\n  MatDatepickerContent,\n  MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    OverlayModule,\n    A11yModule,\n    PortalModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n    MatCalendarHeader,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-horizontal]': '!vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input()\n  get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [MatDivider, MatCommonModule],\n  declarations: [MatDivider],\n})\nexport class MatDividerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * The display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the reset of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  SimpleChanges,\n  SkipSelf,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {filter, startWith, take} from 'rxjs/operators';\nimport {MatAccordion} from './accordion';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\n\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  providers: [\n    // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n    // to the same accordion.\n    {provide: MatAccordion, useValue: undefined},\n  ],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  }\n})\nexport class MatExpansionPanel extends CdkAccordionItem\n    implements AfterContentInit, OnChanges, OnDestroy {\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n  private _hideToggle = false;\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordion;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent) _lazyContent: MatExpansionPanelContent;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  constructor(@Optional() @SkipSelf() accordion: MatAccordion,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n  }\n\n  /** Whether the expansion indicator should be hidden. */\n  _getHideToggle(): boolean {\n    if (this.accordion) {\n      return this.accordion.hideToggle;\n    }\n    return this.hideToggle;\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._inputChanges.complete();\n  }\n\n  _bodyAnimation(event: AnimationEvent) {\n    const classList = event.element.classList;\n    const cssClass = 'mat-expanded';\n    const {phaseName, toState} = event;\n\n    // Toggle the body's `overflow: hidden` class when closing starts or when expansion ends in\n    // order to prevent the cases where switching too early would cause the animation to jump.\n    // Note that we do it directly on the DOM element to avoid the slight delay that comes\n    // with doing it via change detection.\n    if (phaseName === 'done' && toState === 'expanded') {\n      classList.add(cssClass);\n    } else if (phaseName === 'start' && toState === 'collapsed') {\n      classList.remove(cssClass);\n    }\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, Subscription} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanel} from './expansion-panel';\n\n\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'panel.disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n    @Host() public panel: MatExpansionPanel,\n    private _element: ElementRef,\n    private _focusMonitor: FocusMonitor,\n    private _changeDetectorRef: ChangeDetectorRef) {\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to  subscribe and trigger change detection manually.\n    this._parentChangeSubscription = merge(\n      panel.opened,\n      panel.closed,\n      panel._inputChanges.pipe(filter(changes => !!(changes.hideToggle || changes.disabled)))\n    )\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    _focusMonitor.monitor(_element.nativeElement);\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    this.panel.toggle();\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        event.preventDefault();\n        this._toggle();\n        break;\n      default:\n        return;\n    }\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n}\n\n/**\n * `<mat-panel-description>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host : {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * `<mat-panel-title>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host : {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanel, MatExpansionPanelActionRow} from './expansion-panel';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatLine, MatLineSetter} from '@angular/material/core';\nimport {coerceToNumber} from './grid-list-measure';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(private _element: ElementRef) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value: number) { this._rowspan = coerceToNumber(value); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value: number) { this._colspan = coerceToNumber(value); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    this._element.nativeElement.style[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridTileText implements AfterContentInit {\n  /**\n   *  Helper that watches the number of lines in a text area and sets\n   * a class on the host element that matches the line count.\n   */\n  _lineSetter: MatLineSetter;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef) {}\n\n  ngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {QueryList} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    let lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  constructor(numColumns: number, tiles: QueryList<MatGridTile>) {\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    let gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile.\n    } while (gapEndIndex - gapStartIndex < tileCols);\n\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'rtl' ? 'right' : 'left';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number);\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList);\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height. */\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['paddingBottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('marginTop', null);\n      tile._setStyle('paddingTop', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string { return `calc(${exp})`; }\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return (value.match(/px|em|rem/)) ? value : value + 'px';\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  coerceToString,\n  coerceToNumber,\n} from './grid-list-measure';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridList implements OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef, @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols(): number { return this._cols; }\n  set cols(value: number) { this._cols = coerceToNumber(value); }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize(): string { return this._gutter; }\n  set gutterSize(value: string) { this._gutter = coerceToString(value); }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  set rowHeight(value: string | number) {\n    const newValue = coerceToString(value);\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    const tracker = new TileCoordinator(this.cols, this._tiles);\n    const direction = this._dir ? this._dir.value : 'ltr';\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    this._tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      this._element.nativeElement.style[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new year is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\n    let activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n        this._yearSelected(this._dateAdapter.getYear(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  _getActiveCell(): number {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _shouldEnableYear(year: number) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null ||\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n      return false;\n    }\n\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    const normalizedDate =\n          this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    this.monthSelected.emit(normalizedDate);\n\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n        this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (month === undefined || month === null ||\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentPortal, ComponentType, Portal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView, yearsPerPage} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n/**\n * Possible views for the calendar.\n * @docs-private\n */\nexport type MatCalendarView = 'month' | 'year' | 'multi-year';\n\n/** Default header for MatCalendar */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar-header',\n  templateUrl: 'calendar-header.html',\n  exportAs: 'matCalendarHeader',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarHeader<D> {\n  constructor(private _intl: MatDatepickerIntl,\n              @Inject(forwardRef(() => MatCalendar)) public calendar: MatCalendar<D>,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    this.calendar.stateChanges.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  /** The label for the current calendar view. */\n  get periodButtonText(): string {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter\n          .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\n              .toLocaleUpperCase();\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYearName(this.calendar.activeDate);\n    }\n    const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n    const lastYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  get periodButtonLabel(): string {\n    return this.calendar.currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the the previous button. */\n  get prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** The label for the the next button. */\n  get nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** Handles user clicks on the period label. */\n  currentPeriodClicked(): void {\n    this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  previousClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage\n            );\n  }\n\n  /** Handles user clicks on the next button. */\n  nextClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate,\n                    this.calendar.currentView == 'year' ? 1 : yearsPerPage\n            );\n  }\n\n  /** Whether the previous period button is enabled. */\n  previousEnabled(): boolean {\n    if (!this.calendar.minDate) {\n      return true;\n    }\n    return !this.calendar.minDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  nextEnabled(): boolean {\n    return !this.calendar.maxDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n}\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, AfterViewChecked, OnDestroy, OnChanges {\n  /** An input indicating the type of the header component, if set. */\n  @Input() headerComponent: ComponentType<any>;\n\n  /** A portal containing the header component type for this calendar. */\n  _calendarHeaderPortal: Portal<any>;\n\n  private _intlChanges: Subscription;\n\n  /**\n   * Used for scheduling that focus should be moved to the active cell on the next tick.\n   * We need to schedule it, rather than do it immediately, because we have to wait\n   * for Angular to re-evaluate the view children.\n   */\n  private _moveFocusOnNextTick = false;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: MatCalendarView = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView) multiYearView: MatMultiYearView<D>;\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get activeDate(): D { return this._clampedActiveDate; }\n  set activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n    this.stateChanges.next();\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  get currentView(): MatCalendarView { return this._currentView; }\n  set currentView(value: MatCalendarView) {\n    this._currentView = value;\n    this._moveFocusOnNextTick = true;\n  }\n  private _currentView: MatCalendarView;\n\n  /**\n   * Emits whenever there is a state change that the header may need to respond to.\n   */\n  stateChanges = new Subject<void>();\n\n  constructor(_intl: MatDatepickerIntl,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => {\n      changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    });\n  }\n\n  ngAfterContentInit() {\n    this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || MatCalendarHeader);\n    this.activeDate = this.startAt || this._dateAdapter.today();\n\n    // Assign to the private property since we don't want to move focus on init.\n    this._currentView = this.startView;\n  }\n\n  ngAfterViewChecked() {\n    if (this._moveFocusOnNextTick) {\n      this._moveFocusOnNextTick = false;\n      this.focusActiveCell();\n    }\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n    this.stateChanges.complete();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change = changes.minDate || changes.maxDate || changes.dateFilter;\n\n    if (change && !change.firstChange) {\n      const view = this._getCurrentViewComponent();\n\n      if (view) {\n        view._init();\n      }\n    }\n\n    this.stateChanges.next();\n  }\n\n  focusActiveCell() {\n    this._getCurrentViewComponent()._focusActiveCell();\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles year/month selection in the multi-year/year views. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this.activeDate = date;\n    this.currentView = view;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Returns the component instance that corresponds to the current calendar view. */\n  private _getCurrentViewComponent() {\n    return this.monthView || this.yearView || this.multiYearView;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n  group,\n  query,\n  animateChild,\n} from '@angular/animations';\n\n/** Animations used by the Material datepicker. */\nexport const matDatepickerAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n  /** Transforms the height of the datepicker's calendar. */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({opacity: 0, transform: 'scale(1, 0)'})),\n    state('enter', style({opacity: 1, transform: 'scale(1, 1)'})),\n    transition('void => enter', group([\n      query('@fadeInCalendar', animateChild()),\n      animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n    ])),\n    transition('* => void', animate('100ms linear', style({opacity: 0})))\n  ]),\n\n  /** Fades in the content of the calendar. */\n  fadeInCalendar: trigger('fadeInCalendar', [\n    state('void', style({opacity: 0})),\n    state('enter', style({opacity: 1})),\n    transition('void => *', animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {take, filter} from 'rxjs/operators';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n  OnDestroy,\n} from '@angular/core';\nimport {CanColor, DateAdapter, mixinColor, ThemePalette} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {merge, Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatCalendar} from './calendar';\nimport {matDatepickerAnimations} from './datepicker-animations';\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY,\n};\n\n// Boilerplate for applying mixins to MatDatepickerContent.\n/** @docs-private */\nexport class MatDatepickerContentBase {\n  constructor(public _elementRef: ElementRef) { }\n}\nexport const _MatDatepickerContentMixinBase = mixinColor(MatDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[@transformPanel]': '\"enter\"',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n  },\n  animations: [\n    matDatepickerAnimations.transformPanel,\n    matDatepickerAnimations.fadeInCalendar,\n  ],\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color'],\n})\nexport class MatDatepickerContent<D> extends _MatDatepickerContentMixinBase\n  implements AfterViewInit, CanColor {\n\n  /** Reference to the internal calendar component. */\n  @ViewChild(MatCalendar) _calendar: MatCalendar<D>;\n\n  /** Reference to the datepicker that created the overlay. */\n  datepicker: MatDatepicker<D>;\n\n  /** Whether the datepicker is above or below the input. */\n  _isAbove: boolean;\n\n  constructor(elementRef: ElementRef) {\n    super(elementRef);\n  }\n\n  ngAfterViewInit() {\n    this._calendar.focusActiveCell();\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDatepicker<D> implements OnDestroy, CanColor {\n  /** An input indicating the type of the custom header component for the calendar, if set. */\n  @Input() calendarHeaderComponent: ComponentType<any>;\n\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' = 'month';\n\n  /** Color palette to use on the datepicker's calendar. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n        (this._datepickerInput ? this._datepickerInput._getThemePalette() : undefined);\n  }\n  set color(value: ThemePalette) {\n    this._color = value;\n  }\n  _color: ThemePalette;\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits selected year in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected month in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { value ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<MatDatepickerContent<D>> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** Reference to the component instantiated in popup mode. */\n  private _popupComponentRef: ComponentRef<MatDatepickerContent<D>> | null;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  /** Subscription to value changes in the associated input element. */\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  /** Emits new selected date when selected date changes. */\n  readonly _selectedChanged = new Subject<D>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n      this._popupComponentRef = null;\n    }\n  }\n\n  /** Selects the given date */\n  _select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this._selectedChanged.next(date);\n    }\n  }\n\n  /** Emits the selected year in multiyear view */\n  _selectYear(normalizedYear: D): void {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Emits selected month in year view */\n  _selectMonth(normalizedMonth: D): void {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    this._dialogRef = this._dialog.open<MatDatepickerContent<D>>(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n    this._setColor();\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal<MatDatepickerContent<D>>(MatDatepickerContent,\n                                                                          this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\n      this._popupComponentRef.instance.datepicker = this;\n      this._setColor();\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir,\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => {\n        // Closing on alt + up is only valid when there's an input associated with the datepicker.\n        return event.keyCode === ESCAPE ||\n               (this._datepickerInput && event.altKey && event.keyCode === UP_ARROW);\n      }))\n    ).subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .flexibleConnectedTo(this._datepickerInput.getPopupConnectionElementRef())\n      .withTransformOriginOn('.mat-datepicker-content')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8)\n      .withPush(false)\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom'\n        },\n        {\n          originX: 'end',\n          originY: 'bottom',\n          overlayX: 'end',\n          overlayY: 'top'\n        },\n        {\n          originX: 'end',\n          originY: 'top',\n          overlayX: 'end',\n          overlayY: 'bottom'\n        }\n      ]);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Passes the current theme color along to the calendar overlay. */\n  private _setColor(): void {\n    const color = this.color;\n    if (this._popupComponentRef) {\n      this._popupComponentRef.instance.color = color;\n    }\n    if (this._dialogRef) {\n      this._dialogRef.componentInstance.color = color;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AnimationEvent} from '@angular/animations';\nimport {matDialogAnimations} from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.slideDialog],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    'aria-modal': 'true',\n    '[attr.id]': '_id',\n    '[attr.role]': '_config.role',\n    '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config.ariaLabel',\n    '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n    '[@slideDialog]': '_state',\n    '(@slideDialog.start)': '_onAnimationStart($event)',\n    '(@slideDialog.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null = null;\n\n  /** ID for the container DOM element. */\n  _id: string;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any,\n    /** The dialog configuration. */\n    public _config: MatDialogConfig) {\n\n    super();\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Note that there is no focus method when rendering on the server.\n      if (this._elementRef.nativeElement.focus) {\n        // Move focus onto the dialog immediately in order to prevent the user from accidentally\n        // opening multiple dialogs at the same time. Needs to be async, because the element\n        // may not be focusable immediately.\n        Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n      }\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {GlobalPositionStrategy, OverlayRef} from '@angular/cdk/overlay';\nimport {Location} from '@angular/common';\nimport {Observable, Subject, Subscription, SubscriptionLike} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {DialogPosition} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private readonly _afterOpen = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private readonly _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private readonly _beforeClose = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  /** Subscription to changes in the user's location. */\n  private _locationChanges: SubscriptionLike = Subscription.EMPTY;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    public _containerInstance: MatDialogContainer,\n    location?: Location,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Pass the id along to the container.\n    _containerInstance._id = id;\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpen.next();\n      this._afterOpen.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    ).subscribe(() => this._overlayRef.dispose());\n\n    _overlayRef.detachments().subscribe(() => {\n      this._beforeClose.next(this._result);\n      this._beforeClose.complete();\n      this._locationChanges.unsubscribe();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n      this._overlayRef.dispose();\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose))\n      .subscribe(() => this.close());\n\n    if (location) {\n      // Close the dialog when the user goes forwards/backwards in history or when the location\n      // hash changes. Note that this usually doesn't include clicking on links (unless the user\n      // is using the `HashLocationStrategy`).\n      this._locationChanges = location.subscribe(() => {\n        if (this._containerInstance._config.closeOnNavigation) {\n          this.close();\n        }\n      });\n    }\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._beforeClose.next(dialogResult);\n      this._beforeClose.complete();\n      this._overlayRef.detachBackdrop();\n    });\n\n    this._containerInstance._startExitAnimation();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpen(): Observable<void> {\n    return this._afterOpen.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this._beforeClose.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = '', height: string = ''): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayContainer,\n  OverlayRef,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {defer, Observable, of as observableOf, Subject} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay: Overlay): ()  => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private readonly _afterAllClosedAtThisLevel = new Subject<void>();\n  private readonly _afterOpenAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpen : this._afterOpenAtThisLevel;\n  }\n\n  get _afterAllClosed() {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  readonly afterAllClosed: Observable<void> = defer<void>(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined)));\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() private _location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) private _scrollStrategy,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {}\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T, R> {\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef = this._attachDialogContent<T, R>(componentOrTemplateRef,\n                                                      dialogContainer,\n                                                      overlayRef,\n                                                      config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpen.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    let i = this.openDialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      this.openDialogs[i].close();\n    }\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatDialogConfig, config]\n    ]));\n    const containerPortal =\n        new ComponentPortal(MatDialogContainer, config.viewContainerRef, injector);\n    const containerRef = overlay.attach<MatDialogContainer>(containerPortal);\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T, R>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T, R> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef =\n        new MatDialogRef<T, R>(overlayRef, dialogContainer, this._location, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    const injectionTokens = new WeakMap<any, any>([\n      [MatDialogContainer, dialogContainer],\n      [MAT_DIALOG_DATA, config.data],\n      [MatDialogRef, dialogRef]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string = 'Close dialog';\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes._matDialogClose || changes._matDialogCloseResult;\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent {}\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions {}\n\n\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MatDialog} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogActions,\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTextareaAutosize} from '@angular/cdk/text-field';\nimport {Directive, Input} from '@angular/core';\n\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deletion-target 7.0.0 deprecate in favor of `cdkTextareaAutosize`.\n */\n@Directive({\n  selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n  exportAs: 'matTextareaAutosize',\n  inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n  host: {\n    'class': 'cdk-textarea-autosize mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n    '(input)': '_noopInputHandler()',\n  },\n})\nexport class MatTextareaAutosize extends CdkTextareaAutosize {\n  @Input()\n  get matAutosizeMinRows(): number { return this.minRows; }\n  set matAutosizeMinRows(value: number) { this.minRows = value; }\n\n  @Input()\n  get matAutosizeMaxRows(): number { return this.maxRows; }\n  set matAutosizeMaxRows(value: number) { this.maxRows = value; }\n\n  @Input('mat-autosize')\n  get matAutosize(): boolean { return this.enabled; }\n  set matAutosize(value: boolean) { this.enabled = value; }\n\n  @Input()\n  get matTextareaAutosize(): boolean { return this.enabled; }\n  set matTextareaAutosize(value: boolean) { this.enabled = value; }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Self,\n  NgZone,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {CanUpdateErrorState, ErrorStateMatcher, mixinErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs';\nimport {AutofillMonitor} from '@angular/cdk/text-field';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nexport class MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatInputMixinBase = mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput]`,\n  exportAs: 'matInput',\n  host: {\n    /**\n     * @deletion-target 7.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n     */\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[attr.placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[readonly]': 'readonly',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, OnInit, DoCheck, CanUpdateErrorState {\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _inputValueAccessor: {value: any};\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  focused: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly stateChanges: Subject<void> = new Subject<void>();\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  controlType: string = 'mat-input';\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  autofilled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n  protected _disabled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n  protected _id: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input() placeholder: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  protected _required = false;\n\n  /** Input type of the element. */\n  @Input()\n  get type(): string { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      this._elementRef.nativeElement.type = this._type;\n    }\n  }\n  protected _type = 'text';\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): string { return this._inputValueAccessor.value; }\n  set value(value: string) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\n  private _readonly = false;\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(protected _elementRef: ElementRef,\n              protected _platform: Platform,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n              private _autofillMonitor: AutofillMonitor,\n              ngZone: NgZone) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || this._elementRef.nativeElement;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      ngZone.runOutsideAngular(() => {\n        _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n          let el = event.target as HTMLInputElement;\n          if (!el.value && !el.selectionStart && !el.selectionEnd) {\n            // Note: Just setting `0, 0` doesn't fix the issue. Setting\n            // `1, 1` fixes it for the first time that you type text and\n            // then hold delete. Toggling to `1, 1` and then back to\n            // `0, 0` seems to completely fix it.\n            el.setSelectionRange(1, 1);\n            el.setSelectionRange(0, 0);\n          }\n        });\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n  }\n\n  ngOnInit() {\n    this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n      this.autofilled = event.isAutofilled;\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n    this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n  }\n\n  /** Focuses the input. */\n  focus(): void { this._elementRef.nativeElement.focus(); }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && !this.readonly) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. */\n  protected _isTextarea() {\n    return this._elementRef.nativeElement.nodeName.toLowerCase() === 'textarea';\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n        !this.autofilled;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return this.focused || !this.empty; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() { this.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TextFieldModule} from '@angular/cdk/text-field';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\n\n\n@NgModule({\n  declarations: [MatInput, MatTextareaAutosize],\n  imports: [\n    CommonModule,\n    TextFieldModule,\n    MatFormFieldModule,\n  ],\n  exports: [\n    TextFieldModule,\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher],\n})\nexport class MatInputModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel: string = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel: string = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel: string = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel: string = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel: string = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel: string = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel: string = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel: string = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel: string = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  NgZone,\n} from '@angular/core';\nimport {take} from 'rxjs/operators';\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'attr.aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** Whether to allow selection of disabled cells. */\n  @Input() allowDisabledSelection = false;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  constructor(private _elementRef: ElementRef, private _ngZone: NgZone) { }\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (!this.allowDisabledSelection && !cell.enabled) {\n      return;\n    }\n    this.selectedValueChange.emit(cell.value);\n  }\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  get _firstRowOffset(): number {\n    return this.rows && this.rows.length && this.rows[0].length ?\n        this.numCols - this.rows[0].length : 0;\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._elementRef.nativeElement.querySelector('.mat-calendar-body-active').focus();\n      });\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n              this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n          this._dateSelected(this._dateAdapter.getDate(this._activeDate));\n          this._userSelection.emit();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(\n            this._dateAdapter.getYear(this.activeDate),\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const enabled = this._shouldEnableDate(date);\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));\n    }\n  }\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterViewInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nexport class MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatCheckboxMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewInit, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  private _required: boolean;\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change: EventEmitter<MatCheckboxChange> =\n      new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  _onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Reference to the focused state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value != this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked: boolean = false;\n\n  /**\n   * Whether the checkbox is disabled. This fully overrides the implementation provided by\n   * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n   */\n  @Input()\n  get disabled() { return this._disabled; }\n  set disabled(value: any) {\n    if (value != this.disabled) {\n      this._disabled = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean { return this._indeterminate; }\n  set indeterminate(value: boolean) {\n    const changed = value != this._indeterminate;\n    this._indeterminate = value;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n  private _indeterminate: boolean = false;\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the checkbox changes.\n    // Since the checkbox uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n    }\n  }\n\n  private _emitChangeEvent() {\n    let event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this.ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n\n      this._onTouched();\n    }\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    // Don't transition if animations are disabled.\n    if (this._animationMode === 'NoopAnimations') {\n      return '';\n    }\n\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule],\n  declarations: [MatCheckbox, MatCheckboxRequiredValidator],\n})\nexport class MatCheckboxModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nexport class MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatChipMixinBase =\n    mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\n\nconst CHIP_ATTRIBUTE_NAMES = ['mat-basic-chip'];\n\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-avatar, [matChipAvatar]',\n  host: {'class': 'mat-chip-avatar'}\n})\nexport class MatChipAvatar {}\n\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n  host: {'class': 'mat-chip-trailing-icon'}\n})\nexport class MatChipTrailingIcon {}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled', 'disableRipple'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[class.mat-chip-with-avatar]': 'avatar',\n    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[class.mat-chip-disabled]': 'disabled',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n  },\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable, CanDisableRipple, RippleTarget {\n\n  /** Reference to the RippleRenderer for the chip. */\n  private _chipRipple: RippleRenderer;\n\n  /** Whether the ripples are globally disabled through the RippleGlobalOptions */\n  private _ripplesGloballyDisabled = false;\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._ripplesGloballyDisabled;\n  }\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether the chip list is selectable */\n  chipListSelectable: boolean = true;\n\n  /** The chip avatar */\n  @ContentChild(MatChipAvatar) avatar: MatChipAvatar;\n\n  /** The chip's trailing icon. */\n  @ContentChild(MatChipTrailingIcon) trailingIcon: MatChipTrailingIcon;\n\n  /** The chip's remove toggler. */\n  @ContentChild(forwardRef(() => MatChipRemove)) removeIcon: MatChipRemove;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) {\n    this._selected = coerceBooleanProperty(value);\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: value\n    });\n  }\n  protected _selected: boolean = false;\n\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n  @Input()\n  get value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(value: any) { this._value = value; }\n  protected _value: any;\n\n  /**\n   * Whether or not the chip is selectable. When a chip is not selectable,\n   * changes to it's selected state are always ignored. By default a chip is\n   * selectable, and it becomes non-selectable if it's parent chip list is\n   * not selectable.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable && this.chipListSelectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  protected _selectable: boolean = true;\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (removed) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  protected _removable: boolean = true;\n\n  /** Emits when the chip is focused. */\n  readonly _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  readonly _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\n      new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** Emitted when a chip is to be removed. */\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** The ARIA selected applied to the chip. */\n  get ariaSelected(): string | null {\n    return this.selectable ? this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions) {\n    super(_elementRef);\n\n    this._addHostClassName();\n\n    this._chipRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._chipRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    if (globalOptions) {\n      this._ripplesGloballyDisabled = !!globalOptions.disabled;\n      // TODO(paul): Once the speedFactor is removed, we no longer need to copy each single option.\n      this.rippleConfig = {\n        speedFactor: globalOptions.baseSpeedFactor,\n        animation: globalOptions.animation,\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n      };\n    }\n  }\n\n  _addHostClassName() {\n    // Add class for the different chips\n    for (const attr of CHIP_ATTRIBUTE_NAMES) {\n      if (this._elementRef.nativeElement.hasAttribute(attr) ||\n        this._elementRef.nativeElement.tagName.toLowerCase() === attr) {\n        (this._elementRef.nativeElement as HTMLElement).classList.add(attr);\n        return;\n      }\n    }\n    (this._elementRef.nativeElement as HTMLElement).classList.add('mat-standard-chip');\n  }\n\n  ngOnDestroy() {\n    this.destroyed.emit({chip: this});\n    this._chipRipple._removeTriggerEvents();\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    this._selected = true;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: true\n    });\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    this._selected = false;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: false\n    });\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    this._selected = true;\n    // Emit select event when selected changes.\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: true,\n      selected: true\n    });\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    if (!this._hasFocus) {\n      this._elementRef.nativeElement.focus();\n      this._onFocus.next({chip: this});\n    }\n    this._hasFocus = true;\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Ensures events fire properly upon click. */\n  _handleClick(event: Event) {\n    // Check disabled\n    if (this.disabled) {\n      return;\n    }\n\n    event.preventDefault();\n    event.stopPropagation();\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    this._hasFocus = false;\n    this._onBlur.next({chip: this});\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove mat-chip-trailing-icon',\n    '(click)': '_handleClick()',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {\n  }\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(): void {\n    if (this._parentChip.removable) {\n      this._parentChip.remove();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** Default options, for the chips module, that can be overridden. */\nexport interface MatChipsDefaultOptions {\n  /** The list of key codes that will trigger a chipEnd event. */\n  separatorKeyCodes: number[];\n}\n\n/** Injection token to be used to override the default options for the chips module. */\nexport const MAT_CHIPS_DEFAULT_OPTIONS =\n    new InjectionToken<MatChipsDefaultOptions>('mat-chips-default-options');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {CanUpdateErrorState, ErrorStateMatcher, mixinErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {merge, Observable, Subscription} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipInput} from './chip-input';\n\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nexport class MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatChipListMixinBase = mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for it's similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': '_tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)',\n    '[id]': '_uid',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n  ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly controlType: string = 'mat-chip-list';\n\n  /** When a chip is destroyed, we track the index so we can focus the appropriate next chip. */\n  protected _lastDestroyedIndex: number|null = null;\n\n  /** Track which chips we're listening to for focus/destruction. */\n  protected _chipSet: WeakMap<MatChip, boolean> = new WeakMap();\n\n  /** Subscription to tabbing out from the chip list. */\n  private _tabOutSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the chip list. */\n  private _changeSubscription: Subscription;\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription | null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription | null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription | null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription | null;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipInput;\n\n  /** Uid of the chip list */\n  _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The ARIA role applied to the chip list. */\n  get role(): string | null { return this.empty ? null : 'listbox'; }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n  private _multiple: boolean = false;\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith(): (o1: any, o2: any) => boolean { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  protected _value: any;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get id(): string {\n    return this._chipInput ? this._chipInput.id : this._uid;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  protected _required: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  protected _placeholder: string;\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return this.chips.some(chip => chip._hasFocus) ||\n      (this._chipInput && this._chipInput.focused);\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  protected _disabled: boolean = false;\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip list is selectable. When a chip list is not selectable,\n   * the selected states for all the chips inside the chip list are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n    if (this.chips) {\n      this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n    }\n  }\n  protected _selectable: boolean = true;\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroyed));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipListChange> =\n      new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips)\n      .withWrap()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._tabOutSubscription = this._keyManager.tabOut.subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => this._tabIndex = this._userTabIndex || 0);\n    });\n\n    // When the list changes, re-subscribe\n    this._changeSubscription = this.chips.changes.pipe(startWith(null)).subscribe(() => {\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabOutSubscription.unsubscribe();\n\n    if (this._changeSubscription) {\n      this._changeSubscription.unsubscribe();\n    }\n\n    if (this._chipRemoveSubscription) {\n      this._chipRemoveSubscription.unsubscribe();\n    }\n\n    this._dropSubscriptions();\n    this.stateChanges.complete();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipInput): void {\n    this._chipInput = inputElement;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._elementRef.nativeElement.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() { this.focus(); }\n\n  /**\n   * Focuses the the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(): void {\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput();\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput() {\n    if (this._chipInput) {\n      this._chipInput.focus();\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    const target = event.target as HTMLElement;\n\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n    } else if (target && target.classList.contains('mat-chip')) {\n      this._keyManager.onKeydown(event);\n      this.stateChanges.next();\n    }\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * Update key manager's active item when chip is deleted.\n   * If the deleted chip is the last chip in chip list, focus the new last chip.\n   * Otherwise focus the next chip in the list.\n   * Save `_lastDestroyedIndex` so we can set the correct focus.\n   */\n  protected _updateKeyManager(chip: MatChip) {\n    let chipIndex: number = this.chips.toArray().indexOf(chip);\n    if (this._isValidIndex(chipIndex)) {\n      if (chip._hasFocus) {\n        // Check whether the chip is not the last item\n        if (chipIndex < this.chips.length - 1) {\n          this._keyManager.setActiveItem(chipIndex);\n        } else if (chipIndex - 1 >= 0) {\n          this._keyManager.setActiveItem(chipIndex - 1);\n        }\n      }\n      if (this._keyManager.activeItemIndex === chipIndex) {\n        this._lastDestroyedIndex = chipIndex;\n      }\n    }\n  }\n\n  /**\n   * Checks to see if a focus chip was recently destroyed so that we can refocus the next closest\n   * one.\n   */\n  protected _updateFocusForDestroyedChips() {\n    let chipsArray = this.chips;\n\n    if (this._lastDestroyedIndex != null && chipsArray.length > 0 && this.focused) {\n      // Check whether the destroyed chip was the last item\n      const newFocusIndex = Math.min(this._lastDestroyedIndex, chipsArray.length - 1);\n      this._keyManager.setActiveItem(newFocusIndex);\n      let focusChip = this._keyManager.activeItem;\n      // Focus the chip\n      if (focusChip) {\n        focusChip.focus();\n      }\n    }\n\n    // Reset our destroyed index\n    this._lastDestroyedIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChip);\n        }\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    this._keyManager.setActiveItem(-1);\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n      this._updateKeyManager(event.chip);\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Directive, ElementRef, EventEmitter, Input, Output, Inject} from '@angular/core';\nimport {MatChipList} from './chip-list';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n    '[id]': 'id',\n    '[attr.placeholder]': 'placeholder || null',\n  }\n})\nexport class MatChipInput {\n  /** Whether the control is focused. */\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  // TODO(tinayuangao): Support Set here\n  @Input('matChipInputSeparatorKeyCodes')\n  separatorKeyCodes: number[] = this._defaultOptions.separatorKeyCodes;\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /**\n   * The input's placeholder text.\n   * @deprecated Bind to the `placeholder` attribute directly.\n   * @deletion-target 7.0.0\n   */\n  @Input() placeholder: string = '';\n\n  /** Unique id for the input. */\n  @Input() id: string = `mat-chip-list-input-${nextUniqueId++}`;\n\n  /** Whether the input is empty. */\n  get empty(): boolean { return !this._inputElement.value; }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(\n    protected _elementRef: ElementRef,\n    @Inject(MAT_CHIPS_DEFAULT_OPTIONS) private _defaultOptions: MatChipsDefaultOptions) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this.separatorKeyCodes.indexOf(event.keyCode) > -1) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  /** Focuses the input. */\n  focus(): void { this._inputElement.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChip, MatChipAvatar, MatChipRemove, MatChipTrailingIcon} from './chip';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipInput} from './chip-input';\nimport {MatChipList} from './chip-list';\n\nconst CHIP_DECLARATIONS = [\n  MatChipList,\n  MatChip,\n  MatChipInput,\n  MatChipRemove,\n  MatChipAvatar,\n  MatChipTrailingIcon,\n];\n\n@NgModule({\n  exports: CHIP_DECLARATIONS,\n  declarations: CHIP_DECLARATIONS,\n  providers: [\n    ErrorStateMatcher,\n    {\n      provide: MAT_CHIPS_DEFAULT_OPTIONS,\n      useValue: {\n        separatorKeyCodes: [ENTER]\n      } as MatChipsDefaultOptions\n    }\n  ]\n})\nexport class MatChipsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction;\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /** Whether the dialog should close when the user goes backwards/forwards in history. */\n  closeOnNavigation?: boolean = true;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by MatDialog. */\nexport const matDialogAnimations: {\n  readonly slideDialog: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  slideDialog: trigger('slideDialog', [\n    // Note: The `enter` animation doesn't transition to something like `translate3d(0, 0, 0)\n    // scale(1)`, because for some reason specifying the transform explicitly, causes IE both\n    // to blur the dialog content and decimate the animation performance. Leaving it as `none`\n    // solves both issues.\n    state('enter', style({ transform: 'none', opacity: 1 })),\n    state('void', style({ transform: 'translate3d(0, 25%, 0) scale(0.9)', opacity: 0 })),\n    state('exit', style({ transform: 'translate3d(0, 25%, 0)', opacity: 0 })),\n    transition('* => *', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n/** Default color palette for flat buttons (mat-flat-button) */\nconst DEFAULT_FLAT_BUTTON_COLOR = 'primary';\n\n/**\n * List of classes to add to MatButton instances based on host attributes to\n * style as different variants.\n */\nconst BUTTON_HOST_ATTRIBUTES = [\n  'mat-button',\n  'mat-flat-button',\n  'mat-icon-button',\n  'mat-raised-button',\n  'mat-stroked-button',\n  'mat-mini-fab',\n  'mat-fab',\n];\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nexport class MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatButtonMixinBase = mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\n             button[mat-flat-button]`,\n  exportAs: 'matButton',\n  host: {\n    '[disabled]': 'disabled || null',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n\n  /** Whether the button is round. */\n  readonly isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  readonly isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated Platform checks for SSR are no longer needed\n               * @deletion-target 7.0.0\n               */\n              // tslint:disable-next-line:no-unused-variable\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              // @deletion-target 7.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // For each of the variant selectors that is prevent in the button's host\n    // attributes, add the correct corresponding class.\n    for (const attr of BUTTON_HOST_ATTRIBUTES) {\n      if (this._hasHostAttributes(attr)) {\n        (elementRef.nativeElement as HTMLElement).classList.add(attr);\n      }\n    }\n\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n\n    if (this.isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    } else if (this._hasHostAttributes('mat-flat-button')) {\n      this.color = DEFAULT_FLAT_BUTTON_COLOR;\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Raised Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n\n  constructor(\n    platform: Platform,\n    focusMonitor: FocusMonitor,\n    elementRef: ElementRef,\n    // @deletion-target 7.0.0 `animationMode` parameter to be made required.\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n    super(elementRef, platform, focusMonitor, animationMode);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatAnchor, MatButton} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {SelectionModel} from '@angular/cdk/collections';\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n// Boilerplate for applying mixins to MatButtonToggleGroup and MatButtonToggleGroupMultiple\n/** @docs-private */\nexport class MatButtonToggleGroupBase {}\nexport const _MatButtonToggleGroupMixinBase = mixinDisabled(MatButtonToggleGroupBase);\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\n/**\n * @deprecated Use `MatButtonToggleGroup` instead.\n * @deletion-target 7.0.0\n */\nexport class MatButtonToggleGroupMultiple {}\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  constructor(\n    /** The MatButtonToggle that emits the event. */\n    public source: MatButtonToggle,\n\n    /** The value assigned to the MatButtonToggle. */\n    public value: any) {}\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group',\n  providers: [\n    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n    {provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup},\n  ],\n  inputs: ['disabled'],\n  host: {\n    'role': 'group',\n    'class': 'mat-button-toggle-group',\n    '[class.mat-button-toggle-vertical]': 'vertical'\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup extends _MatButtonToggleGroupMixinBase implements\n  ControlValueAccessor, CanDisable, OnInit, AfterContentInit {\n\n  private _vertical = false;\n  private _multiple = false;\n  private _selectionModel: SelectionModel<MatButtonToggle>;\n\n  /**\n   * Reference to the raw value that the consumer tried to assign. The real\n   * value will exaclude any values from this one that don't correspond to a\n   * toggle. Useful for the cases where the value is assigned before the toggles\n   * have been initialized or at the same that they're being swapped out.\n   */\n  private _rawValue: any;\n\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle.name = this._name);\n    }\n  }\n  private _name = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any {\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\n\n    if (this.multiple) {\n      return selected.map(toggle => toggle.value);\n    }\n\n    return selected[0] ? selected[0].value : undefined;\n  }\n  set value(newValue: any) {\n    this._setSelectionByValue(newValue);\n    this.valueChange.emit(this.value);\n  }\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() readonly valueChange = new EventEmitter<any>();\n\n  /** Selected button toggles in the group. */\n  get selected() {\n    const selected = this._selectionModel.selected;\n    return this.multiple ? selected : (selected[0] || null);\n  }\n\n  /** Whether multiple button toggles can be selected. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Event emitted when the group's value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatButtonToggle>(this.multiple, undefined, false);\n  }\n\n  ngAfterContentInit() {\n    this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle._markForCheck());\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    const selected = this.selected;\n    const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n    const event = new MatButtonToggleChange(source!, this.value);\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  /**\n   * Syncs a button toggle's selected state with the model value.\n   * @param toggle Toggle to be synced.\n   * @param select Whether the toggle should be selected.\n   * @param isUserInput Whether the change was a result of a user interaction.\n   */\n  _syncButtonToggle(toggle: MatButtonToggle, select: boolean, isUserInput = false) {\n    // Deselect the currently-selected toggle, if we're in single-selection\n    // mode and the button being toggled isn't selected at the moment.\n    if (!this.multiple && this.selected && !toggle.checked) {\n      (this.selected as MatButtonToggle).checked = false;\n    }\n\n    if (select) {\n      this._selectionModel.select(toggle);\n    } else {\n      this._selectionModel.deselect(toggle);\n    }\n\n    // Only emit the change event for user input.\n    if (isUserInput) {\n      this._emitChangeEvent();\n    }\n\n    // Note: we emit this one no matter whether it was a user interaction, because\n    // it is used by Angular to sync up the two-way data binding.\n    this.valueChange.emit(this.value);\n  }\n\n  /** Checks whether a button toggle is selected. */\n  _isSelected(toggle: MatButtonToggle) {\n    return this._selectionModel.isSelected(toggle);\n  }\n\n  /** Determines whether a button toggle should be checked on init. */\n  _isPrechecked(toggle: MatButtonToggle) {\n    if (typeof this._rawValue === 'undefined') {\n      return false;\n    }\n\n    if (this.multiple && Array.isArray(this._rawValue)) {\n      return this._rawValue.some(value => toggle.value != null && value === toggle.value);\n    }\n\n    return toggle.value === this._rawValue;\n  }\n\n  /** Updates the selection state of the toggles in the group based on a value. */\n  private _setSelectionByValue(value: any|any[]) {\n    this._rawValue = value;\n\n    if (!this._buttonToggles) {\n      return;\n    }\n\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw Error('Value must be an array in multiple-selection mode.');\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n    } else {\n      this._clearSelection();\n      this._selectValue(value);\n    }\n  }\n\n  /** Clears the selected toggles. */\n  private _clearSelection() {\n    this._selectionModel.clear();\n    this._buttonToggles.forEach(toggle => toggle.checked = false);\n  }\n\n  /** Selects a value if there's a toggle that corresponds to it. */\n  private _selectValue(value: any) {\n    const correspondingOption = this._buttonToggles.find(toggle => {\n      return toggle.value != null && toggle.value === value;\n    });\n\n    if (correspondingOption) {\n      correspondingOption.checked = true;\n      this._selectionModel.select(correspondingOption);\n    }\n  }\n}\n\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nexport class MatButtonToggleBase {}\nexport const _MatButtonToggleMixinBase = mixinDisableRipple(MatButtonToggleBase);\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disableRipple'],\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    'class': 'mat-button-toggle',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatButtonToggle extends _MatButtonToggleMixinBase implements OnInit,\n  CanDisableRipple, OnDestroy {\n\n  private _isSingleSelector = false;\n  private _checked = false;\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  @ViewChild('button') _buttonElement: ElementRef<HTMLButtonElement>;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** Unique ID for the underlying `button` element. */\n  get buttonId(): string { return `${this.id}-button`; }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input() value: any;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean {\n    return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n  }\n  set checked(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._checked) {\n      this._checked = newValue;\n\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n      }\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n  }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Event emitted when the group value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _elementRef: ElementRef<HTMLElement>,\n              private _focusMonitor: FocusMonitor) {\n    super();\n\n    this.buttonToggleGroup = toggleGroup;\n  }\n\n  ngOnInit() {\n    this._isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n    this._type = this._isSingleSelector ? 'radio' : 'checkbox';\n    this.id = this.id || `mat-button-toggle-${_uniqueIdCounter++}`;\n\n    if (this._isSingleSelector) {\n      this.name = this.buttonToggleGroup.name;\n    }\n\n    if (this.buttonToggleGroup && this.buttonToggleGroup._isPrechecked(this)) {\n      this.checked = true;\n    }\n\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._buttonElement.nativeElement.focus();\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native button. */\n  _onButtonClick(event: Event) {\n    event.stopPropagation();\n\n    const newChecked = this._isSingleSelector ? true : !this._checked;\n\n    if (newChecked !== this._checked) {\n      this._checked = newChecked;\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n        this.buttonToggleGroup._onTouched();\n      }\n    }\n    // Emit a change event when it's the single selector\n    this.change.emit(new MatButtonToggleChange(this, this.value));\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When the group value changes, the button will not be notified.\n    // Use `markForCheck` to explicit update button toggle's status.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatButtonToggle, MatButtonToggleGroup} from './button-toggle';\n\n\n@NgModule({\n  imports: [MatCommonModule, MatRippleModule],\n  exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n  declarations: [MatButtonToggleGroup, MatButtonToggle],\n})\nexport class MatButtonToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n} from '@angular/core';\n\n\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-content',\n  host: {'class': 'mat-card-content'}\n})\nexport class MatCardContent {}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n})\nexport class MatCardTitle {}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n})\nexport class MatCardSubtitle {}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-actions',\n  exportAs: 'matCardActions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n})\nexport class MatCardActions {\n  /** Position of the actions inside the card. */\n  @Input() align: 'start' | 'end' = 'start';\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n})\nexport class MatCardFooter {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-image], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n})\nexport class MatCardImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n})\nexport class MatCardSmImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-md-image], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n})\nexport class MatCardMdImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n})\nexport class MatCardLgImage {}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n})\nexport class MatCardXlImage {}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-avatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n})\nexport class MatCardAvatar {}\n\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card',\n  exportAs: 'matCard',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card'}\n})\nexport class MatCard {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n})\nexport class MatCardHeader {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n})\nexport class MatCardTitleGroup {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatCard,\n  MatCardActions,\n  MatCardAvatar,\n  MatCardContent,\n  MatCardFooter,\n  MatCardHeader,\n  MatCardImage,\n  MatCardLgImage,\n  MatCardMdImage,\n  MatCardSmImage,\n  MatCardSubtitle,\n  MatCardTitle,\n  MatCardTitleGroup,\n  MatCardXlImage,\n} from './card';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatCard,\n    MatCardHeader,\n    MatCardTitleGroup,\n    MatCardContent,\n    MatCardTitle,\n    MatCardSubtitle,\n    MatCardActions,\n    MatCardFooter,\n    MatCardSmImage,\n    MatCardMdImage,\n    MatCardLgImage,\n    MatCardImage,\n    MatCardXlImage,\n    MatCardAvatar,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n    MatCardXlImage, MatCardAvatar,\n  ],\n})\nexport class MatCardModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  ElementRef,\n  Input,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n  EventEmitter,\n  Output,\n  InjectionToken,\n  Inject,\n} from '@angular/core';\nimport {\n  MatOption,\n  MatOptgroup,\n  MAT_OPTION_PARENT_COMPONENT,\n  mixinDisableRipple,\n  CanDisableRipple,\n} from '@angular/material/core';\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected. */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nexport class MatAutocompleteBase {}\nexport const _MatAutocompleteMixinBase = mixinDisableRipple(MatAutocompleteBase);\n\n/** Default `mat-autocomplete` options that can be overridden. */\nexport interface MatAutocompleteDefaultOptions {\n  /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n  autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nexport const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<MatAutocompleteDefaultOptions>('mat-autocomplete-default-options', {\n      providedIn: 'root',\n      factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY(): MatAutocompleteDefaultOptions {\n  return {autoActiveFirstOption: false};\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel: boolean = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean { return this._isOpen && this.showPanel; }\n  _isOpen: boolean = false;\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /**\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n   */\n  @Input()\n  get autoActiveFirstOption(): boolean { return this._autoActiveFirstOption; }\n  set autoActiveFirstOption(value: boolean) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  private _autoActiveFirstOption: boolean;\n\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /** Event that is emitted when the autocomplete panel is opened. */\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event that is emitted when the autocomplete panel is closed. */\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(value: string) {\n    if (value && value.length) {\n      value.split(' ').forEach(className => this._classList[className.trim()] = true);\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef,\n    @Inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS) defaults: MatAutocompleteDefaultOptions) {\n    super();\n\n    this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibility state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._classList['mat-autocomplete-visible'] = this.showPanel;\n    this._classList['mat-autocomplete-hidden'] = !this.showPanel;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\n\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\n@Directive({\n  selector: '[matAutocompleteOrigin]',\n  exportAs: 'matAutocompleteOrigin',\n})\nexport class MatAutocompleteOrigin {\n  constructor(\n      /** Reference to the element on which the directive is applied. */\n      public elementRef: ElementRef<HTMLElement>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './autocomplete-trigger';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [\n    MatAutocomplete,\n    MatOptionModule,\n    MatAutocompleteTrigger,\n    MatAutocompleteOrigin,\n    MatCommonModule\n  ],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n})\nexport class MatAutocompleteModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AriaDescriber} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOCUMENT} from '@angular/common';\nimport {Directive, ElementRef, Inject, Input, NgZone, OnDestroy, Optional} from '@angular/core';\nimport {ThemePalette} from '@angular/material/core';\n\n\nlet nextId = 0;\n\nexport type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after';\nexport type MatBadgeSize = 'small' | 'medium' | 'large';\n\n/** Directive to display a text badge. */\n@Directive({\n  selector: '[matBadge]',\n  host: {\n    'class': 'mat-badge',\n    '[class.mat-badge-overlap]': 'overlap',\n    '[class.mat-badge-above]': 'isAbove()',\n    '[class.mat-badge-below]': '!isAbove()',\n    '[class.mat-badge-before]': '!isAfter()',\n    '[class.mat-badge-after]': 'isAfter()',\n    '[class.mat-badge-small]': 'size === \"small\"',\n    '[class.mat-badge-medium]': 'size === \"medium\"',\n    '[class.mat-badge-large]': 'size === \"large\"',\n    '[class.mat-badge-hidden]': 'hidden',\n  },\n})\nexport class MatBadge implements OnDestroy {\n\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n  @Input('matBadgeColor')\n  get color(): ThemePalette { return this._color; }\n  set color(value: ThemePalette) {\n    this._setColor(value);\n    this._color = value;\n  }\n  private _color: ThemePalette = 'primary';\n\n  /** Whether the badge should overlap its contents or not */\n  @Input('matBadgeOverlap')\n  get overlap(): boolean { return this._overlap; }\n  set overlap(val: boolean) {\n    this._overlap = coerceBooleanProperty(val);\n  }\n  private _overlap: boolean = true;\n\n  /**\n   * Position the badge should reside.\n   * Accepts any combination of 'above'|'below' and 'before'|'after'\n   */\n  @Input('matBadgePosition') position: MatBadgePosition = 'above after';\n\n  /** The content for the badge */\n  @Input('matBadge')\n  get content(): string { return this._content; }\n  set content(val: string) {\n    this._content = val;\n    this._updateTextContent();\n  }\n  private _content: string;\n\n  /** Message used to describe the decorated element via aria-describedby */\n  @Input('matBadgeDescription')\n  get description(): string { return this._description; }\n  set description(newDescription: string) {\n    if (newDescription !== this._description) {\n      this._updateHostAriaDescription(newDescription, this._description);\n      this._description = newDescription;\n    }\n  }\n  private _description: string;\n\n  /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n  @Input('matBadgeSize') size: MatBadgeSize = 'medium';\n\n  /** Whether the badge is hidden. */\n  @Input('matBadgeHidden')\n  get hidden(): boolean { return this._hidden; }\n  set hidden(val: boolean) {\n    this._hidden = coerceBooleanProperty(val);\n  }\n  private _hidden: boolean;\n\n  /** Unique id for the badge */\n  _id: number = nextId++;\n\n  private _badgeElement: HTMLElement;\n\n  constructor(\n      @Optional() @Inject(DOCUMENT) private _document: any,\n      private _ngZone: NgZone,\n      private _elementRef: ElementRef,\n      private _ariaDescriber: AriaDescriber) {}\n\n  /** Whether the badge is above the host or not */\n  isAbove(): boolean {\n    return this.position.indexOf('below') === -1;\n  }\n\n  /** Whether the badge is after the host or not */\n  isAfter(): boolean {\n    return this.position.indexOf('before') === -1;\n  }\n\n  ngOnDestroy() {\n    if (this.description && this._badgeElement) {\n      this._ariaDescriber.removeDescription(this._badgeElement, this.description);\n    }\n  }\n\n  /** Injects a span element into the DOM with the content. */\n  private _updateTextContent(): HTMLSpanElement {\n    if (!this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n    } else {\n      this._badgeElement.textContent = this.content;\n    }\n    return this._badgeElement;\n  }\n\n  /** Creates the badge element */\n  private _createBadgeElement(): HTMLElement {\n    const badgeElement = this._document.createElement('span');\n    const activeClass = 'mat-badge-active';\n\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n    badgeElement.classList.add('mat-badge-content');\n    badgeElement.textContent = this.content;\n\n    if (this.description) {\n      badgeElement.setAttribute('aria-label', this.description);\n    }\n\n    this._elementRef.nativeElement.appendChild(badgeElement);\n\n    // animate in after insertion\n    if (typeof requestAnimationFrame === 'function') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          badgeElement.classList.add(activeClass);\n        });\n      });\n    } else {\n      badgeElement.classList.add(activeClass);\n    }\n\n    return badgeElement;\n  }\n\n  /** Sets the aria-label property on the element */\n  private _updateHostAriaDescription(newDescription: string, oldDescription: string): void {\n    // ensure content available before setting label\n    const content = this._updateTextContent();\n\n    if (oldDescription) {\n      this._ariaDescriber.removeDescription(content, oldDescription);\n    }\n\n    if (newDescription) {\n      this._ariaDescriber.describe(content, newDescription);\n    }\n  }\n\n  /** Adds css theme class given the color to the component host */\n  private _setColor(colorPalette: ThemePalette) {\n    if (colorPalette !== this._color) {\n      if (this._color) {\n        this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\n      }\n      if (colorPalette) {\n        this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatBadge} from './badge';\n\n\n@NgModule({\n  imports: [\n    A11yModule,\n    MatCommonModule\n  ],\n  exports: [MatBadge],\n  declarations: [MatBadge],\n})\nexport class MatBadgeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a bottom sheet. */\nexport const MAT_BOTTOM_SHEET_DATA = new InjectionToken<any>('MatBottomSheetData');\n\n/**\n * Configuration used when opening a bottom sheet.\n */\nexport class MatBottomSheetConfig<D = any> {\n  /** The view container to place the overlay for the bottom sheet into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** Extra CSS classes to be added to the bottom sheet container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the bottom sheet. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Whether the bottom sheet has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop. */\n  backdropClass?: string;\n\n  /** Whether the user can use escape or clicking outside to close the bottom sheet. */\n  disableClose?: boolean = false;\n\n  /** Aria label to assign to the bottom sheet element. */\n  ariaLabel?: string | null = null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material bottom sheet. */\nexport const matBottomSheetAnimations: {\n  readonly bottomSheetState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a bottom sheet. */\n  bottomSheetState: trigger('state', [\n    state('void, hidden', style({transform: 'translateY(100%)'})),\n    state('visible', style({transform: 'translateY(0%)'})),\n    transition('visible => void, visible => hidden',\n        animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible',\n        animate(`${AnimationDurations.EXITING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  EventEmitter,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {MatBottomSheetConfig} from './bottom-sheet-config';\nimport {matBottomSheetAnimations} from './bottom-sheet-animations';\nimport {Subscription} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\n\n// TODO(crisbeto): consolidate some logic between this, MatDialog and MatSnackBar\n\n/**\n * Internal component that wraps user-provided bottom sheet content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-bottom-sheet-container',\n  templateUrl: 'bottom-sheet-container.html',\n  styleUrls: ['bottom-sheet-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matBottomSheetAnimations.bottomSheetState],\n  host: {\n    'class': 'mat-bottom-sheet-container',\n    'tabindex': '-1',\n    'role': 'dialog',\n    'aria-modal': 'true',\n    '[attr.aria-label]': 'bottomSheetConfig?.ariaLabel',\n    '[@state]': '_animationState',\n    '(@state.start)': '_onAnimationStart($event)',\n    '(@state.done)': '_onAnimationDone($event)'\n  },\n})\nexport class MatBottomSheetContainer extends BasePortalOutlet implements OnDestroy {\n  private _breakpointSubscription: Subscription;\n\n  /** The portal outlet inside of this container into which the content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The state of the bottom sheet animations. */\n  _animationState: 'void' | 'visible' | 'hidden' = 'void';\n\n  /** Emits whenever the state of the animation changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** The class that traps and manages focus within the bottom sheet. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the bottom sheet was opened. */\n  private _elementFocusedBeforeOpened: HTMLElement | null = null;\n\n  /** Server-side rendering-compatible reference to the global document object. */\n  private _document: Document;\n\n  /** Whether the component has been destroyed. */\n  private _destroyed: boolean;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    breakpointObserver: BreakpointObserver,\n    @Optional() @Inject(DOCUMENT) document: any,\n    /** The bottom sheet configuration. */\n    public bottomSheetConfig: MatBottomSheetConfig) {\n    super();\n\n    this._document = document;\n    this._breakpointSubscription = breakpointObserver\n      .observe([Breakpoints.Medium, Breakpoints.Large, Breakpoints.XLarge])\n      .subscribe(() => {\n        this._toggleClass('mat-bottom-sheet-container-medium',\n            breakpointObserver.isMatched(Breakpoints.Medium));\n        this._toggleClass('mat-bottom-sheet-container-large',\n            breakpointObserver.isMatched(Breakpoints.Large));\n        this._toggleClass('mat-bottom-sheet-container-xlarge',\n            breakpointObserver.isMatched(Breakpoints.XLarge));\n      });\n  }\n\n  /** Attach a component portal as content to this bottom sheet container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this bottom sheet container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Begin animation of bottom sheet entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the bottom sheet exiting from view. */\n  exit(): void {\n    if (!this._destroyed) {\n      this._animationState = 'hidden';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._breakpointSubscription.unsubscribe();\n    this._destroyed = true;\n  }\n\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'visible') {\n      this._trapFocus();\n    } else if (event.toState === 'hidden') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  private _toggleClass(cssClass: string, add: boolean) {\n    const classList = this._elementRef.nativeElement.classList;\n    add ? classList.add(cssClass) : classList.remove(cssClass);\n  }\n\n  private _validatePortalAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach bottom sheet content after content is already attached');\n    }\n  }\n\n  private _setPanelClass() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClass = this.bottomSheetConfig.panelClass;\n\n    if (Array.isArray(panelClass)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      panelClass.forEach(cssClass => element.classList.add(cssClass));\n    } else if (panelClass) {\n      element.classList.add(panelClass);\n    }\n  }\n\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    this._focusTrap.focusInitialElementWhenReady();\n  }\n\n  /** Restores focus to the element that was focused before the bottom sheet opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the bottom sheet was opened. */\n  private _savePreviouslyFocusedElement() {\n    this._elementFocusedBeforeOpened = this._document.activeElement as HTMLElement;\n\n    // The `focus` method isn't available during server-side rendering.\n    if (this._elementRef.nativeElement.focus) {\n      Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PortalModule,\n  ],\n  exports: [MatBottomSheetContainer, MatCommonModule],\n  declarations: [MatBottomSheetContainer],\n  entryComponents: [MatBottomSheetContainer],\n})\nexport class MatBottomSheetModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {merge, Observable, Subject} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n/**\n * Reference to a bottom sheet dispatched from the bottom sheet service.\n */\nexport class MatBottomSheetRef<T = any, R = any> {\n  /** Instance of the component making up the content of the bottom sheet. */\n  instance: T;\n\n  /**\n   * Instance of the component into which the bottom sheet content is projected.\n   * @docs-private\n   */\n  containerInstance: MatBottomSheetContainer;\n\n  /** Subject for notifying the user that the bottom sheet has been dismissed. */\n  private readonly _afterDismissed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the bottom sheet has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Result to be passed down to the `afterDismissed` stream. */\n  private _result: R | undefined;\n\n  constructor(containerInstance: MatBottomSheetContainer, private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n\n    // Emit when opening animation completes\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'visible'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'hidden'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._overlayRef.dispose();\n      this._afterDismissed.next(this._result);\n      this._afterDismissed.complete();\n    });\n\n    if (!containerInstance.bottomSheetConfig.disableClose) {\n      merge(\n        _overlayRef.backdropClick(),\n        _overlayRef._keydownEvents.pipe(filter(event => event.keyCode === ESCAPE))\n      ).subscribe(() => this.dismiss());\n    }\n  }\n\n  /**\n   * Dismisses the bottom sheet.\n   * @param result Data to be passed back to the bottom sheet opener.\n   */\n  dismiss(result?: R): void {\n    if (!this._afterDismissed.closed) {\n      // Transition the backdrop in parallel to the bottom sheet.\n      this.containerInstance._animationStateChanged.pipe(\n        filter(event => event.phaseName === 'start'),\n        take(1)\n      ).subscribe(() => this._overlayRef.detachBackdrop());\n\n      this._result = result;\n      this.containerInstance.exit();\n    }\n  }\n\n  /** Gets an observable that is notified when the bottom sheet is finished closing. */\n  afterDismissed(): Observable<R | undefined> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the bottom sheet has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {ComponentRef, Injectable, Injector, Optional, SkipSelf, TemplateRef} from '@angular/core';\nimport {of as observableOf} from 'rxjs';\nimport {MAT_BOTTOM_SHEET_DATA, MatBottomSheetConfig} from './bottom-sheet-config';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\nimport {MatBottomSheetModule} from './bottom-sheet-module';\nimport {MatBottomSheetRef} from './bottom-sheet-ref';\n\n\n/**\n * Service to trigger Material Design bottom sheets.\n */\n@Injectable({providedIn: MatBottomSheetModule})\nexport class MatBottomSheet {\n  private _bottomSheetRefAtThisLevel: MatBottomSheetRef<any> | null = null;\n\n  /** Reference to the currently opened bottom sheet. */\n  get _openedBottomSheetRef(): MatBottomSheetRef<any> | null {\n    const parent = this._parentBottomSheet;\n    return parent ? parent._openedBottomSheetRef : this._bottomSheetRefAtThisLevel;\n  }\n\n  set _openedBottomSheetRef(value: MatBottomSheetRef<any> | null) {\n    if (this._parentBottomSheet) {\n      this._parentBottomSheet._openedBottomSheetRef = value;\n    } else {\n      this._bottomSheetRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() @SkipSelf() private _parentBottomSheet: MatBottomSheet) {}\n\n  open<T, D = any, R = any>(component: ComponentType<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n  open<T, D = any, R = any>(template: TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R> {\n\n    const _config = _applyConfigDefaults(config);\n    const overlayRef = this._createOverlay(_config);\n    const container = this._attachContainer(overlayRef, _config);\n    const ref = new MatBottomSheetRef<T, R>(container, overlayRef);\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      container.attachTemplatePortal(new TemplatePortal<T>(componentOrTemplateRef, null!, {\n        $implicit: _config.data,\n        bottomSheetRef: ref\n      } as any));\n    } else {\n      const portal = new ComponentPortal(componentOrTemplateRef, undefined,\n            this._createInjector(_config, ref));\n      const contentRef = container.attachComponentPortal(portal);\n      ref.instance = contentRef.instance;\n    }\n\n    // When the bottom sheet is dismissed, clear the reference to it.\n    ref.afterDismissed().subscribe(() => {\n      // Clear the bottom sheet ref if it hasn't already been replaced by a newer one.\n      if (this._openedBottomSheetRef == ref) {\n        this._openedBottomSheetRef = null;\n      }\n    });\n\n    if (this._openedBottomSheetRef) {\n      // If a bottom sheet is already in view, dismiss it and enter the\n      // new bottom sheet after exit animation is complete.\n      this._openedBottomSheetRef.afterDismissed().subscribe(() => ref.containerInstance.enter());\n      this._openedBottomSheetRef.dismiss();\n    } else {\n      // If no bottom sheet is in view, enter the new bottom sheet.\n      ref.containerInstance.enter();\n    }\n\n    this._openedBottomSheetRef = ref;\n\n    return ref;\n  }\n\n  /**\n   * Dismisses the currently-visible bottom sheet.\n   */\n  dismiss(): void {\n    if (this._openedBottomSheetRef) {\n      this._openedBottomSheetRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the bottom sheet container component to the overlay.\n   */\n  private _attachContainer(overlayRef: OverlayRef,\n                           config: MatBottomSheetConfig): MatBottomSheetContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatBottomSheetConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatBottomSheetContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatBottomSheetContainer> = overlayRef.attach(containerPortal);\n    return containerRef.instance;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified bottom sheet config.\n   */\n  private _createOverlay(config: MatBottomSheetConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig({\n      direction: config.direction,\n      hasBackdrop: config.hasBackdrop,\n      maxWidth: '100%',\n      scrollStrategy: this._overlay.scrollStrategies.block(),\n      positionStrategy: this._overlay.position()\n        .global()\n        .centerHorizontally()\n        .bottom('0')\n    });\n\n    if (config.backdropClass) {\n      overlayConfig.backdropClass = config.backdropClass;\n    }\n\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a bottom sheet component.\n   * @param config Config that was used to create the bottom sheet.\n   * @param bottomSheetRef Reference to the bottom sheet.\n   */\n  private _createInjector<T>(config: MatBottomSheetConfig,\n                             bottomSheetRef: MatBottomSheetRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap<any, any>([\n      [MatBottomSheetRef, bottomSheetRef],\n      [MAT_BOTTOM_SHEET_DATA, config.data]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the bottom sheet config.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(config?: MatBottomSheetConfig): MatBottomSheetConfig {\n  return {...new MatBottomSheetConfig(), ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {MatOptgroup} from './optgroup';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT =\n    new InjectionToken<MatOptionParentComponent>('MAT_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  styleUrls: ['option.css'],\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption implements AfterViewChecked, OnDestroy {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _id = `mat-option-${_uniqueIdCounter++}`;\n  private _mostRecentViewValue = '';\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() { return this._parent && this._parent.multiple; }\n\n  /** The unique ID of the option. */\n  get id(): string { return this._id; }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple() { return this._parent && this._parent.disableRipple; }\n\n  /** Event emitted when the option is selected or deselected. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n\n  /** Emits when the state of the option changes and any parents have to be notified. */\n  readonly _stateChanges = new Subject<void>();\n\n  constructor(\n    private _element: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() readonly group: MatOptgroup) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Sets focus onto this option. */\n  focus(): void {\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * `Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.`\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  ngAfterViewChecked() {\n    // Since parent components could be using the option's label to display the selected values\n    // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n    // relatively cheap, however we still limit them only to selected options in order to avoid\n    // hitting the DOM too often.\n    if (this._selected) {\n      const viewValue = this.viewValue;\n\n      if (viewValue !== this._mostRecentViewValue) {\n        this._mostRecentViewValue = viewValue;\n        this._stateChanges.next();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function _countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n  optionGroups: QueryList<MatOptgroup>): number {\n\n  if (optionGroups.length) {\n    let optionsArray = options.toArray();\n    let groups = optionGroups.toArray();\n    let groupCounter = 0;\n\n    for (let i = 0; i < optionIndex + 1; i++) {\n      if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n        groupCounter++;\n      }\n    }\n\n    return groupCounter;\n  }\n\n  return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function _getOptionScrollPosition(optionIndex: number, optionHeight: number,\n    currentScrollPosition: number, panelHeight: number): number {\n  const optionOffset = optionIndex * optionHeight;\n\n  if (optionOffset < currentScrollPosition) {\n    return optionOffset;\n  }\n\n  if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n    return Math.max(0, optionOffset - panelHeight + optionHeight);\n  }\n\n  return currentScrollPosition;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n\n@NgModule({\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup]\n})\nexport class MatOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MAT_LABEL_GLOBAL_OPTIONS =\n  new InjectionToken<LabelOptions>('mat-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n  /**\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n   * Default behavior is assumed to be `auto`.\n   */\n  float?: FloatLabelType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the MatFormField. */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /**\n   * Whether the input is currently in an autofilled state. If property is not present on the\n   * control it is assumed to be false.\n   */\n  readonly autofilled?: boolean;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/**\n * The placeholder text for an `MatFormField`.\n * @deprecated Use `<mat-label>` to specify the label and the `placeholder` attribute to specify the\n *     placeholder.\n * @deletion-target 8.0.0\n */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed the the front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  FloatLabelType,\n  LabelOptions,\n  MAT_LABEL_GLOBAL_OPTIONS,\n  mixinColor,\n} from '@angular/material/core';\nimport {EMPTY, fromEvent, merge} from 'rxjs';\nimport {startWith, take} from 'rxjs/operators';\nimport {MatError} from './error';\nimport {matFormFieldAnimations} from './form-field-animations';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {Platform} from '@angular/cdk/platform';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nlet nextUniqueId = 0;\nconst floatingLabelScale = 0.75;\nconst outlineGapPadding = 5;\n\n\n/**\n * Boilerplate for applying mixins to MatFormField.\n * @docs-private\n */\nexport class MatFormFieldBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/**\n * Base class to which we're applying the form field mixins.\n * @docs-private\n */\nexport const _MatFormFieldMixinBase = mixinColor(MatFormFieldBase, 'primary');\n\n/** Possible appearance styles for the form field. */\nexport type MatFormFieldAppearance = 'legacy' | 'standard' | 'fill' | 'outline';\n\n/**\n * Represents the default options form the form field that can be configured\n * using the `MAT_FORM_FIELD_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatFormFieldDefaultOptions {\n  appearance?: MatFormFieldAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all form field within an app.\n */\nexport const MAT_FORM_FIELD_DEFAULT_OPTIONS =\n    new InjectionToken<MatFormFieldDefaultOptions>('MAT_FORM_FIELD_DEFAULT_OPTIONS');\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here.\n  // The MatInput styles are fairly minimal so it shouldn't be a big deal for people who\n  // aren't using MatInput.\n  styleUrls: [\n    'form-field.css',\n    'form-field-fill.css',\n    'form-field-legacy.css',\n    'form-field-outline.css',\n    'form-field-standard.css',\n    '../input/input.css',\n  ],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-form-field',\n    '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n    '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n    '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n    '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-form-field-autofilled]': '_control.autofilled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n    '[class._mat-animation-noopable]': '!_animationsEnabled',\n  },\n  inputs: ['color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField extends _MatFormFieldMixinBase\n    implements AfterContentInit, AfterContentChecked, AfterViewInit, CanColor {\n  private _labelOptions: LabelOptions;\n\n  /** The form-field appearance style. */\n  @Input()\n  get appearance(): MatFormFieldAppearance {\n    return this._appearance || this._defaultOptions && this._defaultOptions.appearance || 'legacy';\n  }\n  set appearance(value: MatFormFieldAppearance) {\n    this._appearance = value;\n  }\n  _appearance: MatFormFieldAppearance;\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker(): boolean { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: boolean) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat(): boolean {\n    return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat(): boolean { return this.floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel(): string { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  // Unique id for the internal form field label.\n  _labelId = `mat-form-field-label-${nextUniqueId++}`;\n\n  /**\n   * Whether the label should always float, never float or float as the user types.\n   *\n   * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n   * way to make the floating label emulate the behavior of a standard input placeholder. However\n   * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n   * appearances the `never` option has been disabled in favor of just using the placeholder.\n   */\n  @Input()\n  get floatLabel(): FloatLabelType {\n    return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n  }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  /** Whether the Angular animations are enabled. */\n  _animationsEnabled: boolean;\n\n  _outlineGapWidth = 0;\n  _outlineGapStart = 0;\n  _initialGapCalculated = false;\n\n  /**\n   * @deprecated\n   * @deletion-target 7.0.0\n   */\n  @ViewChild('underline') underlineRef: ElementRef;\n\n  @ViewChild('connectionContainer') _connectionContainerRef: ElementRef;\n  @ViewChild('inputContainer') _inputContainerRef: ElementRef;\n  @ViewChild('label') private _label: ElementRef;\n  @ContentChild(MatFormFieldControl) _control: MatFormFieldControl<any>;\n  @ContentChild(MatPlaceholder) _placeholderChild: MatPlaceholder;\n  @ContentChild(MatLabel) _labelChild: MatLabel;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions,\n      @Optional() private _dir: Directionality,\n      @Optional() @Inject(MAT_FORM_FIELD_DEFAULT_OPTIONS) private _defaultOptions:\n          MatFormFieldDefaultOptions,\n      // @deletion-target 7.0.0 _platform, _ngZone and _animationMode to be made required.\n      private _platform?: Platform,\n      private _ngZone?: NgZone,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) _animationMode?: string) {\n    super(_elementRef);\n\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n    this._animationsEnabled = _animationMode !== 'NoopAnimations';\n  }\n\n  /**\n   * Gets an ElementRef for the element that a overlay attached to the form-field should be\n   * positioned relative to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._connectionContainerRef || this._elementRef;\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n    if (this._control.controlType) {\n      this._elementRef.nativeElement.classList\n          .add(`mat-form-field-type-${this._control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    this._control.stateChanges.pipe(startWith(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Run change detection if the value, prefix, or suffix changes.\n    const valueChanges = this._control.ngControl && this._control.ngControl.valueChanges || EMPTY;\n    merge(valueChanges, this._prefixChildren.changes, this._suffixChildren.changes)\n        .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n\n    if (!this._initialGapCalculated) {\n      // @deletion-target 7.0.0 Remove this check and else block once _ngZone is required.\n      if (this._ngZone) {\n        // It's important that we run this outside the `_ngZone`, because the `Promise.resolve`\n        // can kick us into an infinite change detection loop, if the `_initialGapCalculated`\n        // wasn't flipped on for some reason.\n        this._ngZone.runOutsideAngular(() => {\n          Promise.resolve().then(() => this.updateOutlineGap());\n        });\n      } else {\n        Promise.resolve().then(() => this.updateOutlineGap());\n      }\n    }\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: string): boolean {\n    const ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && ngControl[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control && this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this.appearance === 'legacy' && !this._hasLabel() ||\n        this._hasLabel() && !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      // If animations are disabled, we shouldn't go in here,\n      // because the `transitionend` will never fire.\n      if (this._animationsEnabled) {\n        this._showAlwaysAnimate = true;\n\n        fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n          this._showAlwaysAnimate = false;\n        });\n      }\n\n      this.floatLabel = 'always';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align === 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align === 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        let startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        let endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n\n  /**\n   * Updates the width and position of the gap in the outline. Only relevant for the outline\n   * appearance.\n   */\n  updateOutlineGap() {\n    if (this.appearance === 'outline' && this._label && this._label.nativeElement.children.length) {\n      if (this._platform && !this._platform.isBrowser) {\n        // getBoundingClientRect isn't available on the server.\n        this._initialGapCalculated = true;\n        return;\n      }\n      if (!document.documentElement.contains(this._elementRef.nativeElement)) {\n        return;\n      }\n\n      const containerStart = this._getStartEnd(\n          this._connectionContainerRef.nativeElement.getBoundingClientRect());\n      const labelStart = this._getStartEnd(\n          this._label.nativeElement.children[0].getBoundingClientRect());\n      let labelWidth = 0;\n      for (const child of this._label.nativeElement.children) {\n        labelWidth += child.offsetWidth;\n      }\n      this._outlineGapStart = labelStart - containerStart - outlineGapPadding;\n      this._outlineGapWidth = labelWidth * floatingLabelScale + outlineGapPadding * 2;\n    } else {\n      this._outlineGapStart = 0;\n      this._outlineGapWidth = 0;\n    }\n    this._initialGapCalculated = true;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Gets the start end of the rect considering the current directionality. */\n  private _getStartEnd(rect: ClientRect): number {\n    return this._dir && this._dir.value === 'rtl' ? rect.right : rect.left;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n  imports: [CommonModule],\n  exports: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n})\nexport class MatFormFieldModule {}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {BidiModule} from '@angular/cdk/bidi';\n\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks', {\n  providedIn: 'root',\n  factory: MATERIAL_SANITY_CHECKS_FACTORY,\n});\n\n/** @docs-private */\nexport function MATERIAL_SANITY_CHECKS_FACTORY(): boolean {\n  return true;\n}\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  /** Whether we've already checked for HammerJs availability. */\n  private _hasCheckedHammer = false;\n\n  /** Reference to the global `document` object. */\n  private _document = typeof document === 'object' && document ? document : null;\n\n  /** Reference to the global 'window' object. */\n  private _window = typeof window === 'object' && window ? window : null;\n\n  constructor(@Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecksEnabled: boolean) {\n    if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n      this._checkDoctypeIsDefined();\n      this._checkThemeIsPresent();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n\n  /** Whether any sanity checks are enabled */\n  private _areChecksEnabled(): boolean {\n    return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n  }\n\n  /** Whether the code is running in tests. */\n  private _isTestEnv() {\n    return this._window && (this._window['__karma__'] || this._window['jasmine']);\n  }\n\n  private _checkDoctypeIsDefined(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n\n  private _checkThemeIsPresent(): void {\n    if (this._document && typeof getComputedStyle === 'function') {\n      const testElement = this._document.createElement('div');\n\n      testElement.classList.add('mat-theme-loaded-marker');\n      this._document.body.appendChild(testElement);\n\n      const computedStyle = getComputedStyle(testElement);\n\n      // In some situations, the computed style of the test element can be null. For example in\n      // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n      // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n      if (computedStyle && computedStyle.display !== 'none') {\n        console.warn(\n          'Could not find Angular Material core theme. Most Material ' +\n          'components may not work as expected. For more info refer ' +\n          'to the theming guide: https://material.angular.io/guide/theming'\n        );\n      }\n\n      this._document.body.removeChild(testElement);\n    }\n  }\n\n  /** Checks whether HammerJS is available. */\n  _checkHammerIsAvailable(): void {\n    if (this._hasCheckedHammer || !this._window) {\n      return;\n    }\n\n    if (this._areChecksEnabled() && !this._window['Hammer']) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material components may not work correctly.');\n    }\n    this._hasCheckedHammer = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  /** Whether the component is disabled. */\n  disabled: boolean;\n}\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): Constructor<CanDisable> & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled() { return this._disabled; }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  /** Theme color palette for the component. */\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values. */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(base: T,\n    defaultColor?: ThemePalette): Constructor<CanColor> & T {\n  return class extends base {\n    private _color: ThemePalette;\n\n    get color(): ThemePalette { return this._color; }\n    set color(value: ThemePalette) {\n      const colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  /** Whether ripples are disabled. */\n  disableRipple: boolean;\n}\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T)\n    : Constructor<CanDisableRipple> & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n/** @docs-private */\nexport interface HasTabIndex {\n  /** Tabindex of the component. */\n  tabIndex: number;\n}\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : Constructor<HasTabIndex> & T {\n  return class extends base {\n    private _tabIndex: number = defaultTabIndex;\n\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs';\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  updateErrorState();\n  readonly stateChanges: Subject<void>;\n  errorState: boolean;\n  errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n  ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n: Constructor<CanUpdateErrorState> & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping\n     * `MatFormField` needs to run change detection.\n     */\n    readonly stateChanges = new Subject<void>();\n\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable, Subscriber} from 'rxjs';\nimport {Constructor} from './constructor';\n\n\n/**\n * Mixin that adds an initialized property to a directive which, when subscribed to, will emit a\n * value once markInitialized has been called, which should be done during the ngOnInit function.\n * If the subscription is made after it has already been marked as initialized, then it will trigger\n * an emit immediately.\n * @docs-private\n */\nexport interface HasInitialized {\n  /** Stream that emits once during the directive/component's ngOnInit. */\n  initialized: Observable<void>;\n\n  /**\n   * Sets the state as initialized and must be called during ngOnInit to notify subscribers that\n   * the directive has been initialized.\n   * @docs-private\n   */\n  _markInitialized: () => void;\n}\n\n/** Mixin to augment a directive with an initialized property that will emits when ngOnInit ends. */\nexport function mixinInitialized<T extends Constructor<{}>>(base: T):\n    Constructor<HasInitialized> & T {\n  return class extends base {\n    /** Whether this directive has been marked as initialized. */\n    _isInitialized = false;\n\n    /**\n     * List of subscribers that subscribed before the directive was initialized. Should be notified\n     * during _markInitialized. Set to null after pending subscribers are notified, and should\n     * not expect to be populated after.\n     */\n    _pendingSubscribers: Subscriber<void>[] | null = [];\n\n    /**\n     * Observable stream that emits when the directive initializes. If already initialized, the\n     * subscriber is stored to be notified once _markInitialized is called.\n     */\n    initialized = new Observable<void>(subscriber => {\n      // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify\n      // when _markInitialized is called.\n      if (this._isInitialized) {\n        this._notifySubscriber(subscriber);\n      } else {\n        this._pendingSubscribers!.push(subscriber);\n      }\n    });\n\n    constructor(...args: any[]) { super(...args); }\n\n    /**\n     * Marks the state as initialized and notifies pending subscribers. Should be called at the end\n     * of ngOnInit.\n     * @docs-private\n     */\n    _markInitialized(): void {\n      if (this._isInitialized) {\n        throw Error('This directive has already been marked as initialized and ' +\n            'should not be called twice.');\n      }\n\n      this._isInitialized = true;\n\n      this._pendingSubscribers!.forEach(this._notifySubscriber);\n      this._pendingSubscribers = null;\n    }\n\n    /** Emits and completes the subscriber stream (should only emit once). */\n    _notifySubscriber(subscriber: Subscriber<void>): void {\n      subscriber.next();\n      subscriber.complete();\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {inject, InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE', {\n  providedIn: 'root',\n  factory: MAT_DATE_LOCALE_FACTORY,\n});\n\n/** @docs-private */\nexport function MAT_DATE_LOCALE_FACTORY(): string {\n  return inject(LOCALE_ID);\n}\n\n/**\n * No longer needed since MAT_DATE_LOCALE has been changed to a scoped injectable.\n * If you are importing and providing this in your code you can simply remove it.\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges = new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n  private readonly _clampDate: boolean;\n\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   *\n   * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\n   * getting the string representation of a Date object from it's utc representation. We're keeping\n   * it here for sometime, just for precaution, in case we decide to revert some of these changes\n   * though.\n   */\n  useUtcForDisplay: boolean = true;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string, platform: Platform) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    this.useUtcForDisplay = !platform.TRIDENT;\n    this._clampDate = platform.TRIDENT || platform.EDGE;\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {month: style, timeZone: 'utc'});\n      return range(12, i =>\n          this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric', timeZone: 'utc'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {weekday: style, timeZone: 'utc'});\n      return range(7, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric', timeZone: 'utc'});\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    if (SUPPORTS_INTL_API) {\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n        date = this.clone(date);\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n      }\n\n      displayFormat = {...displayFormat, timeZone: 'utc'};\n\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    const result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n\n  /**\n   * When converting Date object to string, javascript built-in functions may return wrong\n   * results because it applies its internal DST rules. The DST rules around the world change\n   * very frequently, and the current valid rule is not always valid in previous years though.\n   * We work around this problem building a new Date object which has its internal UTC\n   * representation with the local date and time.\n   * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\n   *    timeZone set to 'utc' to work fine.\n   * @param date Date from which we want to get the string representation according to dtf\n   * @returns A Date object with its UTC representation based on the passed in date info\n   */\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\n    const d = new Date(Date.UTC(\n        date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n        date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n    return dtf.format(d);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, supportsPassiveEventListeners} from '@angular/cdk/platform';\nimport {RippleRef, RippleState} from './ripple-ref';\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  persistent?: boolean;\n  animation?: RippleAnimationConfig;\n  terminateOnPointerUp?: boolean;\n  /**\n   * @deprecated Use the `animation` property instead.\n   * @deletion-target 7.0.0\n   */\n  speedFactor?: number;\n};\n\n/**\n * Interface that describes the configuration for the animation of a ripple.\n * There are two animation phases with different durations for the ripples.\n */\nexport interface RippleAnimationConfig {\n  /** Duration in milliseconds for the enter animation (expansion from point of contact). */\n  enterDuration?: number;\n  /** Duration in milliseconds for the exit animation (fade-out). */\n  exitDuration?: number;\n}\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nexport const defaultRippleAnimationConfig = {\n  enterDuration: 450,\n  exitDuration: 400\n};\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst ignoreMouseEventsTimeout = 800;\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer {\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /** Events to be registered on the trigger element. */\n  private _triggerEvents = new Map<string, any>();\n\n  /** Set of currently active ripple references. */\n  private _activeRipples = new Set<RippleRef>();\n\n  /** Latest non-persistent ripple that was triggered. */\n  private _mostRecentTransientRipple: RippleRef | null;\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /** Options that apply to all the event listeners that are bound by the renderer. */\n  private _eventOptions = supportsPassiveEventListeners() ? ({passive: true} as any) : false;\n\n  /**\n   * Cached dimensions of the ripple container. Set when the first\n   * ripple is shown and cleared once no more ripples are visible.\n   */\n  private _containerRect: ClientRect | null;\n\n  constructor(private _target: RippleTarget,\n              private _ngZone: NgZone,\n              elementRef: ElementRef,\n              platform: Platform) {\n\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents.set('mousedown', this.onMousedown);\n      this._triggerEvents.set('mouseup', this.onPointerUp);\n      this._triggerEvents.set('mouseleave', this.onPointerUp);\n\n      this._triggerEvents.set('touchstart', this.onTouchStart);\n      this._triggerEvents.set('touchend', this.onPointerUp);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = this._containerRect =\n                          this._containerRect || this._containerElement.getBoundingClientRect();\n    const animationConfig = {...defaultRippleAnimationConfig, ...config.animation};\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n    const duration = animationConfig.enterDuration / (config.speedFactor || 1);\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    if (!config.persistent) {\n      this._mostRecentTransientRipple = rippleRef;\n    }\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      const isMostRecentTransientRipple = rippleRef === this._mostRecentTransientRipple;\n\n      rippleRef.state = RippleState.VISIBLE;\n\n      // When the timer runs out while the user has kept their pointer down, we want to\n      // keep only the persistent ripples and the latest transient ripple. We do this,\n      // because we don't want stacked transient ripples to appear after their enter\n      // animation has finished.\n      if (!config.persistent && (!isMostRecentTransientRipple || !this._isPointerDown)) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    const wasActive = this._activeRipples.delete(rippleRef);\n\n    if (rippleRef === this._mostRecentTransientRipple) {\n      this._mostRecentTransientRipple = null;\n    }\n\n    // Clear out the cached bounding rect if we have no more ripples.\n    if (!this._activeRipples.size) {\n      this._containerRect = null;\n    }\n\n    // For ripples that are not active anymore, don't re-un the fade-out animation.\n    if (!wasActive) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n    const animationConfig = {...defaultRippleAnimationConfig, ...rippleRef.config.animation};\n\n    rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n    rippleEl.style.opacity = '0';\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode!.removeChild(rippleEl);\n    }, animationConfig.exitDuration);\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(element: HTMLElement) {\n    if (!element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n\n    this._ngZone.runOutsideAngular(() => {\n      this._triggerEvents.forEach((fn, type) =>\n          element.addEventListener(type, fn, this._eventOptions));\n    });\n\n    this._triggerElement = element;\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private onMousedown = (event: MouseEvent) => {\n    const isSyntheticEvent = this._lastTouchStartEvent &&\n        Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n\n    if (!this._target.rippleDisabled && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private onTouchStart = (event: TouchEvent) => {\n    if (!this._target.rippleDisabled) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      this.fadeInRipple(\n          event.touches[0].clientX, event.touches[0].clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private onPointerUp = () => {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      // By default, only ripples that are completely visible will fade out on pointer release.\n      // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\n      const isVisible = ripple.state === RippleState.VISIBLE ||\n        ripple.config.terminateOnPointerUp && ripple.state === RippleState.FADING_IN;\n\n      if (!ripple.config.persistent && isVisible) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n  private runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => {\n        this._triggerElement!.removeEventListener(type, fn, this._eventOptions);\n      });\n    }\n  }\n}\n\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Converts values into strings. Falsy values become empty strings.\n * @docs-private\n */\nexport function coerceToString(value: string | number): string {\n  return `${value || ''}`;\n}\n\n/**\n * Converts a value that might be a string into a number.\n * @docs-private\n */\nexport function coerceToNumber(value: string | number): number {\n  return typeof value === 'string' ? parseInt(value, 10) : value;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`mat-menu-trigger: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`x-position value must be either 'before' or after'.\n      Example: <mat-menu x-position=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`y-position value must be either 'above' or below'.\n      Example: <mat-menu y-position=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {DateAdapter} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n  imports: [PlatformModule],\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n  ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({providedIn: 'root'})\nexport class ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {\n  HammerStatic,\n  HammerInstance,\n  Recognizer,\n  RecognizerStatic,\n  HammerOptions,\n} from './gesture-annotations';\n\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\n\n/** Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class GestureConfig extends HammerGestureConfig {\n  private _hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\n\n  /** List of new event names to add to the gesture support list */\n  events: string[] = this._hammer ? [\n    'longpress',\n    'slide',\n    'slidestart',\n    'slideend',\n    'slideright',\n    'slideleft'\n  ] : [];\n\n  constructor(\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\n    @Optional() commonModule?: MatCommonModule) {\n    super();\n    if (commonModule) {\n      commonModule._checkHammerIsAvailable();\n    }\n  }\n\n  /**\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://material.io/design/#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * @param element Element to which to assign the new HammerJS gestures.\n   * @returns Newly-created HammerJS instance.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const mc = new this._hammer(element, this._hammerOptions || undefined);\n\n    // Default Hammer Recognizers.\n    const pan = new this._hammer.Pan();\n    const swipe = new this._hammer.Swipe();\n    const press = new this._hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return mc as HammerInstance;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  NgModule,\n  Directive,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport class MatLineSetter {\n  constructor(private _lines: QueryList<MatLine>, private _element: ElementRef) {\n    this._setLineClass(this._lines.length);\n\n    this._lines.changes.subscribe(() => {\n      this._setLineClass(this._lines.length);\n    });\n  }\n\n  private _setLineClass(count: number): void {\n    this._resetClasses();\n    if (count === 2 || count === 3) {\n      this._setClass(`mat-${count}-line`, true);\n    } else if (count > 3) {\n      this._setClass(`mat-multi-line`, true);\n    }\n  }\n\n  private _resetClasses(): void {\n    this._setClass('mat-2-line', false);\n    this._setClass('mat-3-line', false);\n    this._setClass('mat-multi-line', false);\n  }\n\n  private _setClass(className: string, isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add(className);\n    } else {\n      this._element.nativeElement.classList.remove(className);\n    }\n  }\n\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\n\n/** Possible states for a ripple element. */\nexport enum RippleState {\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n\n  /** Current state of the ripple reference. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: RippleRenderer,\n    public element: HTMLElement,\n    public config: RippleConfig) {\n  }\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {RippleRef} from './ripple-ref';\nimport {RippleAnimationConfig, RippleConfig, RippleRenderer, RippleTarget} from './ripple-renderer';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * Configuration for the animation duration of the ripples.\n   * There are two phases with different durations for the ripples.\n   */\n  animation?: RippleAnimationConfig;\n\n  /**\n   * If set, the default duration of the fade-in animation is divided by this value. For example,\n   * setting it to 0.5 will cause the ripple fade-in animation to take twice as long.\n   * A changed speedFactor will not affect the fade-out duration of the ripples.\n   * @deprecated Use the `animation` global option instead.\n   * @deletion-target 7.0.0\n   */\n  baseSpeedFactor?: number;\n\n  /**\n   * Whether ripples should start fading out immediately after the mouse our touch is released. By\n   * default, ripples will wait for the enter animation to complete and for mouse or touch release.\n   */\n  terminateOnPointerUp?: boolean;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * If set, the normal duration of ripple animations is divided by this value. For example,\n   * setting it to 0.5 will cause the animations to take twice as long.\n   * A changed speedFactor will not modify the fade-out duration of the ripples.\n   * @deprecated Use the [matRippleAnimation] binding instead.\n   * @deletion-target 7.0.0\n   */\n  @Input('matRippleSpeedFactor') speedFactor: number = 1;\n\n  /**\n   * Configuration for the ripple animation. Allows modifying the enter and exit animation\n   * duration of the ripples.\n   */\n  @Input('matRippleAnimation') animation: RippleAnimationConfig;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() { return this._trigger || this._elementRef.nativeElement; }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** Whether ripple directive is initialized and the input bindings are set. */\n  private _isInitialized: boolean = false;\n\n  constructor(private _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string) {\n\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /** Ripple configuration from the directive's input values. */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      radius: this.radius,\n      color: this.color,\n      animation: this._animationMode === 'NoopAnimations' ?\n          {enterDuration: 0, exitDuration: 0} :\n          {...this._globalOptions.animation, ...this.animation},\n      terminateOnPointerUp: this._globalOptions.terminateOnPointerUp,\n      speedFactor: this.speedFactor * (this._globalOptions.baseSpeedFactor || 1),\n    };\n  }\n\n  /** Whether ripples on pointer-down are disabled or not. */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n\n  /**\n   * Launches a manual ripple using the specified ripple configuration.\n   * @param config Configuration for the manual ripple.\n   */\n  launch(config: RippleConfig): RippleRef;\n\n  /**\n   * Launches a manual ripple at the specified coordinates within the element.\n   * @param x Coordinate within the element, along the X axis at which to fade-in the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to fade-in the ripple.\n   * @param config Optional ripple configuration for the manual ripple.\n   */\n  launch(x: number, y: number, config?: RippleConfig): RippleRef;\n\n  /** Launches a manual ripple at the specified coordinated or just by the ripple config. */\n  launch(configOrX: number | RippleConfig, y: number = 0, config?: RippleConfig): RippleRef {\n    if (typeof configOrX === 'number') {\n      return this._rippleRenderer.fadeInRipple(configOrX, y, {...this.rippleConfig, ...config});\n    } else {\n      return this._rippleRenderer.fadeInRipple(0, 0, {...this.rippleConfig, ...configOrX});\n    }\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  Input,\n  ChangeDetectionStrategy,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/**\n * Possible states for a pseudo checkbox.\n * @docs-private\n */\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n\n  constructor(@Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n})\nexport class MatPseudoCheckboxModule { }\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\nimport {mixinDisabled, CanDisable} from '../common-behaviors/disabled';\n\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nexport class MatOptgroupBase { }\nexport const _MatOptgroupMixinBase = mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  styleUrls: ['optgroup.css'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n})\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n"],"names":["SELECT_PANEL_PADDING_X","_this","_updatePagination","_alignInkBarToSelectedTab","this","_keyManager","FocusKeyManager","_labelWrappers","withHorizontalOrientation","_getLayoutDirection","updateActiveItemIndex","requestAnimationFrame","realign","_realignInkBar","merge","dirChange","resize","subscribe","MatTabHeader","prototype","ngOnDestroy","unsubscribe","_onContentChanges","_changeDetectorRef","markForCheck","_checkPaginationEnabled","_checkScrollingControls","_updateTabScrollPosition","Object","defineProperty","value","_isValidIndex","focusIndex","setActiveItem","indexFocused","emit","_setTabFocus","index","tab","toArray","disabled","tabIndex","_showPaginationControls","_scrollToLabel","length","focus","containerEl","_tabListContainer","nativeElement","dir","scrollLeft","scrollWidth","offsetWidth","_dir","scrollDistance","translateX","_tabList","style","transform","_scrollDistance","v","Math","max","min","_getMaxScrollDistance","_scrollDistanceChanged","_scrollHeader","scrollDir","viewLength","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","getOffsetLeft","getOffsetWidth","beforeVisiblePos","afterVisiblePos","isEnabled","_elementRef","_disableScrollBefore","_disableScrollAfter","selectedLabelWrapper","selectedIndex","elementRef","_inkBar","alignToElement","type","Component","args","selector","template","styles","inputs","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","host","class","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","ViewportRuler","Directionality","decorators","Optional","propDecorators","ViewChild","Input","selectFocusedIndex","Output","nextId","MatTabChangeEvent","MatTabGroupBase","_MatTabGroupMixinBase","mixinColor","mixinDisableRipple","MatTabGroup","_super","call","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","Subscription","EMPTY","_tabLabelSubscription","_dynamicHeight","_selectedIndex","headerPosition","selectedIndexChange","EventEmitter","focusChange","animationDone","selectedTabChange","_groupId","tslib_1.__extends","coerceBooleanProperty","coerceNumberProperty","_backgroundColor","classList","remove","backgroundColor","add","ngAfterContentChecked","indexToSelect","_tabs","tabChangeEvent","_createChangeEvent","Promise","resolve","then","forEach","position","isActive","origin","ngAfterContentInit","_subscribeToTabLabels","changes","realignInkBar","_tabHeader","_focusChanged","event","apply","map","_disableChange","concat","_labelChange","_getTabLabelId","i","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","height","offsetHeight","_removeTabBodyWrapperHeight","clientHeight","_handleClick","tabHeader","idx","_getTabIndex","exportAs","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","dynamicHeight","MatTabNavBase","_MatTabNavMixinBase","MatTabNav","_ngZone","_viewportRuler","_onDestroy","Subject","updateActiveLink","element","_activeLinkChanged","runOutsideAngular","change","observableOf","pipe","takeUntil","_alignInkBar","activeTab","_tabLinks","find","active","_activeLinkElement","next","complete","show","hide","NgZone","ChangeDetectorRef","MatTabLinkBase","_MatTabLinkMixinBase","mixinTabIndex","mixinDisabled","_tabNavBar","_tabLinkRipple","setupTriggerEvents","parseInt","globalOptions","terminateOnPointerUp","speedFactor","baseSpeedFactor","animation","get","_isActive","enumerable","configurable","preventDefault","MatTabLink","Directive","[attr.aria-current]","[attr.aria-disabled]","[attr.tabIndex]","[class.mat-tab-disabled]","[class.mat-tab-label-active]","(click)","Platform","undefined","Inject","MAT_RIPPLE_GLOBAL_OPTIONS","Attribute","NgModule","imports","CommonModule","MatCommonModule","PortalModule","MatRippleModule","ObserversModule","exports","MatTabLabel","MatTab","MatTabContent","declarations","MatInkBar","MatTabLabelWrapper","MatTabBody","MatTabBodyPortal","MatTabsModule","MatToolbarBase","_MatToolbarMixinBase","MatToolbarRow","MatToolbar","_platform","document","_document","ngAfterViewInit","isDevMode","isBrowser","_checkToolbarMixedModes","_toolbarRows","slice","childNodes","filter","node","contains","nodeType","COMMENT_NODE","some","textContent","trim","throwToolbarMixedModesError","[class.mat-toolbar-multiple-rows]","[class.mat-toolbar-single-row]","DOCUMENT","MatToolbarModule","MatTreeNodeOutlet","viewContainer","ViewContainerRef","_MatTreeNodeMixinBase","CdkTreeNode","_MatNestedTreeNodeMixinBase","CdkNestedTreeNode","MatTreeNode","_tree","role","Number","[attr.aria-expanded]","[attr.aria-level]","[attr.role]","providers","provide","useExisting","ElementRef","CdkTree","MatTreeNodeDef","CdkTreeNodeDef","data","MatNestedTreeNode","_differs","IterableDiffers","nodeOutlet","ContentChildren","MatTreeNodePadding","CdkTreeNodePadding","level","indent","MatTree","recursive","MatTreeNodeToggle","CdkTreeNodeToggle","MAT_TREE_DIRECTIVES","CdkTreeModule","MatTreeModule","MatTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","_flattenNode","resultNodes","parentMap","flatNode","push","take","children","child","childParentMap","flattenNodes","structuredData","expandFlattenedNodes","nodes","treeControl","results","currentExpand","expand","isExpanded","MatTreeFlatDataSource","treeFlattener","initialData","_flattenedData","BehaviorSubject","_expandedData","_data","dataNodes","connect","collectionViewer","viewChange","expansionModel","disconnect","DataSource","MatTreeNestedDataSource","VERSION","Version","MatStepHeader","iconOverrides","selected","optional","matStepperAnimations","horizontalStepTransition","trigger","state","visibility","transition","animate","verticalStepTransition","MatStepperIcon","templateRef","TemplateRef","name","MatStep","stepper","_errorStateMatcher","isErrorState","control","form","originalErrorState","customErrorState","invalid","interacted","ErrorStateMatcher","MatStepper","arguments","icons","_icons","override","icon","_iconOverrides","_steps","_destroyed","_stateChanged","MatHorizontalStepper","aria-orientation","animations","MatVerticalStepper","ctorParameters","MatStepperNext","[type]","CdkStepper","CdkStepperNext","MatStepperPrevious","CdkStepperPrevious","MatButtonModule","CdkStepperModule","MatIconModule","MatStepLabel","MatStepperIntl","MatStepperModule","MatTable","stickyCssClass","CDK_TABLE_TEMPLATE","MatCellDef","CdkCellDef","MatHeaderCellDef","CdkHeaderCellDef","MatFooterCellDef","CdkFooterCellDef","MatColumnDef","CdkColumnDef","sticky","stickyEnd","MatHeaderCell","columnDef","cssClassFriendlyName","CdkHeaderCell","MatFooterCell","CdkFooterCell","MatCell","CdkCell","MatHeaderRowDef","CdkHeaderRowDef","MatFooterRowDef","CdkFooterRowDef","MatRowDef","CdkRowDef","MatHeaderRow","CDK_ROW_TEMPLATE","CdkHeaderRow","CdkFooterRow","MatFooterRow","MatRow","CdkRow","EXPORTED_DECLARATIONS","CdkTableModule","MatTableModule","MatTableDataSource","_renderData","_filter","_renderChangesSubscription","sortingDataAccessor","sortHeaderId","_isNumberValue","sortData","sort","direction","a","b","valueA","valueB","comparatorResult","filterPredicate","accumulator","currentTerm","key","dataStr","keys","reduce","toLowerCase","transformedFilter","indexOf","_updateChangeSubscription","_sort","_paginator","paginator","sortChange","initialized","pageChange","page","dataStream","filteredData","combineLatest","_a","_filterData","orderedData","_orderData","paginatedData","_pageData","obj","_updatePaginator","startIndex","pageIndex","pageSize","splice","filteredDataLength","lastPageIndex","ceil","_MAT_INK_BAR_POSITIONER","InjectionToken","providedIn","factory","_MAT_INK_BAR_POSITIONER_FACTORY","_inkBarPositioner","_setStyles","positions","inkBar","left","width","viewContainerRef","CdkPortal","MatTabBase","_MatTabMixinBase","_viewContainerRef","textLabel","_contentPortal","ngOnChanges","hasOwnProperty","ngOnInit","TemplatePortal","_explicitContent","_implicitContent","matTabsAnimations","translateTab","componentFactoryResolver","_host","_centeringSub","_leavingSub","_beforeCentering","startWith","_isCenterPosition","_position","isCentering","hasAttached","attach","_content","_afterLeavingCenter","detach","ComponentFactoryResolver","forwardRef","CdkPortalOutlet","_onCentering","_onCentered","_origin","_onTranslateTabStarted","e","toState","_onTranslateTabComplete","fromState","_portalHost","PortalHostDirective","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","offsetLeft","MatTabHeaderBase","_MatTabHeaderMixinBase","_selectedIndexChanged","_tabLabelCount","_handleKeydown","keyCode","HOME","setFirstItemActive","END","setLastItemActive","ENTER","SPACE","onKeydown","ANIMATION_MODULE_TYPE","MatSlider","step","thumbLabel","tickInterval","displayWith","vertical","input","_sliderWrapper","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MatSliderModule","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","dismiss","_onExit","_finishDismiss","closed","exit","clearTimeout","_durationTimeoutId","dismissWithAction","closeWithAction","_dismissAfter","duration","setTimeout","_open","dispose","dismissedByAction","afterDismissed","asObservable","afterOpened","_onEnter","MAT_SNACK_BAR_DATA","MatSnackBarConfig","politeness","announcementMessage","horizontalPosition","verticalPosition","matSnackBarAnimations","contentFade","opacity","AnimationDurations","COMPLEX","AnimationCurves","STANDARD_CURVE","snackBarState","EXITING","ACCELERATION_CURVE","ENTERING","DECELERATION_CURVE","SimpleSnackBar","snackBarRef","action","[@contentFade]","MatSnackBarContainer","snackBarConfig","_animationState","attachComponentPortal","portal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","attachTemplatePortal","onAnimationEnd","startsWith","_completeExit","onEnter_1","run","enter","detectChanges","onMicrotaskEmpty","panelClasses","panelClass","Array","isArray","cssClass","Error","[@state]","(@state.done)","OverlayModule","entryComponents","MatSnackBarModule","MAT_SNACK_BAR_DEFAULT_OPTIONS","MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","openFromComponent","component","config","_attach","openFromTemplate","open","message","_config","tslib_1.__assign","_attachSnackBarContainer","overlayRef","userInjector","injector","PortalInjector","WeakMap","containerPortal","ComponentPortal","containerRef","instance","content","userConfig","_createOverlay","container","$implicit","_createInjector","contentRef","observe","Breakpoints","Handset","detachments","matches","overlayElement","_animateSnackBar","announce","overlayConfig","OverlayConfig","positionStrategy","global","isRtl","isLeft","isRight","right","centerHorizontally","top","bottom","create","Injectable","Overlay","LiveAnnouncer","Injector","BreakpointObserver","SkipSelf","MatSortBase","_MatSortMixinBase","mixinInitialized","sortables","Map","_stateChanges","start","_direction","MatSort","getSortInvalidDirectionError","_disableClear","register","sortable","id","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","set","deregister","delete","getNextSortDirection","disableClear","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","_markInitialized","SORT_ANIMATION_TRANSITION","matSortAnimations","indicator","leftPointer","rightPointer","arrowOpacity","arrowPosition","keyframes","allowChildren","query","animateChild","sortButtonLabel","MatSortHeaderIntl","MAT_SORT_HEADER_INTL_PROVIDER","deps","useFactory","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","MatSortHeaderBase","_MatSortHeaderMixinBase","MatSortHeader","_intl","changeDetectorRef","_cdkColumnDef","_showIndicatorHint","_arrowDirection","_disableViewStateAnimation","getSortHeaderNotContainedWithinSortError","_rerenderSubscription","_isSorted","_updateArrowDirection","_viewState","_setAnimationTransitionState","_setIndicatorHintVisible","visible","_isDisabled","viewState","_getArrowDirectionState","_getArrowViewState","_getAriaSortAttribute","(mouseenter)","(longpress)","(mouseleave)","[attr.aria-sort]","[class.mat-sort-header-disabled]","MatSortModule","CdkStepLabel","optionalLabel","_focusMonitor","_element","monitor","_intlSubscription","stopMonitoring","_stringLabel","label","_templateLabel","_getHostElement","_getIconContext","[class.mat-drawer-container-explicit-backdrop]","MatDrawerContainer","_drawers","MatDrawer","ContentChild","MatDrawerContent","autosize","hasBackdrop","MatSidenavContent","[style.margin-left.px]","[style.margin-right.px]","MatSidenav","_fixedBottomGap","matDrawerAnimations","transformDrawer","[@transform]","(@transform.start)","(@transform.done)","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","fixedInViewport","MatSidenavContainer","MatSidenavModule","ScrollDispatchModule","PlatformModule","MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS","disableToggleValue","disableDragValue","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlideToggle","multi","MatSlideToggleChange","source","checked","MatSlideToggleBase","_MatSlideToggleMixinBase","defaults","_animationMode","onChange","_","onTouched","_uniqueId","_required","_checked","_dragging","labelPosition","ariaLabel","ariaLabelledby","toggleChange","dragChange","_inputElement","focusOrigin","_onInputFocusChange","_onChangeEvent","stopPropagation","_emitChangeEvent","_onInputClick","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","focusVia","toggle","_focusRipple","fadeOut","_ripple","launch","persistent","_getDragPercentage","distance","percentage","_thumbBarWidth","_previousChecked","_onDragStart","thumbEl","_thumbEl","_thumbBarEl","clientWidth","_onDrag","_dragPercentage","deltaX","dragX","_onDragEnd","newCheckedValue","_onLabelTextChange","[id]","[class.mat-checked]","[class.mat-disabled]","[class.mat-slide-toggle-label-before]","[class._mat-animation-noopable]","FocusMonitor","required","MatRipple","MatSlideToggleModule","MAT_SLIDER_VALUE_ACCESSOR","MatSliderChange","MatSliderBase","_MatSliderMixinBase","_invert","_max","_min","_step","_thumbLabel","_tickInterval","_value","_vertical","_percent","_isSliding","_tickIntervalPercent","_sliderDimensions","_controlValueAccessorChangeFn","_dirChangeSubscription","_calculatePercentage","_roundToDecimal","toString","split","pop","parseFloat","toFixed","_focusHostElement","blur","_blurHostElement","_clamp","invert","percent","_isMinValue","axis","_invertMouseCoords","_thumbGap","tickSize","backgroundSize","sign","rotate","_invertAxis","_onMouseenter","_getSliderDimensions","_updateTickIntervalPercent","_onClick","oldValue","_updateValueFromPosition","x","clientX","y","clientY","_emitInputEvent","_onSlide","_onSlideStart","center","_valueOnSlideStart","_onSlideEnd","_onFocus","_onBlur","_onKeydown","PAGE_UP","_increment","PAGE_DOWN","LEFT_ARROW","UP_ARROW","RIGHT_ARROW","DOWN_ARROW","_onKeyup","numSteps","pos","offset","size","posComponent","exactValue","_calculateValue","closestValue","round","trackSize","pixelsPerStep","stepsPerTick","pixelsPerTick","getBoundingClientRect","(focus)","(blur)","(keydown)","(keyup)","(slide)","(slideend)","(slidestart)","[tabIndex]","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[attr.aria-orientation]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[class.mat-slider-axis-inverted]","[class.mat-slider-sliding]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","[attr.mode]","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS","MatProgressSpinner","mode","animationMode","[style.width.px]","[style.height.px]","MatSpinner","MatProgressSpinnerModule","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MatRadioGroup","MatRadioChange","MatRadioGroupBase","_MatRadioGroupMixinBase","_changeDetector","_name","_selected","_isInitialized","_labelPosition","_disabled","_updateRadioButtonNames","_markRadiosForCheck","newValue","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_touch","_radios","radio","isAlreadySelected","_markForCheck","MatRadioButton","descendants","MatRadioButtonBase","_MatRadioButtonMixinBase","radioGroup","_radioDispatcher","_removeUniqueSelectionListener","listen","newCheckedState","notify","newDisabledState","_isRippleDisabled","disableRipple","_onInputChange","groupValueChanged","[class.mat-radio-checked]","[class.mat-radio-disabled]","[attr.id]","UniqueSelectionDispatcher","ariaDescribedby","MatRadioModule","box-shadow","MAT_DRAWER_DEFAULT_AUTOSIZE","MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY","_container","_contentMarginChanges","_focusTrapFactory","_doc","_elementFocusedBeforeDrawerWasOpened","_mode","_disableClose","_autoFocus","openedChange","opened","_isFocusTrapEnabled","_focusTrap","_trapFocus","_restoreFocus","close","onPositionChanged","_modeChanged","focusInitialElementWhenReady","hasMovedFocus","activeEl","activeElement","HTMLElement","_openedVia","enabled","destroy","isOpen","openedVia","_opened","_enableAnimations","_openedStream","openedStart","_closedStream","closedStart","backdropClick","_doCheckSubject","_autosize","defaultAutosize","drawer","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","_isDrawerOpen","_start","_end","_updateContentMargins","debounceTime","ngDoCheck","_setContainerClass","throwMatDuplicatedDrawerError","_right","_left","_closeModalDrawer","disableClose","_canHaveBackdrop","_isShowingBackdrop","_width","_contentMargins","MatSelect","overlayDir","CdkConnectedOverlay","options","MatOption","optionGroups","MatOptgroup","customTrigger","MatSelectTrigger","placeholder","multiple","disableOptionCentering","compareWith","errorStateMatcher","selectionChange","valueChange","MatOptionModule","MatFormFieldModule","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","MatSelectModule","matTooltipAnimations","tooltipState","SCROLL_THROTTLE_MS","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY","MAT_TOOLTIP_DEFAULT_OPTIONS","MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY","MatTooltip","_scrollDispatcher","_ariaDescriber","_scrollStrategy","_defaultOptions","showDelay","hideDelay","_message","_manualListeners","IOS","nodeName","webkitUserSelect","userSelect","listener","addEventListener","_updatePosition","_tooltipInstance","updatePosition","removeDescription","_isTooltipVisible","_updateTooltipMessage","describe","_tooltipClass","_setTooltipClass","removeEventListener","clear","delay","_detach","_portal","TooltipComponent","afterHidden","isVisible","ESCAPE","_handleTouchend","touchendHideDelay","strategy","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","scrollableAncestors","getAncestorScrollContainers","withScrollableContainers","positionChanges","scrollableViewProperties","isOverlayClipped","scrollStrategy","getConfig","_getOrigin","overlay","_getOverlayPosition","withPositions","main","fallback","originPosition","isLtr","originX","originY","getMatTooltipInvalidPositionError","_invertPosition","overlayPosition","overlayX","overlayY","tooltipClass","(touchend)","ScrollDispatcher","AriaDescriber","_visibility","_closeOnInteraction","_onHide","_isHandset","_hideTimeoutId","_showTimeoutId","_animationStart","_animationDone","_handleBodyInteraction","aria-hidden","A11yModule","MatTooltipModule","itemsPerPageLabel","nextPageLabel","previousPageLabel","firstPageLabel","lastPageLabel","getRangeLabel","MatPaginatorIntl","MAT_PAGINATOR_INTL_PROVIDER","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","PageEvent","MatPaginatorBase","_MatPaginatorBase","MatPaginator","_pageIndex","_length","_pageSizeOptions","_hidePageSize","_showFirstLastButtons","_intlChanges","_pageSize","_updateDisplayedPageSizeOptions","p","_initialized","nextPage","hasNextPage","previousPageIndex","_emitPageEvent","previousPage","hasPreviousPage","firstPage","lastPage","getNumberOfPages","numberOfPages","_changePageSize","floor","pageSizeOptions","_displayedPageSizeOptions","hidePageSize","showFirstLastButtons","MatPaginatorModule","MatProgressBarBase","_MatProgressBarMixinBase","progressbarId","MatProgressBar","_bufferValue","clamp","_primaryTransform","_bufferTransform","bufferValue","aria-valuemin","aria-valuemax","MatProgressBarModule","BASE_SIZE","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY","INDETERMINATE_ANIMATION_TEMPLATE","platform","_fallbackAnimation","_noopAnimations","_forceAnimations","_diameter","EDGE","TRIDENT","diameter","strokeWidth","animationClass","diameters","_attachStyleNode","_strokeWidth","viewBox","_circleRadius","PI","_strokeCircumference","styleTag","createElement","head","appendChild","sheet","insertRule","_getAnimationText","replace","Set","MatMenu","setPositionClasses","posX","posY","xPosition","yPosition","classes","_classList","_startAnimation","_panelAnimationState","_resetAnimation","_onAnimationDone","_isAnimating","activeItemIndex","scrollTop","matMenuAnimations","transformMenu","fadeInItems","MAT_MENU_PANEL","MAT_MENU_DEFAULT_OPTIONS","items","MatMenuItem","lazyContent","MatMenuContent","overlapTrigger","MAT_MENU_SCROLL_STRATEGY","MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_MENU_SCROLL_STRATEGY_FACTORY","MatMenuTrigger","_parentMenu","_menuItemInstance","_menuOpen","_closeSubscription","_hoverSubscription","_openedByMouse","menuOpened","onMenuOpen","menuClosed","onMenuClose","_triggersSubmenu","triggersSubmenu","menu","_checkMenu","reason","_destroyMenu","_handleHover","_cleanUpSubscriptions","toggleMenu","closeMenu","openMenu","_setPosition","menuData","_menuClosingActions","_initMenu","menuOpen","_resetMenu","parentMenu","_setMenuElevation","_setIsMenuOpen","focusFirstItem","setElevation","depth","_highlighted","throwMatMenuMissingError","_getOverlayConfig","_subscribeToPositions","backdropClass","connectionPair","originFallbackX","_b","overlayFallbackY","_c","originFallbackY","_d","overlayFallbackX","offsetY","backdrop","parentClose","hover","_hovered","_handleMousedown","isFakeMousedownFromScreenReader","asapScheduler","aria-haspopup","(mousedown)","Self","_deprecatedMatMenuTriggerFor","MatMenuModule","matSelectAnimations","transformPanel","minWidth","group","fadeInContent","MAT_SELECT_SCROLL_STRATEGY","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinErrorState","_parentFormField","_scrollStrategyFactory","_panelOpen","_scrollTop","_multiple","_compareWith","o1","o2","_uid","_destroy","_triggerFontSize","_onChange","_onTouched","_optionIds","_transformOrigin","_panelDoneAnimating","_panelDoneAnimatingStream","_offsetY","_positions","_disableOptionCentering","_focused","controlType","optionSelectionChanges","defer","option","onSelectionChange","onStable","switchMap","o","valueAccessor","_placeholder","stateChanges","_selectionModel","getMatSelectDynamicMultipleError","getMatSelectNonFunctionValueError","_initializeSelection","_id","SelectionModel","distinctUntilChanged","panelOpen","offsetX","_initKeyManager","added","select","removed","deselect","_resetOptions","updateErrorState","_triggerRect","getComputedStyle","_calculateOverlayPosition","_highlightCorrectOption","fontSize","_isRtl","_setSelectionByValue","empty","selectedOptions","viewValue","reverse","join","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","altKey","manager","activeItem","previouslyFocusedIndex","shiftKey","_selectViaInteraction","_onFadeInDone","_onAttached","positionChange","_calculateOverlayOffsetX","panel","_getPanelTheme","color","isEmpty","getMatSelectNonArrayValueError","currentValue","_selectValue","_sortValues","correspondingOption","error","console","warn","ActiveDescendantKeyManager","withTypeAhead","withVerticalOrientation","tabOut","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","isUserInput","_setOptionIds","wasSelected","isSelected","_propagateChanges","options_1","fallbackValue","valueToEmit","activeOptionIndex","labelCount","_countGroupLabelsBeforeOption","_getOptionScrollPosition","_getItemHeight","_getOptionIndex","result","current","itemHeight","_getItemCount","panelHeight","scrollContainerHeight","maxScroll","selectedOptionOffset","scrollBuffer","_calculateOverlayScroll","_calculateOverlayOffsetY","_checkOverlayWithinViewport","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","_getAriaLabel","_getAriaLabelledby","_labelId","_getAriaActiveDescendant","overlayRect","viewportSize","getViewportSize","paddingWidth","SELECT_MULTIPLE_PANEL_PADDING_X","first","leftOverflow","rightOverflow","optionOffsetFromPanelTop","optionHeightAdjustment","maxOptionsDisplayed","firstDisplayedIndex","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","setDescribedByIds","ids","_ariaDescribedby","onContainerClick","[attr.tabindex]","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","MatFormFieldControl","MAT_OPTION_PARENT_COMPONENT","NgForm","FormGroupDirective","MatFormField","NgControl","_setSelected","hasChanged","_reportValueChange","MatSelectionList","MAT_SELECTION_LIST_VALUE_ACCESSOR","MatListOption","_MatSelectionListMixinBase","MatLineModule","MatPseudoCheckboxModule","MatList","MatNavList","MatListItem","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatListSubheaderCssMatStyler","MatDividerModule","MatListModule","_template","_componentFactoryResolver","_appRef","context","_outlet","DomPortalOutlet","insertBefore","outletElement","isAttached","ApplicationRef","sequence","MatMenuItemBase","_MatMenuItemMixinBase","addItem","removeItem","_checkDisabled","_handleMouseEnter","getLabel","textNodeType","TEXT_NODE","output","length_1","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","MAT_MENU_DEFAULT_OPTIONS_FACTORY","_xPosition","_yPosition","_items","_itemChanges","_tabSubscription","_overlapTrigger","_hasBackdrop","throwMatMenuInvalidPositionX","throwMatMenuInvalidPositionY","className","withWrap","item","setFocusOrigin","resetActiveItem","newElevation","customElevation","c","_previousElevation","_MatListMixinBase","_navList","_isNavList","_handleFocus","_handleBlur","[class.mat-list-item-avatar]","[class.mat-list-item-with-avatar]","MatSelectionListBase","MatListOptionBase","_MatListOptionMixinBase","MatSelectionListChange","selectionList","_hasFocus","checkboxPosition","MatLineSetter","_lines","_removeOptionFromList","_text","_setFocusedOption","tabindex","[class.mat-list-item-disabled]","[class.mat-list-item-focus]","[attr.aria-selected]","skipPredicate","_tempValues","_setOptionsFromValues","_modelChanges","_i","optionIndex","setNextItemActive","previousFocusIndex","_toggleSelectOnFocusedOption","A","ctrlKey","selectAll","deselectAll","_getSelectedOptionValues","values","Boolean","focusedOption","focusedIndex","url","err","forkJoin","iconSetFetchRequests","foundIcon","_extractIconWithNameFromAnySet","iconSetConfigs","getMatIconNameNotFoundError","MatIconRegistry","iconName","svgElement","_extractSvgIconFromSet","_loadSvgIconFromConfig","_fetchUrl","svgText","_createSvgElementForSingleIcon","_loadSvgIconSetFromConfig","_svgElementFromString","responseText","svg","_setSvgAttributes","iconSet","iconSource","querySelector","iconElement","cloneNode","removeAttribute","_toSvgElement","str","div","innerHTML","ELEMENT_NODE","setAttribute","safeUrl","_httpClient","getMatIconNoHttpProviderError","_sanitizer","sanitize","SecurityContext","RESOURCE_URL","getMatIconFailedToSanitizeUrlError","inProgressFetch","_inProgressUrlFetches","req","responseType","finalize","share","_addSvgIconConfig","namespace","_svgIconConfigs","iconKey","_addSvgIconSetConfig","configNamespace","_iconSetConfigs","HttpClient","DomSanitizer","ICON_REGISTRY_PROVIDER","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","_MatIconMixinBase","MatIcon","_iconRegistry","ariaHidden","_inline","inline","_fontSet","_cleanupFontValue","_fontIcon","_splitIconName","parts","svgIcon","getNamedSvgIcon","_setSvgElement","log","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","styleTags","querySelectorAll","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","classNameForFontAlias","getDefaultFontSetClass","_previousFontSetClass","fontIcon","_previousFontIconClass","[class.mat-icon-inline]","MatListBase","MatListItemBase","_MatListItemMixinBase","_getValidDateOrNull","_dateAdapter","deserialize","_validatorOnChange","MatDatepickerInput","_disabledChange","_datepicker","_datepickerSubscription","_selectedChanged","_cvaOnChange","dateInput","MatDatepickerInputEvent","dateChange","_localeSubscription","_valueChange","registerOnValidatorChange","validate","_validator","getPopupConnectionElementRef","getConnectedOverlayOrigin","_formField","_onInput","date","parse","_dateFormats","_lastValueValid","isValid","sameDate","_getThemePalette","_formatValue","format","display","isDateInstance","MAT_DATEPICKER_VALUE_ACCESSOR","MAT_DATEPICKER_VALIDATORS","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","DateAdapter","MAT_DATE_FORMATS","matDatepicker","matDatepickerFilter","MatDatepickerToggleIcon","MatDatepickerToggle","datepicker","_watchStateChanges","datepickerDisabled","inputDisabled","_datepickerInput","datepickerToggled","openedStream","closedStream","[class.mat-datepicker-toggle-active]","[class.mat-accent]","[class.mat-warn]","_customIcon","MatDialogModule","MatCalendar","MatCalendarBody","MatDatepicker","MatDatepickerContent","MatMonthView","MatYearView","MatMultiYearView","MatCalendarHeader","MatDatepickerIntl","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER","MatDatepickerModule","_inset","MatDivider","[class.mat-divider-vertical]","[class.mat-divider-horizontal]","[class.mat-divider-inset]","_hideToggle","displayMode","MatAccordion","hideToggle","CdkAccordion","matExpansionAnimations","indicatorRotate","expansionHeaderHeight","params","collapsedHeight","expandedHeight","bodyExpansion","MatExpansionPanelContent","uniqueId","MatExpansionPanel","accordion","_uniqueSelectionDispatcher","_inputChanges","_headerId","_getHideToggle","_hasSpacing","expanded","_getExpandedState","_lazyContent","_bodyAnimation","phaseName","outputs","[class.mat-expanded]","[class.mat-expansion-panel-spacing]","MatExpansionPanelActionRow","MatExpansionPanelHeader","_parentChangeSubscription","_toggle","_isExpanded","_getPanelId","_showToggle","_keydown","[attr.aria-controls]","[@expansionHeight]","MatExpansionPanelDescription","MatExpansionPanelTitle","CdkAccordionModule","MatExpansionModule","MatGridTile","_rowspan","_colspan","coerceToNumber","_setStyle","property","MatGridTileText","MatGridAvatarCssMatStyler","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","TileCoordinator","numColumns","tiles","columnIndex","rowIndex","tracker","fill","tile","_trackTile","lastRowMax","rowCount","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","rowspan","row","col","TileStyler","_rows","init","gutterSize","cols","_gutterSize","normalizeUnits","_cols","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","reset","list","_setListStyle","_tiles","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","FitTileStyler","gutterHeightPerTile","MatGridList","_gutter","coerceToString","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","rowHeight","_tileStyler","MatGridListModule","SvgIconConfig","_cachedIconsByUrl","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","addSvgIconInNamespace","addSvgIconLiteral","literal","addSvgIconLiteralInNamespace","sanitizedLiteral","HTML","getMatIconFailedToSanitizeLiteralError","addSvgIconSet","addSvgIconSetInNamespace","addSvgIconSetLiteral","addSvgIconSetLiteralInNamespace","registerFontClassAlias","alias","setDefaultFontSetClass","getSvgIconFromUrl","cachedIcon","cloneSvg","tap","_getSvgFromConfig","_getSvgFromIconSetConfigs","observableThrow","namedIcon","iconSetConfig","catchError","activeDate","addCalendarYears","_activeDate","getYear","yearsPerPage","_yearSelected","compareDate","oldActiveDate","activeDateChange","_focusActiveCell","_getActiveCell","_matCalendarBody","_createCellForYear","year","yearName","getYearName","createDate","MatCalendarCell","_shouldEnableYear","maxDate","minDate","dateFilter","firstOfYear","addCalendarDays","selectedChange","yearSelected","monthSelected","createMissingDateImplError","today","validDate","clampDate","_init","_selectedMonth","_getMonthInCurrentYear","_minDate","_maxDate","_monthSelected","month","normalizedDate","daysInMonth","getNumDaysInMonth","getDate","_handleCalendarBodyKeydown","addCalendarMonths","getMonth","_todayMonth","_yearLabel","monthNames","getMonthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","toLocaleUpperCase","_shouldEnableMonth","activeYear","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","firstOfMonth","maxYear","maxMonth","minYear","minMonth","calendar","currentView","monthYearLabel","switchToMultiYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","multi-year","prevMultiYearLabel","nextMonthLabel","nextYearLabel","nextMultiYearLabel","currentPeriodClicked","previousClicked","nextClicked","previousEnabled","_isSameView","nextEnabled","date1","date2","_moveFocusOnNextTick","startAt","_currentView","startView","focusActiveCell","firstChange","view","_getCurrentViewComponent","headerComponent","_userSelection","monthView","yearView","multiYearView","matDatepickerAnimations","fadeInCalendar","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY","MatDatepickerContentBase","_MatDatepickerContentMixinBase","_calendar","[@transformPanel]","[class.mat-datepicker-content-touch]","_inputSubscription","_popupRef","_popupComponentRef","_focusedElementBeforeOpen","touchUi","_openAsDialog","_openAsPopup","_dialogRef","_calendarPortal","completeClose","afterClosed","componentInstance","_setColor","_createPopup","keydownEvents","withPush","MatDialog","calendarHeaderComponent","NG_VALIDATORS","target","targetElement","_parseValidator","matDatepickerParse","text","_minValidator","controlValue","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_filterValidator","_dateFilter","Validators","compose","localeChanges","registerDatepicker","_registerInput","oldDate","aria-modal","[@slideDialog]","(@slideDialog.start)","(@slideDialog.done)","MatDialogConfig","MatDialogContainer","MatDialogRef","_containerInstance","location","_afterOpen","_afterClosed","_beforeClose","_locationChanges","_animationStateChanged","_result","closeOnNavigation","dialogResult","detachBackdrop","_startExitAnimation","afterOpen","beforeClose","_getPositionStrategy","centerVertically","updateSize","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","_location","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","componentOrTemplateRef","_applyConfigDefaults","getDialogById","dialogContainer","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","dialog","dialogConfig","minHeight","maxWidth","maxHeight","injectionTokens","previousValue","overlayContainer","getContainerElement","parentElement","siblings","sibling","hasAttribute","getAttribute","Location","OverlayContainer","dialogElementUid","MatDialogClose","_dialog","getClosestDialog","proxiedChange","_matDialogClose","MatDialogTitle","_ariaLabelledBy","MatDialogContent","MatDialogActions","MatTextareaAutosize","minRows","maxRows","rows","matAutosizeMinRows","matAutosizeMaxRows","matAutosize","matTextareaAutosize","CdkTextareaAutosize","MAT_INPUT_INVALID_TYPES","MatInputBase","_MatInputMixinBase","MatInput","inputValueAccessor","_autofillMonitor","ngZone","_isServer","focused","autofilled","_type","_readonly","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","el","selectionStart","selectionEnd","setSelectionRange","_validateType","_isTextarea","isAutofilled","_dirtyCheckNativeValue","isFocused","readonly","getMatInputUnsupportedTypeError","_isNeverEmpty","_isBadInput","validity","badInput","[class.mat-input-server]","[attr.placeholder]","[required]","[readonly]","AutofillMonitor","TextFieldModule","MatInputModule","calendarLabel","openCalendarLabel","displayValue","numCols","allowDisabledSelection","activeCell","cellAspectRatio","selectedValueChange","_cellClicked","cell","_isActiveCell","cellNumber","_firstRowOffset","attr.aria-readonly","todayValue","selectedValue","labelMinRequiredCells","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","_weekdays","_hasSameMonthAndYear","_selectedDate","_getDateInCurrentMonth","_dateSelected","selectedYear","selectedMonth","selectedDate","_todayDate","_monthLabel","_firstWeekOffset","getDayOfWeek","_createWeekCells","dateNames","getDateNames","_weeks","_shouldEnableDate","dateA11yLabel","d1","d2","_selectedYear","_todayYear","activeOffset","_years","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MAT_CHECKBOX_CLICK_ACTION","MatCheckbox","indeterminateChange","ripple","indeterminate","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","MatCheckboxModule","MatChipSelectionChange","MatChipBase","_MatChipMixinBase","CHIP_ATTRIBUTE_NAMES","MatChipAvatar","MatChipTrailingIcon","MatChip","_ripplesGloballyDisabled","rippleConfig","chipListSelectable","_selectable","_removable","destroyed","_addHostClassName","_chipRipple","RippleRenderer","selectable","CHIP_ATTRIBUTE_NAMES_1","attr","tagName","chip","_removeTriggerEvents","selectViaInteraction","toggleSelected","removable","DELETE","BACKSPACE","_blur","[class.mat-chip-selected]","[class.mat-chip-with-avatar]","[class.mat-chip-with-trailing-icon]","[class.mat-chip-disabled]","avatar","trailingIcon","removeIcon","MatChipRemove","_parentChip","MAT_CHIPS_DEFAULT_OPTIONS","MatChipListBase","_MatChipListMixinBase","MatChipListChange","MatChipList","_lastDestroyedIndex","_chipSet","_tabOutSubscription","_tabIndex","_userTabIndex","ariaOrientation","_chipInput","chips","_changeSubscription","_resetChips","_updateTabIndex","_updateFocusForDestroyedChips","_chipRemoveSubscription","_dropSubscriptions","registerInput","inputElement","_focusInput","_isInputEmpty","_updateKeyManager","chipIndex","chipsArray","newFocusIndex","focusChip","_clearSelection","correspondingChip","skip","_markAsTouched","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","chipSelectionChanges","chipFocusChanges","chipBlurChanges","chipRemoveChanges","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","[class.mat-chip-list-required]","MatChipInput","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","_emitChipEnd","addOnBlur","_focus","chipList","CHIP_DECLARATIONS","ɵ0","useValue","MatChipsModule","ariaDescribedBy","autoFocus","matDialogAnimations","slideDialog","_elementFocusedBeforeDialogWasOpened","_state","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","toFocus","_onAnimationStart","MatButton","stopImmediatePropagation","MatAnchor","MatButtonToggleGroupBase","_MatButtonToggleGroupMixinBase","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","MatButtonToggleGroupMultiple","_uniqueIdCounter","MatButtonToggleChange","_buttonToggles","_syncButtonToggle","_isSelected","_isPrechecked","_rawValue","[class.mat-button-toggle-vertical]","MatButtonToggle","MatButtonToggleBase","_MatButtonToggleMixinBase","toggleGroup","_isSingleSelector","buttonToggleGroup","_buttonElement","_onButtonClick","newChecked","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","MatButtonToggleModule","MatCardContent","MatCardTitle","MatCardSubtitle","align","[class.mat-card-actions-align-end]","MatCardActions","MatCardFooter","MatCardImage","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardXlImage","MatCardAvatar","MatCard","MatCardHeader","MatCardTitleGroup","MatCardModule","MatCheckboxChange","MatCheckboxBase","_MatCheckboxMixinBase","_clickAction","_currentAnimationClass","_currentCheckState","TransitionCheckState","Init","_indeterminate","changed","_transitionCheckState","Indeterminate","Checked","Unchecked","_getAriaChecked","newState","oldState","_getAnimationClassForCheckStateTransition","_onInteractionEvent","animSuffix","MatAutocomplete","MatAutocompleteOrigin","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","_zone","_componentDestroyed","_autocompleteDisabled","_manuallyFloatingLabel","_viewportSubscription","_closeKeyEventStream","_overlayAttached","optionSelections","autocomplete","_destroyPanel","showPanel","openPanel","_attachOverlay","_floatLabel","closePanel","_resetLabel","_isOpen","_closingActionsSubscription","_outsideClickStream","MatOptionSelectionChange","fromEvent","clickTarget","formField","_setTriggerValue","_resetActiveItem","activeOption","prevActiveItem","TAB","_canOpen","_scrollToOption","_handleInput","_previousValue","shouldAnimate","floatLabel","_animateAndLockLabel","newScrollPosition","_getScrollTop","_setScrollTop","_subscribeToClosingActions","firstStable","optionChanges","_positionStrategy","reapplyLastPosition","_setVisibility","panelClosingActions","_setValueAndClose","toDisplay","inputValue","_control","_clearPreviousSelectedOption","_emitSelectEvent","getMatAutocompleteMissingPanelError","_getHostWidth","wasOpen","_getConnectedElement","connectedTo","autoActiveFirstOption","readOnly","[attr.aria-autocomplete]","(focusin)","Host","autocompleteDisabled","MatAutocompleteModule","MatBadge","_color","_overlap","val","_updateTextContent","_description","newDescription","_updateHostAriaDescription","_hidden","isAbove","isAfter","description","_badgeElement","_createBadgeElement","badgeElement","oldDescription","colorPalette","[class.mat-badge-overlap]","[class.mat-badge-above]","[class.mat-badge-below]","[class.mat-badge-before]","[class.mat-badge-after]","[class.mat-badge-small]","[class.mat-badge-medium]","[class.mat-badge-large]","[class.mat-badge-hidden]","overlap","hidden","MatBadgeModule","MAT_BOTTOM_SHEET_DATA","MatBottomSheetConfig","matBottomSheetAnimations","bottomSheetState","MatBottomSheetContainer","breakpointObserver","bottomSheetConfig","_elementFocusedBeforeOpened","_breakpointSubscription","Medium","Large","XLarge","_toggleClass","isMatched","_validatePortalAttached","_setPanelClass","(@state.start)","FocusTrapFactory","MatBottomSheetModule","MatBottomSheetRef","_keydownEvents","MatBottomSheet","_parentBottomSheet","_bottomSheetRefAtThisLevel","_openedBottomSheetRef","_attachContainer","ref","bottomSheetRef","scrollStrategies","block","DEFAULT_ROUND_BUTTON_COLOR","DEFAULT_FLAT_BUTTON_COLOR","BUTTON_HOST_ATTRIBUTES","MatButtonBase","_MatButtonMixinBase","isRoundButton","_hasHostAttributes","isIconButton","BUTTON_HOST_ATTRIBUTES_1","attributes","attribute","_parent","_active","_emitSelectionChangeEvent","setActiveStyles","setInactiveStyles","ngAfterViewChecked","_mostRecentViewValue","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]","MAT_LABEL_GLOBAL_OPTIONS","MatError","matFormFieldAnimations","transitionMessages","[class.mat-right]","MatHint","MatLabel","MatPlaceholder","MatPrefix","MatSuffix","MatFormFieldBase","_MatFormFieldMixinBase","MAT_FORM_FIELD_DEFAULT_OPTIONS","labelOptions","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_outlineGapWidth","_outlineGapStart","_initialGapCalculated","_labelOptions","float","_animationsEnabled","_appearance","appearance","_hideRequiredMarker","_processHints","_connectionContainerRef","_validateControlChild","_validatePlaceholders","_syncDescribedByIds","valueChanges","_prefixChildren","_suffixChildren","_hintChildren","_errorChildren","updateOutlineGap","_shouldForward","prop","_hasPlaceholder","_placeholderChild","_hasLabel","_labelChild","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_hasFloatingLabel","_getDisplayedMessages","errorState","_label","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","hintLabel","getMatFormFieldDuplicatedHintError","startHint","endHint","getMatFormFieldMissingControlError","documentElement","containerStart","_getStartEnd","labelStart","labelWidth","outlineGapPadding","rect","[class.mat-form-field-appearance-standard]","[class.mat-form-field-appearance-fill]","[class.mat-form-field-appearance-outline]","[class.mat-form-field-appearance-legacy]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-form-field-autofilled]","[class.mat-focused]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","hideRequiredMarker","underlineRef","_inputContainerRef","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","MatAutocompleteBase","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","optionSelected","_autoActiveFirstOption","__extends","d","__","constructor","extendStatics","MATERIAL_SANITY_CHECKS_FACTORY","base","class_1","defaultColor","_disableRipple","defaultTabIndex","matcher","_pendingSubscribers","Observable","subscriber","_notifySubscriber","MAT_DATE_LOCALE_FACTORY","inject","LOCALE_ID","range","valueFunction","valuesArray","enforceStyleRecalculation","window","getPropertyValue","distanceToFurthestCorner","distX","distY","sqrt","optionsArray","groups","groupCounter","optionOffset","currentScrollPosition","optionHeight","reposition","MAT_DIALOG_SCROLL_STRATEGY_FACTORY","defaultOptions","provider","exp","match","parentRegistry","httpClient","sanitizer","scrollThrottle","parentIntl","sortOrder","setPrototypeOf","__proto__","__assign","assign","s","n","SHARP_CURVE","MATERIAL_SANITY_CHECKS","_sanityChecksEnabled","_hasDoneGlobalChecks","_hasCheckedHammer","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","doctype","testElement","body","computedStyle","_checkHammerIsAvailable","BidiModule","MAT_DATE_LOCALE","MAT_DATE_LOCALE_PROVIDER","_localeChanges","setLocale","locale","second","firstValid","secondValid","SUPPORTS_INTL_API","Intl","DEFAULT_MONTH_NAMES","short","String","DEFAULT_DATE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","NativeDateAdapter","matDateLocale","useUtcForDisplay","_clampDate","getFullYear","getDay","dtf_1","DateTimeFormat","timeZone","_stripDirectionalityCharacters","_format","Date","dtf_2","day","dtf_3","weekday","dtf","_createDateWithOverflow","clone","displayFormat","setFullYear","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","test","isNaN","getTime","NaN","UTC","getHours","getMinutes","getSeconds","getMilliseconds","MAT_NATIVE_DATE_FORMATS","NativeDateModule","MatNativeDateModule","ShowOnDirtyErrorStateMatcher","dirty","submitted","touched","MAT_HAMMER_OPTIONS","_hammerOptions","commonModule","_hammer","Hammer","events","buildHammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","MatLine","_setLineClass","count","_resetClasses","_setClass","isAdd","RippleRef","_renderer","RippleState","HIDDEN","fadeOutRipple","defaultRippleAnimationConfig","enterDuration","exitDuration","ignoreMouseEventsTimeout","_target","_isPointerDown","_triggerEvents","_activeRipples","_eventOptions","supportsPassiveEventListeners","passive","onMousedown","isSyntheticEvent","_lastTouchStartEvent","now","rippleDisabled","fadeInRipple","onTouchStart","touches","onPointerUp","VISIBLE","FADING_IN","_containerElement","containerRect","_containerRect","animationConfig","centered","radius","transitionDuration","rippleRef","_mostRecentTransientRipple","runTimeoutOutsideZone","isMostRecentTransientRipple","wasActive","rippleEl","FADING_OUT","fadeOutAll","_triggerElement","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","_trigger","configOrX","[class.mat-ripple-unbounded]","unbounded","MatPseudoCheckbox","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter","[class.mat-optgroup-disabled]"],"mappings":";;;;;;;i/DgKoBA,SAAgB6tF,GAAUC,EAAGzwE,GAEzB,QAAS0wE,KAAO3tF,KAAK4tF,YAAcF,EADnCG,GAAcH,EAAGzwE,GAEjBywE,EAAE3sF,UAAkB,OAANkc,EAAazb,OAAOyrB,OAAOhQ,IAAM0wE,EAAG5sF,UAAYkc,EAAElc,UAAW,GAAI4sF,ICJnF,QAAAG,KACE,OAAO,ECFT,QAAAzgF,GAAyD0gF,GACvD,MAAF,UAAA5mF,GAMI,QAAJ6mF,KAAA,IAAgB,GAAhB5oF,MAAA4jD,EAAA,EAAgBA,EAAhBzwC,UAAA/V,OAAgBwmD,IAAA5jD,EAAhB4jD,GAAAzwC,UAAAywC,EAAI,IAAJnpD,GAAAsH,EAAA4C,MAAA/J,KAA2CoF,IAA3CpF,WALAH,GAAA8gC,WAAiC,IApBjC,MAmBuBv4B,GAAvB4lF,EAAA7mF,GAGI3F,OAAJC,eAAQusF,EAARjtF,UAAA,gBAAI,WAAiB,MAAOf,MAAK2gC,eAC7B,SAAaj/B,GAAc1B,KAAK2gC,UAAYt4B,EAAAA,sBAAsB3G,oCAvBtEssF,GAmBuBD,GCOvB,QAAA/mF,GAAiE+mF,EAC7DE,GACF,MAAF,UAAA9mF,GAmBI,QAAJ6mF,KAAA,IAAgB,GAAhB5oF,MAAA4jD,EAAA,EAAgBA,EAAhBzwC,UAAA/V,OAAgBwmD,IAAA5jD,EAAhB4jD,GAAAzwC,UAAAywC,EAAI,IAAJnpD,GAAAsH,EAAA4C,MAAA/J,KACeoF,IADfpF,WAIMH,GAAK09C,MAAQ0wC,IAnDnB,MA4BuB7lF,GAAvB4lF,EAAA7mF,GAGI3F,OAAJC,eAAQusF,EAARjtF,UAAA,aAAI,WAA4B,MAAOf,MAAKsiF,YACxC,SAAU5gF,GACR,GAAM2hF,GAAe3hF,GAASusF,CAE1B5K,KAAiBrjF,KAAKsiF,SACpBtiF,KAAKsiF,QACPtiF,KAAK0E,YAAY9B,cAAc4F,UAAUC,OAAO,OAAOzI,KAAKsiF,QAE1De,GACFrjF,KAAK0E,YAAY9B,cAAc4F,UAAUG,IAAI,OAAO06E,GAGtDrjF,KAAKsiF,OAASe,oCA3CtB2K,GA4BuBD,GCVvB,QAAA9mF,GAA8D8mF,GAE5D,MAAF,UAAA5mF,GAOI,QAAJ6mF,KAAA,IAAgB,GAAhB5oF,MAAA4jD,EAAA,EAAgBA,EAAhBzwC,UAAA/V,OAAgBwmD,IAAA5jD,EAAhB4jD,GAAAzwC,UAAAywC,EAAI,IAAJnpD,GAAAsH,EAAA4C,MAAA/J,KAA2CoF,IAA3CpF,WANAH,GAAAquF,gBAAsC,IArBtC,MAoBuB9lF,GAAvB4lF,EAAA7mF,GAII3F,OAAJC,eAAQusF,EAARjtF,UAAA,qBAAI,WAAsB,MAAOf,MAAKkuF,oBAClC,SAAkBxsF,GAAc1B,KAAKkuF,eAAiB7lF,EAAAA,sBAAsB3G,oCAzBhFssF,GAoBuBD,GCFvB,QAAA3gF,GAAiE2gF,EAASI,GAExE,WAFF,KAAAA,IAA0EA,EAA1E,GAEA,SAAAhnF,GASI,QAAJ6mF,KAAA,IAAgB,GAAhB5oF,MAAA4jD,EAAA,EAAgBA,EAAhBzwC,UAAA/V,OAAgBwmD,IAAA5jD,EAAhB4jD,GAAAzwC,UAAAywC,EAAI,IAAJnpD,GAAAsH,EAAA4C,MAAA/J,KACeoF,IADfpF,WARAH,GAAAo2E,UAAgCkY,IArBhC,MAoBuB/lF,GAAvB4lF,EAAA7mF,GAGI3F,OAAJC,eAAQusF,EAARjtF,UAAA,gBAAI,WAAyB,MAAOf,MAAKoC,UAAY,EAAIpC,KAAKi2E,eAC1D,SAAav0E,GAEX1B,KAAKi2E,UAAqB,MAATv0E,EAAgBA,EAAQysF,mCA1B/CH,GAoBuBD,GCavB,QAAAp1C,GAAsEo1C,GAEpE,MAAF,UAAA5mF,GAyBI,QAAJ6mF,KAAA,IAAgB,GAAhB5oF,MAAA4jD,EAAA,EAAgBA,EAAhBzwC,UAAA/V,OAAgBwmD,IAAA5jD,EAAhB4jD,GAAAzwC,UAAAywC,EAAI,IAAJnpD,GAAAsH,EAAA4C,MAAA/J,KACeoF,IADfpF,WAvBAH,GAAA4qF,YAA0B,EAM1B5qF,EAAA86C,aAA4B,GAAI9uC,GAAAA,UA3ChC,MAmCuBzD,GAAvB4lF,EAAA7mF,GAYI6mF,EAAJjtF,UAAA46C,iBAAI,WACE,GAAMgiC,GAAW39E,KAAKyqF,WAChBvgE,EAASlqB,KAAKw4C,kBAAoBx4C,KAAKu4C,YACvC61C,EAAUpuF,KAAKonC,mBAAqBpnC,KAAKs4C,0BACzCvgC,EAAU/X,KAAKy4C,UAAYz4C,KAAKy4C,UAAgC,QAAG,KACnEilC,EAAW0Q,EAAQt2E,aAAaC,EAASmS,EAE3CwzD,KAAaC,IACf39E,KAAKyqF,WAAa/M,EAClB19E,KAAK26C,aAAa/tC,SAxD1BohF,GAmCuBD,GCHvB,QAAArgE,GAA4DqgE,GAE1D,MAAF,UAAA5mF,GAyBI,QAAJ6mF,KAAA,IAAgB,GAAhB5oF,MAAA4jD,EAAA,EAAgBA,EAAhBzwC,UAAA/V,OAAgBwmD,IAAA5jD,EAAhB4jD,GAAAzwC,UAAAywC,EAAI,IAAJnpD,GAAAsH,EAAA4C,MAAA/J,KAA2CoF,IAA3CpF,WAvBAH,GAAA4gC,gBAAqB,EAOrB5gC,EAAAwuF,uBAMAxuF,EAAAue,YAAkB,GAAIkwE,GAAAA,WAAiB,SAAAC,GAG7B1uF,EAAK4gC,eACP5gC,EAAK2uF,kBAAkBD,GAEvB1uF,EAAwB,oBAAE+U,KAAK25E,OAvDvC,MAkCuBnmF,GAAvB4lF,EAAA7mF,GAgCI6mF,EAAJjtF,UAAAkuB,iBAAI,WACE,GAAIjvB,KAAKygC,eACP,KAAMvX,OAAM,wFAIdlpB,MAAKygC,gBAAiB,EAEtBzgC,KAAwB,oBAAEoJ,QAAQpJ,KAAKwuF,mBACvCxuF,KAAKquF,oBAAsB,MAI7BL,EAAJjtF,UAAAytF,kBAAI,SAAkBD,GAChBA,EAAW3hF,OACX2hF,EAAW1hF,YAjFjBmhF,GAkCuBD,GChBvB,QAAAU,KACE,MAAOC,GAAAA,OAAOC,EAAAA,WC+BhB,QAAAC,GAAkBpsF,EAAgBqsF,GAEhC,IAAK,GADCC,GAAc/lE,MAAMvmB,GACjB6H,EAAI,EAAGA,EAAI7H,EAAQ6H,IAC1BykF,EAAYzkF,GAAKwkF,EAAcxkF,EAEjC,OAAOykF,GC6PT,QAAAC,GAAmChjF,GAIjCijF,OAAOnzC,iBAAiB9vC,GAASkjF,iBAAiB,WAMpD,QAAAC,GAAkClzD,EAAWE,EAAWyvD,GACtD,GAAMwD,GAAQ1rF,KAAKC,IAAID,KAAKi+C,IAAI1lB,EAAI2vD,EAAKzrE,MAAOzc,KAAKi+C,IAAI1lB,EAAI2vD,EAAK9+D,QAC5DuiE,EAAQ3rF,KAAKC,IAAID,KAAKi+C,IAAIxlB,EAAIyvD,EAAK5+D,KAAMtpB,KAAKi+C,IAAIxlB,EAAIyvD,EAAK3+D,QACjE,OAAOvpB,MAAK4rF,KAAKF,EAAQA,EAAQC,EAAQA,kCvBlDvC,IAAJ,GALAE,GAAA5oD,EAAAvkC,UAG2BotF,EAA3B3oD,EAAAzkC,UACQqtF,EAAe,EACvBnlF,EAAiB,EAAjBA,EAAA4+C,EAAA,EAAA5+C,IACAilF,EAAQjlF,GAAR2tC,OAAoBs3C,EAApBjlF,GAAA2tC,QAAAu3C,EAAAC,IAEAA,GAGA,OAAAA,GAGA,MAAA,gCAcA,OAAAC,GAAAC,EAEAD,EAGIA,EAAJE,EAAAD,EAAAhwC,EACAj8C,KAAAC,IAAA,EAAA+rF,EAAA/vC,EAAAiwC,GAGAD,EwBtSA,QAAA/E,KACE,MAAOzhE,OAAM,gEAIf,QAAA+hE,GAAmDpP,GACjD,MAAO3yD,OAAM,4CAA2C2yD,EAA1D,QAIA,QAAAuP,KACE,MAAOliE,OAAM,sDnCiDf,QAAAokE,KACE,OAAQxL,uBAAuB,GtHJjC,QAAA3D,GAAyD/yC,GACvD,MAAO,YAAM,MAAAA,GAAQ06C,iBAAiB8J,cAuBxC,QAAAnO,KACE,MAAOv4D,OAAM,6MgIkFf,QAAA+gD,GAA8B3/C,GAC5B,MAAFM,OAAa,GAAIu5D,IAA2B75D,GvCvI5C,QAAAmvD,KACE,KAAMvwD,OAAM,yEEMd,QAAA2mE,GAAmDzkD,GACjD,MAAO,YAAM,MAAAA,GAAQ06C,iBAAiBC,SAIxC,QAAA1c,GAA4Dj+B,GAE1D,MAAO,YAAM,MAAAA,GAAQ06C,iBAAiBC,SAoTxC,QAAA9b,GACI3/C,EAA0BwlE,GAC5B,MAAFllE,OAAaklE,EAAmBxlE,GCvOhC,QAAAuhD,GAA0B9/D,EAAqB+9D,GAG7C,IAFA,GAAI5/C,GAA6Bne,EAAQnJ,cAAcuoE,cAEhDjhD,IAAWA,EAAO1hB,UAAU0I,SAAS,yBAC1CgZ,EAASA,EAAOihD,aAGlB,OAAOjhD,GAAS4/C,EAAYr9D,KAAK,SAAAi+D,GAAU,MAAAA,GAAOr8C,KAApD,EAAmEA,KAAM,K8DlIzE,QAAAmgD,GAAgDtpE,GAC9C,MAAOgkB,OAAM,eAAehkB,EAA9B,mCCDA,QAAAk7D,GAA2C2vB,GACzC,MAAO7mE,OACH,wCAAwC6mE,EAD9C,0JnE6CA,QAAAlrB,IAAuDz5B,GACrD,MAAO,YAAM,MAAAA,GAAQ06C,iBAAiB8J,coE5CxC,QAAAzzB,IAA+Bz6D,GAC7B,MAAO,IAAGA,GAAS,IAOrB,QAAA61D,IAA+B71D,GAC7B,MAAwB,gBAAVA,GAAqB+L,SAAS/L,EAAO,IAAMA,E3E8P3D,QAAAw4D,IAAc81B,GAAuB,MAAO,QAAQA,EAApD,IAIA,QAAAr2B,IAAwBj4D,GACtB,MAAQA,GAAMuuF,MAAM,aAAgBvuF,EAAQA,EAAQ,Kf5PtD,QAAA2oD,IAA4CE,GAC1C,MAAOrhC,OAAM,sCAAsCqhC,EAArD,KASA,QAAA0B,MACE,MAAO/iC,OAAM,8JAWf,QAAAojC,IAAmDxC,GACjD,MAAO5gC,OAAM,yHACkD4gC,EAAjE,MAQA,QAAAyT,IAAuDJ,GACrD,MAAOj0C,OAAM,2HACkDi0C,EAAjE,MAihBA,QAAA5P,IACE2iC,EACAC,EACAC,EACA7/E,GACA,MAAO2/E,IAAkB,GAAI5lC,IAAgB6lC,EAAYC,EAAW7/E,GAiBtE,QAAA0tD,IAAkBhT,GAChB,MAAOA,GAAIM,WAAU,GAIvB,QAAAyB,IAAiBF,EAAmBp1C,GAClC,MAAOo1C,GAAY,IAAMp1C,E2F/lB3B,QAAA0+B,MACE,KAAMltB,OAAM,yKAYd,QAAAw9B,MACE,KAAMx9B,OAAM,oIASd,QAAAy9B,MACE,KAAMz9B,OAAM,kItGiCd,QAAAg9B,MACE,OACErS,gBAAgB,EAChBpB,UAAW,QACXC,UAAW,QACX6D,cAAe,oCC1BnB,QAAAvC,IAAiD5I,GAC/C,MAAO,YAAM,MAAAA,GAAQ06C,iBAAiB8J,csGpCxC,QAAA/0C,MACE,MAAO3xB,OAAM,iEASf,QAAAu0B,MACE,MAAOv0B,OAAM,sDAQf,QAAA4xB,MACE,MAAO5xB,OAAM,qC/KsGf,QAAAivB,IAA4D/M,GAE1D,MAAO,YAAM,MAAAA,GAAQ06C,iBAAiB8J,cClFxC,QAAA/jD,IAAkDxiC,GAChD,MAAO6f,OAAM,qBAAqB7f,EAApC,iBAQA,QAAA2+B,IAAoDoD,GAClD,MAAO,YAAM,MAAAA,GAAQ06C,iBAAiB8J,YAAYS,eAAgBxoD,MAwBpE,QAAAK,MACE,OACEM,UAAW,EACXC,UAAW,EACX4B,kBAAmB,MkEpCvB,QAAAqD,IAAoD4iD,GAClD,MAAOA,IAAc,GAAI9iD,uBGgDD,6BAAF,KAAxB9pC,IAA4CA,EAA5C,KAAAD,KAAAC,IAAAC,EAAAF,KAAAE,IAAAD,EAAAF,IXvCA,QAAAitC,MACE,OAAQS,SAAUZ,INvBpB,QAAAxK,IAA8Cz8B,GAC5C,KAAM6f,OAAM,iDAAgD7f,EAA9D,OAeA,QAAAw5B,MACE,OAAO,ERvBT,QAAApZ,MACE,MAAO,IAAIlD,ImI/Bb,QAAAiI,IAAgDH,GAC9C,MAAOnF,OAAM,kDAAkDmF,EAAjE,MAIA,QAAAuC,MACE,MAAO1H,OAAM,oFAIf,QAAAoF,MACE,MAAOpF,OAAM,oDAIf,QAAA+E,IAA6ClR,GAC3C,MAAOmM,OAASnM,EAAlB,qDlI0IA,QAAAgS,IAA+BjB,EACAe,GAC7B,GAAI0hE,IAA8B,MAAO,OAIzC,OAHa,QAATziE,GAAmByiE,EAAUj0C,UAC5BztB,GAAgB0hE,EAAU37E,KAAK,IAE7B27E,EE5IT,QAAArgE,IAAsDogE,GACpD,MAAOA,IAAc,GAAIxgE,IlBC3B,QAAAjQ,MAME,MALe,UAAC9T,GAAyB,OACvCmU,KAAMnU,GAAWA,EAAQiX,YAAc,GAAK,KAAO,IACnD7C,MAAOpU,GAAWA,EAAQ/I,aAAe,GAAK,KAAO,kOiIlBzD,GAAI6qF,IAAgBrsF,OAAOgvF,iBACpBC,uBAA2B1nE,QAAS,SAAU2kE,EAAGzwE,GAAKywE,EAAE+C,UAAYxzE,IACvE,SAAUywE,EAAGzwE,GAAK,IAAK,GAAIsxB,KAAKtxB,GAAOA,EAAE2D,eAAe2tB,KAAIm/C,EAAEn/C,GAAKtxB,EAAEsxB,KAQ9DmiD,GAAWlvF,OAAOmvF,QAAU,SAAkBjjB,GACrD,IAAK,GAAIkjB,GAAGvmF,EAAI,EAAGwmF,EAAIt4E,UAAU/V,OAAQ6H,EAAIwmF,EAAGxmF,IAAK,CACjDumF,EAAIr4E,UAAUlO,EACd,KAAK,GAAIkkC,KAAKqiD,GAAOpvF,OAAOT,UAAU6f,eAAexZ,KAAKwpF,EAAGriD,KAAIm/B,EAAEn/B,GAAKqiD,EAAEriD,IAE9E,MAAOm/B,gCkB/BX,MAUAzmD,GAAAC,eAA0B,8BAC1BD,EAAAM,mBAA8B,8BAC9BN,EAAAI,mBAA8B,4BAC9BJ,EAAA6pE,YAAuB,8BAbvB7pE,iCAAA,MAmBAF,GAAAC,QAAmB,QACnBD,EAAAO,SAAoB,QACpBP,EAAAK,QAAmB,QArBnBL,KjBaagqE,GAAyB,GAAIrxE,GAAAA,eAAwB,qBAChEC,WAAY,OACZC,QAASkuE,kBA+BT,QAAF1+E,GAAkE4hF,GAAAhxF,KAAlEgxF,qBAAkEA,EAXlEhxF,KAAAixF,sBAAiC,EAGjCjxF,KAAAkxF,mBAA8B,EAG9BlxF,KAAAwQ,UAA0C,gBAAbD,WAAyBA,SAAWA,SAAW,KAG5EvQ,KAAAmxF,QAAsC,gBAAXnC,SAAuBA,OAASA,OAAS,KAG5DhvF,KAAKoxF,sBAAwBpxF,KAAKixF,uBACpCjxF,KAAKqxF,yBACLrxF,KAAKsxF,uBACLtxF,KAAKixF,sBAAuB,GAlDlC,MAuDU7hF,GAAVrO,UAAAqwF,6BACI,MAAOpxF,MAAKgxF,sBAAwBtgF,EAAAA,cAAgB1Q,KAAKuxF,cAInDniF,EAAVrO,UAAAwwF,sBACI,MAAOvxF,MAAKmxF,UAAYnxF,KAAKmxF,QAAmB,WAAKnxF,KAAKmxF,QAAiB,UAGrE/hF,EAAVrO,UAAAswF,kCACQrxF,KAAKwQ,YAAcxQ,KAAKwQ,UAAUghF,SACpCzzC,QAAQC,KACN,yHAME5uC,EAAVrO,UAAAuwF,gCACI,GAAItxF,KAAKwQ,WAAyC,kBAArBqrC,kBAAiC,CAC5D,GAAM41C,GAAczxF,KAAKwQ,UAAUqhC,cAAc,MAEjD4/C,GAAYjpF,UAAUG,IAAI,2BAC1B3I,KAAKwQ,UAAUkhF,KAAK3/C,YAAY0/C,EAEhC,IAAME,GAAgB91C,iBAAiB41C,EAKnCE,IAA2C,SAA1BA,EAAchgC,SACjC5T,QAAQC,KACN,sLAMJh+C,KAAKwQ,UAAUkhF,KAAK3iC,YAAY0iC,KAKpCriF,EAAFrO,UAAA6wF,wBAAE,YACM5xF,KAAKkxF,mBAAsBlxF,KAAKmxF,UAIhCnxF,KAAKoxF,sBAAwBpxF,KAAKmxF,QAAgB,QACpDpzC,QAAQC,KACN,wFAEJh+C,KAAKkxF,mBAAoB,mBA9E7BhsF,KAAC+J,EAAAA,SAAD7J,OACE8J,SAAU2iF,EAAAA,YACVriF,SAAUqiF,EAAAA,oDAeZ3sF,SAAA2J,GAAAxI,aAAAnB,KAAeoB,EAAAA,WAAfpB,KAA2B4J,EAAAA,OAA3B1J,MAAkC2rF,SA9ClC3hF,KOYa0iF,GAAkB,GAAIpyE,GAAAA,eAAuB,mBACxDC,WAAY,OACZC,QAAS6uE,IAcEsD,IAA4Bn/E,QAASk/E,GAAiBj/E,YAAa87E,EAAAA,WAGhFr8B,GAAA,wBAMAtyD,KAAAgyF,eAA6B,GAAInmF,GAAAA,QArCjC,MAoCErK,QAAFC,eAAM6wD,EAANvxD,UAAA,qBAAE,WAAwC,MAAOf,MAAKgyF,gDAqLpD1/B,EAAFvxD,UAAA+uD,YAAE,SAAYpuD,GACV,MAAa,OAATA,GAAiB1B,KAAK4xD,eAAelwD,IAAU1B,KAAKsxD,QAAQ5vD,GACvDA,EAEF1B,KAAKmY,WAOdm6C,EAAFvxD,UAAAkxF,UAAE,SAAUC,GACRlyF,KAAKkyF,OAASA,EACdlyF,KAAKgyF,eAAeplF,QAUtB0lD,EAAFvxD,UAAAg+D,YAAE,SAAYje,EAAUqxC,GACpB,MAAOnyF,MAAK4+D,QAAQ9d,GAAS9gD,KAAK4+D,QAAQuzB,IACtCnyF,KAAKqhE,SAASvgB,GAAS9gD,KAAKqhE,SAAS8wB,IACrCnyF,KAAKkhE,QAAQpgB,GAAS9gD,KAAKkhE,QAAQixB,IAUzC7/B,EAAFvxD,UAAAwwD,SAAE,SAASzQ,EAAiBqxC,GACxB,GAAIrxC,GAASqxC,EAAQ,CACnB,GAAIC,GAAapyF,KAAKsxD,QAAQxQ,GAC1BuxC,EAAcryF,KAAKsxD,QAAQ6gC,EAC/B,OAAIC,IAAcC,GACRryF,KAAK++D,YAAYje,EAAOqxC,GAE3BC,GAAcC,EAEvB,MAAOvxC,IAASqxC,GAWlB7/B,EAAFvxD,UAAAw/D,UAAE,SAAUrP,EAASvtD,EAAgBD,GACjC,MAAIC,IAAO3D,KAAK++D,YAAY7N,EAAMvtD,GAAO,EAChCA,EAELD,GAAO1D,KAAK++D,YAAY7N,EAAMxtD,GAAO,EAChCA,EAEFwtD,GAxRXoB,KWwBaC,GAAmB,GAAI7yC,GAAAA,eAA+B,oBVV7D4yE,GAAmC,mBAARC,MAI3BC,IACJ7hB,MACE,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAC1E,UAAW,WAAY,YAEzB8hB,OAAU,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OACvF7hB,QAAW,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,MAKpEoI,GAAqC,SAAA3uE,GAAK,MAAAqoF,QAAOroF,EAAI,IAA/CsoF,GAAqB/D,EAAM,GAAjC5V,IAIM4Z,IACJjiB,MAAS,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,YAC3E8hB,OAAU,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OACpD7hB,QAAW,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,MASrCiiB,GACF,oGA+BF,QAAFC,GAAmDC,EAAuBpiD,GAAxE,GAAF9wC,GACIsH,EADJC,KAAApH,OAAAA,WAFAH,GAAAmzF,kBAA8B,EAI1B7rF,EAAJpG,UAAUkxF,UAAV7qF,KAAAvH,EAAoBkzF,GAGhBlzF,EAAKmzF,kBAAoBriD,EAASM,QAClCpxC,EAAKozF,WAAatiD,EAASM,SAAWN,EAASK,OAnFnD,MA4DuC5oC,GAAvC0qF,EAAA3rF,GA0BE2rF,EAAF/xF,UAAA69D,QAAE,SAAQ1N,GACN,MAAOA,GAAKgiC,eAGdJ,EAAF/xF,UAAAsgE,SAAE,SAASnQ,GACP,MAAOA,GAAKmQ,YAGdyxB,EAAF/xF,UAAAmgE,QAAE,SAAQhQ,GACN,MAAOA,GAAKgQ,WAGd4xB,EAAF/xF,UAAAywE,aAAE,SAAatgB,GACX,MAAOA,GAAKiiC,UAGdL,EAAF/xF,UAAA0gE,cAAE,SAAcp+D,GAAd,GAAFxD,GAAAG,IACI,IAAIsyF,GAAmB,CACrB,GAAMc,GAAM,GAAIb,MAAKc,eAAerzF,KAAKkyF,QAASpxB,MAAOz9D,EAAOiwF,SAAU,OAC1E,OAAO1E,GAAM,GAAI,SAAAvkF,GACb,MAAAxK,GAAK0zF,+BAA+B1zF,EAAK2zF,QAAQJ,EAAK,GAAIK,MAAK,KAAMppF,EAAG,OAE9E,MAAOmoF,IAAoBnvF,IAG7ByvF,EAAF/xF,UAAA4wE,aAAE,WAAA,GAAF9xE,GAAAG,IACI,IAAIsyF,GAAmB,CACrB,GAAMoB,GAAM,GAAInB,MAAKc,eAAerzF,KAAKkyF,QAASyB,IAAK,UAAWL,SAAU,OAC5E,OAAO1E,GAAM,GAAI,SAAAvkF,GAAK,MAAAxK,GAAK0zF,+BACvB1zF,EAAK2zF,QAAQE,EAAK,GAAID,MAAK,KAAM,EAAGppF,EAAI,OAE9C,MAAOsoF,KAGTG,EAAF/xF,UAAAyvE,kBAAE,SAAkBntE,GAAlB,GAAFxD,GAAAG,IACI,IAAIsyF,GAAmB,CACrB,GAAMsB,GAAM,GAAIrB,MAAKc,eAAerzF,KAAKkyF,QAAS2B,QAASxwF,EAAOiwF,SAAU,OAC5E,OAAO1E,GAAM,EAAG,SAAAvkF,GAAK,MAAAxK,GAAK0zF,+BACtB1zF,EAAK2zF,QAAQI,EAAK,GAAIH,MAAK,KAAM,EAAGppF,EAAI,OAE9C,MAAOuoF,IAA0BvvF,IAGnCyvF,EAAF/xF,UAAAy+D,YAAE,SAAYtO,GACV,GAAIohC,GAAmB,CACrB,GAAMwB,GAAM,GAAIvB,MAAKc,eAAerzF,KAAKkyF,QAAS5yB,KAAM,UAAWg0B,SAAU,OAC7E,OAAOtzF,MAAKuzF,+BAA+BvzF,KAAKwzF,QAAQM,EAAK5iC,IAE/D,MAAOwhC,QAAO1yF,KAAK4+D,QAAQ1N,KAG7B4hC,EAAF/xF,UAAAuvE,kBAAE,WAEE,MAAO,IAGTwiB,EAAF/xF,UAAAkgE,kBAAE,SAAkB/P,GAChB,MAAOlxD,MAAKkhE,QAAQlhE,KAAK+zF,wBACrB/zF,KAAK4+D,QAAQ1N,GAAOlxD,KAAKqhE,SAASnQ,GAAQ,EAAG,KAGnD4hC,EAAF/xF,UAAAizF,MAAE,SAAM9iC,GACJ,MAAOlxD,MAAKy/D,WAAWz/D,KAAK4+D,QAAQ1N,GAAOlxD,KAAKqhE,SAASnQ,GAAOlxD,KAAKkhE,QAAQhQ,KAG/E4hC,EAAF/xF,UAAA0+D,WAAE,SAAWH,EAAcwB,EAAe5P,GAGtC,GAAI4P,EAAQ,GAAKA,EAAQ,GACvB,KAAM53C,OAAM,wBAAwB43C,EAA1C,6CAGI,IAAI5P,EAAO,EACT,KAAMhoC,OAAM,iBAAiBgoC,EAAnC,oCAGI,IAAI5R,GAASt/C,KAAK+zF,wBAAwBz0B,EAAMwB,EAAO5P,EAEvD,IAAI5R,EAAO+hB,YAAcP,EACvB,KAAM53C,OAAM,iBAAiBgoC,EAAnC,2BAAkE4P,EAAlE,KAGI,OAAOxhB,IAGTwzC,EAAF/xF,UAAAs/D,MAAE,WACE,MAAO,IAAIozB,OAGbX,EAAF/xF,UAAAowD,MAAE,SAAMzvD,GAGJ,MAAoB,gBAATA,GACF,GAAI+xF,MAAK/xF,GAEXA,EAAQ,GAAI+xF,MAAKA,KAAKtiC,MAAMzvD,IAAU,MAG/CoxF,EAAF/xF,UAAA2wD,OAAE,SAAOR,EAAY+iC,GACjB,IAAKj0F,KAAKsxD,QAAQJ,GAChB,KAAMhoC,OAAM,iDAGd,IAAIopE,GAAmB,CAGjBtyF,KAAKizF,aAAe/hC,EAAKgiC,cAAgB,GAAKhiC,EAAKgiC,cAAgB,QACrEhiC,EAAOlxD,KAAKg0F,MAAM9iC,GAClBA,EAAKgjC,YAAYzwF,KAAKC,IAAI,EAAGD,KAAKE,IAAI,KAAMutD,EAAKgiC,kBAGnDe,EAANrpE,MAA0BqpE,GAAeX,SAAU,OAE7C,IAAMQ,GAAM,GAAIvB,MAAKc,eAAerzF,KAAKkyF,OAAQ+B,EACjD,OAAOj0F,MAAKuzF,+BAA+BvzF,KAAKwzF,QAAQM,EAAK5iC,IAE/D,MAAOlxD,MAAKuzF,+BAA+BriC,EAAKijC,iBAGlDrB,EAAF/xF,UAAA29D,iBAAE,SAAiBxN,EAAYkjC,GAC3B,MAAOp0F,MAAKohE,kBAAkBlQ,EAAc,GAARkjC,IAGtCtB,EAAF/xF,UAAAqgE,kBAAE,SAAkBlQ,EAAYmjC,GAC5B,GAAIC,GAAUt0F,KAAK+zF,wBACf/zF,KAAK4+D,QAAQ1N,GAAOlxD,KAAKqhE,SAASnQ,GAAQmjC,EAAQr0F,KAAKkhE,QAAQhQ,GAUnE,OAJIlxD,MAAKqhE,SAASizB,MAAct0F,KAAKqhE,SAASnQ,GAAQmjC,GAAU,GAAK,IAAM,KACzEC,EAAUt0F,KAAK+zF,wBAAwB/zF,KAAK4+D,QAAQ01B,GAAUt0F,KAAKqhE,SAASizB,GAAU,IAGjFA,GAGTxB,EAAF/xF,UAAAi/D,gBAAE,SAAgB9O,EAAYqjC,GAC1B,MAAOv0F,MAAK+zF,wBACR/zF,KAAK4+D,QAAQ1N,GAAOlxD,KAAKqhE,SAASnQ,GAAOlxD,KAAKkhE,QAAQhQ,GAAQqjC,IAGpEzB,EAAF/xF,UAAAyzF,UAAE,SAAUtjC,GACR,OACEA,EAAKujC,iBACLz0F,KAAK00F,QAAQxjC,EAAKyjC,cAAgB,GAClC30F,KAAK00F,QAAQxjC,EAAK0jC,eAClBr4C,KAAK,MAQTu2C,EAAF/xF,UAAA+uD,YAAE,SAAYpuD,GACV,GAAqB,gBAAVA,GAAoB,CAC7B,IAAKA,EACH,MAAO,KAIT,IAAImxF,GAAegC,KAAKnzF,GAAQ,CAC9B,GAAIwvD,GAAO,GAAIuiC,MAAK/xF,EACpB,IAAI1B,KAAKsxD,QAAQJ,GACf,MAAOA,IAIb,MAAO/pD,GAAXpG,UAAiB+uD,YAAjB1oD,KAAApH,KAA6B0B,IAG3BoxF,EAAF/xF,UAAA6wD,eAAE,SAAe5yC,GACb,MAAOA,aAAey0E,OAGxBX,EAAF/xF,UAAAuwD,QAAE,SAAQJ,GACN,OAAQ4jC,MAAM5jC,EAAK6jC,YAGrBjC,EAAF/xF,UAAAoX,QAAE,WACE,MAAO,IAAIs7E,MAAKuB,MAIVlC,EAAV/xF,UAAAgzF,wBAAA,SAAkCz0B,EAAcwB,EAAe5P,GAC3D,GAAM5R,GAAS,GAAIm0C,MAAKn0B,EAAMwB,EAAO5P,EAOrC,OAHIoO,IAAQ,GAAKA,EAAO,KACtBhgB,EAAO40C,YAAYl0F,KAAK4+D,QAAQtf,GAAU,MAErCA,GAQDwzC,EAAV/xF,UAAA2zF,QAAA,SAAkB7D,GACd,OAAQ,KAAOA,GAAG//E,OAAO,IAUnBgiF,EAAV/xF,UAAAwyF,+BAAA,SAAyC7nC,GACrC,MAAOA,GAAIvZ,QAAQ,kBAAmB,KAchC2gD,EAAV/xF,UAAAyyF,QAAA,SAAkBM,EAA0B5iC,GACxC,GAAMw8B,GAAI,GAAI+F,MAAKA,KAAKwB,IACpB/jC,EAAKgiC,cAAehiC,EAAKmQ,WAAYnQ,EAAKgQ,UAAWhQ,EAAKgkC,WAC1DhkC,EAAKikC,aAAcjkC,EAAKkkC,aAAclkC,EAAKmkC,mBAC/C,OAAOvB,GAAIpiC,OAAOg8B,mBAnQtBxoF,KAACgoB,EAAAA,iDAkBDhoB,SAAA2J,GAAAxI,aAAAnB,KAAeoB,EAAAA,WAAfpB,KAA2B4J,EAAAA,OAA3B1J,MAAkC0sF,QArElC5sF,KAAQ0J,EAAAA,YARRkkF,GA4DuCxgC,IWjD1BgjC,IACXnkC,OACEb,UAAW,MAEbqB,SACErB,WAAYgP,KAAM,UAAWwB,MAAO,UAAW6yB,IAAK,WACpDjxB,gBAAiBpD,KAAM,UAAWwB,MAAO,SACzCgR,eAAgBxS,KAAM,UAAWwB,MAAO,OAAQ6yB,IAAK,WACrD9xB,oBAAqBvC,KAAM,UAAWwB,MAAO,sCCnBjD,sBAqBA57D,KAAC+J,EAAAA,SAAD7J,OACE8J,SAAUslB,EAAAA,gBACV7hB,YACGC,QAAS0/C,GAAa9tC,SAAUsuE,SAxBrCyC,KAgCAvc,GAAoDsc,+BAhCpD,sBA8BApwF,KAAC+J,EAAAA,SAAD7J,OACE8J,SAAUqmF,IACV5iF,YAAaC,QAAS2/C,GAAkB0mB,SAA1CD,SAhCAwc,iCCAA,MAcEC,GAAF10F,UAAA+W,aAAE,SAAaC,EAA6BC,GACxC,SAAUD,GAAWA,EAAQI,UAAYJ,EAAQ29E,OAAU19E,GAAQA,EAAK29E,4BAH5EzwF,KAACgoB,EAAAA,aAZDuoE,iCAAA,MAsBEp9E,GAAFtX,UAAA+W,aAAE,SAAaC,EAA6BC,GACxC,SAAUD,GAAWA,EAAQI,UAAYJ,EAAQ69E,SAAY59E,GAAQA,EAAK29E,4BAH9EzwF,KAACgoB,EAAAA,WAAD9nB,OAAaua,WAAY,8GApBzBtH,KCuBaw9E,GAAqB,GAAIn2E,GAAAA,eAA8B,qCAiBlE,QAAF+E,GACoDqxE,EACpCC,GAFd,GAAFl2F,GAGIsH,EAHJC,KAAApH,OAAAA,WACoDH,GAApDi2F,eAAoDA,EAbpDj2F,EAAAm2F,QAAoD,mBAAXhH,QAAyB,OAAgBiH,OAAS,KAG3Fp2F,EAAAq2F,OAAqBr2F,EAAKm2F,SACtB,YACA,QACA,aACA,WACA,aACA,gBAOID,GACFA,EAAanE,4BA7CnB,MA2BmCxpF,GAAnCqc,EAAAtd,GAmCEsd,EAAF1jB,UAAAo1F,YAAE,SAAYpqF,GACV,GAAMqqF,GAAK,GAAIp2F,MAAKg2F,QAAQjqF,EAAS/L,KAAK81F,oBAAkBjnF,IAGtDwnF,EAAM,GAAIr2F,MAAKg2F,QAAQM,IACvBC,EAAQ,GAAIv2F,MAAKg2F,QAAQQ,MACzBC,EAAQ,GAAIz2F,MAAKg2F,QAAQU,MAKzBC,EAAQ32F,KAAK42F,kBAAkBP,GAAMvsF,MAAO,QAAS+sF,UAAW,GAAIN,GACpEO,EAAY92F,KAAK42F,kBAAkBH,GAAQ3sF,MAAO,YAAaitF,KAAM,KAQ3E,OALAV,GAAIW,cAAcT,GAGlBH,EAAGztF,KAAK4tF,EAAOE,EAAOJ,EAAKM,EAAOG,IAElC,GAIMryE,EAAV1jB,UAAA61F,kBAAA,SAA4B7I,EAAkBrnD,GAA9C,IAA4D,GAA5DuwD,MAAAjuC,EAAA,EAA4DA,EAA5DzwC,UAAA/V,OAA4DwmD,IAAAiuC,EAA5DjuC,EAAA,GAAAzwC,UAAAywC,EACI,IAAIkuC,GAAa,GAAKnJ,GAAoC,YAAErnD,EAK5D,OAHAuwD,GAAariF,KAAKm5E,GAClBkJ,EAAa7tF,QAAQ,SAAA09C,GAAQ,MAAAowC,GAAWF,cAAclwC,KAE/CowC,kBAlEXhyF,KAACgoB,EAAAA,iDAeDhoB,SAAA2J,GAAAxI,aAAAnB,KAAKoB,EAAAA,WAALpB,KAAiB4J,EAAAA,OAAjB1J,MAAwBywF,QA/BxB3wF,KAAQkK,GAAR/I,aAAAnB,KAgCKoB,EAAAA,cA1CLme,GA2BmC0yE,EAAAA,iDC3BnC,sBAsBAjyF,KAACmJ,EAAAA,UAADjJ,OACEC,SAAU,wBACVU,MAAOC,MAAS,gBAxBlBoxF,KAgCAjvC,GAAA,WACE,QAAFA,GAAsBC,EAAoCl2B,GAAxD,GAAFryB,GAAAG,IAAsBA,MAAtBooD,OAAsBA,EAAoCpoD,KAA1DkyB,SAA0DA,EACtDlyB,KAAKq3F,cAAcr3F,KAAKooD,OAAO5lD,QAE/BxC,KAAKooD,OAAO1+C,QAAQ7I,UAAU,WAC5BhB,EAAKw3F,cAAcx3F,EAAKuoD,OAAO5lD,UArCrC,MAyCU2lD,GAAVpnD,UAAAs2F,cAAA,SAAwBC,GACpBt3F,KAAKu3F,gBACS,IAAVD,GAAyB,IAAVA,EACjBt3F,KAAKw3F,UAAU,OAAOF,EAA5B,SAA0C,GAC3BA,EAAQ,GACjBt3F,KAAKw3F,UAAU,kBAAkB,IAI7BrvC,EAAVpnD,UAAAw2F,yBACIv3F,KAAKw3F,UAAU,cAAc,GAC7Bx3F,KAAKw3F,UAAU,cAAc,GAC7Bx3F,KAAKw3F,UAAU,kBAAkB,IAG3BrvC,EAAVpnD,UAAAy2F,UAAA,SAAoB5wC,EAAmB6wC,GAC/BA,EACFz3F,KAAKkyB,SAAStvB,cAAc4F,UAAUG,IAAIi+C,GAE1C5mD,KAAKkyB,SAAStvB,cAAc4F,UAAUC,OAAOm+C,IA5DnDuB,iCAAA,sBAkEAjjD,KAAC+J,EAAAA,SAAD7J,OACE8J,SAAUE,IACVI,SAAU4nF,GAAShoF,IACnBQ,cAAewnF,QArEjBrzC,iKCkBA,IAAA2zC,IAAA,WAKE,QAAFA,GACYC,EACD5rF,EACAue,GAFCtqB,KAAZ23F,UAAYA,EACD33F,KAAX+L,QAAWA,EACA/L,KAAXsqB,OAAWA,EALXtqB,KAAAkX,MAAuB0gF,GAAYC,OArBnC,MA8BEH,GAAF32F,UAAAq2B,QAAE,WACEp3B,KAAK23F,UAAUG,cAAc93F,OA/BjC03F,KfoDaK,IACXC,cAAe,IACfC,aAAc,KAOVC,GAA2B,IASjC/jB,GAAA,WA+BE,QAAFA,GAAsBgkB,EACAzsF,EACR3G,EACA4rC,GAHZ,GAAF9wC,GAAAG,IAAsBA,MAAtBm4F,QAAsBA,EACAn4F,KAAtB0L,QAAsBA,EAxBtB1L,KAAAo4F,gBAA2B,EAG3Bp4F,KAAAq4F,eAA2B,GAAIzqE,KAG/B5tB,KAAAs4F,eAA2B,GAAIlmD,KAS/BpyC,KAAAu4F,gBAA0BC,EAAAA,kCAAoCC,SAAS,GA0JvEz4F,KAAA04F,YAAwB,SAAC5uF,GACrB,GAAM6uF,GAAmB94F,EAAK+4F,sBAC1BnF,KAAKoF,MAAQh5F,EAAK+4F,qBAAuBV,EAExCr4F,GAAKs4F,QAAQW,gBAAmBH,IACnC94F,EAAKu4F,gBAAiB,EACtBv4F,EAAKk5F,aAAajvF,EAAMmyB,QAASnyB,EAAMqyB,QAASt8B,EAAKs4F,QAAQvkB,gBAKnE5zE,KAAAg5F,aAAyB,SAAClvF,GACjBjK,EAAKs4F,QAAQW,iBAIhBj5F,EAAK+4F,qBAAuBnF,KAAKoF,MACjCh5F,EAAKu4F,gBAAiB,EAEtBv4F,EAAKk5F,aACDjvF,EAAMmvF,QAAQ,GAAGh9D,QAASnyB,EAAMmvF,QAAQ,GAAG98D,QAASt8B,EAAKs4F,QAAQvkB,gBAK3E5zE,KAAAk5F,YAAwB,WACfr5F,EAAKu4F,iBAIVv4F,EAAKu4F,gBAAiB,EAGtBv4F,EAAKy4F,eAAelvF,QAAQ,SAAAypE,GAG1B,GAAM3oC,GAAY2oC,EAAO37D,QAAU0gF,GAAYuB,SAC7CtmB,EAAOvoD,OAAO3c,sBAAwBklE,EAAO37D,QAAU0gF,GAAYwB,WAEhEvmB,EAAOvoD,OAAOiN,YAAc2S,GAC/B2oC,EAAOz7C,cApLPuZ,EAAShgC,YACX3Q,KAAKq5F,kBAAoBt0F,EAAWnC,cAGpC5C,KAAKq4F,eAAe5pE,IAAI,YAAazuB,KAAK04F,aAC1C14F,KAAKq4F,eAAe5pE,IAAI,UAAWzuB,KAAKk5F,aACxCl5F,KAAKq4F,eAAe5pE,IAAI,aAAczuB,KAAKk5F,aAE3Cl5F,KAAKq4F,eAAe5pE,IAAI,aAAczuB,KAAKg5F,cAC3Ch5F,KAAKq4F,eAAe5pE,IAAI,WAAYzuB,KAAKk5F,cApH/C,MA8HE/kB,GAAFpzE,UAAAg4F,aAAE,SAAa/8D,EAAWE,EAAW5R,GAAnC,GAAFzqB,GAAAG,SAAA,KAAAsqB,IAAqCA,KACjC,IAAMgvE,GAAgBt5F,KAAKu5F,eACLv5F,KAAKu5F,gBAAkBv5F,KAAKq5F,kBAAkBn7D,wBAC9Ds7D,EAAV5uE,MAAgCmtE,GAAiCztE,EAAOxc,UAEhEwc,GAAOmvE,WACTz9D,EAAIs9D,EAAcp5E,KAAOo5E,EAAcn5E,MAAQ,EAC/C+b,EAAIo9D,EAAcvsE,IAAMusE,EAAc3uF,OAAS,EAGjD,IAAM+uF,GAASpvE,EAAOovE,QAAUxK,EAAyBlzD,EAAGE,EAAGo9D,GACzDl+C,EAAUpf,EAAIs9D,EAAcp5E,KAC5B82B,EAAU9a,EAAIo9D,EAAcvsE,IAC5BlH,EAAW2zE,EAAgBxB,eAAiB1tE,EAAO1c,aAAe,GAElEilE,EAAStiE,SAASshC,cAAc,MACtCghC,GAAOrqE,UAAUG,IAAI,sBAErBkqE,EAAOxvE,MAAM6c,KAAUk7B,EAAUs+C,EAArC,KACI7mB,EAAOxvE,MAAM0pB,IAASiqB,EAAU0iD,EAApC,KACI7mB,EAAOxvE,MAAMsH,OAAqB,EAAT+uF,EAA7B,KACI7mB,EAAOxvE,MAAM8c,MAAoB,EAATu5E,EAA5B,KAGI7mB,EAAOxvE,MAAMqF,gBAAkB4hB,EAAOizB,OAAS,KAC/Cs1B,EAAOxvE,MAAMs2F,mBAAwB9zE,EAAzC,KAEI7lB,KAAKq5F,kBAAkBtnD,YAAY8gC,GAInCkc,EAA0Blc,GAE1BA,EAAOxvE,MAAMC,UAAY,UAGzB,IAAMs2F,GAAY,GAAIlC,IAAU13F,KAAM6yE,EAAQvoD,EA2B9C,OAzBAsvE,GAAU1iF,MAAQ0gF,GAAYwB,UAG9Bp5F,KAAKs4F,eAAe3vF,IAAIixF,GAEnBtvE,EAAOiN,aACVv3B,KAAK65F,2BAA6BD,GAKpC55F,KAAK85F,sBAAsB,WACzB,GAAMC,GAA8BH,IAAc/5F,EAAKg6F,0BAEvDD,GAAU1iF,MAAQ0gF,GAAYuB,QAMzB7uE,EAAOiN,YAAgBwiE,GAAgCl6F,EAAKu4F,gBAC/DwB,EAAUxiE,WAEXvR,GAEI+zE,GAITzlB,EAAFpzE,UAAA+2F,cAAE,SAAc8B,GACZ,GAAMI,GAAYh6F,KAAKs4F,eAAe3pE,OAAOirE,EAY7C,IAVIA,IAAc55F,KAAK65F,6BACrB75F,KAAK65F,2BAA6B,MAI/B75F,KAAKs4F,eAAe96D,OACvBx9B,KAAKu5F,eAAiB,MAInBS,EAAL,CAIA,GAAMC,GAAWL,EAAU7tF,QACrBytF,EAAV5uE,MAAgCmtE,GAAiC6B,EAAUtvE,OAAOxc,UAE9EmsF,GAAS52F,MAAMs2F,mBAAwBH,EAAgBvB,aAA3D,KACIgC,EAAS52F,MAAMyjB,QAAU,IACzB8yE,EAAU1iF,MAAQ0gF,GAAYsC,WAG9Bl6F,KAAK85F,sBAAsB,WACzBF,EAAU1iF,MAAQ0gF,GAAYC,OAC9BoC,EAAmB,WAAElrC,YAAYkrC,IAChCT,EAAgBvB,gBAIrB9jB,EAAFpzE,UAAAo5F,WAAE,WACEn6F,KAAKs4F,eAAelvF,QAAQ,SAAAypE,GAAU,MAAAA,GAAOz7C,aAI/C+8C,EAAFpzE,UAAAyM,mBAAE,SAAmBzB,GAAnB,GAAFlM,GAAAG,IACS+L,IAAWA,IAAY/L,KAAKo6F,kBAKjCp6F,KAAKy0E,uBAELz0E,KAAK0L,QAAQO,kBAAkB,WAC7BpM,EAAKw4F,eAAejvF,QAAQ,SAACytB,EAAI3xB,GAC7B,MAAA6G,GAAQk9B,iBAAiB/jC,EAAM2xB,EAAIh3B,EAAK04F,mBAG9Cv4F,KAAKo6F,gBAAkBruF,IAkDjBooE,EAAVpzE,UAAA+4F,sBAAA,SAAgCjjE,EAAcgT,OAA9C,KAAAA,IAA8CA,EAA9C,GACI7pC,KAAK0L,QAAQO,kBAAkB,WAAM,MAAA6Z,YAAW+Q,EAAIgT,MAItDsqC,EAAFpzE,UAAA0zE,qBAAE,WAAA,GAAF50E,GAAAG,IACQA,MAAKo6F,iBACPp6F,KAAKq4F,eAAejvF,QAAQ,SAACytB,EAAI3xB,GAC/BrF,EAAoB,gBAAE8pC,oBAAoBzkC,EAAM2xB,EAAIh3B,EAAK04F,kBA7SjEpkB,KgBuDaplE,GACT,GAAI2Q,GAAAA,eAAoC,2CA+E1C,QAAFsZ,GAAsBt0B,EACRyoE,EACAx8B,EAC+CjjC,EACI6nB,GAJ3Cv1B,KAAtB0E,YAAsBA,EAI2C1E,KAAjEu1B,eAAiEA,EAtDjEv1B,KAAA05F,OAA6C,EAS7C15F,KAAA4N,YAAuD,EAkBvD5N,KAAA2gC,WAA+B,EAqB/B3gC,KAAAygC,gBAAoC,EAQhCzgC,KAAKq6F,eAAiB3sF,MACtB1N,KAAKs6F,gBAAkB,GAAInmB,IAAen0E,KAAMmtE,EAAQzoE,EAAaisC,GA9IzE,MA2GAnvC,QAAAC,eAAMu3B,EAANj4B,UAAA,gBAAA,WAAmB,MAAOf,MAAK2gC,eAC7B,SAAaj/B,GACX1B,KAAK2gC,UAAYj/B,EACjB1B,KAAKu6F,gEAST/4F,OAAAC,eAAMu3B,EAANj4B,UAAA,eAAA,WAAkB,MAAOf,MAAKw6F,UAAYx6F,KAAK0E,YAAY9B,mBACzD,SAAYqU,GACVjX,KAAKw6F,SAAWvjF,EAChBjX,KAAKu6F,gEAuBPvhE,EAAFj4B,UAAA8f,SAAE,WACE7gB,KAAKygC,gBAAiB,EACtBzgC,KAAKu6F,gCAGPvhE,EAAFj4B,UAAAC,YAAE,WACEhB,KAAKs6F,gBAAgB7lB,wBAIvBz7C,EAAFj4B,UAAAo5F,WAAE,WACEn6F,KAAKs6F,gBAAgBH,cAIvB34F,OAAFC,eAAMu3B,EAANj4B,UAAA,oBAAE,WACE,OACE04F,SAAUz5F,KAAKy5F,SACfC,OAAQ15F,KAAK05F,OACbn8C,MAAOv9C,KAAKu9C,MACZzvC,UAAmC,mBAAxB9N,KAAKu1B,gBACXyiE,cAAe,EAAGC,aAAc,GAA3CrtE,MACc5qB,KAAKq6F,eAAevsF,UAAc9N,KAAK8N,WAC/CH,qBAAsB3N,KAAKq6F,eAAe1sF,qBAC1CC,YAAa5N,KAAK4N,aAAe5N,KAAKq6F,eAAexsF,iBAAmB,qCAK5ErM,OAAFC,eAAMu3B,EAANj4B,UAAA,sBAAE,WACE,MAAOf,MAAKoC,YAAcpC,KAAKq6F,eAAej4F,0CAIxC42B,EAAVj4B,UAAAw5F,yCACSv6F,KAAKoC,UAAYpC,KAAKygC,gBACzBzgC,KAAKs6F,gBAAgB9sF,mBAAmBxN,KAAKiX,UAmBjD+hB,EAAFj4B,UAAAu2B,OAAE,SAAOmjE,EAAkCv+D,EAAe5R,GACtD,WADJ,KAAA4R,IAA2CA,EAA3C,GAC6B,gBAAdu+D,GACFz6F,KAAKs6F,gBAAgBvB,aAAa0B,EAAWv+D,EAA1DtR,MAAiE5qB,KAAK4zE,aAAiBtpD,IAE1EtqB,KAAKs6F,gBAAgBvB,aAAa,EAAG,EAAlDnuE,MAAyD5qB,KAAK4zE,aAAiB6mB,oBAlJ/Ev1F,KAACmJ,EAAAA,UAADjJ,OACEC,SAAU,4BACV8F,SAAU,YACVpF,MACEC,MAAS,aACT00F,+BAAgC,qDApDpCx1F,KAAE4N,EAAAA,aAIF5N,KAAE8H,EAAAA,SAPF9H,KAAQ0J,EAAAA,WAkIR1J,SAAA2J,GAAAxI,aAAAnB,KAAeoB,EAAAA,WAAfpB,KAA2B4J,EAAAA,OAA3B1J,MAAkC2J,QAClC7J,SAAA2J,GAAAxI,aAAAnB,KAAeoB,EAAAA,WAAfpB,KAA2B4J,EAAAA,OAA3B1J,MAAkC0e,EAAAA,8CAtElCy5B,QAAAr4C,KAAGuB,EAAAA,MAAHrB,MAAS,oBAGTu1F,YAAAz1F,KAAGuB,EAAAA,MAAHrB,MAAS,wBAMTq0F,WAAAv0F,KAAGuB,EAAAA,MAAHrB,MAAS,uBAOTs0F,SAAAx0F,KAAGuB,EAAAA,MAAHrB,MAAS,qBASTwI,cAAA1I,KAAGuB,EAAAA,MAAHrB,MAAS,0BAMT0I,YAAA5I,KAAGuB,EAAAA,MAAHrB,MAAS,wBAMThD,WAAA8C,KAAGuB,EAAAA,MAAHrB,MAAS,uBAYT6R,UAAA/R,KAAGuB,EAAAA,MAAHrB,MAAS,uBAtHT4zB,iCCAA,sBAiBA9zB,KAAC+J,EAAAA,SAAD7J,OACE8J,SAAUE,GAAiBolB,EAAAA,gBAC3BhlB,SAAUwpB,GAAW5pB,IACrBQ,cAAeopB,QApBjB1pB,mBC2DE,QAAFsrF,GAAgErlE,GAAAv1B,KAAhEu1B,eAAgEA,EALhEv1B,KAAAkX,MAA2C,YAG3ClX,KAAAoC,UAA+B,EAA/B,sBApBA8C,KAACC,EAAAA,UAADC,OAAAK,cAAAC,EAAAA,kBAAAC,KACEC,gBAAiBC,EAAAA,wBAAnBC,OACET,SAAF,sBACEE,QAAF,29BACED,SAAU,GACVS,MACFC,MAAA,sBACM60F,4CAAN,4BACIC,sCAAJ,sBACIC,uCAAJ,WACIliE,kCAAJ,4KAYA+hE,EAAAr0F,kEAFAq0F,iCCzDA,sBAYA11F,KAAC+J,EAAAA,SAAD7J,OACEoK,SAAUorF,IACVhrF,cAAegrF,QAdjB52C,KCaAg3C,GAAA,yBAbA,MAAAA,MAcaC,GAAwB5tF,EAAc2tF,IAG/CE,GAA2B,kFA2B/Br7F,GAAA0gD,SAAqB,sBAAsB26C,OAH3C,MAFiC9yF,GAAjCy+B,EAAA1/B,kBAjBAjC,KAACC,EAAAA,UAADC,OAAAC,SAAA,eACE8F,SAAU,cACV7F,SAAU,mIACVG,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,OACEN,QAAF,YACED,QAAF,ojBACEQ,MACFC,MAAA,eACMsM,KAAN,QACI6oF,gCAAJ,WACI5sF,uBAAJ,sBACIi0C,yBAAJ,0DAOA3b,O3CRIwzC,GAAmB,EAGvBoF,GAAA,WACE,QAAFA,GAEWvqD,EAEAspB,sBAFAx+C,KAAXk1B,OAAWA,EAEAl1B,KAAXw+C,YAAWA,EAzCX,MAAAihC,MAyDat8B,GACT,GAAIzjC,GAAAA,eAAyC,6CA8D/C,QAAFinB,GACYzU,EACA/wB,EACiDwlF,EACpC3uC,GAHbh4C,KAAZkyB,SAAYA,EACAlyB,KAAZmB,mBAAYA,EACiDnB,KAA7D2mF,QAA6DA,EACpC3mF,KAAzBg4C,MAAyBA,EArCzBh4C,KAAAwgC,WAAsB,EACtBxgC,KAAA4mF,SAAoB,EACpB5mF,KAAA2gC,WAAsB,EACtB3gC,KAAAg7C,IAAgB,cAAcq/B,KAC9Br6E,KAAAinF,qBAAiC,GAwBjCjnF,KAAAq6C,kBAAyC,GAAItyC,GAAAA,aAG7C/H,KAAA6tB,cAA2B,GAAIhiB,GAAAA,QAH/B,MArBErK,QAAFC,eAAMklC,EAAN5lC,UAAA,gBAAE,WAAiB,MAAOf,MAAK2mF,SAAW3mF,KAAK2mF,QAAQ1/C,0CAGrDzlC,OAAFC,eAAMklC,EAAN5lC,UAAA,UAAE,WAAmB,MAAOf,MAAKg7C,qCAG/Bx5C,OAAFC,eAAMklC,EAAN5lC,UAAA,gBAAE,WAA0B,MAAOf,MAAKwgC,2CAOxCh/B,OAAAC,eAAMklC,EAAN5lC,UAAA,gBAAA,WAAmB,MAAQf,MAAKg4C,OAASh4C,KAAKg4C,MAAM51C,UAAapC,KAAK2gC,eACpE,SAAaj/B,GAAc1B,KAAK2gC,UAAYt4B,EAAAA,sBAAsB3G,oCAGlEF,OAAFC,eAAMklC,EAAN5lC,UAAA,qBAAE;eAAsB,MAAOf,MAAK2mF,SAAW3mF,KAAK2mF,QAAQzkD,+CAqB1D1gC,OAAFC,eAAMklC,EAAN5lC,UAAA,cAAE,WACE,MAAOf,MAAK4mF,yCAOdplF,OAAFC,eAAMklC,EAAN5lC,UAAA,iBAAE,WAEE,OAAQf,KAAKyyB,kBAAkBnhB,aAAe,IAAIC,wCAIpDo1B,EAAF5lC,UAAAw6C,OAAE,WACOv7C,KAAKwgC,YACRxgC,KAAKwgC,WAAY,EACjBxgC,KAAKmB,mBAAmBC,eACxBpB,KAAK6mF,8BAKTlgD,EAAF5lC,UAAA06C,SAAE,WACMz7C,KAAKwgC,YACPxgC,KAAKwgC,WAAY,EACjBxgC,KAAKmB,mBAAmBC,eACxBpB,KAAK6mF,8BAKTlgD,EAAF5lC,UAAA0B,MAAE,WACE,GAAMsJ,GAAU/L,KAAKyyB,iBAEQ,mBAAlB1mB,GAAQtJ,OACjBsJ,EAAQtJ,SASZkkC,EAAF5lC,UAAA+lF,gBAAE,WACO9mF,KAAK4mF,UACR5mF,KAAK4mF,SAAU,EACf5mF,KAAKmB,mBAAmBC,iBAS5BulC,EAAF5lC,UAAAgmF,kBAAE,WACM/mF,KAAK4mF,UACP5mF,KAAK4mF,SAAU,EACf5mF,KAAKmB,mBAAmBC,iBAK5BulC,EAAF5lC,UAAA2kD,SAAE,WACE,MAAO1lD,MAAKq8C,WAId1V,EAAF5lC,UAAAsiB,eAAE,SAAevZ,GACTA,EAAMwZ,UAAYK,EAAAA,OAAS7Z,EAAMwZ,UAAYM,EAAAA,QAC/C5jB,KAAKg9C,wBAGLlzC,EAAMqE,mBAQVw4B,EAAF5lC,UAAAi8C,sBAAE,WACOh9C,KAAKoC,WACRpC,KAAKwgC,WAAYxgC,KAAKinC,WAAYjnC,KAAKwgC,UACvCxgC,KAAKmB,mBAAmBC,eACxBpB,KAAK6mF,2BAA0B,KAKnClgD,EAAF5lC,UAAAmK,aAAE,WACE,MAAOlL,MAAKoC,SAAW,KAAO,KAIhCukC,EAAF5lC,UAAA0xB,gBAAE,WACE,MAAOzyB,MAAKkyB,SAAStvB,eAGvB+jC,EAAF5lC,UAAAimF,mBAAE,WAME,GAAIhnF,KAAKwgC,UAAW,CAClB,GAAM6b,GAAYr8C,KAAKq8C,SAEnBA,KAAcr8C,KAAKinF,uBACrBjnF,KAAKinF,qBAAuB5qC,EAC5Br8C,KAAK6tB,cAAcjhB,UAKzB+5B,EAAF5lC,UAAAC,YAAE,WACEhB,KAAK6tB,cAAchhB,YAIb85B,EAAV5lC,UAAA8lF,0BAAA,SAAoCroC,OAApC,KAAAA,IAAoCA,GAApC,GACIx+C,KAAKq6C,kBAAkBt4C,KAAK,GAAI09E,IAAyBz/E,KAAMw+C,oBAhMnEt5C,KAACC,EAAAA,UAADC,OAAAC,SAAA,aACE8F,SAAU,YACVpF,MACFuM,KAAA,SACMgwC,kBAAN,iBACI4kC,uBAAJ,WACIC,8BAAJ,WACIC,qBAAsB,SACtB3uD,OAAJ,KACIkwB,uBAAJ,sBACIp6C,uBAAJ,sBACI84E,8BAAJ,WACI14E,UAAJ,0BACI0vB,YAAJ,yBACIr4B,MAAS,cAEbT,QAAA,m0CACAD,SAAA,qWACEG,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,8FAnEAZ,SAAE2J,GAAFxI,aAAAnB,KAAAoB,EAAAA,WAAApB,KAAA4J,EAAAA,OAAA1J,MAAA+9C,QAFAj+C,KAAE2hC,GAAFxgC,aAAAnB,KAAAoB,EAAAA,cAcAqgC,EAAApgC,iEA4EA8zC,oBAAAn1C,KAAAyB,EAAAA,UAYAggC,iCCnHA,sBAgBAzhC,KAAC+J,EAAAA,SAAD7J,OACE8J,SAAUI,GAAiBH,EAAAA,aAAc60C,IACzCx0C,SAAUm3B,GAAWE,IACrBj3B,cAAe+2B,GAAWE,QAnB5BU,KCWa+/C,GACX,GAAI5nE,GAAAA,eAA6B,4BCD/BkV,GAAe,6BAanB50B,KAAAquB,GAAwB,aAAauG,KAxBrC,sBAeA1vB,KAACmJ,EAAAA,UAADjJ,OACEC,SAAU,YACVU,MACEC,MAAS,YACTsM,KAAQ,QACRiwB,YAAa,4BAIjBlU,KAAAnpB,KAAGuB,EAAAA,SAxBH8gF,KCiBaC,IAIXC,mBAAoBxwE,EAAAA,QAAQ,sBAE1BC,EAAAA,MAAM,QAAS7T,EAAAA,OAAQyjB,QAAS,EAAGxjB,UAAW,oBAC9C8T,EAAAA,WAAW,iBACT/T,EAAAA,OAAQyjB,QAAS,EAAGxjB,UAAW,sBAC/B+T,EAAAA,QAAQ,+CCbd6rC,GAAA,yBAbA,MAAAA,MCWItuB,GAAe,6BAgBnB50B,KAAA67E,MAAoC,QAGpC77E,KAAAquB,GAAwB,YAAYuG,KA9BpC,sBAeA1vB,KAACmJ,EAAAA,UAADjJ,OACEC,SAAU,WACVU,MACEC,MAAS,WACT0hF,oBAAqB,iBACrBnlD,YAAa,KAEb1O,eAAgB,8BAKpBgoD,QAAA32E,KAAGuB,EAAAA,QAGH4nB,KAAAnpB,KAAGuB,EAAAA,SA9BHkhF,iCCAA,sBAYAziF,KAACmJ,EAAAA,UAADjJ,OACEC,SAAU,gBAbZuiF,iCCAA,sBAiBA1iF,KAACmJ,EAAAA,UAADjJ,OACEC,SAAU,sBAlBZwiF,iCCAA,sBAYA3iF,KAACmJ,EAAAA,UAADjJ,OACEC,SAAU,kBAbZyiF,iCCAA,sBAYA5iF,KAACmJ,EAAAA,UAADjJ,OACEC,SAAU,kBAbZ0iF,KCuDInzD,GAAe,EASnBozD,GAAA,WACE,QAAFA,GAAqBtjF,GAAA1E,KAArB0E,YAAqBA,EAjErB,MAAAsjF,MAwEaC,GAAyBjhF,EAAWghF,GAAkB,WAiBtDE,GACT,GAAIxoE,GAAAA,eAA2C,iDAiJjD,QAAF4jC,GACa5+C,EACCvD,EACsCgnF,EAC1BllF,EACwCslC,EAGpDj4B,EACA5E,EACmC6pB,GAV/C,GAAF11B,GAWIsH,EAXJC,KAAApH,KAWU0E,IAXV1E,WACaH,GAAb6E,YAAaA,EACC7E,EAAdsB,mBAAcA,EAEYtB,EAA1BoD,KAA0BA,EACwCpD,EAAlE0oC,gBAAkEA,EAGpD1oC,EAAdyQ,UAAcA,EACAzQ,EAAd6L,QAAcA,EAjFd7L,EAAAuoF,oBAA+B,EAW/BvoF,EAAAwoF,yBAAqC,GASrCxoF,EAAAyoF,WAAuB,GAGvBzoF,EAAA0oF,aAAyB,YAAY3zD,KAGrC/0B,EAAA0gD,SAAa,wBAAwB3rB,KAyBrC/0B,EAAA2oF,iBAAqB,EACrB3oF,EAAA4oF,iBAAqB,EACrB5oF,EAAA6oF,uBAA0B,EAgCtB7oF,EAAK8oF,cAAgBR,MACrBtoF,EAAK0gF,WAAa1gF,EAAK8oF,cAAcC,OAAS,OAC9C/oF,EAAKgpF,mBAAwC,mBAAnBtzD,IAxB9B,MAtFkCntB,GAAlCk7C,EAAAn8C,GAMA3F,OAAAC,eAAM6hD,EAANviD,UAAA,6BACI,MAAOf,MAAK8oF,aAAe9oF,KAAKuoC,iBAAmBvoC,KAAKuoC,gBAAgBwgD,YAAc,cAExF,SAAernF,GACb1B,KAAK8oF,YAAcpnF,mCAMvBF,OAAAC,eAAM6hD,EAANviD,UAAA,0BAAA,WAAsC,MAAOf,MAAKgpF,yBAChD,SAAuBtnF,GACrB1B,KAAKgpF,oBAAsB3gF,EAAAA,sBAAsB3G,oCAQnDF,OAAFC,eAAM6hD,EAANviD,UAAA,0BAAE,WACE,MAA2B,WAApBf,KAAKugF,aAA4BvgF,KAAKooF,oDAI/C5mF,OAAFC,eAAM6hD,EAANviD,UAAA,sBAAE,WAAgC,MAA2B,UAApBf,KAAKugF,4CAO9C/+E,OAAAC,eAAM6hD,EAANviD,UAAA,iBAAA,WAA4B,MAAOf,MAAKsoF,gBACtC,SAAc5mF,GACZ1B,KAAKsoF,WAAa5mF,EAClB1B,KAAKipF,iDAmBTznF,OAAAC,eAAM6hD,EAANviD,UAAA,6BACI,MAA2B,WAApBf,KAAK+oF,YAAgD,UAArB/oF,KAAKm/E,YAA0B,OAASn/E,KAAKm/E,iBAEtF,SAAez9E,GACTA,IAAU1B,KAAKm/E,cACjBn/E,KAAKm/E,YAAcz9E,GAAS1B,KAAK2oF,cAAcC,OAAS,OACxD5oF,KAAKmB,mBAAmBC,iDAmD5BkiD,EAAFviD,UAAAgwD,0BAAE,WACE,MAAO/wD,MAAKkpF,yBAA2BlpF,KAAK0E,aAG9C4+C,EAAFviD,UAAAyI,mBAAE,WAAA,GAAF3J,GAAAG,IACIA,MAAKmpF,wBACDnpF,KAAKshF,SAASrnC,aAChBj6C,KAAK0E,YAAY9B,cAAc4F,UAC1BG,IAAI,uBAAuB3I,KAAKshF,SAASrnC,aAIhDj6C,KAAKshF,SAAS3mC,aAAavuC,KAAKoV,EAAAA,UAAS,OAAS3gB,UAAU,WAC1DhB,EAAKupF,wBACLvpF,EAAKwpF,sBACLxpF,EAAKsB,mBAAmBC,gBAI1B,IAAMkoF,GAAetpF,KAAKshF,SAAS7oC,WAAaz4C,KAAKshF,SAAS7oC,UAAU6wC,cAAgB7hF,EAAAA,KACxF/G,GAAAA,MAAM4oF,EAActpF,KAAKupF,gBAAgB7/E,QAAS1J,KAAKwpF,gBAAgB9/E,SAClE7I,UAAU,WAAM,MAAAhB,GAAKsB,mBAAmBC,iBAG7CpB,KAAKypF,cAAc//E,QAAQ0C,KAAKoV,EAAAA,UAAU,OAAO3gB,UAAU,WACzDhB,EAAKopF,gBACLppF,EAAKsB,mBAAmBC,iBAI1BpB,KAAK0pF,eAAehgF,QAAQ0C,KAAKoV,EAAAA,UAAU,OAAO3gB,UAAU,WAC1DhB,EAAKwpF,sBACLxpF,EAAKsB,mBAAmBC,kBAI5BkiD,EAAFviD,UAAA6H,sBAAE,WAAA,GAAF/I,GAAAG,IACIA,MAAKmpF,wBAEAnpF,KAAK0oF,wBAEJ1oF,KAAK0L,QAIP1L,KAAK0L,QAAQO,kBAAkB,WAC7BhD,QAAQC,UAAUC,KAAK,WAAM,MAAAtJ,GAAK8pF,uBAGpC1gF,QAAQC,UAAUC,KAAK,WAAM,MAAAtJ,GAAK8pF,uBAKxCrmC,EAAFviD,UAAA0P,gBAAE,WAEEzQ,KAAKqoF,yBAA2B,QAChCroF,KAAKmB,mBAAmBwnB,iBAI1B26B,EAAFviD,UAAA6oF,eAAE,SAAeC,GACb,GAAMpxC,GAAYz4C,KAAKshF,SAAWthF,KAAKshF,SAAS7oC,UAAY,IAC5D,OAAOA,IAAaA,EAAUoxC,IAGhCvmC,EAAFviD,UAAA+oF,gBAAE,WACE,SAAU9pF,KAAKshF,UAAYthF,KAAKshF,SAASt6C,aAAehnC,KAAK+pF,oBAG/DzmC,EAAFviD,UAAAipF,UAAE,WACE,QAAShqF,KAAKiqF,aAGhB3mC,EAAFviD,UAAAmpF,kBAAE,WACE,MAAOlqF,MAAKmqF,iBAAmBnqF,KAAKshF,SAAS8I,kBAAoBpqF,KAAKqqF,qBAGxE/mC,EAAFviD,UAAAupF,wBAAE,WAEE,MAA2B,WAApBtqF,KAAK+oF,aAA4B/oF,KAAKgqF,aACzChqF,KAAKgqF,cAAgBhqF,KAAKkqF,qBAGhC5mC,EAAFviD,UAAAwpF,kBAAE,WAEE,MAAOvqF,MAAKgqF,aAAmC,WAApBhqF,KAAK+oF,YAA2B/oF,KAAK8pF,mBAIlExmC,EAAFviD,UAAAypF,sBAAE,WACE,MAAQxqF,MAAK0pF,gBAAkB1pF,KAAK0pF,eAAelnF,OAAS,GACxDxC,KAAKshF,SAASmJ,WAAc,QAAU,QAI5CnnC,EAAFviD,UAAAy/E,qBAAE,WAAA,GAAF3gF,GAAAG,IACQA,MAAKuqF,qBAAuBvqF,KAAKmqF,iBAG/BnqF,KAAK6oF,qBACP7oF,KAAKooF,oBAAqB,EAE1B1I,EAAAA,UAAU1/E,KAAK0qF,OAAO9nF,cAAe,iBAAiBwJ,KAAKyI,EAAAA,KAAK,IAAIhU,UAAU,WAC5EhB,EAAKuoF,oBAAqB,KAI9BpoF,KAAKugF,WAAa,SAClBvgF,KAAKmB,mBAAmBC,iBAQpBkiD,EAAVviD,UAAAqoF,iCACI,GAAIppF,KAAKshF,SAASt6C,aAAehnC,KAAK+pF,kBACpC,KAAMY,MAKFrnC,EAAVviD,UAAAkoF,yBACIjpF,KAAK4qF,iBACL5qF,KAAKqpF,uBAOC/lC,EAAVviD,UAAA6pF,oCACI,IAAI5qF,KAAKypF,cAAe,CACtB,GAAIoB,GACAC,CACJ9qF,MAAKypF,cAAcrgF,QAAQ,SAAC2hF,GAC1B,GAAmB,UAAfA,EAAKlP,MAAmB,CAC1B,GAAIgP,GAAahrF,EAAKmrF,UACpB,KAAMC,GAAmC,QAE3CJ,GAAYE,MACP,IAAmB,QAAfA,EAAKlP,MAAiB,CAC/B,GAAIiP,EACF,KAAMG,GAAmC,MAE3CH,GAAUC,OAUVznC,EAAVviD,UAAAsoF,+BACI,GAAIrpF,KAAKshF,SAAU,CACjB,GAAIn/B,KAEJ,IAAqC,SAAjCniD,KAAKwqF,wBAAoC,CAC3C,GAAIU,GAAYlrF,KAAKypF,cACjBzpF,KAAKypF,cAAch9E,KAAK,SAAAs+E,GAAQ,MAAe,UAAfA,EAAKlP,QAAqB,KAC1DsP,EAAUnrF,KAAKypF,cACfzpF,KAAKypF,cAAch9E,KAAK,SAAAs+E,GAAQ,MAAe,QAAfA,EAAKlP,QAAmB,IAExDqP,GACF/oC,EAAIvtC,KAAKs2E,EAAU78D,IACVruB,KAAKsoF,YACdnmC,EAAIvtC,KAAK5U,KAAKuoF,cAGZ4C,GACFhpC,EAAIvtC,KAAKu2E,EAAQ98D,QAEVruB,MAAK0pF,iBACdvnC,EAAMniD,KAAK0pF,eAAe1/E,IAAI,SAAA8zC,GAAS,MAAAA,GAAMzvB,KAG/CruB,MAAKshF,SAASp/B,kBAAkBC,KAK1BmB,EAAZviD,UAAAooF,sBAAE,WACE,IAAKnpF,KAAKshF,SACR,KAAM8J,MAQV9nC,EAAFviD,UAAA4oF,iBAAE,WACE,GAAwB,YAApB3pF,KAAK+oF,YAA4B/oF,KAAK0qF,QAAU1qF,KAAK0qF,OAAO9nF,cAAckS,SAAStS,OAAQ,CAC7F,GAAIxC,KAAKsQ,YAActQ,KAAKsQ,UAAUK,UAGpC,YADA3Q,KAAK0oF,uBAAwB,EAG/B,KAAKn4E,SAAS86E,gBAAgBn6E,SAASlR,KAAK0E,YAAY9B,eACtD,MAQF,KAAoB,GALd0oF,GAAiBtrF,KAAKurF,aACxBvrF,KAAKkpF,wBAAwBtmF,cAAcs7B,yBACzCstD,EAAaxrF,KAAKurF,aACpBvrF,KAAK0qF,OAAO9nF,cAAckS,SAAS,GAAGopB,yBACtCutD,EAAa,EACvBziC,EAAA,EAA0BtqC,EAAA1e,KAAK0qF,OAAO9nF,cAAckS,SAA1Bk0C,EAA1BtqC,EAAAlc,OAA0BwmD,IAA1B,CACQyiC,GADR/sE,EAAAsqC,GAC4BhmD,YAEtBhD,KAAKyoF,iBAAmB+C,EAAaF,EA9ZjB,EA+ZpBtrF,KAAKwoF,iBAhagB,IAgaGiD,EAAkCC,OAE1D1rF,MAAKyoF,iBAAmB,EACxBzoF,KAAKwoF,iBAAmB,CAE1BxoF,MAAK0oF,uBAAwB,EAC7B1oF,KAAKmB,mBAAmBC,gBAIlBkiD,EAAVviD,UAAAwqF,aAAA,SAAuBI,GACnB,MAAO3rF,MAAKiD,MAA4B,QAApBjD,KAAKiD,KAAKvB,MAAkBiqF,EAAK9+D,MAAQ8+D,EAAKzrE,qBArYtEhb,KAACC,EAAAA,UAADC,OAAAC,SAAA,iBACE8F,SAAU,eACV7F,SAAU,skbAMVS,MACEC,MAAJ,iBACI4lF,6CAAJ,2BACIC,yCAAJ,uBACIC,4CAAJ,0BACIC,2CAAJ,yBACIC,iCAAJ,sBACAC,mCAAA,iBACAC,sCAAA,sBACMC,0CAAN,4BACIC,kCAAJ,oBACIC,oCAAJ,sBACIC,sBAAJ,mBACIj5B,qBAAJ,oBACIC,mBAAJ,kBACIi5B,uBAAJ,8BACIC,qBAAJ,4BACIC,sBAAJ,6BACIC,mBAAJ,0BACIC,mBAAJ,0BACIC,qBAAJ,4BACIC,qBAAJ,4BACIh0D,kCAAJ,uBAEArzB,QAAA,SACAC,cAAAC,EAAAA,kBAAAC,KACAC,gBAAAC,EAAAA,wBAAAC,WAIAw9C,EAAAlqC,eAAA,WAAA,QACAlU,KAAA4N,EAAAA,aACA5N,KAAA+H,EAAAA,oBACA/H,SAAA2J,GAAAxI,aAAAnB,KAAAoB,EAAAA,WAAApB,KAAA4J,EAAAA,OAAA1J,MAAAkiF,QACApiF,KAAAkB,EAAAA,eAAAC,aAAAnB,KAAmCoB,EAAAA,aACnCpB,SAAA2J,GAAAxI,aAAAnB,KAAAoB,EAAAA,WAAApB,KAAA4J,EAAAA,OAAA1J,MAAA8iF,QACAhjF,KAAA0J,EAAAA,wHAvHA00C,EAAA/8C,gBAJAwiF,aAAA7jF,KAAAuB,EAAAA,QA+NAqmF,qBAAA5nF,KAAAuB,EAAAA,QAtOAukF,YAAA9lF,KAAsBuB,EAAAA,QAwOtB85E,aAAAr7E,KAAAuB,EAAAA,QA7LAsmF,eAAA7nF,KAAAsB,EAAAA,UAAApB,MAAA,eA5BA8jF,0BAAAhkF,KAAAsB,EAAAA,UAAApB,MAAA,yBA8NA4nF,qBAAA9nF,KAAAsB,EAAAA,UAAApB,MAAA,0GApGA2kF,oBAAA7kF,KAAA6tB,EAAAA,aAAA3tB,MAAAyiF,MAUAoC,cAAA/kF,KAAA6tB,EAAAA,aAAA3tB,MAAAwiF,MAsBA8B,iBAAAxkF,KAAQqO,EAAAA,gBAARnO,MAAAmiF,MAsBAkC,gBAAAvkF,KAAAqO,EAAAA,gBAAAnO,MAAAuiF,MAuBA4B,kBAAArkF,KAAAqO,EAAAA,gBAAAnO,MAAA0iF,MAEA0B,kBAAAtkF,KAAAqO,EAAAA,gBAAYnO,MAAZ2iF,OAEAzkC,GACA2kC,gCCnOA,sBAmBA/iF,KAAC+J,EAAAA,SAAD7J,OACEwK,cACE23E,GACAjkC,GACAqkC,GACAC,GACAC,GACAC,GACAC,IAEF74E,SAAUC,EAAAA,cACVK,SACE+3E,GACAjkC,GACAqkC,GACAC,GACAC,GACAC,GACAC,QArCJvgD,KvBuCIylD,GAA+B,EAGnCC,GAAA,WACE,QAAFA,GAEWh4D,EAEAklB,GAFAp6C,KAAXk1B,OAAWA,EAEAl1B,KAAXo6C,OAAWA,EA/CX,MAAA8yC,MAoDAC,GAAA,yBApDA,MAAAA,MAqDaC,GAA4BnmF,EAAmBkmF,IAS/CE,GACT,GAAI3tE,GAAAA,eAA8C,oCAChDC,WAAY,OACZC,QAAS0tE,mBA0Fb,QAAFvP,GACY58E,EACAuD,EACkC4wB,GAH5C,GAAFz1B,GAIIsH,EAJJC,KAAApH,OAAAA,WACYH,GAAZsB,mBAAYA,EACAtB,EAAZ6E,YAAYA,EA7DZ7E,EAAAm/E,WAAuB,EAIvBn/E,EAAAy/E,SAAqB,EAerBz/E,EAAAskB,YAA0D,KAgB1DtkB,EAAA0tF,eAAM,GAAIxlF,GAAAA,aAGVlI,EAAA0jC,OAAkD,GAAIx7B,GAAAA,aAGtDlI,EAAAylB,OAAkD,GAAIvd,GAAAA,aAatDlI,EAAA+yC,cAGA/yC,EAAAwuB,GAAe,oBAAoB4+D,KAQ/BptF,EAAK2tF,yBAA2Bl4D,EAASwsD,wBAlB7C,MAtDqC15E,GAArC21E,EAAA52E,GAUE3F,OAAFC,eAAMs8E,EAANh9E,UAAA,cAAE,WAAwB,MAAOf,MAAKs/E,SAAWt/E,KAAKg/E,2CAuBtDx9E,OAAAC,eAAMs8E,EAANh9E,UAAA,6BAAA,WAAyC,MAAOf,MAAKwtF,4BACnD,SAA0B9rF,GACxB1B,KAAKwtF,uBAAyBnlF,EAAAA,sBAAsB3G,oCAoBxDF,OAAAC,eAAMs8E,EAANh9E,UAAA,iBAAA,SAAgBW,aACRA,IAASA,EAAMc,SACjBd,EAAM64B,MAAM,KAAKnxB,QAAQ,SAAAw9C,GAAa,MAAA/mD,GAAK+yC,WAAWgU,EAAUr1C,SAAU,IAC1EvR,KAAK0E,YAAY9B,cAAcgkD,UAAY,qCAiB/Cm3B,EAAFh9E,UAAAyI,mBAAE,WACExJ,KAAKC,YAAc,GAAIg+C,GAAAA,2BAAsCj+C,KAAK0mC,SAASmgB,WAE3E7mD,KAAKihF,kBAOPlD,EAAFh9E,UAAA4/E,cAAE,SAAcxtC,GACRnzC,KAAKq9C,QACPr9C,KAAKq9C,MAAMz6C,cAAcuwC,UAAYA,IAKzC4qC,EAAFh9E,UAAA2/E,cAAE,WACE,MAAO1gF,MAAKq9C,MAAQr9C,KAAKq9C,MAAMz6C,cAAcuwC,UAAY,GAI3D4qC,EAAFh9E,UAAAkgF,eAAE,WACEjhF,KAAKg/E,YAAch/E,KAAK0mC,QAAQlkC,OAChCxC,KAAK4yC,WAAW,4BAA8B5yC,KAAKg/E,UACnDh/E,KAAK4yC,WAAW,4BAA8B5yC,KAAKg/E,UACnDh/E,KAAKmB,mBAAmBC,gBAI1B28E,EAAFh9E,UAAAygF,iBAAE,SAAiBpnC,GACf,GAAMtwC,GAAQ,GAAIojF,IAA6BltF,KAAMo6C,EACrDp6C,MAAKutF,eAAexrF,KAAK+H,mBA3H7B5E,KAACC,EAAAA,UAADC,OAAAC,SAAA,mBACEC,SAAU,wJACVC,QAAF,qjBACEE,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,OACEqF,SAAF,kBACE3F,QAAF,iBACEO,MACFC,MAAA,oBAEA2M,YACAC,QAAAuwC,GAAAtwC,YAAAkrE,2FAnEA74E,SAAE2J,GAAFxI,aAAAnB,KAAA4J,EAAAA,OAAA1J,MAAAioF,SA6IAtP,EAAAx3E,6GAvDAmgC,UAAAxhC,KAAAqO,EAAAA,gBAAAnO,MAAAuhC,IAAApF,aAAA,MAGAqF,eAAA1hC,KAAAqO,EAAAA,gBAAAnO,MAAAyhC,MAGA1iB,cAAAjf,KAAAuB,EAAAA,QAGAq7E,wBAAA58E,KAAAuB,EAAAA,QAGA8mF,iBAAAroF,KAAAyB,EAAAA,SAMA48B,SAAAr+B,KAAAyB,EAAAA,SASA2e,SAAApgB,KAAAyB,EAAAA,SAIA6B,YAAAtD,KAAAuB,EAAAA,MAAArB,MAAA;kBASA24E,qBC5HE,QAAFC,GAEaj5E,GAAA/E,KAAb+E,WAAaA,EArBb,sBAcAG,KAACmJ,EAAAA,UAADjJ,OACEC,SAAU,0BACV8F,SAAU,gEARZjG,KAAmB4N,EAAAA,cARnBkrE,KvH8DaC,GACT,GAAIv+D,GAAAA,eAAqC,oCAQhCw+D,IACXtrE,QAASqrE,GACTjuD,MAAO7C,EAAAA,SACP8C,WAAYkuD,GAODC,IACXxrE,QAASkiB,EAAAA,kBACTjiB,YAAaqP,EAAAA,WAAW,WAAM,MAAAm8D,MAC9BrpD,OAAO,iBAiFP,QAAFqpD,GAAsBnsD,EAA8BvI,EAC9BnJ,EACA89D,EACAn9E,EAC0CmnC,EAC9BrlC,EACQ+tD,EACUxgD,EAE9B7E,GATpB,GAAF9L,GAAAG,IAAsBA,MAAtBkyB,SAAsBA,EAA8BlyB,KAApD2pB,SAAoDA,EAC9B3pB,KAAtBwgB,kBAAsBA,EACAxgB,KAAtBs+E,MAAsBA,EACAt+E,KAAtBmB,mBAAsBA,EAC0CnB,KAAhEsoC,gBAAgEA,EAC9BtoC,KAAlCiD,KAAkCA,EACQjD,KAA1CgxD,WAA0CA,EACUhxD,KAApDwQ,UAAoDA,EAE9BxQ,KAAtB2L,eAAsBA,EAvDtB3L,KAAAu+E,qBAAgC,EAChCv+E,KAAAw+E,uBAAkC,EASlCx+E,KAAAy+E,wBAAmC,EAMnCz+E,KAAA0+E,sBAAkCl3E,EAAAA,aAAaC,MAG/CzH,KAAA2+E,qBAA0C,GAAI9yE,GAAAA,QAG9C7L,KAAAu5C,UAAoC,aAGpCv5C,KAAAw5C,WAAe,aA2Cfx5C,KAAA4+E,kBAAsC,EA2DtC5+E,KAAA6+E,iBAAoE1kC,EAAAA,MAAM,WACtE,MAAIt6C,GAAKi/E,cAAgBj/E,EAAKi/E,aAAap4C,QACnChmC,EAAAA,MAAZqJ,UAAA,GAAqBlK,EAAKi/E,aAAap4C,QAAQ18B,IAAI,SAAAowC,GAAU,MAAAA,GAAOC,qBAKzDx6C,EAAKy+E,MAAMhkC,SACbn0B,eACA/Z,KAAKyI,EAAAA,KAAK,GAAI0lC,EAAAA,UAAU,WAAM,MAAA16C,GAAKg/E,sBA/P5C,MAgKAr9E,QAAAC,eAAM48E,EAANt9E,UAAA,4BAAA,WAAwC,MAAOf,MAAKw+E,2BAClD,SAAyB98E,GACvB1B,KAAKw+E,sBAAwBn2E,EAAAA,sBAAsB3G,oCAcrD28E,EAAFt9E,UAAAC,YAAE,WACEhB,KAAK0+E,sBAAsBz9E,cAC3BjB,KAAKu+E,qBAAsB,EAC3Bv+E,KAAK++E,gBACL/+E,KAAK2+E,qBAAqB9xE,YAI5BrL,OAAFC,eAAM48E,EAANt9E,UAAA,iBAAE,WACE,MAAOf,MAAK4+E,kBAAoB5+E,KAAK8+E,aAAaE,2CAKpDX,EAAFt9E,UAAAk+E,UAAE,WACEj/E,KAAKk/E,iBACLl/E,KAAKm/E,eAIPd,EAAFt9E,UAAAq+E,WAAE,WACEp/E,KAAKq/E,cAEAr/E,KAAK4+E,mBAIN5+E,KAAKm7C,WAEPn7C,KAAK8+E,aAAax5D,OAAOvjB,OAG3B/B,KAAK8+E,aAAaQ,QAAUt/E,KAAK4+E,kBAAmB,EAEhD5+E,KAAK6kB,aAAe7kB,KAAK6kB,YAAYjD,gBACvC5hB,KAAK6kB,YAAY7C,SACjBhiB,KAAKu/E,4BAA4Bt+E,eAK9BjB,KAAKu+E,qBAKRv+E,KAAKmB,mBAAmBwnB,kBAQ5BnnB,OAAFC,eAAM48E,EAANt9E,UAAA,2BAAE,WAAA,GAAFlB,GAAAG,IACI,OAAOU,GAAAA,MACLV,KAAK6+E,iBACL7+E,KAAK8+E,aAAa7+E,YAAYm+C,OAAOhyC,KAAK4E,EAAAA,OAAO,WAAM,MAAAnR,GAAK++E,oBAC5D5+E,KAAK2+E,qBACL3+E,KAAKw/E,oBACLx/E,KAAK6kB,YACD7kB,KAAK6kB,YAAYoH,cAAc7f,KAAK4E,EAAAA,OAAO,WAAM,MAAAnR,GAAK++E,oBACtDzyE,EAAAA,MACJC,KAEApC,EAAAA,IAAI,SAAAF,GAAS,MAAAA,aAAiB21E,IAA2B31E,EAAQ,yCAkBrEtI,OAAFC,eAAM48E,EAANt9E,UAAA,oBAAE,WACE,MAAIf,MAAK8+E,cAAgB9+E,KAAK8+E,aAAa7+E,YAClCD,KAAK8+E,aAAa7+E,YAAY48C,WAGhC,sCAIXr7C,OAAAC,eAAc48E,EAAdt9E,UAAA,gDACI,OAAKf,MAAKwQ,UAIH9P,EAAAA,MACLg/E,EAAAA,UAAU1/E,KAAKwQ,UAAW,SAC1BkvE,EAAAA,UAAU1/E,KAAKwQ,UAAW,aAE3BpE,KAAK4E,EAAAA,OAAO,SAAClH,GACZ,GAAM61E,GAAc71E,EAA2B,OACzC81E,EAAY//E,EAAKmxD,WACnBnxD,EAAKmxD,WAAWtsD,YAAY9B,cAAgB,IAEhD,OAAO/C,GAAK++E,kBACJe,IAAgB9/E,EAAKqyB,SAAStvB,iBAC5Bg9E,IAAcA,EAAU1uE,SAASyuE,OAChC9/E,EAAKglB,cAAgBhlB,EAAKglB,YAAYsH,eAAejb,SAASyuE,MAflExzE,EAAAA,GAAa,uCAoBxBkyE,EAAFt9E,UAAA41B,WAAE,SAAWj1B,GAAX,GAAF7B,GAAAG,IACIiJ,SAAQC,QAAQ,MAAMC,KAAK,WAAM,MAAAtJ,GAAKggF,iBAAiBn+E,MAIzD28E,EAAFt9E,UAAA61B,iBAAE,SAAiBC,GACf72B,KAAKu5C,UAAY1iB,GAInBwnD,EAAFt9E,UAAA+1B,kBAAE,SAAkBD,GAChB72B,KAAKw5C,WAAa3iB,GAIpBwnD,EAAFt9E,UAAAg2B,iBAAE,SAAiBC,GACfh3B,KAAKkyB,SAAStvB,cAAcR,SAAW40B,GAGzCqnD,EAAFt9E,UAAAsiB,eAAE,SAAevZ,GACb,GAAMwZ,GAAUxZ,EAAMwZ,OAYtB,IANIA,IAAY6mB,EAAAA,QACdrgC,EAAMqE,iBAKJnO,KAAKm7C,YAAc73B,IAAY6mB,EAAAA,QAAW7mB,IAAY2Z,EAAAA,UAAYnzB,EAAM6yC,QAC1E38C,KAAK8/E,mBACL9/E,KAAK2+E,qBAAqB/xE,OAC1B9C,EAAM0sB,sBACD,IAAIx2B,KAAK+/E,cAAgBz8D,IAAYK,EAAAA,OAAS3jB,KAAKm7C,UACxDn7C,KAAK+/E,aAAa/iC,wBAClBh9C,KAAK8/E,mBACLh2E,EAAMqE,qBACD,CACL,GAAM6xE,GAAiBhgF,KAAK8+E,aAAa7+E,YAAY48C,WAC/CH,EAAap5B,IAAY2Z,EAAAA,UAAY3Z,IAAY6Z,EAAAA,UAEnDn9B,MAAKm7C,WAAa73B,IAAY28D,EAAAA,IAChCjgF,KAAK8+E,aAAa7+E,YAAY4jB,UAAU/Z,GAC/B4yC,GAAc18C,KAAKkgF,YAC5BlgF,KAAKi/E,aAGHviC,GAAc18C,KAAK8+E,aAAa7+E,YAAY48C,aAAemjC,IAC7DhgF,KAAKmgF,oBAKX9B,EAAFt9E,UAAAq/E,aAAE,SAAat2E,GACX,GAAIw8D,GAASx8D,EAAgC,OACzCpI,EAAgC4kE,EAAO5kE,KAGvB,YAAhB4kE,EAAOphE,OACTxD,EAAiB,IAATA,EAAc,KAAO+4B,WAAW/4B,IAQtC1B,KAAKqgF,iBAAmB3+E,GAAS6O,SAAS2zB,gBAAkBp6B,EAAMw8D,SACpEtmE,KAAKqgF,eAAiB3+E,EACtB1B,KAAKu5C,UAAU73C,GAEX1B,KAAKkgF,YACPlgF,KAAKi/E,cAKXZ,EAAFt9E,UAAAymD,aAAE,WACMxnD,KAAKkgF,aACPlgF,KAAKqgF,eAAiBrgF,KAAKkyB,SAAStvB,cAAclB,MAClD1B,KAAKk/E,iBACLl/E,KAAKm/E,aAAY,KAUbd,EAAVt9E,UAAAo+E,YAAA,SAAsBmB,OAAtB,KAAAA,IAAsBA,GAAtB,GACQtgF,KAAKgxD,YAA6C,SAA/BhxD,KAAKgxD,WAAWuvB,aACjCD,EACFtgF,KAAKgxD,WAAWwvB,uBAEhBxgF,KAAKgxD,WAAWuvB,WAAa,SAG/BvgF,KAAKy+E,wBAAyB,IAK1BJ,EAAVt9E,UAAAs+E,uBACQr/E,KAAKy+E,yBACPz+E,KAAKgxD,WAAWuvB,WAAa,OAC7BvgF,KAAKy+E,wBAAyB,IAa1BJ,EAAVt9E,UAAAo/E,2BACI,GAAMl+E,GAAQjC,KAAK8+E,aAAa7+E,YAAYizC,iBAAmB,EACzD+L,EAAaC,EAA8Bj9C,EAC7CjC,KAAK8+E,aAAap4C,QAAS1mC,KAAK8+E,aAAal4C,cAE3C65C,EAAoBthC,EACxBl9C,EAAQg9C,EA3W4B,GA6WpCj/C,KAAK8+E,aAAa4B,gBA1WiB,IA8WrC1gF,MAAK8+E,aAAa6B,cAAcF,IAO1BpC,EAAVt9E,UAAA6/E,iDACUC,EAAc7gF,KAAKs+E,MAAMhkC,SAASn0B,eAAe/Z,KAAKyI,EAAAA,KAAK,IAC3DisE,EAAgB9gF,KAAK8+E,aAAap4C,QAAQh9B,QAAQ0C,KACtD8xD,EAAAA,IAAI,WAAM,MAAAr+D,GAAKkhF,kBAAkBC,wBAGjCn3C,EAAAA,MAAM,GAIR,OAAOnpC,GAAAA,MAAMmgF,EAAaC,GACvB10E,KAGCmuC,EAAAA,UAAU,WAGR,MAFA16C,GAAKigF,mBACLjgF,EAAKi/E,aAAamC,iBACXphF,EAAKqhF,sBAGdrsE,EAAAA,KAAK,IAGNhU,UAAU,SAAAiJ,GAAS,MAAAjK,GAAKshF,kBAAkBr3E,MAIvCu0E,EAAVt9E,UAAAg+E,yBACQ/+E,KAAK6kB,cACP7kB,KAAKo/E,aACLp/E,KAAK6kB,YAAYmB,UACjBhmB,KAAK6kB,YAAc,OAIfw5D,EAAVt9E,UAAA8+E,iBAAA,SAA2Bn+E,GACvB,GAAM0/E,GAAYphF,KAAK8+E,cAAgB9+E,KAAK8+E,aAAa36D,YACvDnkB,KAAK8+E,aAAa36D,YAAYziB,GAC9BA,EAII2/E,EAA0B,MAAbD,EAAoBA,EAAY,EAI/CphF,MAAKgxD,WACPhxD,KAAKgxD,WAAWswB,SAAS5/E,MAAQ2/E,EAEjCrhF,KAAKkyB,SAAStvB,cAAclB,MAAQ2/E,GAShChD,EAAVt9E,UAAAogF,kBAAA,SAA4Br3E,GACpBA,GAASA,EAAMorB,SACjBl1B,KAAKuhF,6BAA6Bz3E,EAAMorB,QACxCl1B,KAAK6/E,iBAAiB/1E,EAAMorB,OAAOxzB,OACnC1B,KAAKu5C,UAAUzvC,EAAMorB,OAAOxzB,OAC5B1B,KAAKkyB,SAAStvB,cAAcH,QAC5BzC,KAAK8+E,aAAa0C,iBAAiB13E,EAAMorB,SAG3Cl1B,KAAKo/E,cAMCf,EAAVt9E,UAAAwgF,6BAAA,SAAuChK,GACnCv3E,KAAK8+E,aAAap4C,QAAQt9B,QAAQ,SAAAgxC,GAC5BA,GAAUm9B,GAAQn9B,EAAOvjC,UAC3BujC,EAAOqB,cAKL4iC,EAAVt9E,UAAAm+E,oCACI,KAAKl/E,KAAK8+E,aACR,KAAM2C,IAGHzhF,MAAK6kB,YAaR7kB,KAAK6kB,YAAYmkD,YAAY7oD,MAAOngB,KAAK0hF,mBAZzC1hF,KAAK+pC,QAAU,GAAIjpB,GAAAA,eAAe9gB,KAAK8+E,aAAax5E,SAAUtF,KAAKwgB,mBACnExgB,KAAK6kB,YAAc7kB,KAAK2pB,SAASsD,OAAOjtB,KAAKq2C,qBAEzCr2C,KAAK2L,iBACP3L,KAAK0+E,sBAAwB1+E,KAAK2L,eAAeO,SAASrL,UAAU,WAC9DhB,EAAKs7C,WAAat7C,EAAKglB,aACzBhlB,EAAKglB,YAAYmkD,YAAY7oD,MAAOtgB,EAAK6hF,sBAS7C1hF,KAAK6kB,cAAgB7kB,KAAK6kB,YAAYjD,gBACxC5hB,KAAK6kB,YAAYhD,OAAO7hB,KAAK+pC,SAC7B/pC,KAAKu/E,4BAA8Bv/E,KAAK4gF,6BAG1C,IAAMe,GAAU3hF,KAAKm7C,SAErBn7C,MAAK8+E,aAAamC,iBAClBjhF,KAAK8+E,aAAaQ,QAAUt/E,KAAK4+E,kBAAmB,EAIhD5+E,KAAKm7C,WAAawmC,IAAY3hF,KAAKm7C,WACrCn7C,KAAK8+E,aAAav7C,OAAOxhC,QAIrBs8E,EAAVt9E,UAAAs1C,6BACI,MAAO,IAAI9pB,GAAAA,eACTC,iBAAkBxsB,KAAKqrC,sBACvBJ,eAAgBjrC,KAAKsoC,kBACrBnoB,MAAOngB,KAAK0hF,gBACZ3kE,UAAW/c,KAAKiD,QAIZo7E,EAAVt9E,UAAAsqC,+BAUI,MATArrC,MAAK+gF,kBAAoB/gF,KAAK2pB,SAAStgB,WACpCkhC,oBAAoBvqC,KAAK4hF,wBACzBn3C,wBAAuB,GACvBy7B,UAAS,GACT56B,gBACEK,QAAS,QAASC,QAAS,SAAUI,SAAU,QAASC,SAAU,QAClEN,QAAS,QAASC,QAAS,MAAOI,SAAU,QAASC,SAAU,YAG7DjsC,KAAK+gF,mBAGN1C,EAAVt9E,UAAA6gF,gCACI,MAAI5hF,MAAK6hF,YACA7hF,KAAK6hF,YAAY98E,WAGnB/E,KAAKgxD,WAAahxD,KAAKgxD,WAAWD,4BAA8B/wD,KAAKkyB,UAItEmsD,EAAVt9E,UAAA2gF,yBACI,MAAO1hF,MAAK4hF,uBAAuBh/E,cAAcs7B,wBAAwB/d,OAOnEk+D,EAAVt9E,UAAA++E,4BACI9/E,KAAK8+E,aAAa7+E,YAAY4B,cAAc7B,KAAK8+E,aAAagD,sBAAwB,GAAK,IAIrFzD,EAAVt9E,UAAAm/E,oBACI,GAAMn0E,GAA4B/L,KAAKkyB,SAAStvB,aAChD,QAAQmJ,EAAQg2E,WAAah2E,EAAQ3J,WAAapC,KAAKw+E,sCApf3Dt5E,KAACmJ,EAAAA,UAADjJ,OACEC,SAAU,oDACVU,MACE+4E,aAAgB,MAChBpsE,cAAe,2CACfsvE,2BAA4B,uCAC5Bl/B,+BAAgC,mBAChCtwC,uBAAwB,qDACxBmwC,mBAAoB,iDAGpBs/B,YAAa,iBACb7jD,SAAU,eACVg0B,UAAW,uBACX/zB,YAAa,0BAEflzB,SAAU,yBACVwH,WAAYyrE,4CA1Fdl5E,KAAE4N,EAAAA,aAbF5N,KAAEioB,EAAAA,UAsBFjoB,KAAE6M,EAAAA,mBAHF7M,KAAE8H,EAAAA,SARF9H,KAAE+H,EAAAA,oBAmJF/H,SAAA2J,GAAAxI,aAAAnB,KAAe4J,EAAAA,OAAf1J,MAAsB64E,QAlKtB/4E,KAAQkB,EAAAA,eAARC,aAAAnB,KAmKeoB,EAAAA,aAhIfpB,KAAQo+C,GAARj9C,aAAAnB,KAiIeoB,EAAAA,WAjIfpB,KAiI2Bg9E,EAAAA,SAC3Bh9E,SAAA2J,GAAAxI,aAAAnB,KAAeoB,EAAAA,WAAfpB,KAA2B4J,EAAAA,OAA3B1J,MAAkCuM,EAAAA,cA5JlCzM,KAAEiB,EAAAA,mCAmIF24E,eAAA55E,KAAGuB,EAAAA,MAAHrB,MAAS,qBAMTy8E,cAAA38E,KAAGuB,EAAAA,MAAHrB,MAAS,gCAMT+8E,uBAAAj9E,KAAGuB,EAAAA,MAAHrB,MAAS,8BA/JTi5E,iCwHAA,sBAmBAn5E,KAAC+J,EAAAA,SAAD7J,OACE8J,SAAUq4B,GAAiBle,EAAAA,cAAeja,GAAiBD,EAAAA,cAC3DK,SACEuuE,GACAx2C,GACA82C,GACAL,GACA5uE,IAEFQ,cAAemuE,GAAiBM,GAAwBL,IACxDrrE,WAAYurE,QA7BdkE,KCeIx7E,GAAS,gBAkFX,QAAFy7E,GAC4C7xE,EAC9B9E,EACAhH,EACA2jC,GAH8BroC,KAA5CwQ,UAA4CA,EAC9BxQ,KAAd0L,QAAcA,EACA1L,KAAd0E,YAAcA,EACA1E,KAAdqoC,eAAcA,EAxDdroC,KAAAsiF,OAAiC,UAQjCtiF,KAAAuiF,UAA8B,EAM9BviF,KAAAqJ,SAA0D,cAuB1DrJ,KAAAw9B,KAA8C,SAW9Cx9B,KAAAg7C,IAAgBp0C,KA7FhB,MAwCApF,QAAAC,eAAM4gF,EAANthF,UAAA,aAAA,WAA8B,MAAOf,MAAKsiF,YACxC,SAAU5gF,GACR1B,KAAK+lE,UAAUrkE,GACf1B,KAAKsiF,OAAS5gF,mCAMlBF,OAAAC,eAAM4gF,EAANthF,UAAA,eAAA,WAA2B,MAAOf,MAAKuiF,cACrC,SAAYC,GACVxiF,KAAKuiF,SAAWl6E,EAAAA,sBAAsBm6E,oCAY1ChhF,OAAAC,eAAM4gF,EAANthF,UAAA,eAAA,WAA0B,MAAOf,MAAK8hB,cACpC,SAAY0gE,GACVxiF,KAAK8hB,SAAW0gE,EAChBxiF,KAAKyiF,sDAMTjhF,OAAAC,eAAM4gF,EAANthF,UAAA,mBAAA,WAA8B,MAAOf,MAAK0iF,kBACxC,SAAgBC,GACVA,IAAmB3iF,KAAK0iF,eAC1B1iF,KAAK4iF,2BAA2BD,EAAgB3iF,KAAK0iF,cACrD1iF,KAAK0iF,aAAeC,oCAU1BnhF,OAAAC,eAAM4gF,EAANthF,UAAA,cAAA,WAA0B,MAAOf,MAAK6iF,aACpC,SAAWL,GACTxiF,KAAK6iF,QAAUx6E,EAAAA,sBAAsBm6E,oCAgBvCH,EAAFthF,UAAA+hF,QAAE,WACE,OAA2C,IAApC9iF,KAAKqJ,SAASyU,QAAQ,UAI/BukE,EAAFthF,UAAAgiF,QAAE,WACE,OAA4C,IAArC/iF,KAAKqJ,SAASyU,QAAQ,WAG/BukE,EAAFthF,UAAAC,YAAE,WACMhB,KAAKgjF,aAAehjF,KAAKijF,eAC3BjjF,KAAKqoC,eAAegB,kBAAkBrpC,KAAKijF,cAAejjF,KAAKgjF,cAK3DX,EAAVthF,UAAA0hF,8BAMI,MALKziF,MAAKijF,cAGRjjF,KAAKijF,cAAc3xE,YAActR,KAAKurB,QAFtCvrB,KAAKijF,cAAgBjjF,KAAKkjF,sBAIrBljF,KAAKijF,eAINZ,EAAVthF,UAAAmiF,+BACI,GAAMC,GAAenjF,KAAKwQ,UAAUqhC,cAAc,OAwBlD,OArBAsxC,GAAar3B,aAAa,KAAM,qBAAqB9rD,KAAKg7C,KAC1DmoC,EAAa36E,UAAUG,IAAI,qBAC3Bw6E,EAAa7xE,YAActR,KAAKurB,QAE5BvrB,KAAKgjF,aACPG,EAAar3B,aAAa,aAAc9rD,KAAKgjF,aAG/ChjF,KAAK0E,YAAY9B,cAAcmvC,YAAYoxC,GAGN,kBAA1B5iF,uBACTP,KAAK0L,QAAQO,kBAAkB,WAC7B1L,sBAAsB,WACpB4iF,EAAa36E,UAAUG,IAhBT,wBAoBlBw6E,EAAa36E,UAAUG,IApBL,oBAuBbw6E,GAIDd,EAAVthF,UAAA6hF,2BAAA,SAAqCD,EAAwBS,GAEzD,GAAM73D,GAAUvrB,KAAKyiF,oBAEjBW,IACFpjF,KAAKqoC,eAAegB,kBAAkB9d,EAAS63D,GAG7CT,GACF3iF,KAAKqoC,eAAemB,SAASje,EAASo3D,IAKlCN,EAAVthF,UAAAglE,UAAA,SAAoBsd,GACZA,IAAiBrjF,KAAKsiF,SACpBtiF,KAAKsiF,QACPtiF,KAAK0E,YAAY9B,cAAc4F,UAAUC,OAAO,aAAazI,KAAKsiF,QAEhEe,GACFrjF,KAAK0E,YAAY9B,cAAc4F,UAAUG,IAAI,aAAa06E,oBA9JlEn+E,KAACmJ,EAAAA,UAADjJ,OACEC,SAAU,aACVU,MACEC,MAAS,YACTs9E,4BAA6B,UAC7BC,0BAA2B,YAC3BC,0BAA2B,aAC3BC,2BAA4B,aAC5BC,0BAA2B,YAC3BC,0BAA2B,mBAC3BC,2BAA4B,oBAC5BC,0BAA2B,mBAC3BC,2BAA4B,kDAiEhC5+E,SAAA2J,GAAAxI,aAAAnB,KAAOoB,EAAAA,WAAPpB,KAAmB4J,EAAAA,OAAnB1J,MAA0BuM,EAAAA,cAvF1BzM,KAA8C8H,EAAAA,SAA9C9H,KAAmB4N,EAAAA,aAHnB5N,KAAQmnC,EAAAA,mCA+BRkR,QAAAr4C,KAAGuB,EAAAA,MAAHrB,MAAS,mBAST2+E,UAAA7+E,KAAGuB,EAAAA,MAAHrB,MAAS,qBAWTiE,WAAAnE,KAAGuB,EAAAA,MAAHrB,MAAS,sBAGTmmB,UAAArmB,KAAGuB,EAAAA,MAAHrB,MAAS,cAST49E,cAAA99E,KAAGuB,EAAAA,MAAHrB,MAAS,yBAWTo4B,OAAAt4B,KAAGuB,EAAAA,MAAHrB,MAAS,kBAGT4+E,SAAA9+E,KAAGuB,EAAAA,MAAHrB,MAAS,qBArFTi9E,iCCAA,sBAcAn9E,KAAC+J,EAAAA,SAAD7J,OACE8J,SACE89B,EAAAA,WACA59B,IAEFI,SAAU6yE,IACVzyE,cAAeyyE,QApBjB4B,KCYaC,GAAwB,GAAIxkE,GAAAA,eAAoB,sBAK7DykE,GAAA,wBAWAnkF,KAAAkT,KAAoB,KAGpBlT,KAAAkzB,aAA0B,EAM1BlzB,KAAAkmC,cAA2B,EAG3BlmC,KAAAg2B,UAA8B,KAxC9B,MAAAmuD,MCkBaC,IAIXC,iBAAkBptE,EAAAA,QAAQ,SACxBC,EAAAA,MAAM,eAAgB7T,EAAAA,OAAOC,UAAW,sBACxC4T,EAAAA,MAAM,UAAW7T,EAAAA,OAAOC,UAAW,oBACnC8T,EAAAA,WAAW,qCACPC,EAAAA,QAAW0P,GAAmBC,QADtC,IACiDC,GAAgBI,qBAC7DjQ,EAAAA,WAAW,kBACPC,EAAAA,QAAW0P,GAAmBK,QADtC,IACiDH,GAAgBM,uCCyD/D,QAAF+8D,GACY5/E,EACAvD,EACA6hC,EACRuhD,EAC8Bh0E,EAEvBi0E,GAPT,GAAF3kF,GAQIsH,EARJC,KAAApH,OAAAA,WACYH,GAAZ6E,YAAYA,EACA7E,EAAZsB,mBAAYA,EACAtB,EAAZmjC,kBAAYA,EAIDnjC,EAAX2kF,kBAAWA,EAxBX3kF,EAAAioB,gBAAmD,OAGnDjoB,EAAAyoE,uBAA2B,GAAIvgE,GAAAA,aAM/BlI,EAAA4kF,4BAA4D,KAkBxD5kF,EAAK2Q,UAAYD,EACjB1Q,EAAK6kF,wBAA0BH,EAC5Bz4D,SAASC,EAAAA,YAAY44D,OAAQ54D,EAAAA,YAAY64D,MAAO74D,EAAAA,YAAY84D,SAC5DhkF,UAAU,WACThB,EAAKilF,aAAa,oCACdP,EAAmBQ,UAAUh5D,EAAAA,YAAY44D,SAC7C9kF,EAAKilF,aAAa,mCACdP,EAAmBQ,UAAUh5D,EAAAA,YAAY64D,QAC7C/kF,EAAKilF,aAAa,oCACdP,EAAmBQ,UAAUh5D,EAAAA,YAAY84D,aAvCrD,MAJ6Cz8E,GAA7Ck8E,EAAAn9E,GAgDEm9E,EAAFvjF,UAAAgnB,sBAAE,SAAyBC,GAIvB,MAHAhoB,MAAKglF,0BACLhlF,KAAKilF,iBACLjlF,KAAK05E,gCACE15E,KAAKmoB,cAAcJ,sBAAsBC,IAIlDs8D,EAAFvjF,UAAAqnB,qBAAE,SAAwBJ,GAItB,MAHAhoB,MAAKglF,0BACLhlF,KAAKilF,iBACLjlF,KAAK05E,gCACE15E,KAAKmoB,cAAcC,qBAAqBJ,IAIjDs8D,EAAFvjF,UAAA2nB,MAAE,WACO1oB,KAAK8Y,aACR9Y,KAAK8nB,gBAAkB,UACvB9nB,KAAKmB,mBAAmBwnB,kBAK5B27D,EAAFvjF,UAAAwkB,KAAE,WACOvlB,KAAK8Y,aACR9Y,KAAK8nB,gBAAkB,SACvB9nB,KAAKmB,mBAAmBC,iBAI5BkjF,EAAFvjF,UAAAC,YAAE,WACEhB,KAAK0kF,wBAAwBzjF,cAC7BjB,KAAK8Y,YAAa,GAGpBwrE,EAAFvjF,UAAAiyC,iBAAE,SAAiBlpC,GACO,YAAlBA,EAAM2Y,QACRziB,KAAK0jC,aACsB,WAAlB55B,EAAM2Y,SACfziB,KAAK2jC,gBAGP3jC,KAAKsoE,uBAAuBvmE,KAAK+H,IAGnCw6E,EAAFvjF,UAAA64E,kBAAE,SAAkB9vE,GAChB9J,KAAKsoE,uBAAuBvmE,KAAK+H,IAG3Bw6E,EAAVvjF,UAAA+jF,aAAA,SAAuB77D,EAAkBtgB,GACrC,GAAMH,GAAYxI,KAAK0E,YAAY9B,cAAc4F,SACjDG,GAAMH,EAAUG,IAAIsgB,GAAYzgB,EAAUC,OAAOwgB,IAG3Cq7D,EAAVvjF,UAAAikF,mCACI,GAAIhlF,KAAKmoB,cAAcvG,cACrB,KAAMsH,OAAM,gFAIRo7D,EAAVvjF,UAAAkkF,0BACI,GAAMl5E,GAAuB/L,KAAK0E,YAAY9B,cACxCkmB,EAAa9oB,KAAKwkF,kBAAkB17D,UAEtCC,OAAMC,QAAQF,GAEhBA,EAAW1f,QAAQ,SAAA6f,GAAY,MAAAld,GAAQvD,UAAUG,IAAIsgB,KAC5CH,GACT/c,EAAQvD,UAAUG,IAAImgB,IAMlBw7D,EAAVvjF,UAAA2iC,sBACS1jC,KAAKyjC,aACRzjC,KAAKyjC,WAAazjC,KAAKgjC,kBAAkB/V,OAAOjtB,KAAK0E,YAAY9B,gBAGnE5C,KAAKyjC,WAAWM,gCAIVugD,EAAVvjF,UAAA4iC,yBACI,GAAMg2C,GAAU35E,KAAKykF,2BAGjB9K,IAAoC,kBAAlBA,GAAQl3E,OAC5Bk3E,EAAQl3E,QAGNzC,KAAKyjC,YACPzjC,KAAKyjC,WAAWa,WAKZggD,EAAVvjF,UAAA24E,mDACI15E,MAAKykF,4BAA8BzkF,KAAKwQ,UAAsC,cAG1ExQ,KAAK0E,YAAY9B,cAAcH,OACjCwG,QAAQC,UAAUC,KAAK,WAAM,MAAAtJ,GAAK6E,YAAY9B,cAAcH,0BA1KlEyC,KAACC,EAAAA,UAADC,OAAAC,SAAA,6BACEC,SAAU,8CACVC,QAAF,okBACEK,gBAAFC,EAAAA,wBAAAC,OACEL,cAAFC,EAAAA,kBAAAC,KACEuT,YAAFkrE,GAAAC,kBACEt+E,MACFC,MAAe,6BACTwiD,SAAN,KACIl2C,KAAJ,SACIm1D,aAAJ,OACIllB,oBAAJ,+BACIp5B,WAAY,kBACZ+7D,iBAAJ,4BACI97D,gBAAJ,mHA1CAlkB,KAAEigF,EAAAA,mBAGFjgF,KAAEooB,EAAAA,qBAiBFpoB,SAAmB2J,GAAnBxI,aAAAnB,KAAAoB,EAAAA,WAAApB,KAAA4J,EAAAA,OAAA1J,MAAAuM,EAAAA,cALAzM,KAAQi/E,MACRG,EAAA/9E,6EAmCA+9E,mDCjEA,sBAgBAp/E,KAAC+J,EAAAA,SAAD7J,OACE8J,SACEC,EAAAA,aACAka,EAAAA,cACAja,GACAC,EAAAA,cAEFG,SAAU80E,GAAyBl1E,IACnCQ,cAAe00E,IACfh7D,iBAAkBg7D,QAzBpBc,KCkBAC,GAAA,WAmBE,QAAFA,GAAczgE,EAAoDC,GAAhE,GAAFhlB,GAAAG,IAAkEA,MAAlE6kB,YAAkEA,EARlE7kB,KAAA8kB,gBAAqC,GAAIjZ,GAAAA,QAGzC7L,KAAA+kB,aAAkC,GAAIlZ,GAAAA,QAMlC7L,KAAK4kB,kBAAoBA,EAGzBA,EAAkB0jD,uBAAuBl8D,KACvC4E,EAAAA,OAAO,SAAAlH,GAAS,MAAoB,SAApBA,EAAMosD,WAA0C,YAAlBpsD,EAAM2Y,UACpD5N,EAAAA,KAAK,IAENhU,UAAU,WACThB,EAAKklB,aAAanY,OAClB/M,EAAKklB,aAAalY,aAIpB+X,EAAkB0jD,uBAAuBl8D,KACvC4E,EAAAA,OAAO,SAAAlH,GAAS,MAAoB,SAApBA,EAAMosD,WAA0C,WAAlBpsD,EAAM2Y,UACpD5N,EAAAA,KAAK,IAENhU,UAAU,WACThB,EAAKglB,YAAYmB,UACjBnmB,EAAKilB,gBAAgBlY,KAAK/M,EAAK0oE,SAC/B1oE,EAAKilB,gBAAgBjY,aAGlB+X,EAAkB4/D,kBAAkBt+C,cACvCxlC,EAAAA,MACEmkB,EAAYkgB,gBACZlgB,EAAYygE,eAAel5E,KAAK4E,EAAAA,OAAO,SAAAlH,GAAS,MAAAA,GAAMwZ,UAAY6mB,EAAAA,WAClEtpC,UAAU,WAAM,MAAAhB,GAAKslB,YAjE7B,MAyEEkgE,GAAFtkF,UAAAokB,QAAE,SAAQm6B,GAAR,GAAFz/C,GAAAG,IACSA,MAAK8kB,gBAAgBQ,SAExBtlB,KAAK4kB,kBAAkB0jD,uBAAuBl8D,KAC5C4E,EAAAA,OAAO,SAAAlH,GAAS,MAAoB,UAApBA,EAAMosD,YACtBrhD,EAAAA,KAAK,IACLhU,UAAU,WAAM,MAAAhB,GAAKglB,YAAY6jD,mBAEnC1oE,KAAKuoE,QAAUjpB,EACft/C,KAAK4kB,kBAAkBW,SAK3B8/D,EAAFtkF,UAAAmlB,eAAE,WACE,MAAOlmB,MAAK8kB,gBAAgBqB,gBAI9Bk/D,EAAFtkF,UAAAqlB,YAAE,WACE,MAAOpmB,MAAK+kB,aAAaoB,gBAM3Bk/D,EAAFtkF,UAAAgkC,cAAE,WACE,MAAO/kC,MAAK6kB,YAAYkgB,iBAM1BsgD,EAAFtkF,UAAAklE,cAAE,WACE,MAAOjmE,MAAK6kB,YAAYohD,iBA3G5Bof,mBCwCE,QAAFE,GACc57D,EACAE,EACwB27D,GAFxBxlF,KAAd2pB,SAAcA,EACA3pB,KAAd6pB,UAAcA,EACwB7pB,KAAtCwlF,mBAAsCA,EAnBtCxlF,KAAAylF,2BAAsE,KAxBtE,MA2BEjkF,QAAFC,eAAM8jF,EAANxkF,UAAA,6BAAE,WACE,GAAMmpB,GAASlqB,KAAKwlF,kBACpB,OAAOt7D,GAASA,EAAOw7D,sBAAwB1lF,KAAKylF,gCAGtD,SAA0B/jF,GACpB1B,KAAKwlF,mBACPxlF,KAAKwlF,mBAAmBE,sBAAwBhkF,EAEhD1B,KAAKylF,2BAA6B/jF,mCActC6jF,EAAFxkF,UAAA0pB,KAAE,SAA0Bu/C,EACT1/C,GADjB,GAAFzqB,GAAAG,KAGU2qB,EAAUs/C,EAAqB3/C,GAC/BQ,EAAa9qB,KAAKyrB,eAAed,GACjCe,EAAY1rB,KAAK2lF,iBAAiB76D,EAAYH,GAC9Ci7D,EAAM,GAAIP,IAAwB35D,EAAWZ,EAEnD,IAAIk/C,YAAkCvyD,GAAAA,YACpCiU,EAAUtD,qBAAqB,GAAItH,GAAAA,eAAkBkpD,EAAsB,MACzEr+C,UAAWhB,EAAQzX,KACnB2yE,eAAgBD,SAEb,CACL,GAAM59D,GAAS,GAAIoD,GAAAA,gBAAgB4+C,MAAwBn7D,GACrD7O,KAAK4rB,gBAAgBjB,EAASi7D,IAC9B/5D,EAAaH,EAAU3D,sBAAsBC,EACnD49D,GAAIt6D,SAAWO,EAAWP,SAuB5B,MAnBAs6D,GAAI1/D,iBAAiBrlB,UAAU,WAEzBhB,EAAK6lF,uBAAyBE,IAChC/lF,EAAK6lF,sBAAwB,QAI7B1lF,KAAK0lF,uBAGP1lF,KAAK0lF,sBAAsBx/D,iBAAiBrlB,UAAU,WAAM,MAAA+kF,GAAIhhE,kBAAkB8D,UAClF1oB,KAAK0lF,sBAAsBvgE,WAG3BygE,EAAIhhE,kBAAkB8D,QAGxB1oB,KAAK0lF,sBAAwBE,EAEtBA,GAMTL,EAAFxkF,UAAAokB,QAAE,WACMnlB,KAAK0lF,uBACP1lF,KAAK0lF,sBAAsBvgE,WAOvBogE,EAAVxkF,UAAA4kF,iBAAA,SAA2B76D,EACAR,GAEvB,GAAMS,GAAeT,GAAUA,EAAOlK,kBAAoBkK,EAAOlK,iBAAiB4K,SAC5EA,EAAW,GAAIC,GAAAA,eAAeF,GAAgB/qB,KAAK6pB,UAAW,GAAIqB,WACrEi5D,GAAsB75D,MAGnBa,EACF,GAAIC,GAAAA,gBAAgBk5D,GAAyBh6D,EAAOlK,iBAAkB4K,EAE1E,OAD4DF,GAAWjJ,OAAOsJ,GAC1DG,UAOdi6D,EAAVxkF,UAAA0qB,eAAA,SAAyBnB,GACrB,GAAMgC,GAAgB,GAAIC,GAAAA,eACxBxP,UAAWuN,EAAOvN,UAClBmW,YAAa5I,EAAO4I,YACpB23C,SAAU,OACV5/B,eAAgBjrC,KAAK2pB,SAASm8D,iBAAiBC,QAC/Cv5D,iBAAkBxsB,KAAK2pB,SAAStgB,WAC7BojB,SACAK,qBACAE,OAAO,MAOZ,OAJI1C,GAAOisB,gBACTjqB,EAAciqB,cAAgBjsB,EAAOisB,eAGhCv2C,KAAK2pB,SAASsD,OAAOX,IAQtBi5D,EAAVxkF,UAAA6qB,gBAAA,SAA6BtB,EACAu7D,GAEzB,GAAM96D,GAAeT,GAAUA,EAAOlK,kBAAoBkK,EAAOlK,iBAAiB4K,SAC5E+/C,EAAkB,GAAI7/C,WACzBm6D,GAAmBQ,IACnB3B,GAAuB55D,EAAOpX,OAWjC,QARIoX,EAAOvN,WACLgO,GAAiBA,EAAahd,IAA2B3H,EAAAA,eAAgB,OAC7E2kE,EAAgBt8C,IAAIroB,EAAAA,gBAClB1E,MAAO4oB,EAAOvN,UACd7Q,OAAQC,EAAAA,OAIL,GAAI8e,GAAAA,eAAeF,GAAgB/qB,KAAK6pB,UAAWkhD,mBA9I9D7lE,KAACgoB,EAAAA,WAAD9nB,OAAaua,WAAYylE,2CAbzBlgF,KAAQioB,EAAAA,UAERjoB,KAAkCmoB,EAAAA,WAYlCnoB,KAAaqgF,EAAbl/E,aAAAnB,KAoBOoB,EAAAA,WApBPpB,KAoBmBqoB,EAAAA,sKA3CnBg4D,KjBgCMS,GAA6B,SAG7BC,GAA4B,UAM5BC,IACJ,aACA,kBACA,kBACA,oBACA,qBACA,eACA,WAKFC,GAAA,WACE,QAAFA,GAAqBzhF,GAAA1E,KAArB0E,YAAqBA,EAtDrB,MAAAyhF,MAwDaC,GAAsBp/E,EAAWqG,EAAcpG,EAAmBk/E,qBAkC7E,QAAFtM,GAAc90E,EAMQuL,EACA2hB,EAE0CsD,GAT9D,GAAF11B,GAUIsH,EAVJC,KAAApH,KAUU+E,IAVV/E,IAMsBH,GAAtByQ,UAAsBA,EACAzQ,EAAtBoyB,cAAsBA,EAE0CpyB,EAAhE01B,eAAgEA,EAjBhE11B,EAAAwmF,cAAoCxmF,EAAKymF,mBAAmB,UAAW,gBAGvEzmF,EAAA0mF,aAAmC1mF,EAAKymF,mBAAmB,kBAmBvD,KAAmB,GAAvBt9B,GAAA,EAAuBw9B,EAAvBN,GAAuBl9B,EAAvBw9B,EAAAhkF,OAAuBwmD,IAAvB,CAAS,GAAMsrB,GAAfkS,EAAAx9B,EACUnpD,GAAKymF,mBAAmBhS,IACzBvvE,EAAuC,cAAEyD,UAAUG,IAAI2rE,SAI5Dz0E,GAAKoyB,cAAcE,QAAQtyB,EAAK6E,YAAY9B,eAAe,GAEvD/C,EAAKwmF,cACPxmF,EAAK09C,MAAQyoC,GACJnmF,EAAKymF,mBAAmB,qBACjCzmF,EAAK09C,MAAQ0oC,MA3BnB,MAV+B79E,GAA/ByxE,EAAA1yE,GAyCE0yE,EAAF94E,UAAAC,YAAE,WACEhB,KAAKiyB,cAAcI,eAAeryB,KAAK0E,YAAY9B,gBAIrDi3E,EAAF94E,UAAA0B,MAAE,WACEzC,KAAKyyB,kBAAkBhwB,SAGzBo3E,EAAF94E,UAAA0xB,gBAAE,WACE,MAAOzyB,MAAK0E,YAAY9B,eAG1Bi3E,EAAF94E,UAAAkhC,kBAAE,WACE,MAAOjiC,MAAKkiC,eAAiBliC,KAAKoC,UAIpCy3E,EAAF94E,UAAAulF,mBAAE,WAAF,IAAqB,GAArBzmF,GAAAG,KAAAymF,KAAAz9B,EAAA,EAAqBA,EAArBzwC,UAAA/V,OAAqBwmD,IAAAy9B,EAArBz9B,GAAAzwC,UAAAywC,EACI,OAAOy9B,GAAWp1E,KAAK,SAAAq1E,GAAa,MAAA7mF,GAAK4yB,kBAAkB64C,aAAaob,qBA5E5ExhF,KAACC,EAAAA,UAADC,OAAAC,SAAA,iMACE8F,SAAU,YACVpF,MAGFosD,aAAA,mBACMt5B,kCAAN,uCAEAvzB,SAAA,mVACAC,QAAA,2uPACEC,QAAF,WAAA,gBAAA;4CACEC,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,qFA7DAZ,KAAE4zB,EAAAA,eAJF5zB,SAAQ2J,GAARxI,aAAAnB,KAAAoB,EAAAA,WAAApB,KAAA4J,EAAAA,OAAA1J,MAAA0e,EAAAA,4BA0FA+1D,EAAAtzE,uDAXAszE,uCA6EEj6C,qCA7JF,0DAsKA5/B,KAAAoC,8BAEQ0H,EAARgwE,6BAGAC,EAAA1zE,aACAnB,KAAAC,EAAAA,UAAAC,OAAAC,SAAA,gLAnCAU,MACAu8C,kBAAA,oBACA2D,kBAAA,mBAEA13C,uBAAA,sBACMI,UAAN,8BACIkqB,kCAAJ,uCAEArzB,QAAA,WAAA,gBAAA,SACAF,SAAA,mVACAC,QAAA,2uPACAE,cAAAC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,WAIAi0E,EAAA3gE,eAAA,WAAA,QACAlU,KAAA0J,EAAAA,kJA1JAmrE,GAKAF,gCCbA,sBAcA30E,KAAC+J,EAAAA,SAAD7J,OACE8J,SACEC,EAAAA,aACAG,GACAF,IAEFI,SACEqqE,GACAE,GACA3qE,IAEFQ,cACEiqE,GACAE,QA3BJpgE,KC2CAqgE,GAAA,yBA3CA,MAAAA,MA4CaC,GAAiC5sE,EAAc2sE,IAO/CE,IACXtnE,QAASkiB,EAAAA,kBACTjiB,YAAaqP,EAAAA,WAAW,WAAM,MAAAi4D,MAC9BnlD,OAAO,GAOTolD,GAAA,yBA7DA,MAAAA,MA+DIC,GAAmB,EAGvBC,GAAA,WACE,QAAFA,GAEWplD,EAGAxzB,GAHA1B,KAAXk1B,OAAWA,EAGAl1B,KAAX0B,MAAWA,EAxEX,MAAA44E,qBAgLE,QAAFH,GAAsB75C,GAApB,GAAFzgC,GACIsH,EADJC,KAAApH,OAAAA,WAAsBH,GAAtBygC,gBAAsBA,EAnFtBzgC,EAAAg6B,WAAsB,EACtBh6B,EAAAm5C,WAAsB,EAetBn5C,EAAAq6B,8BAAwD,aAGxDr6B,EAAA25C,WAA0B,aAe1B35C,EAAA0gC,MAAkB,2BAA2B85C,KA8B7Cx6E,EAAAynC,YAAmC,GAAIv/B,GAAAA,aAiBvClI,EAAAqM,OAAM,GAAInE,GAAAA,eA9KV,MA0F0CK,GAA1C+xE,EAAAhzE,GA6BA3F,OAAAC,eAAM04E,EAANp5E,UAAA,YAAA,WAAuB,MAAOf,MAAKugC,WACjC,SAAS7+B,GAAT,GAAF7B,GAAAG,IACIA,MAAKugC,MAAQ7+B,EAET1B,KAAKu6E,gBACPv6E,KAAKu6E,eAAenxE,QAAQ,SAAA8tB,GAAU,MAAAA,GAAOxf,KAAO7X,EAAK0gC,yCAO/D/+B,OAAAC,eAAM04E,EAANp5E,UAAA,gBAAA,WAA4B,MAAOf,MAAK65B,eACtC,SAAan4B,GACX1B,KAAK65B,UAAYxxB,EAAAA,sBAAsB3G,oCAK3CF,OAAAC,eAAM04E,EAANp5E,UAAA,wBACI,GAAM8V,GAAW7W,KAAK46C,gBAAkB56C,KAAK46C,gBAAgB/jC,WAE7D,OAAI7W,MAAKinC,SACApwB,EAAS7M,IAAI,SAAAktB,GAAU,MAAAA,GAAOx1B,QAGhCmV,EAAS,GAAKA,EAAS,GAAGnV,UAAQmN,QAE3C,SAAUiyB,GACR9gC,KAAKk8C,qBAAqBpb,GAC1B9gC,KAAKsnC,YAAYvlC,KAAK/B,KAAK0B,wCAW7BF,OAAFC,eAAM04E,EAANp5E,UAAA,gBAAE,WACE,GAAM8V,GAAW7W,KAAK46C,gBAAgB/jC,QACtC,OAAO7W,MAAKinC,SAAWpwB,EAAYA,EAAS,IAAM,sCAKtDrV,OAAAC,eAAM04E,EAANp5E,UAAA,gBAAA,WAA4B,MAAOf,MAAKg5C,eACtC,SAAat3C,GACX1B,KAAKg5C,UAAY3wC,EAAAA,sBAAsB3G,oCAWzCy4E,EAAFp5E,UAAA8f,SAAE,WACE7gB,KAAK46C,gBAAkB,GAAIK,GAAAA,eAAgCj7C,KAAKinC,aAAUp4B,IAAW,IAGvFsrE,EAAFp5E,UAAAyI,mBAAE,YACEkV,EAAA1e,KAAK46C,iBAAgBW,OAAzBxxC,MAAA2U,EAAmC1e,KAAKu6E,eAAevpE,OAAO,SAAAkmB,GAAU,MAAAA,GAAO/B,kBAO7EglD,EAAFp5E,UAAA41B,WAAE,SAAWj1B,GACT1B,KAAK0B,MAAQA,EACb1B,KAAKsgC,gBAAgBl/B,gBAIvB+4E,EAAFp5E,UAAA61B,iBAAE,SAAiBC,GACf72B,KAAKk6B,8BAAgCrD,GAIvCsjD,EAAFp5E,UAAA+1B,kBAAE,SAAkBD,GAChB72B,KAAKw5C,WAAa3iB,GAIpBsjD,EAAFp5E,UAAAg2B,iBAAE,SAAiBC,GACfh3B,KAAKoC,SAAW40B,EAEZh3B,KAAKu6E,gBACPv6E,KAAKu6E,eAAenxE,QAAQ,SAAA8tB,GAAU,MAAAA,GAAOmK,mBAKjD84C,EAAFp5E,UAAA01B,iBAAE,WACE,GAAM5f,GAAW7W,KAAK6W,SAChBqe,EAASnM,MAAMC,QAAQnS,GAAYA,EAASA,EAASrU,OAAS,GAAKqU,EACnE/M,EAAQ,GAAIwwE,IAAqB,EAAUt6E,KAAK0B,MACtD1B,MAAKk6B,8BAA8BpwB,EAAMpI,OACzC1B,KAAKkM,OAAOnK,KAAK+H,IASnBqwE,EAAFp5E,UAAAy5E,kBAAE,SAAkBtjD,EAAyBqkB,EAAiBiD,OAA9D,KAAAA,IAA8DA,GAA9D,GAGSx+C,KAAKinC,WAAYjnC,KAAK6W,UAAaqgB,EAAO/B,UAC5Cn1B,KAAgC,SAAEm1B,SAAU,GAG3ComB,EACFv7C,KAAK46C,gBAAgBW,OAAOrkB,GAE5Bl3B,KAAK46C,gBAAgBa,SAASvkB,GAI5BsnB,GACFx+C,KAAKy2B,mBAKPz2B,KAAKsnC,YAAYvlC,KAAK/B,KAAK0B,QAI7By4E,EAAFp5E,UAAA05E,YAAE,SAAYvjD,GACV,MAAOl3B,MAAK46C,gBAAgB+D,WAAWznB,IAIzCijD,EAAFp5E,UAAA25E,cAAE,SAAcxjD,GACZ,WAA8B,KAAnBl3B,KAAK26E,YAIZ36E,KAAKinC,UAAYle,MAAMC,QAAQhpB,KAAK26E,WAC/B36E,KAAK26E,UAAUtpE,KAAK,SAAA3P,GAAS,MAAgB,OAAhBw1B,EAAOx1B,OAAiBA,IAAUw1B,EAAOx1B,QAGxEw1B,EAAOx1B,QAAU1B,KAAK26E,YAIvBR,EAAVp5E,UAAAm7C,qBAAA,SAA+Bx6C,aAG3B,IAFA1B,KAAK26E,UAAYj5E,EAEZ1B,KAAKu6E,eAIV,GAAIv6E,KAAKinC,UAAYvlC,EAAO,CAC1B,IAAKqnB,MAAMC,QAAQtnB,GACjB,KAAMwnB,OAAM,qDAGdlpB,MAAKq3E,kBACL31E,EAAM0H,QAAQ,SAACs0C,GAAsB,MAAA79C,GAAK89C,aAAaD,SAEvD19C,MAAKq3E,kBACLr3E,KAAK29C,aAAaj8C,IAKdy4E,EAAVp5E,UAAAs2E,2BACIr3E,KAAK46C,gBAAgBhR,QACrB5pC,KAAKu6E,eAAenxE,QAAQ,SAAA8tB,GAAU,MAAAA,GAAO/B,SAAU,KAIjDglD,EAAVp5E,UAAA48C,aAAA,SAAuBj8C,GACnB,GAAMm8C,GAAsB79C,KAAKu6E,eAAe9tE,KAAK,SAAAyqB,GACnD,MAAuB,OAAhBA,EAAOx1B,OAAiBw1B,EAAOx1B,QAAUA,GAG9Cm8C,KACFA,EAAoB1oB,SAAU,EAC9Bn1B,KAAK46C,gBAAgBW,OAAOsC,oBAvOlC34C,KAACmJ,EAAAA,UAADjJ,OACEC,SAAU,0BACVsN,WACEunE,IACCtnE,QAASwnE,GAA8BvnE,YAAasnE,IAEvD30E,QAAS,YACTO,MACEuM,KAAQ,QACRtM,MAAS,0BACT40E,qCAAsC,YAExCzvE,SAAU,+DA3EZjG,KAAE+H,EAAAA,uCAsGFstE,iBAAAr1E,KAAGqO,EAAAA,gBAAHnO,MAAmB8c,EAAAA,WAAW,WAAM,MAAA24D,SAGpCnjE,OAAAxS,KAAGuB,EAAAA,QAYH2d,WAAAlf,KAAGuB,EAAAA,QAOH/E,QAAAwD,KAAGuB,EAAAA,QAoBH6gC,cAAApiC,KAAGyB,EAAAA,SASHsgC,WAAA/hC,KAAGuB,EAAAA,QAOHyF,SAAAhH,KAAGyB,EAAAA,UA7KHwzE,GA0F0CF,IAgO1Ca,GAAA,yBA1TA,MAAAA,MA2TaC,GAA4B9zE,EAAmB6zE,mBAwF1D,QAAFD,GAA0BG,EACJ75E,EACAuD,EACAutB,GAHpB,GAAFpyB,GAIIsH,EAJJC,KAAApH,OAAAA,WACsBH,GAAtBsB,mBAAsBA,EACAtB,EAAtB6E,YAAsBA,EACA7E,EAAtBoyB,cAAsBA,EApEtBpyB,EAAAo7E,mBAA8B,EAC9Bp7E,EAAAg2B,UAAqB,EAWrBh2B,EAAAo2B,eAA4D,KA+C5Dp2B,EAAA8gC,WAA+B,EAI/B9gC,EAAAqM,OAAM,GAAInE,GAAAA,aAQNlI,EAAKq7E,kBAAoBF,IAT7B,MAjEqC5yE,GAArCyyE,EAAA1zE,GA0BE3F,OAAFC,eAAMo5E,EAAN95E,UAAA,gBAAE,WAAyB,MAAUf,MAAKquB,GAA1C,2CAaA7sB,OAAAC,eAAMo5E,EAAN95E,UAAA,0BACI,MAAOf,MAAKk7E,kBAAoBl7E,KAAKk7E,kBAAkBT,YAAYz6E,MAAQA,KAAK61B,cAElF,SAAYn0B,GACV,GAAMo/B,GAAWz4B,EAAAA,sBAAsB3G,EAEnCo/B,KAAa9gC,KAAK61B,WACpB71B,KAAK61B,SAAWiL,EAEZ9gC,KAAKk7E,mBACPl7E,KAAKk7E,kBAAkBV,kBAAkBx6E,KAAMA,KAAK61B,UAGtD71B,KAAKmB,mBAAmBC,iDAM9BI,OAAAC,eAAMo5E,EAAN95E,UAAA,2BACI,MAAOf,MAAK2gC,WAAc3gC,KAAKk7E,mBAAqBl7E,KAAKk7E,kBAAkB94E,cAE7E,SAAaV,GAAkB1B,KAAK2gC,UAAYt4B,EAAAA,sBAAsB3G,oCAgBtEm5E,EAAF95E,UAAA8f,SAAE,WACE7gB,KAAKi7E,kBAAoBj7E,KAAKk7E,oBAAsBl7E,KAAKk7E,kBAAkBj0C,SAC3EjnC,KAAKutE,MAAQvtE,KAAKi7E,kBAAoB,QAAU,WAChDj7E,KAAKquB,GAAKruB,KAAKquB,IAAM,qBAAqBgsD,KAEtCr6E,KAAKi7E,oBACPj7E,KAAK0X,KAAO1X,KAAKk7E,kBAAkBxjE,MAGjC1X,KAAKk7E,mBAAqBl7E,KAAKk7E,kBAAkBR,cAAc16E,QACjEA,KAAKm1B,SAAU,GAGjBn1B,KAAKiyB,cAAcE,QAAQnyB,KAAK0E,YAAY9B,eAAe,IAG7Di4E,EAAF95E,UAAAC,YAAE,WACEhB,KAAKiyB,cAAcI,eAAeryB,KAAK0E,YAAY9B,gBAIrDi4E,EAAF95E,UAAA0B,MAAE,WACEzC,KAAKm7E,eAAev4E,cAAcH,SAIpCo4E,EAAF95E,UAAAq6E,eAAE,SAAetxE,GACbA,EAAM0sB,iBAEN,IAAM6kD,KAAar7E,KAAKi7E,oBAA4Bj7E,KAAK61B,QAErDwlD,KAAer7E,KAAK61B,WACtB71B,KAAK61B,SAAWwlD,EACZr7E,KAAKk7E,oBACPl7E,KAAKk7E,kBAAkBV,kBAAkBx6E,KAAMA,KAAK61B,UAAU,GAC9D71B,KAAKk7E,kBAAkB1hC,eAI3Bx5C,KAAKkM,OAAOnK,KAAK,GAAIu4E,IAAsBt6E,KAAMA,KAAK0B,SAQxDm5E,EAAF95E,UAAAsgC,cAAE,WAGErhC,KAAKmB,mBAAmBC,+BAhJ5B8D,KAACC,EAAAA,UAADC,OAAAC,SAAA,oBACEC,SAAU,oiBACVC,QAAF,ykDACEE,cAAFC,EAAAA,kBAAmCC,KACjCwF,SAAF,kBACEvF,gBAAFC,EAAAA,wBAAAC,OACEN,QAAF,iBACEO,MACFu1E,uCAAA,qBACMC,oCAAN,UACIC,qCAAsC,WACtCx1E,MAAJ,oBACIu8B,YAAJ,kHAhPAr9B,KAAa4N,EAAAA,aA7Eb5N,KAAE4zB,EAAAA,gBALF+hD,EAAAt0E,wHAiVA40E,iBAAAj2E,KAAQsB,EAAAA,UAARpB,MAAA,YAKAipB,KAAAnpB,KAAAuB,EAAAA,QAKAiR,OAAAxS,KAAAuB,EAAAA,QASA/E,QAAAwD,KAAAuB,EAAAA,QAGA0uB,UAAAjwB,KAAAuB,EAAAA,QAGArE,WAAA8C,KAAAuB,EAAAA,QAGAyF,SAAAhH,KAAAyB,EAAAA,UA2BAk0E,mCChZA,sBAaA31E,KAAC+J,EAAAA,SAAD7J,OACE8J,SAAUE,GAAiBE,IAC3BE,SAAUJ,GAAiB+qE,GAAsBU,IACjDjrE,cAAeuqE,GAAsBU,QAhBvCY,iCCAA,sBAqBAv2E,KAACmJ,EAAAA,UAADjJ,OACEC,SAAU,mBACVU,MAAOC,MAAS,wBAvBlB01E,iCAAA,sBA+BAx2E,KAACmJ,EAAAA,UAADjJ,OACEC,SAAU,mDACVU,MACEC,MAAS,sBAlCb21E,iCAAA,sBA2CAz2E,KAACmJ,EAAAA,UAADjJ,OACEC,SAAU,4DACVU,MACEC,MAAS,yBA9Cb41E,gCAiEA57E,KAAA67E,MAAoC,QAjEpC,sBAuDA32E,KAACmJ,EAAAA,UAADjJ,OACEC,SAAU,mBACV8F,SAAU,iBACVpF,MACEC,MAAS,mBACT81E,qCAAsC,yCAK1CD,QAAA32E,KAAGuB,EAAAA,SAjEHs1E,iCAAA,sBAwEA72E,KAACmJ,EAAAA,UAADjJ,OACEC,SAAU,kBACVU,MAAOC,MAAS,uBA1ElBg2E,iCAAA,sBAkFA92E,KAACmJ,EAAAA,UAADjJ,OACEC,SAAU,mCACVU,MAAOC,MAAS,sBApFlBi2E,iCAAA,sBA4FA/2E,KAACmJ,EAAAA,UAADjJ,OACEC,SAAU,2CACVU,MAAOC,MAAS,yBA9FlBk2E,iCAAA,sBAsGAh3E,KAACmJ,EAAAA,UAADjJ,OACEC,SAAU,4CACVU,MAAOC,MAAS,yBAxGlBm2E,iCAAA,sBAgHAj3E,KAACmJ,EAAAA,UAADjJ,OACEC,SAAU,2CACVU,MAAOC,MAAS,yBAlHlBo2E,iCAAA,sBA0HAl3E,KAACmJ,EAAAA,UAADjJ,OACEC,SAAU,4CACVU,MAAOC,MAAS,yBA5HlBq2E,iCAAA,sBAoIAn3E,KAACmJ,EAAAA,UAADjJ,OACEC,SAAU,qCACVU,MAAOC,MAAS,uBAtIlBs2E,iCA+JA,sBATAp3E,KAACC,EAAAA,UAADC,OAAAC,SAAA,WACE8F,SAAU,UACV7F,SAAU,8EACVC,QAAF,s/EACEE,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,OACEC,MAAFC,MAAA,gBAGAu2E,iCAcA,yWALA92E,cAAAC,EAAAA,kBAAAC,KACEC,gBAAiBC,EAAAA,wBAAnBC,OACEC,MAAQC,MAAV,uBAGAw2E,iCAcA,0YAHAz2E,MAAAC,MAAA,4BAGAy2E,iCC3LA,sBA4BAv3E,KAAC+J,EAAAA,SAAD7J,OACE8J,SAAUE,IACVI,SACE+sE,GACAC,GACAC,GACAf,GACAC,GACAC,GACAG,GACAC,GACAE,GACAC,GACAC,GACAH,GACAI,GACAC,GACAltE,IAEFQ,cACE2sE,GAASC,GAAeC,GAAmBf,GAAgBC,GAAcC,GACzEG,GAAgBC,GAAeE,GAAgBC,GAAgBC,GAAgBH,GAC/EI,GAAgBC,QAlDpBI,KCsBahK,GACT,GAAIhzD,GAAAA,eAAuC,6BhBsB3CkV,GAAe,EAON69C,IACX7/D,QAASkiB,EAAAA,kBACTjiB,YAAaqP,EAAAA,WAAW,WAAM,MAAAywD,MAC9B39C,OAAO,kKAmBT,IAAA2nD,IAAA,yBA1EA,MAAAA,MAmFAC,GAAA,WACE,QAAFA,GAAqBl4E,GAAA1E,KAArB0E,YAAqBA,EApFrB,MAAAk4E,MAsFaC,GACXzvE,EAAcpG,EAAWC,EAAmBoG,EAAcuvE,KAAmB,0BAgG7E,QAAFjK,GAAc5tE,EACQ5D,EACA8wB,EACe5vB,EAEXy6E,EACsCvnD,GAN9D,GAAF11B,GAOIsH,EAPJC,KAAApH,KAOU+E,IAPV/E,WACsBH,GAAtBsB,mBAAsBA,EACAtB,EAAtBoyB,cAAsBA,EAGIpyB,EAA1Bi9E,aAA0BA,EACsCj9E,EAAhE01B,eAAgEA,EAhEhE11B,EAAAm2B,UAA2C,GAK3Cn2B,EAAAo2B,eAA4D,KAE5Dp2B,EAAA81B,UAA8B,mBAAkBf,GAGhD/0B,EAAAwuB,GAAwBxuB,EAAK81B,UAY7B91B,EAAAk2B,cAA+C,QAG/Cl2B,EAAA6X,KAAiC,KAIjC7X,EAAAqM,OAAM,GAAInE,GAAAA,aAGVlI,EAAA+yE,oBAAkE,GAAI7qE,GAAAA,aAetElI,EAAA25C,WAA0B,aAE1B35C,EAAAk9E,uBAA2C,GAE3Cl9E,EAAAm9E,mBAAqDC,GAAqBC,KAE1Er9E,EAAAq6B,8BAAgE,aAsChEr6B,EAAAg2B,UAA8B,EAc9Bh2B,EAAA8gC,WAA+B,EAwB/B9gC,EAAAs9E,gBAAoC,EA9DhCt9E,EAAKwC,SAAWoL,SAASpL,IAAa,IA8C1C,MAxHiC+F,GAAjCuqE,EAAAxrE,GAoBE3F,OAAFC,eAAMkxE,EAAN5xE,UAAA,eAAE,WAAwB,OAAUf,KAAKquB,IAAMruB,KAAK21B,WAApD,0CAIAn0B,OAAAC,eAAMkxE,EAAN5xE,UAAA,gBAAA,WAA4B,MAAOf,MAAK41B,eACtC,SAAal0B,GAAkB1B,KAAK41B,UAAYvtB,EAAAA,sBAAsB3G,oCAoDtEixE,EAAF5xE,UAAA0P,gBAAE,WAAA,GAAF5Q,GAAAG,IACIA,MAAKiyB,cACFE,QAAQnyB,KAAKo2B,cAAcxzB,eAC3B/B,UAAU,SAAAw1B,GAAe,MAAAx2B,GAAKy2B,oBAAoBD,MAGvDs8C,EAAF5xE,UAAAC,YAAE,WACEhB,KAAKiyB,cAAcI,eAAeryB,KAAKo2B,cAAcxzB,gBAOzDpB,OAAAC,eAAMkxE,EAAN5xE,UAAA,eAAA,WAA2B,MAAOf,MAAK61B,cACrC,SAAYn0B,GACNA,GAAS1B,KAAKm1B,UAChBn1B,KAAK61B,SAAWn0B,EAChB1B,KAAKmB,mBAAmBC,iDAU9BI,OAAAC,eAAMkxE,EAAN5xE,UAAA,gBAAA,WAAmB,MAAOf,MAAK2gC,eAC7B,SAAaj/B,GACPA,GAAS1B,KAAKoC,WAChBpC,KAAK2gC,UAAYj/B,EACjB1B,KAAKmB,mBAAmBC,iDAY9BI,OAAAC,eAAMkxE,EAAN5xE,UAAA,qBAAA,WAAiC,MAAOf,MAAKm9E,oBAC3C,SAAkBz7E,GAChB,GAAM07E,GAAU17E,GAAS1B,KAAKm9E,cAC9Bn9E,MAAKm9E,eAAiBz7E,EAElB07E,IACEp9E,KAAKm9E,eACPn9E,KAAKq9E,sBAAsBJ,GAAqBK,eAEhDt9E,KAAKq9E,sBACHr9E,KAAKm1B,QAAU8nD,GAAqBM,QAAUN,GAAqBO,WAEvEx9E,KAAK4yE,oBAAoB7wE,KAAK/B,KAAKm9E,kDAKvCxK,EAAF5xE,UAAAkhC,kBAAE,WACE,MAAOjiC,MAAKkiC,eAAiBliC,KAAKoC,UAIpCuwE,EAAF5xE,UAAAy3B,mBAAE,WAIEx4B,KAAKmB,mBAAmBC,gBAI1BuxE,EAAF5xE,UAAA41B,WAAE,SAAWj1B,GACT1B,KAAKm1B,UAAYzzB,GAInBixE,EAAF5xE,UAAA61B,iBAAE,SAAiBC,GACf72B,KAAKk6B,8BAAgCrD,GAIvC87C,EAAF5xE,UAAA+1B,kBAAE,SAAkBD,GAChB72B,KAAKw5C,WAAa3iB,GAIpB87C,EAAF5xE,UAAAg2B,iBAAE,SAAiBC,GACfh3B,KAAKoC,SAAW40B,GAGlB27C,EAAF5xE,UAAA08E,gBAAE,WACE,MAAOz9E,MAAKm1B,QAAU,OAAUn1B,KAAK8yE,cAAgB,QAAU,SAGzDH,EAAV5xE,UAAAs8E,sBAAA,SAAgCK,GAC5B,GAAIC,GAAW39E,KAAKg9E,mBAChBjxE,EAAuB/L,KAAK0E,YAAY9B,aAExC+6E,KAAaD,IAGb19E,KAAK+8E,uBAAuBv6E,OAAS,GACvCuJ,EAAQvD,UAAUC,OAAOzI,KAAK+8E,wBAGhC/8E,KAAK+8E,uBAAyB/8E,KAAK49E,0CAC/BD,EAAUD,GACd19E,KAAKg9E,mBAAqBU,EAEtB19E,KAAK+8E,uBAAuBv6E,OAAS,GACvCuJ,EAAQvD,UAAUG,IAAI3I,KAAK+8E,0BAIvBpK,EAAV5xE,UAAA01B,4BACI,GAAI3sB,GAAQ,GAAI6yE,GAChB7yE,GAAMorB,OAASl1B,KACf8J,EAAMqrB,QAAUn1B,KAAKm1B,QAErBn1B,KAAKk6B,8BAA8Bl6B,KAAKm1B,SACxCn1B,KAAKkM,OAAOnK,KAAK+H,IAIX6oE,EAAV5xE,UAAAu1B,oBAAA,SAA8BD,GAErBr2B,KAAKm3B,cAAgC,aAAhBd,EAEdA,IACNr2B,KAAKm3B,eACPn3B,KAAKm3B,aAAaC,UAClBp3B,KAAKm3B,aAAe,MAGtBn3B,KAAKw5C,cAPLx5C,KAAKm3B,aAAen3B,KAAK6yE,OAAOv7C,OAAO,EAAG,GAAIC,YAAY,KAY9Do7C,EAAF5xE,UAAAm2B,OAAE,WACEl3B,KAAKm1B,SAAWn1B,KAAKm1B,SAUvBw9C,EAAF5xE,UAAA21B,cAAE,SAAc5sB,GAAd,GAAFjK,GAAAG,IAQI8J,GAAM0sB,kBAGDx2B,KAAKoC,UAAkC,SAAtBpC,KAAK88E,aAkBf98E,KAAKoC,UAAkC,SAAtBpC,KAAK88E,eAGhC98E,KAAKo2B,cAAcxzB,cAAcuyB,QAAUn1B,KAAKm1B,QAChDn1B,KAAKo2B,cAAcxzB,cAAckwE,cAAgB9yE,KAAK8yE,gBApBlD9yE,KAAK8yE,eAAuC,UAAtB9yE,KAAK88E,cAE7B7zE,QAAQC,UAAUC,KAAK,WACrBtJ,EAAKs9E,gBAAiB,EACtBt9E,EAAK+yE,oBAAoB7wE,KAAKlC,EAAKs9E,kBAIvCn9E,KAAKk3B,SACLl3B,KAAKq9E,sBACDr9E,KAAK61B,SAAWonD,GAAqBM,QAAUN,GAAqBO,WAKxEx9E,KAAKy2B,qBAUTk8C,EAAF5xE,UAAA0B,MAAE,WACEzC,KAAKiyB,cAAcgF,SAASj3B,KAAKo2B,cAAcxzB,cAAe,aAGhE+vE,EAAF5xE,UAAA88E,oBAAE,SAAoB/zE,GAIlBA,EAAM0sB,mBAGAm8C,EAAV5xE,UAAA68E,0CACA,SAAMD,EAAgCD,GAElC,GAA4B,mBAAxB19E,KAAKu1B,eACP,MAAO,EAGT,IAAIuoD,GAAqB,EAEzB,QAAQH,GACN,IAAKV,IAAqBC,KAGxB,GAAIQ,IAAaT,GAAqBM,QACpCO,EAAa,wBACR,CAAA,GAAIJ,GAAYT,GAAqBK,cAG1C,MAAO,EAFPQ,GAAa,0BAIf,KACF,KAAKb,IAAqBO,UACxBM,EAAaJ,IAAaT,GAAqBM,QAC3C,oBAAsB,yBAC1B,MACF,KAAKN,IAAqBM,QACxBO,EAAaJ,IAAaT,GAAqBO,UAC3C,oBAAsB,uBAC1B,MACF,KAAKP,IAAqBK,cACxBQ,EAAaJ,IAAaT,GAAqBM,QAC3C,wBAA0B,0BAIlC,MAAO,qBAAqBO,kBA9UhC54E,KAACC,EAAAA,UAADC,OAAAC,SAAA,eACEC,SAAU,g3CACVC,QAAF;ssLACE4F,SAAF,cACEpF,MACFC,MAAA,eACMyyB,OAAN,KACI45C,qCAAJ,gBACIC,+BAAJ,UACIC,gCAAJ,WACIC,oCAAJ,4BACI35C,kCAAJ,uCAEAlmB,WAAA8/D,IACAjtE,QAAA,gBAAA,QAAA,YACEC,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,8FAlGAZ,KAAE4zB,EAAAA,eAFF5zB,SAAE2J,GAAFxI,aAAAnB,KAAA8J,EAAAA,UAAA5J,MAAA,gBANAF,SAAQ2J,GAARxI,aAAAnB,KAAAoB,EAAAA,WAAApB,KAAA4J,EAAAA,OAAA1J,MAAAstE,QAkLAxtE,SAAA2J,GAAAxI,aAAAnB,KAAeoB,EAAAA,WAAfpB,KAAA4J,EAAAA,OAAmC1J,MAAnC0e,EAAAA,4BAGA6uD,EAAApsE,wHAhEA8nB,KAAAnpB,KAAAuB,EAAAA,QAKAsyB,WAAA7zB,KAAAuB,EAAAA,QAKAsvB,gBAAQ7wB,KAARuB,EAAAA,QAMAiR,OAAAxS,KAAAuB,EAAAA,QAMAyF,SAAAhH,KAAAyB,EAAAA,SAGAisE,sBAAA1tE,KAAAyB,EAAAA,SAGAjF,QAAAwD,KAAAuB,EAAAA,QAIA2vB,gBAAAlxB,KAAAsB,EAAAA,UAAApB,MAAA,WAGAytE,SAAA3tE,KAAAsB,EAAAA,UAAApB,MAAA4zB,MAGA7D,UAAAjwB,KAAAuB,EAAAA,QAGArE,WAAA8C,KAAAuB,EAAAA,QA0CAqsE,gBAAG5tE,KAAHuB,EAAAA,SA8BAksE,OC5NaI,IACXngE,QAASyzD,EAAAA,cACTxzD,YAAaqP,EAAAA,WAAW,WAAM,MAAA8wD,MAC9Bh+C,OAAO,8EArBT,MAmCkD5sB,GAAlD4qE,EAAA7rE,kBANAjC,KAACmJ,EAAAA,UAADjJ,OACEC,SAAU,8HAEVsN,WAAYogE,IACZhtE,MAAOktE,kBAAmB,4BAjC5BD,GAmCkDE,EAAAA,uDCnClD,sBAgBAhuE,KAAC+J,EAAAA,SAAD7J,OACE8J,SAAUC,EAAAA,aAAcG,GAAiBF,GAAiBG,EAAAA,iBAC1DC,SAAUmjE,GAAaK,GAA8B5jE,IACrDQ,cAAe+iE,GAAaK,QAnB9BG,KCgDAC,GAAA,WACE,QAAFA,GAEWl+C,EAEAre,EAEA2nC,sBAJAx+C,KAAXk1B,OAAWA,EAEAl1B,KAAX6W,SAAWA,EAEA7W,KAAXw+C,YAAWA,EAvDX,MAAA40B,MA6DAC,GAAA,WACE,QAAFA,GAAqB3uE,GAAA1E,KAArB0E,YAAqBA,EA9DrB,MAAA2uE,MAiEaC,GACTtsE,EAAWC,EAAmBoG,EAAcgmE,KAAe,WAEzDE,IAAwB,8CApE9B,sBA0EAruE,KAACmJ,EAAAA,UAADjJ,OACEC,SAAU,mCACVU,MAAOC,MAAS,uBA5ElBwtE,iCAAA,sBAoFAtuE,KAACmJ,EAAAA,UAADjJ,OACEC,SAAU,gDACVU,MAAOC,MAAS,8BAtFlBytE,oBA2NE,QAAFC,GAAqBhvE,EACPyoE,EACAx8B,EAC+CjjC,GAH3D,GAAF7N,GAIIsH,EAJJC,KAAApH,KAIU0E,IAJV1E,WAAqBH,GAArB6E,YAAqBA,EAlGrB7E,EAAA8zE,0BAAqC,EAMrC9zE,EAAA+zE,gBAWA/zE,EAAAooD,WAAuB,EAGvBpoD,EAAAg0E,oBAAgC,EAsBhCh0E,EAAA2gC,WAAiC,EAuBjC3gC,EAAAi0E,aAAmC,EAUnCj0E,EAAAk0E,YAAkC,EAGlCl0E,EAAA68B,SAAsB,GAAI7wB,GAAAA,QAG1BhM,EAAA88B,QAAqB,GAAI9wB,GAAAA,QAIzBhM,EAAAwnC,gBAAM,GAAIt/B,GAAAA,aAGVlI,EAAAm0E,UAA6D,GAAIjsE,GAAAA,aAGjElI,EAAA27C,QAA2D,GAAIzzC,GAAAA,aAa3DlI,EAAKo0E,oBAELp0E,EAAKq0E,YAAc,GAAIC,IAAet0E,EAAMstE,EAAQzoE,EAAaisC,GACjE9wC,EAAKq0E,YAAY1mE,mBAAmB9I,EAAY9B,eAE5C8K,IACF7N,EAAK8zE,2BAA6BjmE,EAActL,SAEhDvC,EAAK+zE,cACHhmE,YAAaF,EAAcG,gBAC3BC,UAAWJ,EAAcI,UACzBH,qBAAsBD,EAAcC,yBA5O5C,MAkH6BvF,GAA7BsrE,EAAAvsE,GAmBE3F,OAAFC,eAAMiyE,EAAN3yE,UAAA,sBAAE,WACE,MAAOf,MAAKoC,UAAYpC,KAAKkiC,eAAiBliC,KAAK2zE,0DAoBvDnyE,OAAAC,eAAMiyE,EAAN3yE,UAAA,gBAAA,WAA4B,MAAOf,MAAKwgC,eACtC,SAAa9+B,GACX1B,KAAKwgC,UAAYn4B,EAAAA,sBAAsB3G,GACvC1B,KAAKqnC,gBAAgBtlC,MACnBmzB,OAAQl1B,KACRw+C,aAAa,EACb3nC,SAAUnV,qCAOhBF,OAAAC,eAAMiyE,EAAN3yE,UAAA,wBACI,WAAsB8N,IAAf7O,KAAK45B,OACR55B,KAAK45B,OACL55B,KAAK0E,YAAY9B,cAAc0O,iBAErC,SAAU5P,GAAc1B,KAAK45B,OAASl4B,mCAUxCF,OAAAC,eAAMiyE,EAAN3yE,UAAA,kBAAA,WAA8B,MAAOf,MAAK8zE,aAAe9zE,KAAK6zE,wBAC5D,SAAenyE,GACb1B,KAAK8zE,YAAczrE,EAAAA,sBAAsB3G,oCAQ7CF,OAAAC,eAAMiyE,EAAN3yE,UAAA,iBAAA,WAA6B,MAAOf,MAAK+zE,gBACvC,SAAcryE,GACZ1B,KAAK+zE,WAAa1rE,EAAAA,sBAAsB3G,oCAqB1CF,OAAFC,eAAMiyE,EAAN3yE,UAAA,oBAAE,WACE,MAAOf,MAAKo0E,WAAap0E,KAAK6W,SAASyjB,WAAa,sCAyBtDo5C,EAAF3yE,UAAAkzE,kBAAE,WAEE,IAAmB,GAAvBjrB,GAAA,EAAuBqrB,EAAvBd,GAAuBvqB,EAAvBqrB,EAAA7xE,OAAuBwmD,IAAvB,CAAS,GAAMsrB,GAAfD,EAAArrB,EACM,IAAIhpD,KAAK0E,YAAY9B,cAAc0oE,aAAagJ,IAC9Ct0E,KAAK0E,YAAY9B,cAAc2xE,QAAQ32D,gBAAkB02D,EAEzD,WADCt0E,MAAK0E,YAAwC,cAAE8D,UAAUG,IAAI2rE,GAIjEt0E,KAAK0E,YAAwC,cAAE8D,UAAUG,IAAI,sBAGhE+qE,EAAF3yE,UAAAC,YAAE,WACEhB,KAAKg0E,UAAUjyE,MAAMyyE,KAAMx0E,OAC3BA,KAAKk0E,YAAYO,wBAInBf,EAAF3yE,UAAAw6C,OAAE,WACEv7C,KAAKwgC,WAAY,EACjBxgC,KAAKqnC,gBAAgBtlC,MACnBmzB,OAAQl1B,KACRw+C,aAAa,EACb3nC,UAAU,KAKd68D,EAAF3yE,UAAA06C,SAAE,WACEz7C,KAAKwgC,WAAY,EACjBxgC,KAAKqnC,gBAAgBtlC,MACnBmzB,OAAQl1B,KACRw+C,aAAa,EACb3nC,UAAU,KAKd68D,EAAF3yE,UAAA2zE,qBAAE,WACE10E,KAAKwgC,WAAY,EAEjBxgC,KAAKqnC,gBAAgBtlC,MACnBmzB,OAAQl1B,KACRw+C,aAAa,EACb3nC,UAAU,KAKd68D,EAAF3yE,UAAA4zE,eAAE,SAAen2B,GASb,WATJ,KAAAA,IAAiBA,GAAjB,GACIx+C,KAAKwgC,WAAaxgC,KAAK6W,SAEvB7W,KAAKqnC,gBAAgBtlC,MACnBmzB,OAAQl1B,KACRw+C,YAANA,EACM3nC,SAAU7W,KAAKwgC,YAGVxgC,KAAK6W,UAId68D,EAAF3yE,UAAA0B,MAAE,WACOzC,KAAKioD,YACRjoD,KAAK0E,YAAY9B,cAAcH,QAC/BzC,KAAK08B,SAAS9vB,MAAM4nE,KAAMx0E,QAE5BA,KAAKioD,WAAY,GASnByrB,EAAF3yE,UAAA0H,OAAE,WACMzI,KAAK40E,WACP50E,KAAKw7C,QAAQz5C,MAAMyyE,KAAMx0E,QAK7B0zE,EAAF3yE,UAAAgK,aAAE,SAAajB,GAEP9J,KAAKoC,WAIT0H,EAAMqE,iBACNrE,EAAM0sB,oBAIRk9C,EAAF3yE,UAAAsiB,eAAE,SAAevZ,GACb,IAAI9J,KAAKoC,SAIT,OAAQ0H,EAAMwZ,SACZ,IAAKuxD,GAAAA,OACL,IAAKC,GAAAA,UAEH90E,KAAKyI,SAELqB,EAAMqE,gBACN,MACF,KAAKyV,GAAAA,MAEC5jB,KAAKo0E,YACPp0E,KAAK20E,gBAAe,GAItB7qE,EAAMqE,mBAKZulE,EAAF3yE,UAAAg0E,MAAE,WACE/0E,KAAKioD,WAAY,EACjBjoD,KAAK28B,QAAQ/vB,MAAM4nE,KAAMx0E,uBA7Q7BkF,KAACmJ,EAAAA,UAADjJ,OACEC,SAAU,yDACVG,QAAS,QAAS,WAAY,iBAC9B2F,SAAU,UACVpF,MACEC,MAAS,WACTs8C,kBAAmB,uBACnBhwC,KAAQ,SACR0iE,4BAA6B,WAC7BC,+BAAgC,SAChCC,sCAAuC,6BACvCC,4BAA6B,WAC7BlvB,kBAAmB,mBACnB13C,uBAAwB,sBACxBo6C,uBAAwB,eACxBh6C,UAAW,uBACX0vB,YAAa,yBACbF,UAAW,UACXC,SAAU,mDAhGdl5B,KAAE4N,EAAAA,aAKF5N,KAAE8H,EAAAA,SATF9H,KAAQ0J,EAAAA,WAmNR1J,SAAA2J,GAAAxI,aAAAnB,KAAeoB,EAAAA,WAAfpB,KAA2B4J,EAAAA,OAA3B1J,MAAkC2J,2BA9ElCqmE,SAAAlwE,KAAG6tB,EAAAA,aAAH3tB,MAAgBouE,MAGhB6B,eAAAnwE,KAAG6tB,EAAAA,aAAH3tB,MAAgBquE,MAGhB6B,aAAApwE,KAAG6tB,EAAAA,aAAH3tB,MAAgB8c,EAAAA,WAAW,WAAM,MAAAqzD,SAGjC1+D,WAAA3R,KAAGuB,EAAAA,QAaH/E,QAAAwD,KAAGuB,EAAAA,QAeH2tE,aAAAlvE,KAAGuB,EAAAA,QAUHmuE,YAAA1vE,KAAGuB,EAAAA,QAcH4gC,kBAAAniC,KAAGyB,EAAAA,SAIHqtE,YAAA9uE,KAAGyB,EAAAA,SAGH60C,UAAAt2C,KAAGyB,EAAAA,UApNH+sE,GAkH6BJ,kBAkR3B,QAAFiC,GAAwBC,GAAAx1E,KAAxBw1E,YAAwBA,EApYxB,MAwYED,GAAFx0E,UAAAgK,aAAE,WACM/K,KAAKw1E,YAAYZ,WACnB50E,KAAKw1E,YAAY/sE,yBAdvBvD,KAACmJ,EAAAA,UAADjJ,OACEC,SAAU,kBACVU,MACEC,MAAS,yCACT2I,UAAW,0DA9QfzJ,KAAawuE,MAlHb6B,KCiBaE,GACT,GAAI/1D,GAAAA,eAAuC,6BCwB/Cg2D,GAAA,WACE,QAAFA,GAAqBp9B,EACAC,EACAC,EAEAC,GAJAz4C,KAArBs4C,0BAAqBA,EACAt4C,KAArBu4C,YAAqBA,EACAv4C,KAArBw4C,iBAAqBA,EAEAx4C,KAArBy4C,UAAqBA,EA/CrB,MAAAi9B,MAiDaC,GAAwBh9B,EAAgB+8B,IAIjD9gD,GAAe,EAGnBghD,GAAA,WACE,QAAFA,GAEW1gD,EAEAxzB,GAFA1B,KAAXk1B,OAAWA,EAEAl1B,KAAX0B,MAAWA,EA7DX,MAAAk0E,qBAoUE,QAAFC,GAAwBnxE,EACFvD,EACY8B,EACRs1C,EACAC,EACZF,EAE2BG,GAPvC,GAAF54C,GAQIsH,EARJC,KAAApH,KAQUs4C,EAA2BC,EAAaC,EAAkBC,IARpEz4C,WAAwBH,GAAxB6E,YAAwBA,EACF7E,EAAtBsB,mBAAsBA,EACYtB,EAAlCoD,KAAkCA,EAKOpD,EAAzC44C,UAAyCA,EArOzC54C,EAAAo6C,YAAiC,gBAGjCp6C,EAAAi2E,oBAA+C,KAG/Cj2E,EAAAk2E,SAAkD,GAAI7qD,SAGtDrrB,EAAAm2E,oBAAgCxuE,EAAAA,aAAaC,MAqB7C5H,EAAAu5C,KAAiB,iBAAiBxkB,KAMlC/0B,EAAAo2E,UAAc,EAMdp2E,EAAAq2E,cAAiC,KAMjCr2E,EAAA25C,WAAe,aAGf35C,EAAA05C,UAAoC,aAqBpC15C,EAAAm5C,WAA+B,EAgB/Bn5C,EAAAo5C,aAAyB,SAACC,EAASC,GAAY,MAAAD,KAAOC,GAgCtDt5C,EAAA+1B,WAAiC,EA2CjC/1B,EAAA8gC,WAAiC,EAGjC9gC,EAAAs2E,gBAA0E,aAc1Et2E,EAAAi0E,aAAmC,EA8BnCj0E,EAAAqM,OAAM,GAAInE,GAAAA,aAOVlI,EAAAynC,YAAsD,GAAIv/B,GAAAA,aAclDlI,EAAK44C,YACP54C,EAAK44C,UAAUgC,cAAgB56C,KAZrC,MAlOiCuI,GAAjCytE,EAAA1uE,GA8DE3F,OAAFC,eAAMo0E,EAAN90E,UAAA,gBAAE,WACE,MAAOf,MAAKinC,SAAWjnC,KAAK46C,gBAAgB/jC,SAAW7W,KAAK46C,gBAAgB/jC,SAAS,oCAIvFrV,OAAFC,eAAMo0E,EAAN90E,UAAA,YAAE,WAA4B,MAAOf,MAAKm8C,MAAQ,KAAO,2CAOzD36C,OAAAC,eAAMo0E,EAAN90E,UAAA,gBAAA,WAA4B,MAAOf,MAAKg5C,eACtC,SAAat3C,GACX1B,KAAKg5C,UAAY3wC,EAAAA,sBAAsB3G,oCAU3CF,OAAAC,eAAMo0E,EAAN90E,UAAA,mBAAA,WAAqD,MAAOf,MAAKi5C,kBAC/D,SAAgBpiB,GACd72B,KAAKi5C,aAAepiB,EAChB72B,KAAK46C,iBAEP56C,KAAK+6C,wDAUXv5C,OAAAC,eAAMo0E,EAAN90E,UAAA,aAAA,WAAqB,MAAOf,MAAK45B,YAC/B,SAAUl4B,GACR1B,KAAK22B,WAAWj1B,GAChB1B,KAAK45B,OAASl4B,mCAQhBF,OAAFC,eAAMo0E,EAAN90E,UAAA,UAAE,WACE,MAAOf,MAAKo2E,WAAap2E,KAAKo2E,WAAW/nD,GAAKruB,KAAKo5C,sCAQvD53C,OAAAC,eAAMo0E,EAAN90E,UAAA,gBAAA,WAA4B,MAAOf,MAAK41B,eACtC,SAAal0B,GACX1B,KAAK41B,UAAYvtB,EAAAA,sBAAsB3G,GACvC1B,KAAK26C,aAAa/tC,wCAStBpL,OAAAC,eAAMo0E,EAAN90E,UAAA,8BACI,MAAOf,MAAKo2E,WAAap2E,KAAKo2E,WAAWpvC,YAAchnC,KAAK06C,kBAE9D,SAAgBh5C,GACd1B,KAAK06C,aAAeh5C,EACpB1B,KAAK26C,aAAa/tC,wCAKpBpL,OAAFC,eAAMo0E,EAAN90E,UAAA,eAAE,WACE,MAAOf,MAAKq2E,MAAMhlE,KAAK,SAAAmjE,GAAQ,MAAAA,GAAKvsB,aACjCjoD,KAAKo2E,YAAcp2E,KAAKo2E,WAAW/I,yCAOxC7rE,OAAFC,eAAMo0E,EAAN90E,UAAA,aAAE,WACE,QAASf,KAAKo2E,YAAcp2E,KAAKo2E,WAAWj6B,QAAgC,IAAtBn8C,KAAKq2E,MAAM7zE,wCAOnEhB,OAAFC,eAAMo0E,EAAN90E,UAAA,wBAAE,WAAkC,OAAQf,KAAKm8C,OAASn8C,KAAKqtE,yCAO/D7rE,OAAAC,eAAMo0E,EAAN90E,UAAA,gBAAA,WAA4B,MAAOf,MAAKy4C,YAAcz4C,KAAKy4C,UAAUr2C,SAAWpC,KAAK2gC,eACnF,SAAaj/B,GAAkB1B,KAAK2gC,UAAYt4B,EAAAA,sBAAsB3G,oCAWxEF,OAAAC,eAAMo0E,EAAN90E,UAAA,kBAAA,WAA8B,MAAOf,MAAK8zE,iBACxC,SAAepyE,GAAf,GAAF7B,GAAAG,IACIA,MAAK8zE,YAAczrE,EAAAA,sBAAsB3G,GACrC1B,KAAKq2E,OACPr2E,KAAKq2E,MAAMjtE,QAAQ,SAAAorE,GAAQ,MAAAA,GAAKX,mBAAqBh0E,EAAKi0E,+CAMhEtyE,OAAAC,eAAMo0E,EAAN90E,UAAA,gBAAA,SAAeW,GACX1B,KAAKk2E,cAAgBx0E,EACrB1B,KAAKi2E,UAAYv0E,mCAInBF,OAAFC,eAAMo0E,EAAN90E,UAAA,4BAAE,WACE,MAAOL,GAAAA,MAAXqJ,UAAA,GAAoB/J,KAAKq2E,MAAMrsE,IAAI,SAAAwqE,GAAQ,MAAAA,GAAKntC,oDAI9C7lC,OAAFC,eAAMo0E,EAAN90E,UAAA,wBAAE,WACE,MAAOL,GAAAA,MAAXqJ,UAAA,GAAoB/J,KAAKq2E,MAAMrsE,IAAI,SAAAwqE,GAAQ,MAAAA,GAAK93C,6CAI9Cl7B,OAAFC,eAAMo0E,EAAN90E,UAAA,uBAAE,WACE,MAAOL,GAAAA,MAAXqJ,UAAA,GAAoB/J,KAAKq2E,MAAMrsE,IAAI,SAAAwqE,GAAQ,MAAAA,GAAK73C,4CAI9Cn7B,OAAFC,eAAMo0E,EAAN90E,UAAA,yBAAE,WACE,MAAOL,GAAAA,MAAXqJ,UAAA,GAAoB/J,KAAKq2E,MAAMrsE,IAAI,SAAAwqE,GAAQ,MAAAA,GAAKR,8CA+B9C6B,EAAF90E,UAAAyI,mBAAE,WAAA,GAAF3J,GAAAG,IACIA,MAAKC,YAAc,GAAIC,GAAAA,gBAAyBF,KAAKq2E,OAClDxvB,WACA1I,0BACA/9C,0BAA0BJ,KAAKiD,KAAOjD,KAAKiD,KAAKvB,MAAQ,OAI3D1B,KAAKg2E,oBAAsBh2E,KAAKC,YAAYm+C,OAAOv9C,UAAU,WAC3DhB,EAAKo2E,WAAa,EAClBnwD,WAAW,WAAM,MAAAjmB,GAAKo2E,UAAYp2E,EAAKq2E,eAAiB,MAI1Dl2E,KAAKs2E,oBAAsBt2E,KAAKq2E,MAAM3sE,QAAQ0C,KAAKoV,EAAAA,UAAU,OAAO3gB,UAAU,WAC5EhB,EAAK02E,cAGL12E,EAAKk7C,uBAGLl7C,EAAK22E,kBAGL32E,EAAK42E,gCAEL52E,EAAK86C,aAAa/tC,UAItBipE,EAAF90E,UAAA8f,SAAE,WACE7gB,KAAK46C,gBAAkB,GAAIK,GAAAA,eAAwBj7C,KAAKinC,aAAUp4B,IAAW,GAC7E7O,KAAK26C,aAAa/tC,QAGpBipE,EAAF90E,UAAA6kC,UAAE,WACM5lC,KAAKy4C,WAIPz4C,KAAK27C,oBAITk6B,EAAF90E,UAAAC,YAAE,WACEhB,KAAKg2E,oBAAoB/0E,cAErBjB,KAAKs2E,qBACPt2E,KAAKs2E,oBAAoBr1E,cAGvBjB,KAAK02E,yBACP12E,KAAK02E,wBAAwBz1E,cAG/BjB,KAAK22E,qBACL32E,KAAK26C,aAAa9tC,YAKpBgpE,EAAF90E,UAAA61E,cAAE,SAAcC,GACZ72E,KAAKo2E,WAAaS,GAOpBhB,EAAF90E,UAAAmhD,kBAAE,SAAkBC,GAAiBniD,KAAKoiD,iBAAmBD,EAAI5F,KAAK,MAGpEs5B,EAAF90E,UAAA41B,WAAE,SAAWj1B,GACL1B,KAAKq2E,OACPr2E,KAAKk8C,qBAAqBx6C,GAAO,IAKrCm0E,EAAF90E,UAAA61B,iBAAE,SAAiBC,GACf72B,KAAKu5C,UAAY1iB,GAInBg/C,EAAF90E,UAAA+1B,kBAAE,SAAkBD,GAChB72B,KAAKw5C,WAAa3iB,GAIpBg/C,EAAF90E,UAAAg2B,iBAAE,SAAiBC,GACfh3B,KAAKoC,SAAW40B,EAChBh3B,KAAK0E,YAAY9B,cAAcR,SAAW40B,EAC1Ch3B,KAAK26C,aAAa/tC,QAOpBipE,EAAF90E,UAAAshD,iBAAE,WAAqBriD,KAAKyC,SAM1BozE,EAAF90E,UAAA0B,MAAE,WAGMzC,KAAKo2E,YAAcp2E,KAAKo2E,WAAW/I,UAE5BrtE,KAAKq2E,MAAM7zE,OAAS,GAC7BxC,KAAKC,YAAYujB,qBACjBxjB,KAAK26C,aAAa/tC,SAElB5M,KAAK82E,cACL92E,KAAK26C,aAAa/tC,UAKtBipE,EAAF90E,UAAA+1E,YAAE,WACM92E,KAAKo2E,YACPp2E,KAAKo2E,WAAW3zE,SAOpBozE,EAAF90E,UAAA81D,SAAE,SAAS/sD,GACP,GAAMw8D,GAASx8D,EAA2B,MAGtCA,GAAMwZ,UAAYwxD,EAAAA,WAAa90E,KAAK+2E,cAAczQ,IACpDtmE,KAAKC,YAAYyjB,oBACjB5Z,EAAMqE,kBACGm4D,GAAUA,EAAO99D,UAAU0I,SAAS,cAC7ClR,KAAKC,YAAY4jB,UAAU/Z,GAC3B9J,KAAK26C,aAAa/tC,SAQZipE,EAAZ90E,UAAAy1E,gBAAE,WAEEx2E,KAAKi2E,UAAYj2E,KAAKk2E,gBAAwC,IAAtBl2E,KAAKq2E,MAAM7zE,QAAgB,EAAI,IAS/DqzE,EAAZ90E,UAAAi2E,kBAAE,SAA4BxC,GAC1B,GAAIyC,GAAoBj3E,KAAKq2E,MAAMl0E,UAAU2b,QAAQ02D,EACjDx0E,MAAK2B,cAAcs1E,KACjBzC,EAAKvsB,YAEHgvB,EAAYj3E,KAAKq2E,MAAM7zE,OAAS,EAClCxC,KAAKC,YAAY4B,cAAco1E,GACtBA,EAAY,GAAK,GAC1Bj3E,KAAKC,YAAY4B,cAAco1E,EAAY,IAG3Cj3E,KAAKC,YAAYizC,kBAAoB+jC,IACvCj3E,KAAK81E,oBAAsBmB,KASvBpB,EAAZ90E,UAAA01E,8BAAE,WACE,GAAIS,GAAal3E,KAAKq2E,KAEtB,IAAgC,MAA5Br2E,KAAK81E,qBAA+BoB,EAAW10E,OAAS,GAAKxC,KAAKqtE,QAAS,CAE7E,GAAM8J,GAAgB1zE,KAAKE,IAAI3D,KAAK81E,oBAAqBoB,EAAW10E,OAAS,EAC7ExC,MAAKC,YAAY4B,cAAcs1E,EAC/B,IAAIC,GAAYp3E,KAAKC,YAAY48C,UAE7Bu6B,IACFA,EAAU30E,QAKdzC,KAAK81E,oBAAsB,MASrBD,EAAV90E,UAAAY,cAAA,SAAwBM,GACpB,MAAOA,IAAS,GAAKA,EAAQjC,KAAKq2E,MAAM7zE,QAGlCqzE,EAAV90E,UAAAg2E,cAAA,SAAwBhrE,GACpB,GAAIA,GAA8C,UAAnCA,EAAQ88B,SAASjrB,cAA2B,CAEzD,OADS,EACKlc,MAGhB,OAAO,GAGTm0E,EAAF90E,UAAAm7C,qBAAE,SAAqBx6C,EAAY88C,GAAjC,GAAF3+C,GAAAG,IAII,QAJJ,KAAAw+C,IAAmCA,GAAnC,GACIx+C,KAAKq3E,kBACLr3E,KAAKq2E,MAAMjtE,QAAQ,SAAAorE,GAAQ,MAAAA,GAAK/4B,aAE5B1yB,MAAMC,QAAQtnB,GAChBA,EAAM0H,QAAQ,SAAAs0C,GAAgB,MAAA79C,GAAK89C,aAAaD,EAAcc,KAC9Dx+C,KAAK49C,kBACA,CACL,GAAM05B,GAAoBt3E,KAAK29C,aAAaj8C,EAAO88C,EAI/C84B,IACE94B,GACFx+C,KAAKC,YAAY4B,cAAcy1E,KAU/BzB,EAAV90E,UAAA48C,aAAA,SAAuBj8C,EAAY88C,kBAAnC,KAAAA,IAAmCA,GAAnC,EAEI,IAAM84B,GAAoBt3E,KAAKq2E,MAAM5pE,KAAK,SAAA+nE,GACxC,MAAqB,OAAdA,EAAK9yE,OAAiB7B,EAAKo5C,aAAau7B,EAAK9yE,MAAQA,IAQ9D,OALI41E,KACF94B,EAAc84B,EAAkB5C,uBAAyB4C,EAAkB/7B,SAC3Ev7C,KAAK46C,gBAAgBW,OAAO+7B,IAGvBA,GAGDzB,EAAV90E,UAAAg6C,0CAGI9xC,SAAQC,UAAUC,KAAK,YACjBtJ,EAAK44C,WAAa54C,EAAK+5B,UACzB/5B,EAAKq8C,qBAAqBr8C,EAAK44C,UAAY54C,EAAK44C,UAAU/2C,MAAQ7B,EAAK+5B,QAAQ,GAC/E/5B,EAAK86C,aAAa/tC,WAShBipE,EAAV90E,UAAAs2E,gBAAA,SAA0BE,GACtBv3E,KAAK46C,gBAAgBhR,QACrB5pC,KAAKq2E,MAAMjtE,QAAQ,SAAAorE,GACbA,IAAS+C,GACX/C,EAAK/4B,aAGTz7C,KAAK26C,aAAa/tC,QAOZipE,EAAV90E,UAAA68C,iCACQ59C,MAAKg5C,YACPh5C,KAAK46C,gBAAgBhR,QAErB5pC,KAAKq2E,MAAMjtE,QAAQ,SAAAorE,GACbA,EAAK39D,UACPhX,EAAK+6C,gBAAgBW,OAAOi5B,KAGhCx0E,KAAK26C,aAAa/tC,SAKdipE,EAAV90E,UAAA69C,kBAAA,SAA4BE,GACxB,GAAIC,GAAmB,IAGrBA,GADEh2B,MAAMC,QAAQhpB,KAAK6W,UACP7W,KAAK6W,SAAS7M,IAAI,SAAAwqE,GAAQ,MAAAA,GAAK9yE,QAE/B1B,KAAK6W,SAAW7W,KAAK6W,SAASnV,MAAQo9C,EAEtD9+C,KAAK45B,OAASmlB,EACd/+C,KAAKkM,OAAOnK,KAAK,GAAI6zE,IAAkB51E,KAAM++C,IAC7C/+C,KAAKsnC,YAAYvlC,KAAKg9C,GACtB/+C,KAAKu5C,UAAUwF,GACf/+C,KAAKmB,mBAAmBC,gBAI1By0E,EAAF90E,UAAAg0E,MAAE,WAAA,GAAFl1E,GAAAG,IACIA,MAAKC,YAAY4B,eAAe,GAC3B7B,KAAKoC,WACJpC,KAAKo2E,WAKPtwD,WAAW,WACJjmB,EAAKwtE,SACRxtE,EAAK23E,mBAKTx3E,KAAKw3E,mBAMX3B,EAAF90E,UAAAy2E,eAAE,WACEx3E,KAAKw5C,aACLx5C,KAAKmB,mBAAmBC,eACxBpB,KAAK26C,aAAa/tC,QAGZipE,EAAV90E,UAAAw1E,uBACIv2E,KAAK22E,qBACL32E,KAAKy3E,sBACLz3E,KAAK03E,0BACL13E,KAAK23E,yBAIC9B,EAAV90E,UAAA41E,8BACQ32E,KAAK43E,yBACP53E,KAAK43E,uBAAuB32E,cAC5BjB,KAAK43E,uBAAyB,MAG5B53E,KAAK63E,wBACP73E,KAAK63E,sBAAsB52E,cAC3BjB,KAAK63E,sBAAwB,MAG3B73E,KAAK83E,6BACP93E,KAAK83E,2BAA2B72E,cAChCjB,KAAK83E,2BAA6B,OAK9BjC,EAAV90E,UAAA22E,6CACI13E,MAAK83E,2BAA6B93E,KAAK+3E,qBAAqBl3E,UAAU,SAAAiJ,GACpEA,EAAMorB,OAAOre,SACThX,EAAK+6C,gBAAgBW,OAAOzxC,EAAMorB,QAClCr1B,EAAK+6C,gBAAgBa,SAAS3xC,EAAMorB,QAGnCr1B,EAAKonC,UACRpnC,EAAKw2E,MAAMjtE,QAAQ,SAAAorE,IACZ30E,EAAK+6C,gBAAgB+D,WAAW61B,IAASA,EAAK39D,UACjD29D,EAAK/4B,aAKP3xC,EAAM00C,aACR3+C,EAAK++C,uBAMHi3B,EAAV90E,UAAA02E,yCACIz3E,MAAK43E,uBAAyB53E,KAAKg4E,iBAAiBn3E,UAAU,SAAAiJ,GAC5D,GAAImtE,GAAoBp3E,EAAKw2E,MAAMl0E,UAAU2b,QAAQhU,EAAM0qE,KAEvD30E,GAAK8B,cAAcs1E,IACrBp3E,EAAKI,YAAYK,sBAAsB22E,GAEzCp3E,EAAK86C,aAAa/tC,SAGpB5M,KAAK63E,sBAAwB73E,KAAKi4E,gBAAgBp3E,UAAU,WAC1DhB,EAAKk1E,QACLl1E,EAAK86C,aAAa/tC,UAIdipE,EAAV90E,UAAA42E,2CACI33E,MAAK02E,wBAA0B12E,KAAKk4E,kBAAkBr3E,UAAU,SAAAiJ,GAC9DjK,EAAKm3E,kBAAkBltE,EAAM0qE,wBAnqBnCtvE,KAACC,EAAAA,UAADC,OAAAC,SAAA,gBACEC,SAAU,qEACV6F,SAAU,cACVpF,MACFu8C,kBAAyB,YACnBO,0BAAN,2BACIJ,uBAAJ,sBACIl0C,uBAAJ,sBACIm0C,sBAAJ,aACIE,8BAAJ,WACIlwC,cAAJ,OACIylE,iCAAJ,WACIC,gCAAJ,aACIC,iCAAkC,WAClCv5C,0BAAJ,kBACI94B,MAAJ,gBACIm4B,UAAJ,UACIC,SAAJ,UACIC,YAAJ,mBACI5F,OAAQ,QAEZ9lB,YAAAC,QAAAswC,GAAArwC,YAAAgjE,IACAtwE,QAAA,mvEACEE,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,8FAxEAZ,KAAEkB,EAAAA,eAAFC,aAAAnB,KAAAoB,EAAAA,aAJApB,KAAEk+C,EAAAA,OAAF/8C,aAAAnB,KAAAoB,EAAAA,aAPApB,KAAQm+C,EAAAA,mBAARh9C,aAAAnB,KAAAoB,EAAAA,aAsBApB,KAA6DmT,KAA7DnT,KAA8Bq+C,EAAAA,UAA9Bl9C,aAAAnB,KAAAoB,EAAAA,WAAApB,KAAAwyC,EAAAA,UAAAm+B,EAAkDtvE,6EAuIlD4gC,cAAAjiC,KAAAuB,EAAAA,QAGA/E,QAAAwD,KAAAuB,EAAAA,QAYAsyB,WAAA7zB,KAAAuB,EAAAA,QAeAugC,cAAG9hC,KAAHuB,EAAAA,QAoBArE,WAAA8C,KAAGuB,EAAAA,QAYH0vE,kBAAAjxE,KAAAuB,EAAAA,MAAArB,MAAA,sBAkCAgvE,aAAAlvE,KAAAuB,EAAAA,QAMApE,WAAA6C,KAAAuB,EAAAA,QAMAyF,SAAAhH,KAAAyB,EAAAA,SAUA2gC,cAAApiC,KAAAyB,EAAAA,SA2BA0vE,QAAAnxE,KAAAqO,EAAAA,gBAAAnO,MAAAsuE,OAWAmC,OC1SIjhD,GAAe,gBAsEjB,QAAF0jD,GACc5zE,EACiC6jC,GADjCvoC,KAAd0E,YAAcA,EACiC1E,KAA/CuoC,gBAA+CA,EAnD/CvoC,KAAAqtE,SAAqB,EAkBrBrtE,KAAAu4E,YAAwB,EASxBv4E,KAAAw4E,kBAAgCx4E,KAAKuoC,gBAAgBiwC,kBAIrDx4E,KAAAy4E,QAA6C,GAAI1wE,GAAAA,aAOjD/H,KAAAgnC,YAAiC,GAGjChnC,KAAAquB,GAAwB,uBAAuBuG,KAW3C50B,KAAKo2B,cAAgBp2B,KAAK0E,YAA6C,cAjG3E,MAkDAlD,QAAAC,eAAM62E,EAANv3E,UAAA,gBAAA,SAAeW,GACPA,IACF1B,KAAK04E,UAAYh3E,EACjB1B,KAAK04E,UAAU9B,cAAc52E,wCAQnCwB,OAAAC,eAAM62E,EAANv3E,UAAA,iBAAA,WAA6B,MAAOf,MAAKu4E,gBACvC,SAAc72E,GAAkB1B,KAAKu4E,WAAalwE,EAAAA,sBAAsB3G,oCA2BxEF,OAAFC,eAAM62E,EAANv3E,UAAA,aAAE,WAAuB,OAAQf,KAAKo2B,cAAc10B,uCAYlD42E,EAAFv3E,UAAA81D,SAAE,SAAS/sD,GACP9J,KAAK24E,aAAa7uE,IAIpBwuE,EAAFv3E,UAAAg0E,MAAE,WACM/0E,KAAK44E,WACP54E,KAAK24E,eAEP34E,KAAKqtE,SAAU,EAEVrtE,KAAK04E,UAAUrL,SAClBrtE,KAAK04E,UAAU3D,QAEjB/0E,KAAK04E,UAAU/9B,aAAa/tC,QAG9B0rE,EAAFv3E,UAAA83E,OAAE,WACE74E,KAAKqtE,SAAU,EACfrtE,KAAK04E,UAAU/9B,aAAa/tC,QAI9B0rE,EAAFv3E,UAAA43E,aAAE,SAAa7uE,IACN9J,KAAKo2B,cAAc10B,OAAWoI,GACjC9J,KAAK04E,UAAU7hB,SAAS/sD,KAErBA,GAAS9J,KAAKw4E,kBAAkB16D,QAAQhU,EAAMwZ,UAAY,KAC7DtjB,KAAKy4E,QAAQ12E,MAAOsiB,MAAOrkB,KAAKo2B,cAAe10B,MAAO1B,KAAKo2B,cAAc10B,QAErEoI,GACFA,EAAMqE,mBAKZmqE,EAAFv3E,UAAAkwD,SAAE,WAEEjxD,KAAK04E,UAAU/9B,aAAa/tC,QAI9B0rE,EAAFv3E,UAAA0B,MAAE,WAAgBzC,KAAKo2B,cAAc3zB,wBAjHrCyC,KAACmJ,EAAAA,UAADjJ,OACEC,SAAU,yBACV8F,SAAU,gCACVpF,MACEC,MAAS,mCACTq4B,YAAa,mBACbD,SAAU,UACVD,UAAW,WACXi0B,UAAW,aACX35B,OAAQ,KACRq2C,qBAAsB,+DA/B1B5pE,KAAmB4N,EAAAA,aAuFnB5N,SAAA2J,GAAAxI,aAAAnB,KAAK4J,EAAAA,OAAL1J,MAAYqwE,2BA/CZqD,WAAA5zE,KAAGuB,EAAAA,MAAHrB,MAAS,qBAWTwzE,YAAA1zE,KAAGuB,EAAAA,MAAHrB,MAAS,2BAWTozE,oBAAAtzE,KAAGuB,EAAAA,MAAHrB,MAAS,mCAITqzE,UAAAvzE,KAAGyB,EAAAA,OAAHvB,MAAU,0BAQV4hC,cAAA9hC,KAAGuB,EAAAA,QAGH4nB,KAAAnpB,KAAGuB,EAAAA,SAtFH6xE,KCgBMS,IACJlD,GACAnC,GACA4E,GACA/C,GACA/B,GACAC,IAUFuF,IACQR,mBAAoB70D,EAAAA,oCAjC5B,sBAyBAze,KAAC+J,EAAAA,SAAD7J,OACEoK,QAASupE,GACTnpE,aAAcmpE,GACdpmE,WACE0F,IAEEzF,QAAS6iE,GACTwD,SAAQ,SAhCdC,KCiCArR,GAAA,wBAcA7nE,KAAAsS,KAAsB,SAGtBtS,KAAA8oB,WAAmC,GAGnC9oB,KAAAkzB,aAA0B,EAG1BlzB,KAAAu2C,cAA2B,GAG3Bv2C,KAAAkmC,cAA2B,EAG3BlmC,KAAAmgB,MAAmB,GAGnBngB,KAAA2K,OAAoB,GASpB3K,KAAA6qE,SAA+B,OAS/B7qE,KAAAkT,KAAoB,KAMpBlT,KAAAm5E,gBAAoC,KAGpCn5E,KAAAg2B,UAA8B,KAG9Bh2B,KAAAo5E,WAAwB,EAMxBp5E,KAAAwoE,mBAAgC,EArGhC,MAAAX,MCiBawR,IAIXC,YAAariE,EAAAA,QAAQ,eAKnBC,EAAAA,MAAM,QAAS7T,EAAAA,OAAQC,UAAW,OAAQwjB,QAAS,KACnD5P,EAAAA,MAAM,OAAQ7T,EAAAA,OAAQC,UAAW,oCAAqCwjB,QAAS,KAC/E5P,EAAAA,MAAM,OAAQ7T,EAAAA,OAAQC,UAAW,yBAA0BwjB,QAAS,KACpE1P,EAAAA,WAAW,SAAUC,EAAAA,QAAQ,6DrBiE/B,QAAFywD,GACYpjE,EACAs+B,EACA7hC,EAC8BqP,EAE/Bma,GANT,GAAF9qB,GAQIsH,EARJC,KAAApH,OAAAA,WACYH,GAAZ6E,YAAYA,EACA7E,EAAZmjC,kBAAYA,EACAnjC,EAAZsB,mBAAYA,EAC8BtB,EAA1C2Q,UAA0CA,EAE/B3Q,EAAX8qB,QAAWA,EApBX9qB,EAAA05E,qCAAqE,KAGrE15E,EAAA25E,OAAsC,QAGtC35E,EAAAyoE,uBAA2B,GAAIvgE,GAAAA,aAG/BlI,EAAAosE,gBAAmC,OAfnC,MAFwC7jE,GAAxC0/D,EAAA3gE,GAqCE2gE,EAAF/mE,UAAAgnB,sBAAE,SAAyBC,GAMvB,MALIhoB,MAAKmoB,cAAcvG,eACrB63D,IAGFz5E,KAAK05E,gCACE15E,KAAKmoB,cAAcJ,sBAAsBC,IAOlD8/C,EAAF/mE,UAAAqnB,qBAAE,SAAwBJ,GAMtB,MALIhoB,MAAKmoB,cAAcvG,eACrB63D,IAGFz5E,KAAK05E,gCACE15E,KAAKmoB,cAAcC,qBAAqBJ,IAIzC8/C,EAAV/mE,UAAA2iC,sBACS1jC,KAAKyjC,aACRzjC,KAAKyjC,WAAazjC,KAAKgjC,kBAAkB/V,OAAOjtB,KAAK0E,YAAY9B,gBAM/D5C,KAAK2qB,QAAQyuD,WACfp5E,KAAKyjC,WAAWM,gCAKZ+jC,EAAV/mE,UAAA4iC,yBACI,GAAMg2C,GAAU35E,KAAKu5E,oCAGjBI,IAAoC,kBAAlBA,GAAQl3E,OAC5Bk3E,EAAQl3E,QAGNzC,KAAKyjC,YACPzjC,KAAKyjC,WAAWa,WAKZwjC,EAAV/mE,UAAA24E,mDACQ15E,MAAKwQ,YACPxQ,KAAKu5E,qCAAuCv5E,KAAKwQ,UAAsC,cAGnFxQ,KAAK0E,YAAY9B,cAAcH,OAIjCwG,QAAQC,UAAUC,KAAK,WAAM,MAAAtJ,GAAK6E,YAAY9B,cAAcH,YAMlEqlE,EAAF/mE,UAAAiyC,iBAAE,SAAiBlpC,GACO,UAAlBA,EAAM2Y,QACRziB,KAAK0jC,aACsB,SAAlB55B,EAAM2Y,SACfziB,KAAK2jC,gBAGP3jC,KAAKsoE,uBAAuBvmE,KAAK+H,IAInCg+D,EAAF/mE,UAAA64E,kBAAE,SAAkB9vE,GAChB9J,KAAKsoE,uBAAuBvmE,KAAK+H,IAInCg+D,EAAF/mE,UAAA4nE,oBAAE,WACE3oE,KAAKw5E,OAAS,OAIdx5E,KAAKmB,mBAAmBC;iBApJ5B8D,KAACC,EAAAA,UAADC,OAAAC,SAAA,uBACEC,SAAU,8CACVC,QAAF,otCACEE,cAAFC,EAAAA,kBAAAC,mFAKEI,MACFC,MAAe,uBACTwiD,SAAN,KACIif,aAAJ,OACIllC,YAAJ,MACI7vB,cAAJ,eACI8vC,yBAAJ,6CACID,oBAAJ,oBACIM,0BAAJ,kCACI6kB,iBAAJ,SACIC,uBAAJ,4BACIC,sBAAJ,kHAxDA1iE,KAAE+H,EAAAA,oBAmBF/H,SAAmB2J,GAAnBxI,aAAAnB,KAAAoB,EAAAA,WAAApB,KAAA4J,EAAAA,OAAA1J,MAAAuM,EAAAA,cAdAzM,KAAE2iE,MAeFC,EAAAvhE,6EA2CAuhE,uBCtDIxS,GAAW,EAKfyS,GAAA,WAsBE,QAAFA,GACYljD,EACDmjD,EACPC,EACS55C,OAAb,KAAAA,IAAAA,EAAA,cAAwCinC,KAJtC,IAAFz1D,GAAAG,IACYA,MAAZ6kB,YAAYA,EACD7kB,KAAXgoE,mBAAWA,EAEEhoE,KAAbquB,GAAaA,EArBbruB,KAAAkmC,aAAsClmC,KAAKgoE,mBAAmBr9C,QAAQub,aAGtElmC,KAAAkoE,WAAgC,GAAIr8D,GAAAA,QAGpC7L,KAAAmoE,aAAkC,GAAIt8D,GAAAA,QAGtC7L,KAAAooE,aAAkC,GAAIv8D,GAAAA,QAMtC7L,KAAAqoE,iBAA+C7gE,EAAAA,aAAaC,MASxDugE,EAAmBhtB,IAAM3sB,EAGzB25C,EAAmBM,uBAAuBl8D,KACxC4E,EAAAA,OAAO,SAAAlH,GAAS,MAAoB,SAApBA,EAAMosD,WAA0C,UAAlBpsD,EAAM2Y,UACpD5N,EAAAA,KAAK,IAENhU,UAAU,WACThB,EAAKqoE,WAAWt7D,OAChB/M,EAAKqoE,WAAWr7D,aAIlBm7D,EAAmBM,uBAAuBl8D,KACxC4E,EAAAA,OAAO,SAAAlH,GAAS,MAAoB,SAApBA,EAAMosD,WAA0C,SAAlBpsD,EAAM2Y,UACpD5N,EAAAA,KAAK,IACLhU,UAAU,WAAM,MAAAhB,GAAKglB,YAAYmB,YAEnCnB,EAAYoH,cAAcprB,UAAU,WAClChB,EAAKuoE,aAAax7D,KAAK/M,EAAK0oE,SAC5B1oE,EAAKuoE,aAAav7D,WAClBhN,EAAKwoE,iBAAiBpnE,cACtBpB,EAAKsoE,aAAav7D,KAAK/M,EAAK0oE,SAC5B1oE,EAAKsoE,aAAat7D,WAClBhN,EAAKimE,kBAAiB,KACtBjmE,EAAKglB,YAAYmB,YAGnBnB,EAAYohD,gBACT75D,KAAK4E,EAAAA,OAAO,SAAAlH,GAAS,MAAAA,GAAMwZ,UAAY6mB,EAAAA,SAAWtqC,EAAKqmC,gBACvDrlC,UAAU,WAAM,MAAAhB,GAAK+jC,UAEpBqkC,IAIFjoE,KAAKqoE,iBAAmBJ,EAASpnE,UAAU,WACrChB,EAAKmoE,mBAAmBr9C,QAAQ69C,mBAClC3oE,EAAK+jC,WA5Ff,MAsGEmkC,GAAFhnE,UAAA6iC,MAAE,SAAM6kC,GAAN,GAAF5oE,GAAAG,IACIA,MAAKuoE,QAAUE,EAGfzoE,KAAKgoE,mBAAmBM,uBAAuBl8D,KAC7C4E,EAAAA,OAAO,SAAAlH,GAAS,MAAoB,UAApBA,EAAMosD,YACtBrhD,EAAAA,KAAK,IAENhU,UAAU,WACThB,EAAKuoE,aAAax7D,KAAK67D,GACvB5oE,EAAKuoE,aAAav7D,WAClBhN,EAAKglB,YAAY6jD,mBAGnB1oE,KAAKgoE,mBAAmBW,uBAM1BZ,EAAFhnE,UAAA6nE,UAAE,WACE,MAAO5oE,MAAKkoE,WAAW/hD,gBAMzB4hD,EAAFhnE,UAAA8kE,YAAE,WACE,MAAO7lE,MAAKmoE,aAAahiD,gBAM3B4hD,EAAFhnE,UAAA8nE,YAAE,WACE,MAAO7oE,MAAKooE,aAAajiD,gBAM3B4hD,EAAFhnE,UAAAgkC,cAAE,WACE,MAAO/kC,MAAK6kB,YAAYkgB,iBAM1BgjC,EAAFhnE,UAAAklE,cAAE,WACE,MAAOjmE,MAAK6kB,YAAYohD,iBAO1B8B,EAAFhnE,UAAAqoC,eAAE,SAAe//B,GACb,GAAIihC,GAAWtqC,KAAK8oE,sBAgBpB,OAdIz/D,KAAaA,EAAS6W,MAAQ7W,EAASwjB,OACzCxjB,EAAS6W,KAAOoqB,EAASpqB,KAAK7W,EAAS6W,MAAQoqB,EAASzd,MAAMxjB,EAASwjB,OAEvEyd,EAASxd,qBAGPzjB,IAAaA,EAAS0jB,KAAO1jB,EAAS2jB,QACxC3jB,EAAS0jB,IAAMud,EAASvd,IAAI1jB,EAAS0jB,KAAOud,EAAStd,OAAO3jB,EAAS2jB,QAErEsd,EAASy+B,mBAGX/oE,KAAK6kB,YAAYukB,iBAEVppC,MAQT+nE,EAAFhnE,UAAAioE,WAAE,SAAW7oD,EAAoBxV,GAG7B,WAHJ,KAAAwV,IAAaA,EAAb,QAAA,KAAAxV,IAAiCA,EAAjC,IACI3K,KAAK8oE,uBAAuB3oD,MAAMA,GAAOxV,OAAOA,GAChD3K,KAAK6kB,YAAYukB,iBACVppC,MAID+nE,EAAVhnE,UAAA+nE,gCACI,MAAO9oE,MAAK6kB,YAAYqmB,YAAsD,kBA/LlF68B,KCmCakB,GAAkB,GAAIvpD,GAAAA,eAAoB,iBAG1CwpD,GACT,GAAIxpD,GAAAA,eAAgC,8BAG3BypD,GACT,GAAIzpD,GAAAA,eAAqC,8BAchC0pD,IACXx2D,QAASu2D,GACTn5C,MAAO7C,EAAAA,SACP8C,WAAYo5C,iBAqCZ,QAAFlD,GACcx8C,EACAE,EACYy/C,EACoC/gC,EACZD,EACZihC,EACxBC,GAPZ,GAAF3pE,GAAAG,IACcA,MAAd2pB,SAAcA,EACA3pB,KAAd6pB,UAAcA,EACY7pB,KAA1BspE,UAA0BA,EACoCtpE,KAA9DuoC,gBAA8DA,EACZvoC,KAAlDsoC,gBAAkDA,EACZtoC,KAAtCupE,cAAsCA,EACxBvpE,KAAdwpE,kBAAcA,EAnCdxpE,KAAAypE,2BACAzpE,KAAA0pE,2BAAgD,GAAI79D,GAAAA,QACpD7L,KAAA2pE,sBAA2C,GAAI99D,GAAAA,QAC/C7L,KAAA4pE,oBAAgC,GAAIh8C,KAqBpC5tB,KAAA6pE,eAA8C1vB,EAAAA,MAAY,WAAM,MAAAt6C,GAAKiqE,YAAYtnE,OAC3E3C,EAAKkqE,gBACLlqE,EAAKkqE,gBAAgB39D,KAAKoV,EAAAA,cAAU3S,OA/F1C,MA2EErN,QAAFC,eAAM0kE,EAANplE,UAAA,mBAAE,WACE,MAAOf,MAAKupE,cAAgBvpE,KAAKupE,cAAcO,YAAc9pE,KAAKypE,yDAIpEjoE,OAAFC,eAAM0kE,EAANplE,UAAA,iBAAE,WACE,MAAOf,MAAKupE,cAAgBvpE,KAAKupE,cAAcX,UAAY5oE,KAAK2pE,uDAGlEnoE,OAAFC,eAAM0kE,EAANplE,UAAA,uBAAE,WACE,GAAMmpB,GAASlqB,KAAKupE,aACpB,OAAOr/C,GAASA,EAAO6/C,gBAAkB/pE,KAAK0pE,4DA2BhDvD,EAAFplE,UAAA0pB,KAAE,SAA0Bu/C,EAClB1/C,GADR,GAAFzqB,GAAAG,IAKI,IAFAsqB,EAAS2/C,EAAqB3/C,EAAQtqB,KAAKuoC,iBAAmB,GAAIs/B,KAE9Dv9C,EAAO+D,IAAMruB,KAAKkqE,cAAc5/C,EAAO+D,IACzC,KAAMnF,OAAM,mBAAmBoB,EAAO+D,GAA5C,kDAGI,IAAMvD,GAAa9qB,KAAKyrB,eAAenB,GACjC6/C,EAAkBnqE,KAAKoqE,uBAAuBt/C,EAAYR,GAC1D+/C,EAAYrqE,KAAKsqE,qBAA2BN,EACAG,EACAr/C,EACAR,EAWlD,OARKtqB,MAAK8pE,YAAYtnE,QACpBxC,KAAKuqE,+CAGPvqE,KAAK8pE,YAAYl1D,KAAKy1D,GACtBA,EAAUxE,cAAchlE,UAAU,WAAM,MAAAhB,GAAK2qE,kBAAkBH,KAC/DrqE,KAAK4oE,UAAUh8D,KAAKy9D,GAEbA,GAMTlE,EAAFplE,UAAA0pE,SAAE,WAGE,IAFA,GAAIpgE,GAAIrK,KAAK8pE,YAAYtnE,OAElB6H,KAKLrK,KAAK8pE,YAAYz/D,GAAGu5B,SAQxBuiC,EAAFplE,UAAAmpE,cAAE,SAAc77C,GACZ,MAAOruB,MAAK8pE,YAAYr9D,KAAK,SAAAi+D,GAAU,MAAAA,GAAOr8C,KAAOA,KAQ/C83C,EAAVplE,UAAA0qB,eAAA,SAAyBnB,GACrB,GAAMgC,GAAgBtsB,KAAKq2C,kBAAkB/rB,EAC7C,OAAOtqB,MAAK2pB,SAASsD,OAAOX,IAQtB65C,EAAVplE,UAAAs1C,kBAAA,SAA4Bs0B,GACxB,GAAMzzD,GAAQ,GAAIqV,GAAAA,eAChBC,iBAAkBxsB,KAAK2pB,SAAStgB,WAAWojB,SAC3Cwe,eAAgB0/B,EAAa1/B,gBAAkBjrC,KAAKsoC,kBACpDxf,WAAY6hD,EAAa7hD,WACzBoK,YAAay3C,EAAaz3C,YAC1BnW,UAAW4tD,EAAa5tD,UACxBg7B,SAAU4yB,EAAa5yB,SACvB6yB,UAAWD,EAAaC,UACxBC,SAAUF,EAAaE,SACvBC,UAAWH,EAAaG,WAO1B,OAJIH,GAAap0B,gBACfr/B,EAAMq/B,cAAgBo0B,EAAap0B,eAG9Br/B,GASDivD,EAAVplE,UAAAqpE,uBAAA,SAAiCh/B,EAAqB9gB,GAClD,GAAMS,GAAeT,GAAUA,EAAOlK,kBAAoBkK,EAAOlK,iBAAiB4K,SAC5EA,EAAW,GAAIC,GAAAA,eAAeF,GAAgB/qB,KAAK6pB,UAAW,GAAIqB,WACrE28C,GAAiBv9C,MAEda,EACF,GAAIC,GAAAA,gBAAgB08C,GAAoBx9C,EAAOlK,iBAAkB4K,EAGrE,OAFqBogB,GAAQvpB,OAA2BsJ,GAEpCG,UAYd66C,EAAVplE,UAAAupE,qBACA,SAAMN,EACAG,EACAr/C,EACAR,GAIF,GAAM+/C,GACF,GAAItC,IAAmBj9C,EAAYq/C,EAAiBnqE,KAAKspE,UAAWh/C,EAAO+D,GAW/E,IARI/D,EAAO4I,aACTpI,EAAWia,gBAAgBlkC,UAAU,WAC9BwpE,EAAUnkC,cACbmkC,EAAUzmC,UAKZomC,YAAkCvyD,GAAAA,YACpC0yD,EAAgB/hD,qBACd,GAAItH,GAAAA,eAAkBkpD,EAAsB,MACnCr+C,UAAWrB,EAAOpX,KAAMm3D,UAFzCA,SAGW,CACL,GAAMr/C,GAAWhrB,KAAK4rB,gBAAmBtB,EAAQ+/C,EAAWF,GACtDt+C,EAAas+C,EAAgBpiD,sBAC/B,GAAIqD,GAAAA,gBAAgB4+C,MAAwBn7D,GAAWmc,GAC3Dq/C,GAAUvE,kBAAoBj6C,EAAWP,SAO3C,MAJA++C,GACGrB,WAAW1+C,EAAOnK,MAAOmK,EAAO3f,QAChCy+B,eAAe9e,EAAOjhB,UAElBghE,GAWDlE,EAAVplE,UAAA6qB,gBACA,SAAMtB,EACA+/C,EACAF,GAEF,GAAMp/C,GAAeT,GAAUA,EAAOlK,kBAAoBkK,EAAOlK,iBAAiB4K,SAM5E+/C,EAAkB,GAAI7/C,WACzB48C,GAAoBqC,IACpBlB,GAAiB3+C,EAAOpX,OACxB60D,GAAcsC,IAWjB,QARI//C,EAAOvN,WACLgO,GAAiBA,EAAahd,IAA2B3H,EAAAA,eAAgB,OAC7E2kE,EAAgBt8C,IAAIroB,EAAAA,gBAClB1E,MAAO4oB,EAAOvN,UACd7Q,OAAQC,EAAAA,OAIL,GAAI8e,GAAAA,eAAeF,GAAgB/qB,KAAK6pB,UAAWkhD,IAOpD5E,EAAVplE,UAAAypE,kBAAA,SAA4BH,GACxB,GAAMpoE,GAAQjC,KAAK8pE,YAAYhsD,QAAQusD,EAEnCpoE,IAAS,IACXjC,KAAK8pE,YAAYzqD,OAAOpd,EAAO,GAI1BjC,KAAK8pE,YAAYtnE,SACpBxC,KAAK4pE,oBAAoBxgE,QAAQ,SAAC4hE,EAAej/D,GAC3Ci/D,EACFj/D,EAAQ+/C,aAAa,cAAekf,GAEpCj/D,EAAQy/C,gBAAgB,iBAI5BxrD,KAAK4pE,oBAAoBhgC,QACzB5pC,KAAK+pE,gBAAgBn9D,UAQnBu5D,EAAVplE,UAAAwpE,wDACI,GAAMU,GAAmBjrE,KAAKwpE,kBAAkB0B,qBAGhD,IAAID,EAAiBE,cAGnB,IAAK,GAFCC,GAAWH,EAAiBE,cAAcr2D,SAEvCzK,EAAI+gE,EAAS5oE,OAAS,EAAG6H,GAAK,EAAGA,IAAK,CAC7C,GAAIghE,GAAUD,EAAS/gE,EAEnBghE,KAAYJ,GACO,WAArBI,EAAQxiC,UACa,UAArBwiC,EAAQxiC,UACPwiC,EAAQC,aAAa,eAEtBtrE,KAAK4pE,oBAAoBn7C,IAAI48C,EAASA,EAAQE,aAAa,gBAC3DF,EAAQvf,aAAa,cAAe,0BAvR9C5mD,KAACgoB,EAAAA,iDAzDDhoB,KAAEioB,EAAAA,UAYFjoB,KAAEmoB,EAAAA,WALFnoB,KAAQsmE,EAAAA,SAARnlE,aAAAnB,KAmFOoB,EAAAA,aACPpB,SAAA2J,GAAAxI,aAAAnB,KAAOoB,EAAAA,WAAPpB,KAAmB4J,EAAAA,OAAnB1J,MAA0B8jE,QAC1BhkE,SAAA2J,GAAAxI,aAAAnB,KAAO4J,EAAAA,OAAP1J,MAAc+jE,QAlCdjkE,KAAaihE,EAAb9/D,aAAAnB,KAmCOoB,EAAAA,WAnCPpB,KAmCmBqoB,EAAAA,aA3FnBroB,KAAEumE,EAAAA,oBAZFtF,KCqBIuF,GAAmB,gBAuBrB,QAAFC,GACuBtB,EACX3lE,EACAknE,GAFW5rE,KAAvBqqE,UAAuBA,EACXrqE,KAAZ0E,YAAYA,EACA1E,KAAZ4rE,QAAYA,EAVZ5rE,KAAAg2B,UAA2C,eArC3C,MAiDE21C,GAAF5qE,UAAA8f,SAAE,WACO7gB,KAAKqqE,YAMRrqE,KAAKqqE,UAAYwB,EAAiB7rE,KAAK0E,YAAa1E,KAAK4rE,QAAQ9B,eAIrE6B,EAAF5qE,UAAA4f,YAAE,SAAYjX,GACV,GAAMoiE,GAAgBpiE,EAA1B,iBAAqDA,EAArD,qBAEQoiE,KACF9rE,KAAKyoE,aAAeqD,EAAcpuB,8BAtCxCx4C,KAACmJ,EAAAA,UAADjJ,OACEC,SAAU,mDACV8F,SAAU,iBACVpF,MACE4I,UAAW,gCACX4zC,oBAAqB,YACrBr9C,KAAQ,kDAdZA,KAAQ6iE,GAAR1hE,aAAAnB,KA2BKoB,EAAAA,aA9BLpB,KAAE4N,EAAAA,aAEF5N,KAAQihE,wBAoBRnwC,YAAA9wB,KAAGuB,EAAAA,MAAHrB,MAAS,gBAGTqjE,eAAAvjE,KAAGuB,EAAAA,MAAHrB,MAAS,sBAET2mE,kBAAA7mE,KAAGuB,EAAAA,MAAHrB,MAAS,qBA1CTumE,mBAmFE,QAAFK,GACwBtG,EACZhhE,EACAknE,GAFY5rE,KAAxB0lE,WAAwBA,EACZ1lE,KAAZ0E,YAAYA,EACA1E,KAAZ4rE,QAAYA,EALZ5rE,KAAAquB,GAAgB,oBAAoBq9C,KAjFpC,MAwFEM,GAAFjrE,UAAA8f,SAAE,WAAA,GAAFhhB,GAAAG,IACSA,MAAK0lE,aACR1lE,KAAK0lE,WAAamG,EAAiB7rE,KAAK0E,YAAa1E,KAAK4rE,QAAQ9B,cAGhE9pE,KAAK0lE,YACPz8D,QAAQC,UAAUC,KAAK,WACrB,GAAMuiB,GAAY7rB,EAAK6lE,WAAWsC,kBAE9Bt8C,KAAcA,EAAUugD,kBAC1BvgD,EAAUugD,gBAAkBpsE,EAAKwuB,sBA1B3CnpB,KAACmJ,EAAAA,UAADjJ,OACEC,SAAU,uCACV8F,SAAU,iBACVpF,MACEC,MAAS,mBACTyyB,OAAQ,8CA3DZvzB,KAAQ6iE,GAAR1hE,aAAAnB,KAkEKoB,EAAAA,aArELpB,KAAE4N,EAAAA,aAEF5N,KAAQihE,wBAgER93C,KAAAnpB,KAAGuB,EAAAA,SAjFHulE,iCAAA,sBA6GA9mE,KAACmJ,EAAAA,UAADjJ,OACEC,SAAU,+DACVU,MAAOC,MAAS,0BA/GlBkmE,iCAAA,sBAwHAhnE,KAACmJ,EAAAA,UAADjJ,OACEC,SAAU,+DACVU,MAAOC,MAAS,0BA1HlBmmE,iCCAA,sBAuBAjnE,KAAC+J,EAAAA,SAAD7J,OACE8J,SACEC,EAAAA,aACAka,EAAAA,cACAha,EAAAA,aACAD,IAEFI,SACEs4D,GACA6D,GACAK,GACAE,GACAC,GACA/8D,IAEFQ,cACEk4D,GACA6D,GACAK,GACAG,GACAD,IAEFv5D,WACEwzD,GACAiD,IAEF9/C,iBAAkBw+C,QAjDpBtU,gFCAA,MA4ByCprD,GAAzCgkE,EAAAjlE,GAEA3F,OAAAC,eAAM2qE,EAANrrE,UAAA,0BAAA,WAAqC,MAAOf,MAAKqsE,aAC/C,SAAuB3qE,GAAiB1B,KAAKqsE,QAAU3qE,mCAGzDF,OAAAC,eAAM2qE,EAANrrE,UAAA,0BAAA,WAAqC,MAAOf,MAAKssE,aAC/C,SAAuB5qE,GAAiB1B,KAAKssE,QAAU5qE,mCAGzDF,OAAAC,eAAM2qE,EAANrrE,UAAA,mBAAA,WAA+B,MAAOf,MAAKqkC,aACzC,SAAgB3iC,GAAkB1B,KAAKqkC,QAAU3iC,mCAGnDF,OAAAC,eAAM2qE,EAANrrE,UAAA,2BAAA,WAAuC,MAAOf,MAAKqkC,aACjD,SAAwB3iC,GAAkB1B,KAAKqkC,QAAU3iC,kDA3B3DwD,KAACmJ,EAAAA,UAADjJ,OACEC,SAAU,wDACV8F,SAAU,sBACV3F,QAAS,qBAAsB,sBAC/BO,MACEC,MAAS,qCAGTumE,KAAQ,IACRna,UAAW,6CAIfoa,qBAAAtnE,KAAGuB,EAAAA,QAIHgmE,qBAAAvnE,KAAGuB,EAAAA,QAIHimE,cAAAxnE,KAAGuB,EAAAA,MAAHrB,MAAS,kBAITunE,sBAAAznE,KAAGuB,EAAAA,SAzCH2lE,GA4ByCQ,EAAAA,qBCX5B7a,GACT,GAAIryC,GAAAA,eAA6B,4BCe/BmtD,IACJ,SACA,WACA,OACA,SACA,QACA,QACA,QACA,QACA,UAGEj4C,GAAe,EAInBk4C,GAAA,WACE,QAAFA,GAAqBx0B,EACAC,EACAC,EAEAC,GAJAz4C,KAArBs4C,0BAAqBA,EACAt4C,KAArBu4C,YAAqBA,EACAv4C,KAArBw4C,iBAAqBA,EAEAx4C,KAArBy4C,UAAqBA,EAtDrB,MAAAq0B,MAwDaC,GAAqBp0B,EAAgBm0B,mBA6JhD,QAAFE,GAAwBtoE,EACA4L,EAEiBmoC,EACfF,EACAC,EACZF,EACsD20B,EAC9CC,EACRC,GATZ,GAAFttE,GAUIsH,EAVJC,KAAApH,KAUUs4C,EAA2BC,EAAaC,EAAkBC,IAVpEz4C,WAAwBH,GAAxB6E,YAAwBA,EACA7E,EAAxByQ,UAAwBA,EAEiBzQ,EAAzC44C,UAAyCA,EAKnB54C,EAAtBqtE,iBAAsBA,EAvItBrtE,EAAAu5C,KAAmB,aAAaxkB,KAOhC/0B,EAAAutE,WAAc,EAMdvtE,EAAAwtE,SAAqB,EAMrBxtE,EAAA86C,aAAyC,GAAI9uC,GAAAA,QAM7ChM,EAAAo6C,YAAwB,YAMxBp6C,EAAAytE,YAAe,EAuBfztE,EAAA8gC,WAAwB,EAwBxB9gC,EAAA+1B,WAAwB,EAgBxB/1B,EAAA0tE,MAAoB,OAsBpB1tE,EAAA2tE,WAAsB,EAEtB3tE,EAAA4tE,uBACI,OACA,WACA,iBACA,QACA,OACA,QACAz8D,OAAO,SAAA08D,GAAK,MAAAC,GAAAA,yBAAyBp/C,IAAIm/C,KAezC7tE,EAAK+tE,oBAAsBX,GAAsBptE,EAAK6E,YAAY9B,cAElE/C,EAAKguE,qBAAuBhuE,EAAK6B,MAGjC7B,EAAKwuB,GAAKxuB,EAAKwuB,GAKX/d,EAAUs4B,KACZukC,EAAOlhE,kBAAkB,WACvBvH,EAAY9B,cAAcqmC,iBAAiB,QAAS,SAACn/B,GACnD,GAAIgkE,GAAKhkE,EAAgC,MACpCgkE,GAAGpsE,OAAUosE,EAAGC,gBAAmBD,EAAGE,eAKzCF,EAAGG,kBAAkB,EAAG,GACxBH,EAAGG,kBAAkB,EAAG,QAMhCpuE,EAAKutE,WAAavtE,EAAKyQ,UAAUK,YA5PrC,MAoF8BvI,GAA9B4kE,EAAA7lE,GAwCA3F,OAAAC,eAAMurE,EAANjsE,UAAA,2BACI,MAAIf,MAAKy4C,WAAyC,OAA5Bz4C,KAAKy4C,UAAUr2C,SAC5BpC,KAAKy4C,UAAUr2C,SAEjBpC,KAAK2gC,eAEd,SAAaj/B,GACX1B,KAAK2gC,UAAYt4B,EAAAA,sBAAsB3G,GAInC1B,KAAKqtE,UACPrtE,KAAKqtE,SAAU,EACfrtE,KAAK26C,aAAa/tC,yCAUxBpL,OAAAC,eAAMurE,EAANjsE,UAAA,UAAA,WAAqB,MAAOf,MAAKg7C,SAC/B,SAAOt5C,GAAiB1B,KAAKg7C,IAAMt5C,GAAS1B,KAAKo5C,sCAcnD53C,OAAAC,eAAMurE,EAANjsE,UAAA,gBAAA,WAA4B,MAAOf,MAAK41B,eACtC,SAAal0B,GAAkB1B,KAAK41B,UAAYvtB,EAAAA,sBAAsB3G,oCAKxEF,OAAAC,eAAMurE,EAANjsE,UAAA,YAAA,WAAuB,MAAOf,MAAKutE,WACjC,SAAS7rE,GACP1B,KAAKutE,MAAQ7rE,GAAS,OACtB1B,KAAKkuE,iBAKAluE,KAAKmuE,eAAiBR,EAAAA,yBAAyBp/C,IAAIvuB,KAAKutE,SAC3DvtE,KAAK0E,YAAY9B,cAAcsC,KAAOlF,KAAKutE,wCAajD/rE,OAAAC,eAAMurE,EAANjsE,UAAA,aAAA,WAAwB,MAAOf,MAAK4tE,oBAAoBlsE,WACtD,SAAUA,GACJA,IAAU1B,KAAK0B,QACjB1B,KAAK4tE,oBAAoBlsE,MAAQA,EACjC1B,KAAK26C,aAAa/tC,yCAMxBpL,OAAAC,eAAMurE,EAANjsE,UAAA,gBAAA,WAA4B,MAAOf,MAAKwtE,eACtC,SAAa9rE,GAAkB1B,KAAKwtE,UAAYnlE,EAAAA,sBAAsB3G,oCAsDtEsrE,EAAFjsE,UAAA8f,SAAE,WAAA,GAAFhhB,GAAAG,IACIA,MAAKktE,iBAAiB/6C,QAAQnyB,KAAK0E,YAAY9B,eAAe/B,UAAU,SAAAiJ,GACtEjK,EAAKytE,WAAaxjE,EAAMskE,aACxBvuE,EAAK86C,aAAa/tC,UAItBogE,EAAFjsE,UAAA4f,YAAE,WACE3gB,KAAK26C,aAAa/tC,QAGpBogE,EAAFjsE,UAAAC,YAAE,WACEhB,KAAK26C,aAAa9tC,WAClB7M,KAAKktE,iBAAiB76C,eAAeryB,KAAK0E,YAAY9B,gBAGxDoqE,EAAFjsE,UAAA6kC,UAAE,WACM5lC,KAAKy4C,WAIPz4C,KAAK27C,mBAMP37C,KAAKquE,0BAIPrB,EAAFjsE,UAAA0B,MAAE,WAAgBzC,KAAK0E,YAAY9B,cAAcH,SAG/CuqE,EAAFjsE,UAAA8I,cAAE,SAAcykE,GACRA,IAActuE,KAAKqtE,SAAYrtE,KAAKuuE,WACtCvuE,KAAKqtE,QAAUiB,EACftuE,KAAK26C,aAAa/tC,SAItBogE,EAAFjsE,UAAAkwD,SAAE,aAWU+b,EAAZjsE,UAAAstE,uBAAE,WACE,GAAMvtC,GAAW9gC,KAAK0B,KAElB1B,MAAK6tE,uBAAyB/sC,IAChC9gC,KAAK6tE,qBAAuB/sC,EAC5B9gC,KAAK26C,aAAa/tC,SAKZogE,EAAZjsE,UAAAmtE,cAAE,WACE,GAAIrB,GAAwB/uD,QAAQ9d,KAAKutE,QAAU,EACjD,KAAMiB,GAAgCxuE,KAAKutE,QAKrCP,EAAZjsE,UAAA0tE,cAAE,WACE,MAAOzuE,MAAKytE,sBAAsB3vD,QAAQ9d,KAAKutE,QAAU,GAIjDP,EAAZjsE,UAAA2tE,YAAE,WAEE,GAAIC,GAAY3uE,KAAK0E,YAA6C,cAAEiqE,QACpE,OAAOA,IAAYA,EAASC,UAIpB5B,EAAZjsE,UAAAotE,YAAE,WACE,MAAiE,aAA1DnuE,KAAK0E,YAAY9B,cAAcimC,SAASjrB,eAOjDpc,OAAFC,eAAMurE,EAANjsE,UAAA,aAAE,WACE,QAAQf,KAAKyuE,iBAAoBzuE,KAAK0E,YAAY9B,cAAclB,OAAU1B,KAAK0uE,eAC1E1uE,KAAKstE,6CAOZ9rE,OAAFC,eAAMurE,EAANjsE,UAAA,wBAAE,WAAkC,MAAOf,MAAKqtE,UAAYrtE,KAAKm8C,uCAM/D6wB,EAAFjsE,UAAAmhD,kBAAE,SAAkBC,GAAiBniD,KAAKoiD,iBAAmBD,EAAI5F,KAAK,MAMpEywB,EAAFjsE,UAAAshD,iBAAE,WAAqBriD,KAAKyC,wBAlT5ByC,KAACmJ,EAAAA,UAADjJ,OACEC,SAAU,sCACV8F,SAAU,WACVpF,MAIEC,MAAS,oDACT6oE,2BAA4B,YAG5BtsC,YAAa,KACbusC,qBAAsB,cACtB3c,aAAc,WACd4c,aAAc,WACdC,aAAc,WACdnsB,0BAA2B,2BAC3BH,sBAAuB,aACvBD,uBAAwB,sBACxBrkB,SAAU,uBACVD,UAAW,sBACXi0B,UAAW,cAEbz/C,YAAaC,QAASswC,GAAqBrwC,YAAam6D,4CArE1D9nE,KAAE4N,EAAAA,aAJF5N,KAAgC0J,EAAAA,WAchC1J,KAA4Bq+C,EAAAA,UAA5Bl9C,aAAAnB,KAiMeoB,EAAAA,WAjMfpB,KAiM2BwyC,EAAAA,SAjM3BxyC,KAAuCk+C,EAAAA,OAAvC/8C,aAAAnB,KAkMeoB,EAAAA,aAlMfpB,KAAQm+C,EAAAA,mBAARh9C,aAAAnB,KAmMeoB,EAAAA,aAlMfpB,KAA6BmT,KAoM7BnT,SAAA2J,GAAAxI,aAAAnB,KAAeoB,EAAAA,WAAfpB,KAA2BwyC,EAAAA,OAA3BxyC,KAAmC4J,EAAAA,OAAnC1J,MAA0C2sD,QAjM1C7sD,KAAQ+pE,EAAAA,kBANR/pE,KAAE8H,EAAAA,4BAsGF5K,WAAA8C,KAAGuB,EAAAA,QAuBH4nB,KAAAnpB,KAAGuB,EAAAA,QASHugC,cAAA9hC,KAAGuB,EAAAA,QAMHsyB,WAAA7zB,KAAGuB,EAAAA,QAMHvB,OAAAA,KAAGuB,EAAAA,QAgBH2gC,oBAAAliC,KAAGuB,EAAAA,QAMH/E,QAAAwD,KAAGuB,EAAAA,QAUH8nE,WAAArpE,KAAGuB,EAAAA,SAvMHumE,GAoF8BD,gCCpF9B,sBAiBA7nE,KAAC+J,EAAAA,SAAD7J,OACEwK,cAAeo9D,GAAUZ,IACzBl9D,SACEC,EAAAA,aACA+/D,EAAAA,gBACA1nC,IAEFh4B,SACE0/D,EAAAA,gBAGA1nC,GACAwlC,GACAZ,IAEFz5D,WAAY0F,QAhCd82D,gCCmBAnvE,KAAA0J,QAAoC,GAAImC,GAAAA,QAGxC7L,KAAAovE,cAA0B,WAG1BpvE,KAAAqvE,kBAA8B,gBAG9BrvE,KAAA6iE,eAA2B,iBAG3B7iE,KAAAijE,eAA2B,aAG3BjjE,KAAA8iE,cAA0B,gBAG1B9iE,KAAAkjE,cAA0B,YAG1BljE,KAAAgjE,mBAA+B,oBAG/BhjE,KAAAmjE,mBAA+B,gBAG/BnjE,KAAA4iE,uBAAmC,cAGnC5iE,KAAA2iE,2BAAuC,wBAjDvC,sBAaAz9D,KAACgoB,EAAAA,WAAD9nB,OAAaua,WAAY,8GAbzBs0C,KCwBAyL,GAAA,WACE,QAAFA,GAAqBh+D,EACA4tE,EACAt5C,EACAqO,GAHArkC,KAArB0B,MAAqBA,EACA1B,KAArBsvE,aAAqBA,EACAtvE,KAArBg2B,UAAqBA,EACAh2B,KAArBqkC,QAAqBA,EA5BrB,MAAAq7B,oBAoFE,QAAFhM,GAAsBhvD,EAAiCgH,GAAjC1L,KAAtB0E,YAAsBA,EAAiC1E,KAAvD0L,QAAuDA,EAjBvD1L,KAAAuvE,QAAqB,EAGrBvvE,KAAAwvE,wBAAoC,EAGpCxvE,KAAAyvE,WAAwB,EAMxBzvE,KAAA0vE,gBAA6B,EAG7B1vE,KAAA2vE,oBAAiE,GAAI5nE,GAAAA,aAArE,MAIE2rD,GAAF3yD,UAAA6uE,aAAE,SAAaC,IACN7vE,KAAKwvE,wBAA2BK,EAAKxrC,UAG1CrkC,KAAK2vE,oBAAoB5tE,KAAK8tE,EAAKnuE,QAIrCF,OAAFC,eAAMiyD,EAAN3yD,UAAA,uBAAE,WACE,MAAOf,MAAKusE,MAAQvsE,KAAKusE,KAAK/pE,QAAUxC,KAAKusE,KAAK,GAAG/pE,OACjDxC,KAAKuvE,QAAUvvE,KAAKusE,KAAK,GAAG/pE,OAAS,mCAG3CkxD,EAAF3yD,UAAA+uE,cAAE,SAAc5X,EAAkBoC,GAC9B,GAAIyV,GAAa7X,EAAWl4D,KAAKuvE,QAAUjV,CAO3C,OAJIpC,KACF6X,GAAc/vE,KAAKgwE,iBAGdD,GAAc/vE,KAAKyvE,YAI5B/b,EAAF3yD,UAAAm+D,iBAAE,WAAA,GAAFr/D,GAAAG,IACIA,MAAK0L,QAAQO,kBAAkB,WAC7BpM,EAAK6L,QAAQ4uC,SAASn0B,eAAe/Z,KAAKyI,EAAAA,KAAK,IAAIhU,UAAU,WAC3DhB,EAAK6E,YAAY9B,cAAcyoD,cAAc,6BAA6B5oD,4BA9ElFyC,KAACC,EAAAA,UAADC,OAAAC,SAAA,sBACEC,SAAU,q1CACVC,QAAF,g0BACEQ,MACFC,MAAA,oBACMsM,KAAN,OACI29D,qBAAJ,QAEA9kE,SAAA,kBACA1F,cAAAC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,oFA9BA4tD,EAAAntD,6DAoCA2pE,aAAAhrE,KAAQuB,EAAAA,QAGR0pE,gBAAAjrE,KAAAuB,EAAAA,QAGA2pE,wBAAQlrE,KAARuB,EAAAA,QAGA8oE,UAAArqE,KAAAuB,EAAAA,QAGA+oE,yBAAAtqE,KAAAuB,EAAAA,QAGAgpE,aAAAvqE,KAAAuB,EAAAA,QAGAipE,kBAAAxqE,KAAAuB,EAAAA,QAGAkpE,sBAAAzqE,KAAAyB,EAAAA,UASA+sD,mBCiDE,QAAFG,GAAsB1yD,EACsCiwD,EAC3BvB,EACC5sD,GAC9B,GAJkBjD,KAAtBmB,mBAAsBA,EACsCnB,KAA5DoxD,aAA4DA,EAC3BpxD,KAAjC6vD,aAAiCA,EACC7vD,KAAlCiD,KAAkCA,EAnClCjD,KAAAigE,eAA8D,GAAIl4D,GAAAA,aAGlE/H,KAAAqkE,eAA0D,GAAIt8D,GAAAA,aAG9D/H,KAAAi/D,iBAAyD,GAAIl3D,GAAAA,cA8BpD/H,KAAK6vD,aACR,KAAMuQ,GAA2B,cAEnC,KAAKpgE,KAAKoxD,aACR,KAAMgP,GAA2B,mBAGnC,IAAMiQ,GAAiBrwE,KAAK6vD,aAAaygB,oBACnCC,EAAiBvwE,KAAK6vD,aAAa2gB,kBAAkB,UACrDC,EAAezwE,KAAK6vD,aAAa2gB,kBAAkB,QAGrDE,EAAWD,EAAazmE,IAAI,SAAC2mE,EAAMtmE,GACrC,OAAQsmE,KAAdA,EAAoBC,OAAQL,EAAelmE,KAEvCrK,MAAK6wE,UAAYH,EAAS5/D,MAAMu/D,GAAgBnmE,OAAOwmE,EAAS5/D,MAAM,EAAGu/D,IAEzErwE,KAAK2+D,YAAc3+D,KAAK6vD,aAAawQ,QA5CzC,MAlDA7+D,QAAAC,eAAMoyD,EAAN9yD,UAAA,kBAAA,WAAwB,MAAOf,MAAK2+D,iBAClC,SAAej9D,GACb,GAAMs9D,GAAgBh/D,KAAK2+D,YACrB2B,EACFtgE,KAAK4vD,oBAAoB5vD,KAAK6vD,aAAaC,YAAYpuD,KAAW1B,KAAK6vD,aAAawQ,OACxFrgE,MAAK2+D,YAAc3+D,KAAK6vD,aAAa0Q,UAAUD,EAAWtgE,KAAK6/D,QAAS7/D,KAAK4/D,SACxE5/D,KAAK8wE,qBAAqB9R,EAAeh/D,KAAK2+D,cACjD3+D,KAAKwgE,yCAOXh/D,OAAAC,eAAMoyD,EAAN9yD,UAAA,gBAAA,WAA6B,MAAOf,MAAKwgC,eACvC,SAAa9+B,GACX1B,KAAKwgC,UAAYxgC,KAAK4vD,oBAAoB5vD,KAAK6vD,aAAaC,YAAYpuD,IACxE1B,KAAK+wE,cAAgB/wE,KAAKgxE,uBAAuBhxE,KAAKwgC,4CAM1Dh/B,OAAAC,eAAMoyD,EAAN9yD,UAAA,eAAA,WAA4B,MAAOf,MAAK2gE,cACtC,SAAYj/D,GACV1B,KAAK2gE,SAAW3gE,KAAK4vD,oBAAoB5vD,KAAK6vD,aAAaC,YAAYpuD,qCAM3EF,OAAAC,eAAMoyD,EAAN9yD,UAAA,eAAA,WAA4B,MAAOf,MAAK4gE,cACtC,SAAYl/D,GACV1B,KAAK4gE,SAAW5gE,KAAK4vD,oBAAoB5vD,KAAK6vD,aAAaC,YAAYpuD,qCAgEzEmyD,EAAF9yD,UAAAyI,mBAAE,WACExJ,KAAKwgE,SAIP3M,EAAF9yD,UAAAkwE,cAAE,SAAc/f,GACZ,GAAIlxD,KAAK+wE,eAAiB7f,EAAM,CAC9B,GAAMggB,GAAelxE,KAAK6vD,aAAa+O,QAAQ5+D,KAAKy+D,YAC9C0S,EAAgBnxE,KAAK6vD,aAAawR,SAASrhE,KAAKy+D,YAChD2S,EAAepxE,KAAK6vD,aAAa4P,WAAWyR,EAAcC,EAAejgB,EAE/ElxD,MAAKigE,eAAel+D,KAAKqvE,GAG3BpxE,KAAKqkE,eAAetiE,QAItB8xD,EAAF9yD,UAAAogE,2BAAE,SAA2Br3D,GAKzB,GAAMk1D,GAAgBh/D,KAAK2+D,YACrBjyC,EAAQ1sB,KAAKi8C,QAEnB,QAAQnyC,EAAMwZ,SACZ,IAAK0Z,GAAAA,WACHh9B,KAAKy+D,WAAaz+D,KAAK6vD,aAAamQ,gBAAgBhgE,KAAK2+D,YAAajyC,EAAQ,GAAK,EACnF,MACF,KAAKwQ,GAAAA,YACHl9B,KAAKy+D,WAAaz+D,KAAK6vD,aAAamQ,gBAAgBhgE,KAAK2+D,YAAajyC,GAAS,EAAI,EACnF,MACF,KAAKuQ,GAAAA,SACHj9B,KAAKy+D,WAAaz+D,KAAK6vD,aAAamQ,gBAAgBhgE,KAAK2+D,aAAc,EACvE,MACF,KAAKxhC,GAAAA,WACHn9B,KAAKy+D,WAAaz+D,KAAK6vD,aAAamQ,gBAAgBhgE,KAAK2+D,YAAa,EACtE,MACF,KAAKp7C,GAAAA,KACHvjB,KAAKy+D,WAAaz+D,KAAK6vD,aAAamQ,gBAAgBhgE,KAAK2+D,YACrD,EAAI3+D,KAAK6vD,aAAaqR,QAAQlhE,KAAK2+D,aACvC,MACF,KAAKl7C,GAAAA,IACHzjB,KAAKy+D,WAAaz+D,KAAK6vD,aAAamQ,gBAAgBhgE,KAAK2+D,YACpD3+D,KAAK6vD,aAAaoR,kBAAkBjhE,KAAK2+D,aACxC3+D,KAAK6vD,aAAaqR,QAAQlhE,KAAK2+D,aACrC,MACF,KAAK9hC,GAAAA,QACH78B,KAAKy+D,WAAa30D,EAAM6yC,OACpB38C,KAAK6vD,aAAa6O,iBAAiB1+D,KAAK2+D,aAAc,GACtD3+D,KAAK6vD,aAAauR,kBAAkBphE,KAAK2+D,aAAc,EAC3D,MACF,KAAK5hC,GAAAA,UACH/8B,KAAKy+D,WAAa30D,EAAM6yC,OACpB38C,KAAK6vD,aAAa6O,iBAAiB1+D,KAAK2+D,YAAa,GACrD3+D,KAAK6vD,aAAauR,kBAAkBphE,KAAK2+D,YAAa,EAC1D,MACF,KAAKh7C,GAAAA,MAOH,YANK3jB,KAAK8/D,aAAc9/D,KAAK8/D,WAAW9/D,KAAK2+D,eAC3C3+D,KAAKixE,cAAcjxE,KAAK6vD,aAAaqR,QAAQlhE,KAAK2+D,cAClD3+D,KAAKqkE,eAAetiE,OAEpB+H,EAAMqE,kBAGV,SAEE,OAGAnO,KAAK6vD,aAAakP,YAAYC,EAAeh/D,KAAKy+D,aACpDz+D,KAAKi/D,iBAAiBl9D,KAAK/B,KAAKy+D,YAGlCz+D,KAAKk/D,mBAELp1D,EAAMqE,kBAIR0lD,EAAF9yD,UAAAy/D,MAAE,WACExgE,KAAK+wE,cAAgB/wE,KAAKgxE,uBAAuBhxE,KAAK6W,UACtD7W,KAAKqxE,WAAarxE,KAAKgxE,uBAAuBhxE,KAAK6vD,aAAawQ,SAChErgE,KAAKsxE,YACDtxE,KAAK6vD,aAAa4R,cAAc,SAASzhE,KAAK6vD,aAAawR,SAASrhE,KAAKy+D,aACpEqD,mBAET,IAAIK,GAAeniE,KAAK6vD,aAAa4P,WAAWz/D,KAAK6vD,aAAa+O,QAAQ5+D,KAAKy+D,YAC3Ez+D,KAAK6vD,aAAawR,SAASrhE,KAAKy+D,YAAa,EACjDz+D,MAAKuxE,kBA/Ma,EAgNGvxE,KAAK6vD,aAAa2hB,aAAarP,GAC/CniE,KAAK6vD,aAAaygB,qBAjNL,EAmNlBtwE,KAAKyxE,mBACLzxE,KAAKmB,mBAAmBC,gBAI1ByyD,EAAF9yD,UAAAm+D,iBAAE,WACEl/D,KAAKo/D,iBAAiBF,oBAIhBrL,EAAV9yD,UAAA0wE,4BACI,GAAMzQ,GAAchhE,KAAK6vD,aAAaoR,kBAAkBjhE,KAAKy+D,YACvDiT,EAAY1xE,KAAK6vD,aAAa8hB,cACpC3xE,MAAK4xE,WACL,KAAK,GAAIvnE,GAAI,EAAGwlE,EAAO7vE,KAAKuxE,iBAAkBlnE,EAAI22D,EAAa32D,IAAKwlE,IAAQ,CAjO1D,GAkOZA,IACF7vE,KAAK4xE,OAAOh9D,SACZi7D,EAAO,EAET,IAAM3e,GAAOlxD,KAAK6vD,aAAa4P,WACzBz/D,KAAK6vD,aAAa+O,QAAQ5+D,KAAKy+D,YAC/Bz+D,KAAK6vD,aAAawR,SAASrhE,KAAKy+D,YAAap0D,EAAI,GACjDg6B,EAAUrkC,KAAK6xE,kBAAkB3gB,GACjCl7B,EAAYh2B,KAAK6vD,aAAa6B,OAAOR,EAAMlxD,KAAKoxD,aAAaO,QAAQmgB,cAC3E9xE,MAAK4xE,OAAO5xE,KAAK4xE,OAAOpvE,OAAS,GAC5BoS,KAAK,GAAI8qD,IAAgBr1D,EAAI,EAAGqnE,EAAUrnE,GAAI2rB,EAAWqO,MAK1DwvB,EAAV9yD,UAAA8wE,kBAAA,SAA4B3gB,GACxB,QAASA,KACHlxD,KAAK8/D,YAAc9/D,KAAK8/D,WAAW5O,OACnClxD,KAAK6/D,SAAW7/D,KAAK6vD,aAAakP,YAAY7N,EAAMlxD,KAAK6/D,UAAY,MACrE7/D,KAAK4/D,SAAW5/D,KAAK6vD,aAAakP,YAAY7N,EAAMlxD,KAAK4/D,UAAY,IAOrE/L,EAAV9yD,UAAAiwE,uBAAA,SAAiC9f,GAC7B,MAAOA,IAAQlxD,KAAK8wE,qBAAqB5f,EAAMlxD,KAAKy+D,YAChDz+D,KAAK6vD,aAAaqR,QAAQhQ,GAAQ,MAIhC2C,EAAV9yD,UAAA+vE,qBAAA,SAA+BiB,EAAcC,GACzC,SAAUD,IAAMC,GAAMhyE,KAAK6vD,aAAawR,SAAS0Q,IAAO/xE,KAAK6vD,aAAawR,SAAS2Q,IACzEhyE,KAAK6vD,aAAa+O,QAAQmT,IAAO/xE,KAAK6vD,aAAa+O,QAAQoT,KAO/Dne,EAAV9yD,UAAA6uD,oBAAA,SAA8B5wC,GAC1B,MAAQhf,MAAK6vD,aAAa+B,eAAe5yC,IAAQhf,KAAK6vD,aAAayB,QAAQtyC,GAAQA,EAAM,MAInF60C,EAAV9yD,UAAAk7C,kBACI,MAAOj8C,MAAKiD,MAA4B,QAApBjD,KAAKiD,KAAKvB,sBA1QlCwD,KAACC,EAAAA,UAADC,OAAAC,SAAA,iBACEC,SAAU,kkBACV6F,SAAU,eACV1F,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,iJA3BAZ,KAAEotD,GAAFjsD,aAAAnB,KAAAoB,EAAAA,aA8GApB,KAAAkB,EAAAA,eAAAC,aAAAnB,KAAAoB,EAAAA,cAnGAutD,EAAAttD,sEAwBAs5D,UAAA36D,KAAAuB,EAAAA,QAcAm5D,UAAA16D,KAAAuB,EAAAA,QASAq5D,aAAA56D,KAAAuB,EAAAA,QAQAw5D,iBAAA/6D,KAAAyB,EAAAA,SAQA09D,iBAAAn/D,KAAAyB,EAAAA,SAGAs4D,mBAAA/5D,KAAAyB,EAAAA,SAGAy4D,mBAAAl6D,KAAAsB,EAAAA,UAAApB,MAAAsuD,OAMAG,mBhBUE,QAAFE,GAAsB5yD,EACW0uD,EACC5sD,GAC9B,GAHkBjD,KAAtBmB,mBAAsBA,EACWnB,KAAjC6vD,aAAiCA,EACC7vD,KAAlCiD,KAAkCA,EAtBlCjD,KAAAigE,eAAuD,GAAIl4D,GAAAA,aAG3D/H,KAAAkgE,aAAqD,GAAIn4D,GAAAA,aAGzD/H,KAAAi/D,iBAAyD,GAAIl3D,GAAAA,cAiBpD/H,KAAK6vD,aACR,KAAMuQ,GAA2B,cAGnCpgE,MAAK2+D,YAAc3+D,KAAK6vD,aAAawQ,QAlBzC,MAnDA7+D,QAAAC,eAAMsyD,EAANhzD,UAAA,kBAAA,WAAwB,MAAOf,MAAK2+D,iBAClC,SAAej9D,GACb,GAAIs9D,GAAgBh/D,KAAK2+D,YACnB2B,EACFtgE,KAAK4vD,oBAAoB5vD,KAAK6vD,aAAaC,YAAYpuD,KAAW1B,KAAK6vD,aAAawQ,OACxFrgE,MAAK2+D,YAAc3+D,KAAK6vD,aAAa0Q,UAAUD,EAAWtgE,KAAK6/D,QAAS7/D,KAAK4/D,SACzEn8D,KAAK2rC,MAAMpvC,KAAK6vD,aAAa+O,QAAQI,GA1BjB,KA2BpBv7D,KAAK2rC,MAAMpvC,KAAK6vD,aAAa+O,QAAQ5+D,KAAK2+D,aA3BtB,KA4BtB3+D,KAAKwgE,yCAOXh/D,OAAAC,eAAMsyD,EAANhzD,UAAA,gBAAA,WAA6B,MAAOf,MAAKwgC,eACvC,SAAa9+B,GACX1B,KAAKwgC,UAAYxgC,KAAK4vD,oBAAoB5vD,KAAK6vD,aAAaC,YAAYpuD,IACxE1B,KAAKiyE,cAAgBjyE,KAAKwgC,WAAaxgC,KAAK6vD,aAAa+O,QAAQ5+D,KAAKwgC,4CAM1Eh/B,OAAAC,eAAMsyD,EAANhzD,UAAA,eAAA,WAA4B,MAAOf,MAAK2gE,cACtC,SAAYj/D,GACV1B,KAAK2gE,SAAW3gE,KAAK4vD,oBAAoB5vD,KAAK6vD,aAAaC,YAAYpuD,qCAM3EF,OAAAC,eAAMsyD,EAANhzD,UAAA,eAAA,WAA4B,MAAOf,MAAK4gE,cACtC,SAAYl/D,GACV1B,KAAK4gE,SAAW5gE,KAAK4vD,oBAAoB5vD,KAAK6vD,aAAaC,YAAYpuD,qCAsCzEqyD,EAAFhzD,UAAAyI,mBAAE,WACExJ,KAAKwgE,SAIPzM,EAAFhzD,UAAAy/D,MAAE,WAAA,GAAF3gE,GAAAG,IACIA,MAAKkyE,WAAalyE,KAAK6vD,aAAa+O,QAAQ5+D,KAAK6vD,aAAawQ,QAC9D,IAAI2B,GAAahiE,KAAK6vD,aAAa+O,QAAQ5+D,KAAK2+D,aAC5CwT,EAAenQ,EApGK,EAqGxBhiE,MAAKoyE,SACL,KAAK,GAAI/nE,GAAI,EAAG8uD,KAAoB9uD,EAtGZ,GAsG8BA,IACpD8uD,EAAIvkD,KAAKotD,EAAamQ,EAAe9nE,GArGhB,GAsGjB8uD,EAAI32D,SACNxC,KAAKoyE,OAAOx9D,KAAKukD,EAAInvD,IAAI,SAAAs1D,GAAQ,MAAAz/D,GAAKw/D,mBAAmBC,MACzDnG,KAGJn5D,MAAKmB,mBAAmBC,gBAI1B2yD,EAAFhzD,UAAA+9D,cAAE,SAAcQ,GACZt/D,KAAKkgE,aAAan+D,KAAK/B,KAAK6vD,aAAa4P,WAAWH,EAAM,EAAG,GAC7D,IAAIwB,GAAQ9gE,KAAK6vD,aAAawR,SAASrhE,KAAKy+D,YACxCuC,EACAhhE,KAAK6vD,aAAaoR,kBAAkBjhE,KAAK6vD,aAAa4P,WAAWH,EAAMwB,EAAO,GAClF9gE,MAAKigE,eAAel+D,KAAK/B,KAAK6vD,aAAa4P,WAAWH,EAAMwB,EACxDr9D,KAAKE,IAAI3D,KAAK6vD,aAAaqR,QAAQlhE,KAAKy+D,YAAauC,MAI3DjN,EAAFhzD,UAAAogE,2BAAE,SAA2Br3D,GAKzB,GAAMk1D,GAAgBh/D,KAAK2+D,YACrBjyC,EAAQ1sB,KAAKi8C,QAEnB,QAAQnyC,EAAMwZ,SACZ,IAAK0Z,GAAAA,WACHh9B,KAAKy+D,WAAaz+D,KAAK6vD,aAAa6O,iBAAiB1+D,KAAK2+D,YAAajyC,EAAQ,GAAK,EACpF,MACF,KAAKwQ,GAAAA,YACHl9B,KAAKy+D,WAAaz+D,KAAK6vD,aAAa6O,iBAAiB1+D,KAAK2+D,YAAajyC,GAAS,EAAI,EACpF,MACF,KAAKuQ,GAAAA,SACHj9B,KAAKy+D,WAAaz+D,KAAK6vD,aAAa6O,iBAAiB1+D,KAAK2+D,aAzIvC,EA0InB,MACF,KAAKxhC,GAAAA,WACHn9B,KAAKy+D,WAAaz+D,KAAK6vD,aAAa6O,iBAAiB1+D,KAAK2+D,YA5IvC,EA6InB,MACF,KAAKp7C,GAAAA,KACHvjB,KAAKy+D,WAAaz+D,KAAK6vD,aAAa6O,iBAAiB1+D,KAAK2+D,aACrD3+D,KAAK6vD,aAAa+O,QAAQ5+D,KAAK2+D,aAlJhB;oHAmJpB,MACF,KAAKl7C,GAAAA,IACHzjB,KAAKy+D,WAAaz+D,KAAK6vD,aAAa6O,iBAAiB1+D,KAAK2+D,YArJtC,GAsJD3+D,KAAK6vD,aAAa+O,QAAQ5+D,KAAK2+D,aAtJ9B,GAsJ4D,EAChF,MACF,KAAK9hC,GAAAA,QACH78B,KAAKy+D,WACDz+D,KAAK6vD,aAAa6O,iBACd1+D,KAAK2+D,YAAa70D,EAAM6yC,QAAS,KA3JrB,GA4JpB,MACF,KAAK5f,GAAAA,UACH/8B,KAAKy+D,WACDz+D,KAAK6vD,aAAa6O,iBACd1+D,KAAK2+D,YAAa70D,EAAM6yC,OAASkiB,IAhKrB,GAiKpB,MACF,KAAKl7C,GAAAA,MACH3jB,KAAK8+D,cAAc9+D,KAAK6vD,aAAa+O,QAAQ5+D,KAAK2+D,aAClD,MACF,SAEE,OAGA3+D,KAAK6vD,aAAakP,YAAYC,EAAeh/D,KAAKy+D,aACpDz+D,KAAKi/D,iBAAiBl9D,KAAK/B,KAAKy+D,YAGlCz+D,KAAKk/D,mBAELp1D,EAAMqE,kBAGR4lD,EAAFhzD,UAAAo+D,eAAE,WACE,MAAOn/D,MAAK6vD,aAAa+O,QAAQ5+D,KAAKy+D,YApLd,IAwL1B1K,EAAFhzD,UAAAm+D,iBAAE,WACEl/D,KAAKo/D,iBAAiBF,oBAIhBnL,EAAVhzD,UAAAs+D,mBAAA,SAA6BC,GACzB,GAAIC,GAAWv/D,KAAK6vD,aAAa2P,YAAYx/D,KAAK6vD,aAAa4P,WAAWH,EAAM,EAAG,GACnF,OAAO,IAAII,IAAgBJ,EAAMC,EAAUA,EAAUv/D,KAAK2/D,kBAAkBL,KAItEvL,EAAVhzD,UAAA4+D,kBAAA,SAA4BL,GAExB,OAAazwD,KAATywD,GAA+B,OAATA,GACrBt/D,KAAK4/D,SAAWN,EAAOt/D,KAAK6vD,aAAa+O,QAAQ5+D,KAAK4/D,UACtD5/D,KAAK6/D,SAAWP,EAAOt/D,KAAK6vD,aAAa+O,QAAQ5+D,KAAK6/D,SACzD,OAAO,CAIT,KAAK7/D,KAAK8/D,WACR,OAAO,CAMT,KAAK,GAHCC,GAAc//D,KAAK6vD,aAAa4P,WAAWH,EAAM,EAAG,GAGjDpO,EAAO6O,EAAa//D,KAAK6vD,aAAa+O,QAAQ1N,IAASoO,EAC9DpO,EAAOlxD,KAAK6vD,aAAamQ,gBAAgB9O,EAAM,GAC/C,GAAIlxD,KAAK8/D,WAAW5O,GAClB,OAAO,CAIX,QAAO,GAOD6C,EAAVhzD,UAAA6uD,oBAAA,SAA8B5wC,GAC1B,MAAQhf,MAAK6vD,aAAa+B,eAAe5yC,IAAQhf,KAAK6vD,aAAayB,QAAQtyC,GAAQA,EAAM,MAInF+0C,EAAVhzD,UAAAk7C,kBACI,MAAOj8C,MAAKiD,MAA4B,QAApBjD,KAAKiD,KAAKvB,sBA9NlCwD,KAACC,EAAAA,UAADC,OAAAC,SAAA,sBACEC,SAAU,odACV6F,SAAU,mBACV1F,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,mHA3BAZ,KAAEkB,EAAAA,eAAFC,aAAAnB,KAAAoB,EAAAA,cAUAytD,EAAAxtD,sEAuBAs5D,UAAA36D,KAAAuB,EAAAA,QAeAm5D,UAAA16D,KAAAuB,EAAAA,QASAq5D,aAAA56D,KAAAuB,EAAAA,QAQAw5D,iBAAA/6D,KAAAyB,EAAAA,SAQAu5D,eAAAh7D,KAAAyB,EAAAA,SAGAs4D,mBAAA/5D,KAAAyB,EAAAA,SAGAy4D,mBAAAl6D,KAAAsB,EAAAA,UAAApB,MAAAsuD,OAMAK,mBCYE,QAAFD,GAAsB3yD,EACsCiwD,EAC3BvB,EACC5sD,GAC9B,GAJkBjD,KAAtBmB,mBAAsBA,EACsCnB,KAA5DoxD,aAA4DA,EAC3BpxD,KAAjC6vD,aAAiCA,EACC7vD,KAAlCiD,KAAkCA,EA7BlCjD,KAAAigE,eAAuD,GAAIl4D,GAAAA,aAG3D/H,KAAAmgE,cAAsD,GAAIp4D,GAAAA,aAG1D/H,KAAAi/D,iBAAyD,GAAIl3D,GAAAA,cAwBpD/H,KAAK6vD,aACR,KAAMuQ,GAA2B,cAEnC,KAAKpgE,KAAKoxD,aACR,KAAMgP,GAA2B,mBAGnCpgE,MAAK2+D,YAAc3+D,KAAK6vD,aAAawQ,QA5BzC,MAlDA7+D,QAAAC,eAAMqyD,EAAN/yD,UAAA,kBAAA,WAAwB,MAAOf,MAAK2+D,iBAClC,SAAej9D,GACb,GAAIs9D,GAAgBh/D,KAAK2+D,YACnB2B,EACFtgE,KAAK4vD,oBAAoB5vD,KAAK6vD,aAAaC,YAAYpuD,KAAW1B,KAAK6vD,aAAawQ,OACxFrgE,MAAK2+D,YAAc3+D,KAAK6vD,aAAa0Q,UAAUD,EAAWtgE,KAAK6/D,QAAS7/D,KAAK4/D,SACzE5/D,KAAK6vD,aAAa+O,QAAQI,KAAmBh/D,KAAK6vD,aAAa+O,QAAQ5+D,KAAK2+D,cAC9E3+D,KAAKwgE,yCAOXh/D,OAAAC,eAAMqyD,EAAN/yD,UAAA,gBAAA,WAA6B,MAAOf,MAAKwgC,eACvC,SAAa9+B,GACX1B,KAAKwgC,UAAYxgC,KAAK4vD,oBAAoB5vD,KAAK6vD,aAAaC,YAAYpuD,IACxE1B,KAAKygE,eAAiBzgE,KAAK0gE,uBAAuB1gE,KAAKwgC,4CAM3Dh/B,OAAAC,eAAMqyD,EAAN/yD,UAAA,eAAA,WAA4B,MAAOf,MAAK2gE,cACtC,SAAYj/D,GACV1B,KAAK2gE,SAAW3gE,KAAK4vD,oBAAoB5vD,KAAK6vD,aAAaC,YAAYpuD,qCAM3EF,OAAAC,eAAMqyD,EAAN/yD,UAAA,eAAA,WAA4B,MAAOf,MAAK4gE,cACtC,SAAYl/D,GACV1B,KAAK4gE,SAAW5gE,KAAK4vD,oBAAoB5vD,KAAK6vD,aAAaC,YAAYpuD,qCAgDzEoyD,EAAF/yD,UAAAyI,mBAAE,WACExJ,KAAKwgE,SAIP1M,EAAF/yD,UAAA8/D,eAAE,SAAeC,GACb,GAAMC,GACA/gE,KAAK6vD,aAAa4P,WAAWz/D,KAAK6vD,aAAa+O,QAAQ5+D,KAAKy+D,YAAaqC,EAAO,EAEtF9gE,MAAKmgE,cAAcp+D,KAAKg/D,EAExB,IAAMC,GAAchhE,KAAK6vD,aAAaoR,kBAAkBF,EAExD/gE,MAAKigE,eAAel+D,KAAK/B,KAAK6vD,aAAa4P,WACvCz/D,KAAK6vD,aAAa+O,QAAQ5+D,KAAKy+D,YAAaqC,EAC5Cr9D,KAAKE,IAAI3D,KAAK6vD,aAAaqR,QAAQlhE,KAAKy+D,YAAauC,MAI3DlN,EAAF/yD,UAAAogE,2BAAE,SAA2Br3D,GAKzB,GAAMk1D,GAAgBh/D,KAAK2+D,YACrBjyC,EAAQ1sB,KAAKi8C,QAEnB,QAAQnyC,EAAMwZ,SACZ,IAAK0Z,GAAAA,WACHh9B,KAAKy+D,WAAaz+D,KAAK6vD,aAAauR,kBAAkBphE,KAAK2+D,YAAajyC,EAAQ,GAAK,EACrF,MACF,KAAKwQ,GAAAA,YACHl9B,KAAKy+D,WAAaz+D,KAAK6vD,aAAauR,kBAAkBphE,KAAK2+D,YAAajyC,GAAS,EAAI,EACrF,MACF,KAAKuQ,GAAAA,SACHj9B,KAAKy+D,WAAaz+D,KAAK6vD,aAAauR,kBAAkBphE,KAAK2+D,aAAc,EACzE,MACF,KAAKxhC,GAAAA,WACHn9B,KAAKy+D,WAAaz+D,KAAK6vD,aAAauR,kBAAkBphE,KAAK2+D,YAAa,EACxE,MACF,KAAKp7C,GAAAA,KACHvjB,KAAKy+D,WAAaz+D,KAAK6vD,aAAauR,kBAAkBphE,KAAK2+D,aACtD3+D,KAAK6vD,aAAawR,SAASrhE,KAAK2+D,aACrC,MACF,KAAKl7C,GAAAA,IACHzjB,KAAKy+D,WAAaz+D,KAAK6vD,aAAauR,kBAAkBphE,KAAK2+D,YACvD,GAAK3+D,KAAK6vD,aAAawR,SAASrhE,KAAK2+D,aACzC,MACF,KAAK9hC,GAAAA,QACH78B,KAAKy+D,WACDz+D,KAAK6vD,aAAa6O,iBAAiB1+D,KAAK2+D,YAAa70D,EAAM6yC,QAAU,IAAM,EAC/E,MACF,KAAK5f,GAAAA,UACH/8B,KAAKy+D,WACDz+D,KAAK6vD,aAAa6O,iBAAiB1+D,KAAK2+D,YAAa70D,EAAM6yC,OAAS,GAAK,EAC7E,MACF,KAAKh5B,GAAAA,MACH3jB,KAAK6gE,eAAe7gE,KAAK6vD,aAAawR,SAASrhE,KAAK2+D,aACpD,MACF,SAEE,OAGA3+D,KAAK6vD,aAAakP,YAAYC,EAAeh/D,KAAKy+D,aACpDz+D,KAAKi/D,iBAAiBl9D,KAAK/B,KAAKy+D,YAGlCz+D,KAAKk/D,mBAELp1D,EAAMqE,kBAIR2lD,EAAF/yD,UAAAy/D,MAAE,WAAA,GAAF3gE,GAAAG,IACIA,MAAKygE,eAAiBzgE,KAAK0gE,uBAAuB1gE,KAAK6W,UACvD7W,KAAKshE,YAActhE,KAAK0gE,uBAAuB1gE,KAAK6vD,aAAawQ,SACjErgE,KAAKuhE,WAAavhE,KAAK6vD,aAAa2P,YAAYx/D,KAAKy+D,WAErD,IAAI+C,GAAaxhE,KAAK6vD,aAAa4R,cAAc,QAEjDzhE,MAAK0hE,UAAY,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,GAAI,KAAK13D,IAAI,SAAAmvD,GAAO,MAAAA,GAAInvD,IACvE,SAAA82D,GAAS,MAAAjhE,GAAK8hE,oBAAoBb,EAAOU,EAAWV,QACxD9gE,KAAKmB,mBAAmBC,gBAI1B0yD,EAAF/yD,UAAAm+D,iBAAE,WACEl/D,KAAKo/D,iBAAiBF,oBAOhBpL,EAAV/yD,UAAA2/D,uBAAA,SAAiCxP,GAC7B,MAAOA,IAAQlxD,KAAK6vD,aAAa+O,QAAQ1N,IAASlxD,KAAK6vD,aAAa+O,QAAQ5+D,KAAKy+D,YAC7Ez+D,KAAK6vD,aAAawR,SAASnQ,GAAQ,MAIjC4C,EAAV/yD,UAAA4gE,oBAAA,SAA8Bb,EAAec,GACzC,GAAI5rC,GAAYh2B,KAAK6vD,aAAa6B,OAC9B1xD,KAAK6vD,aAAa4P,WAAWz/D,KAAK6vD,aAAa+O,QAAQ5+D,KAAKy+D,YAAaqC,EAAO,GAChF9gE,KAAKoxD,aAAaO,QAAQkQ,mBAC9B,OAAO,IAAInC,IACPoB,EAAOc,EAAUE,oBAAqB9rC,EAAWh2B,KAAK+hE,mBAAmBjB,KAIvEhN,EAAV/yD,UAAAghE,mBAAA,SAA6BjB,GAEzB,GAAMkB,GAAahiE,KAAK6vD,aAAa+O,QAAQ5+D,KAAKy+D,WAElD,QAAc5vD,KAAViyD,GAAiC,OAAVA,GACvB9gE,KAAKiiE,4BAA4BD,EAAYlB,IAC7C9gE,KAAKkiE,6BAA6BF,EAAYlB,GAChD,OAAO,CAGT,KAAK9gE,KAAK8/D,WACR,OAAO,CAMT,KAAK,GAHCqC,GAAeniE,KAAK6vD,aAAa4P,WAAWuC,EAAYlB,EAAO,GAG5D5P,EAAOiR,EAAcniE,KAAK6vD,aAAawR,SAASnQ,IAAS4P,EAC7D5P,EAAOlxD,KAAK6vD,aAAamQ,gBAAgB9O,EAAM,GAClD,GAAIlxD,KAAK8/D,WAAW5O,GAClB,OAAO,CAIX,QAAO,GAOD4C,EAAV/yD,UAAAkhE,4BAAA,SAAsC3C,EAAcwB,GAChD,GAAI9gE,KAAK4/D,QAAS,CAChB,GAAMwC,GAAUpiE,KAAK6vD,aAAa+O,QAAQ5+D,KAAK4/D,SACzCyC,EAAWriE,KAAK6vD,aAAawR,SAASrhE,KAAK4/D,QAEjD,OAAON,GAAO8C,GAAY9C,IAAS8C,GAAWtB,EAAQuB,EAGxD,OAAO,GAODvO,EAAV/yD,UAAAmhE,6BAAA,SAAuC5C,EAAcwB,GACjD,GAAI9gE,KAAK6/D,QAAS,CAChB,GAAMyC,GAAUtiE,KAAK6vD,aAAa+O,QAAQ5+D,KAAK6/D,SACzC0C,EAAWviE,KAAK6vD,aAAawR,SAASrhE,KAAK6/D,QAEjD,OAAOP,GAAOgD,GAAYhD,IAASgD,GAAWxB,EAAQyB,EAGxD,OAAO,GAODzO,EAAV/yD,UAAA6uD,oBAAA,SAA8B5wC,GAC1B,MAAQhf,MAAK6vD,aAAa+B,eAAe5yC,IAAQhf,KAAK6vD,aAAayB,QAAQtyC,GAAQA,EAAM,MAInF80C,EAAV/yD,UAAAk7C,kBACI,MAAOj8C,MAAKiD,MAA4B,QAApBjD,KAAKiD,KAAKvB,sBA7QlCwD,KAACC,EAAAA,UAADC,OAAAC,SAAA,gBACEC,SAAU,0hBACV6F,SAAU,cACV1F,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,iJAvBAZ,KAAEotD,GAAFjsD,aAAAnB,KAAAoB,EAAAA,aAkGApB,KAAAkB,EAAAA,eAAAC,aAAAnB,KAAAoB,EAAAA,cAvFAwtD,EAAQvtD,sEAkBRs5D,UAAA36D,KAAAuB,EAAAA,QAcAm5D,UAAA16D,KAAAuB,EAAAA,QASAq5D,aAAA56D,KAAAuB,EAAAA,QAQAw5D,iBAAA/6D,KAAAyB,EAAAA,SAQAw5D,gBAAAj7D,KAAAyB,EAAAA,SAGAs4D,mBAAA/5D,KAAAyB,EAAAA,SAGAy4D,mBAAAl6D,KAAAsB,EAAAA,UAAApB,MAAAsuD,OAMAI,mBCnDE,QAAFE,GAAsB1jC,EACsCkyC,EAC1B3S,EAC0BuB,EAC9C7gC,GAJQvwB,KAAtBswB,MAAsBA,EACsCtwB,KAA5DwiE,SAA4DA,EAC1BxiE,KAAlC6vD,aAAkCA,EAC0B7vD,KAA5DoxD,aAA4DA,EAGxDpxD,KAAKwiE,SAAS7nB,aAAa95C,UAAU,WAAM,MAAA0vB,GAAkBnvB,iBA5CjE,MAgDEI,QAAFC,eAAMuyD,EAANjzD,UAAA,wBAAE,WACE,GAAiC,SAA7Bf,KAAKwiE,SAASC,YAChB,MAAOziE,MAAK6vD,aACP6B,OAAO1xD,KAAKwiE,SAAS/D,WAAYz+D,KAAKoxD,aAAaO,QAAQ+Q,gBACvDZ,mBAEX,IAAiC,QAA7B9hE,KAAKwiE,SAASC,YAChB,MAAOziE,MAAK6vD,aAAa2P,YAAYx/D,KAAKwiE,SAAS/D,WAErD,IAAMuD,GAAahiE,KAAK6vD,aAAa+O,QAAQ5+D,KAAKwiE,SAAS/D,WAK3D,OAJwBz+D,MAAK6vD,aAAa2P,YACtCx/D,KAAK6vD,aAAa4P,WAAWuC,EAAaA,EAAa,GAAI,EAAG,IAGtE,MAF2BhiE,KAAK6vD,aAAa2P,YACrCx/D,KAAK6vD,aAAa4P,WAAWuC,EFtCT,GEsCqC,EAAIA,EAAa,GAAI,EAAG,qCAIvFxgE,OAAFC,eAAMuyD,EAANjzD,UAAA,yBAAE,WACE,MAAoC,SAA7Bf,KAAKwiE,SAASC,YACjBziE,KAAKswB,MAAMqyC,2BAA6B3iE,KAAKswB,MAAMsyC,wDAIzDphE,OAAFC,eAAMuyD,EAANjzD,UAAA,uBAAE,WACE,OACE+/D,MAAS9gE,KAAKswB,MAAMuyC,eACpBvD,KAAQt/D,KAAKswB,MAAMwyC,cACnBC,aAAc/iE,KAAKswB,MAAM0yC,oBACzBhjE,KAAKwiE,SAASC,8CAIlBjhE,OAAFC,eAAMuyD,EAANjzD,UAAA,uBAAE,WACE,OACE+/D,MAAS9gE,KAAKswB,MAAM2yC,eACpB3D,KAAQt/D,KAAKswB,MAAM4yC,cACnBH,aAAc/iE,KAAKswB,MAAM6yC,oBACzBnjE,KAAKwiE,SAASC,8CAIlBzO,EAAFjzD,UAAAqiE,qBAAE,WACEpjE,KAAKwiE,SAASC,YAA2C,SAA7BziE,KAAKwiE,SAASC,YAAyB,aAAe,SAIpFzO,EAAFjzD,UAAAsiE,gBAAE,WACErjE,KAAKwiE,SAAS/D,WAA0C,SAA7Bz+D,KAAKwiE,SAASC,YACrCziE,KAAK6vD,aAAauR,kBAAkBphE,KAAKwiE,SAAS/D,YAAa,GAC3Dz+D,KAAK6vD,aAAa6O,iBACd1+D,KAAKwiE,SAAS/D,WAAyC,QAA7Bz+D,KAAKwiE,SAASC,aAAyB,GF3ErD,KEgF1BzO,EAAFjzD,UAAAuiE,YAAE,WACEtjE,KAAKwiE,SAAS/D,WAA0C,SAA7Bz+D,KAAKwiE,SAASC,YACrCziE,KAAK6vD,aAAauR,kBAAkBphE,KAAKwiE,SAAS/D,WAAY,GAC1Dz+D,KAAK6vD,aAAa6O,iBACd1+D,KAAKwiE,SAAS/D,WACmB,QAA7Bz+D,KAAKwiE,SAASC,YAAwB,EFrF9B,KE0F1BzO,EAAFjzD,UAAAwiE,gBAAE,WACE,OAAKvjE,KAAKwiE,SAAS3C,WAGX7/D,KAAKwiE,SAAS3C,UACjB7/D,KAAKwjE,YAAYxjE,KAAKwiE,SAAS/D,WAAYz+D,KAAKwiE,SAAS3C,WAIhE7L,EAAFjzD,UAAA0iE,YAAE,WACE,OAAQzjE,KAAKwiE,SAAS5C,UACjB5/D,KAAKwjE,YAAYxjE,KAAKwiE,SAAS/D,WAAYz+D,KAAKwiE,SAAS5C,UAIxD5L,EAAVjzD,UAAAyiE,YAAA,SAAsBE,EAAUC,GAC5B,MAAiC,SAA7B3jE,KAAKwiE,SAASC,YACTziE,KAAK6vD,aAAa+O,QAAQ8E,IAAU1jE,KAAK6vD,aAAa+O,QAAQ+E,IACjE3jE,KAAK6vD,aAAawR,SAASqC,IAAU1jE,KAAK6vD,aAAawR,SAASsC,GAErC,QAA7B3jE,KAAKwiE,SAASC,YACTziE,KAAK6vD,aAAa+O,QAAQ8E,IAAU1jE,KAAK6vD,aAAa+O,QAAQ+E,GAGhElgE,KAAK2rC,MAAMpvC,KAAK6vD,aAAa+O,QAAQ8E,GFlHpB,KEmHpBjgE,KAAK2rC,MAAMpvC,KAAK6vD,aAAa+O,QAAQ+E,GFnHjB,oBEM5Bz+D,KAACC,EAAAA,UAADC,OAAAC,SAAA,sBACEC,SAAU,0vBACV6F,SAAU,oBACV1F,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,2IAhBAZ,KAAQotD,GAARjsD,aAAAnB,KAAAoB,EAAAA,aA6IApB,SAAa2J,GAAWxI,aAAxBnB,KAAAoB,EAAAA,WAAApB,KAAA4J,EAAAA,OAvHiC1J,MAuHjCmtD,QAhJArtD,KAAQ+H,EAAAA,qBAdR+mD,qDAuQAh0D,KAAA6vD,aAAAA,EAAE7vD,KAAFoxD,aAAAA,kQAFA,KAAAgP,GAAA,cAQA,KAAApgE,KAAYoxD,aACZ,KAAAgP,GAAA,mBAGApgE,MAAAouC,aAAA9d,EAAA5mB,QAAA7I,UAAA,WACA0vB,EAAAnvB,eAEQvB,EAAR86C,aAAA/tC,SA7CA,MAgDApL,QAAOC,eAAPgyD,EAAA1yD,UAAA,WACAgN,+HAtGAE,YAAA,EACAC,cAAA,mLAUAD,YAAA,EACAC,cAAA,gLAOAD,YAAA,EACAC,cAAA,gLAOAD,YAAA,EACAC,cAAA,oMAsCAlO,KAAA26C,aAAA/tC,QAEAqB,YAAA,EACAC,cAAA,qDAIAH,6EACA/N,KAAA4jE,sBAAA,GAEA31D,YAAA,EACAC,cAAA,yHA2BAlO,KAAAy+D,WAAAz+D,KAAA6jE,SAAA7jE,KAAA6vD,aAAAwQ,QAEIrgE,KAAK8jE,aAAT9jE,KAAA+jE,iFAMA/jE,KAAA4jE,sBAAA,EACQ5jE,KAAKgkE,uFAMbhkE,KAAA26C,aAAA9tC,wFAKA,IAAAX,IAAAA,EAAA+3D,YAAA,CACA,GAAAC,GAAAlkE,KAA0BmkE,0BAE1BD,IACAA,EAAA1D,QAIAxgE,KAAO26C,aAAP/tC,sLAWA5M,KAAAigE,eAAAl+D,KAAAmvD,8RAqBAlxD,KAAAyiE,YAAAyB,0OAeAzQ,EAAAptD,6iCAnNAd,QAAA,67CACEQ,MACFC,MAAA,gBAEEmF,SAAF,cACE1F,cAAFC,EAAAA,kBAAAC,KACAC,gBAAAC,EAAAA,wBAAAC,WAIA2tD,EAAAr6C,eAAA,WAAA,QACAlU,KAAA+uD,iJA/IAR,EAAQltD,gBA2PR69D,kBAAAl/D,KAAAuB,EAAAA,QAzQAo9D,UAAA3+D,KAAAuB,EAAAA,6DAgKAo5D,UAAA36D,KAAAuB,EAAAA,QAeAm5D,UAAA16D,KAAGuB,EAAAA,QAQHq5D,aAAA56D,KAAAuB,EAAAA,QAGAw5D,iBAAG/6D,KAAHyB,EAAAA,SAQAu5D,eAAAh7D,KAAQyB,EAAAA,SAQRw5D,gBAAGj7D,KAAHyB,EAAAA,SAQA09D,iBAAAn/D,KAAAyB,EAAAA,SAGA29D,YAAAp/D,KAAAsB,EAAAA,UAASpB,MAATyuD,MAMA0Q,WAAAr/D,KAAAsB,EAAAA,UAAApB,MAAA0uD,MAMA0Q,gBAAAt/D,KAAGsB,EAAAA,UAAHpB,MAAA2uD,OAMAN,KChOagR,IAKX3sB,eAAgB7gC,EAAAA,QAAQ,kBACtBC,EAAAA,MAAM,OAAQ7T,EAAAA,OAAOyjB,QAAS,EAAGxjB,UAAW,iBAC5C4T,EAAAA,MAAM,QAAS7T,EAAAA,OAAOyjB,QAAS,EAAGxjB,UAAW,iBAC7C8T,EAAAA,WAAW,gBAAiB4gC,EAAAA,OAC1BroB,EAAAA,MAAM,kBAAmBC,EAAAA,gBACzBvY,EAAAA,QAAQ,6CAEVD,EAAAA,WAAW,YAAaC,EAAAA,QAAQ,eAAgBhU,EAAAA,OAAOyjB,QAAS,QAIlE49C,eAAgBztD,EAAAA,QAAQ,kBACtBC,EAAAA,MAAM,OAAQ7T,EAAAA,OAAOyjB,QAAS,KAC9B5P,EAAAA,MAAM,QAAS7T,EAAAA,OAAOyjB,QAAS,KAC/B1P,EAAAA,WAAW,YAAaC,EAAAA,QAAQ,oDCShCstD,GAAgB,EAGPC,GACT,GAAIllD,GAAAA,eAAqC,kCAQhCw0C,IACXthD,QAASgyD,GACT50C,MAAO7C,EAAAA,SACP8C,WAAY40C,IAKdC,GAAA,WACE,QAAFA,GAAqBpgE,GAAA1E,KAArB0E,YAAqBA,EArErB,MAAAogE,MAuEaC,GAAiC/9D,EAAW89D,mBAwCvD,QAAFlR,GAAc7uD,GACd,MAAIoC,GAAJC,KAAApH,KAAU+E,IAAV/E,KATA,MAJ6CoI,GAA7CwrD,EAAAzsD,GAgBEysD,EAAF7yD,UAAA0P,gBAAE,WACEzQ,KAAKglE,UAAUhB,kCApCnB9+D,KAACC,EAAAA,UAADC,OAAAC,SAAA,yBACEC,SAAU,yjBACVC,QAAF,+sBACEQ,MACFC,MAAA,yBACMi/D,oBAAN,UACIC,uCAAJ,sBAEAhsD,YACAurD,GAAA3sB,eACA2sB,GAAAC,gBAEAv5D,SAAA,uBACA1F,cAAAC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,OACEN,QAAF,sEArEAouD,EAAArtD,0DA6EAqtD,mEAoKA5zD,KAAA2pB,SAAAA,EAAsB3pB,KAAtB0L,QAAsBA,EACA1L,KAAtBwgB,kBAAAA,EACsBxgB,KAAtBsoC,gBAAAA,EACsBtoC,KAAtB6vD,aAAAA,EAC8D7vD,KAA9DiD,KAAAA,EACkCjD,KAAlCwQ,UAA8CA,kbAP9C,KAAA4vD,GAA8C,eA3D9C,MAuEA5+D,QAAAC,eAAAkyD,EAAA5yD,UAAA,WACAgN,+FAxIA0gB,0FAGAxgB,YAAA,EACAC,cAAA,2JAUAugB,+BAGAxgB,YAAA,EACAC,cAAA,gJAUAD,YAAA,EACAC,cAAA,wKAOAugB,gDAEAqS,KAAA9gC,KAAA2gC,YACA3gC,KAAA2gC,UAAUG,EAEF9gC,KAARiwD,gBAAArjD,KAAAk0B,KAGA7yB,YAAA,EACAC,cAAA,8IA4BEA,cAAF,mDAOAH,gGACEG,cAAF,kDAIAH,wEACAE,YAAA,EACAC,cAAA,kDAGAH,wEACAE,YAAA,EACAC,cAAA,qDAAAH,gFAGAE,YAAA,EACAC,cAAA,oDA0CAlO,KAAAmlE,mBAAAlkE,cACIjB,KAAKiwD,gBAATpjD,WACQ7M,KAARolE,YACQplE,KAARolE,UAAAp/C,UAEQhmB,KAAKqlE,mBAAb,2DAOArlE,MAAAwgC,UAAA0wB,EACAlxD,KAAA6vD,aAAA0B,SAAmBz1B,EAAnB97B,KAAkCwgC,YAC1BxgC,KAARowD,iBAAAxjD,KAAAskD,qLAoBA,IAAAlxD,KAAAgzD,iBAAA,KAAA9pC,OAAA,8DAEAlpB,MAAAgzD,iBAAA3uC,EACArkB,KAAAmlE,mBACQnlE,KAARgzD,iBAAAtC,aAAA7vD,UAAA,SAAAa,GAAA,MAAA7B,GAAA2gC,UAAA9+B,mEAQA,IAAA1B,KAAYgzD,iBACZ,KAAA9pC,OAAA,+DAEMlpB,MAANwQ,YACAxQ,KAAAslE,0BAAAtlE,KAAAwQ,UAAA0zB,eAEAlkC,KAAAulE,QAAAvlE,KAAAwlE,gBAAAxlE,KAAAylE,eACAzlE,KAAAykC,SAAA,EAEIzkC,KAAKkzD,aAATnxD,gDAMA,IAAA/B,KAAAykC,QAAA,CAEMzkC,KAANolE,WAAAplE,KAAAolE,UAAAxjD,eACA5hB,KAAAolE,UAAApjD,SAEMhiB,KAAK0lE,aACX1lE,KAAA0lE,WAAA9hC,QACQ5jC,KAAK0lE,WAAa,MAEpB1lE,KAAK2lE,iBAAX3lE,KAAA2lE,gBAAA1gB,YACAjlD,KAAA2lE,gBAAA3jD,QAEA,IAAA4jD,GAAA,oCAMU/lE,EAAKszD,aAAfpxD,OACQlC,EAAKylE,0BAAb,MAGAtlE,MAAAslE,2BACA,kBAAAtlE,MAAAslE,0BAAA7iE,6DAWAmjE,sIAOQxlD,iBAAkBpgB,KAA1BwgB,kBACMsI,WAAN,0BAEA9oB,KAAA0lE,WAAkBG,cAAlBhlE,UAAA,WAAA,MAAAhB,GAAA+jC,UACA5jC,KAAA0lE,WAAAI,kBAAAlT,WAAA5yD,KAEIA,KAAK+lE,0JAQT/lE,KAAAolE,WAEAplE,KAAAgmE,eAGAhmE,KAAAolE,UAAAxjD,gBACA5hB,KAAAqlE,mBAAArlE,KAAAolE,UAAAvjD,OAAA7hB,KAAA2lE,iBAEQ3lE,KAAKqlE,mBAAb/5C,SAAAsnC,WAAA5yD,KACMA,KAAK+lE,YAEL/lE,KAAK0L,QAAX4uC,SAAAn0B,eAAA/Z,KAAAyI,EAAAA,KAAA,IAAAhU,UAAA,uKAWAqyB,aAAA,EACMqjB,cAAN,mCACMx5B,UAAW/c,KAAjBiD,KACMgoC,eAANjrC,KAAAsoC,kBACMxf,WAAN,wBAEA9oB,MAAAolE,UAAAplE,KAAA2pB,SAAAsD,OAAwCX,GACxC5rB,EAAAA,MAAAV,KAAAolE,UAAArgC,gBAAA/kC,KAAAolE,UAAAn5C,cAAAjsB,KAAAolE,UAAAa,gBAAA75D,KAAA4E,EAAAA,OAAA,SAAAlH,GAIA,MACWA,GADXwZ,UAAA6mB,EAAAA,iEAKAtpC,UAAA,WAAiC,MAAjChB,GAAA+jC,yKAQA4G,sBAAA,2BACOC,wBAAP,GACOC,mBAAP,GACOw7B,UAAP,GACO56B,gBAEPK,QAAA,QACAC,QAAA,SACUI,SAAV,QACUC,SAAV,QAGAN,QAAA,QACAC,QAAA,MACUI,SAAV,QACUC,SAAV,WAGAN,QAAA,MACAC,QAAA,SACUI,SAAV,MACUC,SAAV,QAGAN,QAAA,MACAC,QAAA,MACUI,SAAV,MACUC,SAAV,sNAiBAjsC,KAAAqlE,mBAAA/5C,SAAAiyB,MAAAA,GAEMv9C,KAAK0lE,aACX1lE,KAAA0lE,WAAAI,kBAAAvoB,MAAAA,IAGAoW,EAAAttD,2EA/WA8E,SAAA,gBACEvF,gBAAiBC,EAAAA,wBAAnBC,OACEL,cAAFC,EAAAA,kBAAAC,SAIAguD,EAAAv6C,eAAiB,WAAjB,QACAlU,KAAAihE,gEA5FAjhE,SAAQ2J,GAARxI,aAAAnB,KAAA4J,EAAAA,OAAA1J,MAAAw/D,QA5BA1/D,KAAEotD,GAAFjsD,aAAAnB,KAAAoB,EAAAA,aAmBApB,KAAEkB,EAAAA,eAAFC,aAAAnB,KAAAoB,EAAAA,aAIApB,SAAE2J,GAAFxI,aAAAnB,KAAAoB,EAAAA,WAAApB,KAAA4J,EAAAA,OAAA1J,MAAAuM,EAAAA,eAIAgiD,EAAAptD,gBA/BA6/D,0BAAAlhE,KAAAuB,EAAAA,QA0QAo9D,UAAA3+D,KAAAuB,EAAAA,0DA3IA8+D,UAAArgE,KAAAuB,EAAAA,QAGArE,WAAA8C,KAAAuB,EAAAA,QAYAy5D,eAAAh7D,KAAAyB,EAAAA,SAGAw5D,gBAAAj7D,KAAAyB,EAAAA,SAcAmiB,aAAA5jB,KAAAuB,EAAAA,QAQAysD,eAAAhuD,KAAAyB,EAAAA,OAAAvB,MAAA,YAmBA+tD,eAAAjuD,KAAGyB,EAAAA,OAAHvB,MAAA,YAMAm+B,SAAAr+B,KAAAuB,EAAAA,SAMAktD,KnBtKa9B,IACXj/C,QAASkiB,EAAAA,kBACTjiB,YAAaqP,EAAAA,WAAW,WAAM,MAAA8tC,MAC9Bh7B,OAAO,GAII88B,IACXl/C,QAASyzD,EAAAA,cACTxzD,YAAaqP,EAAAA,WAAW,WAAM,MAAA8tC,MAC9Bh7B,OAAO,GASTu7B,GAAA,WAIE,QAAFA,GAEW+V,EAEAC,GAFAvmE,KAAXsmE,OAAWA,EAEAtmE,KAAXumE,cAAWA,EACPvmE,KAAK0B,MAAQ1B,KAAKsmE,OAAO5kE,MApE7B,MAAA6uD,oBA4OE,QAAFP,GACctrD,EACWmrD,EAC2BuB,EAC1BJ,GAJxB,GAAFnxD,GAAAG,IAKI,IAJUA,KAAd0E,YAAcA,EACW1E,KAAzB6vD,aAAyBA,EAC2B7vD,KAApDoxD,aAAoDA,EAC1BpxD,KAA1BgxD,WAA0BA,EA/D1BhxD,KAAAwwD,WAAM,GAAIzoD,GAAAA,aAIV/H,KAAAswD,UAAM,GAAIvoD,GAAAA,aAGV/H,KAAA0wD,aAAiB,GAAI3oD,GAAAA,aAGrB/H,KAAAiwD,gBAAoB,GAAIloD,GAAAA,aAExB/H,KAAAw5C,WAAe,aAEfx5C,KAAAqwD,aAA+C,aAE/CrwD,KAAA+vD,mBAA+B,aAE/B/vD,KAAAmwD,wBAAoC3oD,EAAAA,aAAaC,MAEjDzH,KAAAywD,oBAAgCjpD,EAAAA,aAAaC,MAG7CzH,KAAAwmE,gBAAyC,WACrC,MAAO3mE,GAAKwxD,gBACR,MAAQoV,oBAAuBC,KAAQ7mE,EAAK6E,YAAY9B,cAAclB,SAI9E1B,KAAA2mE,cAAuC,SAAC5uD,GACpC,GAAM6uD,GAAe/mE,EAAK+vD,oBAAoB/vD,EAAKgwD,aAAaC,YAAY/3C,EAAQrW,OACpF,QAAS7B,EAAK8D,MAAQijE,GAClB/mE,EAAKgwD,aAAakP,YAAYl/D,EAAK8D,IAAKijE,IAAiB,EACzD,MAAQC,kBAAqBljE,IAAO9D,EAAK8D,IAAKmjE,OAAUF,KAIhE5mE,KAAA+mE,cAAuC,SAAChvD,GACpC,GAAM6uD,GAAe/mE,EAAK+vD,oBAAoB/vD,EAAKgwD,aAAaC,YAAY/3C,EAAQrW,OACpF,QAAS7B,EAAK6D,MAAQkjE,GAClB/mE,EAAKgwD,aAAakP,YAAYl/D,EAAK6D,IAAKkjE,IAAiB,EACzD,MAAQI,kBAAqBtjE,IAAO7D,EAAK6D,IAAKojE,OAAUF,KAIhE5mE,KAAAinE,iBAA0C,SAAClvD,GACvC,GAAM6uD,GAAe/mE,EAAK+vD,oBAAoB/vD,EAAKgwD,aAAaC,YAAY/3C,EAAQrW,OACpF,OAAQ7B,GAAKqnE,aAAgBN,IAAgB/mE,EAAKqnE,YAAYN,IAClDnU,qBAAuB,GAA/B,MAKRzyD,KAAA6wD,WAAMsW,EAAAA,WAAWC,SACNpnE,KAAKwmE,gBAAiBxmE,KAAK2mE,cAAe3mE,KAAK+mE,cAAe/mE,KAAKinE,mBAG9EjnE,KAAAqxD,iBAA4B,GAOnBrxD,KAAK6vD,aACR,KAAMuQ,GAA2B,cAEnC,KAAKpgE,KAAKoxD,aACR,KAAMgP,GAA2B,mBAInCpgE,MAAKywD,oBAAsBZ,EAAawX,cAAcxmE,UAAU,WAC9DhB,EAAK6B,MAAQ7B,EAAK6B,QA1PxB,MAkGAF,QAAAC,eAAMuuD,EAANjvD,UAAA,qBAAA,SAAoBW,GAChB1B,KAAKsnE,mBAAmB5lE,oCAIlBsuD,EAAVjvD,UAAAumE,mBAAA,SAA6B5lE,GACrBA,IACF1B,KAAKkwD,YAAcxuD,EACnB1B,KAAKkwD,YAAYqX,eAAevnE,QAMtCwB,OAAAC,eAAMuuD,EAANjvD,UAAA,2BAAA,SAA0BW,GACtB1B,KAAKknE,YAAcxlE,EACnB1B,KAAK+vD,sDAMTvuD,OAAAC,eAAMuuD,EAANjvD,UAAA,aAAA,WAA0B,MAAOf,MAAK45B,YACpC,SAAUl4B,GACRA,EAAQ1B,KAAK6vD,aAAaC,YAAYpuD,GACtC1B,KAAKqxD,iBAAmB3vD,GAAS1B,KAAK6vD,aAAayB,QAAQ5vD,GAC3DA,EAAQ1B,KAAK4vD,oBAAoBluD,EACjC,IAAM8lE,GAAUxnE,KAAK0B,KACrB1B,MAAK45B,OAASl4B,EACd1B,KAAKyxD,aAAa/vD,GAEb1B,KAAK6vD,aAAa0B,SAASiW,EAAS9lE,IACvC1B,KAAK0wD,aAAa3uD,KAAKL,oCAO7BF,OAAAC,eAAMuuD,EAANjvD,UAAA,WAAA,WAAwB,MAAOf,MAAKw5B;sBAClC,SAAQ93B,GACN1B,KAAKw5B,KAAOx5B,KAAK4vD,oBAAoB5vD,KAAK6vD,aAAaC,YAAYpuD,IACnE1B,KAAK+vD,sDAMTvuD,OAAAC,eAAMuuD,EAANjvD,UAAA,WAAA,WAAwB,MAAOf,MAAKu5B,UAClC,SAAQ73B,GACN1B,KAAKu5B,KAAOv5B,KAAK4vD,oBAAoB5vD,KAAK6vD,aAAaC,YAAYpuD,IACnE1B,KAAK+vD,sDAMTvuD,OAAAC,eAAMuuD,EAANjvD,UAAA,gBAAA,WAA4B,QAASf,KAAK2gC,eACxC,SAAaj/B,GACX,GAAMo/B,GAAWz4B,EAAAA,sBAAsB3G,GACjCqK,EAAU/L,KAAK0E,YAAY9B,aAE7B5C,MAAK2gC,YAAcG,IACrB9gC,KAAK2gC,UAAYG,EACjB9gC,KAAKiwD,gBAAgBluD,KAAK++B,IAIxBA,GAAY/0B,EAAQ6uB,MAItB7uB,EAAQ6uB,wCAoFZo1B,EAAFjvD,UAAAyI,mBAAE,WAAA,GAAF3J,GAAAG,IACQA,MAAKkwD,cACPlwD,KAAKmwD,wBAA0BnwD,KAAKkwD,YAAYE,iBAAiBvvD,UAAU,SAACgW,GAC1EhX,EAAK6B,MAAQmV,EACbhX,EAAKwwD,aAAax5C,GAClBhX,EAAK25C,aACL35C,EAAKywD,UAAUvuD,KAAK,GAAIwuD,IAAwB1wD,EAAMA,EAAK6E,YAAY9B,gBACvE/C,EAAK2wD,WAAWzuD,KAAK,GAAIwuD,IAAwB1wD,EAAMA,EAAK6E,YAAY9B,oBAK9EotD,EAAFjvD,UAAAC,YAAE,WACEhB,KAAKmwD,wBAAwBlvD,cAC7BjB,KAAKywD,oBAAoBxvD,cACzBjB,KAAK0wD,aAAa7jD,WAClB7M,KAAKiwD,gBAAgBpjD,YAIvBmjD,EAAFjvD,UAAA4vD,0BAAE,SAA0B95B,GACxB72B,KAAK+vD,mBAAqBl5B,GAI5Bm5B,EAAFjvD,UAAA6vD,SAAE,SAASzJ,GACP,MAAOnnD,MAAK6wD,WAAa7wD,KAAK6wD,WAAW1J,GAAK,MAOhD6I,EAAFjvD,UAAA+vD,6BAAE,WACE,MAAO9wD,MAAK+wD,6BAOdf,EAAFjvD,UAAAgwD,0BAAE,WACE,MAAO/wD,MAAKgxD,WAAahxD,KAAKgxD,WAAWD,4BAA8B/wD,KAAK0E,aAI9EsrD,EAAFjvD,UAAA41B,WAAE,SAAWj1B,GACT1B,KAAK0B,MAAQA,GAIfsuD,EAAFjvD,UAAA61B,iBAAE,SAAiBC,GACf72B,KAAKqwD,aAAex5B,GAItBm5B,EAAFjvD,UAAA+1B,kBAAE,SAAkBD,GAChB72B,KAAKw5C,WAAa3iB,GAIpBm5B,EAAFjvD,UAAAg2B,iBAAE,SAAiBC,GACfh3B,KAAKoC,SAAW40B,GAGlBg5B,EAAFjvD,UAAA67B,WAAE,SAAW9yB,GACLA,EAAM6yC,QAAU7yC,EAAMwZ,UAAY6Z,EAAAA,aACpCn9B,KAAKkwD,YAAYzlC,OACjB3gB,EAAMqE,mBAIV6hD,EAAFjvD,UAAAkwD,SAAE,SAASvvD,GACP,GAAIwvD,GAAOlxD,KAAK6vD,aAAasB,MAAMzvD,EAAO1B,KAAKoxD,aAAaD,MAAMb,UAClEtwD,MAAKqxD,iBAAmBH,GAAQlxD,KAAK6vD,aAAayB,QAAQJ,GAC1DA,EAAOlxD,KAAK4vD,oBAAoBsB,GAE3BlxD,KAAK6vD,aAAa0B,SAASL,EAAMlxD,KAAK45B,UACzC55B,KAAK45B,OAASs3B,EACdlxD,KAAKqwD,aAAaa,GAClBlxD,KAAK0wD,aAAa3uD,KAAKmvD,GACvBlxD,KAAKswD,UAAUvuD,KAAK,GAAIwuD,IAAwBvwD,KAAMA,KAAK0E,YAAY9B,kBAI3EotD,EAAFjvD,UAAAw4C,UAAE,WACEv5C,KAAKwwD,WAAWzuD,KAAK,GAAIwuD,IAAwBvwD,KAAMA,KAAK0E,YAAY9B,iBAI1EotD,EAAFjvD,UAAAywD,iBAAE,WACE,MAAOxxD,MAAKgxD,WAAahxD,KAAKgxD,WAAWzT,UAAQ1uC,IAInDmhD,EAAFjvD,UAAA47B,QAAE,WAEM38B,KAAK0B,OACP1B,KAAKyxD,aAAazxD,KAAK0B,OAGzB1B,KAAKw5C,cAICwW,EAAVjvD,UAAA0wD,aAAA,SAAuB/vD,GACnB1B,KAAK0E,YAAY9B,cAAclB,MAC3BA,EAAQ1B,KAAK6vD,aAAa6B,OAAOhwD,EAAO1B,KAAKoxD,aAAaO,QAAQrB,WAAa,IAO7EN,EAAVjvD,UAAA6uD,oBAAA,SAA8B5wC,GAC1B,MAAQhf,MAAK6vD,aAAa+B,eAAe5yC,IAAQhf,KAAK6vD,aAAayB,QAAQtyC,GAAQA,EAAM,qBAvS7F9Z,KAACmJ,EAAAA,UAADjJ,OACEC,SAAU,uBACVsN,WACEk/C,GACAC,IACCl/C,QAASm/C,GAA0Bl/C,YAAam9C,IAEnDjqD,MACEisD,uBAAwB,OACxBrP,mBAAoB,kDACpBsP,aAAc,2CACdC,aAAc,2CACdC,aAAc,WACdC,UAAW,gCACXC,WAAY,cACZj0B,SAAU,YACVC,YAAa,sBAEflzB,SAAU,6DA/EZjG,KAAE4N,EAAAA,aAmBF5N,KAAQotD,GAARjsD,aAAAnB,KA8MOoB,EAAAA,aACPpB,SAAA2J,GAAAxI,aAAAnB,KAAOoB,EAAAA,WAAPpB,KAAmB4J,EAAAA,OAAnB1J,MAA0BmtD,QA9M1BrtD,KAAQo+C,GAARj9C,aAAAnB,KA+MOoB,EAAAA,gCA/IPksD,gBAAAttD,KAAGuB,EAAAA,QAcHgsD,sBAAAvtD,KAAGuB,EAAAA,QAQH/E,QAAAwD,KAAGuB,EAAAA,QAiBH9C,MAAAuB,KAAGuB,EAAAA,QASH/C,MAAAwB,KAAGuB,EAAAA,QASHrE,WAAA8C,KAAGuB,EAAAA,QAsBH+pD,aAAAtrD,KAAGyB,EAAAA,SAIH2pD,YAAAprD,KAAGyB,EAAAA,UApLHqpD,iCCAA,sBA4BA9qD,KAACmJ,EAAAA,UAADjJ,OACEC,SAAU,gCA7BZqtD,mBAoEE,QAAFC,GAAqBriC,EAAkCnvB,GAAlCnB,KAArBswB,MAAqBA,EAAkCtwB,KAAvDmB,mBAAuDA,EAlBvDnB,KAAA6tB,cAA0BrmB,EAAAA,aAAaC,MAgBvC,MATAjG,QAAAC,eAAMkxD,EAAN5xD,UAAA,2BACI,WAA0B8N,KAAnB7O,KAAK2gC,UAA0B3gC,KAAK4yD,WAAWxwD,WAAapC,KAAK2gC,eAE1E,SAAaj/B,GACX1B,KAAK2gC,UAAYt4B,EAAAA,sBAAsB3G,oCASzCixD,EAAF5xD,UAAA4f,YAAE,SAAYjX,GACNA,EAAR,YACM1J,KAAK6yD,sBAITF,EAAF5xD,UAAAC,YAAE,WACEhB,KAAK6tB,cAAc5sB,eAGrB0xD,EAAF5xD,UAAAyI,mBAAE,WACExJ,KAAK6yD,sBAGPF,EAAF5xD,UAAAglB,MAAE,SAAMjc,GACA9J,KAAK4yD,aAAe5yD,KAAKoC,WAC3BpC,KAAK4yD,WAAWnoC,OAChB3gB,EAAM0sB,oBAIFm8B,EAAV5xD,UAAA8xD,yCACUC,EAAqB9yD,KAAK4yD,WAAa5yD,KAAK4yD,WAAW3C,gBAAkB9jD,EAAAA,KACzE4mD,EAAgB/yD,KAAK4yD,YAAc5yD,KAAK4yD,WAAWI,iBACrDhzD,KAAK4yD,WAAWI,iBAAiB/C,gBAAkB9jD,EAAAA,KACjD8mD,EAAoBjzD,KAAK4yD,WAC3BlyD,EAAAA,MAAMV,KAAK4yD,WAAWM,aAAclzD,KAAK4yD,WAAWO,cACpDhnD,EAAAA,IAEJnM,MAAK6tB,cAAc5sB,cACnBjB,KAAK6tB,cAAgBntB,EAAAA,MACnBV,KAAKswB,MAAM5mB,QACXopD,EACAC,EACAE,GACApyD,UAAU,WAAM,MAAAhB,GAAKsB,mBAAmBC,iCAvE9C8D,KAACC,EAAAA,UAADC,OAAAC,SAAA,wBACEC,SAAU,4hBACVC,QAAF,quBACEQ,MACFC,MAAA,wBACMotD,uCAAN,kCACIC,qBAAJ,8CACIC,mBAAJ,6CAEAnoD,SAAA,sBACA1F,cAAAC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,qFAjCA6sD,EAAApsD,mFAyCAgtD,cAAAruD,KAAA6tB,EAAAA,aAAA3tB,MAAAstD,OAaAC,iCClEA,sBA8BAztD,KAAC+J,EAAAA,SAAD7J,OACE8J,SACEC,EAAAA,aACAwK,GACA65C,GACAnqC,EAAAA,cACA2jB,EAAAA,WACA39B,EAAAA,cAEFG,SACEikD,GACAC,GACAC,GACAC,GACA5D,GACA2C,GACAD,GACAmB,GACAC,GACAC,GACAC,IAEFpkD,cACE6jD,GACAC,GACAC,GACAC,GACA5D,GACA2C,GACAD,GACAmB,GACAC,GACAC,GACAC,IAEFrhD,WACEshD,GACAC,IAEF5qC,iBACEsqC,GACAI,QAvEJG,gCCgCAn0D,KAAA65B,WAA+B,EAM/B75B,KAAAo0D,QAA4B,EAH5B,MALA5yD,QAAAC,eAAM4yD,EAANtzD,UAAA,gBAAA,WAA4B,MAAOf,MAAK65B,eACtC,SAAan4B,GAAkB1B,KAAK65B,UAAYxxB,EAAAA,sBAAsB3G,oCAKxEF,OAAAC,eAAM4yD,EAANtzD,UAAA,aAAA,WAAyB,MAAOf,MAAKo0D,YACnC,SAAU1yD,GAAkB1B,KAAKo0D,OAAS/rD,EAAAA,sBAAsB3G,mDA1BlEwD,KAACC,EAAAA,UAADC,OAAAC,SAAA,cACEU,MACFuM,KAAA,YACMwsB,0BAAN,uCACIw1B,+BAAJ,WACIC,iCAAJ,YACIC,4BAAJ,QACIxuD,MAAJ,eAEAV,SAAA,GACAC,QAAA,+SACEE,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,+EAYAuuD,iCCnCA,sBAcAnvD,KAAC+J,EAAAA,SAAD7J,OACE8J,SAAUE,GAAiBD,EAAAA,cAC3BK,SAAU6kD,GAAYjlD,IACtBQ,cAAeykD,QAjBjB9P,qFC8BA1kD,GAAA40D,aAAiC,EAUjC50D,EAAA60D,YAAkD,YAxClD,MAyBkCtsD,GAAlCusD,EAAAxtD,GAGA3F,OAAAC,eAAMkzD,EAAN5zD,UAAA,kBAAA,WAA8B,MAAOf,MAAKy0D,iBACxC,SAAe3nD,GAAiB9M,KAAKy0D,YAAcpsD,EAAAA,sBAAsByE,mDAX3E5H,KAACmJ,EAAAA,UAADjJ,OACEC,SAAU,gBACV8F,SAAU,eACVpF,MACEC,MAAO,uCAKX4uD,aAAA1vD,KAAGuB,EAAAA,QAaHiuD,cAAAxvD,KAAGuB,EAAAA,SAxCHkuD,GAyBkCE,EAAAA,c5FFrBC,IAMXC,gBAAiB99C,EAAAA,QAAQ,mBACvBC,EAAAA,MAAM,YAAa7T,EAAAA,OAAOC,UAAW,kBACrC4T,EAAAA,MAAM,WAAY7T,EAAAA,OAAOC,UAAW,oBACpC8T,EAAAA,WAAW,yBAA0BC,EAAAA,QAZO,wCAgB9C29C,sBAAuB/9C,EAAAA,QAAQ,mBAC7BC,EAAAA,MAAM,YAAa7T,EAAAA,OACjBsH,OAAQ,yBAERsqD,QAASC,gBAAiB,UAE5Bh+C,EAAAA,MAAM,WAAY7T,EAAAA,OAChBsH,OAAQ,wBAERsqD,QAASE,eAAgB,UAE3B/9C,EAAAA,WAAW,yBAA0B4gC,EAAAA,OACnCroB,EAAAA,MAAM,mBAAoBC,EAAAA,gBAAiB9Y,UAAU,IACrDO,EAAAA,QA7B0C,0CAkC9C+9C,cAAen+C,EAAAA,QAAQ,iBACrBC,EAAAA,MAAM,YAAa7T,EAAAA,OAAOsH,OAAQ,MAAOwM,WAAY,YACrDD,EAAAA,MAAM,WAAY7T,EAAAA,OAAOsH,OAAQ,IAAKwM,WAAY,aAClDC,EAAAA,WAAW,yBAA0BC,EAAAA,QArCO,uD6FF9C,QAAFg+C,GAAqB5Q,GAAAzkD,KAArBykD,UAAqBA,EAlBrB,sBAcAv/C,KAACmJ,EAAAA,UAADjJ,OACEC,SAAU,gFAPZH,KAAmBuS,EAAAA,eARnB49C,KCwCIC,GAAW,iBAuDb,QAAFC,GAAsCC,EACxBr0D,EACAs0D,EACQj1C,GAHpB,GAAF3gB,GAIIsH,EAJJC,KAAApH,KAIUw1D,EAAWr0D,EAAoBs0D,IAJzCz1D,WAGsBH,GAAtB2gB,kBAAsBA,EApBtB3gB,EAAA40D,aAAwB,EAGxB50D,EAAA61D,cAA2B,GAAI7pD,GAAAA,QAY/BhM,EAAA81D,UAAc,8BAA8BL,KAOxCz1D,EAAK21D,UAAYA,IAbrB,MAjBuCptD,GAAvCmtD,EAAApuD,GAIA3F,OAAAC,eAAM8zD,EAANx0D,UAAA,kBAAA,WAA8B,MAAOf,MAAKy0D,iBACxC,SAAe/yD,GACb1B,KAAKy0D,YAAcpsD,EAAAA,sBAAsB3G,oCA4B3C6zD,EAAFx0D,UAAA60D,eAAE,WACE,MAAI51D,MAAKw1D,UACAx1D,KAAKw1D,UAAUZ,WAEjB50D,KAAK40D,YAIdW,EAAFx0D,UAAA80D,YAAE,WACE,QAAI71D,KAAKw1D,WAC4E,aAA3Ex1D,KAAK81D,SAAW91D,KAAKw1D,UAAUd,YAAc10D,KAAK+1D,sBAM9DR,EAAFx0D,UAAAg1D,kBAAE,WACE,MAAO/1D,MAAK81D,SAAW,WAAa,aAGtCP,EAAFx0D,UAAAyI,mBAAE,WAAA,GAAF3J,GAAAG,IACQA,MAAKg2D,cAEPh2D,KAAKujC,OAAOn3B,KACVoV,EAAAA,UAAS,MACTxQ,EAAAA,OAAO,WAAM,MAAAnR,GAAKi2D,WAAaj2D,EAAKkqC,UACpCl1B,EAAAA,KAAK,IACLhU,UAAU,WACVhB,EAAKkqC,QAAU,GAAIjpB,GAAAA,eAAejhB,EAAKm2D,aAAavR,UAAW5kD,EAAK2gB,sBAK1E+0C,EAAFx0D,UAAA4f,YAAE,SAAYjX,GACV1J,KAAK01D,cAAc9oD,KAAKlD,IAG1B6rD,EAAFx0D,UAAAC,YAAE,WACEmG,EAAJpG,UAAUC,YAAVoG,KAAApH,MACIA,KAAK01D,cAAc7oD,YAGrB0oD,EAAFx0D,UAAAk1D,eAAE,SAAensD,GACb,GAAMtB,GAAYsB,EAAMiC,QAAQvD,UAEzB0tD,EAAXpsD,EAAAosD,UAAsBzzC,EAAtB3Y,EAAA2Y,OAMsB,UAAdyzC,GAAoC,aAAZzzC,EAC1Bja,EAAUG,IARK,gBASQ,UAAdutD,GAAqC,cAAZzzC,GAClCja,EAAUC,OAVK,gCApGrBvD,KAACC,EAAAA,UAADC,OAAAG,QAAA,mpCACEF,SAAU,sBACV8F,SAAF,oBACE7F,SAAU,meACVG,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,OACEN,QAAF,WAAA,YACE2wD,SAAF,SAAA,SAAA,kBACEj9C,YAAF47C,GAAAM,eACEziD,oCAKoC9D,KAAtC9I,MACAC,MAAA,sBACMowD,uBAAN,WACIC,sCAAJ,+IAlCAnxD,KAAQs9B,EAAAA,4BAfRt9B,KAAE6M,EAAAA,oBAUFwjD,EAAAhvD,4FA6DAgvD,uBAvFAe,GAAA,yBAwKA,wEALAvwD,MACAC,MAAA,sBAIAswD,mBCtGE,QAAFC,GACmBlZ,EACPnrB,EACAD,EACA9wB,GAJV,GAAFtB,GAAAG,IACmBA,MAAnBq9C,MAAmBA,EACPr9C,KAAZkyB,SAAYA,EACAlyB,KAAZiyB,cAAYA,EACAjyB,KAAZmB,mBAAYA,EANZnB,KAAAw2D,0BAAsChvD,EAAAA,aAAaC,MAU/CzH,KAAKw2D,0BAA4B91D,EAAAA,MAC/B28C,EAAM9Z,OACN8Z,EAAM/3B,OACN+3B,EAAMqY,cAActpD,KAAK4E,EAAAA,OAAO,SAAAtH,GAAW,SAAGA,EAHpD,aAG0EA,EAH1E,cAKK7I,UAAU,WAAM,MAAAhB,GAAKsB,mBAAmBC,iBAEzC6wB,EAAcE,QAAQD,EAAStvB,eAOnC,MAGE2zD,GAAFx1D,UAAA01D,QAAE,WACEz2D,KAAKq9C,MAAMnmB,UAIbq/B,EAAFx1D,UAAA21D,YAAE,WACE,MAAO12D,MAAKq9C,MAAMyY,UAIpBS,EAAFx1D,UAAAg1D,kBAAE,WACE,MAAO/1D,MAAKq9C,MAAM0Y,qBAIpBQ,EAAFx1D,UAAA41D,YAAE,WACE,MAAO32D,MAAKq9C,MAAMhvB,IAIpBkoC,EAAFx1D,UAAA61D,YAAE,WACE,OAAQ52D,KAAKq9C,MAAMuX,aAAe50D,KAAKq9C,MAAMj7C,UAI/Cm0D,EAAFx1D,UAAA81D,SAAE,SAAS/sD,GACP,OAAQA,EAAMwZ,SAEZ,IAAKM,GAAAA,MACL,IAAKD,GAAAA,MACH7Z,EAAMqE,iBACNnO,KAAKy2D,SACL,MACF,SACE,SAINF,EAAFx1D,UAAAC,YAAE,WACEhB,KAAKw2D,0BAA0Bv1D,cAC/BjB,KAAKiyB,cAAcI,eAAeryB,KAAKkyB,SAAStvB,+BAnGpDsC,KAACC,EAAAA,UAADC,OAAAC,SAAA,6BACEE,QAAF,u3BACED,SAAU,mRACVG,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,OACEoT,YACF47C,GAAAC,gBACAD,GAAAE,uBAEAjvD,MACAC,MAAA,6BACMsM,KAAN,SACIiwB,YAAJ,kBACI+f,kBAAJ,0BACIwU,uBAAJ,gBACItkD,uBAAJ,gBACIjE,uBAAwB,iBACxB6nD,uBAAwB,gBACxBznD,UAAJ,YACI0vB,YAAJ,mBACI04B,qBAAsB,uQA5B1B7xD,KAAQ4zB,EAAAA,eATR5zB,KAAE+H,EAAAA,qBAHFspD,EAAAhwD,kFA4EAgwD,iCAyDA,+EALAxwD,MACAC,MAAA,8CAIAgxD,iCAaA,yEALAjxD,MACAC,MAAA,wCAIAixD,iCC9JA,sBAsBA/xD,KAAC+J,EAAAA,SAAD7J,OACE8J,SAAUC,EAAAA,aAAc+nD,EAAAA,mBAAoB7nD,EAAAA,cAC5CG,SACEmlD,GACAY,GACAe,GACAC,GACAU,GACAD,GACA3B,IAEFzlD,cACE+kD,GACAY,GACAe,GACAC,GACAU,GACAD,GACA3B,QAxCJ8B,mBCsCE,QAAFC,GAAsBllC,GAAAlyB,KAAtBkyB,SAAsBA,EAHtBlyB,KAAAq3D,SAAqB,EACrBr3D,KAAAs3D,SAAqB,EAUrB,MAJA91D,QAAAC,eAAM21D,EAANr2D,UAAA,eAAA,WAA0B,MAAOf,MAAKq3D,cACpC,SAAY31D,GAAiB1B,KAAKq3D,SAAWE,GAAe71D,oCAI9DF,OAAAC,eAAM21D,EAANr2D,UAAA,eAAA,WAA0B,MAAOf,MAAKs3D,cACpC,SAAY51D,GAAiB1B,KAAKs3D,SAAWC,GAAe71D,oCAM5D01D,EAAFr2D,UAAAy2D,UAAE,SAAUC,EAAkB/1D,GAC1B1B,KAAKkyB,SAAStvB,cAAcS,MAAMo0D,GAAY/1D,kBAjClDwD,KAACC,EAAAA,UAADC,OAAAC,SAAA,gBACE8F,SAAU,cACVpF,MACFC,MAAA,iBAEAV,SAAA,gEACAC,QAAA,gvCACEE,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,oEAnBAsxD,EAAE7wD,mEAmCF6wD,KA9CAM,GAAA,8IA6EAA,EAAArxD,aACAnB,KAAAC,EAAAA,UAAAC,OAAAC,SAAA,qPAnBAO,gBAAAC,EAAAA,wBAAAC,OACEL,cAAFC,EAAAA,kBAAAC,SAIA+xD,EAAEt+C,eAAF,WAAA,QACAlU,KAAA4N,EAAAA,8GAqBA,+HAAA6kD,iCAUA,sHAAAC,iCAUA,sHAAAC,KC9EAC,GAAA,WA2BE,QAAFA,GAAcC,EAAoBC,GAAhC,GAAFn4D,GAAAG,IAtBAA,MAAAi4D,YAAwB,EAGxBj4D,KAAAk4D,SAAqB,EAoBjBl4D,KAAKm4D,QAAU,GAAIpvC,OAAMgvC,GACzB/3D,KAAKm4D,QAAQC,KAAK,EAAG,EAAGp4D,KAAKm4D,QAAQ31D,QAErCxC,KAAKggB,UAAYg4C,EAAMhuD,IAAI,SAAAquD,GAAQ,MAAAx4D,GAAKy4D,WAAWD,KA3DvD,MAuCE72D,QAAFC,eAAMq2D,EAAN/2D,UAAA,gBAAE,WAAyB,MAAOf,MAAKk4D,SAAW,mCAMhD12D,OAAFC,eAAMq2D,EAAN/2D,UAAA,eAAE,WACE,GAAIw3D,GAAa90D,KAAKC,IAA1BqG,MAAqBtG,KAAYzD,KAAKm4D,QAGlC,OAAOI,GAAa,EAAIv4D,KAAKw4D,SAAWD,EAAa,EAAIv4D,KAAKw4D,0CAcxDV,EAAV/2D,UAAAu3D,WAAA,SAAqBD,GAEjB,GAAII,GAAgBz4D,KAAK04D,iBAAiBL,EAAKM,QAS/C,OANA34D,MAAK44D,kBAAkBH,EAAeJ,GAItCr4D,KAAKi4D,YAAcQ,EAAgBJ,EAAKM,QAEjC,GAAIE,IAAa74D,KAAKk4D,SAAUO,IAIjCX,EAAV/2D,UAAA23D,iBAAA,SAA2BI,GACvB,GAAIA,EAAW94D,KAAKm4D,QAAQ31D,OAC1B,KAAM0mB,OAAM,oCAAoC4vC,EAAtD,kCACyC94D,KAAKm4D,QAAQ31D,OAAtD,KAII,IAAIi2D,IAAiB,EACjBM,GAAe,CAGnB,IAEM/4D,KAAKi4D,YAAca,EAAW94D,KAAKm4D,QAAQ31D,OAC7CxC,KAAKg5D,YAIPP,EAAgBz4D,KAAKm4D,QAAQr6C,QAAQ,EAAG9d,KAAKi4D,cAGvB,GAAlBQ,GAKJM,EAAc/4D,KAAKi5D,iBAAiBR,GAIpCz4D,KAAKi4D,YAAcQ,EAAgB,GARjCz4D,KAAKg5D,kBAWAD,EAAcN,EAAgBK,EAIvC,OAAOr1D,MAAKC,IAAI+0D,EAAe,IAIzBX,EAAV/2D,UAAAi4D,oBACIh5D,KAAKi4D,YAAc,EACnBj4D,KAAKk4D,UAGL,KAAK,GAAI7tD,GAAI,EAAGA,EAAIrK,KAAKm4D,QAAQ31D,OAAQ6H,IACvCrK,KAAKm4D,QAAQ9tD,GAAK5G,KAAKC,IAAI,EAAG1D,KAAKm4D,QAAQ9tD,GAAK,IAQ5CytD,EAAV/2D,UAAAk4D,iBAAA,SAA2BR,GACvB,IAAK,GAAIpuD,GAAIouD,EAAgB,EAAGpuD,EAAIrK,KAAKm4D,QAAQ31D,OAAQ6H,IACvD,GAAuB,GAAnBrK,KAAKm4D,QAAQ9tD,GACf,MAAOA,EAKX,OAAOrK,MAAKm4D,QAAQ31D,QAIds1D,EAAV/2D,UAAA63D,kBAAA,SAA4B9qC,EAAeuqC,GACvC,IAAK,GAAIhuD,GAAI,EAAGA,EAAIguD,EAAKM,QAAStuD,IAChCrK,KAAKm4D,QAAQrqC,EAAQzjB,GAAKguD,EAAKa,SAnJrCpB,KA4JAe,GAAA,WACE,QAAFA,GAAqBM,EAAoBC,GAApBp5D,KAArBm5D,IAAqBA,EAAoBn5D,KAAzCo5D,IAAyCA,EA7JzC,MAAAP,MCiBAQ,GAAA,wBAEAr5D,KAAAs5D,MAAkB,EAClBt5D,KAAAq3D,SAAqB,EApBrB,MAiCEgC,GAAFt4D,UAAAw4D,KAAE,SAAKC,EAAoBrB,EAA0BsB,EAAc18C,GAC/D/c,KAAK05D,YAAcC,GAAeH,GAClCx5D,KAAKs5D,MAAQnB,EAAQK,SACrBx4D,KAAKq3D,SAAWc,EAAQe,QACxBl5D,KAAK45D,MAAQH,EACbz5D,KAAK+tB,WAAahR,GAUpBs8C,EAAFt4D,UAAA84D,gBAAE,SAAgBC,EAAqBC,GAMnC,MAAO,IAAID,EAAf,QAAkC95D,KAAK05D,YAAvC,MAAwDK,EAAxD,MAUEV,EAAFt4D,UAAAi5D,gBAAE,SAAgBC,EAAkB18B,GAGhC,MAAkB,KAAXA,EAAe,IAAM28B,GAAK,IAAID,EAAzC,MAAuDj6D,KAAK05D,YAA5D,OAA8En8B,IAU5E87B,EAAFt4D,UAAAo5D,YAAE,SAAYF,EAAkBG,GAC5B,MAAO,IAAIH,EAAf,MAA6BG,EAA7B,SAAyCA,EAAO,GAAhD,MAAuDp6D,KAAK05D,YAA5D,KAUEL,EAAFt4D,UAAAs5D,SAAE,SAAShC,EAAmBH,EAAkBoC,GAE5C,GAAIC,GAAsB,IAAMv6D,KAAK45D,MAIjCY,GAA8Bx6D,KAAK45D,MAAQ,GAAK55D,KAAK45D,KAEzD55D,MAAKy6D,aAAapC,EAAMiC,EAAUC,EAAqBC,GACvDx6D,KAAK06D,aAAarC,EAAMH,EAAUqC,EAAqBC,IAIzDnB,EAAFt4D,UAAA05D,aAAE,SAAapC,EAAmBiC,EAAkBK,EACrCC,GAEX,GAAIC,GAAgB76D,KAAK65D,gBAAgBc,EAAcC,GAInDE,EAA2B,QAApB96D,KAAK+tB,WAAuB,QAAU,MACjDsqC,GAAKb,UAAUsD,EAAM96D,KAAKg6D,gBAAgBa,EAAeP,IACzDjC,EAAKb,UAAU,QAAS0C,GAAKl6D,KAAKm6D,YAAYU,EAAexC,EAAKM,YAMpEU,EAAFt4D,UAAAg6D,cAAE,WACE,MAAU/6D,MAAK05D,YAAnB,OAAqC15D,KAAKq3D,SAA1C,SAOEgC,EAAFt4D,UAAAi6D,YAAE,SAAYC,GACV,MAAUj7D,MAAKq3D,SAAnB,MAAiCr3D,KAAKm6D,YAAYc,EAAY,IAgB5D5B,EAAFt4D,UAAAm6D,kBAAE,WAA+C,MAAO,OA7IxD7B,KA6JA8B,GAAA,SAAAh0D,GAEE,QAAFg0D,GAAqBC,GAAnB,GAAFv7D,GAA+CsH,EAA/CC,KAAApH,OAAAA,WAAqBH,GAArBu7D,eAAqBA,IA/JrB,MA6JqChzD,GAArC+yD,EAAAh0D,GAIEg0D,EAAFp6D,UAAAw4D,KAAE,SAAKC,EAAoBrB,EAA0BsB,EAAc18C,GAC/D5V,EAAJpG,UAAUw4D,KAAVnyD,KAAApH,KAAew5D,EAAYrB,EAASsB,EAAM18C,GACtC/c,KAAKo7D,eAAiBzB,GAAe35D,KAAKo7D,iBAG5CD,EAAFp6D,UAAA25D,aAAE,SAAarC,EAAmBH,GAC9BG,EAAKb,UAAU,MAAOx3D,KAAKg6D,gBAAgBh6D,KAAKo7D,eAAgBlD,IAChEG,EAAKb,UAAU,SAAU0C,GAAKl6D,KAAKm6D,YAAYn6D,KAAKo7D,eAAgB/C,EAAKa,YAG3EiC,EAAFp6D,UAAAm6D,kBAAE,WACE,OACE,SAAUhB,GAAQl6D,KAAKg7D,YAAYh7D,KAAKo7D,gBAA9C,MAAmEp7D,KAAK+6D,mBAItEI,EAAFp6D,UAAAs6D,MAAE,SAAMC,GACJA,EAAKC,eAAe,SAAU,OAE9BD,EAAKE,OAAOpyD,QAAQ,SAAAivD,GAClBA,EAAKb,UAAU,MAAO,MACtBa,EAAKb,UAAU,SAAU,SAtL/B2D,GA6JqC9B,IAoCrCoC,GAAA,SAAAt0D,GAME,QAAFs0D,GAAc/5D,GAAZ,GAAF7B,GACIsH,EADJC,KAAApH,OAAAA,WAEIH,GAAK67D,YAAYh6D,KAzMrB,MAiMqC0G,GAArCqzD,EAAAt0D,GAWEs0D,EAAF16D,UAAA25D,aAAE,SAAarC,EAAmBH,EAAkByC,EACrCC,GACX,GAAIe,GAAuBhB,EAAe36D,KAAK47D,cAC/C57D,MAAK67D,eAAiB77D,KAAK65D,gBAAgB8B,EAAsBf,GAKjEvC,EAAKb,UAAU,YAAax3D,KAAKg6D,gBAAgBh6D,KAAK67D,eAAgB3D,IACtEG,EAAKb,UAAU,aAAc0C,GAAKl6D,KAAKm6D,YAAYn6D,KAAK67D,eAAgBxD,EAAKa,YAG/EuC,EAAF16D,UAAAm6D,kBAAE,WACE,OACE,gBAAiBhB,GAAQl6D,KAAKg7D,YAAYh7D,KAAK67D,gBAArD,MAA0E77D,KAAK+6D,mBAI7EU,EAAF16D,UAAAs6D,MAAE,SAAMC,GACJA,EAAKC,eAAe,gBAAiB,OAErCD,EAAKE,OAAOpyD,QAAQ,SAAAivD,GAClBA,EAAKb,UAAU,YAAa,MAC5Ba,EAAKb,UAAU,aAAc,SAIzBiE,EAAV16D,UAAA26D,YAAA,SAAsBh6D,GAClB,GAAMo6D,GAAap6D,EAAM64B,MAAM,IAE/B,IAA0B,IAAtBuhC,EAAWt5D,OACb,KAAM0mB,OAAM,uDAAuDxnB,EAAzE,IAGI1B,MAAK47D,eAAiBnhC,WAAWqhC,EAAW,IAAMrhC,WAAWqhC,EAAW,KA9O5EL,GAiMqCpC,IAwDrC0C,GAAA,SAAA50D,+DAzPA,MAyPmCiB,GAAnC2zD,EAAA50D,GAEE40D,EAAFh7D,UAAA25D,aAAE,SAAarC,EAAmBH,GAE9B,GAAIyD,GAAuB,IAAM37D,KAAKq3D,SAGlC2E,GAAuBh8D,KAAKs5D,MAAQ,GAAKt5D,KAAKs5D,MAG9CuC,EAAiB77D,KAAK65D,gBAAgB8B,EAAsBK,EAEhE3D,GAAKb,UAAU,MAAOx3D,KAAKg6D,gBAAgB6B,EAAgB3D,IAC3DG,EAAKb,UAAU,SAAU0C,GAAKl6D,KAAKm6D,YAAY0B,EAAgBxD,EAAKa,YAGtE6C,EAAFh7D,UAAAs6D,MAAE,SAAMC,GACJA,EAAKE,OAAOpyD,QAAQ,SAAAivD,GAClBA,EAAKb,UAAU,MAAO,MACtBa,EAAKb,UAAU,SAAU,SA5Q/BuE,GAyPmC1C,kBCpLjC,QAAF4C,GAAsB/pC,EAA0CjvB,GAA1CjD,KAAtBkyB,SAAsBA,EAA0ClyB,KAAhEiD,KAAgEA,EARhEjD,KAAAk8D,QAA4B,MAqB5B,MATA16D,QAAAC,eAAMw6D,EAANl7D,UAAA,YAAA,WAAuB,MAAOf,MAAK45D,WACjC,SAASl4D,GAAiB1B,KAAK45D,MAAQrC,GAAe71D,oCAIxDF,OAAAC,eAAMw6D,EAANl7D,UAAA,kBAAA,WAA6B,MAAOf,MAAKk8D,aACvC,SAAex6D,GAAiB1B,KAAKk8D,QAAUC,GAAez6D,oCAIhEF,OAAAC,eAAMw6D,EAANl7D,UAAA,iBAAA,SAAgBW,GACZ,GAAMo/B,GAAWq7B,GAAez6D,EAE5Bo/B,KAAa9gC,KAAKo8D,aACpBp8D,KAAKo8D,WAAat7B,EAClB9gC,KAAKq8D,eAAer8D,KAAKo8D,8CAI7BH,EAAFl7D,UAAA8f,SAAE,WACE7gB,KAAKs8D,aACLt8D,KAAKu8D,mBAOPN,EAAFl7D,UAAA6H,sBAAE,WACE5I,KAAKw8D,gBAICP,EAAVl7D,UAAAu7D,sBACI,IAAKt8D,KAAKy5D,KACR,KAAMvwC,OAAM,qFAMR+yC,EAAVl7D,UAAAw7D,2BACSv8D,KAAKo8D,YACRp8D,KAAKq8D,eAAe,QAKhBJ,EAAVl7D,UAAAs7D,eAAA,SAAyBI,GACjBz8D,KAAK08D,aACP18D,KAAK08D,YAAYrB,MAAMr7D,MAzFR,QA4Fby8D,EACFz8D,KAAK08D,YAAc,GAAIX,IACdU,GAAaA,EAAU3+C,QAAQ,MAAQ,EAChD9d,KAAK08D,YAAc,GAAIjB,IAAgBgB,GAEvCz8D,KAAK08D,YAAc,GAAIvB,IAAgBsB,IAKnCR,EAAVl7D,UAAAy7D,mCACUrE,EAAU,GAAIL,IAAgB93D,KAAKy5D,KAAMz5D,KAAKw7D,QAC9Cz+C,EAAY/c,KAAKiD,KAAOjD,KAAKiD,KAAKvB,MAAQ,KAChD1B,MAAK08D,YAAYnD,KAAKv5D,KAAKw5D,WAAYrB,EAASn4D,KAAKy5D,KAAM18C,GAE3D/c,KAAKw7D,OAAOpyD,QAAQ,SAACivD,EAAMp2D,GACzB,GAAMq7B,GAAM66B,EAAQn4C,UAAU/d,EAC9BpC,GAAK68D,YAAYrC,SAAShC,EAAM/6B,EAAI67B,IAAK77B,EAAI87B,OAG/Cp5D,KAAKu7D,cAAcv7D,KAAK08D,YAAYxB,sBAItCe,EAAFl7D,UAAAw6D,cAAE,SAAcl4D,GACRA,IACFrD,KAAKkyB,SAAStvB,cAAcS,MAAMA,EAAM,IAAMA,EAAM,oBApH1D6B,KAACC,EAAAA,UAADC,OAAAC,SAAA,gBACE8F,SAAU,cACV7F,SAAU,uCACVC,QAAF,gvCACEQ,MACFC,MAAA,iBAEAJ,gBAAAC,EAAAA,wBAAAC,OACAL,cAAAC,EAAAA,kBAAAC,yHArBAs2D,EAAQ11D,kFA4CRizD,aAAAt0D,KAAAuB,EAAAA,QAKAg2D,YAAAv3D,KAAQuB,EAAAA,SAURw1D,iCClFA,sBAiBA/2D,KAAC+J,EAAAA,SAAD7J,OACE8J,SAAU60C,GAAe30C,IACzBI,SACEysD,GACA7E,GACAM,GACA3T,GACA30C,GACAwoD,GACAC,GACAF,IAEF/nD,cACEqsD,GACA7E,GACAM,GACAE,GACAC,GACAF,QAnCJgF,KjBsEAC,GAAA,WAME,QAAFA,GAAc1pD,GAGJ,EAAc21B,SAClB7oC,KAAKwqD,WAAU,EAEfxqD,KAAK8pD,IAAG,EAlFd,MAAA8S,oBA6HE,QAAFtS,GACwB0B,EACZE,EACsB37C,GAFVvQ,KAAxBgsD,YAAwBA,EACZhsD,KAAZksD,WAAYA,EA1BZlsD,KAAA+sD,gBAA4B,GAAIn/B,KAMhC5tB,KAAAmtD,gBAA4B,GAAIv/B,KAGhC5tB,KAAA68D,kBAA8B,GAAIjvC,KAGlC5tB,KAAAwsD,sBAAkC,GAAI5+B,KAGtC5tB,KAAA88D,uBAAmC,GAAIlvC,KAOvC5tB,KAAA+8D,qBAAiC,iBAM3B/8D,KAAKwQ,UAAYD,EAjIvB,MAyIE+5C,GAAFvpD,UAAAi8D,WAAE,SAAWzS,EAAkBT,GAC3B,MAAO9pD,MAAKi9D,sBAAsB,GAAI1S,EAAUT,IAQlDQ,EAAFvpD,UAAAm8D,kBAAE,SAAkB3S,EAAkB4S,GAClC,MAAOn9D,MAAKo9D,6BAA6B,GAAI7S,EAAU4S,IASzD7S,EAAFvpD,UAAAk8D,sBAAE,SAAsBnQ,EAAmBvC,EAAkBT,GACzD,MAAO9pD,MAAK6sD,kBAAkBC,EAAWvC,EAAU,GAAIqS,IAAc9S,KASvEQ,EAAFvpD,UAAAq8D,6BAAE,SAA6BtQ,EAAmBvC,EAAkB4S,GAChE,GAAME,GAAmBr9D,KAAKksD,WAAWC,SAASC,EAAAA,gBAAgBkR,KAAMH,EAExE,KAAKE,EACH,KAAME,IAAuCJ,EAG/C,IAAM3S,GAAaxqD,KAAK6qD,+BAA+BwS,EACvD,OAAOr9D,MAAK6sD,kBAAkBC,EAAWvC,EAAU,GAAIqS,IAAcpS,KAOvEF,EAAFvpD,UAAAy8D,cAAE,SAAc1T,GACZ,MAAO9pD,MAAKy9D,yBAAyB,GAAI3T,IAO3CQ,EAAFvpD,UAAA28D,qBAAE,SAAqBP,GACnB,MAAOn9D,MAAK29D,gCAAgC,GAAIR,IAQlD7S,EAAFvpD,UAAA08D,yBAAE,SAAyB3Q,EAAmBhD,GAC1C,MAAO9pD,MAAKitD,qBAAqBH,EAAW,GAAI8P,IAAc9S,KAQhEQ,EAAFvpD,UAAA48D,gCAAE,SAAgC7Q,EAAmBqQ,GACjD,GAAME,GAAmBr9D,KAAKksD,WAAWC,SAASC,EAAAA,gBAAgBkR,KAAMH,EAExE,KAAKE,EACH,KAAME,IAAuCJ,EAG/C,IAAM3S,GAAaxqD,KAAK+qD,sBAAsBsS,EAC9C,OAAOr9D,MAAKitD,qBAAqBH,EAAW,GAAI8P,IAAcpS,KAWhEF,EAAFvpD,UAAA68D,uBAAE,SAAuBC,EAAejX,GAEpC,WAFJ,KAAAA,IAAwCA,EAAxCiX,GACI79D,KAAK88D,uBAAuBruC,IAAIovC,EAAOjX,GAChC5mD,MAOTsqD,EAAFvpD,UAAAouD,sBAAE,SAAsB0O,GACpB,MAAO79D,MAAK88D,uBAAuB/uD,IAAI8vD,IAAUA,GASnDvT,EAAFvpD,UAAA+8D,uBAAE,SAAuBlX,GAErB,MADA5mD,MAAK+8D,qBAAuBnW,EACrB5mD,MAOTsqD,EAAFvpD,UAAAquD,uBAAE,WACE,MAAOpvD,MAAK+8D,sBAWdzS,EAAFvpD,UAAAg9D,kBAAE,SAAkBhS,GAAlB,GAAFlsD,GAAAG,KACU8pD,EAAM9pD,KAAKksD,WAAWC,SAASC,EAAAA,gBAAgBC,aAAcN,EAEnE,KAAKjC,EACH,KAAMwC,IAAmCP,EAG3C,IAAMiS,GAAah+D,KAAK68D,kBAAkB9uD,IAAI+7C,EAE9C,OAAIkU,GACK7xD,EAAAA,GAAa8xD,GAASD,IAGxBh+D,KAAK0qD,uBAAuB,GAAIkS,IAAc7Q,IAAU3/C,KAC7D8xD,EAAAA,IAAI,SAAAjT,GAAO,MAAAprD,GAAKg9D,kBAAkBpuC,IAAG,EAAOw8B,KAC5CjhD,EAAAA,IAAI,SAAAihD,GAAO,MAAAgT,IAAShT,OAYxBX,EAAFvpD,UAAAstD,gBAAE,SAAgB32C,EAAco1C,OAAhC,KAAAA,IAAgCA,EAAhC,GAEI,IAAMtvC,GAAMwvC,GAAQF,EAAWp1C,GACzB4S,EAAStqB,KAAK+sD,gBAAgBh/C,IAAIyP,EAExC,IAAI8M,EACF,MAAOtqB,MAAKm+D,kBAAkB7zC,EAIhC,IAAM8/B,GAAiBpqD,KAAKmtD,gBAAgBp/C,IAAI++C,EAEhD,OAAI1C,GACKpqD,KAAKo+D,0BAA0B1mD,EAAM0yC,GAGvCiU,EAAAA,WAAgBhU,GAA4B7sC,KAM7C8sC,EAAVvpD,UAAAo9D,kBAAA,SAA4B7zC,GACxB,MAAIA,GAAOkgC,WAEFr+C,EAAAA,GAAa8xD,GAAS3zC,EAAOkgC,aAG7BxqD,KAAK0qD,uBAAuBpgC,GAAQle,KACzC8xD,EAAAA,IAAI,SAAAjT,GAAO,MAAA3gC,GAAOkgC,WAAaS,IAC/BjhD,EAAAA,IAAI,SAAAihD,GAAO,MAAAgT,IAAShT,OAalBX,EAAVvpD,UAAAq9D,0BAAA,SAAoC1mD,EAAc0yC,cAIxCkU,EAAYt+D,KAAKmqD,+BAA+BzyC,EAAM0yC,EAE5D,IAAIkU,EAIF,MAAOnyD,GAAAA,GAAamyD,EAKtB,IAAMrU,GAAwDG,EAC3Dp5C,OAAO,SAAAutD,GAAiB,OAACA,EAAc/T,aACvCxgD,IAAI,SAAAu0D,GACH,MAAO1+D,GAAKirD,0BAA0ByT,GAAenyD,KACnDoyD,EAAAA,WAAW,SAACzU,GACV,GAAMD,GAAMjqD,EAAKqsD,WAAWC,SAASC,EAAAA,gBAAgBC,aAAckS,EAAczU;iEAKjF,OADA/L,SAAQD,MAAM,yBAAyBgM,EAAnD,YAAkEC,EAAIr/B,SACnDve,EAAAA,GAAa,UAO5B,OAAO69C,GAAAA,SAASC,GAAsB79C,KAAKpC,EAAAA,IAAI,WAC7C,GAAMkgD,GAAYrqD,EAAKsqD,+BAA+BzyC,EAAM0yC,EAE5D,KAAKF,EACH,KAAMG,IAA4B3yC,EAGpC,OAAOwyC,OASHI,EAAVvpD,UAAAopD,+BAAA,SAAyCI,EAAkBH,GAGvD,IAAK,GAAI//C,GAAI+/C,EAAe5nD,OAAS,EAAG6H,GAAK,EAAGA,IAAK,CACnD,GAAMigB,GAAS8/B,EAAe//C,EAC9B,IAAIigB,EAAOkgC,WAAY,CACrB,GAAMN,GAAYlqD,KAAKyqD,uBAAuBngC,EAAOkgC,WAAYD,EACjE,IAAIL,EACF,MAAOA,IAIb,MAAO,OAODI,EAAVvpD,UAAA2pD,uBAAA,SAAiCpgC,aAC7B,OAAOtqB,MAAK2qD,UAAUrgC,EAAOw/B,KACxB19C,KAAKpC,EAAAA,IAAI,SAAA4gD,GAAW,MAAA/qD,GAAKgrD,+BAA+BD,OAOvDN,EAAVvpD,UAAA+pD,0BAAA,SAAoCxgC,aAEhC,OAAIA,GAAOkgC,WACFr+C,EAAAA,GAAame,EAAOkgC,YAGtBxqD,KAAK2qD,UAAUrgC,EAAOw/B,KAAK19C,KAAKpC,EAAAA,IAAI,SAAA4gD,GAOzC,MAJKtgC,GAAOkgC,aACVlgC,EAAOkgC,WAAa3qD,EAAKkrD,sBAAsBH,IAG1CtgC,EAAOkgC,eAOVF,EAAVvpD,UAAA8pD,+BAAA,SAAyCG,GACrC,GAAMC,GAAMjrD,KAAK+qD,sBAAsBC,EAEvC,OADAhrD,MAAKkrD,kBAAkBD,GAChBA,GAQDX,EAAVvpD,UAAA0pD,uBAAA,SAAiCU,EAAqBZ,GAClD,GAAMa,GAAaD,EAAQE,cAAc,IAAMd,EAE/C,KAAKa,EACH,MAAO,KAKT,IAAME,GAAcF,EAAWG,WAAU,EAKzC,IAJAD,EAAYE,gBAAgB,MAIe,QAAvCF,EAAYziB,SAASjrB,cACvB,MAAO5d,MAAKkrD,kBAAiB,EAM/B,IAA2C,WAAvCI,EAAYziB,SAASjrB,cACvB,MAAO5d,MAAKkrD,kBAAkBlrD,KAAKyrD,cAAcH,GAQnD,IAAML,GAAMjrD,KAAK+qD,sBAAsB,cAIvC,OAFAE,GAAIlZ,YAAYuZ,GAETtrD,KAAKkrD,kBAAkBD,IAMxBX,EAAVvpD,UAAAgqD,sBAAA,SAAgCW,GAC5B,GAAMC,GAAM3rD,KAAKwQ,UAAUqhC,cAAc,MACzC8Z,GAAIC,UAAYF,CAChB,IAAMT,GAAMU,EAAIN,cAAc,MAE9B,KAAKJ,EACH,KAAM/hC,OAAM,sBAGd,OAAO+hC,IAMDX,EAAVvpD,UAAA0qD,cAAA,SAAwB1/C,GAGpB,IAAK,GAFDk/C,GAAMjrD,KAAK+qD,sBAAsB,eAE5B1gD,EAAI,EAAGA,EAAI0B,EAAQgF,WAAWvO,OAAQ6H,IACzC0B,EAAQgF,WAAW1G,GAAG8G,WAAanR,KAAKwQ,UAAUq7C,cACpDZ,EAAIlZ,YAAYhmC,EAAQgF,WAAW1G,GAAGkhD,WAAU,GAIpD,OAAON,IAMDX,EAAVvpD,UAAAmqD,kBAAA,SAA4BD,GAMxB,MALAA,GAAIa,aAAa,MAAO,IACxBb,EAAIa,aAAa,SAAU,QAC3Bb,EAAIa,aAAa,QAAS,QAC1Bb,EAAIa,aAAa,sBAAuB,iBACxCb,EAAIa,aAAa,YAAa,SACvBb,GAODX,EAAVvpD,UAAA4pD,UAAA,SAAoBoB,aAChB,KAAK/rD,KAAKgsD,YACR,KAAMC,KAGR,IAAe,MAAXF,EACF,KAAM7iC,OAAM,+BAA+B6iC,EAAjD,KAGI,IAAMjC,GAAM9pD,KAAKksD,WAAWC,SAASC,EAAAA,gBAAgBC,aAAcN,EAEnE,KAAKjC,EACH,KAAMwC,IAAmCP,EAM3C,IAAMQ,GAAkBvsD,KAAKwsD,sBAAsBz+C,IAAI+7C,EAEvD,IAAIyC,EACF,MAAOA,EAKT,IAAME,GAAMzsD,KAAKgsD,YAAYj+C,IAAI+7C,GAAM4C,aAAc,SAAStgD,KAC5DugD,EAAAA,SAAS,WAAM,MAAA9sD,GAAK2sD,sBAAsB79B,OAAOm7B,KACjD8C,EAAAA,QAIF,OADA5sD,MAAKwsD,sBAAsB/9B,IAAIq7B,EAAK2C,GAC7BA,GASDnC,EAAVvpD,UAAA8rD,kBAAA,SAA4BC,EAAmBvC,EAAkBjgC,GAE7D,MADAtqB,MAAK+sD,gBAAgBt+B,IAAIu+B,GAAQF,EAAWvC,GAAWjgC,GAChDtqB,MAQDsqD,EAAVvpD,UAAAksD,qBAAA,SAA+BH,EAAmBxiC,GAC9C,GAAM4iC,GAAkBltD,KAAKmtD,gBAAgBp/C,IAAI++C,EAQjD,OANII,GACFA,EAAgBt4C,KAAK0V,GAErBtqB,KAAKmtD,gBAAgB1+B,IAAIq+B,GAAYxiC,IAGhCtqB,qBA5eXkF,KAACgoB,EAAAA,WAAD9nB,OAAaua,WAAY,+CArFzBza,KAAQkoD,EAAAA,WAAR/mD,aAAAnB,KAqHKoB,EAAAA,aA5GLpB,KAAQmoD,EAAAA,eA8GRnoD,SAAA2J,GAAAxI,aAAAnB,KAAKoB,EAAAA,WAALpB,KAAiB4J,EAAAA,OAAjB1J,MAAwBuM,EAAAA,4LAhIxB24C,KAwlBagD,IAEX16C,QAAS03C,GACTt6B,OACG,GAAI1pB,GAAAA,SAAY,GAAIinB,GAAAA,SAAY+8B,KAChC,GAAIhkD,GAAAA,SAAY8mD,EAAAA,YACjBC,EAAAA,cACC,GAAI/mD,GAAAA,SAAYqL,EAA+B,WAElDse,WAAYs9B,ICtkBdC,GAAA,WACE,QAAFA,GAAqB9oD,GAAA1E,KAArB0E,YAAqBA,EA5BrB,MAAA8oD,MA8BaC,GAAoBzmD,EAAWwmD,mBAkF1C,QAAFE,GACM3oD,EACQ4oD,EACkBC,GAH9B,GAAF/tD,GAIIsH,EAJJC,KAAApH,KAIU+E,IAJV/E,WAEcH,GAAd8tD,cAAcA,EA1Bd9tD,EAAAguD,SAA6B,EAgCpBD,GACH7oD,EAAWnC,cAAckpD,aAAa,cAAe,UAnB3D,MA3B6B1jD,GAA7BslD,EAAAvmD,GAOA3F,OAAAC,eAAMisD,EAAN3sD,UAAA,yBACI,MAAOf,MAAK6tD,aAEd,SAAWC,GACT9tD,KAAK6tD,QAAUxlD,EAAAA,sBAAsBylD,oCASzCtsD,OAAAC,eAAMisD,EAAN3sD,UAAA,eAAA,WAA0B,MAAOf,MAAK+tD,cACpC,SAAYrsD,GACV1B,KAAK+tD,SAAW/tD,KAAKguD,kBAAkBtsD,oCAM3CF,OAAAC,eAAMisD,EAAN3sD,UAAA,gBAAA,WAA2B,MAAOf,MAAKiuD,eACrC,SAAavsD,GACX1B,KAAKiuD,UAAYjuD,KAAKguD,kBAAkBtsD,oCAiClCgsD,EAAV3sD,UAAAmtD,eAAA,SAAyB3D,GACrB,IAAKA,EACH,OAAQ,GAAI,GAEd,IAAM4D,GAAQ5D,EAAShwB,MAAM,IAC7B,QAAQ4zB,EAAM3rD,QACZ,IAAK,GAAG,OAAQ,GAAI2rD,EAAM,GAC1B,KAAK,GAAG,MAAA,EACR,SAAS,KAAMjlC,OAAM,uBAAuBqhC,EAAlD,OAIEmD,EAAF3sD,UAAA4f,YAAE,SAAYjX,GAAZ,GAAF7J,GAAAG,IAEI,IAAI0J,EAAR,QACM,GAAI1J,KAAKouD,QAAS,CAChB,GAAR1vC,GAAA1e,KAAAkuD,eAAAluD,KAAAouD,SAAetB,EAAfpuC,EAAA,GAA0B6rC,EAA1B7rC,EAAA,EAEQ1e,MAAK2tD,cAAcU,gBAAgB9D,EAAUuC,GAAW1gD,KAAKyI,EAAAA,KAAK,IAAIhU,UACpE,SAAAoqD,GAAO,MAAAprD,GAAKyuD,eAAerD,IAC3B,SAAClB,GAAe,MAAAhM,SAAQwQ,IAAI,0BAA0BxE,EAAIr/B,eAG5D1qB,MAAKwuD,kBAILxuD,MAAKyuD,kBACPzuD,KAAK0uD,0BAIThB,EAAF3sD,UAAA8f,SAAE,WAGM7gB,KAAKyuD,kBACPzuD,KAAK0uD,0BAIDhB,EAAV3sD,UAAA0tD,0BACI,OAAQzuD,KAAKouD,SAGPV,EAAV3sD,UAAAutD,eAAA,SAAyBrD,GACrBjrD,KAAKwuD,kBAOL,KAAK,GAFCG,GAAY1D,EAAI2D,iBAAiB,SAE9BvkD,EAAI,EAAGA,EAAIskD,EAAUnsD,OAAQ6H,IACpCskD,EAAUtkD,GAAGiH,aAAe,GAG9BtR,MAAK0E,YAAY9B,cAAcmvC,YAAYkZ,IAGrCyC,EAAV3sD,UAAAytD,4BAMI,IAAK,GALCK,GAA6B7uD,KAAK0E,YAAY9B,cAC9CksD,EAAaD,EAAc99C,WAAWvO,OAInC6H,EAAI,EAAGA,EAAIykD,EAAYzkD,IAC9BwkD,EAAcE,YAAYF,EAAc99C,WAAW1G,KAI/CqjD,EAAV3sD,UAAA2tD,kCACI,GAAK1uD,KAAKyuD,iBAAV,CAIA,GAAMO,GAAoBhvD,KAAK0E,YAAY9B,cACrCqsD,EAAejvD,KAAKkvD,QACtBlvD,KAAK2tD,cAAcwB,sBAAsBnvD,KAAKkvD,SAC9ClvD,KAAK2tD,cAAcyB,wBAEnBH,IAAgBjvD,KAAKqvD,wBACnBrvD,KAAKqvD,uBACPL,EAAKxmD,UAAUC,OAAOzI,KAAKqvD,uBAEzBJ,GACFD,EAAKxmD,UAAUG,IAAIsmD,GAErBjvD,KAAKqvD,sBAAwBJ,GAG3BjvD,KAAKsvD,UAAYtvD,KAAKuvD,yBACpBvvD,KAAKuvD,wBACPP,EAAKxmD,UAAUC,OAAOzI,KAAKuvD,wBAEzBvvD,KAAKsvD,UACPN,EAAKxmD,UAAUG,IAAI3I,KAAKsvD,UAE1BtvD,KAAKuvD,uBAAyBvvD,KAAKsvD,YAS/B5B,EAAV3sD,UAAAitD,kBAAA,SAA4BtsD,GACxB,MAAwB,gBAAVA,GAAqBA,EAAM6P,OAAOgpB,MAAM,KAAK,GAAK74B,kBAzLpEwD,KAACC,EAAAA,UAADC,OAAAE,SAAA,4BACED,SAAU,WACV8F,SAAU,UACV5F,QAAF,spBACEC,QAAF,SACEO,MACFuM,KAAA,MACMtM,MAAN,WACIwpD,0BAAJ,UAEA/pD,cAAAC,EAAAA,kBAAAC,KACAC,gBAAAC,EAAAA,wBAAAC,6EA1DAZ,SAAE2J,GAAFxI,aAAAnB,KAAA8J,EAAAA,UAAA5J,MAAA,oBAsGAsoD,EAAAnnD,iEAlCA2oD,UAAAhqD,KAAAuB,EAAAA,QAUA6oD,WAAApqD,KAAAuB,EAAAA,SAWAinD,mCCtGA,sBAaAxoD,KAAC+J,EAAAA,SAAD7J,OACE8J,SAAUE,IACVI,SAAUk+C,GAASt+C,IACnBQ,cAAe89C,QAhBjB7zC,KHwBA41C,GAAA,yBAxBA,MAAAA,MAyBapI,GAAoBpgD,EAAmBwoD,IAIpDC,GAAA,yBA7BA,MAAAA,MA8BaC,GAAwB1oD,EAAmByoD,+EAexD,MACgCtnD,GAAhC87C,EAAA/8C,kBAdAjC,KAACC,EAAAA,UAADC,OAAAC,SAAA,eACE8F,SAAU,aACVpF,MACFuM,KAAA,aACMtM,MAAN,gBAEAV,SAAA,4BACAC,QAAA,u3sBACEC,QAAF,iBACEC,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,WAGAo+C,OA7CAD,GAAA,SAAA98C,gBA2DA,MAAA,QAAAA,GAAAA,EAAA4C,MAAA/J,KAAAuY,YAAAvY,KAHA,4FARAsF,SAAA,4BACES,MAAQC,MAAS,YACjBT,QAAF;+3sBACEC,QAAF,iBACEC,cAAFC,EAAAA,kBAAAC,KACEC,gBAAgBC,EAAAA,wBAAlBC,WAGAm+C,GACAoD,gCASA,+HAAAjD,iCAUA,yHAAAC,iCAUA,0HAAAC,4DA8BsB,qBAPtBzkD,EAAAynD,SAAAA,EAOAznD,EAAA0nD,YAAA,EAAE1nD,EAAF0nD,aAAAD,EAAAznD,EAtEA,cA0EAskD,EAAApjD,UAAAyI,+FASE,oFAEF26C,EAAApjD,UAAAymD,wBAEAxnD,KAAAkyB,SAAAtvB,cAAA4F,UAAAG,IAAA,wBAEAw7C,EAAApjD,UAAA0mD,uBAEAznD,KAAAkyB,SAAAtvB,cAAA4F,UAAAC,OAAA,oDAKE,8DAAFvD,KAAAC,EAAAA,UAAAC,OAAAC,SAAA,kCACgB8F,SAAhB,cACApF,4BAnDA2hD,+BAAA,UACAC,oCAAA,UACAxpB,UAAA,iBACMC,SAAN,0CAGA94B,SAAA,uYACAG,cAAAC,EAAAA,kBAAAC,KACAC,gBAAAC,EAAAA,wBAAAC,WAIAq+C,EAAA/qC,eAAe,WAAf,QACAlU,KAAA4N,EAAAA,aACA5N,KAAAg/C,GAAA79C,aAAAnB,KAAAoB,EAAAA,uHA7DA69C,ONFAyD,GAAA,yBA5CA,MAAAA,MA6Ca9D,GAA6B78C,EAAmBoG,EAAcu6C,KAG3EC,GAAA,yBAhDA,MAAAA,MAiDaC,GAA0B7gD,EAAmB4gD,IAG7CjE,IACXhxC,QAASkiB,EAAAA,kBACTjiB,YAAaqP,EAAAA,WAAW,WAAM,MAAAyhC,MAC9B3uB,OAAO,GAIT+yB,GAAA,WACE,QAAFA,GAEW7yB,EAEAklB,GAFAp6C,KAAXk1B,OAAWA,EAEAl1B,KAAXo6C,OAAWA,EAhEX,MAAA2N,qBAyIE,QAAFlE,GAAsB3xB,EACAoO,EAE2C0nB,GAH/D,GAAFnoD,GAIIsH,EAJJC,KAAApH,OAAAA,WAAsBH,GAAtBqyB,SAAsBA,EACAryB,EAAtBygC,gBAAsBA,EAE2CzgC,EAAjEmoD,cAAiEA,EA5CjEnoD,EAAA2gC,WAAsB,EACtB3gC,EAAA8gC,WAAsB,EAGtB9gC,EAAAooD,WAAuB,EAQvBpoD,EAAAqoD,iBAAkD,UAkBlD,MAjCmC9/C,GAAnCy7C,EAAA18C,GAsBA3F,OAAAC,eAAMoiD,EAAN9iD,UAAA,gBAAA,WAAmB,MAAOf,MAAK2gC,WAAc3gC,KAAKgoD,eAAiBhoD,KAAKgoD,cAAc5lD,cACpF,SAAaV,GACX,GAAMo/B,GAAWz4B,EAAAA,sBAAsB3G,EAEnCo/B,KAAa9gC,KAAK2gC,YACpB3gC,KAAK2gC,UAAYG,EACjB9gC,KAAKsgC,gBAAgBl/B,iDAM3BI,OAAAC,eAAMoiD,EAAN9iD,UAAA,gBAAA,WAA4B,MAAOf,MAAKgoD,cAAc5L,gBAAgBuC,WAAW3+C,WAC/E,SAAa0B,GACX,GAAMi9C,GAAat2C,EAAAA,sBAAsB3G,EAErCi9C,KAAe3+C,KAAKwgC,YACtBxgC,KAAKwjD,aAAa7E,GAClB3+C,KAAKgoD,cAActE,uDAWvBG,EAAF9iD,UAAA8f,SAAE,WAAA,GAAFhhB,GAAAG,KAMU0+C,EAAc1+C,KAAKwgC,SAEzBv3B,SAAQC,UAAUC,KAAK,YACjBtJ,EAAK2gC,WAAake,KACpB7+C,EAAKgX,UAAW,EAChBhX,EAAKygC,gBAAgBl/B,mBAK3ByiD,EAAF9iD,UAAAyI,mBAAE,WAGE,GAAI2+C,IAAcnoD,KAAKooD,OAAQpoD,KAAKkyB,WAGtC2xB,EAAF9iD,UAAAC,YAAE,WAAA,GAAFnB,GAAAG,IACQA,MAAK6W,UAGP5N,QAAQC,UAAUC,KAAK,WAAM,MAAAtJ,GAAKgX,UAAW,IAG/C7W,KAAKgoD,cAAcK,sBAAsBroD,OAI3C6jD,EAAF9iD,UAAAm2B,OAAE,WACEl3B,KAAK6W,UAAY7W,KAAK6W,UAIxBgtC,EAAF9iD,UAAA0B,MAAE,WACEzC,KAAKkyB,SAAStvB,cAAcH,SAO9BohD,EAAF9iD,UAAA2kD,SAAE,WACE,MAAO1lD,MAAKsoD,MAAQtoD,KAAKsoD,MAAM1lD,cAAc0O,YAAc,IAI7DuyC,EAAF9iD,UAAAkhC,kBAAE,WACE,MAAOjiC,MAAKoC,UAAYpC,KAAKkiC,eAAiBliC,KAAKgoD,cAAc9lB,eAGnE2hB,EAAF9iD,UAAAgK,aAAE,WACO/K,KAAKoC,WACRpC,KAAKk3B,SAGLl3B,KAAKgoD,cAAcvxB,iBAAiBz2B,QAIxC6jD,EAAF9iD,UAAAymD,aAAE,WACExnD,KAAKioD,WAAY,EACjBjoD,KAAKgoD,cAAcO,kBAAkBvoD,OAGvC6jD,EAAF9iD,UAAA0mD,YAAE,WACEznD,KAAKioD,WAAY,EACjBjoD,KAAKgoD,cAAcxO,cAIrBqK,EAAF9iD,UAAA0xB,gBAAE,WACE,MAAOzyB,MAAKkyB,SAAStvB,eAIvBihD,EAAF9iD,UAAAyiD,aAAE,SAAa3sC,GACX,MAAIA,KAAa7W,KAAKwgC,YAItBxgC,KAAKwgC,UAAY3pB,EAEbA,EACF7W,KAAKgoD,cAAc5L,gBAAgBb,OAAOv7C,MAE1CA,KAAKgoD,cAAc5L,gBAAgBX,SAASz7C,MAG9CA,KAAKsgC,gBAAgBl/B,gBACd,mBAtKX8D,KAACC,EAAAA,UAADC,OAAAC,SAAA,kBACE8F,SAAU,gBACV3F,QAAF,iBACEO,MACFuM,KAAA,SACMtM,MAAN,gCACIm4B,UAAJ,iBACIC,SAAJ,gBACIzvB,UAAW,iBACX65C,SAAJ,KACIC,iCAAJ,WACIC,8BAAJ,YACIC,uBAAJ,sBACIp6C,uBAAJ,uBAEAjJ,SAAA,waACAG,cAAAC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,8FAtEAZ,KAAEy+C,GAAFt9C,aAAAnB,KAAA4J,EAAAA,OAAA1J,MAAA8c,EAAAA,WAAA,WAAA,MAAAyhC,YAuPAE,EAAAt9C,qGApKA2hD,mBAAAhjD,KAAAuB,EAAAA,QAGA/E,QAAAwD,KAAGuB,EAAAA,QAGHrE,WAAA8C,KAAAuB,EAAAA,QAGAoQ,WAAA3R,KAAAuB,EAAAA,SAeAo9C,sCA4IA,GAAAhkD,GAAAsH,EAAAC,KAAApH,OAAAA,IAmCA,OAEAH,GAAAqyB,SAAAA,kNAFAryB,EAzBA,6GAgCAgnD,WACS3I,gBACF0K,cAAP,WAAA,OAAA,IACA5oD,KAAA6oD,cAGA7oD,KAAA8oD,sBAAA9oD,KAAA6oD,aAEQ7oD,KAAK6oD,YAAc,MAG3B7oD,KAAA+oD,cAAA/oD,KAAAo8C,gBAAA,SAAAv7C,UAAA,SAAAiJ,cAGA,IAAA,GAAAk/C,GAAA,EAAAtqC,EAAA5U,EAAAwxC,MAAA0N,EAAAtqC,EAAAlc,OAAAwmD,IAAA,CACA,GAAAlC,GAAApoC,EAAAsqC,EACYlC,GAAZjwC,UAAA,EAEA,GAAA/M,EAAA0xC,QACA,IAAA,GAAA9E,GAAA,EAAAE,EAAA9sC,EAAA0xC,QAAA9E,EAAAE,EAAAp0C,OAAAk0C,IAAA,CAEA,GAAAoQ,GAAyBlQ,EAAzBF,EACYoQ,GAAZjwC,UAAA,4bAgCA,GAAAoyC,GAAAjpD,KAAAq/C,gBAAAjF,EAEA6O,GAAA,2CAIA,IAAaA,GAAbjpD,KAAA0mC,QAAAlkC,OAAA,GACAxC,KAAAC,YAAAipD,uEAOAtM,EAAA58C,KAAAC,YACUkpD,EAAVvM,EAAA1J,eACI,QAAJ5vB,GACA,IAAAM,GAAAA,MAEA,IAAAD,GAAAA,MACA3jB,KAAAoC,WACApC,KAAAopD,+BAEUt/C,EAAVqE,iBAGA,MACA,KAASoV,GAAAA,KACT,IAAAE,GAAAA,IACAH,IAAAC,EAAAA,KAAAq5B,EAAAp5B,qBAAAo5B,EAAAl5B,oBACA5Z,EAAAqE,gBACQ,MACR,KAAAk7C,GAAAA,EACAv/C,EAAAw/C,UACAtpD,KAAA0mC,QAAAj6B,KAAA,SAAA2tC,GAAA,OAAAA,EAAAvjC,WAAA7W,KAAAupD,YAAAvpD,KAAAwpD,cACY1/C,EAAMqE,iBAElB,MACA,SACQyuC,EAAR/4B,UAAA/Z,GAEAwZ,IAAA2Z,EAAAA,UAAA3Z,IAAA6Z,EAAAA,aAAArzB,EAAAizC,UACAH,EAAA1J,kBAAAiW,GAEQnpD,KAARopD,wFAOAppD,KAAAu5C,UAAAv5C,KAAAypD,iKAYAzpD,KAAA8oD,sBAAAY,OAGA1pD,KAAA6oD,YAAAa,0DAMA1pD,KAAA0mC,QAAAt9B,QAAA,SAAAgxC,GAAA,MAAAA,GAAAh4C,SAAA40B,qLAiBAh3B,MAAA0mC,QAAAt9B,QAAA,SAAAgxC,GAAA,MAAAA,GAAAoJ,cAAA,OACSx5C,IAAT,SAAAtI,GAEA,MAAA7B,GAAA6mC,QAAAj6B,KAAA,SAAA2tC,GACU,MAAVv6C,GAAAsnC,YAAAtnC,EAAAsnC,YAAAiT,EAAA14C,MAAAA,GAAA04C,EAAA14C,QAAAA,MAE6FsP,OAA7F24C,SACAvgD,QAAA,SAAAgxC,GAAA,MAAA,GAAAoJ,cAAA,iRAYA,GAAAoG,GAA4B5pD,KAA5B0mC,QAAAvkC,UAAA0nD,EAEAD,KACAA,EAAA1yB;kCAmBAkjB,EAAAoJ,aAAA7E,KAEA8E,GAAyB,KAGzBA,GACAzjD,KAAA0jD,kLAkBAC,EAAAt9C,+FA9QAb,QAAA,WAAA,gBAAA,YACEO,MACFuM,KAAA,UACAosB,aAAA,WACA14B,MAAA,qBACMm4B,UAAN,UACIC,SAAJ,eACIC,YAAJ,mBACI9vB,uBAAJ,uBAEAjJ,SAAA,4BACAC,QAAA,u3sBACAE,cAAAC,EAAAA,kBAAAC,KACAgN,WAAAixC,IACEh+C,gBAAFC,EAAAA,wBAAAC,WAIA69C,EAAAvqC,eAAA,WAAA,QACAlU,KAAA4N,EAAAA,gGAtPA4zB,UAAAxhC,KAAAqO,EAAAA,gBAAAnO,MAAAy+C,MA4RAxc,kBAAAniC,KAAAyB,EAAAA,iEA3BAg9C,GAIAG,gCCxRA,sBA4BA5+C,KAAC+J,EAAAA,SAAD7J,OACE8J,SAAU60C,GAAez0C,GAAiBF,GAAiB40C,GAAyB70C,EAAAA,cACpFK,SACEy0C,GACAC,GACAC,GACAC,GACAL,GACA30C,GACAi1C,GACAC,GACAN,GACAL,GACAE,GACAU,IAEF30C,cACEq0C,GACAC,GACAC,GACAC,GACAC,GACAC,GACAX,GACAE,QApDJW,mBC+BE,QAAF5Q,GACY6Q,EACAC,EACAC,EACA96B,EACArJ,EACkBhQ,GALlBxQ,KAAZykD,UAAYA,EACAzkD,KAAZ0kD,0BAAYA,EACA1kD,KAAZ2kD,QAAYA,EACA3kD,KAAZ6pB,UAAYA,EACA7pB,KAAZwgB,kBAAYA,EACkBxgB,KAA9BwQ,UAA8BA,EArC9B,MA2CEojC,GAAF7yC,UAAA8gB,OAAE,SAAO+iC,OAAT,KAAAA,IAASA,MACA5kD,KAAK+pC,UACR/pC,KAAK+pC,QAAU,GAAIjpB,GAAAA,eAAe9gB,KAAKykD,UAAWzkD,KAAKwgB,oBAGzDxgB,KAAKgiB,SAEAhiB,KAAK6kD,UACR7kD,KAAK6kD,QAAU,GAAIC,GAAAA,gBAAgB9kD,KAAKwQ,UAAUqhC,cAAc,OAC5D7xC,KAAK0kD,0BAA2B1kD,KAAK2kD,QAAS3kD,KAAK6pB,WAGzD,IAAM9d,GAAuB/L,KAAKykD,UAAU1/C,WAAWnC,aAKvDmJ,GAAkB,WAAEg5C,aAAa/kD,KAAK6kD,QAAQG,cAAej5C,GAC7D/L,KAAK+pC,QAAQloB,OAAO7hB,KAAK6kD,QAASD,IAOpChR,EAAF7yC,UAAAihB,OAAE,WACMhiB,KAAK+pC,QAAQkb,YACfjlD,KAAK+pC,QAAQ/nB,UAIjB4xB,EAAF7yC,UAAAC,YAAE,WACMhB,KAAK6kD,SACP7kD,KAAK6kD,QAAQ7+B,0BApDnB9gB,KAACmJ,EAAAA,UAADjJ,OACEC,SAAU,sEAfZH,KAAEuS,EAAAA,cACFvS,KAAE+c,EAAAA,2BACF/c,KAAEggD,EAAAA,iBACFhgD,KAAEmoB,EAAAA,WACFnoB,KAAE6M,EAAAA,mBAuBF7M,SAAA2J,GAAAxI,aAAAnB,KAAK4J,EAAAA,OAAL1J,MAAYuM,EAAAA,eArCZiiC,KCyBaR,IAYXC,cAAep8B,EAAAA,QAAQ,iBACrBC,EAAAA,MAAM,OAAQ7T,EAAAA,OACZyjB,QAAS,EAGTxjB,UAAW,uBAEb8T,EAAAA,WAAW,gBAAiB+tC,EAAAA,UAC1Bx1B,EAAAA,MAAM,oBAAqBtsB,EAAAA,OAAOyjB,QAAS,KAC3CzP,EAAAA,QAAQ,eAAgBhU,EAAAA,OAAOyjB,QAAS,EAAGxjB,UAAW,mBACtD00C,EAAAA,OACEroB,EAAAA,MAAM,oBAAqBtY,EAAAA,QAAQ,yCACjChU,EAAAA,OAAOyjB,QAAS,MAElBzP,EAAAA,QAAQ,yCAA0ChU,EAAAA,OAAOC,UAAW,sBAGxE8T,EAAAA,WAAW,YAAaC,EAAAA,QAAQ,oBAAqBhU,EAAAA,OAAOyjB,QAAS,QAQvEwsB,YAAar8B,EAAAA,QAAQ,eAGnBC,EAAAA,MAAM,UAAW7T,EAAAA,OAAOyjB,QAAS,KACjC1P,EAAAA,WAAW,aACT/T,EAAAA,OAAOyjB,QAAS,IAChBzP,EAAAA,QAAQ,qDASDi8B,GAAcF,GAAkBE,YAMhCD,GAAgBD,GAAkBC,cCjElCE,GAAiB,GAAI7zB,GAAAA,eAA6B,kBCY/D0lC,GAAA,yBA9BA,MAAAA,MA+BaC,GAAwBp+C,EAAmBoG,EAAc+3C,oBAwCpE,QAAF1R,GACYhvC,EACU6L,EACV0hB,EACoCiiB,GAJ9C,GAAFr0C,GAOIsH,EAAJC,KAAApH,OAAAA,WANYH,GAAZ6E,YAAYA,EAEA7E,EAAZoyB,cAAYA,EACoCpyB,EAAhDq0C,YAAgDA,EAZhDr0C,EAAAu3C,SAA4C,GAAIvrC,GAAAA,QAGhDhM,EAAAs2C,cAA0B,EAG1Bt2C,EAAA+0C,kBAA8B,EAWtB3iB,GAIFA,EAAcE,QAAQtyB,EAAK4yB,mBAAmB,GAG5CyhB,GAAeA,EAAYoR,SAC7BpR,EAAYoR,QAAQzlD,GAGtBA,EAAK2Q,UAAYD,IAhBrB,MAlBiCnI,GAAjCsrC,EAAAvsC,GAsCEusC,EAAF3yC,UAAA0B,MAAE,SAAM8G,OAAR,KAAAA,IAAQA,EAAR,WACQvJ,KAAKiyB,cACPjyB,KAAKiyB,cAAcgF,SAASj3B,KAAKyyB,kBAAmBlpB,GAEpDvJ,KAAKyyB,kBAAkBhwB,SAI3BixC,EAAF3yC,UAAAC,YAAE,WACMhB,KAAKiyB,eACPjyB,KAAKiyB,cAAcI,eAAeryB,KAAKyyB,mBAGrCzyB,KAAKk0C,aAAel0C,KAAKk0C,YAAYqR,YACvCvlD,KAAKk0C,YAAYqR,WAAWvlD,MAG9BA,KAAKo3C,SAASvqC,YAIhB6mC,EAAF3yC,UAAAmK,aAAE,WACE,MAAOlL,MAAKoC,SAAW,KAAO,KAIhCsxC,EAAF3yC,UAAA0xB,gBAAE,WACE,MAAOzyB,MAAK0E,YAAY9B,eAI1B8wC,EAAF3yC,UAAAykD,eAAE,SAAe17C,GACT9J,KAAKoC,WACP0H,EAAMqE,iBACNrE,EAAM0sB,oBAKVkd,EAAF3yC,UAAA0kD,kBAAE,WACEzlD,KAAKo3C,SAASxqC,KAAK5M,OAIrB0zC,EAAF3yC,UAAA2kD,SAAE,WACE,GAAM35C,GAAuB/L,KAAK0E,YAAY9B,cACxC+iD,EAAe3lD,KAAKwQ,UAAYxQ,KAAKwQ,UAAUo1C,UAAY,EAC7DC,EAAS,EAEb,IAAI95C,EAAQgF,WAMV,IAAK,GALC+0C,GAAS/5C,EAAQgF,WAAWvO,OAKzB6H,EAAI,EAAGA,EAAIy7C,EAAQz7C,IACtB0B,EAAQgF,WAAW1G,GAAG8G,WAAaw0C,IACrCE,GAAU95C,EAAQgF,WAAW1G,GAAGiH,YAKtC,OAAOu0C,GAAOt0C,uBAxHlBrM,KAACC,EAAAA,UAADC,OAAAC,SAAA,kBACE8F,SAAU,cACV3F,QAAF,WAAA,iBACEO,MACFuM,KAAA,WACMtM,MAAN,gBACI+/C,oCAAJ,eACIC,wCAAJ,mBACI1D,kBAAJ,iBACI/zC,uBAAJ,sBACI03C,kBAAmB,mBACnBt3C,UAAJ,yBACI8iB,eAAJ,uBAEA7rB,gBAAAC,EAAAA,wBAAyCC,OACzCL,cAAAC,EAAAA,kBAAAC,KACEL,SAAF,yRAzCAJ,KAAE4zB,EAAAA,eA6DF5zB,SAAA2J,GAAAxI,aAAAnB,KAAK4J,EAAAA,OAAL1J,MAAYmuC,MAAZruC,KAAAoB,EAAAA,cAEAotC,OTbaF,GACT,GAAI9zB,GAAAA,eAAsC,4BACxCC,WAAY,OACZC,QAASsmC,mBAqKb,QAAF7T,GACY3tC,EACAgH,EACkC68B,GAFlCvoC,KAAZ0E,YAAYA,EACA1E,KAAZ0L,QAAYA,EACkC1L,KAA9CuoC,gBAA8CA,EAnI9CvoC,KAAAmmD,WAAsCnmD,KAAKuoC,gBAAgBkK,UAC3DzyC,KAAAomD,WAAsCpmD,KAAKuoC,gBAAgBmK,UAI3D1yC,KAAAqmD,UAGArmD,KAAAsmD,aAAyB,GAAIz6C,GAAAA,QAG7B7L,KAAAumD,iBAA6B/+C,EAAAA,aAAaC,MAG1CzH,KAAA4yC,cAGA5yC,KAAA8yC,qBAA2C,OAG3C9yC,KAAA6sC,eAAmB,GAAIhhC,GAAAA,QAYvB7L,KAAAu2C,cAAmCv2C,KAAKuoC,gBAAgBgO,cA8CxDv2C,KAAAwmD,gBAAqCxmD,KAAKuoC,gBAAgBsL,eAQ1D7zC,KAAAymD,aAA8CzmD,KAAKuoC,gBAAgBrV,YAiCnElzB,KAAAslB,OAAM,GAAIvd,GAAAA,aAOV/H,KAAA4jC,MAAoB5jC,KAAKslB,OAAzB,MA1FA9jB,QAAAC,eAAM4wC,EAANtxC,UAAA,iBAAA,WAAmC,MAAOf,MAAKmmD,gBAC7C,SAAczkD,GACE,WAAVA,GAAgC,UAAVA,GACxBglD,KAEF1mD,KAAKmmD,WAAazkD,EAClB1B,KAAKsyC,sDAKT9wC,OAAAC,eAAM4wC,EAANtxC,UAAA,iBAAA,WAAmC,MAAOf,MAAKomD,gBAC7C,SAAc1kD,GACE,UAAVA,GAA+B,UAAVA,GACvBilD,KAEF3mD,KAAKomD,WAAa1kD,EAClB1B,KAAKsyC,sDAqBT9wC,OAAAC,eAAM4wC,EAANtxC,UAAA,sBAAA,WAAkC,MAAOf,MAAKwmD,qBAC5C,SAAmB9kD,GACjB1B,KAAKwmD,gBAAkBn+C,EAAAA,sBAAsB3G,oCAMjDF,OAAAC,eAAM4wC,EAANtxC,UAAA,mBAAA,WAA2C,MAAOf,MAAKymD,kBACrD,SAAgB/kD,GACd1B,KAAKymD,aAAep+C,EAAAA,sBAAsB3G,oCAW9CF,OAAAC,eAAM4wC,EAANtxC,UAAA,kBAAA,SAAiB4xC,GACTA,GAAWA,EAAQnwC,SACrBxC,KAAK4yC,WAAaD,EAAQpY,MAAM,KAAK5c,OAAO,SAACqB,EAAU4nC,GAErD,MADA5nC,GAAI4nC,IAAa,EACV5nC,OAGThf,KAAK0E,YAAY9B,cAAcgkD,UAAY,qCAYjDplD,OAAAC,eAAM4wC,EAANtxC,UAAA,iBAAA,WAA4B,MAAOf,MAAK8oB,gBACtC,SAAc6pB,GAAmB3yC,KAAK8oB,WAAa6pB,mCAkBnDN,EAAFtxC,UAAA8f,SAAE,WACE7gB,KAAKsyC,sBAGPD,EAAFtxC,UAAAyI,mBAAE,WAAA,GAAF3J,GAAAG,IACIA,MAAKC,YAAc,GAAIC,GAAAA,gBAA6BF,KAAKqmD,QAAQQ,WAAW3I,gBAC5El+C,KAAKumD,iBAAmBvmD,KAAKC,YAAYm+C,OAAOv9C,UAAU,WAAM,MAAAhB,GAAKylB,OAAOvjB,KAAK,UAGnFswC,EAAFtxC,UAAAC,YAAE,WACEhB,KAAKumD,iBAAiBtlD,cACtBjB,KAAKslB,OAAOzY,YAIdwlC,EAAFtxC,UAAAq2C,SAAE,WACE,MAAOp3C,MAAKsmD,aAAal6C,KACvBoV,EAAAA,UAAUxhB,KAAKqmD,QACf9L,EAAAA,UAAU,SAAA9G,GAAS,MAAA/yC,GAAAA,MAFzBqJ,UAAA,GAEkC0pC,EAAMzpC,IAAI,SAAA88C,GAAQ,MAAAA,GAAK1P,gBAKvD/E,EAAFtxC,UAAAsiB,eAAE,SAAevZ,GACb,GAAMwZ,GAAUxZ,EAAMwZ,OAEtB,QAAQA,GACN,IAAK6mB,GAAAA,OACHnqC,KAAKslB,OAAOvjB,KAAK,WACjB+H,EAAM0sB,iBACR,MACA,KAAKwG,GAAAA,WACCh9B,KAAK61C,YAAiC,QAAnB71C,KAAK+c,WAC1B/c,KAAKslB,OAAOvjB,KAAK,UAErB,MACA,KAAKm7B,GAAAA,YACCl9B,KAAK61C,YAAiC,QAAnB71C,KAAK+c,WAC1B/c,KAAKslB,OAAOvjB,KAAK,UAErB,MACA,SACMuhB,IAAY2Z,EAAAA,UAAY3Z,IAAY6Z,EAAAA,YACtCn9B,KAAKC,YAAY8mD,eAAe,YAGlC/mD,KAAKC,YAAY4jB,UAAU/Z,KAQjCuoC,EAAFtxC,UAAAi1C,eAAE,SAAezsC,GAAf,GAAF1J,GAAAG,SAAA,KAAAuJ,IAAiBA,EAAjB,WAEQvJ,KAAK2zC,YACP3zC,KAAK0L,QAAQ4uC,SAASn0B,eACnB/Z,KAAKyI,EAAAA,KAAK,IACVhU,UAAU,WAAM,MAAAhB,GAAKI,YAAY8mD,eAAex9C,GAAQia,uBAE3DxjB,KAAKC,YAAY8mD,eAAex9C,GAAQia,sBAQ5C6uB,EAAFtxC,UAAAimD,gBAAE,WACEhnD,KAAKC,YAAY4B,eAAe,IAOlCwwC,EAAFtxC,UAAAk1C,aAAE,SAAaC,GAEX,GAAM+Q,GAAe,mBAzOO,EAyOqC/Q,GAC3DgR,EAAkB1lD,OAAOkc,KAAK1d,KAAK4yC,YAAYnmC,KAAK,SAAA06C,GAAK,MAAAA,GAAE7+B,WAAW,oBAEvE4+B,IAAmBA,IAAoBlnD,KAAKonD,qBAC3CpnD,KAAKonD,qBACPpnD,KAAK4yC,WAAW5yC,KAAKonD,qBAAsB,GAG7CpnD,KAAK4yC,WAAWqU,IAAgB,EAChCjnD,KAAKonD,mBAAqBH,IAQ9B5U,EAAFtxC,UAAAukD,QAAE,SAAQwB,IAM6B,IAA/B9mD,KAAKqmD,OAAOvoC,QAAQgpC,KACtB9mD,KAAKqmD,OAAOzxC,KAAKkyC,GACjB9mD,KAAKsmD,aAAa15C,KAAK5M,KAAKqmD,UAQhChU,EAAFtxC,UAAAwkD,WAAE,SAAWuB,GACT,GAAM7kD,GAAQjC,KAAKqmD,OAAOvoC,QAAQgpC,EAE9B9mD,MAAKqmD,OAAOvoC,QAAQgpC,IAAS,IAC/B9mD,KAAKqmD,OAAOhnC,OAAOpd,EAAO,GAC1BjC,KAAKsmD,aAAa15C,KAAK5M,KAAKqmD;sCAWhChU,EAAFtxC,UAAAuxC,mBAAE,SAAmBC,EAAsCC,OAA3D,KAAAD,IAAqBA,EAAsBvyC,KAAKyyC,eAAhD,KAAAD,IAA2DA,EAAsBxyC,KAAK0yC,UAClF,IAAMC,GAAU3yC,KAAK4yC,UACrBD,GAAQ,mBAA8B,WAATJ,EAC7BI,EAAQ,kBAA6B,UAATJ,EAC5BI,EAAQ,kBAA6B,UAATH,EAC5BG,EAAQ,kBAA6B,UAATH,GAI9BH,EAAFtxC,UAAA8xC,gBAAE,WAEE7yC,KAAK8yC,qBAAuB,SAI9BT,EAAFtxC,UAAAgyC,gBAAE,WAEE/yC,KAAK8yC,qBAAuB,QAI9BT,EAAFtxC,UAAAiyC,iBAAE,SAAiBlpC,GACf9J,KAAK6sC,eAAejgC,KAAK9C,GACzB9J,KAAKizC,cAAe,EAQE,UAAlBnpC,EAAM2Y,SAA4D,IAArCziB,KAAKC,YAAYizC,kBAChDppC,EAAMiC,QAAQonC,UAAY,mBAvThCjuC,KAACC,EAAAA,UAADC,OAAAC,SAAA,WACEC,SAAU,wXACVC,QAAF,qvDACEK,gBAAFC,EAAAA,wBAAAC,OACEL,cAAFC,EAAAA,kBAAAC,KACEwF,SAAF,UACE+N,YACFk6B,GAAAC,cACAD,GAAAE,aAEA3gC,YACAC,QAAA2gC,GAAA1gC,YAAAw/B,gFA7EAntC,SAAE2J,GAAFxI,aAAAnB,KAAA4J,EAAAA,OAAA1J,MAAAouC,SAuNAnB,EAAA9rC,0EAnGAmsC,YAAAxtC,KAAAuB,EAAAA,QAGA+Q,cAAAtS,KAAAsB,EAAAA,UAAApB,MAAAqS,EAAAA,eAWAg8B,QAAAvuC,KAAAqO,EAAAA,gBAAAnO,MAAAsuC,MAWAC,cAAAzuC,KAAG6tB,EAAAA,aAAH3tB,MAAAwuC,MAOAC,iBAAA3uC,KAAAuB,EAAAA,QAMAysB,cAAAhuB,KAAGuB,EAAAA,QAGHqiB,aAAA5jB,KAAAuB,EAAAA,MAAArB,MAAA,WAQAoD,YAAAtD,KAAAuB,EAAAA,QAaA6e,SAAApgB,KAAAyB,EAAAA,SAmBAi9B,QAAA1+B,KAAAyB,EAAAA,UAaA0rC,KCxLayB,GACT,GAAIp0B,GAAAA,eAAqC,4BAQhCq0B,IACXnhC,QAASkhC,GACT9jB,MAAO7C,EAAAA,SACP8C,WAAY+jB,kBA2EZ,QAAFC,GAAsBtqB,EACAuI,EACA1R,EACkC8nB,EACtB4L,EACQC,EACRlxC,EAGZgvB,GATAjyB,KAAtB2pB,SAAsBA,EACA3pB,KAAtBkyB,SAAsBA,EACAlyB,KAAtBwgB,kBAAsBA,EACkCxgB,KAAxDsoC,gBAAwDA,EACtBtoC,KAAlCk0C,YAAkCA,EACQl0C,KAA1Cm0C,kBAA0CA,EACRn0C,KAAlCiD,KAAkCA,EAGZjD,KAAtBiyB,cAAsBA,EA3DtBjyB,KAAA6kB,YAA2C,KAC3C7kB,KAAAo0C,WAA+B,EAC/Bp0C,KAAAq0C,mBAA+B7sC,EAAAA,aAAaC,MAC5CzH,KAAAs0C,mBAA+B9sC,EAAAA,aAAaC,MAI5CzH,KAAAu0C,gBAAoC,EAsBpCv0C,KAAAw0C,WAAsD,GAAIzsC,GAAAA,aAQ1D/H,KAAAy0C,WAAsDz0C,KAAKw0C,WAG3Dx0C,KAAA00C,WAAsD,GAAI3sC,GAAAA,aAQ1D/H,KAAA20C,YAAuD30C,KAAK00C,WAapDP,IACFA,EAAkBS,iBAAmB50C,KAAK60C,mBA/IhD,MA+FArzC,QAAAC,eAAMwyC,EAANlzC,UAAA,+CACI,MAAOf,MAAK80C,UAGd,SAAiCtxC,GAC/BxD,KAAK80C,KAAOtxC,mCA+CdywC,EAAFlzC,UAAAyI,mBAAE,WAAA,GAAF3J,GAAAG,IACIA,MAAK+0C,aAEL/0C,KAAK80C,KAAKlR,MAAM/iC,UAAU,SAAAm0C,GACxBn1C,EAAKo1C,eAGW,UAAXD,GAAiC,QAAXA,IAAqBn1C,EAAKq0C,aACnDr0C,EAAKq0C,YAAY5uB,OAAOvjB,KAAKizC,KAIjCh1C,KAAKk1C,gBAGPjB,EAAFlzC,UAAAC,YAAE,WACMhB,KAAK6kB,cACP7kB,KAAK6kB,YAAYmB,UACjBhmB,KAAK6kB,YAAc,MAGrB7kB,KAAKm1C,yBAIP3zC,OAAFC,eAAMwyC,EAANlzC,UAAA,gBAAE,WACE,MAAOf,MAAKo0C,2CAId5yC,OAAFC,eAAMwyC,EAANlzC,UAAA,WAAE,WACE,MAAOf,MAAKiD,MAA4B,QAApBjD,KAAKiD,KAAKvB,MAAkB,MAAQ,uCAI1DuyC,EAAFlzC,UAAA8zC,gBAAE,WACE,SAAU70C,KAAKm0C,oBAAqBn0C,KAAKk0C,cAI3CD,EAAFlzC,UAAAq0C,WAAE,WACE,MAAOp1C,MAAKo0C,UAAYp0C,KAAKq1C,YAAcr1C,KAAKs1C,YAIlDrB,EAAFlzC,UAAAu0C,SAAE,WAAA,GAAFz1C,GAAAG,IACI,KAAIA,KAAKo0C,UAAT,CAIA,GAAMtpB,GAAa9qB,KAAKyrB,gBACxBzrB,MAAKu1C,aAAazqB,EAAWogB,YAAiE,kBAC9FpgB,EAAWjJ,OAAO7hB,KAAK+pC,SAEnB/pC,KAAK80C,KAAKnB,aACZ3zC,KAAK80C,KAAKnB,YAAY9xB,OAAO7hB,KAAKw1C,UAGpCx1C,KAAKq0C,mBAAqBr0C,KAAKy1C,sBAAsB50C,UAAU,WAAM,MAAAhB,GAAKw1C,cAC1Er1C,KAAK01C,YAED11C,KAAK80C,eAAgBzC,KACvBryC,KAAK80C,KAAKjC,oBAKdoB,EAAFlzC,UAAAs0C,UAAE,WACEr1C,KAAK80C,KAAKlR,MAAM7hC,QAOlBkyC,EAAFlzC,UAAA0B,MAAE,SAAM8G,OAAR,KAAAA,IAAQA,EAAR,WACQvJ,KAAKiyB,cACPjyB,KAAKiyB,cAAcgF,SAASj3B,KAAKkyB,SAAStvB,cAAe2G,GAEzDvJ,KAAKkyB,SAAStvB,cAAcH,SAKxBwxC,EAAVlzC,UAAAk0C,kCACI,IAAKj1C,KAAK6kB,aAAgB7kB,KAAK21C,SAA/B,CAIA,GAAMb,GAAO90C,KAAK80C,IAElB90C,MAAKq0C,mBAAmBpzC,cACxBjB,KAAK6kB,YAAY7C,SAEb8yB,YAAgBzC,KAClByC,EAAK/B,kBAED+B,EAAKnB,YAEPmB,EAAKjI,eACFzgC,KAAK4E,EAAAA,OAAO,SAAAlH,GAAS,MAAkB,SAAlBA,EAAM2Y,UAAqB5N,EAAAA,KAAK,IACrDhU,UAAU,WACTi0C,EAAgB,YAAE9yB,SAClBniB,EAAK+1C,eAGT51C,KAAK41C,eAGP51C,KAAK41C,aAEDd,EAAKnB,aACPmB,EAAKnB,YAAY3xB,YASfiyB,EAAVlzC,UAAA20C,qBACI11C,KAAK80C,KAAKe,WAAa71C,KAAK60C,kBAAoB70C,KAAKk0C,gBAAcrlC,GACnE7O,KAAK80C,KAAK/3B,UAAY/c,KAAK6C,IAC3B7C,KAAK81C,oBACL91C,KAAK+1C,gBAAe,GACpB/1C,KAAK80C,KAAKkB,eAAeh2C,KAAKu0C,eAAiB,QAAU,YAInDN,EAAVlzC,UAAA+0C,6BACI,GAAI91C,KAAK80C,KAAKmB,aAAc,CAI1B,IAHA,GAAIC,GAAQ,EACRL,EAAa71C,KAAK80C,KAAKe,WAEpBA,GACLK,IACAL,EAAaA,EAAWA,UAG1B71C,MAAK80C,KAAKmB,aAAaC,KAQnBjC,EAAVlzC,UAAA60C,sBACI51C,KAAK+1C,gBAAe,GAKf/1C,KAAKu0C,eAIEv0C,KAAK60C,mBACf70C,KAAKyC,MAAM,SAFXzC,KAAKyC,QAKPzC,KAAKu0C,gBAAiB,GAIhBN,EAAVlzC,UAAAg1C,eAAA,SAAyBxR,GACrBvkC,KAAKo0C,UAAY7P,EACjBvkC,KAAKo0C,UAAYp0C,KAAKw0C,WAAWzyC,OAAS/B,KAAK00C,WAAW3yC,OAEtD/B,KAAK60C,oBACP70C,KAAKm0C,kBAAkBgC,aAAe5R,IAQlC0P,EAAVlzC,UAAAg0C,sBACS/0C,KAAK80C,MACRsB,MAQInC,EAAVlzC,UAAA0qB,0BACI,IAAKzrB,KAAK6kB,YAAa,CACrB7kB,KAAK+pC,QAAU,GAAIjpB,GAAAA,eAAe9gB,KAAK80C,KAAKt9B,YAAaxX,KAAKwgB,kBAC9D,IAAM8J,GAAStqB,KAAKq2C,mBACpBr2C,MAAKs2C,sBAAsBhsB,EAA4D,kBACvFtqB,KAAK6kB,YAAc7kB,KAAK2pB,SAASsD,OAAO3C,GAG1C,MAAOtqB,MAAK6kB,aAONovB,EAAVlzC,UAAAs1C,6BACI,MAAO,IAAI9pB,GAAAA,eACTC,iBAAkBxsB,KAAK2pB,SAAStgB,WAC3BkhC,oBAAoBvqC,KAAKkyB,UACzBsY,sBAAsB,mBAC3BtX,YAAsC,MAAzBlzB,KAAK80C,KAAK5hB,aAAuBlzB,KAAK60C,kBAAoB70C,KAAK80C,KAAK5hB,YACjFqjB,cAAev2C,KAAK80C,KAAKyB,eAAiB,mCAC1CtL,eAAgBjrC,KAAKsoC,kBACrBvrB,UAAW/c,KAAKiD,QASZgxC,EAAVlzC,UAAAu1C,sBAAA,SAAgCjtC,aACxBrJ,MAAK80C,KAAKxC,oBACZjpC,EAASyhC,gBAAgBjqC,UAAU,SAAAqL,GACjC,GAAMqmC,GAAyD,UAAnCrmC,EAAOsqC,eAAexK,SAAuB,QAAU,SAC7EwG,EAAyD,QAAnCtmC,EAAOsqC,eAAevK,SAAqB,QAAU,OAEjFpsC,GAAKi1C,KAAuB,mBAAEvC,EAAMC,MAUlCyB,EAAVlzC,UAAAw0C,aAAA,SAAuB/oB,GACnB,GAAJ9N,GAAA,WAAA1e,KAAA80C,KAAArC,WAAA,MAAA,UAAA,QAAA,OAAS9G,EAATjtB,EAAA,GAAkB+3B,EAAlB/3B,EAAA,GAGAg4B,EAAA,UAAA12C,KAAA80C,KAAApC,WAAA,SAAA,QAAA,MAAA,UAASzG,EAATyK,EAAA,GAAmBC,EAAnBD,EAAA,GAGAE,GAAA3K,EAAA0K,GAAS/K,EAATgL,EAAA,GAAkBC,EAAlBD,EAAA,GACAE,GAAAnL,EAAA8K,GAASzK,EAAT8K,EAAA,GAAmBC,EAAnBD,EAAA,GACQE,EAAU,CAEVh3C,MAAK60C,mBAGPkC,EAAmBpL,EAAkC,WAAxB3rC,KAAK80C,KAAKrC,UAAyB,QAAU,MAC1EgE,EAAkBzK,EAAuB,QAAZL,EAAoB,QAAU,MAC3DqL,EAAuB,WAAb/K,EApVsB,GAAA,GAqVtBjsC,KAAK80C,KAAKjB,iBACpBjI,EAAuB,QAAbK,EAAqB,SAAW,MAC1C4K,EAAuC,QAArBF,EAA6B,SAAW,OAG5DnqB,EAAiB8e,gBACdK,QAAPA,EAAgBC,QAAhBA,EAAyBI,SAAzBA,EAAmCC,SAAnCA,EAA6C+K,QAA7CA,IACOrL,QAAS8K,EAAiB7K,QAAjCA,EAA0CI,SAAU+K,EAAkB9K,SAAtEA,EAAgF+K,QAAhFA,IAEQrL,QAARA,EACQC,QAASiL,EACT7K,SAARA,EACQC,SAAU0K,EACVK,SAAUA,IAGVrL,QAAS8K,EACT7K,QAASiL,EACT7K,SAAU+K,EACV9K,SAAU0K,EACVK,SAAUA,MAMR/C,EAAVlzC,UAAAo0C,iCACIn1C,KAAKq0C,mBAAmBpzC,cACxBjB,KAAKs0C,mBAAmBrzC,eAIlBgzC,EAAVlzC,UAAA00C,0CACUwB,EAAWj3C,KAAgB,YAAE+kC,gBAC7B9Y,EAAcjsB,KAAgB,YAAEisB,cAChCirB,EAAcl3C,KAAKk0C,YAAcl0C,KAAKk0C,YAAY5uB,OAASnZ,EAAAA,KAC3DgrC,EAAQn3C,KAAKk0C,YAAcl0C,KAAKk0C,YAAYkD,WAAWhrC,KAC3D4E,EAAAA,OAAO,SAAAtE,GAAU,MAAAA,KAAW7M,EAAKs0C,oBACjCnjC,EAAAA,OAAO,WAAM,MAAAnR,GAAKu0C,aAChBjoC,EAAAA,IAEJ,OAAOzL,GAAAA,MAAMu2C,EAAUC,EAAaC,EAAOlrB,IAI7CgoB,EAAFlzC,UAAAs2C,iBAAE,SAAiBvtC,GACVwtC,EAAAA,gCAAgCxtC,KACnC9J,KAAKu0C,gBAAiB,EAKlBv0C,KAAK60C,mBACP/qC,EAAMqE,mBAMZ8lC,EAAFlzC,UAAAsiB,eAAE,SAAevZ,GACb,GAAMwZ,GAAUxZ,EAAMwZ,OAElBtjB,MAAK60C,oBACAvxB,IAAY4Z,EAAAA,aAA4B,QAAbl9B,KAAK6C,KAChCygB,IAAY0Z,EAAAA,YAA2B,QAAbh9B,KAAK6C,MACtC7C,KAAKs1C,YAKTrB,EAAFlzC,UAAAgK,aAAE,SAAajB,GACP9J,KAAK60C,mBAEP/qC,EAAM0sB,kBACNx2B,KAAKs1C,YAELt1C,KAAKo1C,cAKDnB,EAAVlzC,UAAAm0C,kCAESl1C,MAAK60C,oBAIV70C,KAAKs0C,mBAAqBt0C,KAAKk0C,YAAYkD,WAIxChrC,KACC4E,EAAAA,OAAO,SAAAtE,GAAU,MAAAA,KAAW7M,EAAKs0C,oBAAsBznC,EAAOtK,WAC9DynC,EAAAA,MAAM,EAAG0N,EAAAA,gBAEV12C,UAAU,WACThB,EAAK00C,gBAAiB,EAKlB10C,EAAKi1C,eAAgBzC,KAAWxyC,EAAKi1C,KAAK7B,aAC5CpzC,EAAKi1C,KAAKjI,eACPzgC,KAAKyI,EAAAA,KAAK,GAAIxI,EAAAA,UAAUxM,EAAKq0C,YAAYkD,aACzCv2C,UAAU,WAAM,MAAAhB,GAAKy1C,aAExBz1C,EAAKy1C,8BAvbfpwC,KAACmJ,EAAAA,UAADjJ,OACEC,SAAU,8CACVU,MACEyxC,gBAAiB,OACjBhlC,uBAAwB,mBACxBilC,cAAe,2BACfpZ,YAAa,yBACb1vB,UAAW,wBAEbxD,SAAU,yDA/DZjG,KAAEioB,EAAAA,UAUFjoB,KAAE4N,EAAAA,aASF5N,KAAE6M,EAAAA,mBAqGF7M,SAAA2J,GAAAxI,aAAAnB,KAAe4J,EAAAA,OAAf1J,MAAsB0uC,QAjGtB5uC,KAAQmtC,GAARhsC,aAAAnB,KAkGeoB,EAAAA,aAhGfpB,KAAQwuC,GAARrtC,aAAAnB,KAiGeoB,EAAAA,WAjGfpB,KAiG2BwyC,EAAAA,SA/H3BxyC,KAAmBkB,EAAAA,eAAnBC,aAAAnB,KAgIeoB,EAAAA,aAjIfpB,KAAQ4zB,EAAAA,kCAsFR6e,+BAAAzyC,KAAGuB,EAAAA,MAAHrB,MAAS,0BAUT0vC,OAAA5vC,KAAGuB,EAAAA,MAAHrB,MAAS,uBAGTowC,WAAAtwC,KAAGuB,EAAAA,MAAHrB,MAAS,wBAGTovC,aAAAtvC,KAAGyB,EAAAA,SAQH8tC,aAAAvvC,KAAGyB,EAAAA,SAGH+tC,aAAAxvC,KAAGyB,EAAAA,SAQHguC,cAAAzvC,KAAGyB,EAAAA,UAjIHstC,iCCAA,sBAqBA/uC,KAAC+J,EAAAA,SAAD7J,OACE8J,SACEC,EAAAA,aACAC,GACAE,GACA+Z,EAAAA,eAEF7Z,SAAU6iC,GAASqB,GAAaO,GAAgBL,GAAgBxkC,IAChEQ,cAAeyiC,GAASqB,GAAaO,GAAgBL,IACrDjhC,WAAYohC,QA9Bd6D,KC0BaC,IAaXC,eAAgB7gC,EAAAA,QAAQ,kBACtBC,EAAAA,MAAM,OAAQ7T,EAAAA,OACZC,UAAW,YACXy0C,SAAU,OACVjxB,QAAS,KAEX5P,EAAAA,MAAM,UAAW7T,EAAAA,OACfyjB,QAAS,EACTixB,SAAU,oBACVz0C,UAAW,eAEb4T,EAAAA,MAAM,mBAAoB7T,EAAAA,OACxByjB,QAAS,EACTixB,SAAU,oBACVz0C,UAAW,eAEb8T,EAAAA,WAAW,YAAa4gC,EAAAA,OACtBroB,EAAAA,MAAM,iBAAkBC,EAAAA,gBACxBvY,EAAAA,QAAQ,6CAEVD,EAAAA,WAAW,aACTC,EAAAA,QAAQ,qBAAsBhU,EAAAA,OAAOyjB,QAAS,SASlDmxB,cAAehhC,EAAAA,QAAQ,iBACrBC,EAAAA,MAAM,UAAW7T,EAAAA,OAAOyjB,QAAS,KACjC1P,EAAAA,WAAW,mBACT/T,EAAAA,OAAOyjB,QAAS,IAChBzP,EAAAA,QAAQ,qDAUDygC,GAAiBD,GAAoBC,eAMrCG,GAAgBJ,GAAoBI,c3EK7CrjB,GAAe,EAqCNsjB,GACT,GAAIx4B,GAAAA,eAAqC,8BAShC+nB,IACX70B,QAASslC,GACTloB,MAAO7C,EAAAA,SACP8C,WAAYkoB,IAIdC,GAAA,WACE,QAAFA,GAEWljB,EAEAxzB,GAFA1B,KAAXk1B,OAAWA,EAEAl1B,KAAX0B,MAAWA,EAzJX,MAAA02C,MA8JAC,GAAA,WACE,QAAFA,GAAqB3zC,EACA4zC,EACAC,EACAC,EACAC,GAJAz4C,KAArB0E,YAAqBA,EACA1E,KAArBs4C,0BAAqBA,EACAt4C,KAArBu4C,YAAqBA,EACAv4C,KAArBw4C,iBAAqBA,EACAx4C,KAArBy4C,UAAqBA,EAnKrB,MAAAJ,MAqKaK,GAAsBzxC,EAC/BmG,EAAcC,EAAcsrC,EAAgBN,mCAtKhD,sBA4KAnzC,KAACmJ,EAAAA,UAADjJ,OACEC,SAAU,yBA7KZ0hC,KA+KAR,GAAA,SAAAp/B,GA+RE,QAAFo/B,GACY56B,EACAxK,EACAuK,EACR4sC,EACAvzC,EACoB9B,EACRs1C,EACAC,EACQI,EACOH,EACJp2C,EACqBw2C,GAZ9C,GAAFh5C,GAaIsH,EAbJC,KAAApH,KAaU+E,EAAYuzC,EAA2BC,EACvCC,EAAkBC,IAd5Bz4C,WACYH,GAAZ8L,eAAYA,EACA9L,EAAZsB,mBAAYA,EACAtB,EAAZ6L,QAAYA,EAGY7L,EAAxBoD,KAAwBA,EAGApD,EAAxB+4C,iBAAwBA,EACO/4C,EAA/B44C,UAA+BA,EAEiB54C,EAAhDg5C,uBAAgDA,EA7PhDh5C,EAAAi5C,YAAuB,EAGvBj5C,EAAA+1B,WAA+B,EAG/B/1B,EAAAk5C,WAAuB,EAMvBl5C,EAAAm5C,WAA+B,EAG/Bn5C,EAAAo5C,aAAyB,SAACC,EAASC,GAAY,MAAAD,KAAOC,GAGtDt5C,EAAAu5C,KAAiB,cAAcxkB,KAG/B/0B,EAAAw5C,SAA8B,GAAIxtC,GAAAA,QASlChM,EAAAy5C,iBAAqB,EASrBz5C,EAAA05C,UAAoC,aAGpC15C,EAAA25C,WAAe,aAGf35C,EAAA45C,WAAuB,GAGvB55C,EAAA65C,iBAA6B,MAG7B75C,EAAA85C,qBAAiC,EAGjC95C,EAAA+5C,0BAA8B,GAAI/tC,GAAAA,QAGlChM,EAAAyoC,gBAAoBzoC,EAAKg5C,yBAOzBh5C,EAAAg6C,SAAa,EAQbh6C,EAAAi6C,aAEMnO,QAAS,QACTC,QAAS,MACTI,SAAU,QACVC,SAAU,QAGVN,QAAS,QACTC,QAAS,SACTI,SAAU,QACVC,SAAU,WAKhBpsC,EAAAk6C,yBAA6C,EAa7Cl6C,EAAAm6C,UAAqB,EAGrBn6C,EAAAo6C,YAAgB,aAuFhBp6C,EAAAm2B,UAA2C,GAkB3Cn2B,EAAAq6C,uBAA0EC,EAAAA,MAAM,WAC5E,MAAIt6C,GAAK6mC,QACAhmC,EAAAA,MAAbqJ,UAAA,GAAsBlK,EAAK6mC,QAAQ18B,IAAI,SAAAowC,GAAU,MAAAA,GAAOC,qBAG7Cx6C,EAAK6L,QAAQ4uC,SACjBn0B,eACA/Z,KAAKyI,EAAAA,KAAK,GAAI0lC,EAAAA,UAAU,WAAM,MAAA16C,GAAKq6C,4BAI1Cr6C,EAAAyjC,aAA4D,GAAIv7B,GAAAA,aAIhElI,EAAA8kC,cAAM9kC,EAAKyjC,aAAal3B,KAAK4E,EAAAA,OAAO,SAAAwpC,GAAK,MAAAA,KAAIxwC,EAAAA,IAAI,eAIjDnK,EAAAglC,cAAMhlC,EAAKyjC,aAAal3B,KAAK4E,EAAAA,OAAO,SAAAwpC,GAAK,OAACA,IAAIxwC,EAAAA,IAAI,eAIlDnK,EAAAwnC,gBAAM,GAAIt/B,GAAAA,aAOVlI,EAAAynC,YAAsD,GAAIv/B,GAAAA,aAkBlDlI,EAAK44C,YAGP54C,EAAK44C,UAAUgC,cAAgB56C,GAGjCA,EAAKwC,SAAWoL,SAASpL,IAAa,EAGtCxC,EAAKwuB,GAAKxuB,EAAKwuB,KA3BnB,MAnP+BjmB,GAA/Bm+B,EAAAp/B,GA+FE3F,OAAFC,eAAM8kC,EAANxlC,UAAA,eAAE,WACE,MAAOf,MAAKg6C,UAAYh6C,KAAK84C,gBAM/B,SAAYp3C,GACV1B,KAAKg6C,SAAWt4C,mCA8BpBF,OAAAC,eAAM8kC,EAANxlC,UAAA,mBAAA,WAA8B,MAAOf,MAAK06C,kBACxC,SAAgBh5C,GACd1B,KAAK06C,aAAeh5C,EACpB1B,KAAK26C,aAAa/tC,wCAKtBpL,OAAAC,eAAM8kC,EAANxlC,UAAA,gBAAA,WAA4B,MAAOf,MAAK41B,eACtC,SAAal0B,GACX1B,KAAK41B,UAAYvtB,EAAAA,sBAAsB3G,GACvC1B,KAAK26C,aAAa/tC,wCAKtBpL,OAAAC,eAAM8kC,EAANxlC,UAAA,gBAAA,WAA4B,MAAOf,MAAKg5C,eACtC,SAAat3C,GACX,GAAI1B,KAAK46C,gBACP,KAAMC,KAGR76C,MAAKg5C,UAAY3wC,EAAAA,sBAAsB3G,oCAK3CF,OAAAC,eAAM8kC,EAANxlC,UAAA,8BAAA,WAA0C,MAAOf,MAAK+5C,6BACpD,SAA2Br4C,GACzB1B,KAAK+5C,wBAA0B1xC,EAAAA,sBAAsB3G,oCASzDF,OAAAC,eAAM8kC,EAANxlC,UAAA,mBAAA,WAAsB,MAAOf,MAAKi5C,kBAChC,SAAgBpiB,GACd,GAAkB,kBAAPA,GACT,KAAMikB,KAER96C,MAAKi5C,aAAepiB,EAChB72B,KAAK46C,iBAEP56C,KAAK+6C,wDAMXv5C,OAAAC,eAAM8kC,EAANxlC,UAAA,aAAA,WAAqB,MAAOf,MAAK45B,YAC/B,SAAUkH,GACJA,IAAa9gC,KAAK45B,SACpB55B,KAAK22B,WAAWmK,GAChB9gC,KAAK45B,OAASkH,oCAgBpBt/B,OAAAC,eAAM8kC,EAANxlC,UAAA,UAAA,WAAqB,MAAOf,MAAKg7C,SAC/B,SAAOt5C,GACL1B,KAAKg7C,IAAMt5C,GAAS1B,KAAKo5C,KACzBp5C,KAAK26C,aAAa/tC,wCAiEpB25B,EAAFxlC,UAAA8f,SAAE,WAAA,GAAFhhB,GAAAG,IACIA,MAAK46C,gBAAkB,GAAIK,GAAAA,eAA0Bj7C,KAAKinC,UAC1DjnC,KAAK26C,aAAa/tC,OAKlB5M,KAAK45C,0BACFxtC,KAAK8uC,EAAAA,uBAAwB7uC,EAAAA,UAAUrM,KAAKq5C,WAC5Cx4C,UAAU,WACLhB,EAAKs7C,WACPt7C,EAAKk5C,WAAa,EAClBl5C,EAAKyjC,aAAavhC,MAAK,KAEvBlC,EAAKyjC,aAAavhC,MAAK,GACvBlC,EAAK85C,qBAAsB,EAC3B95C,EAAK2mC,WAAW4U,QAAU,EAC1Bv7C,EAAKsB,mBAAmBC,mBAKhCmlC,EAAFxlC,UAAAyI,mBAAE,WAAA,GAAF3J,GAAAG,IACIA,MAAKq7C,kBAELr7C,KAAK46C,gBAAwB,SAAExuC,KAAKC,EAAAA,UAAUrM,KAAKq5C,WAAWx4C,UAAU,SAAAiJ,GACtEA,EAAMwxC,MAAMlyC,QAAQ,SAAAgxC,GAAU,MAAAA,GAAOmB,WACrCzxC,EAAM0xC,QAAQpyC,QAAQ,SAAAgxC,GAAU,MAAAA,GAAOqB,eAGzCz7C,KAAK0mC,QAAQh9B,QAAQ0C,KAAKoV,EAAAA,UAAU,MAAOnV,EAAAA,UAAUrM,KAAKq5C,WAAWx4C,UAAU,WAC7EhB,EAAK67C,gBACL77C,EAAKk7C,0BAITxU,EAAFxlC,UAAA6kC,UAAE,WACM5lC,KAAKy4C,WACPz4C,KAAK27C,oBAITpV,EAAFxlC,UAAA4f,YAAE,SAAYjX,GAGNA,EAAR,UACM1J,KAAK26C,aAAa/tC,QAItB25B,EAAFxlC,UAAAC,YAAE,WACEhB,KAAKq5C,SAASzsC,OACd5M,KAAKq5C,SAASxsC,WACd7M,KAAK26C,aAAa9tC,YAIpB05B,EAAFxlC,UAAAm2B,OAAE,WACEl3B,KAAKm7C,UAAYn7C,KAAK4jC,QAAU5jC,KAAKyqB,QAIvC8b,EAAFxlC,UAAA0pB,KAAE,WAAA,GAAF5qB,GAAAG,MACQA,KAAKoC,UAAapC,KAAK0mC,SAAY1mC,KAAK0mC,QAAQlkC,SAAUxC,KAAK84C,aAInE94C,KAAK47C,aAAe57C,KAAKiX,QAAQrU,cAAcs7B,wBAG/Cl+B,KAAKs5C,iBAAmB7rC,SAASouC,iBAAiB77C,KAAKiX,QAAQrU,eAAe,cAE9E5C,KAAK84C,YAAa,EAClB94C,KAAKC,YAAYG,0BAA0B,MAC3CJ,KAAK87C,4BACL97C,KAAK+7C,0BACL/7C,KAAKmB,mBAAmBC,eAGxBpB,KAAK0L,QAAQ4uC,SAASn0B,eAAe/Z,KAAKyI,EAAAA,KAAK,IAAIhU,UAAU,WACvDhB,EAAKy5C,kBAAoBz5C,EAAK2mC,WAAW1b,YACzCjrB,EAAK2mC,WAAW1b,WAAWqB,iBAC7BtsB,EAAK2mC,WAAW1b,WAAWqB,eAAe9oB,MAAM24C,SAAcn8C,EAAKy5C,iBAA3E,UAME/S,EAAFxlC,UAAA6iC,MAAE,WACM5jC,KAAK84C,aACP94C,KAAK84C,YAAa,EAClB94C,KAAKC,YAAYG,0BAA0BJ,KAAKi8C,SAAW,MAAQ,OACnEj8C,KAAKmB,mBAAmBC,eACxBpB,KAAKw5C,eAUTjT,EAAFxlC,UAAA41B,WAAE,SAAWj1B,GACL1B,KAAK0mC,SACP1mC,KAAKk8C,qBAAqBx6C,IAW9B6kC,EAAFxlC,UAAA61B,iBAAE,SAAiBC,GACf72B,KAAKu5C,UAAY1iB,GAUnB0P,EAAFxlC,UAAA+1B,kBAAE,SAAkBD,GAChB72B,KAAKw5C,WAAa3iB,GASpB0P,EAAFxlC,UAAAg2B,iBAAE,SAAiBC,GACfh3B,KAAKoC,SAAW40B,EAChBh3B,KAAKmB,mBAAmBC,eACxBpB,KAAK26C,aAAa/tC,QAIpBpL,OAAFC,eAAM8kC,EAANxlC,UAAA,iBAAE,WACE,MAAOf,MAAK84C,4CAIdt3C,OAAFC,eAAM8kC,EAANxlC,UAAA,gBAAE,WACE,MAAOf,MAAKinC,SAAWjnC,KAAK46C,gBAAgB/jC,SAAW7W,KAAK46C,gBAAgB/jC,SAAS,oCAIvFrV,OAAFC,eAAM8kC,EAANxlC,UAAA,oBAAE,WACE,GAAIf,KAAKm8C,MACP,MAAO,EAGT,IAAIn8C,KAAKg5C,UAAW,CAClB,GAAMoD,GAAkBp8C,KAAK46C,gBAAgB/jC,SAAS7M,IAAI,SAAAowC,GAAU,MAAAA,GAAOiC,WAO3E,OALIr8C,MAAKi8C,UACPG,EAAgBE,UAIXF,EAAgBG,KAAK,MAG9B,MAAOv8C,MAAK46C,gBAAgB/jC,SAAS,GAAGwlC,2CAI1C9V,EAAFxlC,UAAAk7C,OAAE,WACE,QAAOj8C,KAAKiD,MAA2B,QAApBjD,KAAKiD,KAAKvB,OAI/B6kC,EAAFxlC,UAAAsiB,eAAE,SAAevZ,GACR9J,KAAKoC,WACRpC,KAAKm7C,UAAYn7C,KAAKw8C,mBAAmB1yC,GAAS9J,KAAKy8C,qBAAqB3yC,KAKxEy8B,EAAVxlC,UAAA07C,qBAAA,SAA+B3yC,GAC3B,GAAMwZ,GAAUxZ,EAAMwZ,QAChBo5B,EAAap5B,IAAY6Z,EAAAA,YAAc7Z,IAAY2Z,EAAAA,UACrD3Z,IAAY0Z,EAAAA,YAAc1Z,IAAY4Z,EAAAA,WACxB5Z,KAAYK,EAAAA,OAASL,IAAYM,EAAAA,QAGhC5jB,KAAKinC,UAAYn9B,EAAM6yC,SAAWD,GACnD5yC,EAAMqE,iBACNnO,KAAKyqB,QACKzqB,KAAKinC,UACfjnC,KAAKC,YAAY4jB,UAAU/Z,IAKvBy8B,EAAVxlC,UAAAy7C,mBAAA,SAA6B1yC,GACzB,GAAMwZ,GAAUxZ,EAAMwZ,QAChBo5B,EAAap5B,IAAY6Z,EAAAA,YAAc7Z,IAAY2Z,EAAAA,SACnD2f,EAAU58C,KAAKC,WAErB,IAAIqjB,IAAYC,EAAAA,MAAQD,IAAYG,EAAAA,IAClC3Z,EAAMqE,iBACNmV,IAAYC,EAAAA,KAAOq5B,EAAQp5B,qBAAuBo5B,EAAQl5B,wBACrD,IAAIg5B,GAAc5yC,EAAM6yC,OAE7B7yC,EAAMqE,iBACNnO,KAAK4jC,YACA,IAAKtgB,IAAYK,EAAAA,OAASL,IAAYM,EAAAA,QAAUg5B,EAAQC,WAGxD,CACL,GAAMC,GAAyBF,EAAQ1J,eAEvC0J,GAAQ/4B,UAAU/Z,GAEd9J,KAAKg5C,WAAa0D,GAAc5yC,EAAMizC,UAAYH,EAAQC,YAC1DD,EAAQ1J,kBAAoB4J,GAC9BF,EAAQC,WAAWG,4BATrBlzC,GAAMqE,iBACNyuC,EAAQC,WAAWG,yBAiBvBzW,EAAFxlC,UAAAk8C,cAAE,WACEj9C,KAAK25C,oBAAsB35C,KAAKm7C,UAChCn7C,KAAKmB,mBAAmBC,gBAG1BmlC,EAAFxlC,UAAA27B,SAAE,WACO18B,KAAKoC,WACRpC,KAAKg6C,UAAW,EAChBh6C,KAAK26C,aAAa/tC,SAQtB25B,EAAFxlC,UAAA47B,QAAE,WACE38B,KAAKg6C,UAAW,EAEXh6C,KAAKoC,UAAapC,KAAKm7C,YAC1Bn7C,KAAKw5C,aACLx5C,KAAKmB,mBAAmBC,eACxBpB,KAAK26C,aAAa/tC,SAOtB25B,EAAFxlC,UAAAm8C,YAAE,WAAA,GAAFr9C,GAAAG,IACIA,MAAKwmC,WAAW2W,eAAe/wC,KAAKyI,EAAAA,KAAK,IAAIhU,UAAU,WACrDhB,EAAKsB,mBAAmBwnB,gBACxB9oB,EAAKu9C,2BACLv9C,EAAKw9C,MAAMz6C,cAAcuwC,UAAYtzC,EAAKk5C,cAK9CxS,EAAFxlC,UAAAu8C,eAAE,WACE,MAAOt9C,MAAK44C,iBAAmB,OAAO54C,KAAK44C,iBAAiB2E,MAAU,IAIxE/7C,OAAFC,eAAM8kC,EAANxlC,UAAA,aAAE,WACE,OAAQf,KAAK46C,iBAAmB56C,KAAK46C,gBAAgB4C,2CAG/CjX,EAAVxlC,UAAAg6C,0CAGI9xC,SAAQC,UAAUC,KAAK,WACrBtJ,EAAKq8C,qBAAqBr8C,EAAK44C,UAAY54C,EAAK44C,UAAU/2C,MAAQ7B,EAAK+5B,WAQnE2M,EAAVxlC,UAAAm7C,qBAAA,SAA+Bx6C,aAC3B,IAAI1B,KAAKinC,UAAYvlC,EAAO,CAC1B,IAAKqnB,MAAMC,QAAQtnB,GACjB,KAAM+7C,KAGRz9C,MAAK46C,gBAAgBhR,QACrBloC,EAAM0H,QAAQ,SAACs0C,GAAsB,MAAA79C,GAAK89C,aAAaD,KACvD19C,KAAK49C,kBACA,CACL59C,KAAK46C,gBAAgBhR,OACrB,IAAMiU,GAAsB79C,KAAK29C,aAAaj8C,EAI1Cm8C,IACF79C,KAAKC,YAAY4B,cAAcg8C,GAInC79C,KAAKmB,mBAAmBC,gBAOlBmlC,EAAVxlC,UAAA48C,aAAA,SAAuBj8C,cACbm8C,EAAsB79C,KAAK0mC,QAAQj6B,KAAK,SAAC2tC,GAC7C,IAEE,MAAuB,OAAhBA,EAAO14C,OAAiB7B,EAAKo5C,aAAamB,EAAO14C,MAAQA,GAChE,MAAOo8C,GAKP,MAJIptC,GAAAA,aAEFqtC,QAAQC,KAAKF,IAER,IAQX,OAJID,IACF79C,KAAK46C,gBAAgBW,OAAOsC,GAGvBA,GAIDtX,EAAVxlC,UAAAs6C,qCACIr7C,MAAKC,YAAc,GAAIg+C,GAAAA,2BAAsCj+C,KAAK0mC,SAC/DwX,gBACAC,0BACA/9C,0BAA0BJ,KAAKi8C,SAAW,MAAQ,OAErDj8C,KAAKC,YAAYm+C,OAAOhyC,KAAKC,EAAAA,UAAUrM,KAAKq5C,WAAWx4C,UAAU,WAG/DhB,EAAK4C,QACL5C,EAAK+jC,UAGP5jC,KAAKC,YAAYiM,OAAOE,KAAKC,EAAAA,UAAUrM,KAAKq5C,WAAWx4C,UAAU,WAC3DhB,EAAKi5C,YAAcj5C,EAAKw9C,MAC1Bx9C,EAAKw+C,8BACKx+C,EAAKi5C,YAAej5C,EAAKonC,WAAYpnC,EAAKI,YAAY48C,YAChEh9C,EAAKI,YAAY48C,WAAWG,2BAM1BzW,EAAVxlC,UAAA26C,oCACU4C,EAAqB59C,EAAAA,MAAMV,KAAK0mC,QAAQh9B,QAAS1J,KAAKq5C,SAE5Dr5C,MAAKk6C,uBAAuB9tC,KAAKC,EAAAA,UAAUiyC,IAAqBz9C,UAAU,SAAAiJ,GACxEjK,EAAK0+C,UAAUz0C,EAAMorB,OAAQprB,EAAM00C,aAE/B10C,EAAM00C,cAAgB3+C,EAAKonC,UAAYpnC,EAAKi5C,aAC9Cj5C,EAAK+jC,QACL/jC,EAAK4C,WAMT/B,EAAAA,MAAJqJ,UAAA,GAAa/J,KAAK0mC,QAAQ18B,IAAI,SAAAowC,GAAU,MAAAA,GAAOvsB,iBACxCzhB,KAAKC,EAAAA,UAAUiyC,IACfz9C,UAAU,WACThB,EAAKsB,mBAAmBC,eACxBvB,EAAK86C,aAAa/tC,SAGtB5M,KAAKy+C,iBAIClY,EAAVxlC,UAAAw9C,UAAA,SAAoBnE,EAAmBoE,GACnC,GAAME,GAAc1+C,KAAK46C,gBAAgB+D,WAAWvE,EAEhC,OAAhBA,EAAO14C,OAAkB1B,KAAKg5C,WAKhCoB,EAAOvjC,SAAW7W,KAAK46C,gBAAgBW,OAAOnB,GAAUp6C,KAAK46C,gBAAgBa,SAASrB,GAElFp6C,KAAKinC,WACPjnC,KAAK49C,cAEDY,IACFx+C,KAAKC,YAAY4B,cAAcu4C,GAM/Bp6C,KAAKyC,YAhBT23C,EAAOqB,WACPz7C,KAAK46C,gBAAgBhR,QACrB5pC,KAAK4+C,kBAAkBxE,EAAO14C,QAmB5Bg9C,IAAgB1+C,KAAK46C,gBAAgB+D,WAAWvE,IAClDp6C,KAAK4+C,oBAGP5+C,KAAK26C,aAAa/tC,QAIZ25B,EAAVxlC,UAAA68C,uBACI,GAAI59C,KAAKinC,SAAU,CACjB,GAAM4X,GAAU7+C,KAAK0mC,QAAQvkC,SAC7BnC,MAAK46C,gBAAgB99B,KAAK,SAACE,EAAGC,GAAM,MAAA4hC,GAAQ/gC,QAAQd,GAAK6hC,EAAQ/gC,QAAQb,KACzEjd,KAAK26C,aAAa/tC,SAKd25B,EAAVxlC,UAAA69C,kBAAA,SAA4BE,GACxB,GAAIC,GAAmB,IAGrBA,GADE/+C,KAAKinC,SACQjnC,KAA4B,SAAEgK,IAAI,SAAAowC,GAAU,MAAAA,GAAO14C,QAEpD1B,KAAK6W,SAAY7W,KAA0B,SAAE0B,MAAQo9C,EAGrE9+C,KAAK45B,OAASmlB,EACd/+C,KAAKsnC,YAAYvlC,KAAKg9C,GACtB/+C,KAAKu5C,UAAUwF,GACf/+C,KAAKqnC,gBAAgBtlC,KAAK,GAAIq2C,IAAgBp4C,KAAM++C,IACpD/+C,KAAKmB,mBAAmBC,gBAIlBmlC,EAAVxlC,UAAA09C,yBACIz+C,KAAKy5C,WAAaz5C,KAAK0mC,QAAQ18B,IAAI,SAAAowC,GAAU,MAAAA,GAAO/rB,KAAIkuB,KAAK,MAOvDhW,EAAVxlC,UAAAg7C,mCACQ/7C,KAAKC,cACHD,KAAKm8C,MACPn8C,KAAKC,YAAYujB,qBAEjBxjB,KAAKC,YAAY4B,cAAc7B,KAAK46C,gBAAgB/jC,SAAS,MAM3D0vB,EAAVxlC,UAAAs9C,uCACI,GAAMW,GAAoBh/C,KAAKC,YAAYizC,iBAAmB,EACxD+L,EAAaC,EAA8BF,EAAmBh/C,KAAK0mC,QACrE1mC,KAAK4mC,aAET5mC,MAAKq9C,MAAMz6C,cAAcuwC,UAAYgM,EACnCH,EAAoBC,EACpBj/C,KAAKo/C,iBACLp/C,KAAKq9C,MAAMz6C,cAAcuwC,UA91BQ,MAo2BrC5M,EAAFxlC,UAAA0B,MAAE,WACEzC,KAAK0E,YAAY9B,cAAcH,SAIzB8jC,EAAVxlC,UAAAs+C,gBAAA,SAA0BjF,GACtB,MAAOp6C,MAAK0mC,QAAQ/oB,OAAO,SAAC2hC,EAAgBC,EAAoBt9C,GAC9D,WAAkB4M,KAAXywC,EAAwBlF,IAAWmF,EAAUt9C,MAAQ4M,GAAaywC,OACxEzwC,KAIG03B,EAAVxlC,UAAA+6C,qCACI,GAAM0D,GAAax/C,KAAKo/C,iBAClB3L,EAAQzzC,KAAKy/C,gBACbC,EAAcj8C,KAAKE,IAAI8vC,EAAQ+L,EAn3BF,KAo3B7BG,EAAwBlM,EAAQ+L,EAGhCI,EAAYD,EAAwBD,EAGtCG,EACA7/C,KAAKm8C,MAAQ,EAAIn8C,KAAKq/C,gBAAgBr/C,KAAK46C,gBAAgB/jC,SAAS,GAExEgpC,IAAwBX,EAA8BW,EAAsB7/C,KAAK0mC,QAC7E1mC,KAAK4mC,aAIT,IAAMkZ,GAAeJ,EAAc,CACnC1/C,MAAK+4C,WAAa/4C,KAAK+/C,wBAAwBF,EAAsBC,EAAcF,GACnF5/C,KAAK65C,SAAW75C,KAAKggD,yBAAyBH,EAAsBC,EAAcF,GAElF5/C,KAAKigD,4BAA4BL,IAUnCrZ,EAAFxlC,UAAAg/C,wBAAE,SAAwBj7C,EAAuBg7C,EACvBF,GACtB,GAAMJ,GAAax/C,KAAKo/C,iBAClBc,EAA4BV,EAAa16C,EACzCq7C,EAAmBX,EAAa,EAMhCY,EAAwBF,EAA4BJ,EAAeK,CACzE,OAAO18C,MAAKE,IAAIF,KAAKC,IAAI,EAAG08C,GAAwBR,IAItDrZ,EAAFxlC,UAAAs/C,cAAE,WAGE,MAAOrgD,MAAKi2B,eAAiB,KAAOj2B,KAAKg2B,WAAah2B,KAAKgnC,aAI7DT,EAAFxlC,UAAAu/C,mBAAE,WACE,MAAItgD,MAAKi2B,eACAj2B,KAAKi2B,gBAKTj2B,KAAK44C,kBAAoB54C,KAAKqgD,gBAC1B,KAGFrgD,KAAK44C,iBAAiB2H,UAAY,MAI3Cha,EAAFxlC,UAAAy/C,yBAAE,WACE,MAAIxgD,MAAKm7C,WAAan7C,KAAKC,aAAeD,KAAKC,YAAY48C,WAClD78C,KAAKC,YAAY48C,WAAWxuB,GAG9B,MAUDkY,EAAVxlC,UAAAq8C,oCACI,GAKIhC,GALEqF,EAAczgD,KAAKwmC,WAAW1b,WAAWqB,eAAe+R,wBACxDwiB,EAAe1gD,KAAK2L,eAAeg1C,kBACnCj0B,EAAQ1sB,KAAKi8C,SACb2E,EAAe5gD,KAAKinC,SAAW4Z,GACAjhD,EAIrC,IAAII,KAAKinC,SACPmU,EA37ByCx7C,OA47BpC,CACL,GAAIiX,GAAW7W,KAAK46C,gBAAgB/jC,SAAS,IAAM7W,KAAK0mC,QAAQoa,KAChE1F,GAAUvkC,GAAYA,EAASmhC,MA38BQp4C,GAHP,GAk9B7B8sB,IACH0uB,IAAY,EAId,IAAM2F,GAAe,GAAKN,EAAYvgC,KAAOk7B,GAAW1uB,EAAQk0B,EAAe,IACzEI,EAAgBP,EAAY5zB,MAAQuuB,EAAUsF,EAAavgC,OACxCuM,EAAQ,EAAIk0B,EAGjCG,GAAe,EACjB3F,GAAW2F,EAv8B4B,EAw8B9BC,EAAgB,IACzB5F,GAAW4F,EAz8B4B,GA+8BzChhD,KAAKwmC,WAAW4U,QAAU33C,KAAKo6B,MAAMud,GACrCp7C,KAAKwmC,WAAW1b,WAAWse,kBAQrB7C,EAAVxlC,UAAAi/C,yBAAA,SAAmCl7C,EAAuBg7C,EACxBF,GAC9B,GAGIqB,GAHEzB,EAAax/C,KAAKo/C,iBAClB8B,GAA0B1B,EAAax/C,KAAK47C,aAAajxC,QAAU,EACnEw2C,EAAsB19C,KAAK2rC,MAr/BE,IAq/B8BoQ,EAIjE,IAAIx/C,KAAK+5C,wBACP,MAAO,EAGT,IAAwB,IAApB/5C,KAAK+4C,WACPkI,EAA2Bn8C,EAAgB06C,MACtC,IAAIx/C,KAAK+4C,aAAe6G,EAAW,CACxC,GAAMwB,GAAsBphD,KAAKy/C,gBAAkB0B,EAC7CE,EAAuBv8C,EAAgBs8C,EAIzCE,EACA9B,GAAcx/C,KAAKy/C,gBAAkBD,EAtgCR,KAsgCgDA,CAMjFyB,GAA2BI,EAAuB7B,EAAa8B,MAK/DL,GAA2BnB,EAAeN,EAAa,CAMzD,OAAO/7C,MAAKo6B,OAAkC,EAA5BojB,EAAgCC,IAS5C3a,EAAVxlC,UAAAk/C,4BAAA,SAAsCL,GAClC,GAAMJ,GAAax/C,KAAKo/C,iBAClBsB,EAAe1gD,KAAK2L,eAAeg1C,kBAEnCY,EAAoBvhD,KAAK47C,aAAa7uB,IA3gCH,EA4gCnCy0B,EACFd,EAAa/1C,OAAS3K,KAAK47C,aAAa5uB,OA7gCH,EA+gCnCy0B,EAAiBh+C,KAAKi+C,IAAI1hD,KAAK65C,UAC/B8H,EACFl+C,KAAKE,IAAI3D,KAAKy/C,gBAAkBD,EA1iCD,KA2iC7BoC,EAAoBD,EAAmBF,EAAiBzhD,KAAK47C,aAAajxC,MAE5Ei3C,GAAoBJ,EACtBxhD,KAAK6hD,eAAeD,EAAmBJ,GAC9BC,EAAiBF,EAC3BvhD,KAAK8hD,iBAAiBL,EAAgBF,EAAmB3B,GAExD5/C,KAAK05C,iBAAmB15C,KAAK+hD,2BAKzBxb,EAAVxlC,UAAA8gD,eAAA,SAAyBD,EAA2BJ,GAEhD,GAAMQ,GAAwBv+C,KAAKo6B,MAAM+jB,EAAoBJ,EAI7DxhD,MAAK+4C,YAAciJ,EACnBhiD,KAAK65C,UAAYmI,EACjBhiD,KAAK05C,iBAAmB15C,KAAK+hD,0BAKzB/hD,KAAK+4C,YAAc,IACrB/4C,KAAK+4C,WAAa,EAClB/4C,KAAK65C,SAAW,EAChB75C,KAAK05C,iBAAmB,mBAKpBnT,EAAVxlC,UAAA+gD,iBAAA,SAA2BL,EAAwBF,EACxB3B,GAEvB,GAAMqC,GAAwBx+C,KAAKo6B,MAAM4jB,EAAiBF,EAW1D,IAPAvhD,KAAK+4C,YAAckJ,EACnBjiD,KAAK65C,UAAYoI,EACjBjiD,KAAK05C,iBAAmB15C,KAAK+hD,0BAKzB/hD,KAAK+4C,YAAc6G,EAIrB,MAHA5/C,MAAK+4C,WAAa6G,EAClB5/C,KAAK65C,SAAW,OAChB75C,KAAK05C,iBAAmB,gBAMpBnT,EAAVxlC,UAAAghD,mCACI,GAAMvC,GAAax/C,KAAKo/C,iBAClB8B,GAA0B1B,EAAax/C,KAAK47C,aAAajxC,QAAU,CAEzE,OAAO,QADSlH,KAAKi+C,IAAI1hD,KAAK65C,UAAYqH,EAAyB1B,EAAa,GACpF,UAIUjZ,EAAVxlC,UAAA0+C,yBACI,MAAOz/C,MAAK0mC,QAAQlkC,OAASxC,KAAK4mC,aAAapkC,QAIzC+jC,EAAVxlC,UAAAq+C,0BACI,MAxmCiC,GAwmC1Bp/C,KAAKs5C,kBAOd/S,EAAFxlC,UAAAmhD,kBAAE,SAAkBC,GAChBniD,KAAKoiD,iBAAmBD,EAAI5F,KAAK,MAOnChW,EAAFxlC,UAAAshD,iBAAE,WACEriD,KAAKyC,QACLzC,KAAKyqB,QAOPjpB,OAAFC,eAAM8kC,EAANxlC,UAAA,wBAAE,WACE,MAAOf,MAAK84C,aAAe94C,KAAKm8C,sDA/jCpCj3C,KAACC,EAAAA,UAADC,OAAAC,SAAA,aACE8F,SAAU,YACV7F,SAAU,6lDACVC,QAAF,w0DACEC,QAAF,WAAA,gBAAA,YACEC,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,OACEC,MACFuM,KAAA,UACMiwB,YAAN,KACI+f,kBAAJ,WACIC,oBAAJ,kBACIC,yBAAJ,uBACIC,uBAAJ,sBACIl0C,uBAAwB,sBACxBm0C,sBAAJ,aACIC,mBAAJ,gCACIC,8BAAJ,WACIC,0BAAJ,2BACIC,+BAAJ,6BACIC,8BAAJ,WACIC,6BAA8B,aAC9BC,8BAA+B,WAC/Bj9C,MAAJ,aACIq4B,YAAJ,yBACIF,UAAJ,aACIC,SAAJ,aAEAllB,YACA2+B,GAAAC,eACAD,GAAAI,eAEAtlC,YACAC,QAAAswC,GAAArwC,YAAA0zB,IACA3zB,QAAAuwC,GAAAtwC,YAAA0zB,8FAzLArhC,KAAE8H,EAAAA,SAMF9H,KAAEmT,KAYFnT,KAAE4N,EAAAA,aAmBF5N,KAAEkB,EAAAA,eAAFC,aAAAnB,KAAAoB,EAAAA,aAzBApB,KAAEk+C,EAAAA,OAAF/8C,aAAAnB,KAAAoB,EAAAA,aA9BApB,KAAQm+C,EAAAA,mBAARh9C,aAAAnB,KAAAoB,EAAAA,aAgDApB,KAA6Do+C,GAA7Dj9C,aA4ZKnB,KA5ZLoB,EAAAA,aAAApB,KAA8Bq+C,EAAAA,UAA9Bl9C,aAAAnB,KAAAwyC,EAAAA,OAAAxyC,KAAAoB,EAAAA,aAkBApB,SAAQ2J,GAARxI,aAAAnB,KAAA8J,EAAAA,UA4Ya5J,MA5Yb,gBAlBAF,SAAkD2J,GAAlDxI,aAAAnB,KA+ZK4J,EAAAA,OA/ZL1J,MAAA8yC;EAiaA3R,EAAAhgC,wGAlJAigC,aAAAthC,KAAAsB,EAAAA,UAAApB,MAAAqhC,EAAAA,uBAGAC,UAAAxhC,KAAAqO,EAAAA,gBAAAnO,MAAAuhC,IAAApF,aAAA,MAGAqF,eAAA1hC,KAAAqO,EAAAA,gBAAAnO,MAAAyhC,MAGA/d,aAAA5jB,KAAAuB,EAAAA,QAGAqgC,gBAAA5hC,KAAA6tB,EAAAA,aAAkB3tB,MAAlB2hC,MAGAC,cAAA9hC,KAAAuB,EAAAA,QAGAsyB,WAAA7zB,KAAAuB,EAAAA,QAGAwgC,WAAA/hC,KAAAuB,EAAAA,QAQAygC,yBAAAhiC,KAAAuB,EAAAA,QAQA0gC,cAAAjiC,KAAAuB,EAAAA,QAWA/E,QAAAwD,KAAAuB,EAAAA,QAWAuvB,YAAA9wB,KAAAuB,EAAAA,MAAQrB,MAAR,gBAcA6wB,iBAAA/wB,KAAAuB,EAAAA,MAAArB,MAAA,qBAWAgiC,oBAAAliC,KAAAuB,EAAAA,QAGA4nB,KAAAnpB,KAAAuB,EAAAA,QAGA68B,eAAAp+B,KAAAyB,EAAAA,SAGAg+B,gBAAQz/B,KAARyB,EAAAA,OAAAvB,MAAA,YAoBAy/B,gBAAA3/B,KAAAyB,EAAAA,OAAAvB,MAAA,YAGAiiC,kBAAAniC,KAAAyB,EAAAA,SAIA2gC,cAAApiC,KAAAyB,EAAAA,UAYA4/B,mCgE5cA,sBAgBArhC,KAAC+J,EAAAA,SAAD7J,OACE8J,SACEC,EAAAA,aACAka,EAAAA,cACAke,GACAn4B,IAEFI,SAAUg4B,GAAoBjB,GAAWQ,GAAkBQ,GAAiBn4B,IAC5EQ,cAAe22B,GAAWQ,IAC1Bp0B,WAAY80B,QAzBdC,KCiBaC,IAIXC,aAAc3wB,EAAAA,QAAQ,SACpBC,EAAAA,MAAM,wBAAyB7T,EAAAA,OAAOC,UAAW,cACjD4T,EAAAA,MAAM,UAAW7T,EAAAA,OAAOC,UAAW,cACnC8T,EAAAA,WAAW,eAAgBC,EAAAA,QAAQ,yCACnCD,EAAAA,WAAW,cAAeC,EAAAA,QAAQ,0ChEwBzBwwB,GAAqB,GAWrBC,GACT,GAAIpoB,GAAAA,eAAqC,+BAQhCqoB,IACXn1B,QAASk1B,GACT9X,MAAO7C,EAAAA,SACP8C,WAAY+X,IAWDC,GACT,GAAIvoB,GAAAA,eAAyC,+BAC3CC,WAAY,OACZC,QAASsoB,mBA0Gb,QAAFC,GACYxe,EACAjlB,EACA0jC,EACA5nB,EACA9U,EACA4E,EACA+3B,EACApW,EACqCqW,EACzBrlC,EAEVslC,GAZZ,GAAF1oC,GAAAG,IACYA,MAAZ2pB,SAAYA,EACA3pB,KAAZ0E,YAAYA,EACA1E,KAAZooC,kBAAYA,EACApoC,KAAZwgB,kBAAYA,EACAxgB,KAAZ0L,QAAYA,EACA1L,KAAZsQ,UAAYA,EACAtQ,KAAZqoC,eAAYA,EACAroC,KAAZiyB,cAAYA,EACqCjyB,KAAjDsoC,gBAAiDA,EACzBtoC,KAAxBiD,KAAwBA,EAEVjD,KAAduoC,gBAAcA,EAvFdvoC,KAAA0hB,UAAuC,QACvC1hB,KAAA2gC,WAA+B,EAmC/B3gC,KAAAwoC,UAA4CxoC,KAAKuoC,gBAAgBC,UAGjExoC,KAAAyoC,UAA4CzoC,KAAKuoC,gBAAgBE,UAEjEzoC,KAAA0oC,SAAqB,GA6BrB1oC,KAAA2oC,iBAA6B,GAAI/a,KAGjC5tB,KAAA8Y,WAAgC,GAAIjN,GAAAA,OAgBhC,IAAME,GAAuBrH,EAAY9B,aAIpC0N,GAAUs4B,IAMiB,UAArB78B,EAAQ88B,UAA6C,aAArB98B,EAAQ88B,WAMjD98B,EAAQ1I,MAAMylC,iBAAmB/8B,EAAQ1I,MAAM0lC,WAAa,KAX5D/oC,KAAK2oC,iBAAiBla,IAAI,aAAc,WAAM,MAAA5uB,GAAKiN,SACnD9M,KAAK2oC,iBAAiBla,IAAI,aAAc,WAAM,MAAA5uB,GAAKkN,SAEnD/M,KAAK2oC,iBACFv/B,QAAQ,SAAC4/B,EAAUl/B,GAAU,MAAApF,GAAY9B,cAAcqmC,iBAAiBn/B,EAAOk/B,MAUpF/W,EAAcE,QAAQpmB,GAASK,KAAKC,EAAAA,UAAUrM,KAAK8Y,aAAajY,UAAU,SAAA0I,GAEnEA,EAEiB,aAAXA,GACTmC,EAAQ+c,IAAI,WAAM,MAAA5oB,GAAKiN,SAFvBpB,EAAQ+c,IAAI,WAAM,MAAA5oB,GAAKkN,KAAK,OApOpC,MA2HAvL,QAAAC,eAAM0mC,EAANpnC,UAAA,gBAAA,WAAoC,MAAOf,MAAK0hB,eAC9C,SAAahgB,GACPA,IAAU1B,KAAK0hB,YACjB1hB,KAAK0hB,UAAYhgB,EAEb1B,KAAK6kB,cACP7kB,KAAKkpC,kBAEDlpC,KAAKmpC,kBACPnpC,KAAqB,iBAAE8M,KAAK,GAG9B9M,KAAK6kB,YAAYukB,oDAOzB5nC,OAAAC,eAAM0mC,EAANpnC,UAAA,gBAAA,WAA4B,MAAOf,MAAK2gC,eACtC,SAAaj/B,GACX1B,KAAK2gC,UAAYt4B,EAAAA,sBAAsB3G,GAGnC1B,KAAK2gC,WACP3gC,KAAK+M,KAAK,oCAchBvL,OAAAC,eAAM0mC,EAANpnC,UAAA,eAAA,WAAkB,MAAOf,MAAK0oC,cAC5B,SAAYhnC,GACV1B,KAAKqoC,eAAegB,kBAAkBrpC,KAAK0E,YAAY9B,cAAe5C,KAAK0oC,UAG3E1oC,KAAK0oC,SAAoB,MAAThnC,GAAgB,GAAGA,GAAQ6P,OAAS,IAE/CvR,KAAK0oC,UAAY1oC,KAAKspC,oBACzBtpC,KAAK+M,KAAK,IAEV/M,KAAKupC,wBACLvpC,KAAKqoC,eAAemB,SAASxpC,KAAK0E,YAAY9B,cAAe5C,KAAK0qB,2CAMxElpB,OAAAC,eAAM0mC,EAANpnC,UAAA,oBAAA,WAAuB,MAAOf,MAAKypC,mBACjC,SAAiB/nC,GACf1B,KAAKypC,cAAgB/nC,EACjB1B,KAAKmpC,kBACPnpC,KAAK0pC,iBAAiB1pC,KAAKypC,gDAuD/BtB,EAAFpnC,UAAAC,YAAE,WAAA,GAAFnB,GAAAG,IACQA,MAAK6kB,cACP7kB,KAAK6kB,YAAYmB,UACjBhmB,KAAKmpC,iBAAmB,MAIrBnpC,KAAKsQ,UAAUs4B,MAClB5oC,KAAK2oC,iBAAiBv/B,QAAQ,SAAC4/B,EAAUl/B,GACvC,MAAAjK,GAAK6E,YAAY9B,cAAc+mC,oBAAoB7/B,EAAOk/B,KAE5DhpC,KAAK2oC,iBAAiBiB,SAGxB5pC,KAAK8Y,WAAWlM,OAChB5M,KAAK8Y,WAAWjM,WAEhB7M,KAAKqoC,eAAegB,kBAAkBrpC,KAAK0E,YAAY9B,cAAe5C,KAAK0qB,SAC3E1qB,KAAKiyB,cAAcI,eAAeryB,KAAK0E,YAAY9B,gBAIrDulC,EAAFpnC,UAAA+L,KAAE,SAAK+8B,GAAL,GAAFhqC,GAAAG,IACI,QADJ,KAAA6pC,IAAOA,EAAgB7pC,KAAKwoC,YACpBxoC,KAAKoC,UAAapC,KAAK0qB,QAA3B,CAEA,GAAMI,GAAa9qB,KAAKyrB,gBAExBzrB,MAAK8pC,UACL9pC,KAAK+pC,QAAU/pC,KAAK+pC,SAAW,GAAI3e,GAAAA,gBAAgB4e,GAAkBhqC,KAAKwgB,mBAC1ExgB,KAAKmpC,iBAAmBre,EAAWjJ,OAAO7hB,KAAK+pC,SAASze,SACxDtrB,KAAKmpC,iBAAiBc,cACnB79B,KAAKC,EAAAA,UAAUrM,KAAK8Y,aACpBjY,UAAU,WAAM,MAAAhB,GAAKiqC,YACxB9pC,KAAK0pC,iBAAiB1pC,KAAKypC,eAC3BzpC,KAAKupC,wBACLvpC,KAAqB,iBAAE8M,KAAK+8B,KAI9B1B,EAAFpnC,UAAAgM,KAAE,SAAK88B,OAAP,KAAAA,IAAOA,EAAgB7pC,KAAKyoC,WACpBzoC,KAAKmpC,kBACPnpC,KAAKmpC,iBAAiBp8B,KAAK88B,IAK/B1B,EAAFpnC,UAAAm2B,OAAE,WACEl3B,KAAKspC,oBAAsBtpC,KAAK+M,OAAS/M,KAAK8M,QAIhDq7B,EAAFpnC,UAAAuoC,kBAAE,WACE,QAAStpC,KAAKmpC,kBAAoBnpC,KAAKmpC,iBAAiBe,aAI1D/B,EAAFpnC,UAAAsiB,eAAE,SAAeb,GACTxiB,KAAKspC,qBAAuB9mB,EAAEc,UAAY6mB,EAAAA,SAC5C3nB,EAAEgU,kBACFx2B,KAAK+M,KAAK,KAKdo7B,EAAFpnC,UAAAqpC,gBAAE,WACEpqC,KAAK+M,KAAK/M,KAAKuoC,gBAAgB8B,oBAIzBlC,EAAVpnC,UAAA0qB,oCACI,IAAIzrB,KAAK6kB,YACP,MAAO7kB,MAAK6kB,WAId,IAAMylB,GAAWtqC,KAAK2pB,SAAStgB,WAC5BkhC,oBAAoBvqC,KAAK0E,aACzB8lC,sBAAsB,gBACtBC,wBAAuB,GACvBC,mBAAmB,GAEhBC,EAAsB3qC,KAAKooC,kBAC9BwC,4BAA4B5qC,KAAK0E,YA2BpC,OAzBA4lC,GAASO,yBAAyBF,GAElCL,EAASQ,gBAAgB1+B,KAAKC,EAAAA,UAAUrM,KAAK8Y,aAAajY,UAAU,SAAAqL,GAC9DrM,EAAKspC,kBACHj9B,EAAO6+B,yBAAyBC,kBAAoBnrC,EAAKspC,iBAAiBe,aAG5ErqC,EAAK6L,QAAQ+c,IAAI,WAAM,MAAA5oB,GAAKkN,KAAK,OAKvC/M,KAAK6kB,YAAc7kB,KAAK2pB,SAASsD,QAC/BlQ,UAAW/c,KAAKiD,KAChBupB,iBAAkB8d,EAClBxhB,WA7R6B,oBA8R7BmiB,eAAgBjrC,KAAKsoC,oBAGvBtoC,KAAKkpC,kBAELlpC,KAAK6kB,YAAYoH,cACd7f,KAAKC,EAAAA,UAAUrM,KAAK8Y,aACpBjY,UAAU,WAAM,MAAAhB,GAAKiqC,YAEjB9pC,KAAK6kB,aAINsjB,EAAVpnC,UAAA+oC,mBACQ9pC,KAAK6kB,aAAe7kB,KAAK6kB,YAAYjD,eACvC5hB,KAAK6kB,YAAY7C,SAGnBhiB,KAAKmpC,iBAAmB,MAIlBhB,EAAVpnC,UAAAmoC,2BACI,GAAM7/B,GACFrJ,KAAgB,YAAEkrC,YAA4B,iBAC5C3hC,EAASvJ,KAAKmrC,aACdC,EAAUprC,KAAKqrC,qBAErBhiC,GAASiiC,eACb1gB,MAAUrhB,EAAOgiC,KAASH,EAAQG,MAClC3gB,MAAUrhB,EAAOiiC,SAAaJ,EAAQI,aAQpCrD,EAAFpnC,UAAAoqC,WAAE,WACE,GAEIM,GAFEC,GAAS1rC,KAAKiD,MAA2B,OAAnBjD,KAAKiD,KAAKvB,MAChC2H,EAAWrJ,KAAKqJ,QAGtB,IAAgB,SAAZA,GAAmC,SAAZA,EACzBoiC,GAAkBE,QAAS,SAAUC,QAAqB,SAAZviC,EAAsB,MAAQ,cACvE,IACO,UAAZA,GACa,QAAZA,GAAsBqiC,GACV,SAAZriC,IAAwBqiC,EACzBD,GAAkBE,QAAS,QAASC,QAAS,cACxC,CAAA,KACO,SAAZviC,GACa,SAAZA,GAAuBqiC,GACX,QAAZriC,IAAuBqiC,GAGxB,KAAMG,IAAkCxiC,EAFxCoiC,IAAkBE,QAAS,MAAOC,QAAS,UAK7C,GAAJltB,GAAA1e,KAAA8rC,gBAAAL,EAAAE,QAAAF,EAAAG,QAEI,QACEL,KAAME,EACND,UAAWG,QAJjBjtB,EAAAsd,EAI6B4P,QAJ7BltB,EAAAwd,KASEiM,EAAFpnC,UAAAsqC,oBAAE,WACE,GAEIU,GAFEL,GAAS1rC,KAAKiD,MAA2B,OAAnBjD,KAAKiD,KAAKvB,MAChC2H,EAAWrJ,KAAKqJ,QAGtB,IAAgB,SAAZA,EACF0iC,GAAmBC,SAAU,SAAUC,SAAU,cAC5C,IAAgB,SAAZ5iC,EACT0iC,GAAmBC,SAAU,SAAUC,SAAU,WAC5C,IACO,UAAZ5iC,GACa,QAAZA,GAAsBqiC,GACV,SAAZriC,IAAwBqiC,EACzBK,GAAmBC,SAAU,MAAOC,SAAU,cACzC,CAAA,KACO,SAAZ5iC,GACa,SAAZA,GAAuBqiC,GACX,QAAZriC,IAAuBqiC,GAGxB,KAAMG,IAAkCxiC,EAFxC0iC,IAAmBC,SAAU,QAASC,SAAU,UAKlD,GAAJvtB,GAAA1e,KAAA8rC,gBAAAC,EAAAC,SAAAD,EAAAE,SAEI,QACEV,KAAMQ,EACNP,UAAWQ,SAJjBttB,EAAAsd,EAI8BiQ,SAJ9BvtB,EAAAwd,KASUiM,EAAVpnC,UAAAwoC,2CAGQvpC,MAAKmpC,mBACPnpC,KAAKmpC,iBAAiBze,QAAU1qB,KAAK0qB,QACrC1qB,KAAKmpC,iBAAiB9H,gBAEtBrhC,KAAK0L,QAAQkd,iBAAiBzC,eAAe/Z,KAC3CyI,EAAAA,KAAK,GACLxI,EAAAA,UAAUrM,KAAK8Y,aACfjY,UAAU,WACNhB,EAAKspC,kBACPtpC,EAAgB,YAAEupC,qBAOlBjB,EAAVpnC,UAAA2oC,iBAAA,SAA2BwC,GACnBlsC,KAAKmpC,mBACPnpC,KAAKmpC,iBAAiB+C,aAAeA,EACrClsC,KAAKmpC,iBAAiB9H,kBAKlB8G,EAAVpnC,UAAA+qC,gBAAA,SAA0B9P,EAA4BE,GAelD,MAdsB,UAAlBl8B,KAAKqJ,UAA0C,UAAlBrJ,KAAKqJ,SAC1B,QAAN6yB,EACFA,EAAI,SACW,WAANA,IACTA,EAAI,OAGI,QAANF,EACFA,EAAI,QACW,UAANA,IACTA,EAAI,QAIAA,EAAZA,EAAeE,EAAfA,mBAzXAh3B,KAACmJ,EAAAA,UAADjJ,OACEC,SAAU,eACV8F,SAAU,aACVpF,MACE2rB,cAAe,SACf2M,YAAa,yBACb8N,aAAc,6DA5FlBjnC,KAAEioB,EAAAA,UAeFjoB,KAAE4N,EAAAA,aAZF5N,KAAEknC,EAAAA,mBAmBFlnC,KAAE6M,EAAAA,mBAHF7M,KAAE8H,EAAAA,SAZF9H,KAAQ0J,EAAAA,WAhBR1J,KAAQmnC,EAAAA,gBAARnnC,KAAuB4zB,EAAAA,eAiMvB5zB,SAAA2J,GAAAxI,aAAAnB,KAAK4J,EAAAA,OAAL1J,MAAY0iC,QAhMZ5iC,KAAQkB,EAAAA,eAARC,aAAAnB,KAiMKoB,EAAAA,aACLpB,SAAA2J,GAAAxI,aAAAnB,KAAKoB,EAAAA,WAALpB,KAAiB4J,EAAAA,OAAjB1J,MAAwB6iC,2BAjFxB5+B,WAAAnE,KAAGuB,EAAAA,MAAHrB,MAAS,wBAmBThD,WAAA8C,KAAGuB,EAAAA,MAAHrB,MAAS,wBAYTojC,YAAAtjC,KAAGuB,EAAAA,MAAHrB,MAAS,yBAGTqjC,YAAAvjC,KAAGuB,EAAAA,MAAHrB,MAAS,yBAKTslB,UAAAxlB,KAAGuB,EAAAA,MAAHrB,MAAS,gBAiBT8mC,eAAAhnC,KAAGuB,EAAAA,MAAHrB,MAAS,sBAlLT+iC,mBAmhBE,QAAF6B,GACY7oC,EACA2oB,GADA9pB,KAAZmB,mBAAYA,EACAnB,KAAZ8pB,oBAAYA,EAbZ9pB,KAAAssC,YAAmC,UAGnCtsC,KAAAusC,qBAAyC,EAGzCvsC,KAAAwsC,QAA2C,GAAI3gC,GAAAA,QAG/C7L,KAAAysC,WAA4CzsC,KAAK8pB,oBAAoBgC,QAAQC,EAAAA,YAAYC,SArgBzF,MA+gBEge,GAAFjpC,UAAA+L,KAAE,SAAK+8B,GAAL,GAAFhqC,GAAAG,IAEQA,MAAK0sC,gBACPlnB,aAAaxlB,KAAK0sC,gBAIpB1sC,KAAKusC,qBAAsB,EAC3BvsC,KAAK2sC,eAAiB7mB,WAAW,WAC/BjmB,EAAKysC,YAAc,UAInBzsC,EAAKwhC,iBACJwI,IAOLG,EAAFjpC,UAAAgM,KAAE,SAAK88B,GAAL,GAAFhqC,GAAAG,IAEQA,MAAK2sC,gBACPnnB,aAAaxlB,KAAK2sC,gBAGpB3sC,KAAK0sC,eAAiB5mB,WAAW,WAC/BjmB,EAAKysC,YAAc,SAInBzsC,EAAKwhC,iBACJwI,IAILG,EAAFjpC,UAAAkpC,YAAE,WACE,MAAOjqC,MAAKwsC,QAAQrmB,gBAItB6jB,EAAFjpC,UAAAmpC,UAAE,WACE,MAA4B,YAArBlqC,KAAKssC,aAGdtC,EAAFjpC,UAAA6rC,gBAAE,WACE5sC,KAAKusC,qBAAsB,GAG7BvC,EAAFjpC,UAAA8rC,eAAE,SAAe/iC,GACb,GAAM2Y,GAAU3Y,EAAkC,OAElC,YAAZ2Y,GAAyBziB,KAAKkqC,aAChClqC,KAAKwsC,QAAQ5/B,OAGC,YAAZ6V,GAAqC,WAAZA,IAC3BziB,KAAKusC,qBAAsB,IAS/BvC,EAAFjpC,UAAA+rC,uBAAE,WACM9sC,KAAKusC,qBACPvsC,KAAK+M,KAAK,IASdi9B,EAAFjpC,UAAAsgC,cAAE,WACErhC,KAAKmB,mBAAmBC,+BAhI5B8D,KAACC,EAAAA,UAADC,OAAAC,SAAA,wBACEC,SAAU,mOACVC,QAAF,wVACEE,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,OACEoT,YAAayuB,GAAfC,cACE7hC,2GAKEgnC,cAAJ,wGAzeA/C,iCiEZA,sBAmBA9kC,KAAC+J,EAAAA,SAAD7J,OACE8J,SACE89B,EAAAA,WACA79B,EAAAA,aACAka,EAAAA,cACAja,IAEFI,SAAU24B,GAAY6B,GAAkB56B,IACxCQ,cAAeu4B,GAAY6B,IAC3B1gB,iBAAkB0gB,IAClBr3B,WAAYo1B,QA7BdkF,gCCsBAjtC,KAAA0J,QAAoC,GAAImC,GAAAA,QAGxC7L,KAAAktC,kBAA8B,kBAG9BltC,KAAAmtC,cAA0B,YAG1BntC,KAAAotC,kBAA8B,gBAG9BptC,KAAAqtC,eAA2B,aAG3BrtC,KAAAstC,cAA0B,YAG1BttC,KAAAutC,cAAkB,SAACjvB,EAAcc,EAAkB5c,GAC/C,GAAc,GAAVA,GAA2B,GAAZ4c,EAAiB,MAAO,QAAQ5c,CAEnDA,GAASiB,KAAKC,IAAIlB,EAAQ,EAE1B,IAAM0c,GAAaZ,EAAOc,CAO1B,OAAUF,GAAa,EAA3B,OAJqBA,EAAa1c,EAC1BiB,KAAKE,IAAIub,EAAaE,EAAU5c,GAChC0c,EAAaE,GAErB,OAAiD5c,GApDjD,sBAgBA0C,KAACgoB,EAAAA,WAAD9nB,OAAaua,WAAY,8GAhBzB6tB,KA8DaC,IAEX76B,QAAS46B,GACTxd,OAAQ,GAAI1pB,GAAAA,SAAY,GAAIinB,GAAAA,SAAYigB,KACxCvd,WAAYyd,ICnCdC,GAAA,yBA/BA,MAAAA,MAkDAC,GAAA,yBAlDA,MAAAA,MAmDaC,GAAoBngB,EAAiBkgB,mBAkFhD,QAAFE,GAAqBxd,EACCnvB,GADpB,GAAFtB,GAEIsH,EAFJC,KAAApH,OAAAA,WAAqBH,GAArBywB,MAAqBA,EACCzwB,EAAtBsB,mBAAsBA,EArDtBtB,EAAAkuC,WAAuB,EASvBluC,EAAAmuC,QAAoB,EAkBpBnuC,EAAAouC,oBAQApuC,EAAAquC,eAA0B,EAS1BruC,EAAAsuC,uBAAkC,EAGlCtuC,EAAAye,KAAqD,GAAIvW,GAAAA,aAQrDlI,EAAKuuC,aAAe9d,EAAM5mB,QAAQ7I,UAAU,WAAM,MAAAhB,GAAKsB,mBAAmBC,mBAR9E,MA1DkCgH,GAAlC0lC,EAAA3mC,GAMA3F,OAAAC,eAAMqsC,EAAN/sC,UAAA,iBAAA,WAA4B,MAAOf,MAAK+tC,gBACtC,SAAcrsC,GACZ1B,KAAK+tC,WAAatqC,KAAKC,IAAI4E,EAAAA,qBAAqB5G,GAAQ,GACxD1B,KAAKmB,mBAAmBC,gDAM5BI,OAAAC,eAAMqsC,EAAN/sC,UAAA,cAAA,WAAyB,MAAOf,MAAKguC,aACnC,SAAWtsC,GACT1B,KAAKguC,QAAU1lC,EAAAA,qBAAqB5G,GACpC1B,KAAKmB,mBAAmBC,gDAM5BI,OAAAC,eAAMqsC,EAAN/sC,UAAA,gBAAA,WAA2B,MAAOf,MAAKquC,eACrC,SAAa3sC,GACX1B,KAAKquC,UAAY5qC,KAAKC,IAAI4E,EAAAA,qBAAqB5G,GAAQ,GACvD1B,KAAKsuC,mEAMT9sC,OAAAC,eAAMqsC,EAAN/sC,UAAA,uBAAA,WAAoC,MAAOf,MAAKiuC,sBAC9C,SAAoBvsC,GAClB1B,KAAKiuC,kBAAoBvsC,OAAasI,IAAI,SAAAukC,GAAK,MAAAjmC,GAAAA,qBAAqBimC,KACpEvuC,KAAKsuC,mEAMT9sC,OAAAC,eAAMqsC,EAAN/sC,UAAA,oBAAA,WAAgC,MAAOf,MAAKkuC,mBAC1C,SAAiBxsC,GACf1B,KAAKkuC,cAAgB7lC,EAAAA,sBAAsB3G,oCAO/CF,OAAAC,eAAMqsC,EAAN/sC,UAAA,4BAAA,WAAwC,MAAOf,MAAKmuC,2BAClD,SAAyBzsC,GACvB1B,KAAKmuC,sBAAwB9lC,EAAAA,sBAAsB3G,oCAgBrDosC,EAAF/sC,UAAA8f,SAAE,WACE7gB,KAAKwuC,cAAe,EACpBxuC,KAAKsuC,kCACLtuC,KAAKivB,oBAGP6e,EAAF/sC,UAAAC,YAAE,WACEhB,KAAKouC,aAAantC,eAIpB6sC,EAAF/sC,UAAA0tC,SAAE,WACE,GAAKzuC,KAAK0uC,cAAV,CAEA,GAAMC,GAAoB3uC,KAAKmf,SAC/Bnf,MAAKmf,YACLnf,KAAK4uC,eAAeD,KAItBb,EAAF/sC,UAAA8tC,aAAE,WACE,GAAK7uC,KAAK8uC,kBAAV,CAEA,GAAMH,GAAoB3uC,KAAKmf,SAC/Bnf,MAAKmf,YACLnf,KAAK4uC,eAAeD,KAItBb,EAAF/sC,UAAAguC,UAAE,WAEE,GAAK/uC,KAAK8uC,kBAAV,CAEA,GAAMH,GAAoB3uC,KAAKmf,SAC/Bnf,MAAKmf,UAAY,EACjBnf,KAAK4uC,eAAeD,KAItBb,EAAF/sC,UAAAiuC,SAAE,WAEE,GAAKhvC,KAAK0uC,cAAV,CAEA,GAAMC,GAAoB3uC,KAAKmf,SAC/Bnf,MAAKmf,UAAYnf,KAAKivC,mBACtBjvC,KAAK4uC,eAAeD,KAItBb,EAAF/sC,UAAA+tC,gBAAE,WACE,MAAO9uC,MAAKmf,WAAa,GAAsB,GAAjBnf,KAAKof,UAIrC0uB,EAAF/sC,UAAA2tC,YAAE,WACE,GAAMQ,GAAgBlvC,KAAKivC,kBAC3B,OAAOjvC,MAAKmf,UAAY+vB,GAAkC,GAAjBlvC,KAAKof,UAIhD0uB,EAAF/sC,UAAAkuC,iBAAE,WACE,MAAOxrC,MAAK+b,KAAKxf,KAAKwC,OAASxC,KAAKof,UAAY,GAYlD0uB,EAAF/sC,UAAAouC,gBAAE,SAAgB/vB,GAGd,GAAMF,GAAalf,KAAKmf,UAAYnf,KAAKof,SACnCuvB,EAAoB3uC,KAAKmf,SAE/Bnf,MAAKmf,UAAY1b,KAAK2rC,MAAMlwB,EAAaE,IAAa,EACtDpf,KAAKof,SAAWA,EAChBpf,KAAK4uC,eAAeD,IAOdb,EAAV/sC,UAAAutC,2CACStuC,KAAKwuC,eAGLxuC,KAAKof,WACRpf,KAAKquC,UAA2C,GAA/BruC,KAAKqvC,gBAAgB7sC,OAClCxC,KAAKqvC,gBAAgB,GAhNL,IAoNtBrvC,KAAKsvC,0BAA4BtvC,KAAKqvC,gBAAgBv+B,SAES,IAA3D9Q,KAAKsvC,0BAA0BxxB,QAAQ9d,KAAKof,WAC9Cpf,KAAKsvC,0BAA0B16B,KAAK5U,KAAKof,UAI3Cpf,KAAKsvC,0BAA0BxyB,KAAK,SAACE,EAAGC,GAAM,MAAAD,GAAIC,IAClDjd,KAAKmB,mBAAmBC,iBAIlB0sC,EAAV/sC,UAAA6tC,eAAA,SAAyBD,GACrB3uC,KAAKse,KAAKvc,MACR4sC,kBAANA,EACMxvB,UAAWnf,KAAKmf,UAChBC,SAAUpf,KAAKof,SACf5c,OAAQxC,KAAKwC,yBApMnB0C,KAACC,EAAAA,UAADC,OAAAC,SAAA,gBACE8F,SAAU,eACV7F,SAAU,u1EACVC,QAAF,8xBACEQ,MACFC,MAAA,iBAEAJ,gBAAAC,EAAAA,wBAAAC,OACAL,cAAAC,EAAAA,kBAAAC,mFAvDAmoC,EAAAvnC,mEAgEA6Y,WAAAla,KAAAuB,EAAAA,QASA4oC,kBAAAnqC,KAAAuB,EAAAA,QASA8oC,eAAArqC,KAAAuB,EAAAA,QASA+oC,uBAAAtqC,KAAQuB,EAAAA,QASR6X,OAAApZ,KAAAyB,EAAAA,UAiBAmnC,mCChIA,sBAiBA5oC,KAAC+J,EAAAA,SAAD7J,OACE8J,SACEC,EAAAA,aACAwK,GACA+tB,GACAuF,IAEFz9B,SAAUs+B,IACVl+B,cAAek+B,IACfn7B,WAAY86B,QA1BdgC,KCwBAC,GAAA,WACE,QAAFA,GAAqBhrC,GAAA1E,KAArB0E,YAAqBA,EAzBrB,MAAAgrC,MA4BaC,GAA2B3oC,EAAW0oC,GAAoB,WAGnEE,GAAgB,iBA2BlB,QAAFC,GAAqBnrC,EAC2C6wB,GAD9D,GAAF11B,GAEIsH,EAFJC,KAAApH,KAEU0E,IAFV1E,WAAqBH,GAArB6E,YAAqBA,EAC2C7E,EAAhE01B,eAAgEA,EAQhE11B,EAAA+5B,OAA2B,EAM3B/5B,EAAAiwC,aAAiC,EASjCjwC,EAAA8/B,KAAwE,cAGxE9/B,EAAA+vC,cAAkB,oBAAoBA,OAHtC,MA3BoCxnC,GAApCynC,EAAA1oC,GAUA3F,OAAAC,eAAMouC,EAAN9uC,UAAA,aAAA,WAAwB,MAAOf,MAAK45B,YAClC,SAAUp2B,GAAaxD,KAAK45B,OAASmW,GAAMvsC,GAAK,oCAKlDhC,OAAAC,eAAMouC,EAAN9uC,UAAA,mBAAA,WAA8B,MAAOf,MAAK8vC,kBACxC,SAAgBtsC,GAAaxD,KAAK8vC,aAAeC,GAAMvsC,GAAK,oCAgB5DqsC,EAAF9uC,UAAAivC,kBAAE,WAEE,OAAQ1sC,UAAW,UADLtD,KAAK0B,MAAQ,IAC/B,MAOEmuC,EAAF9uC,UAAAkvC,iBAAE,WACE,GAAkB,WAAdjwC,KAAK2/B,KAAmB,CAE1B,OAAQr8B,UAAW,UADLtD,KAAKkwC,YAAc,IACvC,sBAhEAhrC,KAACC,EAAAA,UAADC,OAAAC,SAAA,mBACE8F,SAAU,iBACVpF,MACFuM,KAAA,cACM69B,gBAAN,IACIC,gBAAJ,MACIvR,uBAAJ,QACIW,cAAe,OACfx5B,MAAJ,mBACI6yB,kCAAJ,uCAEArzB,QAAA,SACAF,SAAA,0pBACEC,QAAS,+mLACTK,gBAAFC,EAAAA,wBAAAC,OACEL,cAAFC,EAAAA,kBAAAC,8JAQAkqC,EAAAtpC,oEAKAo5B,OAAAz6B,KAAAuB,EAAAA,SAkBAopC,mCClFA,sBAcA3qC,KAAC+J,EAAAA,SAAD7J,OACE8J,SAAUC,EAAAA,aAAcC,IACxBI,SAAUqgC,GAAgBzgC,IAC1BQ,cAAeigC,QAjBjBQ,KZ+BMC,GAAY,IAUlBC,GAAA,WACE,QAAFA,GAAqB7rC,GAAA1E,KAArB0E,YAAqBA,EA1CrB,MAAA6rC,MA4CaC,GAA+BxpC,EAAWupC,GAAwB,WAgBlE9Q,GACT,GAAI/f,GAAAA,eAAiD,wCACnDC,WAAY,OACZC,QAAS6wB,KAYTC,GAAmC,27CAoGvC,QAAFhR,GAAqBh7B,EACPisC,EACsCngC,EAEaovB,EAEvCtK,GANxB,GAAFz1B,GAQIsH,EARJC,KAAApH,KAQU0E,IARV1E,IAAqBH,GAArB6E,YAAqBA,EAE+B7E,EAApD2Q,UAAoDA,EAEa3Q,EAAjE+/B,cAAiEA,EAEvC//B,EAA1By1B,SAA0BA,EAxD1Bz1B,EAAA+5B,OAAmB,EAEnB/5B,EAAA+wC,oBAA+B,EAY/B/wC,EAAAgxC,gBAAoD,mBAAvBhxC,EAAK+/B,iBAC1B//B,EAAKy1B,WAAaz1B,EAAKy1B,SAASwb,iBAYxCjxC,EAAAkxC,UAAsBT,GAYtBzwC,EAAA8/B,KAAuC,cAoBnC9/B,EAAK+wC,mBAAqBD,EAASK,MAAQL,EAASM,QAEhD3b,IACEA,EAAS4b,WACXrxC,EAAKqxC,SAAW5b,EAAS4b,UAGvB5b,EAAS6b,cACXtxC,EAAKsxC,YAAc7b,EAAS6b,aAMhC,IAAMC,GACJ,sCAAqCvxC,EAAK+wC,mBAAqB,YAAc,IADnF,mBAGIlsC,GAAY9B,cAAc4F,UAAUG,IAAIyoC,KAlC5C,MA5CwChpC,GAAxCs3B,EAAAv4B,GAqBA3F,OAAAC,eAAMi+B,EAAN3+B,UAAA,gBAAA,WAA2B,MAAOf,MAAK+wC,eACrC,SAAavT,GACXx9B,KAAK+wC,UAAYzoC,EAAAA,qBAAqBk1B,GAEjCx9B,KAAK4wC,oBAAuBlR,EAAmB2R,UAAU9iB,IAAIvuB,KAAK+wC,YACrE/wC,KAAKsxC,oDAOX9vC,OAAAC,eAAMi+B,EAAN3+B,UAAA,8BACI,MAAOf,MAAKuxC,cAAgBvxC,KAAKkxC,SAAW,QAE9C,SAAgBxvC,GACd1B,KAAKuxC,aAAejpC,EAAAA,qBAAqB5G,oCAQ7CF,OAAAC,eAAMi+B,EAAN3+B,UAAA,wBACI,MAAqB,gBAAdf,KAAK2/B,KAAyB3/B,KAAK45B,OAAS,OAErD,SAAUkH,GACR9gC,KAAK45B,OAASn2B,KAAKC,IAAI,EAAGD,KAAKE,IAAI,IAAK2E,EAAAA,qBAAqBw4B,sCAiC/Dt/B,OAAFC,eAAMi+B,EAAN3+B,UAAA,qBAAE,WACE,OAAQf,KAAKkxC,SAzKS,IAyKuB,mCAI/C1vC,OAAFC,eAAMi+B,EAAN3+B,UAAA,gBAAE,WACE,GAAMywC,GAA+B,EAArBxxC,KAAKyxC,cAAoBzxC,KAAKmxC,WAC9C,OAAO,OAAOK,EAAlB,IAA6BA,mCAI3BhwC,OAAFC,eAAMi+B,EAAN3+B,UAAA,4BAAE,WACE,MAAO,GAAI0C,KAAKiuC,GAAK1xC,KAAKyxC,+CAI5BjwC,OAAFC,eAAMi+B,EAAN3+B,UAAA,yBAAE,WACE,MAAkB,gBAAdf,KAAK2/B,KACA3/B,KAAK2xC,sBAAwB,IAAM3xC,KAAK45B,QAAU,IAIvD55B,KAAK4wC,oBAAoC,kBAAd5wC,KAAK2/B,KACC,GAA5B3/B,KAAK2xC,qBAGP,sCAITnwC,OAAFC,eAAMi+B,EAAN3+B,UAAA,0BAAE,WACE,MAAOf,MAAKmxC,YAAcnxC,KAAKkxC,SAAW,qCAIpCxR,EAAV3+B,UAAAuwC,4BACI,GAAIM,GAAWlS,EAAmBkS,QAE7BA,KACHA,EAAW5xC,KAAKwQ,UAAUqhC,cAAc,SACxC7xC,KAAKwQ,UAAUshC,KAAKC,YAAYH,GAChClS,EAAmBkS,SAAWA,GAG5BA,GAAYA,EAASI,OACtBJ,EAA+B,MAAEK,WAAWjyC,KAAKkyC,oBAAqB,GAGzExS,EAAmB2R,UAAU1oC,IAAI3I,KAAKkxC,WAIhCxR,EAAV3+B,UAAAmxC,6BACI,MAAOxB,IAEFyB,QAAQ,eAAgB,GAAG,IAAOnyC,KAAK2xC,sBACvCQ,QAAQ,aAAc,GAAG,GAAMnyC,KAAK2xC,sBACpCQ,QAAQ,YAAa,GAAGnyC,KAAKkxC,WApItCxR,EAAA2R,UAA6B,GAAIe,MAAa9B,KAM9C5Q,EAAAkS,SAAmD,oBAlCnD1sC,KAACC,EAAAA,UAADC,OAAAC,SAAA,uBACE8F,SAAU,qBACVpF,MACFuM,KAAA,cACMtM,MAAN,uBACI6yB,kCAAJ,kBACIgH,mBAAJ,WACIC,oBAAJ,WACIlB,uBAAJ,oCACID,uBAAJ,sCACIE,uBAAwB;+BACxBW,cAAJ,QAEAh6B,QAAA,SACAF,SAAA,+aACEC,QAAS,mkGACTK,gBAAFC,EAAAA,wBAAAC,OACEL,cAAFC,EAAAA,kBAAAC,mFA1GAT,SAAE2J,GAAFxI,aAAAnB,KAAAoB,EAAAA,WAAApB,KAAA4J,EAAAA,OAAA1J,MAAAuM,EAAAA,cAOAzM,SAAQ2J,GAARxI,aAAAnB,KAAAoB,EAAAA,WAAApB,KAAA4J,EAAAA,OAAA1J,MAAA0e,EAAAA,2BA6JA5e,SAAA2J,GAAAxI,aAAAnB,KAAe4J,EAAAA,OAAQ1J,MAAvBq6B,SAGAC,EAAAn5B,uEArCAo5B,OAAAz6B,KAAAuB,EAAAA,QAYA/E,QAAAwD,KAAAuB,EAAAA,SAYAi5B,uCA4HEE,EAAFtK,qCAAE,OAGFz1B,GAAA8/B,KAAA,gBAHA9/B,EACA,6BAOAqF,KAAAC,EAAAA,UAAAC,OAAAC,SAAA,oBA1BAiN,KAAA,cACAqtB,KAAA,gBACA35B,MAAA,mCACM6yB,kCAAN,kBACIgH,mBAAJ,WACIC,oBAAJ,YAEAt6B,QAAA,SACAF,SAAA,+aACAC,QAAA,mkGACAK,gBAAAC,EAAAA,wBAAAC,OACEL,cAAFC,EAAAA,kBAAAC,SAIAo6B,EAAA3mB,eAAA,WAAA,QACAlU,KAAA4N,EAAAA,0MApRA5N,SAAE2J,GAAFxI,aAAAnB,KAAA4J,EAAAA,OAAA1J,MAAAq6B,SAuRAM,GAEAL,IC/RAM,GAAA,yBAPA,sBAYA96B,KAAC+J,EAAAA,SAAD7J,OACE8J,SAAUE,IACVI,SACEkwB,GACAK,GACA3wB,IAEFQ,cACE8vB,GACAK,QArBJC,KCiDIpL,GAAe,EAONqL,IACXrtB,QAASkiB,EAAAA,kBACTjiB,YAAaqP,EAAAA,WAAW,WAAM,MAAAge,MAC9BlL,OAAO,GAITmL,GAAA,WACE,QAAFA,GAEWjL,EAEAxzB,GAFA1B,KAAXk1B,OAAWA,EAEAl1B,KAAX0B,MAAWA,EApEX,MAAAy+B,MA0EAC,GAAA,yBA1EA,MAAAA,MA2EaC,GAA0BhzB,EAAc+yB,mBA6HnD,QAAFF,GAAsBI,GAApB,GAAFzgC,GACIsH,EADJC,KAAApH,OAAAA,WAAsBH,GAAtBygC,gBAAsBA,EAtGtBzgC,EAAA+5B,OAAwB,KAGxB/5B,EAAA0gC,MAA0B,mBAAmB3L,KAG7C/0B,EAAA2gC,UAA6C,KAG7C3gC,EAAA4gC,gBAAoC,EAGpC5gC,EAAA6gC,eAA+C,QAG/C7gC,EAAA8gC,WAA+B,EAG/B9gC,EAAA+1B,WAA+B,EAG/B/1B,EAAAq6B,8BAAwD,aAMxDr6B,EAAA61B,UAAyB,aAOzB71B,EAAAqM,OAA4D,GAAInE,GAAAA,eApIhE,MA0FmCK,GAAnC83B,EAAA/4B,GAkDA3F,OAAAC,eAAMy+B,EAANn/B,UAAA,YAAA,WAAuB,MAAOf,MAAKugC,WACjC,SAAS7+B,GACP1B,KAAKugC,MAAQ7+B,EACb1B,KAAK4gC,2DAKTp/B,OAAAC,eAAMy+B,EAANn/B,UAAA,gCACI,MAAOf,MAAK0gC,oBAEd,SAAkBl9B,GAChBxD,KAAK0gC,eAAuB,WAANl9B,EAAiB,SAAW,QAClDxD,KAAK6gC,uDAKTr/B,OAAAC,eAAMy+B,EAANn/B,UAAA,aAAA,WAAqB,MAAOf,MAAK45B,YAC/B,SAAUkH,GACJ9gC,KAAK45B,SAAWkH,IAElB9gC,KAAK45B,OAASkH,EAEd9gC,KAAK+gC,gCACL/gC,KAAKghC,8DAITd,EAAFn/B,UAAAigC,0BAAE,WACMhhC,KAAKwgC,YAAcxgC,KAAKwgC,UAAUrL,UACpCn1B,KAAKwgC,UAAUrL,SAAU,IAM/B3zB,OAAAC,eAAMy+B,EAANn/B,UAAA,gBAAA,WAAmB,MAAOf,MAAKwgC,eAC7B,SAAa3pB,GACX7W,KAAKwgC,UAAY3pB,EACjB7W,KAAK0B,MAAQmV,EAAWA,EAASnV,MAAQ,KACzC1B,KAAKghC,6DAKTx/B,OAAAC,eAAMy+B,EAANn/B,UAAA,gBAAA,WAA4B,MAAOf,MAAK2gC,eACtC,SAAaj/B,GACX1B,KAAK2gC,UAAYt4B,EAAAA,sBAAsB3G,GACvC1B,KAAK6gC,uDAKTr/B,OAAAC,eAAMy+B,EAANn/B,UAAA,gBAAA,WAA4B,MAAOf,MAAK41B,eACtC,SAAal0B,GACX1B,KAAK41B,UAAYvtB,EAAAA,sBAAsB3G,GACvC1B,KAAK6gC,uDAWPX,EAAFn/B,UAAAyI,mBAAE,WAIExJ,KAAKygC,gBAAiB,GAOxBP,EAAFn/B,UAAAkgC,OAAE,WACMjhC,KAAK01B,WACP11B,KAAK01B,aAIDwK,EAAVn/B,UAAA6/B,6CACQ5gC,MAAKkhC,SACPlhC,KAAKkhC,QAAQ93B,QAAQ,SAAA+3B,GACnBA,EAAMzpB,KAAO7X,EAAK6X,QAMhBwoB,EAAVn/B,UAAAggC,oDAEUK,EAAuC,OAAnBphC,KAAKwgC,WAAsBxgC,KAAKwgC,UAAU9+B,QAAU1B,KAAK45B,MAE/E55B,MAAKkhC,UAAYE,IACnBphC,KAAKwgC,UAAY,KACjBxgC,KAAKkhC,QAAQ93B,QAAQ,SAAA+3B,GACnBA,EAAMhM,QAAUt1B,EAAK6B,QAAUy/B,EAAMz/B,MACjCy/B,EAAMhM,UACRt1B,EAAK2gC,UAAYW,OAOzBjB,EAAFn/B,UAAA01B,iBAAE,WACMz2B,KAAKygC,gBACPzgC,KAAKkM,OAAOnK,KAAK,GAAIo+B,IAAengC,KAAc,UAAGA,KAAK45B,UAI9DsG,EAAFn/B,UAAA8/B,oBAAE,WACM7gC,KAAKkhC,SACPlhC,KAAKkhC,QAAQ93B,QAAQ,SAAA+3B,GAAS,MAAAA,GAAME,mBAQxCnB,EAAFn/B,UAAA41B,WAAE,SAAWj1B,GACT1B,KAAK0B,MAAQA,EACb1B,KAAKsgC,gBAAgBl/B,gBAQvB8+B,EAAFn/B,UAAA61B,iBAAE,SAAiBC,GACf72B,KAAKk6B,8BAAgCrD,GAQvCqJ,EAAFn/B,UAAA+1B,kBAAE,SAAkBD,GAChB72B,KAAK01B,UAAYmB,GAOnBqJ,EAAFn/B,UAAAg2B,iBAAE,SAAiBC,GACfh3B,KAAKoC,SAAW40B,EAChBh3B,KAAKsgC,gBAAgBl/B,+BAvNzB8D,KAACmJ,EAAAA,UAADjJ,OACEC,SAAU,kBACV8F,SAAU,gBACVwH,WAAYstB,IACZl6B,MACEuM,KAAQ,aACRtM,MAAS,mBAEXR,QAAS,oDAzEXN,KAAE+H,EAAAA,uCAqHFf,SAAAhH,KAAGyB,EAAAA,SAGHu6B,UAAAh8B,KAAGqO,EAAAA,gBAAHnO,MAAmB8c,EAAAA,WAAW,WAAM,MAAAof,OAAmBC,aAAa,MAIpE7pB,OAAAxS,KAAGuB,EAAAA,QAQHsvB,gBAAA7wB,KAAGuB,EAAAA,QAUH/E,QAAAwD,KAAGuB,EAAAA,QAmBHoQ,WAAA3R,KAAGuB,EAAAA,QASHrE,WAAA8C,KAAGuB,EAAAA,QAQHsyB,WAAA7zB,KAAGuB,EAAAA,SAjMHy5B,GA0FmCG,IAmNnCmB,GAAA,WAME,QAAFA,GAAqB98B,GAAA1E,KAArB0E,YAAqBA,EAnTrB,MAAA88B,MAuTaC,GACTz6B,EAAWC,EAAmBmG,EAAco0B,KAAsB,yBA6JpE,QAAFF,GAA0BI,EACZ38B,EACQu7B,EACArO,EACA0P,EAC0CpM,GAL9D,GAAF11B,GAMIsH,EANJC,KAAApH,KAMU+E,IANV/E,WAEsBH,GAAtBygC,gBAAsBA,EACAzgC,EAAtBoyB,cAAsBA,EACApyB,EAAtB8hC,iBAAsBA,EAC0C9hC,EAAhE01B,eAAgEA,EArIhE11B,EAAA81B,UAA8B,gBAAef,GAG7C/0B,EAAAwuB,GAAwBxuB,EAAK81B,UA6F7B91B,EAAAqM,OAA4D,GAAInE,GAAAA,aAShElI,EAAAg2B,UAA8B,EAS9Bh2B,EAAA+5B,OAAwB,KASxB/5B,EAAA+hC,+BAAuD,aAenD/hC,EAAK6hC,WAAaA,EAElB7hC,EAAK+hC,+BACHD,EAAiBE,OAAO,SAACxT,EAAY3W,GAC/B2W,IAAOxuB,EAAKwuB,IAAM3W,IAAS7X,EAAK6X,OAClC7X,EAAKs1B,SAAU,OAjBzB,MAjIoC/sB,GAApCk5B,EAAAn6B,GAsBA3F,OAAAC,eAAM6/B,EAANvgC,UAAA,eAAA,WAA2B,MAAOf,MAAK61B,cACrC,SAAYn0B,GACV,GAAMogC,GAAkBz5B,EAAAA,sBAAsB3G,EAC1C1B,MAAK61B,WAAaiM,IACpB9hC,KAAK61B,SAAWiM,EACZA,GAAmB9hC,KAAK0hC,YAAc1hC,KAAK0hC,WAAWhgC,QAAU1B,KAAK0B,MACvE1B,KAAK0hC,WAAW7qB,SAAW7W,MACjB8hC,GAAmB9hC,KAAK0hC,YAAc1hC,KAAK0hC,WAAWhgC,QAAU1B,KAAK0B,QAI/E1B,KAAK0hC,WAAW7qB,SAAW,MAGzBirB,GAEF9hC,KAAK2hC,iBAAiBI,OAAO/hC,KAAKquB,GAAIruB,KAAK0X,MAE7C1X,KAAKsgC,gBAAgBl/B,iDAM3BI,OAAAC,eAAM6/B,EAANvgC,UAAA,aAAA,WAAqB,MAAOf,MAAK45B,YAC/B,SAAUl4B,GACJ1B,KAAK45B,SAAWl4B,IAClB1B,KAAK45B,OAASl4B,EACU,OAApB1B,KAAK0hC,aACF1hC,KAAKm1B,UAERn1B,KAAKm1B,QAAUn1B,KAAK0hC,WAAWhgC,QAAUA,GAEvC1B,KAAKm1B,UACPn1B,KAAK0hC,WAAW7qB,SAAW7W,yCAQrCwB,OAAAC,eAAM6/B,EAANvgC,UAAA,gCACI,MAAOf,MAAK0gC,gBAAmB1gC,KAAK0hC,YAAc1hC,KAAK0hC,WAAW3L,eAAkB,aAEtF,SAAkBr0B,GAChB1B,KAAK0gC,eAAiBh/B,mCAM1BF,OAAAC,eAAM6/B,EAANvgC,UAAA,2BACI,MAAOf,MAAK2gC,WAAkC,OAApB3gC,KAAK0hC,YAAuB1hC,KAAK0hC,WAAWt/B,cAExE,SAAaV,GACX,GAAMsgC,GAAmB35B,EAAAA,sBAAsB3G,EAC3C1B,MAAK2gC,YAAcqB,IACrBhiC,KAAK2gC,UAAYqB,EACjBhiC,KAAKsgC,gBAAgBl/B,iDAM3BI,OAAAC,eAAM6/B,EAANvgC,UAAA,2BACI,MAAOf,MAAK41B,WAAc51B,KAAK0hC,YAAc1hC,KAAK0hC,WAAW3I,cAE/D,SAAar3B,GACX1B,KAAK41B,UAAYvtB,EAAAA,sBAAsB3G,oCAczCF,OAAFC,eAAM6/B,EAANvgC,UAAA,eAAE,WAAwB,OAAUf,KAAKquB,IAAMruB,KAAK21B,WAApD,0CA+CE2L,EAAFvgC,UAAA0B,MAAE,WACEzC,KAAKiyB,cAAcgF,SAASj3B,KAAKo2B,cAAcxzB,cAAe,aAQhE0+B,EAAFvgC,UAAAsgC,cAAE,WAGErhC,KAAKsgC,gBAAgBl/B,gBAGvBkgC,EAAFvgC,UAAA8f,SAAE,WACM7gB,KAAK0hC,aAEP1hC,KAAKm1B,QAAUn1B,KAAK0hC,WAAWhgC,QAAU1B,KAAK45B,OAE9C55B,KAAK0X,KAAO1X,KAAK0hC,WAAWhqB,OAIhC4pB,EAAFvgC,UAAA0P,gBAAE,WAAA,GAAF5Q,GAAAG,IACIA,MAAKiyB,cACFE,QAAQnyB,KAAKo2B,cAAcxzB,eAC3B/B,UAAU,SAAAw1B,GAAe,MAAAx2B,GAAKy2B,oBAAoBD,MAGvDiL,EAAFvgC,UAAAC,YAAE,WACEhB,KAAKiyB,cAAcI,eAAeryB,KAAKo2B,cAAcxzB,eACrD5C,KAAK4hC,kCAICN,EAAVvgC,UAAA01B,4BACIz2B,KAAKkM,OAAOnK,KAAK,GAAIo+B,IAAengC,KAAMA,KAAK45B,UAGjD0H,EAAFvgC,UAAAkhC,kBAAE,WACE,MAAOjiC,MAAKkiC,eAAiBliC,KAAKoC,UAGpCk/B,EAAFvgC,UAAA21B,cAAE,SAAc5sB,GAQZA,EAAM0sB,mBAOR8K,EAAFvgC,UAAAohC,eAAE,SAAer4B,GAIbA,EAAM0sB,iBAEN,IAAM4L,GAAoBpiC,KAAK0hC,YAAc1hC,KAAK0B,QAAU1B,KAAK0hC,WAAWhgC,KAC5E1B,MAAKm1B,SAAU,EACfn1B,KAAKy2B,mBAEDz2B,KAAK0hC,aACP1hC,KAAK0hC,WAAWxH,8BAA8Bl6B,KAAK0B,OACnD1B,KAAK0hC,WAAWT,SACZmB,GACFpiC,KAAK0hC,WAAWjL,qBAMd6K,EAAVvgC,UAAAu1B,oBAAA,SAA8BD,GAErBr2B,KAAKm3B,cAAgC,aAAhBd,EAEdA,IACNr2B,KAAK0hC,YACP1hC,KAAK0hC,WAAWT,SAGdjhC,KAAKm3B,eACPn3B,KAAKm3B,aAAaC,UAClBp3B,KAAKm3B,aAAe,OARtBn3B,KAAKm3B,aAAen3B,KAAKq3B,QAAQC,OAAO,EAAG,GAAIC,YAAY,oBA/PjEryB,KAACC,EAAAA,UAADC,OAAAC,SAAA,mBACEC,SAAU,66BACVC,QAAF,2hDACEC,QAAF,QAAA,gBAAA,YACEC,cAAFC,EAAAA,kBAAAC,KACEwF,SAAF,iBACEpF,MACFC,MAAA,mBACMq8B,4BAAN,UACIC,6BAAJ,WACIzJ,kCAAJ,sCACI0J,YAAJ,sDAMA38B,gBAAAC,EAAAA,wBAAAC,4GApPAZ,KAAa+H,EAAAA,oBAvEb/H,KAAE4zB,EAAAA,eAJF5zB,KAAEs9B,EAAAA,4BAPFt9B,SAAQ2J,GAARxI,aAAAnB,KAAAoB,EAAAA,WAAApB,KAAA4J,EAAAA,OAAA1J,MAAA0e,EAAAA,4BAkdAwd,EAAA/6B,0DAlIAyvB,YAAA9wB,KAAAuB,EAAAA,MAAArB,MAAA,gBAGA6wB,iBAAA/wB,KAAAuB,EAAAA,MAAArB,MAAA,qBAGAq9B,kBAAGv9B,KAAHuB,EAAAA,MAAArB,MAAA,sBAGA+vB,UAAAjwB,KAAAuB,EAAAA,QAGA/E,QAAAwD,KAAAuB,EAAAA,QAGAsvB,gBAAG7wB,KAAHuB,EAAAA,QAwBArE,WAAA8C,KAAAuB,EAAAA,QAkBAsyB,WAAA7zB,KAAAuB,EAAAA,QAUAyF,SAAAhH,KAAAyB,EAAAA,SAaA0wB,UAAAnyB,KAAAsB,EAAAA,UAAApB,MAAA4zB,MAaA5C,gBAAAlxB,KAAAsB,EAAAA,UAAApB,MAAA,YA8BAk8B,mCCndA,sBAcAp8B,KAAC+J,EAAAA,SAAD7J,OACE8J,SAAUC,EAAAA,aAAcG,GAAiBF,IACzCI,SAAU0wB,GAAeoB,GAAgBlyB,IACzCQ,cAAeswB,GAAeoB,QAjBhCoB,KCiBalP,IAIXC,gBAAiBxc,EAAAA,QAAQ,aACvBC,EAAAA,MAAM,qBAAsB7T,EAAAA,OAC1BC,UAAa,uBACb6T,WAAc,aAEhBD,EAAAA,MAAM,OAAQ7T,EAAAA,OAEZs/B,aAAc,OACdxrB,WAAc,YAEhBC,EAAAA,WAAW,uBAAwBC,EAAAA,QAAQ,QAC3CD,EAAAA,WAAW,sCACPC,EAAAA,QAAQ,8CVqBHurB,GACT,GAAIljB,GAAAA,eAAwB,+BAC1BC,WAAY,OACZC,QAASijB,mBAqBb,QAAF7P,GACc7xB,EAC6C2hC,GAD7C9iC,KAAdmB,mBAAcA,EAC6CnB,KAA3D8iC,WAA2DA,EAgU3D,MA7TE9P,GAAFjyB,UAAAyI,mBAAE,WAAA,GAAF3J,GAAAG,IACIA,MAAK8iC,WAAWC,sBAAsBliC,UAAU,WAC9ChB,EAAKsB,mBAAmBC,iCApB9B8D,KAACC,EAAAA,UAADC,OAAAC,SAAA,qBACEC,SAAU,4BACVS,MACFC,MAAA,qBACMotB,yBAAN,kCACIC,0BAAJ,oCAEAztB,gBAAAC,EAAAA,wBAAAC,OACAL,cAAAC,EAAAA,kBAAAC,2JAuUAqtB,qDAxLAhzB,MAAA0E,YAAAA,EAAE1E,KAAFgjC,kBAAAA,EAAsBhjC,KAAtBiyB,cAAAA,EACsBjyB,KAAtBsQ,UAAAA,EACsBtQ,KAAtB0L,QAAAA,EACsB1L,KAAtBijC,KAAAA,EACsBjjC,KAAtBkjC,qCAAA,sDAnGAljC,KAAAmjC,MAAA,OAaAnjC,KAAAojC,eAAA,EASApjC,KAAAqjC,YAAA,2MAkEArjC,KAAAsjC,aAAAziC,UAAA,SAAA0iC,GA6GAA,GA/FA1jC,EAAsBojC,OACtBpjC,EAAAqjC,qCAAArjC,EAAAojC,KAAA,eAEUpjC,EAAK2jC,qBAAf3jC,EAAA4jC,YACA5jC,EAAA6jC,cAKA7jC,EAAA8jC,+MAUA,MAAA9jC,GAAA6L,QAAA+c,IAAA,WACA5oB,EAAA+jC,QAEA95B,EAAA0sB,wBApDA,MAwDAh1B,QAAOC,eAAPqxB,EAAA/xB,UAAA,YACAgN,uDA5HArM,EAAA,QAAAA,EAAA,MAAA,2BAEA1B,KAAA0hB,UAAAhgB,EACQ1B,KAAK6jC,kBAAkB9hC,SAG/BkM,YAAA,EACAC,cAAA,6GAMAlO,KAAA8jC,aAAAl3B,QAEAqB,YAAA,EACAC,cAAA,6KAMEA,cAAF,oKAMEA,cAAF,0JAoBAD,YAAA,kOAMAA,YAAA,0KASAA,YAAA,uNAMAA,YAAA,4FAgBA,MAAAjO,MAAAujC,QAAA,SAAAvjC,KAAA2/B,MAEA1xB,YAAA,EACAC,cAAA,iEAyCAlO,KAAAyjC,WAAAM,+BAAA56B,KAAA,SAAA66B,2JAkBA,GAAAC,GAAAjkC,KAAAijC,MAAAjjC,KAAAijC,KAAAiB,aACAD,IAAAjkC,KAAA0E,YAAA9B,cAAAsO,SAAA+yB,KAEAjkC,KAAAkjC,+CAAAiB,aAEAnkC,KAAAiyB,cAAAgF,SAAAj3B,KAAAkjC,qCAAAljC,KAAAokC,YAGApkC,KAAA0E,YAAA9B,cAAAg4B,QAEA56B,KAAOkjC,qCAAP,KACAljC,KAAAokC,WAAA,+HAMApkC,KAAAyjC,WAAAY,QAAArkC,KAAAwjC,6KAeAxjC,KAAAyjC,WAAAa,WAGA9iC,OAAAC,eAAAqxB,EAAA/xB,UAAA,UACAgN,2GAQEG,cAAF,2JAqCA,YAdA,KAAAq2B,IAAAA,GAAAvkC,KAAAujC,YAAA,KAAAiB,IAAAA,EAAA,WAASxkC,KAATykC,QAAAF,EAAAA,GAGQvkC,KAAR8nB,gBAAA9nB,KAAA0kC,kBAAA,OAAA,eAEQ1kC,KAARokC,WAAAI,IAGAxkC,KAAA8nB,gBAAA,OAAU9nB,KAAV2jC,iBAEM3jC,KAAKyjC,aACXzjC,KAAAyjC,WAAAY,QAAArkC,KAAAwjC,qBAGA,GAAAv6B,SAAqB,SAArBC,GACArJ,EAAAyjC,aAAAl3B,KAAAyI,EAAAA,KAAA,IAAAhU,UAAA,SAAA4pB,GAAA,MAAAvhB,GAAAuhB,EAAA,OAAA,+JAWA,IAAAhI,EAAA3E,QAAA,SAAA,SAAA6E,GACA,SAAAF,GAAuC,IAAvCE,EAAA7E,QAAA,UAEQ9d,KAARsjC,aAAAvhC,KAA+B/B,KAA/BykC,UAGAjjC,OAAAC,eAAAqxB,EAAA/xB,UAAA,UACAgN,sGAGAE,YAAA,EACAC,cAAA,mBAAAhJ,KAAAC,EAAAA,UAAAC,OAAAC,SAAA,kCA3RAC,SAAA,4BACE4T,YAAFsa,GAAAC,iBACE1tB,MACFC,MAAA,aACA0tB,eAAA,kBACAC,qBAAA,4BACMC,oBAAN,0BAEIC,eAAgB,OAChBC,yBAAJ,qBACIC,0BAAJ,8DAEIC,0BAAJ,kBACI3xB,SAAJ,MAEAuD,gBAAAC,EAAAA,wBAAAC,OACAL,cAAAC,EAAAA,kBAAAC,SAIAmtB,EAAA1Z,eAAA,WAAA,QACAlU,KAAA4N,EAAAA,+EA3FA5N,KAAE8H,EAAAA,SAhBF9H,SAA8C2J,GAA9CxI,aAAAnB,KAAAoB,EAAAA,WAAApB,KAAA4J,EAAAA,OAAA1J,MAAAuM,EAAAA,eAIAmhB,EAAAvsB,gBAkBA8C,WAAAnE,KAAAuB,EAAAA,QA+LAk5B,OAAAz6B,KAAAuB,EAAAA,iEAjGA68B,eAAAp+B,KAAAyB,EAAAA,SAaAg+B,gBAAAz/B,KAAAyB,EAAAA,OAAAvB,MAAA,YASAw/B,cAAA1/B,KAAAyB,EAAAA,SAMAk+B,gBAAA3/B,KAAAyB,EAAAA,OAAAvB,MAAA,YAeA0/B,cAAA5/B,KAAAyB,EAAAA,SAKAk9B,oBAAA3+B,KAAAyB,EAAAA,OAAAvB,MAAA,qBAMAm+B,SAAAr+B,KAAAuB,EAAAA,SAeAqsB,qFA0RA9yB,KAAAkyB,SAAAA,iBAAElyB,KAAFmB,mBAAAA,EAAkCnB,KAAlCu1B,eAAAA,EAKiEv1B,KAAjE+kC,cAAA,GAAAh9B,GAAAA,aAtCA/H,KAAA8Y,WAAA,GAAAjN,GAAAA,QAgBA7L,KAAAglC,gBAAA,GAAAn5B,GAAAA,6FAUA5I,GAEAA,EAAAiJ,OAAAE,KAAAC,EAAAA,UAAArM,KAAA8Y,aAAAjY,UAAA,4DAgBAb,KAAAilC,UAAAC,EApFA,MAsFA1jC,QAAAC,eAAAmxB,EAAA7xB,UAAA,SAGIgN,mEAtFJvM,OAAAC,eAAAmxB,EAAA7xB,UAAA,wEAGAS,OAAAC,eAAAmxB,EAAA7xB,UAAA,6IAYAS,OAAAC,eAAAmxB,EAAA7xB,UAAA,uKAWA0tB,8FAKEvgB,cAAF,8CA0DA,GAAArO,GAAAG,6FAAAH,EAAAgzB,SAAAzpB,QAAA,SAAA+7B,GAAAtlC,EAAAulC,mBAAAD,GACAtlC,EAAkBwlC,qBAAlBF,GACAtlC,EAAAylC,iBAAAH,OAGAtlC,EAAAgzB,SAAArwB,QACQ3C,EAAK0lC,cAAb1lC,EAAiC2lC,SACzB3lC,EAAK0lC,cAAb1lC,EAAA4lC,QACA5lC,EAAA6lC,wBAGA7lC,EAAAsB,mBAAAC,iBAEApB,KAAAglC,gBAAA54B,KAAAu5B,EAAAA,aAAA,IAGAt5B,EAAAA,UAAWrM,KAAX8Y,aAA6BjY,UAA7B,WAAA,MAAAhB,GAAA6lC,2BAOA9S,EAAA7xB,UAAAC,uBAEAhB,KAAAglC,gBAAAn4B,+EAOE,kFAKA,iEAEF+lB,EAAA7xB,UAAA6kC,qBAEA,GAAA/lC,GAAAG,uCAAAA,KAAA0L,QAMGO,kBANH,WAAA,MAAApM,GAAAmlC,gBAAAp4B,yMAcA,iBAAA9C,EAAA2Y,SAAA,mBACoB5iB,EADpB01B,gBAIA11B,EAAcqyB,SAAdtvB,cAAA4F,UAAAG,IAAA,mDAGM9I,EAANsB,mBAAAC,iBAEA,SAAA+jC,EAAAxF,MAEMwF,EAAN7B,aAAAl3B,KAAAC,EAAAA,UAAArM,KAAA6yB,SAAAnpB,UAAA7I,UAAA,WACA,MAAAhB,GAAAgmC,mBAAAV,EAAA5B,sEAeA4B,EAAAtB,kBAAAz3B,KAAAC,EAAAA,UAAArM,KAAA6yB,SAAAnpB,UAAA7I,UAAA,WACAhB,EAAA6L,QAAAkd,iBAAAzC,eAAA/Z,KAAAyI,EAAAA,KAAA,IAAAhU,UAAA,6KAWAA,UAAA,qCACAhB,EAAAsB,mBAAAC,8HAWQpB,KAAKkyB,SAAbtvB,cAAA4F,UAAAC,OAAA,mDAQU,sGACoB,MAA9B5I,EAAsB4lC,gBAIZ5lC,EAAM4lC,KAAhBN,IAGA,MAAAtlC,EAAA2lC,QACAM,GAAA,SACYjmC,EAAZ2lC,OAAAL,KAGAnlC,KAAA+lC,OAAA/lC,KAAAgmC,MAAA,KAEAhmC,KAAAiD,MAAA,QAAAjD,KAAAiD,KAAAvB,OACA1B,KAAAgmC,MAAAhmC,KAAAylC,KAEQzlC,KAAR+lC,OAAsB/lC,KAAtBwlC,SAIMxlC,KAAKgmC,MAAQhmC,KAAKwlC,OAClBxlC,KAAK+lC,OAAS/lC,KAAKylC,6BAQf,8KAKVzlC,KAAA+kC,cAAAhjC,iCAGA6wB,EAAA7xB,UAAAklC,6BAEA,GAAApmC,GAAAG,6BAAAgR,OAAA,SAAAm0B,GAAA,MAAAA,KAAAA,EAAAe,cAAArmC,EAAAsmC,iBAAAhB,KAAA/7B,QAAA,SAAA+7B,GAAA,MAAA,GAAAvB,WAKAhR,EAAA7xB,UAAAqlC,8BAEA,MAAApmC,MAAAulC,cAAAvlC,KAAAwlC,SAAoBxlC,KAApBmmC,iBAAAnmC,KAAAwlC,uGAKU,SAAVL,8EAIU,SAAVA,yJAgBAjlB,GAAAlgB,KAAQgmC,MAARK,WAGa,IAAb,QAAArmC,KAAsBgmC,MAAtBrG,KAAA,CACU,GAAVxf,GAAAngB,KAAAgmC,MAAAK,MACQnmB,IAAQC,EAChB0M,GAAA1M,EAEA,GAAAngB,KAAA+lC,QAAA/lC,KAAA+lC,OAAAxC,OACA,GAAA,QAAQvjC,KAAK+lC,OAAbpG,KACA9S,GAAA7sB,KAAA+lC,OAAAM,WAGa,IAAb,QAAArmC,KAAA+lC,OAAApG,KAAA,CACU,GAAVxf,GAAuCngB,KAAvC+lC,OAAAM,MACQxZ,IAAS1M,EACjBD,GAAAC,EAEAD,IAAalgB,KAAbsmC,gBAAApmB,MAAA2M,IAAA7sB,KAAAsmC,gBAAAzZ,QACA7sB,KAAAsmC,iBAAApmB,KAAAA,EAAA2M,MAAAA,GAIQ7sB,KAAR0L,QAAqB+c,IAArB,WAAA,MAA8C5oB,GAA9CkjC,sBAAAn2B,KAAA/M,EAAqFymC,oCAKrFphC,KAAUC,EAAAA,UAAVC,OAAAC,SAAA,uBACA8F,SAAA;gvEAnUApF,MACAC,MAAA,uBACA2sB,iDAAA,qBAEE/sB,gBAAFC,EAAAA,wBAAAC,OACEL,cAAFC,EAAAA,kBAAAC,SAIAitB,EAAAxZ,eAAA,WAAA,QACAlU,KAAAkB,EAAAA,eAAAC,aAAAnB,KAAAoB,EAAAA,aACApB,KAAA4N,EAAAA,aACA5N,KAAA8H,EAAAA,sLAvXA4lB,EAAArsB,gBAMAssB,WAAA3tB,KAAAqO,EAAAA,gBAAAnO,MAAA0tB,MAXAhR,WAAA5c,KAAA6tB,EAAAA,aAAA3tB,MAAA4tB,MA4cAC,WAAA/tB,KAAAuB,EAAAA,QACAysB,cAAAhuB,KAAAuB,EAAAA,gGA9EAmsB,oBC5WE,QAAFO,GACM5C,EAC+C7E,GACrD,MAAIvkB,GAAJC,KAAApH,KAAUuwB,EAAmB7E,IAA7B1rB,KAsEA,MA1EuCoI,GAAvC+qB,EAAAhsB,kBAZAjC,KAACC,EAAAA,UAADC,OAAAC,SAAA,sBACEC,SAAU,4BACVS,MACFC,MAAA,yCACMotB,yBAAN,kCACIC,0BAAJ,oCAEAztB,gBAAAC,EAAAA,wBAAAC,OACAL,cAAAC,EAAAA,kBAAAC,2JA8EAwtB,OA/GAG,GAAA,SAAAnsB,gBAuEA,GAAAtH,GAAA,OAAAsH,GAAAA,EAAA4C,MAAA/J,KAAAuY,YAAAvY,IAcA,+CATAH,EAAA0zB,gBAAA,EASA1zB,EAZA,gMAEEqO,cAAF,yKASEA,cAAF,kLASEA,cAAF,wFA/CA5I,SAAA,4BACE4T,YAAFsa,GAAAC,iBACE1tB,MACFC,MAAA,yBACA3D,SAAA,KACAqxB,eAAA,kBACMC,qBAAN,4BACIC,oBAAJ,0BAEIC,eAAgB,OAChBC,yBAAJ,qBACIC,0BAAJ,8DAEIC,0BAAJ,kBACIC,4BAAJ,kBACIC,iBAAJ,uCACIC,oBAAJ,2CAEAvuB,gBAAAC,EAAAA,wBAAAC,OACAL,cAAAC,EAAAA,kBAAAC,SAIA2tB,EAAA/sB,gBACA6tB,kBAAAlvB,KAAAuB,EAAAA,sEAGA6sB,GASAR,IASAuB,GAAA,SAAAltB,6EAoByCktB,EAAzChuB,y1EAbAN,MACAC,MAAA,6CACA2sB,iDAAA,qBAEE/sB,gBAAFC,EAAAA,wBAAAC,OACEL,cAAFC,EAAAA,kBAAAC,SAIA0uB,EAAA9tB,gBACAssB,WAAA3tB,KAAAqO,EAAAA,gBAAAnO,MAAAkuB,MACAxR,WAAA5c,KAAA6tB,EAAAA,aAAA3tB,MAAA+tB,cCtGAmB,GAAA,yBAPA,sBAgBApvB,KAAC+J,EAAAA,SAAD7J,OACE8J,SACEC,EAAAA,aACAC,GACAmlB,EAAAA,qBACAC,EAAAA,gBAEFhlB,SACEJ,GACA0jB,GACAF,GACAI,GACAM,GACAe,GACAlB,IAEFvjB,cACEkjB,GACAF,GACAI,GACAM,GACAe,GACAlB,QAtCJmB,KCmBaG,GACX,GAAI/U,GAAAA,eAA6C,oCAC/CC,WAAY,OACZC,QAAS,WAAM,OAAE8U,oBAAoB,EAAOC,kBAAkB,MC4B9DC,GAAe,EAENC,IACXjiB,QAASkiB,EAAAA,kBACTjiB,YAAaqP,EAAAA,WAAW,WAAM,MAAA6S,MAC9BC,OAAO,GAITC,GAAA,WACE,QAAFA,GAEWC,EAEAC,GAFAn1B,KAAXk1B,OAAWA,EAEAl1B,KAAXm1B,QAAWA,EAhEX,MAAAF,MAqEAG,GAAA,WACE,QAAFA,GAAqB1wB,GAAA1E,KAArB0E,YAAqBA,EAtErB,MAAA0wB,MAwEaC,GACXjoB,EAAcpG,EAAWC,EAAmBoG,EAAc+nB,KAAsB,0BA8GhF,QAAFL,GAAchwB,EAKAuL,EACQ2hB,EACA9wB,EACekB,EACfqJ,EAEG4pB,EACuCC,GAZ9D,GAAF11B,GAaIsH,EAbJC,KAAApH,KAaU+E,IAbV/E,WAMsBH,GAAtBoyB,cAAsBA,EACApyB,EAAtBsB,mBAAsBA,EAEAtB,EAAtB6L,QAAsBA,EAEG7L,EAAzBy1B,SAAyBA,EACuCz1B,EAAhE01B,eAAgEA,EAjGhE11B,EAAA21B,SAAqB,SAACC,KACtB51B,EAAA61B,UAAsB,aAEtB71B,EAAA81B,UAA8B,uBAAsBf,GACpD/0B,EAAA+1B,WAA+B,EAC/B/1B,EAAAg2B,UAA8B,EAM9Bh2B,EAAAi2B,WAAsB,EAkBtBj2B,EAAA6X,KAAiC,KAGjC7X,EAAAwuB,GAAwBxuB,EAAK81B,UAG7B91B,EAAAk2B,cAA+C,QAK/Cl2B,EAAAm2B,UAAkD,KAGlDn2B,EAAAo2B,eAA4D,KAgB5Dp2B,EAAAqM,OAAM,GAAInE,GAAAA,aAOVlI,EAAAq2B,aAAwD,GAAInuB,GAAAA,aAQ5DlI,EAAAs2B,WAAsD,GAAIpuB,GAAAA,aAyBtDlI,EAAKwC,SAAWoL,SAASpL,IAAa,IAhB1C,MAtFoC+F,GAApC2sB,EAAA5tB,GAkDA3F,OAAAC,eAAMszB,EAANh0B,UAAA,gBAAA,WAA4B,MAAOf,MAAK41B,eACtC,SAAal0B,GAAS1B,KAAK41B,UAAYvtB,EAAAA,sBAAsB3G,oCAI/DF,OAAAC,eAAMszB,EAANh0B,UAAA,eAAA,WAA2B,MAAOf,MAAK61B,cACrC,SAAYn0B,GACV1B,KAAK61B,SAAWxtB,EAAAA,sBAAsB3G,GACtC1B,KAAKmB,mBAAmBC,gDAsB1BI,OAAFC,eAAMszB,EAANh0B,UAAA,eAAE,WAAwB,OAAUf,KAAKquB,IAAMruB,KAAK21B,WAApD,0CAyBEZ,EAAFh0B,UAAAyI,mBAAE,WAAA,GAAF3J,GAAAG,IACIA,MAAKiyB,cACFE,QAAQnyB,KAAKo2B,cAAcxzB,eAC3B/B,UAAU,SAAAw1B,GAAe,MAAAx2B,GAAKy2B,oBAAoBD,MAGvDtB,EAAFh0B,UAAAC,YAAE,WACEhB,KAAKiyB,cAAcI,eAAeryB,KAAKo2B,cAAcxzB,gBAIvDmyB,EAAFh0B,UAAAw1B,eAAE,SAAezsB,GAcb,GAVAA,EAAM0sB,kBAEDx2B,KAAK81B,WACR91B,KAAKk2B,aAAan0B,OAOhB/B,KAAK81B,WAAa91B,KAAKs1B,SAASZ,mBAElC,YADA10B,KAAKo2B,cAAcxzB,cAAcuyB,QAAUn1B,KAAKm1B,QAKlDn1B,MAAKm1B,QAAUn1B,KAAKo2B,cAAcxzB,cAAcuyB,QAIhDn1B,KAAKy2B,oBAIP1B,EAAFh0B,UAAA21B,cAAE,SAAc5sB,GAQZA,EAAM0sB,mBAIRzB,EAAFh0B,UAAA41B,WAAE,SAAWj1B,GACT1B,KAAKm1B,UAAYzzB,GAInBqzB,EAAFh0B,UAAA61B,iBAAE,SAAiBC,GACf72B,KAAKw1B,SAAWqB,GAIlB9B,EAAFh0B,UAAA+1B,kBAAE,SAAkBD,GAChB72B,KAAK01B,UAAYmB,GAInB9B,EAAFh0B,UAAAg2B,iBAAE,SAAiBC,GACfh3B,KAAKoC,SAAW40B,EAChBh3B,KAAKmB,mBAAmBC,gBAI1B2zB,EAAFh0B,UAAA0B,MAAE,WACEzC,KAAKiyB,cAAcgF,SAASj3B,KAAKo2B,cAAcxzB,cAAe,aAIhEmyB,EAAFh0B,UAAAm2B,OAAE,WACEl3B,KAAKm1B,SAAWn1B,KAAKm1B,SAIfJ,EAAVh0B,UAAAu1B,oBAAA,SAA8BD,GAErBr2B,KAAKm3B,cAAgC,aAAhBd,EAGdA,IACVr2B,KAAK01B,YAGD11B,KAAKm3B,eACPn3B,KAAKm3B,aAAaC,UAClBp3B,KAAKm3B,aAAe,OAPtBn3B,KAAKm3B,aAAen3B,KAAKq3B,QAAQC,OAAO,EAAG,GAAIC,YAAY,KAevDxC,EAAVh0B,UAAA01B,4BACIz2B,KAAKw1B,SAASx1B,KAAKm1B,SACnBn1B,KAAKkM,OAAOnK,KAAK,GAAIkzB,IAAqBj1B,KAAMA,KAAKm1B,WAI/CJ,EAAVh0B,UAAAy2B,mBAAA,SAA6BC,GACzB,GAAIC,GAAcD,EAAWz3B,KAAK23B,eAAkB,GAOpD,OAJI33B,MAAK43B,mBACPF,GAAc,KAGTj0B,KAAKC,IAAI,EAAGD,KAAKE,IAAI+zB,EAAY,OAG1C3C,EAAFh0B,UAAA82B,aAAE,WACE,IAAK73B,KAAKoC,WAAapC,KAAK81B,UAAW,CACrC,GAAMgC,GAAU93B,KAAK+3B,SAASn1B,aAC9B5C,MAAK23B,eAAiB33B,KAAKg4B,YAAYp1B,cAAcq1B,YAAcH,EAAQG,YAC3EH,EAAQtvB,UAAUG,IAAI,gBAEtB3I,KAAK43B,iBAAmB53B,KAAKm1B,QAC7Bn1B,KAAK81B,WAAY,IAIrBf,EAAFh0B,UAAAm3B,QAAE,SAAQpuB,GACN,GAAI9J,KAAK81B,UAAW,CAClB91B,KAAKm4B,gBAAkBn4B,KAAKw3B,mBAAmB1tB,EAAMsuB,OAErD,IAAMC,GAASr4B,KAAKm4B,gBAAkB,IAAOn4B,KAAK23B,cAClD33B,MAAK+3B,SAASn1B,cAAcS,MAAMC,UAAY,eAAe+0B,EAAnE,cAIEtD,EAAFh0B,UAAAu3B,WAAE,WAAA,GAAFz4B,GAAAG,IACI,IAAIA,KAAK81B,UAAW,CAClB,GAAMyC,GAAkBv4B,KAAKm4B,gBAAkB,EAE3CI,KAAoBv4B,KAAKm1B,UAC3Bn1B,KAAKm2B,WAAWp0B,OACX/B,KAAKs1B,SAASX,mBACjB30B,KAAKm1B,QAAUoD,EACfv4B,KAAKy2B,qBAMTz2B,KAAK0L,QAAQO,kBAAkB,WAAM,MAAA6Z,YAAW,WAC1CjmB,EAAKi2B,YACPj2B,EAAKi2B,WAAY,EACjBj2B,EAAKk4B,SAASn1B,cAAc4F,UAAUC,OAAO,gBAI7C5I,EAAKk4B,SAASn1B,cAAcS,MAAMC,UAAY,UAOtDyxB,EAAFh0B,UAAAy3B,mBAAE,WAIEx4B,KAAKmB,mBAAmBC,+BAtS5B8D,KAACC,EAAAA,UAADC,OAAAC,SAAA,mBACE8F,SAAU,iBACVpF,MACFC,MAAA,mBACMyyB,OAAN,KACIC,sBAAJ,UACIC,uBAAJ,WACIC,wCAAJ,4BACIC,kCAAJ,uCAEAvzB,SAAA,ukCACAC,QAAA,k0EACEoN,WAAFkiB,IACErvB,QAAS,WAAX,gBAAA,QAAA,YACEC,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,qFA1EAZ,KAAE4zB,EAAAA,eAPF5zB,KAAQ+H,EAAAA,oBAFR/H,SAAQ2J,GAARxI,aAAAnB,KAAA8J,EAAAA,UAAA5J,MAAA,gBAOAF,KAAE8H,EAAAA,SAgLF9H,SAAA2J,GAAAxI,aAAAnB,KAAe4J,EAAAA,OAAf1J,MAAAqvB,QAtKAvvB,SAAE2J,GAAFxI,aAAAnB,KAAAoB,EAAAA,WAAApB,KAAA4J,EAAAA,OAAA1J,MAAA0e,EAAAA,4BA0KAiR,EAAAxuB,0HA1EAmR,OAAAxS,KAAAuB,EAAAA,QAGA4nB,KAAAnpB,KAAAuB,EAAAA,QAGAsvB,gBAAA7wB,KAAAuB,EAAAA,QAGAuvB,YAAA9wB,KAAAuB,EAAAA,MAAArB,MAAA,gBAGA6wB,iBAAA/wB,KAAAuB,EAAAA,MAAArB,MAAA,qBAKA2zB,WAAA7zB,KAAAuB,EAAAA,QAGA0uB,UAAAjwB,KAAAuB,EAAAA,QAGAyF,SAAAhH,KAAAyB,EAAAA,SAKAuvB,eAAAhxB,KAAQyB,EAAAA,SAORwvB,aAAAjxB,KAAAyB,EAAAA,SAQAyvB,gBAAAlxB,KAAAsB,EAAAA,UAAApB,MAAA,WAQAiyB,UAAAnyB,KAAAsB,EAAAA,UAAApB,MAAA4zB,OASAjE,mCCrLA,sBAeA7vB,KAAC+J,EAAAA,SAAD7J,OACE8J,SAAUI,GAAiBF,GAAiBG,EAAAA,iBAC5CC,SAAUulB,GAAgB3lB,IAC1BQ,cAAemlB,IACfpiB,YACGC,QAAS2R,EAAAA,sBAAuBC,SAAUC,SApB/CwU,KrBsEaC,IACXtmB,QAASkiB,EAAAA,kBACTjiB,YAAaqP,EAAAA,WAAW,WAAM,MAAA6B,MAC9BiR,OAAO,GAITmE,GAAA,yBA7EA,MAAAA,MAwFAC,GAAA,WACE,QAAFA,GAAqB10B,GAAA1E,KAArB0E,YAAqBA,EAzFrB,MAAA00B,MA2FaC,GACXjsB,EAAcpG,EAAWqG,EAAc+rB,IAAgB,0BA4VvD,QAAFrV,GAAchf,EACQktB,EACA9wB,EACY8B,EACGZ,EAE2BkzB,GAN9D,GAAF11B,GAOIsH,EAPJC,KAAApH,KAOU+E,IAPV/E,WACsBH,GAAtBoyB,cAAsBA,EACApyB,EAAtBsB,mBAAsBA,EACYtB,EAAlCoD,KAAkCA,EAG8BpD,EAAhE01B,eAAgEA,EA5ShE11B,EAAAy5B,SAAoB,EAYpBz5B,EAAA05B,KAAyB,IAiBzB15B,EAAA25B,KAAyB,EAezB35B,EAAA45B,MAA0B,EAM1B55B,EAAA65B,aAAiC,EAiBjC75B,EAAA85B,cAA2C,EA4B3C95B,EAAA+5B,OAAkC,KAelC/5B,EAAAg6B,WAAsB,EAGtBh6B,EAAAqM,OAA6D,GAAInE,GAAAA,aAGjElI,EAAAwkB,MAA4D,GAAItc,GAAAA,aA6BhElI,EAAA61B,UAAyB,aAIzB71B,EAAAi6B,SAA6B,EAM7Bj6B,EAAAk6B,YAAwB,EAMxBl6B,EAAAmO,WAAuB,EAqGvBnO,EAAAm6B,qBAAyC,EAGzCn6B,EAAAo6B,kBAAiD,KAEjDp6B,EAAAq6B,8BAAgE,aAMhEr6B,EAAAs6B,uBAAmC3yB,EAAAA,aAAaC,MA8B5C5H,EAAKwC,SAAWoL,SAASpL,IAAa,IAxB1C,MA/R+B+F,GAA/B2b,EAAA5c,GAIA3F,OAAAC,eAAMsiB,EAANhjB,UAAA,cAAA,WAA0B,MAAOf,MAAKs5B,aACpC,SAAW53B,GACT1B,KAAKs5B,QAAUjxB,EAAAA,sBAAsB3G,oCAMzCF,OAAAC,eAAMsiB,EAANhjB,UAAA,WAAA,WAAsB,MAAOf,MAAKu5B,UAChC,SAAQ/1B,GACNxD,KAAKu5B,KAAOjxB,EAAAA,qBAAqB9E,EAAGxD,KAAKu5B,MACzCv5B,KAAK85B,SAAW95B,KAAKo6B,qBAAqBp6B,KAAK45B,QAG/C55B,KAAKmB,mBAAmBC,gDAM5BI,OAAAC,eAAMsiB,EAANhjB,UAAA,WAAA,WAAsB,MAAOf,MAAKw5B,UAChC,SAAQh2B,GACNxD,KAAKw5B,KAAOlxB,EAAAA,qBAAqB9E,EAAGxD,KAAKw5B,MAGrB,OAAhBx5B,KAAK45B,SACP55B,KAAK0B,MAAQ1B,KAAKw5B,MAEpBx5B,KAAK85B,SAAW95B,KAAKo6B,qBAAqBp6B,KAAK45B,QAG/C55B,KAAKmB,mBAAmBC,gDAM5BI,OAAAC,eAAMsiB,EAANhjB,UAAA,YAAA,WAAuB,MAAOf,MAAKy5B,WACjC,SAASj2B,GACPxD,KAAKy5B,MAAQnxB,EAAAA,qBAAqB9E,EAAGxD,KAAKy5B,OAEtCz5B,KAAKy5B,MAAQ,GAAM,IACrBz5B,KAAKq6B,gBAAkBr6B,KAAKy5B,MAAMa,WAAWC,MAAM,KAAKC,MAAOh4B,QAIjExC,KAAKmB,mBAAmBC,gDAM5BI,OAAAC,eAAMsiB,EAANhjB,UAAA,kBAAA,WAA8B,MAAOf,MAAK05B,iBACxC,SAAeh4B,GAAkB1B,KAAK05B,YAAcrxB,EAAAA,sBAAsB3G,oCAQ5EF,OAAAC,eAAMsiB,EAANhjB,UAAA,oBAAA,WAAuB,MAAOf,MAAK25B,mBACjC,SAAiBj4B,GAEb1B,KAAK25B,cADO,SAAVj4B,EACmB,OACK,gBAAVA,IAAuC,gBAAVA,GACxB4G,EAAAA,qBAAqB5G,EAAO1B,KAA4B,eAExD,mCAO3BwB,OAAAC,eAAMsiB,EAANhjB,UAAA,wBAKI,MAHoB,QAAhBf,KAAK45B,SACP55B,KAAK0B,MAAQ1B,KAAKw5B,MAEbx5B,KAAK45B,YAEd,SAAUp2B,GACR,GAAIA,IAAMxD,KAAK45B,OAAQ,CACrB,GAAIl4B,GAAQ4G,EAAAA,qBAAqB9E,EAI7BxD,MAAKq6B,kBACP34B,EAAQ+4B,WAAW/4B,EAAMg5B,QAAQ16B,KAAKq6B,mBAGxCr6B,KAAK45B,OAASl4B,EACd1B,KAAK85B,SAAW95B,KAAKo6B,qBAAqBp6B,KAAK45B,QAG/C55B,KAAKmB,mBAAmBC,iDAc9BI,OAAAC,eAAMsiB,EAANhjB,UAAA,gBAAA,WAA4B,MAAOf,MAAK65B,eACtC,SAAan4B,GACX1B,KAAK65B,UAAYxxB,EAAAA,sBAAsB3G,oCAWzCF,OAAFC,eAAMsiB,EAANhjB,UAAA,oBAAE,WACE,MAAIf,MAAKmkB,YACAnkB,KAAKmkB,YAAYnkB,KAAK0B,OAM3B1B,KAAKq6B,iBAAmBr6B,KAAK0B,OAAS1B,KAAK0B,MAAQ,GAAM,EACpD1B,KAAK0B,MAAMg5B,QAAQ16B,KAAKq6B,iBAG1Br6B,KAAK0B,OAAS,mCAIvBqiB,EAAFhjB,UAAA0B,MAAE,WACEzC,KAAK26B,qBAIP5W,EAAFhjB,UAAA65B,KAAE,WACE56B,KAAK66B,oBAOPr5B,OAAFC,eAAMsiB,EAANhjB,UAAA,eAAE,WAAwB,MAAOf,MAAK86B,OAAO96B,KAAK85B,2CAmBhDt4B,OAAFC,eAAMsiB,EAANhjB,UAAA,mBAAE,WAGE,MAAOf,MAAKokB,UAAYpkB,KAAK+6B,OAAS/6B,KAAK+6B,wCAK7Cv5B,OAAFC,eAAMsiB,EAANhjB,UAAA,mBAAE,WACE,MAAwB,KAAjBf,KAAKg7B,yCAOdx5B,OAAFC,eAAMsiB,EAANhjB,UAAA,iBAAE,WACE,MAAIf,MAAKoC,SAhRc,EAmRnBpC,KAAKi7B,cAAgBj7B,KAAKikB,WACrBjkB,KAAKgO,UA9QiB,GAHG,EAmR3B,mCAITxM,OAAFC,eAAMsiB,EAANhjB,UAAA,8BAAE,WACE,GAAIm6B,GAAOl7B,KAAKokB,SAAW,IAAM,GAEjC,QACE9gB,UAAa,YAAY43B,EAA/B,KAFel7B,KAAKm7B,mBAAqB,IAAM,IAEDn7B,KAAKo7B,UAAnD,YAAwEF,EAAxE,KAAgF,EAAIl7B,KAAKg7B,SAAzF,sCAKEx5B,OAAFC,eAAMsiB,EAANhjB,UAAA,wBAAE,WACE,GAAIm6B,GAAOl7B,KAAKokB,SAAW,IAAM,GAEjC,QACE9gB,UAAa,YAAY43B,EAA/B,KAFel7B,KAAKm7B,mBAAqB,GAAK,KAEAn7B,KAAKo7B,UAAnD,YAAwEF,EAAxE,IAAgFl7B,KAAKg7B,QAArF,sCAKEx5B,OAAFC,eAAMsiB,EAANhjB,UAAA,6BAAE,WAME,OACEuC,UAAa,aANJtD,KAAKokB,SAAW,IAAM,KAMrC,KAHgBpkB,KAAKokB,UAA+B,OAAnBpkB,KAAK+tB,WAA2B,IAAL,IAC3C/tB,KAAKg6B,qBAAuB,EAAI,IAEjD,uCAKEx4B,OAAFC,eAAMsiB,EAANhjB,UAAA,oBAAE,WACE,GAAIs6B,GAAuC,IAA5Br7B,KAAKg6B,qBAChBsB,EAAiBt7B,KAAKokB,SAAW,OAAOiX,EAAhD,IAAiEA,EAAjE,QACQH,EAAOl7B,KAAKokB,SAAW,IAAM,IAI7BmX,EAAQv7B,KAAKokB,UAA+B,OAAnBpkB,KAAK+tB,WAA4B,GAAN,IACpDyN,EAAUx7B,KAAKokB,UAA+B,OAAnBpkB,KAAK+tB,WAA0C,GAApB,kBACtDxoB,GACF+1B,eAAkBA,EAElBh4B,UAAa,0BAA0B43B,EAA7C,IAAqDK,EAAOF,EAAW,EAAvE,KAA6EG,EAGzE,IAAIx7B,KAAKi7B,aAAej7B,KAAKo7B,UAAW,CAItC71B,EAAO,WAHIvF,KAAKokB,SACXpkB,KAAKy7B,YAAc,SAAW,MAC9Bz7B,KAAKy7B,YAAc,QAAU,SACJz7B,KAAKo7B,UAAzC,KAGI,MAAO71B,oCAGT/D,OAAFC,eAAMsiB,EAANhjB,UAAA,6BAAE,WAOE,OACEuC,UAAa,aAPJtD,KAAKokB,SAAW,IAAM,KAOrC,KAFoE,MADxC,OAAnBpkB,KAAK+tB,YAAwB/tB,KAAKokB,SAAgCpkB,KAAKy7B,aAAxBz7B,KAAKy7B,aAC5Bz7B,KAAKg7B,QAAU,EAAIh7B,KAAKg7B,SAEzD,uCA4BAx5B,OAAAC,eAAcsiB,EAAdhjB,UAAA,qCACI,MAA2B,OAAnBf,KAAK+tB,YAAwB/tB,KAAKokB,SAAgCpkB,KAAKy7B,aAAxBz7B,KAAKy7B,6CAIhEj6B,OAAAC,eAAcsiB,EAAdhjB,UAAA,6BACI,MAAQf,MAAKiD,MAA2B,OAAnBjD,KAAKiD,KAAKvB,MAAkB,MAAQ,uCAe3DqiB,EAAFhjB,UAAA8f,SAAE,WAAA,GAAFhhB,GAAAG,IACIA,MAAKiyB,cACAE,QAAQnyB,KAAK0E,YAAY9B,eAAe,GACxC/B,UAAU,SAAC0I,GACV1J,EAAKmO,YAAczE,GAAqB,aAAXA,EAC7B1J,EAAKsB,mBAAmBwnB,kBAE1B3oB,KAAKiD,OACPjD,KAAKm6B,uBAAyBn6B,KAAKiD,KAAKiJ,OAAOrL,UAAU,WACvDhB,EAAKsB,mBAAmBC,mBAK9B2iB,EAAFhjB,UAAAC,YAAE,WACEhB,KAAKiyB,cAAcI,eAAeryB,KAAK0E,YAAY9B,eACnD5C,KAAKm6B,uBAAuBl5B,eAG9B8iB,EAAFhjB,UAAA26B,cAAE,WACM17B,KAAKoC,WAMTpC,KAAKi6B,kBAAoBj6B,KAAK27B,uBAC9B37B,KAAK47B,+BAGP7X,EAAFhjB,UAAA86B,SAAE,SAAS/xB,GACP,IAAI9J,KAAKoC,SAAT,CAIA,GAAI05B,GAAW97B,KAAK0B,KACpB1B,MAAK+5B,YAAa,EAClB/5B,KAAK26B,oBACL36B,KAAK+7B,0BAA0BC,EAAGlyB,EAAMmyB,QAASC,EAAGpyB,EAAMqyB,UAGtDL,GAAY97B,KAAK0B,QACnB1B,KAAKo8B,kBACLp8B,KAAKy2B,sBAIT1S,EAAFhjB,UAAAs7B,SAAE,SAASvyB,GACP,IAAI9J,KAAKoC,SAAT,CAMKpC,KAAK+5B,YACR/5B,KAAKs8B,cAAc,MAIrBxyB,EAAMqE,gBAEN,IAAI2tB,GAAW97B,KAAK0B,KACpB1B,MAAK+7B,0BAA0BC,EAAGlyB,EAAMyyB,OAAOP,EAAGE,EAAGpyB,EAAMyyB,OAAOL,IAG9DJ,GAAY97B,KAAK0B,OACnB1B,KAAKo8B,oBAITrY,EAAFhjB,UAAAu7B,cAAE,SAAcxyB,GACR9J,KAAKoC,UAAYpC,KAAK+5B,aAK1B/5B,KAAK07B,gBAEL17B,KAAK+5B,YAAa,EAClB/5B,KAAK26B,oBACL36B,KAAKw8B,mBAAqBx8B,KAAK0B,MAE3BoI,IACF9J,KAAK+7B,0BAA0BC,EAAGlyB,EAAMyyB,OAAOP,EAAGE,EAAGpyB,EAAMyyB,OAAOL,IAClEpyB,EAAMqE,oBAIV4V,EAAFhjB,UAAA07B,YAAE,WACEz8B,KAAK+5B,YAAa,EAEd/5B,KAAKw8B,oBAAsBx8B,KAAK0B,OAAU1B,KAAKoC,UACjDpC,KAAKy2B,mBAEPz2B,KAAKw8B,mBAAqB,MAG5BzY,EAAFhjB,UAAA27B,SAAE,WAGE18B,KAAKi6B,kBAAoBj6B,KAAK27B,uBAC9B37B,KAAK47B,8BAGP7X,EAAFhjB,UAAA47B,QAAE,WACE38B,KAAK01B,aAGP3R,EAAFhjB,UAAA67B,WAAE,SAAW9yB,GACT,IAAI9J,KAAKoC,SAAT,CAEA,GAAI05B,GAAW97B,KAAK0B,KAEpB,QAAQoI,EAAMwZ,SACZ,IAAKuZ,GAAAA,QACH78B,KAAK88B,WAAW,GAChB,MACF,KAAKC,GAAAA,UACH/8B,KAAK88B,YAAY,GACjB,MACF,KAAKrZ,GAAAA,IACHzjB,KAAK0B,MAAQ1B,KAAK0D,GAClB,MACF,KAAK6f,GAAAA,KACHvjB,KAAK0B,MAAQ1B,KAAK2D,GAClB,MACF,KAAKq5B,GAAAA,WAQHh9B,KAAK88B,WAA8B,OAAnB98B,KAAK+tB,WAAsB,GAAK,EAChD,MACF,KAAKkP,GAAAA,SACHj9B,KAAK88B,WAAW,EAChB,MACF,KAAKI,GAAAA,YAEHl9B,KAAK88B,WAA8B,OAAnB98B,KAAK+tB,YAAuB,EAAI,EAChD,MACF,KAAKoP,GAAAA,WACHn9B,KAAK88B,YAAY,EACjB,MACF,SAGE,OAGAhB,GAAY97B,KAAK0B,QACnB1B,KAAKo8B,kBACLp8B,KAAKy2B,oBAGPz2B,KAAK+5B,YAAa,EAClBjwB,EAAMqE,mBAGR4V,EAAFhjB,UAAAq8B,SAAE,WACEp9B,KAAK+5B,YAAa,GAIZhW,EAAVhjB,UAAA+7B,WAAA,SAAqBO,GACjBr9B,KAAK0B,MAAQ1B,KAAK86B,QAAQ96B,KAAK0B,OAAS,GAAK1B,KAAKgkB,KAAOqZ,EAAUr9B,KAAK2D,IAAK3D,KAAK0D,MAI5EqgB,EAAVhjB,UAAAg7B,yBAAA,SAAmCuB,GAC/B,GAAKt9B,KAAKi6B,kBAAV,CAIA,GAAIsD,GAASv9B,KAAKokB,SAAWpkB,KAAKi6B,kBAAkBlN,IAAM/sB,KAAKi6B,kBAAkB/Z,KAC7Esd,EAAOx9B,KAAKokB,SAAWpkB,KAAKi6B,kBAAkBtvB,OAAS3K,KAAKi6B,kBAAkB9Z,MAC9Esd,EAAez9B,KAAKokB,SAAWkZ,EAAIpB,EAAIoB,EAAItB,EAG3ChB,EAAUh7B,KAAK86B,QAAQ2C,EAAeF,GAAUC,EAUpD,IARIx9B,KAAKm7B,qBACPH,EAAU,EAAIA,GAOA,IAAZA,EACFh7B,KAAK0B,MAAQ1B,KAAK2D,QACb,IAAgB,IAAZq3B,EACTh7B,KAAK0B,MAAQ1B,KAAK0D,QACb,CACL,GAAMg6B,GAAa19B,KAAK29B,gBAAgB3C,GAIlC4C,EAAen6B,KAAKo6B,OAAOH,EAAa19B,KAAK2D,KAAO3D,KAAKgkB,MAAQhkB,KAAKgkB,KAAOhkB,KAAK2D,GAGxF3D,MAAK0B,MAAQ1B,KAAK86B,OAAO8C,EAAc59B,KAAK2D,IAAK3D,KAAK0D,QAKlDqgB,EAAVhjB,UAAA01B,4BACIz2B,KAAKk6B,8BAA8Bl6B,KAAK0B,OACxC1B,KAAKkM,OAAOnK,KAAK/B,KAAKgJ,uBAIhB+a,EAAVhjB,UAAAq7B,2BACIp8B,KAAKqkB,MAAMtiB,KAAK/B,KAAKgJ,uBAIf+a,EAAVhjB,UAAA66B,sCACI,GAAK57B,KAAKkkB,cAAiBlkB,KAAKi6B,kBAIhC,GAAyB,QAArBj6B,KAAKkkB,aAAwB,CAC/B,GAAI4Z,GAAY99B,KAAKokB,SAAWpkB,KAAKi6B,kBAAkBtvB,OAAS3K,KAAKi6B,kBAAkB9Z,MACnF4d,EAAgBD,EAAY99B,KAAKgkB,MAAQhkB,KAAK0D,IAAM1D,KAAK2D,KACzDq6B,EAAev6B,KAAK+b,KAhnBG,GAgnB6Bue,GACpDE,EAAgBD,EAAeh+B,KAAKgkB,IACxChkB,MAAKg6B,qBAAuBiE,EAAgBH,MAE5C99B,MAAKg6B,qBAAuBh6B,KAAKkkB,aAAelkB,KAAKgkB,MAAQhkB,KAAK0D,IAAM1D,KAAK2D,MAKzEogB,EAAVhjB,UAAAiI,mBAAA,SAA6BtH,OAA7B,KAAAA,IAA6BA,EAAQ1B,KAAK0B,MACtC,IAAIoI,GAAQ,GAAIqvB,GAKhB,OAHArvB,GAAMorB,OAASl1B,KACf8J,EAAMpI,MAAQA,EAEPoI,GAIDia,EAAVhjB,UAAAq5B,qBAAA,SAA+B14B,GAC3B,QAASA,GAAS,GAAK1B,KAAK2D,MAAQ3D,KAAK0D,IAAM1D,KAAK2D,MAI9CogB,EAAVhjB,UAAA48B,gBAAA,SAA0BjG,GACtB,MAAO13B,MAAK2D,IAAM+zB,GAAc13B,KAAK0D,IAAM1D,KAAK2D,MAI1CogB,EAAVhjB,UAAA+5B,OAAA,SAAiBp5B,EAAeiC,EAASD,GACrC,WADJ,KAAAC,IAAgCA,EAAhC,OAAA,KAAAD,IAAyCA,EAAzC,GACWD,KAAKC,IAAIC,EAAKF,KAAKE,IAAIjC,EAAOgC,KAQ/BqgB,EAAVhjB,UAAA46B,gCACI,MAAO37B,MAAKskB,eAAiBtkB,KAAKskB,eAAe1hB,cAAcs7B,wBAA0B,MAOnFna,EAAVhjB,UAAA45B,6BACI36B,KAAK0E,YAAY9B,cAAcH,SAIzBshB,EAAVhjB,UAAA85B,4BACI76B,KAAK0E,YAAY9B,cAAcg4B,QAOjC7W,EAAFhjB,UAAA41B,WAAE,SAAWj1B,GACT1B,KAAK0B,MAAQA,GAQfqiB,EAAFhjB,UAAA61B,iBAAE,SAAiBC,GACf72B,KAAKk6B,8BAAgCrD,GAQvC9S,EAAFhjB,UAAA+1B,kBAAE,SAAkBD,GAChB72B,KAAK01B,UAAYmB,GAQnB9S,EAAFhjB,UAAAg2B,iBAAE,SAAiBC,GACfh3B,KAAKoC,SAAW40B,kBA5pBpB9xB,KAACC,EAAAA,UAADC,OAAAC,SAAA,aACE8F,SAAU,YACVwH,WAAFumB,IACEnzB,MACFo4B,UAAA,aACMC,SAAN,YACIzvB,UAAW,mBACX0vB,YAAJ,qBACIC,UAAW,aACX7M,eAAJ,kBACI8M,UAAW,mBACXC,aAAc,gBACdC,eAAJ,wBACIz4B,MAAJ,aACIsM,KAAJ,SACIosB,aAAJ,WACInwB,uBAAJ,WACIowB,uBAAwB,MACxBC,uBAAwB,MACxBC,uBAAwB,QACxBC,0BAAJ,uCACIC,8BAA+B,WAC/BC,+BAAJ,eACIC,gCAAJ,YACIC,mCAAJ,cACIC,6BAAJ,aACIC,yCAAJ,aACIC,8BAAJ,WACIC,+BAAJ,cACIC,oCAAJ,sDACI1G,kCAAJ,uCAEAvzB,SAAA,ipBACAC,QAAA;o+OACEC,QAAF,WAAA,QAAA,YACEC,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAA2CC,yFA5G3CZ,KAAE+H,EAAAA,oBAlBF/H,KAAQkB,EAAAA,eAARC,aAAAnB,KAAAoB,EAAAA,aAgBApB,SAAE2J,GAAFxI,aAAAnB,KAAA8J,EAAAA,UAAA5J,MAAA,gBAfAF,SAAQ2J,GAARxI,aAAAnB,KAAAoB,EAAAA,WAAApB,KAAA4J,EAAAA,OAAA1J,MAAA0e,EAAAA,4BAqbAC,EAAAxd,6DAjTA5C,MAAAuB,KAAAuB,EAAAA,QAQAud,OAAA9e,KAAAuB,EAAAA,QAYAwd,aAAA/e,KAAAuB,EAAAA,QAiBAyd,eAAAhf,KAAAuB,EAAAA,QAeA/E,QAAAwD,KAAAuB,EAAAA,QASA0d,cAAAjf,KAAAuB,EAAAA,QAcA2d,WAAAlf,KAAAuB,EAAAA,QAgCAyF,SAAAhH,KAAAyB,EAAAA,SAGA0d,QAAAnf,KAAAyB,EAAAA,SAQA2d,iBAAApf,KAAAsB,EAAAA,UAAApB,MAAA,oBAsKA2e,mCCzaA,sBAeA7e,KAAC+J,EAAAA,SAAD7J,OACE8J,SAAUC,EAAAA,aAAcC,IACxBI,SAAUuU,GAAW3U,IACrBQ,cAAemU,IACfpR,YAAaC,QAAS2R,EAAAA,sBAAuBC,SAAUC,SAnBzDC,KCsBAC,GAAA,WA4BE,QAAFA,GAAcC,EACQC,GADpB,GAAFhlB,GAAAG,IACsBA,MAAtB6kB,YAAsBA,EAlBtB7kB,KAAA8kB,gBAAqC,GAAIjZ,GAAAA,QAGzC7L,KAAA+kB,aAAkC,GAAIlZ,GAAAA,QAGtC7L,KAAAglB,UAA+B,GAAInZ,GAAAA,QASnC7L,KAAAilB,oBAA+B,EAI3BjlB,KAAK4kB,kBAAoBA,EAEzB5kB,KAAKklB,WAAWrkB,UAAU,WAAM,MAAAhB,GAAKslB,YACrCP,EAAkBQ,QAAQvkB,UAAU,WAAM,MAAAhB,GAAKwlB,mBAvDnD,MA2DEV,GAAF5jB,UAAAokB,QAAE,WACOnlB,KAAK8kB,gBAAgBQ,QACxBtlB,KAAK4kB,kBAAkBW,OAEzBC,aAAaxlB,KAAKylB,qBAIpBd,EAAF5jB,UAAA2kB,kBAAE,WACO1lB,KAAKglB,UAAUM,SAClBtlB,KAAKilB,oBAAqB,EAC1BjlB,KAAKglB,UAAUpY,OACf5M,KAAKglB,UAAUnY,aAUnB8X,EAAF5jB,UAAA4kB,gBAAE,WACE3lB,KAAK0lB,qBAIPf,EAAF5jB,UAAA6kB,cAAE,SAAcC,GAAd,GAAFhmB,GAAAG,IACIA,MAAKylB,mBAAqBK,WAAW,WAAM,MAAAjmB,GAAKslB,WAAWU,IAI7DlB,EAAF5jB,UAAAglB,MAAE,WACO/lB,KAAK+kB,aAAaO,SACrBtlB,KAAK+kB,aAAanY,OAClB5M,KAAK+kB,aAAalY,aAKd8X,EAAV5jB,UAAAskB,0BACIrlB,KAAK6kB,YAAYmB,UAEZhmB,KAAKglB,UAAUM,QAClBtlB,KAAKglB,UAAUnY,WAGjB7M,KAAK8kB,gBAAgBlY,MAAMqZ,kBAAmBjmB,KAAKilB,qBACnDjlB,KAAK8kB,gBAAgBjY,WACrB7M,KAAKilB,oBAAqB,GAI5BN,EAAF5jB,UAAAmlB,eAAE,WACE,MAAOlmB,MAAK8kB,gBAAgBqB,gBAI9BxB,EAAF5jB,UAAAqlB,YAAE,WACE,MAAOpmB,MAAK4kB,kBAAkByB,UAIhC1B,EAAF5jB,UAAAmkB,SAAE,WACE,MAAOllB,MAAKglB,UAAUmB,gBA3H1BxB,KCaa2B,GAAqB,GAAI5G,GAAAA,eAAoB,mBAW1D6G,GAAA,wBAEAvmB,KAAAwmB,WAAoC,YAGpCxmB,KAAAymB,oBAAiC,GAMjCzmB,KAAA6lB,SAAsB,EAStB7lB,KAAAkT,KAAoB,KAGpBlT,KAAA0mB,mBAAuD,SAGvD1mB,KAAA2mB,iBAAmD,SAlDnD,MAAAJ,MCkBaK,IAKXC,YAAa5P,EAAAA,QAAQ,eACnBG,EAAAA,WAAW,UACT/T,EAAAA,OAAOyjB,QAAS,MAChBzP,EAAAA,QAAW0P,GAAmBC,QAApC,IAA+CC,GAAgBC,oBAK7DC,cAAelQ,EAAAA,QAAQ,SACrBC,EAAAA,MAAM,8BAA+B7T,EAAAA,OAAOC,UAAW,oBACvD8T,EAAAA,WAAW,6DACTC,EAAAA,QAAW0P,GAAmBK,QADpC,IAC+CH,GAAgBI,qBAC3DjQ,EAAAA,WAAW,8CACTC,EAAAA,QAAW0P,GAAmBO,SADpC,IACgDL,GAAgBM,sCCD9D,QAAFC,GACWC,EACqBvU,GADrBlT,KAAXynB,YAAWA,EAEPznB,KAAKkT,KAAOA,EADhB,MAKEsU,GAAFzmB,UAAA2mB,OAAE,WACE1nB,KAAKynB,YAAY/B,qBAInBlkB,OAAFC,eAAM+lB,EAANzmB,UAAA,iBAAE,WACE,QAASf,KAAKkT,KAAKwU,uDA9BvBxiB,KAACC,EAAAA,UAADC,OAAAC,SAAA,mBACEC,SAAU,iJACVC,QAAF,+VACEE,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,OACEoT,YAAa0N,GAAfC,aACE9gB,MACF4hB,iBAAA,GACM3hB,MAAN,+HAWAwhB,oBC+BE,QAAFI,GACYlc,EACAhH,EACAvD,EAED0mB,GALT,GAAFhoB,GAOIsH,EAPJC,KAAApH,OAAAA,WACYH,GAAZ6L,QAAYA,EACA7L,EAAZ6E,YAAYA,EACA7E,EAAZsB,mBAAYA,EAEDtB,EAAXgoB,eAAWA,EAnBXhoB,EAAAiZ,YAAuB,EAMvBjZ,EAAAulB,QAAmC,GAAIvZ,GAAAA,QAGvChM,EAAAwmB,SAAoC,GAAIxa,GAAAA,QAGxChM,EAAAioB,gBAAoB,SATpB,MAL0C1f,GAA1Cwf,EAAAzgB,GA2BEygB,EAAF7mB,UAAAgnB,sBAAE,SAAyBC,GAGvB,MAFAhoB,MAAKioB,qBACLjoB,KAAKkoB,wBACEloB,KAAKmoB,cAAcJ,sBAAsBC,IAIlDJ,EAAF7mB,UAAAqnB,qBAAE,SAAwBJ,GAGtB,MAFAhoB,MAAKioB,qBACLjoB,KAAKkoB,wBACEloB,KAAKmoB,cAAcC,qBAAqBJ,IAIjDJ,EAAF7mB,UAAAsnB,eAAE,SAAeve,GACN,GAAA6Y,GAAX7Y,EAAA6Y,UAAsBF,EAAtB3Y,EAAA2Y,OAMI,KAJiB,SAAZA,GAAoC,SAAdE,GAAyBF,EAAQ6F,WAAW,YACrEtoB,KAAKuoB,gBAGH9F,EAAQ6F,WAAW,WAAY,CAGjC,GAAME,GAAUxoB,KAAKqmB,QAErBrmB,MAAK0L,QAAQ+c,IAAI,WACfD,EAAQ5b,OACR4b,EAAQ3b,eAMd+a,EAAF7mB,UAAA2nB,MAAE,WACO1oB,KAAK8Y,aACR9Y,KAAK8nB,gBAAkB,WAAW9nB,KAAK6nB,eAAelB,iBACtD3mB,KAAKmB,mBAAmBwnB,kBAK5Bf,EAAF7mB,UAAAwkB,KAAE,WAEE,MADAvlB,MAAK8nB,gBAAkB,UAAU9nB,KAAK6nB,eAAelB,iBAC9C3mB,KAAKolB,SAIdwC,EAAF7mB,UAAAC,YAAE,WACEhB,KAAK8Y,YAAa,EAClB9Y,KAAKuoB,iBAOCX,EAAV7mB,UAAAwnB,mCACIvoB,MAAK0L,QAAQkd,iBAAiBzC,eAAe/Z,KAAKyI,EAAAA,KAAK,IAAIhU,UAAU,WACnEhB,EAAKulB,QAAQxY,OACb/M,EAAKulB,QAAQvY,cAKT+a,EAAV7mB,UAAAmnB,iCACI,GAAMnc,GAAuB/L,KAAK0E,YAAY9B,cACxCimB,EAAe7oB,KAAK6nB,eAAeiB,UAErCD,KACEE,MAAMC,QAAQH,GAEhBA,EAAazf,QAAQ,SAAA6f,GAAY,MAAAld,GAAQvD,UAAUG,IAAIsgB,KAEvDld,EAAQvD,UAAUG,IAAIkgB,IAIqB,WAA3C7oB,KAAK6nB,eAAenB,oBACtB3a,EAAQvD,UAAUG,IAAI,wBAGqB,QAAzC3I,KAAK6nB,eAAelB,kBACtB5a,EAAQvD,UAAUG,IAAI,sBAKlBif,EAAV7mB,UAAAknB,8BACI,GAAIjoB,KAAKmoB,cAAcvG,cACrB,KAAMsH,OAAM,4FApIlBhkB,KAACC,EAAAA,UAADC,OAAAC,SAAA,sBACEC,SAAU,8CACVC,QAAF,opBACEK,gBAAFC,EAAAA,wBAAAC,OACEL,cAAFC,EAAAA,kBAAAC,KACEuT,YAAF0N,GAAAO,eACEphB,MACFuM,KAAc,QACRtM,MAAN,0BACImjB,WAAJ,kBACIC,gBAAJ,sGAzBAlkB,KAAE+H,EAAAA,oBAFF/H,KAAEqhB,MAUFqB,EAAArhB,6EA2BAqhB,mDCzDA,sBAkBA1iB,KAAC+J,EAAAA,SAAD7J,OACE8J,SACEma,EAAAA,cACAha,EAAAA,aACAF,EAAAA,aACAwK,GACAvK,IAEFI,SAAUoY,GAAsBxY,IAChCQ,cAAegY,GAAsBJ,IACrC8B,iBAAkB1B,GAAsBJ,QA5B1C+B,KCgCaC,GACT,GAAI9J,GAAAA,eAAkC,iCACpCC,WAAY,OACZC,QAAS6J,mBAkCb,QAAFC,GACcC,EACAC,EACAC,EACAC,EACwBC,EACeC,GALvChqB,KAAd2pB,SAAcA,EACA3pB,KAAd4pB,MAAcA,EACA5pB,KAAd6pB,UAAcA,EACA7pB,KAAd8pB,oBAAcA,EACwB9pB,KAAtC+pB,gBAAsCA,EACe/pB,KAArDgqB,eAAqDA,EAtBrDhqB,KAAAiqB,wBAAgE,KArDhE,MAwDEzoB,QAAFC,eAAMioB,EAAN3oB,UAAA,0BAAE,WACE,GAAMmpB,GAASlqB,KAAK+pB,eACpB,OAAOG,GAASA,EAAOC,mBAAqBnqB,KAAKiqB,6BAGnD,SAAuBvoB,GACjB1B,KAAK+pB,gBACP/pB,KAAK+pB,gBAAgBI,mBAAqBzoB,EAE1C1B,KAAKiqB,wBAA0BvoB,mCAmBnCgoB,EAAF3oB,UAAAqpB,kBAAE,SAAqBC,EAA6BC,GAEhD,MAAOtqB,MAAKuqB,QAAQF,EAAWC,IAUjCZ,EAAF3oB,UAAAypB,iBAAE,SAAiBllB,EAA4BglB,GAE3C,MAAOtqB,MAAKuqB,QAAQjlB,EAAUglB,IAShCZ,EAAF3oB,UAAA0pB,KAAE,SAAKC,EAAiBhD,EAAqB4C,OAA7C,KAAA5C,IAAwBA,EAAxB,GAEI,IAAMiD,GAAVC,MAAwB5qB,KAAKgqB,eAAmBM,EAO5C,OAHAK,GAAQzX,MAAQwX,QAApBA,EAA6BhD,OAA7BA,GACIiD,EAAQlE,oBAAsBiE,EAEvB1qB,KAAKoqB,kBAAkB5C,GAAgBmD,IAMhDjB,EAAF3oB,UAAAokB,QAAE,WACMnlB,KAAKmqB,oBACPnqB,KAAKmqB,mBAAmBhF,WAOpBuE,EAAV3oB,UAAA8pB,yBAAA,SAAmCC,EACAR,GAE/B,GAAMS,GAAeT,GAAUA,EAAOlK,kBAAoBkK,EAAOlK,iBAAiB4K,SAC5EA,EAAW,GAAIC,GAAAA,eAAeF,GAAgB/qB,KAAK6pB,UAAW,GAAIqB,WACrE3E,GAAmB+D,MAGhBa,EACF,GAAIC,GAAAA,gBAAgBxD,GAAsB0C,EAAOlK,iBAAkB4K,GACjEK,EAAmDP,EAAWjJ,OAAOsJ,EAE3E,OADAE,GAAaC,SAASzD,eAAiByC,EAChCe,EAAaC,UAMd5B,EAAV3oB,UAAAwpB,QAAA,SAAqBgB,EAA4CC,GAG7D,GAAMlB,GAAVM,MAAuB,GAAIrE,IAAwBvmB,KAAKgqB,eAAmBwB,GACjEV,EAAa9qB,KAAKyrB,eAAenB,GACjCoB,EAAY1rB,KAAK6qB,yBAAyBC,EAAYR,GACtD7C,EAAc,GAAI9C,IAAyC+G,EAAWZ,EAE5E,IAAIS,YAAmB9T,GAAAA,YAAa,CAClC,GAAMuQ,GAAS,GAAIlH,GAAAA,eAAeyK,EAAO,MACvCI,UAAWrB,EAAOpX,KAClBuU,YAARA,GAGMA,GAAY6D,SAAWI,EAAUtD,qBAAqBJ,OACjD,CACL,GAAMgD,GAAWhrB,KAAK4rB,gBAAgBtB,EAAQ7C,GACxCO,EAAS,GAAIoD,GAAAA,gBAAgBG,MAAS1c,GAAWmc,GACjDa,EAAaH,EAAU3D,sBAAyBC,EAGtDP,GAAY6D,SAAWO,EAAWP,SAkBpC,MAZAtrB,MAAK8pB,oBAAoBgC,QAAQC,EAAAA,YAAYC,SAAS5f,KACpDC,EAAAA,UAAUye,EAAWmB,cAAc7f,KAAKyI,EAAAA,KAAK,MAC7ChU,UAAU,SAAAqW,GACNA,EAAMgV,QACRpB,EAAWqB,eAAe3jB,UAAUG,IAAI,yBAExCmiB,EAAWqB,eAAe3jB,UAAUC,OAAO,2BAI/CzI,KAAKosB,iBAAiB3E,EAAa6C,GACnCtqB,KAAKmqB,mBAAqB1C,EACnBznB,KAAKmqB,oBAINT,EAAV3oB,UAAAqrB,iBAAA,SAA2B3E,EAAkC6C,aAEzD7C,GAAYvB,iBAAiBrlB,UAAU,WAEjChB,EAAKsqB,oBAAsB1C,IAC7B5nB,EAAKsqB,mBAAqB,QAI1BnqB,KAAKmqB,oBAGPnqB,KAAKmqB,mBAAmBjE,iBAAiBrlB,UAAU,WACjD4mB,EAAY7C,kBAAkB8D,UAEhC1oB,KAAKmqB,mBAAmBhF,WAGxBsC,EAAY7C,kBAAkB8D,QAI5B4B,EAAOzE,UAAYyE,EAAOzE,SAAW,GACvC4B,EAAYrB,cAAcvlB,UAAU,WAAM,MAAA4mB,GAAY7B,cAAc0E,EAAe,YAGjFA,EAAO7D,qBACTzmB,KAAK4pB,MAAMyC,SAAS/B,EAAO7D,oBAAqB6D,EAAO9D,aAQnDkD,EAAV3oB,UAAA0qB,eAAA,SAAyBnB,GACrB,GAAMgC,GAAgB,GAAIC,GAAAA,aAC1BD,GAAcvP,UAAYuN,EAAOvN,SAEjC,IAAIyP,GAAmBxsB,KAAK2pB,SAAStgB,WAAWojB,SAE1CC,EAA6B,QAArBpC,EAAOvN,UACf4P,EAC0B,SAA9BrC,EAAO5D,oBACwB,UAA9B4D,EAAO5D,qBAAmCgG,GACZ,QAA9BpC,EAAO5D,oBAAgCgG,EACpCE,GAAWD,GAAwC,WAA9BrC,EAAO5D,kBAgBlC,OAfIiG,GACFH,EAAiBtM,KAAK,KACb0M,EACTJ,EAAiBK,MAAM,KAEvBL,EAAiBM,qBAGa,QAA5BxC,EAAO3D,iBACT6F,EAAiBO,IAAI,KAErBP,EAAiBQ,OAAO,KAG1BV,EAAcE,iBAAmBA,EAC1BxsB,KAAK2pB,SAASsD,OAAOX,IAQtB5C,EAAV3oB,UAAA6qB,gBACA,SAAMtB,EACA7C,GAEF,GAAMsD,GAAeT,GAAUA,EAAOlK,kBAAoBkK,EAAOlK,iBAAiB4K,QAElF,OAAO,IAAIC,GAAAA,eAAeF,GAAgB/qB,KAAK6pB,UAAW,GAAIqB,WAC3DvG,GAAgB8C,IAChBnB,GAAoBgE,EAAOpX,yBAhOlChO,KAACgoB,EAAAA,WAAD9nB,OAAaua,WAAY4J,2CApCzBrkB,KAAQioB,EAAAA,UAFRjoB,KAAQkoB,EAAAA,gBAURloB,KAAEmoB,EAAAA,WATFnoB,KAAQooB,EAAAA,qBAsCRpoB,KAAawkB,EAAbrjB,aAAAnB,KA2BOoB,EAAAA,WA3BPpB,KA2BmBqoB,EAAAA,aAjDnBroB,KAA4BqhB,GAA5BlgB,aAAAnB,KAkDO4J,EAAAA,OAlDP1J,MAkDcokB,uOA3EdE,KCmDA8D,GAAA,yBAnDA,MAAAA,MAoDaC,GAAoBC,EAAiBrgB,EAAcmgB,qFAWhE3tB,GAAA8tB,UAAc,GAAIC,KAGlB/tB,EAAAguB,cAA2B,GAAIhiB,GAAAA,QAS/BhM,EAAAiuB,MAAiD,MAWjDjuB,EAAAkuB,WAAsC,GAYtCluB,EAAAse,WAAqE,GAAIpW,GAAAA,eAlGzE,MA4D6BK,GAA7B4lB,EAAA7mB,GAmBA3F,OAAAC,eAAMusB,EAANjtB,UAAA,iBAAA,WAAmC,MAAOf,MAAK+tB,gBAC7C,SAAchR,GACZ,GAAIrM,EAAAA,aAAeqM,GAA2B,QAAdA,GAAqC,SAAdA,EACrD,KAAMkR,IAA6BlR,EAErC/c,MAAK+tB,WAAahR,mCAStBvb,OAAAC,eAAMusB,EAANjtB,UAAA,oBAAA,WAAgC,MAAOf,MAAKkuB,mBAC1C,SAAiB1qB,GAAcxD,KAAKkuB,cAAgB7lB,EAAAA,sBAAsB7E,oCAU1EwqB,EAAFjtB,UAAAotB,SAAE,SAASC,GACP,IAAKA,EAASC,GACZ,KAAMC,KAGR,IAAItuB,KAAK2tB,UAAUY,IAAIH,EAASC,IAC9B,KAAMG,IAAgCJ,EAASC,GAEjDruB,MAAK2tB,UAAUc,IAAIL,EAASC,GAAID,IAOlCJ,EAAFjtB,UAAA2tB,WAAE,SAAWN,GACTpuB,KAAK2tB,UAAUgB,OAAOP,EAASC,KAIjCL,EAAFjtB,UAAA+b,KAAE,SAAKsR,GACCpuB,KAAK0M,QAAU0hB,EAASC,IAC1BruB,KAAK0M,OAAS0hB,EAASC,GACvBruB,KAAK+c,UAAYqR,EAASN,MAAQM,EAASN,MAAQ9tB,KAAK8tB,OAExD9tB,KAAK+c,UAAY/c,KAAK4uB,qBAAqBR,GAG7CpuB,KAAKme,WAAWpc,MAAM2K,OAAQ1M,KAAK0M,OAAQqQ,UAAW/c,KAAK+c,aAI7DiR,EAAFjtB,UAAA6tB,qBAAE,SAAqBR,GACnB,IAAKA,EAAY,MAAO,EAGxB,IAAMS,GAAwC,MAAzBT,EAASS,aAAuBT,EAASS,aAAe7uB,KAAK6uB,aAC9EC,EAAqBC,GAAsBX,EAASN,OAAS9tB,KAAK8tB,MAAOe,GAGzEG,EAAqBF,EAAmBhR,QAAQ9d,KAAK+c,WAAa,CAEtE,OADIiS,IAAsBF,EAAmBtsB,SAAUwsB,EAAqB,GACrEF,EAAmBE,IAG5BhB,EAAFjtB,UAAA8f,SAAE,WACE7gB,KAAKivB,oBAGPjB,EAAFjtB,UAAA4f,YAAE,WACE3gB,KAAK6tB,cAAcjhB,QAGrBohB,EAAFjtB,UAAAC,YAAE,WACEhB,KAAK6tB,cAAchhB,2BAvGvB3H,KAACmJ,EAAAA,UAADjJ,OACEC,SAAU,YACV8F,SAAU,UACV3F,QAAS,mDAWXkH,SAAAxH,KAAGuB,EAAAA,MAAHrB,MAAS,mBAMT0oB,QAAA5oB,KAAGuB,EAAAA,MAAHrB,MAAS,kBAGT2X,YAAA7X,KAAGuB,EAAAA,MAAHrB,MAAS,sBAcTypB,eAAA3pB,KAAGuB,EAAAA,MAAHrB,MAAS,yBAMT+Y,aAAAjZ,KAAGyB,EAAAA,OAAHvB,MAAU,oBAlGV4oB,GA4D6BP,IC1CvByB,GAA4BnI,GAAmBO,SAAW,IAC9BL,GAAgBC,eAGrCiI,IASXC,UAAWnY,EAAAA,QAAQ,aACjBC,EAAAA,MAAM,kBAAmB7T,EAAAA,OAAOC,UAAW,qBAE3C4T,EAAAA,MAAM,oBAAqB7T,EAAAA,OAAOC,UAAW,sBAC7C8T,EAAAA,WAAW,6BAA8BC,EAAAA,QAAQ6X,OAInDG,YAAapY,EAAAA,QAAQ,eACnBC,EAAAA,MAAM,kBAAmB7T,EAAAA,OAAOC,UAAW,oBAC3C4T,EAAAA,MAAM,oBAAqB7T,EAAAA,OAAOC,UAAW,mBAC7C8T,EAAAA,WAAW,6BAA8BC,EAAAA,QAAQ6X,OAInDI,aAAcrY,EAAAA,QAAQ,gBACpBC,EAAAA,MAAM,kBAAmB7T,EAAAA,OAAOC,UAAW,mBAC3C4T,EAAAA,MAAM,oBAAqB7T,EAAAA,OAAOC,UAAW,oBAC7C8T,EAAAA,WAAW,6BAA8BC,EAAAA,QAAQ6X,OAInDK,aAActY,EAAAA,QAAQ,gBACpBC,EAAAA,MAAM,wCAAyC7T,EAAAA,OAAOyjB,QAAS,KAC/D5P,EAAAA,MAAM,kCAAmC7T,EAAAA,OAAOyjB,QAAS,OACzD5P,EAAAA,MAAM,sEACF7T,EAAAA,OAAOyjB,QAAS,KAEpB1P,EAAAA,WAAW,8CAA+CC,EAAAA,QAAQ,QAClED,EAAAA,WAAW,UAAWC,EAAAA,QAAQ6X,OAUhCM,cAAevY,EAAAA,QAAQ,iBAErBG,EAAAA,WAAW,yCACPC,EAAAA,QAAQ6X,GAA2BO,EAAAA,WACjCpsB,EAAAA,OAAOC,UAAW,qBAClBD,EAAAA,OAAOC,UAAW,sBAGxB8T,EAAAA,WAAW,yCACPC,EAAAA,QAAQ6X,GAA2BO,EAAAA,WACjCpsB,EAAAA,OAAOC,UAAW,kBAClBD,EAAAA,OAAOC,UAAW,wBAGxB8T,EAAAA,WAAW,uCACPC,EAAAA,QAAQ6X,GAA2BO,EAAAA,WACjCpsB,EAAAA,OAAOC,UAAW,oBAClBD,EAAAA,OAAOC,UAAW,sBAGxB8T,EAAAA,WAAW,uCACPC,EAAAA,QAAQ6X,GAA2BO,EAAAA,WACjCpsB,EAAAA,OAAOC,UAAW,kBAClBD,EAAAA,OAAOC,UAAW,yBAExB4T,EAAAA,MAAM,yEACF7T,EAAAA,OAAOC,UAAW,mBACtB4T,EAAAA,MAAM,qCACF7T,EAAAA,OAAOC,UAAW,sBACtB4T,EAAAA,MAAM,kCACF7T,EAAAA,OAAOC,UAAW,uBAIxBosB,cAAezY,EAAAA,QAAQ,iBACrBG,EAAAA,WAAW,WACTuY,EAAAA,MAAM,KAAMC,EAAAA,gBAAiB9Y,UAAU,oCCrF7C9W,KAAA0J,QAAoC,GAAImC,GAAAA,QAGxC7L,KAAA6vB,gBAAoB,SAACxB,GACjB,MAAO,sBAAsBA,GAzBjC,sBAeAnpB,KAACgoB,EAAAA,WAAD9nB,OAAaua,WAAY,8GAfzBmQ,KAkCaC,IAEXnd,QAASkd,GACTE,OAAQ,GAAI1pB,GAAAA,SAAY,GAAIinB,GAAAA,SAAYuC,KACxCG,WAAYC,ICPdC,GAAA,yBA/BA,MAAAA,MAgCaC,GAA0B/iB,EAAc8iB,mBAoGnD,QAAFE,GAAqBC,EACPC,EACmBvS,EACAwS,GAH/B,GAAF3wB,GAKIsH,EALJC,KAAApH,OAAAA,IAOI,IAPiBH,EAArBywB,MAAqBA,EAEYzwB,EAAjCme,MAAiCA,EACAne,EAAjC2wB,cAAiCA,EAtCjC3wB,EAAA4wB,oBAAgC,EAUhC5wB,EAAA6wB,gBAAmC,GAKnC7wB,EAAA8wB,4BAA+B,EAS/B9wB,EAAA2vB,cAA+C,SAkBtCxR,EACH,KAAM4S,YAGR/wB,GAAKgxB,sBAAwBnwB,EAAAA,MAAMsd,EAAMG,WAAYH,EAAM6P,cAAeyC,EAAM5mB,SAC3E7I,UAAU,WACLhB,EAAKixB,aACPjxB,EAAKkxB,yBAIFlxB,EAAKixB,aAAejxB,EAAKmxB,YAA0C,WAA5BnxB,EAAKmxB,WAAWvO,UAC1D5iB,EAAK8wB,4BAA6B,EAClC9wB,EAAKoxB,8BAA8BtO,UAAW,SAAUF,QAAS5iB,EAAK6wB,mBAGxEH,EAAkBnvB,mBA5B5B,MAtCmCgH,GAAnCioB,EAAAlpB,GAuCA3F,OAAAC,eAAM4uB,EAANtvB,UAAA,oBAAA,WAAgC,MAAOf,MAAKkuB,mBAC1C,SAAiB1qB,GAAKxD,KAAKkuB,cAAgB7lB,EAAAA,sBAAsB7E,oCA8BjE6sB,EAAFtvB,UAAA8f,SAAE,YACO7gB,KAAKquB,IAAMruB,KAAKwwB,gBACnBxwB,KAAKquB,GAAKruB,KAAKwwB,cAAc9Y,MAI/B1X,KAAK+wB,wBACL/wB,KAAKixB,8BACAxO,QAASziB,KAAK8wB,YAAc,SAAW9wB,KAAK0wB,kBAEjD1wB,KAAKge,MAAMmQ,SAASnuB,OAGtBqwB,EAAFtvB,UAAAC,YAAE,WACEhB,KAAKge,MAAM0Q,WAAW1uB,MACtBA,KAAK6wB,sBAAsB5vB,eAO7BovB,EAAFtvB,UAAAmwB,yBAAE,SAAyBC,GAEnBnxB,KAAKoxB,eAAiBD,IAE1BnxB,KAAKywB,mBAAqBU,EAErBnxB,KAAK8wB,cACR9wB,KAAK+wB,wBACD/wB,KAAKywB,mBACPzwB,KAAKixB,8BAA8BtO,UAAW3iB,KAAK0wB,gBAAiBjO,QAAS,SAE7EziB,KAAKixB,8BAA8BtO,UAAW,OAAQF,QAASziB,KAAK0wB,qBAU1EL,EAAFtvB,UAAAkwB,6BAAE,SAA6BI,GAC3BrxB,KAAKgxB,WAAaK,EAIdrxB,KAAK2wB,6BACP3wB,KAAKgxB,YAAcvO,QAAS4O,EAAU5O,WAK1C4N,EAAFtvB,UAAAgK,aAAE,WACE,IAAI/K,KAAKoxB,cAAT,CAEApxB,KAAKge,MAAMlB,KAAK9c,MAGgB,SAA5BA,KAAKgxB,WAAWvO,SAAkD,WAA5BziB,KAAKgxB,WAAWvO,UACxDziB,KAAK2wB,4BAA6B,EAKpC,IAAMU,GAAsCrxB,KAAK8wB,aAC5CnO,UAAW3iB,KAAK0wB,gBAAiBjO,QAAS,WAC1CE,UAAW,SAAUF,QAASziB,KAAK0wB,gBACxC1wB,MAAKixB,6BAA6BI,GAElCrxB,KAAKywB,oBAAqB,IAI5BJ,EAAFtvB,UAAA+vB,UAAE,WACE,MAAO9wB,MAAKge,MAAMtR,QAAU1M,KAAKquB,KACH,QAAzBruB,KAAKge,MAAMjB,WAAgD,SAAzB/c,KAAKge,MAAMjB,YAIpDsT,EAAFtvB,UAAAuwB,wBAAE,WACE,OAAUtxB,KAAK8wB,YAAc,UAAY,IAAK9wB,KAAK0wB,iBAIrDL,EAAFtvB,UAAAwwB,mBAAE,WACE,GAAM5O,GAAY3iB,KAAKgxB,WAAWrO,SAClC,QAAQA,EAAeA,EAA3B,OAA6C,IAAM3iB,KAAKgxB,WAAWvO,SAajE4N,EAAFtvB,UAAAgwB,sBAAE,WACE/wB,KAAK0wB,gBAAkB1wB,KAAK8wB,YACxB9wB,KAAKge,MAAMjB,UACV/c,KAAK8tB,OAAS9tB,KAAKge,MAAM8P,OAGhCuC,EAAFtvB,UAAAqwB,YAAE,WACE,MAAOpxB,MAAKge,MAAM5b,UAAYpC,KAAKoC,UASrCiuB,EAAFtvB,UAAAywB,sBAAE,WACE,MAAKxxB,MAAK8wB,YAEqB,OAAxB9wB,KAAKge,MAAMjB,UAAqB,YAAc,aAFrB,qBAtNpC7X,KAACC,EAAAA,UAADC,OAAAC,SAAA,oBACE8F,SAAU,gBACV7F,SAAU,qiCACVC,QAAF,guCACEQ,MACF4I,UAAA,iBACM8iB,eAAN,iCACIC,cAAJ,iCACIC,eAAgB,kCAChBC,mBAAJ,0BACIC,mCAAJ,iBAEApsB,cAAAC,EAAAA,kBAAAC,KACAC,gBAAAC,EAAAA,wBAAAC,OACEN,QAAF,YACE0T,YACFiW,GAAAC,UACAD,GAAAE,YACIF,GAAkBG,aAClBH,GAAkBI,aAClBJ,GAAkBK,cAClBL,GAAkBO,4FA1DtBxqB,KAAQ8oB,GAAR3nB,aAAAnB,KAAAoB,EAAAA,aAdApB,KAAEyV,EAAAA,aAAFtU,aAAAnB,KAAAoB,EAAAA,cAHA+pB,EAAA9pB,4FA6GAunB,QAAA5oB,KAAAuB,EAAAA,QAGAooB,eAAA3pB,KAAAuB,EAAAA,SAMA4pB,mCC/HA,sBAeAnrB,KAAC+J,EAAAA,SAAD7J,OACE8J,SAAUC,EAAAA,cACVK,SAAUwe,GAASqC,IACnBzgB,cAAeoe,GAASqC,IACxB1d,WAAYod,QAnBd+B,oBCeE,QAAFhY,GAAcxU,GACd,MAAI6B,GAAJC,KAAApH,KAAUsF,IAAVtF,KAhBA,MAckCoI,GAAlC0R,EAAA3S,kBAHAjC,KAACmJ,EAAAA,UAADjJ,OACEC,SAAU,yDAJZH,KAAmBuS,EAAAA,eARnBqC,GAckCiY,EAAAA,yCCKlC/xB,KAAA0J,QAAoC,GAAImC,GAAAA,QAGxC7L,KAAAgyB,cAA0B,WAtB1B,sBAaA9sB,KAACgoB,EAAAA,WAAD9nB,OAAaua,WAAY,8GAbzB5F,mBjC6DE,QAAFpD,GACW2Z,EACC2B,EACAC,EACR3B,GAHOvwB,KAAXswB,MAAWA,EACCtwB,KAAZiyB,cAAYA,EACAjyB,KAAZkyB,SAAYA,EAERD,EAAcE,QAAQD,EAAStvB,eAAe,GAC9C5C,KAAKoyB,kBAAoB9B,EAAM5mB,QAAQ7I,UAAU,WAAM,MAAA0vB,GAAkBnvB,iBAR7E,MAWEuV,GAAF5V,UAAAC,YAAE,WACEhB,KAAKoyB,kBAAkBnxB,cACvBjB,KAAKiyB,cAAcI,eAAeryB,KAAKkyB,SAAStvB,gBAIlD+T,EAAF5V,UAAAuxB,aAAE,WACE,MAAOtyB,MAAKuyB,gBAAiBzY,IAAe,KAAO9Z,KAAKuyB,OAI1D5b,EAAF5V,UAAAyxB,eAAE,WACE,MAAOxyB,MAAKuyB,gBAAiBzY,IAAe9Z,KAAKuyB,MAAQ,MAI3D5b,EAAF5V,UAAA0xB,gBAAE,WACE,MAAOzyB,MAAKkyB,SAAStvB,eAIvB+T,EAAF5V,UAAA2xB,gBAAE,WACE,OACEzwB,MAAOjC,KAAKiC,MACZyK,OAAQ1M,KAAK0M,OACboK,SAAU9W,KAAK8W,WAInBH,EAAF5V,UAAA0B,MAAE,WACEzC,KAAKyyB,kBAAkBhwB,wBA3E3ByC,KAACC,EAAAA,UAADC,OAAAC,SAAA,kBACEC,SAAU;k9CACVC,QAAF,4nBACEQ,MACFC,MAAA,kBACMsM,KAAN,OAEA7M,cAAAC,EAAAA,kBAAAC,KACAC,gBAAAC,EAAAA,wBAAAC,+EAZAZ,KAAQ4N,EAAAA,aAbR5N,KAAQ+H,EAAAA,qBAGR0J,EAAApQ,8DA8BAqQ,gBAAA1R,KAAAuB,EAAAA,QAGAxE,QAAAiD,KAAGuB,EAAAA,QAGHoQ,WAAA3R,KAAAuB,EAAAA,QAGAiG,SAAAxH,KAAAuB,EAAAA,QAGAqQ,WAAA5R,KAAGuB,EAAAA,SAMHkQ,KC1CaI,IAKXC,yBAA0BC,EAAAA,QAAQ,kBAChCC,EAAAA,MAAM,WAAY7T,EAAAA,OAAOC,UAAW,2BAA4B6T,WAAY,YAC5ED,EAAAA,MAAM,UAAW7T,EAAAA,OAAOC,UAAW,OAAQ6T,WAAY,aACvDD,EAAAA,MAAM,OAAQ7T,EAAAA,OAAOC,UAAW,0BAA2B6T,WAAY,YACvEC,EAAAA,WAAW,SAAUC,EAAAA,QAAQ,2CAI/BC,uBAAwBL,EAAAA,QAAQ,kBAC9BC,EAAAA,MAAM,WAAY7T,EAAAA,OAAOsH,OAAQ,MAAOwM,WAAY,YACpDD,EAAAA,MAAM,OAAQ7T,EAAAA,OAAOsH,OAAQ,MAAOwM,WAAY,YAChDD,EAAAA,MAAM,UAAW7T,EAAAA,OAAOsH,OAAQ,IAAKwM,WAAY,aACjDC,EAAAA,WAAW,gBAAiBC,EAAAA,QAAQ,0DCJtC,QAAFE,GAAqBC,GAAAxX,KAArBwX,YAAqBA,EA9BrB,sBAuBAtS,KAACmJ,EAAAA,UAADjJ,OACEC,SAAU,sEAhBZH,KAA0BuS,EAAAA,iCAoB1BC,OAAAxS,KAAGuB,EAAAA,MAAHrB,MAAS,qBA5BTmS,oBCoDE,QAAFI,GAAoDC,EAClBC,GADhC,GAAFhY,GAEIsH,EAFJC,KAAApH,KAEU4X,IAFV5X,WACkCH,GAAlCgY,mBAAkCA,IAHlC,MAF6BzP,GAA7BuP,EAAAxQ,GAUEwQ,EAAF5W,UAAA+W,aAAE,SAAaC,EAA6BC,GACxC,GAAMC,GAAqBjY,KAAK6X,mBAAmBC,aAAaC,EAASC,GAKnEE,KAAsBH,GAAWA,EAAQI,SAAWnY,KAAKoY,WAE/D,OAAOH,IAAsBC,kBA3BjChT,KAACC,EAAAA,UAADC,OAAAC,SAAA,WACEC,SAAU,uDACVqN,YAAFC,QAAAyF,GAAAxF,YAAA8E,IACElS,cAAFC,EAAAA,kBAAAC,KACEwF,SAAF,UACEvF,gBAAFC,EAAAA,wBAAAC,2KAbA6R,EAAApR,6DAmBAoR,cAlDAW,GAAA,SAAAnR,gBA0EA,GAAAtH,GAAA,OAAAsH,GAAAA,EAAA4C,MAAA/J,KAAAuY,YAAAvY,qEAWA,mEAKAwY,EAAAxY,KAAAyY,OAAAtW,WAAA,OAAA,OAaG,UAbHiH,QAAA,SAAAsO,GACA,GAAAgB,GAAAF,EAAA/L,KAAA,SAAAkM,GAAA,MAAAA,GAAAjB,OAAAA,GAEAgB,KACA7Y,EAAA+Y,eAAAlB,GAAAgB,EAAiClB,eAKjCxX,KAAA6Y,OAAAnP,QAAA0C,KAAAC,EAAAA,UAAArM,KAAA8Y,aAAAjY,UAAA,WAAA,MAAAhB,GAAAkZ,iFAMA/Y,KAAAiI,cAAAlG,QAGAuW,EAAAjS,aACAnB,KAAAmJ,EAAAA,UAAAjJ,+IAjCAqT,SAAAvT,KAAAqO,EAAAA,gBAAenO,MAAfmS,MAGAtP,gBAAA/C,KAAAyB,EAAAA,UAMA2R,iBArFAU,GAAA,SAAA7R,gBAiIA,MAAA,QAAAA,GAAAA,EAAA4C,MAAA/J,KAAAuY,YAAAvY,KAHA,uHAdAsF,SAAA,ktCACEC,QAAF,8pDACEC,QAAF,iBACEO,MACFC,MAAe,yBACfiT,mBAAA,aACA3G,KAAA,WAEA4G,YAAanC,GAAbC,0BACArE,YAAAC,QAAA0F,GAAAzF,YAAAmG,IACAvT,cAAAC,EAAAA,kBAAAC,KACAC,gBAAAC,EAAAA,wBAAAC,WAGAkT,GACAV,IACAa,GAAA,SAAAhS,+CAoBA,kCAAAtH,gBACAsZ,EAAA9S,aAEAnB,KAAAC,EAAAA,UAAAC,OAAAC,SAAA,qDACAC,SAAA,gyFArBAE,QAAA,iBACEO,MACFC,MAAA,uBACAiT,mBAAA,WACA3G,KAAA,WAEE4G,YAAFnC,GAAAO,wBACE3E,YAAFC,QAAA0F,GAAAzF,YAAAsG,IACA1T,cAAAC,EAAAA,kBAAAC,KACAC,gBAAAC,EAAAA,wBAAAC,WAIAqT,EAAAC,eAAA,WAAA,QACAlU,KAAAkB,EAAAA,eAAAC,aAAAnB,KAAmCoB,EAAAA,aACnCpB,KAAA+H,EAAAA,uGClJA,MAsBoC7E,GAApCiR,EAAAlS,kBATAjC,KAACmJ,EAAAA,UAADjJ,OACEC,SAAU,yBACVU,MACE4I,UAAW,kBACX2K,SAAU,QAEZ9T,QAAS,QACTmN,YAAaC,QAAS2G,EAAAA,WAAY1G,YAAayF,SApBjDe,GAsBoCG,EAAAA,2FAtBpC,MAkCwCpR,GAAxCqR,EAAAtS,kBATAjC,KAACmJ,EAAAA,UAADjJ,OACEC,SAAU,6BACVU,MACE4I,UAAW,sBACX2K,SAAU,QAEZ9T,QAAS,QACTmN,YAAaC,QAAS2G,EAAAA,WAAY1G,YAAayF,SAhCjDmB,GAkCwCC,EAAAA,gDClCxC,sBAuBAxU,KAAC+J,EAAAA,SAAD7J,OACE8J,SACEE,GACAD,EAAAA,aACAE,EAAAA,aACAsK,GACAC,EAAAA,iBACAC,GACAvK,IAEFE,SACEJ,GACA4J,GACAG,GACAxB,GACAmC,GACAxB,GACAe,GACAI,GACA9C,GACAY,IAEF3H,cACEoJ,GACAG,GACAxB,GACAmC,GACAxB,GACAe,GACAI,GACA9C,GACAY,IAEF5E,WAAYoH,GAAgB1B,QAxD9B2B,oBC6CE,QAAFC,GAAwB7G,EACAjS,EACAuD,EACS4N,EACYrP,GAJ3C,GAAFpD,GAKIsH,EALJC,KAAApH,KAKUoT,EAAUjS,EAAoBuD,EAAa4N,EAAMrP,IAL3DjD,WAAwBH,GAAxBuT,SAAwBA,EACAvT,EAAxBsB,mBAAwBA,EACAtB,EAAxB6E,YAAwBA,EAEqB7E,EAA7CoD,KAA6CA,EAX7CpD,EAAAqa,eAA6B,qBAnB7B,MAiBiC9R,GAAjC6R,EAAA9S,kBAZAjC,KAACC,EAAAA,UAADC,OAAAC,SAAA,8BACE8F,SAAU,WACV7F,SAAU6U,EAAAA,mBACV5U,QAAF,w4CACEQ,MACFC,MAAA,aAEAP,cAAAC,EAAAA,kBAAAC,KACAC,gBAAAC,EAAAA,wBAAAC,mGAlBAZ,KAAE4N,EAAAA,aAHF5N,SAAE2J,GAAFxI,aAAAnB,KAAA8J,EAAAA,UAAA5J,MAAA,YAEAF,KAAEkB,EAAAA,eAAFC,aAAAnB,KAAAoB,EAAAA,cAMA2T,8BCQE,QAAFG,GAA0C9U,GAAxC,GAAFzF,GACIsH,EADJC,KAAApH,KACUsF,IADVtF,WAA0CH,GAA1CyF,SAA0CA,IA3B1C,MAyBgC8C,GAAhCgS,EAAAjT,kBAJAjC,KAACmJ,EAAAA,UAADjJ,OACEC,SAAU,eACVsN,YAAaC,QAASyH,EAAAA,WAAYxH,YAAauH,4CAfjDlV,KAAsCuS,EAAAA,eARtC2C,GAyBgCC,EAAAA,2BAiB9B,QAAFC,GAA0ChV,GAAxC,GAAFzF,GACIsH,EADJC,KAAApH,KACUsF,IADVtF,WAA0CH,GAA1CyF,SAA0CA,IA1C1C,MAwCsC8C,GAAtCkS,EAAAnT,kBAJAjC,KAACmJ,EAAAA,UAADjJ,OACEC,SAAU,qBACVsN,YAAaC,QAAS2H,EAAAA,iBAAkB1H,YAAayH,4CA9BvDpV,KAAsCuS,EAAAA,eARtC6C,GAwCsCC,EAAAA,iCAiBpC,QAAFC,GAA0ClV,GAAxC,GAAFzF,GACIsH,EADJC,KAAApH,KACUsF,IADVtF,WAA0CH,GAA1CyF,SAA0CA,IAzD1C,MAuDsC8C,GAAtCoS,EAAArT,kBAJAjC,KAACmJ,EAAAA,UAADjJ,OACEC,SAAU,qBACVsN,YAAaC,QAAS6H,EAAAA,iBAAkB5H,YAAa2H,4CA7CvDtV,KAAsCuS,EAAAA,eARtC+C,GAuDsCC,EAAAA,6FAvDtC,MAsEkCrS,GAAlCsS,EAAAvT,kBAJAjC,KAACmJ,EAAAA,UAADjJ,OACEC,SAAU,iBACVsN,YAAaC,QAAS+H,EAAAA,aAAc9H,YAAa6H,0BAInDhD,OAAAxS,KAAGuB,EAAAA,MAAHrB,MAAS,kBAGTwV,SAAA1V,KAAGuB,EAAAA,QAGHoU,YAAA3V,KAAGuB,EAAAA,SA9EHiU,GAsEkCC,EAAAA,6BAoBhC,QAAFG,GAAcC,EACAhW,GADZ,GAAFlF,GAEIsH,EAFJC,KAAApH,KAEU+a,EAAWhW,IAFrB/E,WAGI+E,GAAWnC,cAAc4F,UAAUG,IAAI,cAAcoS,EAAUC,wBA7FnE,MAyFmC5S,GAAnC0S,EAAA3T,kBAPAjC,KAACmJ,EAAAA,UAADjJ,OACEC,SAAU,uCACVU,MACEC,MAAS,kBACTsM,KAAQ,wDA1EZpN,KAAEyV,EAAAA,eAJFzV,KAAmB4N,EAAAA,cARnBgI,GAyFmCG,EAAAA,8BAiBjC,QAAFC,GAAcH,EACAhW,GADZ,GAAFlF,GAEIsH,EAFJC,KAAApH,KAEU+a,EAAWhW,IAFrB/E,WAGI+E,GAAWnC,cAAc4F,UAAUG,IAAI,cAAcoS,EAAUC,wBA7GnE,MAyGmC5S,GAAnC8S,EAAA/T,kBAPAjC,KAACmJ,EAAAA,UAADjJ,OACEC,SAAU,uCACVU,MACEC,MAAS,kBACTsM,KAAQ,oDA1FZpN,KAAEyV,EAAAA,eAJFzV,KAAmB4N,EAAAA,cARnBoI,GAyGmCC,EAAAA,8BAiBjC,QAAFC,GAAcL,EACAhW,GADZ,GAAFlF,GAEIsH,EAFJC,KAAApH,KAEU+a,EAAWhW,IAFrB/E,WAGI+E,GAAWnC,cAAc4F,UAAUG,IAAI,cAAcoS,EAAUC,wBA7HnE,MAyH6B5S,GAA7BgT,EAAAjU,kBAPAjC,KAACmJ,EAAAA,UAADjJ,OACEC,SAAU,yBACVU,MACEC,MAAS,WACTsM,KAAQ,oDA1GZpN,KAAEyV,EAAAA,eAJFzV,KAAmB4N,EAAAA,cARnBsI,GAyH6BC,EAAAA,wBCvF3B,QAAFC,GAAchW,EAA4B8N,GAC1C,MAAIjM,GAAJC,KAAApH,KAAUsF,EAAU8N,IAApBpT,KAnCA,MAgCqCoI,GAArCkT,EAAAnU,kBALAjC,KAACmJ,EAAAA,UAADjJ,OACEC,SAAU,oBACVsN,YAAaC,QAAS2I,EAAAA,gBAAiB1I,YAAayI,IACpD9V,QAAS,2BAA4B,yEAlBvCN,KAAmBuS,EAAAA,cAAnBvS,KAAEmO,EAAAA,mBAZFiI,GAgCqCC,EAAAA,gCAkBnC,QAAFC,GAAclW,EAA4B8N,GAC1C,MAAIjM,GAAJC,KAAApH,KAAUsF,EAAU8N,IAApBpT,KAnDA,MAgDqCoI,GAArCoT,EAAArU,kBALAjC,KAACmJ,EAAAA,UAADjJ,OACEC,SAAU,oBACVsN,YAAaC,QAAS6I,EAAAA,gBAAiB5I,YAAa2I,IACpDhW,QAAS,2BAA4B,yEAlCvCN,KAAmBuS,EAAAA,cAAnBvS,KAAEmO,EAAAA,mBAZFmI,GAgDqCC,EAAAA,gCAmBnC,QAAFC,GAAcpW,EAA4B8N,GAC1C,MAAIjM,GAAJC,KAAApH,KAAUsF,EAAU8N,IAApBpT,KApEA,MAiEkCoI,GAAlCsT,EAAAvU,kBALAjC,KAACmJ,EAAAA,UAADjJ,OACEC,SAAU,cACVsN,YAAaC,QAAS+I,EAAAA,UAAW9I,YAAa6I,IAC9ClW,QAAS,4BAA6B,+DAnDxCN,KAAmBuS,EAAAA,cAAnBvS,KAAEmO,EAAAA,mBAZFqI,GAiEkCC,EAAAA,sFAoBlC,MACkCvT,GAAlCwT,EAAAzU,kBAbAjC,KAACC,EAAAA,UAADC,OAAAC,SAAA,qCACEC,SAAUuW,EAAAA,iBACV9V,MACFC,MAAA,iBACMsM,KAAN,OAEA1M,gBAAiBC,EAAAA,wBAAjBC,OACAL,cAAAC,EAAAA,kBAAAC,KACEwF,SAAF,eACEwH,YAAFC,QAAAkJ,EAAAA,aAAuCjJ,YAAvC+I,QAGAA,+CAiBA,MAAA,QAAAzU,GAAAA,EAAA4C,MAAA/J,KAAAuY,YAAAvY,KAHA,+HAVA+F,MACAC,MAAA,iBACAsM,KAAA,OAEE1M,gBAAFC,EAAAA,wBAAAC,OACAL,cAAAC,EAAAA,kBAAAC,KACAwF,SAAU,eACVwH,YAAAC,QAAAmJ,EAAAA,aAAAlJ,YAAAmJ,QAGAA,GACAD,EAAAA,yFAaA,cAK4BE,EAA5B5V,uHAbAiM,KAAA,OAEE1M,gBAAFC,EAAAA,wBAAAC,OACEL,cAAFC,EAAAA,kBAAAC,KACEwF,SAAF,SACAwH,YAAAC,QAAAsJ,EAAAA,OAAArJ,YAAAoJ,QAGAA,GACAC,EAAAA,QCnFMC,IAEJlC,GAGAK,GACAgB,GACAZ,GACAN,GACAsB,GACAlB,GACAgB,GAGAV,GACAM,GACAF,GAGAU,GACAK,GACAD,gCApDF,sBAuDA9W,KAAC+J,EAAAA,SAAD7J,OACE8J,SAAUkN,EAAAA,eAAgBjN,EAAAA,aAAcC,IACxCI,QAAS2M,GACTvM,aAAcuM,OA1DhBE,KC+BAC,GAAA,SAAAnV,GA2IE,QAAFmV,GAAc1G,OAAd,KAAAA,IAAcA,KAAZ,IAAF/V,GACIsH,EADJC,KAAApH,OAAAA,WAtIAH,GAAA0c,YAAiC,GAAIzG,GAAAA,oBAGrCjW,EAAA2c,QAA6B,GAAI1G,GAAAA,gBAAwB,IAMzDjW,EAAA4c,2BAA+BjV,EAAAA,aAAaC,MA2D5C5H,EAAA6c,oBAAM,SAACxJ,EAASyJ,GACZ,GAAMjb,GAAawR,EAAKyJ,EACxB,OAAOC,GAAAA,eAAelb,GAAS6Q,OAAO7Q,GAASA,GAYnD7B,EAAAgd,SAAkD,SAAC3J,EAAW4J,GAC1D,GAAMpQ,GAASoQ,EAAKpQ,OACdqQ,EAAYD,EAAKC,SACvB,OAAKrQ,IAAuB,IAAbqQ,EAER7J,EAAK4J,KAAK,SAACE,EAAGC,GACnB,GAAIC,GAASrd,EAAK6c,oBAAoBM,EAAGtQ,GACrCyQ,EAAStd,EAAK6c,oBAAoBO,EAAGvQ,GAMrC0Q,EAAmB,CAcvB,OAbc,OAAVF,GAA4B,MAAVC,EAEhBD,EAASC,EACXC,EAAmB,EACVF,EAASC,IAClBC,GAAoB,GAEH,MAAVF,EACTE,EAAmB,EACA,MAAVD,IACTC,GAAoB,GAGfA,GAAiC,OAAbL,EAAqB,GAAK,KAxBd7J,GAsC7CrT,EAAAwd,gBAA4D,SAACnK,EAASlC,GAElE,GAAMsM,GAAc,SAACC,EAAaC,GAAQ,MAAAD,GAAcrK,EAAKsK,IACvDC,EAAUjc,OAAOkc,KAAKxK,GAAMyK,OAAOL,EAAa,IAAIM,cAGpDC,EAAoB7M,EAAOO,OAAOqM,aAExC,QAA8C,GAAvCH,EAAQK,QAAQD,IAKvBhe,EAAKmW,MAAQ,GAAIF,GAAAA,gBAAqBF,GACtC/V,EAAKke,8BA7KT,MA+B2C3V,GAA3CkU,EAAAnV,GAyBE3F,OAAFC,eAAM6a,EAANvb,UAAA,YAAE,WAAa,MAAOf,MAAKgW,MAAMtU,WAC/B,SAASwR,GAAalT,KAAKgW,MAAMpJ,KAAKsG,oCAMtC1R,OAAFC,eAAM6a,EAANvb,UAAA,cAAE,WAAuB,MAAOf,MAAKwc,QAAQ9a,WAC3C,SAAWsP,GAAkBhR,KAAKwc,QAAQ5P,KAAKoE,oCAM/CxP,OAAFC,eAAM6a,EAANvb,UAAA,YAAE,WAA6B,MAAOf,MAAKge,WACzC,SAASlB,GACP9c,KAAKge,MAAQlB,EACb9c,KAAK+d,6DAcPvc,OAAFC,eAAM6a,EAANvb,UAAA,iBAAE,WAAuC,MAAOf,MAAKie,gBACnD,SAAcC,GACZle,KAAKie,WAAaC,EAClBle,KAAK+d,6DA2FPzB,EAAFvb,UAAAgd,0BAAE,WAAA,GAAFle,GAAAG,KAOUme,EAAoCne,KAAKge,MAC3Ctd,EAAAA,MAAYV,KAAKge,MAAMG,WAAYne,KAAKge,MAAMI,aAC9CjS,EAAAA,GAAa,MACXkS,EAAyCre,KAAKie,WAChDvd,EAAAA,MAAiBV,KAAKie,WAAWK,KAAMte,KAAKie,WAAWG,aACvDjS,EAAAA,GAAa,MAEXoS,EAAave,KAAKgW,MAElBwI,EAAeC,EAAAA,cAAcF,EAAYve,KAAKwc,SACjDpQ,KAAKpC,EAAAA,IAAI,SAAC0U,GAAjB,GAAkBxL,GAAlBwL,EAAA,EAA4B,OAAA7e,GAAK8e,YAAYzL,MAEnC0L,EAAcH,EAAAA,cAAcD,EAAcL,GAC7C/R,KAAKpC,EAAAA,IAAI,SAAC0U,GAAjB,GAAkBxL,GAAlBwL,EAAA,EAA4B,OAAA7e,GAAKgf,WAAW3L,MAElC4L,EAAgBL,EAAAA,cAAcG,EAAaP,GAC9CjS,KAAKpC,EAAAA,IAAI,SAAC0U,GAAjB,GAAkBxL,GAAlBwL,EAAA,EAA4B,OAAA7e,GAAKkf,UAAU7L,KAEvClT,MAAKyc,2BAA2Bxb,cAChCjB,KAAKyc,2BAA6BqC,EAAcje,UAAU,SAAAqS,GAAQ,MAAArT,GAAK0c,YAAY3P,KAAKsG,MAQ1FoJ,EAAFvb,UAAA4d,YAAE,SAAYzL,GAAZ,GAAFrT,GAAAG,IASI,OALAA,MAAKwe,aACAxe,KAAKgR,OAAgBkC,EAAKlC,OAAO,SAAAgO,GAAO,MAAAnf,GAAKwd,gBAAgB2B,EAAKnf,EAAKmR,UAAzDkC,EAEflT,KAAKke,WAAale,KAAKif,iBAAiBjf,KAAKwe,aAAahc,QAEvDxC,KAAKwe,cAQdlC,EAAFvb,UAAA8d,WAAE,SAAW3L,GAET,MAAKlT,MAAK8c,KAEH9c,KAAK6c,SAAS3J,EAAKpC,QAAS9Q,KAAK8c,MAFf5J,GAS3BoJ,EAAFvb,UAAAge,UAAE,SAAU7L,GACR,IAAKlT,KAAKke,UAAa,MAAOhL,EAE9B,IAAMgM,GAAalf,KAAKke,UAAUiB,UAAYnf,KAAKke,UAAUkB,QAC7D,OAAOlM,GAAKpC,QAAQuO,OAAOH,EAAYlf,KAAKke,UAAUkB,WAQxD9C,EAAFvb,UAAAke,iBAAE,SAAiBK,GAAjB,GAAFzf,GAAAG,IACIiJ,SAAQC,UAAUC,KAAK,WACrB,GAAKtJ,EAAKqe,YAEVre,EAAKqe,UAAU1b,OAAS8c,EAGpBzf,EAAKqe,UAAUiB,UAAY,GAAG,CAChC,GAAMI,GAAgB9b,KAAK+b,KAAK3f,EAAKqe,UAAU1b,OAAS3C,EAAKqe,UAAUkB,UAAY,GAAK,CACxFvf,GAAKqe,UAAUiB,UAAY1b,KAAKE,IAAI9D,EAAKqe,UAAUiB,UAAWI,OASpEjD,EAAFvb,UAAAmV,QAAE,WAAY,MAAOlW,MAAKuc,aAMxBD,EAAFvb,UAAAuV,WAAE,aAvRFgG,GA+B2C/F,EAAAA,YCV9BkJ,GACX,GAAIC,GAAAA,eAAqC,uBACvCC,WAAY,OACZC,QAASC,mBA2BX,QAAFhQ,GACYnL,EACAgH,EACiCoU,GAFjC9f,KAAZ0E,YAAYA,EACA1E,KAAZ0L,QAAYA,EACiC1L,KAA7C8f,kBAA6CA,EAtD7C,MA6DEjQ,GAAF9O,UAAAkE,eAAE,SAAe8G,GAAf,GAAFlM,GAAAG,IACIA,MAAK8M,OAEgC,mBAA1BvM,uBACTP,KAAK0L,QAAQO,kBAAkB,WAC7B1L,sBAAsB,WAAM,MAAAV,GAAKkgB,WAAWhU,OAG9C/L,KAAK+f,WAAWhU,IAKpB8D,EAAF9O,UAAA+L,KAAE,WACE9M,KAAK0E,YAAY9B,cAAcS,MAAM8T,WAAa,WAIpDtH,EAAF9O,UAAAgM,KAAE,WACE/M,KAAK0E,YAAY9B,cAAcS,MAAM8T,WAAa,UAO5CtH,EAAV9O,UAAAgf,WAAA,SAAqBhU,GACjB,GAAMiU,GAAYhgB,KAAK8f,kBAAkB/T,GACnCkU,EAAsBjgB,KAAK0E,YAAY9B,aAE7Cqd,GAAO5c,MAAM6c,KAAOF,EAAUE,KAC9BD,EAAO5c,MAAM8c,MAAQH,EAAUG,sBAhDnCjb,KAACmJ,EAAAA,UAADjJ,OACEC,SAAU,cACVU,MACEC,MAAS,uDAvCbd,KAAmB4N,EAAAA,aAAnB5N,KAAuD8H,EAAAA,SA8CvD9H,SAAA2J,GAAAxI,aAAAnB,KAAK4J,EAAAA,OAAL1J,MAAYqa,SAtDZ5P,oBCgBE,QAAFJ,GAAc+H,EAA+B4I,GAC7C,MAAIjZ,GAAJC,KAAApH,KAAUwX,EAAa4I,IAAvBpgB,KAjBA,MAeiCoI,GAAjCqH,EAAAtI,kBAHAjC,KAACmJ,EAAAA,UAADjJ,OACEC,SAAU,yEALZH,KAAmBuS,EAAAA,cAAnBvS,KAAgC6M,EAAAA,oBARhCtC,GAeiC4Q,EAAAA,yBCF/B,QAAF1Q,GAAqBrK,GAAAtF,KAArBsF,SAAqBA,EAbrB,sBAWAJ,KAACmJ,EAAAA,UAADjJ,OAAYC,SAAU,0DAHtBH,KAAmBuS,EAAAA,eARnB9H,KC+BA2Q,GAAA,yBA/BA,MAAAA,MAgCaC,GAAmBlT,EAAciT,mBAyD5C,QAAF5Q,GAAsB8Q,GAApB,GAAF3gB,GACIsH,EADJC,KAAApH,OAAAA,WAAsBH,GAAtB2gB,kBAAsBA,EAjCtB3gB,EAAA4gB,UAAsC,GAGtC5gB,EAAA6gB,eAAkD,KAQlD7gB,EAAAsK,aAA0B,GAAI0B,GAAAA,QAG9BhM,EAAAoK,eAA4B,GAAI4B,GAAAA,QAMhChM,EAAAwJ,SAA4B,KAM5BxJ,EAAA0J,OAA0B,KAK1B1J,EAAAyJ,UAAa,IA/Bb,MAb4BlB,GAA5BsH,EAAAvI,GAmBE3F,OAAFC,eAAMiO,EAAN3O,UAAA,eAAE,WACE,MAAOf,MAAK0gB,gDA8BdhR,EAAF3O,UAAA4f,YAAE,SAAYjX,GACNA,EAAQkX,eAAe,cACzB5gB,KAAKmK,aAAayC,OAGhBlD,EAAQkX,eAAe,aACzB5gB,KAAKiK,eAAe2C,QAIxB8C,EAAF3O,UAAAC,YAAE,WACEhB,KAAKiK,eAAe4C,WACpB7M,KAAKmK,aAAa0C,YAGpB6C,EAAF3O,UAAA8f,SAAE,WACE7gB,KAAK0gB,eAAiB,GAAII,GAAAA,eACtB9gB,KAAK+gB,kBAAoB/gB,KAAKghB,iBAAkBhhB,KAAKwgB,mCA5E7Dtb,KAACC,EAAAA,UAADC,OAAAC,SAAA,UACEC,SAAU,uDACVE,QAAF,YACEI,gBAAFC,EAAAA,wBAAAC,OACEL,cAAFC,EAAAA,kBAAAC,KACEwF,SAAF,4EAnBAuE,EAAAnJ,wIAyBAya,mBAAA9b,KAAAsB,EAAAA,UAAApB,MAAgBqS,EAAAA,eAKhBgJ,YAAAvb,KAAAuB,EAAAA,MAAGrB,MAAH,YAMAsK,OCvCauR,IAIXC,aAAcjK,EAAAA,QAAQ,gBAEpBC,EAAAA,MAAM,wDAAyD7T,EAAAA,OAAOC,UAAW,UACjF4T,EAAAA,MAAM,OAAQ7T,EAAAA,OAAOC,UAAW,8BAChC4T,EAAAA,MAAM,QAAS7T,EAAAA,OAAOC,UAAW,6BACjC8T,EAAAA,WAAW,yDACPC,EAAAA,QAAQ,yCACZD,EAAAA,WAAW,8BACT/T,EAAAA,OAAOC,UAAW,6BAClB+T,EAAAA,QAAQ,0CAEVD,EAAAA,WAAW,+BACT/T,EAAAA,OAAOC,UAAW,4BAClB+T,EAAAA,QAAQ,4DCiCZ,QAAFrH,GACImR,EACAf,EAC8CgB,GAHhD,GAAFvhB,GAIMsH,EAJNC,KAAApH,KAIYmhB,EAA0Bf,IAJtCpgB,WAGkDH,GAAlDuhB,MAAkDA,EAPlDvhB,EAAAwhB,cAA0B7Z,EAAAA,aAAaC,MAEvC5H,EAAAyhB,YAAwB9Z,EAAAA,aAAaC,QAjErC,MA6DsCW,GAAtC4H,EAAA7I,GAcE6I,EAAFjP,UAAA8f,SAAE,WAAA,GAAFhhB,GAAAG,IACImH,GAAJpG,UAAU8f,SAAVzZ,KAAApH,MAEIA,KAAKqhB,cAAgBrhB,KAAKohB,MAAMG,iBAC7BnV,KAAKoV,EAAAA,UAAUxhB,KAAKohB,MAAMK,kBAAkBzhB,KAAKohB,MAAMM,aACvD7gB,UAAU,SAAC8gB,GACNA,IAAgB9hB,EAAK+hB,eACvB/hB,EAAKgiB,OAAOhiB,EAAKuhB,MAAMU,YAI7B9hB,KAAKshB,YAActhB,KAAKohB,MAAMW,oBAAoBlhB,UAAU,WAC1DhB,EAAKmiB,YAKThS,EAAFjP,UAAAC,YAAE,WACEmG,EAAJpG,UAAUC,YAAVoG,KAAApH,MACIA,KAAKqhB,cAAcpgB,cACnBjB,KAAKshB,YAAYrgB,8BArCrBiE,KAACmJ,EAAAA,UAADjJ,OACEC,SAAU,2DAtCZH,KAAE+c,EAAAA,2BACF/c,KAAE6M,EAAAA,mBA6FF7M,KAAa6K,GAAb1J,aAAAnB,KA7CK4J,EAAAA,OA6CL1J,MA7CY8c,EAAAA,WAAW,WAAM,MAAAnS,YAtE7BC,GA6DsCmS,EAAAA,+BAoGpC,QAAFpS,GAAsBrL,EACYzB,GADZjD,KAAtB0E,YAAsBA,EACY1E,KAAlCiD,KAAkCA,EA7ClCjD,KAAAoiB,aAA0D,GAAIra,GAAAA,aAG9D/H,KAAAuhB,iBAA+D,GAAIxZ,GAAAA,aAGnE/H,KAAA+hB,oBAAkE,GAAIha,GAAAA,aAGtE/H,KAAAqiB,YAAuD,GAAIta,GAAAA,cAAmB,GAsB9E,MAZAvG,QAAAC,eAAMsO,EAANhP,UAAA,gBAAA,SAAesI,GAETrJ,KAAK0hB,UADHrY,EAAW,EACkC,OAA9BrJ,KAAKK,sBAAiC,OAAS,QACvDgJ,EAAW,EAC2B,OAA9BrJ,KAAKK,sBAAiC,QAAU,OAEhD,0CAOvBmB,OAAAC,eAAMsO,EAANhP,UAAA,cAAA,SAAawI,GACT,GAAc,MAAVA,EAAJ,CAEA,GAAM1G,GAAM7C,KAAKK,qBAEfL,MAAKsiB,QADK,OAAPzf,GAAgB0G,GAAU,GAAc,OAAP1G,GAAgB0G,EAAS,EAC9C,OAEA,0CAYnBwG,EAAFhP,UAAA8f,SAAE,WACwB,UAAlB7gB,KAAK0hB,WAAyB1hB,KAAKsiB,UACrCtiB,KAAK0hB,UAA4B,QAAhB1hB,KAAKsiB,QAAoB,qBAAuB,wBAIrEvS,EAAFhP,UAAAwhB,uBAAE,SAAuBC,GACrB,GAAMb,GAAc3hB,KAAKyhB,kBAAkBe,EAAEC,QAC7CziB,MAAKuhB,iBAAiBxf,KAAK4f,GACvBA,GACF3hB,KAAKoiB,aAAargB,KAAK/B,KAAK0E,YAAY9B,cAAckI,eAI1DiF,EAAFhP,UAAA2hB,wBAAE,SAAwBF,GAElBxiB,KAAKyhB,kBAAkBe,EAAEC,UAAYziB,KAAKyhB,kBAAkBzhB,KAAK0hB,YACnE1hB,KAAKqiB,YAAYtgB,OAGf/B,KAAKyhB,kBAAkBe,EAAEG,aAAe3iB,KAAKyhB,kBAAkBzhB,KAAK0hB,YACtE1hB,KAAK+hB,oBAAoBhgB,QAK7BgO,EAAFhP,UAAAV,oBAAE,WACE,MAAOL,MAAKiD,MAA4B,QAApBjD,KAAKiD,KAAKvB,MAAkB,MAAQ,OAI1DqO,EAAFhP,UAAA0gB,kBAAE,SAAkBpY,GAChB,MAAmB,UAAZA,GACS,sBAAZA,GACY,uBAAZA,kBAnGRnE,KAACC,EAAAA,UAADC,OAAAC,SAAA,eACEC,SAAU,wOACVC,QAAF,wHACEE,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,OACEoT,YAAa+H,GAAfC,cACEnb,MACFC,MAAe,oIAlFf+J,EAAAxJ,kFAyFAwb,sBAAA7c,KAAAyB,EAAAA,SAGA0b,cAAAnd,KAAAyB,EAAAA,SAGAic,cAAA1d,KAAAsB,EAAAA,UAAApB,MAAAyd,EAAAA,uBAGAf,WAAA5c,KAAAuB,EAAAA,MAAArB,MAAA,aAGAiE,WAAAnE,KAAAuB,EAAAA,QAGA8C,SAAArE,KAAAuB,EAAAA,SAgBAsJ,KCvIA+S,GAAA,yBAbA,MAAAA,MAcaC,GAA+B1V,EAAcyV,mBAcxD,QAAFhT,GAAqB/K,GAAnB,GAAFlF,GACIsH,EADJC,KAAApH,OAAAA,WAAqBH,GAArBkF,WAAqBA,IA5BrB,MA2BwCqD,GAAxC0H,EAAA3I,GAME2I,EAAF/O,UAAA0B,MAAE,WACEzC,KAAK+E,WAAWnC,cAAcH,SAGhCqN,EAAF/O,UAAAsD,cAAE,WACE,MAAOrE,MAAK+E,WAAWnC,cAAcogB,YAGvClT,EAAF/O,UAAAuD,eAAE,WACE,MAAOtE,MAAK+E,WAAWnC,cAAcI,4BAtBzCkC,KAACmJ,EAAAA,UAADjJ,OACEC,SAAU,uBACVG,QAAS,YACTO,MACE0I,2BAA4B,oDAhBhCvJ,KAAmB4N,EAAAA,cARnBhD,GA2BwCiT,IlCwBxCE,GAAA,yBAnDA,MAAAA,MAoDaC,GAAyBjc,EAAmBgc,mBAkFvD,QAAFniB,GAAsB4D,EACAvD,EACAwK,EACY1I,GAHhC,GAAFpD,GAIIsH,EAJJC,KAAApH,OAAAA,WAAsBH,GAAtB6E,YAAsBA,EACA7E,EAAtBsB,mBAAsBA,EACAtB,EAAtB8L,eAAsBA,EACY9L,EAAlCoD,KAAkCA,EArDlCpD,EAAA0D,gBAA4B,EAG5B1D,EAAAsjB,uBAAkC,EAGlCtjB,EAAAY,eAA2B+G,EAAAA,aAAaC,MAGxC5H,EAAAyC,yBAA4B,EAG5BzC,EAAA+E,qBAAwB,EAGxB/E,EAAA8E,sBAAyB,EAczB9E,EAAA+H,eAAmC,EAgBnC/H,EAAA6G,mBAA0C,GAAIqB,GAAAA,aAG9ClI,EAAAiC,aAAoC,GAAIiG,GAAAA,eAAxC,MAzDkCK,GAAlCtH,EAAAqG,GA0CA3F,OAAAC,eAAMX,EAANC,UAAA,qBAAA,WAAgC,MAAOf,MAAK4H,oBAC1C,SAAkBlG,GAChBA,EAAQ4G,EAAAA,qBAAqB5G,GAC7B1B,KAAKmjB,sBAAwBnjB,KAAK4H,gBAAkBlG,EACpD1B,KAAK4H,eAAiBlG,EAElB1B,KAAKC,aACPD,KAAKC,YAAYK,sBAAsBoB,oCAiB3CZ,EAAFC,UAAA6H,sBAAE,WAEM5I,KAAKojB,gBAAkBpjB,KAAKG,eAAeqC,SAC7CxC,KAAKF,oBACLE,KAAKojB,eAAiBpjB,KAAKG,eAAeqC,OAC1CxC,KAAKmB,mBAAmBC,gBAKtBpB,KAAKmjB,wBACPnjB,KAAKuC,eAAevC,KAAK4H,gBACzB5H,KAAKsB,0BACLtB,KAAKD,4BACLC,KAAKmjB,uBAAwB,EAC7BnjB,KAAKmB,mBAAmBC,gBAKtBpB,KAAK6D,yBACP7D,KAAKuB,2BACLvB,KAAK6D,wBAAyB,EAC9B7D,KAAKmB,mBAAmBC,iBAI5BN,EAAFC,UAAAsiB,eAAE,SAAevZ,GACb,OAAQA,EAAMwZ,SACZ,IAAKC,GAAAA,KACHvjB,KAAKC,YAAYujB,qBACjB1Z,EAAMqE,gBACN,MACF,KAAKsV,GAAAA,IACHzjB,KAAKC,YAAYyjB,oBACjB5Z,EAAMqE,gBACN,MACF,KAAKwV,GAAAA,MACL,IAAKC,GAAAA,MACH5jB,KAAK0G,mBAAmB3E,KAAK/B,KAAK4B,YAClCkI,EAAMqE,gBACN,MACF,SACEnO,KAAKC,YAAY4jB,UAAU/Z,KAOjChJ,EAAFC,UAAAyI,mBAAE,WAAA,GAAF3J,GAAAG,KACUW,EAAYX,KAAKiD,KAAOjD,KAAKiD,KAAKiJ,OAASC,EAAAA,GAAa,MACxDvL,EAASZ,KAAK2L,eAAeO,OAAO,KACpC1L,EAAU;kGACdX,EAAKC,oBACLD,EAAKE,4BAGPC,MAAKC,YAAc,GAAIC,GAAAA,gBAAgBF,KAAKG,gBACzCC,0BAA0BJ,KAAKK,uBAElCL,KAAKC,YAAYK,sBAAsB,GAIN,mBAA1BC,uBAAwCA,sBAAsBC,GAAWA,IAEhFR,KAAKS,eAAiBC,EAAAA,MAAMC,EAAWC,GAAQC,UAAU,WACvDL,IACAX,EAAKI,YAAYG,0BAA0BP,EAAKQ,0BAIpDS,EAAFC,UAAAC,YAAE,WACEhB,KAAKS,eAAeQ,eAMtBH,EAAFC,UAAAG,kBAAE,WACElB,KAAKF,oBACLE,KAAKD,4BACLC,KAAKmB,mBAAmBC,gBAM1BN,EAAFC,UAAAjB,kBAAE,WACEE,KAAKqB,0BACLrB,KAAKsB,0BACLtB,KAAKuB,4BAIPC,OAAFC,eAAMX,EAANC,UAAA,kBAAE,WACE,MAAOf,MAAKC,YAAcD,KAAKC,YAA2B,gBAAI,OAIhE,SAAeyB,GACR1B,KAAK2B,cAAcD,IAAU1B,KAAK4B,YAAcF,GAAU1B,KAAKC,cAEpED,KAAKC,YAAY4B,cAAcH,GAC/B1B,KAAK8B,aAAaC,KAAKL,GACvB1B,KAAKgC,aAAaN,qCAOpBZ,EAAFC,UAAAY,cAAE,SAAcM,GACZ,IAAKjC,KAAKG,eAAkB,OAAO,CAEnC,IAAM+B,GAAMlC,KAAKG,eAAiBH,KAAKG,eAAegC,UAAUF,GAAS,IACzE,SAASC,IAAQA,EAAIE,UAOvBtB,EAAFC,UAAAiB,aAAE,SAAaK,GAKX,GAJIrC,KAAKsC,yBACPtC,KAAKuC,eAAeF,GAGlBrC,KAAKG,gBAAkBH,KAAKG,eAAeqC,OAAQ,CACrDxC,KAAKG,eAAegC,UAAUE,GAAUI,OAKxC,IAAMC,GAAc1C,KAAK2C,kBAAkBC,cACrCC,EAAM7C,KAAKK,qBAGfqC,GAAYI,WADH,OAAPD,EACuB,EAEAH,EAAYK,YAAcL,EAAYM,cAMrElC,EAAFC,UAAAV,oBAAE,WACE,MAAOL,MAAKiD,MAA4B,QAApBjD,KAAKiD,KAAKvB,MAAkB,MAAQ,OAI1DZ,EAAFC,UAAAQ,yBAAE,WACE,GAAM2B,GAAiBlD,KAAKkD,eACtBC,EAA4C,QAA/BnD,KAAKK,uBAAmC6C,EAAiBA,CAE5ElD,MAAKoD,SAASR,cAAcS,MAAMC,UAAY,eAAeH,EAAjE,aAIE3B,OAAFC,eAAMX,EAANC,UAAA,sBAAE,WAA+B,MAAOf,MAAKuD,qBAC3C,SAAmBC,GACjBxD,KAAKuD,gBAAkBE,KAAKC,IAAI,EAAGD,KAAKE,IAAI3D,KAAK4D,wBAAyBJ,IAI1ExD,KAAK6D,wBAAyB,EAC9B7D,KAAKsB,2DAWPR,EAAFC,UAAA+C,cAAE,SAAcC,GACZ,GAAMC,GAAahE,KAAK2C,kBAAkBC,cAAcI,WAGxDhD,MAAKkD,iBAAgC,UAAba,GAAyB,EAAI,GAAKC,EAAa,GASzElD,EAAFC,UAAAwB,eAAE,SAAe0B,GACb,GAAMC,GAAgBlE,KAAKG,eAAiBH,KAAKG,eAAegC,UAAU8B,GAAc,IAExF,IAAKC,EAAL,CAGA,GAEIC,GAAwBC,EAFtBJ,EAAahE,KAAK2C,kBAAkBC,cAAcI,WAGtB,QAA9BhD,KAAKK,uBACP8D,EAAiBD,EAAcG,gBAC/BD,EAAgBD,EAAiBD,EAAcI,mBAE/CF,EAAgBpE,KAAKoD,SAASR,cAAcI,YAAckB,EAAcG,gBACxEF,EAAiBC,EAAgBF,EAAcI,iBAGjD,IAAMC,GAAmBvE,KAAKkD,eACxBsB,EAAkBxE,KAAKkD,eAAiBc,CAE1CG,GAAiBI,EAEnBvE,KAAKkD,gBAAkBqB,EAAmBJ,EAnTjB,GAoThBC,EAAgBI,IAEzBxE,KAAKkD,gBAAkBkB,EAAgBI,EAtTd,MAkU7B1D,EAAFC,UAAAM,wBAAE,WACE,GAAMoD,GACFzE,KAAKoD,SAASR,cAAcG,YAAc/C,KAAK0E,YAAY9B,cAAcI,WAExEyB,KACHzE,KAAKkD,eAAiB,GAGpBuB,IAAczE,KAAKsC,yBACrBtC,KAAKmB,mBAAmBC,eAG1BpB,KAAKsC,wBAA0BmC,GAYjC3D,EAAFC,UAAAO,wBAAE,WAEEtB,KAAK2E,qBAA8C,GAAvB3E,KAAKkD,eACjClD,KAAK4E,oBAAsB5E,KAAKkD,gBAAkBlD,KAAK4D,wBACvD5D,KAAKmB,mBAAmBC,gBAU1BN,EAAFC,UAAA6C,sBAAE,WAGE,MAFwB5D,MAAKoD,SAASR,cAAcG,YACjC/C,KAAK2C,kBAAkBC,cAAcI,aACf,GAI3ClC,EAAFC,UAAAhB,0BAAE,WACE,GAAM8E,GAAuB7E,KAAKG,gBAAkBH,KAAKG,eAAeqC,OACpExC,KAAKG,eAAegC,UAAUnC,KAAK8E,eAAeC,WAAWnC,cAC7D,IAEJ5C,MAAKgF,QAAQC,eAAeJ,mBAtWhCK,KAACC,EAAAA,UAADC,OAAAC,SAAA,iBACEC,SAAU,+7BACVC,QAAF,0+DACEC,QAAF,iBACEC,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,OACEC,MACFC,MAAA,iBACMC,qDAAN,0BACIC,6BAAJ,yHAnDAhB,KAAEiB,EAAAA,gBAHFjB,KAAEkB,EAAAA,eAAFC,aAAAnB,KAAAoB,EAAAA,cARAxF,EAAAyF,2GAsEA5D,oBAAAuC,KAAAsB,EAAAA,UAAApB,MAAA,sBACAhC,WAAA8B,KAAAsB,EAAAA,UAAApB,MAAA,aACAN,gBAAAI,KAAAuB,EAAAA,QACAC,qBAAAxB,KAAAyB,EAAAA,SAmCA7E,eAAAoD,KAAAyB,EAAAA,UAgBA7F,OC9FI8F,GAAS,EAGbC,GAAA,yBAzCA,MAAAA,MAqDAC,GAAA,WACE,QAAFA,GAAqBpC,GAAA1E,KAArB0E,YAAqBA,EAtDrB,MAAAoC,MAwDaC,GAAwBC,EAAWC,EAAmBH,IAAkB,0BA4FnF,QAAFI,GAAcnC,EACQ5D,GADpB,GAAFtB,GAEIsH,EAFJC,KAAApH,KAEU+E,IAFV/E,WACsBH,GAAtBsB,mBAAsBA,EA7DtBtB,EAAAwH,eAA0C,EAG1CxH,EAAAyH,sBAA0C,EAG1CzH,EAAA0H,kBAA8BC,EAAAA,aAAaC,MAG3C5H,EAAA6H,sBAAkCF,EAAAA,aAAaC,MAM/C5H,EAAA8H,gBAAoC,EAQpC9H,EAAA+H,eAA0C,KAG1C/H,EAAAgI,eAAkD,QAmBlDhI,EAAAiI,oBAAiE,GAAIC,GAAAA,aAIrElI,EAAAmI,YAAM,GAAID,GAAAA,aAGVlI,EAAAoI,cAAyD,GAAIF,GAAAA,aAI7DlI,EAAAqI,kBAAM,GAAIH,GAAAA,cAAgC,GAOtClI,EAAKsI,SAAWvB,OARpB,MAjEiCwB,GAAjClB,EAAAC,GAuBA3F,OAAAC,eAAMyF,EAANnG,UAAA,qBAAA,WAAiC,MAAOf,MAAK2H,oBAC3C,SAAkBjG,GAAkB1B,KAAK2H,eAAiBU,EAAAA,sBAAsB3G,oCAKlFF,OAAAC,eAAMyF,EAANnG,UAAA,qBAAA,WAAuC,MAAOf,MAAK4H,oBACjD,SAAkBlG,GAChB1B,KAAKqH,eAAiBiB,EAAAA,qBAAqB5G,EAAO,uCAStDF,OAAAC,eAAMyF,EAANnG,UAAA,uBAAA,WAAwC,MAAOf,MAAKuI,sBAClD,SAAoB7G,GAClB,GAAMkB,GAA6B5C,KAAK0E,YAAY9B,aAEpDA,GAAc4F,UAAUC,OAAO,kBAAkBzI,KAAK0I,iBAElDhH,GACFkB,EAAc4F,UAAUG,IAAI,kBAAkBjH,GAGhD1B,KAAKuI,iBAAmB7G,mCAgC1BwF,EAAFnG,UAAA6H,sBAAE,WAAA,GAAF/I,GAAAG,KAKQ6I,EAAgB7I,KAAKqH,eACrB5D,KAAKE,IAAI3D,KAAK8I,MAAMtG,OAAS,EAAGiB,KAAKC,IAAI1D,KAAKqH,gBAAkB,EAAG,GAIvE,IAAIrH,KAAK4H,gBAAkBiB,GAAwC,MAAvB7I,KAAK4H,eAAwB,CACvE,GAAMmB,GAAiB/I,KAAKgJ,mBAAmBH,EAC/C7I,MAAKkI,kBAAkBnG,KAAKgH,GAG5BE,QAAQC,UAAUC,KAAK,WAAM,MAAAtJ,GAAKiI,oBAAoB/F,KAAK8G,KAI7D7I,KAAK8I,MAAMM,QAAQ,SAAClH,EAAaD,GAC/BC,EAAImH,SAAWpH,EAAQ4G,EACvB3G,EAAIoH,SAAWrH,IAAU4G,EAIE,MAAvBhJ,EAAK+H,gBAA0C,GAAhB1F,EAAImH,UAAkBnH,EAAIqH,SAC3DrH,EAAIqH,OAASV,EAAgBhJ,EAAK+H,kBAIlC5H,KAAK4H,iBAAmBiB,IAC1B7I,KAAK4H,eAAiBiB,EACtB7I,KAAKmB,mBAAmBC,iBAI5B8F,EAAFnG,UAAAyI,mBAAE,WAAA,GAAF3J,GAAAG,IACIA,MAAKyJ,wBAILzJ,KAAKuH,kBAAoBvH,KAAK8I,MAAMY,QAAQ7I,UAAU,WACpDhB,EAAK4J,wBACL5J,EAAKsB,mBAAmBC,kBAI5B8F,EAAFnG,UAAAC,YAAE,WACEhB,KAAKuH,kBAAkBtG,cACvBjB,KAAK0H,sBAAsBzG,eAI7BiG,EAAFnG,UAAA4I,cAAE,WACM3J,KAAK4J,YACP5J,KAAK4J,WAAW7J,6BAIpBmH,EAAFnG,UAAA8I,cAAE,SAAc5H,GACZjC,KAAKgI,YAAYjG,KAAK/B,KAAKgJ,mBAAmB/G,KAGxCiF,EAAVnG,UAAAiI,mBAAA,SAA6B/G,GACzB,GAAM6H,GAAQ,GAAIjD,GAKlB,OAJAiD,GAAM7H,MAAQA,EACVjC,KAAK8I,OAAS9I,KAAK8I,MAAMtG,SAC3BsH,EAAM5H,IAAMlC,KAAK8I,MAAM3G,UAAUF,IAE5B6H,GASD5C,EAAVnG,UAAA0I,2CACQzJ,MAAK0H,uBACP1H,KAAK0H,sBAAsBzG,cAG7BjB,KAAK0H,sBAAwBhH,EAAAA,MAAjCqJ,UAAA,GACW/J,KAAK8I,MAAMkB,IAAI,SAAA9H,GAAO,MAAAA,GAAI+H,iBADrCC,OAEWlK,KAAK8I,MAAMkB,IAAI,SAAA9H,GAAO,MAAAA,GAAIiI,iBAAetJ,UAAU,WACxDhB,EAAKsB,mBAAmBC,kBAK5B8F,EAAFnG,UAAAqJ,eAAE,SAAeC,GACb,MAAO,iBAAiBrK,KAAKmI,SAAjC,IAA6CkC,GAI3CnD,EAAFnG,UAAAuJ,iBAAE,SAAiBD,GACf,MAAO,mBAAmBrK,KAAKmI,SAAnC,IAA+CkC,GAO7CnD,EAAFnG,UAAAwJ,yBAAE,SAAyBC,GACvB,GAAKxK,KAAK2H,gBAAmB3H,KAAKsH,sBAAlC,CAEA,GAAMmD,GAAuBzK,KAAK0K,gBAAgB9H,aAElD6H,GAAQpH,MAAMsH,OAAS3K,KAAKsH,sBAAwB,KAIhDtH,KAAK0K,gBAAgB9H,cAAcgI,eACrCH,EAAQpH,MAAMsH,OAASH,EAAY,QAKvCtD,EAAFnG,UAAA8J,4BAAE,WACE7K,KAAKsH,sBAAwBtH,KAAK0K,gBAAgB9H,cAAckI,aAChE9K,KAAK0K,gBAAgB9H,cAAcS,MAAMsH,OAAS,GAClD3K,KAAKiI,cAAclG,QAIrBmF,EAAFnG,UAAAgK,aAAE,SAAa7I,EAAa8I,EAAyBC,GAC5C/I,EAAIE,WACPpC,KAAK8E,cAAgBkG,EAAUpJ,WAAaqJ,IAKhD/D,EAAFnG,UAAAmK,aAAE,SAAahJ,EAAa+I,GACxB,MAAI/I,GAAIE,SACC,KAEFpC,KAAK8E,gBAAkBmG,EAAM,GAAK,kBA1O7C/F,KAACC,EAAAA,UAADC,OAAAC,SAAA,gBACE8F,SAAU,cACV7F,SAAU,20CACVC,QAAF,isCACEE,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,OACEN,QAAF,QAAA,iBACEO,MACFC,MAAA,gBACMoF,uCAAN,gBACIC,wCAAJ,sHA5DAnE,EAAEX,wHAoEFqD,aAAA1E,KAAAsB,EAAAA,UAAApB,MAAA,eAEAkG,gBAAApG,KAAAuB,EAAAA,QAEA3B,gBAAAI,KAAAuB,EAAAA,QAeAoB,iBAAA3C,KAAAuB,EAAAA,QAMAiC,kBAAAxD,KAAAuB,EAAAA,QAQAqB,sBAAA5C,KAAQyB,EAAAA,SAGRqB,cAAA9C,KAAAyB,EAAAA,SAgBAsB,gBAAA/C,KAAAyB,EAAAA,SAGAuB,oBAAGhD,KAAMyB,EAAAA,UAOTO,OC3FAqE,GAAA,WACE,QAAFA,GAAqB7G,GAAA1E,KAArB0E,YAAqBA,EArDrB,MAAA6G,MAuDaC,GAAsBvE,EAAmBD,EAAWuE,GAAe,2BAgD9E,QAAFE,GAAc1G,EACoB9B,EACZyI,EACAvK,EACAwK,GAJpB,GAAF9L,GAKIsH,EALJC,KAAApH,KAKU+E,IALV/E,WACkCH,GAAlCoD,KAAkCA,EACZpD,EAAtB6L,QAAsBA,EACA7L,EAAtBsB,mBAAsBA,EACAtB,EAAtB8L,eAAsBA,EA/BtB9L,EAAA+L,WAAgC,GAAIC,GAAAA,UAYpC,MAhB+BzD,GAA/BqD,EAAAtE,GAiBA3F,OAAAC,eAAMgK,EAAN1K,UAAA,uBAAA,WAAwC,MAAOf,MAAKuI,sBAClD,SAAoB7G,GAClB,GAAMkB,GAA6B5C,KAAK0E,YAAY9B,aAEpDA,GAAc4F,UAAUC,OAAO,kBAAkBzI,KAAK0I,iBAElDhH,GACFkB,EAAc4F,UAAUG,IAAI,kBAAkBjH,GAGhD1B,KAAKuI,iBAAmB7G,mCAgB1B+J,EAAF1K,UAAA+K,iBAAE,SAAiBC,GAGf/L,KAAKgM,qBAAuBD,EAC5B/L,KAAKmB,mBAAmBC,gBAG1BqK,EAAF1K,UAAAyI,mBAAE,WAAA,GAAF3J,GAAAG,IACIA,MAAK0L,QAAQO,kBAAkB,WAC7B,GAAMtL,GAAYd,EAAKoD,KAAOpD,EAAKoD,KAAKiJ,OAASC,EAAAA,GAAa,KAE9D,OAAOzL,GAAAA,MAAMC,EAAWd,EAAK8L,eAAeO,OAAO,KAC9CE,KAAKC,EAAAA,UAAUxM,EAAK+L,aACpB/K,UAAU,WAAM,MAAAhB,GAAKyM,oBAK9Bb,EAAF1K,UAAA6H,sBAAE,WACE,GAAI5I,KAAKgM,mBAAoB,CAC3B,GAAMO,GAAYvM,KAAKwM,UAAUC,KAAK,SAAAvK,GAAO,MAAAA,GAAIwK,QAEjD1M,MAAK2M,mBAAqBJ,EAAYA,EAAU7H,YAAc,KAC9D1E,KAAKsM,eACLtM,KAAKgM,oBAAqB,IAI9BP,EAAF1K,UAAAC,YAAE,WACEhB,KAAK4L,WAAWgB,OAChB5M,KAAK4L,WAAWiB,YAIlBpB,EAAF1K,UAAAuL,aAAE,WACMtM,KAAK2M,oBACP3M,KAAKgF,QAAQ8H,OACb9M,KAAKgF,QAAQC,eAAejF,KAAK2M,mBAAmB/J,gBAEpD5C,KAAKgF,QAAQ+H,uBA7FnB7H,KAACC,EAAAA,UAADC,OAAAC,SAAA,oBACE8F,SAAU,0BACV3F,QAAF,QAAA,iBACEF,SAAU,6HACVC,QAAS,i+BACTQ,MAAFC,MAAA,mBACEP,cAAFC,EAAAA,kBAAAC,KACEC,gBAAgBC,EAAAA,wBAAlBC,0HAjDAZ,KAAE8H,EAAAA,SAZF9H,KAAQ+H,EAAAA,oBAgBR/H,KAAEiB,EAAAA,iBAdFsF,EAAAlF,wJAwEAmC,kBAAAxD,KAAAuB,EAAAA,SAOAgF,OAxFAyB,GAAA,qCAiKAC,GAAAC,EAAAnG,EAAAoG,EAAAH,6CAqBA,GAAArN,GAAAsH,EAAAC,KAAApH,OAAAA,IAoDA,OAnBAH,GAAAyN,WAAAA,EAAEzN,EAAF6E,YAAAA,oEAVA7E,EAAA0N,eAA+BC,mBAA/B9I,EAAA9B,eAkBI/C,EAAKwC,SAAToL,SAAApL,IAAA,EACAqL,oBAMAC,qBAAAD,EAAAC,qBAAAC,YAAAF,EAAAG,gBACQC,UAARJ,EAAAI,YAGAjO,EA1CA,0DA4CAkO,2EA1CA/N,KAAAgO,UAAAtM,EACQ1B,KAAKsN,WAAbxB,iBAAA9L,KAAA0E,eAGAuJ,YAAA,EACAC,cAAA,gJAaAD,YAAA,EACAC,cAAA,uIAgCApE,EAAAqE,kBAGAC,EAAA/H,aACAnB,KAAAmJ,EAAAA,UAAAjJ,+CAjFA+F,SAAA,aACE3F,QAAF,WAAA,gBAAA,YACEO,MACFC,MAAA,eACMsI,sBAAN,SACIC,uBAAJ,sBACIC,kBAAJ,WACIC,2BAAJ,WACIC,+BAAJ,SACIC,UAAJ,8FAzGAzJ,KAAa8H,EAAAA,SArDb9H,KAAE0J,EAAAA,WAIF1J,SAAE2J,GAAFxI,aAAAnB,KAAAoB,EAAAA,WAAApB,KAAA4J,EAAAA,OAAA1J,MAAA2J,QAfA7J,SAAQ2J,GAARxI,aAAAnB,KAAA8J,EAAAA,UAAA5J,MAAA,iBAoNAgJ,EAAA7H,yCA5BA6H,mCChMA,sBAwBAlJ,KAAC+J,EAAAA,SAAD7J,OACE8J,SACEC,EAAAA,aACAC,GACAC,EAAAA,aACAC,GACAC,EAAAA,iBAGFC,SACEJ,GACAlI,GACAuI,GACAC,GACAjE,GACA2C,GACAuB,IAEFC,cACE1I,GACAuI,GACAC,GACAG,GACAC,GACArE,GACA2C,GACA2B,GACAC,GACAlP,GACA6O,QArDJM,KC0BAC,GAAA,WACE,QAAFA,GAAqBxL,GAAA1E,KAArB0E,YAAqBA,EA3BrB,MAAAwL,MA6BaC,GAAuBnJ,EAAWkJ,gCA7B/C,sBA+BAhL,KAACmJ,EAAAA,UAADjJ,OACEC,SAAU,kBACV8F,SAAU,gBACVpF,MAAOC,MAAS,uBAlClBoK,KAoCAC,GAAA,SAAAlJ,GAuBE,QAAFkJ,GACItL,EACQuL,EACUC,GAHpB,GAAF1Q,GAIIsH,EAJJC,KAAApH,KAIU+E,IAJV/E,WAEYH,GAAZyQ,UAAYA,EAKRzQ,EAAK2Q,UAAYD,IATrB,MAJgCnI,GAAhCiI,EAAAlJ,GAgBEkJ,EAAFtP,UAAA0P,gBAAE,WAAA,GAAF5Q,GAAAG,IACS0Q,GAAAA,aAAgB1Q,KAAKsQ,UAAUK,YAIpC3Q,KAAK4Q,0BACL5Q,KAAK6Q,aAAanH,QAAQ7I,UAAU,WAAM,MAAAhB,GAAK+Q,8BAMzCP,EAAVtP,UAAA6P,6CACI,IAAK5Q,KAAK6Q,aAAarO,OAAvB,IAM2BsO,MAAM1J,KAAKpH,KAAK0E,YAAY9B,cAAcmO,YAClEC,OAAO,SAAAC,GAAQ,QAAEA,EAAKzI,WAAayI,EAAKzI,UAAU0I,SAAS,sBAC3DF,OAAO,SAAAC,GAAQ,MAAAA,GAAKE,YAActR,EAAK2Q,UAAY3Q,EAAK2Q,UAAUY,aAAe,KACjFC,KAAK,SAAAJ,GAAQ,MAAAA,GAAKK,YAAYC,UAG/BC,sBAxDNtM,KAACC,EAAAA,UAADC,OAAAC,SAAA,cACE8F,SAAU,aACV7F,SAAU,8EACVC,QAAF,yiBACEC,QAAF,SACEO,MACFC,MAAA,cACMyL,oCAAN,2BACIC,iCAAJ,6BAEA9L,gBAAAC,EAAAA,wBAAAC,OACAL,cAAAC,EAAAA,kBAAAC,mFAnCAT,SAAE2J,GAAFxI,aAAAnB,KAAA4J,EAAAA,OAAA1J,MAAAuM,EAAAA,eAgDAtB,EAAA9J,mEALA8J,mCCzDA,sBAaAnL,KAAC+J,EAAAA,SAAD7J,OACE8J,SAAUE,IACVI,SAAUa,GAAYD,GAAehB,IACrCQ,cAAeS,GAAYD,QAhB7BwB,mBCqBE,QAAFC,GAAqBC,GAAA9R,KAArB8R,cAAqBA,EArBrB,sBAiBA5M,KAACmJ,EAAAA,UAADjJ,OACEC,SAAU,8DARZH,KAAE6M,EAAAA,oBAVFF,KC6BaG,GAAwB5E,EAAcC,EAAc4E,EAAAA,cACpDC,GAA8B9E,EAAcC,EAAc8E,EAAAA,mCAqBrE,QAAFC,GAAwB1N,EACA2N,EACahQ,GAFnC,GAAFxC,GAGIsH,EAHJC,KAAApH,KAGU0E,EAAa2N,IAHvBrS,WAAwBH,GAAxB6E,YAAwBA,EACA7E,EAAxBwS,MAAwBA,EAHxBxS,EAAAyS,KAAwC,WAOpCzS,EAAKwC,SAAWkQ,OAAOlQ,IAAa,IAxDxC,MA+CoC+F,GAApCgK,EAAAjL,kBAZAjC,KAACmJ,EAAAA,UAADjJ,OACEC,SAAU,gBACV8F,SAAU,cACV3F,QAAS,WAAY,YACrBO,MACEyM,uBAAwB,aACxBC,oBAAqB,qCACrBC,cAAe,OACf1M,MAAS,iBAEX2M,YAAaC,QAASX,EAAAA,YAAaY,YAAaT,4CA1BlDlN,KAAE4N,EAAAA,aATF5N,KAAE6N,EAAAA,UA2CF7N,SAAA2J,GAAAxI,aAAAnB,KAAe8J,EAAAA,UAAf5J,MAAyB,mCAJzBkN,OAAApN,KAAGuB,EAAAA,SAjDH2L,GA+CoCJ,+EA/CpC,MAsEuC5J,GAAvC4K,EAAA7L,kBAPAjC,KAACmJ,EAAAA,UAADjJ,OACEC,SAAU,mBACVG,QACE,4BAEFmN,YAAaC,QAASK,EAAAA,eAAgBJ,YAAaG,0BAGrDE,OAAAhO,KAAGuB,EAAAA,MAAHrB,MAAS,kBAvET4N,GAsEuCC,EAAAA,+BA4BrC,QAAFE,GAAwBzO,EACA2N,EACAe,EACa/Q,GAHnC,GAAFxC,GAIIsH,EAJJC,KAAApH,KAIU0E,EAAa2N,EAAOe,IAJ9BpT,WAAwBH,GAAxB6E,YAAwBA,EACA7E,EAAxBwS,MAAwBA,EACAxS,EAAxBuT,SAAwBA,EAIpBvT,EAAKwC,SAAWkQ,OAAOlQ,IAAa,IAxGxC,MA2F0C+F,GAA1C+K,EAAAhM,GAmBEgM,EAAFpS,UAAAyI,mBAAE,WACErC,EAAJpG,UAAUyI,mBAAVpC,KAAApH,OAGEmT,EAAFpS,UAAAC,YAAE,WACEmG,EAAJpG,UAAUC,YAAVoG,KAAApH,sBAtCAkF,KAACmJ,EAAAA,UAADjJ,OACEC,SAAU,uBACV8F,SAAU,oBACVpF,MACEyM,uBAAwB,aACxBE,cAAe,OACf1M,MAAS,wBAEXR,QAAS,WAAY,YACrBmN,YACGC,QAAST,EAAAA,kBAAmBU,YAAaM,IACzCP,QAASX,EAAAA,YAAaY,YAAaM,4CArExCjO,KAAE4N,EAAAA,aATF5N,KAAE6N,EAAAA,UAWF7N,KAAEmO,EAAAA,kBAgFFnO,SAAA2J,GAAAxI,aAAAnB,KAAe8J,EAAAA,UAAf5J,MAAyB,mCAPzB6L,OAAA/L,KAAGuB,EAAAA,MAAHrB,MAAS,uBAETkO,aAAApO,KAAGqO,EAAAA,gBAAHnO,MAAmByM,OAhGnBsB,GA2F0CjB,+EC3F1C,MAkB2C9J,GAA3CoL,EAAArM,kBAJAjC,KAACmJ,EAAAA,UAADjJ,OACEC,SAAU,uBACVsN,YAAaC,QAASa,EAAAA,mBAAoBZ,YAAaW,0BAKzDE,QAAAxO,KAAGuB,EAAAA,MAAHrB,MAAS,wBAGTuO,SAAAzO,KAAGuB,EAAAA,MAAHrB,MAAS,+BAxBToO,GAkB2CC,EAAAA,+FCa3C,MAFgCrL,GAAhCwL,EAAAzM,kBAdAjC,KAACC,EAAAA,UAADC,OAAAC,SAAA,WACE8F,SAAU,UACV7F,SAAU,kDACVS,MACFC,MAAA,WACMsM,KAAN,QAEA/M,QAAA,mLACAE,cAAAC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,OACE6M,YAAFC,QAAAG,EAAAA,QAAkCF,YAAlCe,sEAMAA,8FCTA/T,GAAAgU,WAA4D,IAtB5D,MAqB0CzL,GAA1C0L,EAAA3M,kBAPAjC,KAACmJ,EAAAA,UAADjJ,OACEC,SAAU,sBACVU,MACE4I,UAAW,mBAEbgE,YAAaC,QAASmB,EAAAA,kBAAmBlB,YAAaiB,0BAGxDD,YAAA3O,KAAGuB,EAAAA,MAAHrB,MAAS,iCAtBT0O,GAqB0CC,EAAAA,mBCFpCC,IACJb,GACAH,GACAQ,GACAM,GACAF,GACAxB,GACAP,gCA1BF,sBA6BA3M,KAAC+J,EAAAA,SAAD7J,OACE8J,SAAU+E,EAAAA,cAAe9E,EAAAA,aAAcC,IACvCI,QAASwE,GACTpE,aAAcoE,OAhChBE,KC+CAC,GAAA,WAEE,QAAFA,GAAqBC,EACAC,EACAC,EACAC,GAHAvU,KAArBoU,kBAAqBA,EACApU,KAArBqU,SAAqBA,EACArU,KAArBsU,aAAqBA,EACAtU,KAArBuU,YAAqBA,EApDrB,MAsDEJ,GAAFpT,UAAAyT,aAAE,SAAavD,EAASyC,EACTe,EAAkBC,GAD/B,GAAF7U,GAAAG,KAEU2U,EAAW3U,KAAKoU,kBAAkBnD,EAAMyC,EAY9C,OAXAe,GAAYG,KAAKD,GAEb3U,KAAKsU,aAAaK,IACpB3U,KAAKuU,YAAYtD,GAAM7E,KAAKyI,EAAAA,KAAK,IAAIhU,UAAU,SAAAiU,GAC7CA,EAAS1L,QAAQ,SAAC2L,EAAO9S,GACvB,GAAI+S,GAA4BN,EAAU5D,OAC1CkE,GAAeJ,KAAK3S,GAAS6S,EAAStS,OAAS,GAC/C3C,EAAK2U,aAAaO,EAAOrB,EAAQ,EAAGe,EAAaO,OAIhDP,GAQTN,EAAFpT,UAAAkU,aAAE,SAAaC,GAAb,GAAFrV,GAAAG,KACQyU,IAEJ,OADAS,GAAe9L,QAAQ,SAAA6H,GAAQ,MAAApR,GAAK2U,aAAavD,EAAM,EAAGwD,QACnDA,GAOTN,EAAFpT,UAAAoU,qBAAE,SAAqBC,EAAYC,GAAjC,GAAFxV,GAAAG,KACQsV,KACAC,IAeJ,OAdAA,GAAc,IAAK,EAEnBH,EAAMhM,QAAQ,SAAA6H,GAEZ,IAAK,GADDuE,IAAS,EACJnL,EAAI,EAAGA,GAAKxK,EAAKwU,SAASpD,GAAO5G,IACxCmL,EAASA,GAAUD,EAAclL,EAE/BmL,IACFF,EAAQV,KAAK3D,GAEXpR,EAAKyU,aAAarD,KACpBsE,EAAc1V,EAAKwU,SAASpD,GAAQ,GAAKoE,EAAYI,WAAWxE,MAG7DqE,GAvGXnB,KAmHAuB,GAAA,SAAAvO,GAaE,QAAFuO,GAAsBL,EACAM,EACRC,OAAd,KAAAA,IAAcA,KAFZ,IAAF/V,GAGIsH,EAHJC,KAAApH,OAAAA,WAAsBH,GAAtBwV,YAAsBA,EACAxV,EAAtB8V,cAAsBA,EAbtB9V,EAAAgW,eAAmB,GAAIC,GAAAA,oBAEvBjW,EAAAkW,cAAkB,GAAID,GAAAA,oBAclBjW,EAAKmW,MAAQ,GAAIF,GAAAA,gBAAqBF,KApI1C,MAmHiDxN,GAAjDsN,EAAAvO,GAME3F,OAAFC,eAAMiU,EAAN3U,UAAA,YAAE,WAAa,MAAOf,MAAKgW,MAAMtU,WAC/B,SAASA,GACP1B,KAAKgW,MAAMpJ,KAAKlL,GAChB1B,KAAK6V,eAAejJ,KAAK5M,KAAK2V,cAAcV,aAAajV,KAAKkT,OAC9DlT,KAAKqV,YAAYY,UAAYjW,KAAK6V,eAAenU,uCAUnDgU,EAAF3U,UAAAmV,QAAE,SAAQC,GAAR,GAAFtW,GAAAG,KACU0J,GACJyM,EAAiBC,WACjBpW,KAAKqV,YAAYgB,eAAuB,SACxCrW,KAAK6V,eAEP,OAAOnV,GAAAA,MAAXqJ,UAAA,GAAoBL,GAAS0C,KAAKpC,EAAAA,IAAI,WAGhC,MAFAnK,GAAKkW,cAAcnJ,KACjB/M,EAAK8V,cAAcR,qBAAqBtV,EAAKgW,eAAenU,MAAO7B,EAAKwV,cACnExV,EAAKkW,cAAcrU,UAI9BgU,EAAF3U,UAAAuV,WAAE,aApJFZ,GAmHiDa,EAAAA,YChGjDC,GAAA,SAAArP,oEACAtH,GAAAmW,MAAU,GAAIF,GAAAA,sBApBd,MAmBgD1N,GAAhDoO,EAAArP,GAME3F,OAAFC,eAAM+U,EAANzV,UAAA,YAAE,WAAa,MAAOf,MAAKgW,MAAMtU,WAC/B,SAASA,GAAc1B,KAAKgW,MAAMpJ,KAAKlL,oCAEvC8U,EAAFzV,UAAAmV,QAAE,SAAQC,GAAR,GAAFtW,GAAAG,IACI,OAAOU,GAAAA,MAAXqJ,UAAA,IAAqBoM,EAAiBC,WAAYpW,KAAKgW,QAChD5J,KAAKpC,EAAAA,IAAI,WACR,MAAOnK,GAAKqT,SAIlBsD,EAAFzV,UAAAuV,WAAE,aAnCFE,GAmBgDD,EAAAA,YCRnCE,GAAU,GAAIC,GAAAA,QAAQ,sSC6CO,+BAGD,6tFC/CtB,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QACjF,QAAS,SAAU;manBOmB,olFCmFT,6BAGD,mCAGO9W,2BAGR,oCAUUA,mCAMF,wjFC5EV"}