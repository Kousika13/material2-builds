{"version":3,"file":"material.umd.min.js","sources":["../../src/lib/tooltip/tooltip.ts","../../src/lib/tabs/tab-header.ts","../../src/lib/tabs/tab-group.ts","../../src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/lib/tabs/tabs-module.ts","../../src/lib/toolbar/toolbar.ts","../../src/lib/toolbar/toolbar-module.ts","../../src/lib/tree/outlet.ts","../../src/lib/tree/node.ts","../../src/lib/tree/padding.ts","../../src/lib/tree/tree.ts","../../src/lib/tree/toggle.ts","../../src/lib/tree/tree-module.ts","../../src/lib/tree/data-source/flat-data-source.ts","../../src/lib/tree/data-source/nested-data-source.ts","../../src/lib/version.ts","../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/core/testing/month-constants.ts","../../src/lib/expansion/expansion-animations.ts","../../src/lib/select/select.ts","../../src/lib/stepper/step-header.ts","../../src/lib/stepper/stepper-animations.ts","../../src/lib/stepper/stepper-icon.ts","../../src/lib/stepper/stepper.ts","../../src/lib/stepper/stepper-button.ts","../../src/lib/stepper/stepper-module.ts","../../src/lib/table/table.ts","../../src/lib/table/cell.ts","../../src/lib/table/row.ts","../../src/lib/table/table-module.ts","../../src/lib/table/table-data-source.ts","../../src/lib/tabs/ink-bar.ts","../../src/lib/tabs/tab-label.ts","../../src/lib/tabs/tab-content.ts","../../src/lib/tabs/tab.ts","../../src/lib/tabs/tabs-animations.ts","../../src/lib/tabs/tab-body.ts","../../src/lib/tabs/tab-label-wrapper.ts","../../src/lib/slider/slider.ts","../../src/lib/slider/slider-module.ts","../../src/lib/snack-bar/snack-bar-ref.ts","../../src/lib/snack-bar/snack-bar-config.ts","../../src/lib/snack-bar/snack-bar-animations.ts","../../src/lib/snack-bar/simple-snack-bar.ts","../../src/lib/snack-bar/snack-bar-container.ts","../../src/lib/snack-bar/snack-bar.ts","../../src/lib/snack-bar/snack-bar-module.ts","../../src/lib/sort/sort.ts","../../src/lib/sort/sort-animations.ts","../../src/lib/sort/sort-header-intl.ts","../../src/lib/sort/sort-header.ts","../../src/lib/sort/sort-module.ts","../../src/lib/stepper/step-label.ts","../../src/lib/stepper/stepper-intl.ts","../../src/lib/sidenav/drawer.ts","../../src/lib/sidenav/sidenav.ts","../../src/lib/sidenav/sidenav-module.ts","../../src/lib/slide-toggle/slide-toggle.ts","../../src/lib/slide-toggle/slide-toggle-module.ts","../../src/lib/progress-spinner/progress-spinner.ts","../../src/lib/progress-spinner/progress-spinner-module.ts","../../src/lib/radio/radio.ts","../../src/lib/radio/radio-module.ts","../../src/lib/sidenav/drawer-animations.ts","../../src/lib/select/select-module.ts","../../src/lib/tooltip/tooltip-animations.ts","../../src/lib/tooltip/tooltip-module.ts","../../src/lib/paginator/paginator-intl.ts","../../src/lib/paginator/paginator.ts","../../src/lib/paginator/paginator-module.ts","../../src/lib/progress-bar/progress-bar.ts","../../src/lib/progress-bar/progress-bar-module.ts","../../src/lib/menu/menu-directive.ts","../../src/lib/menu/menu-trigger.ts","../../src/lib/menu/menu-module.ts","../../src/lib/select/select-animations.ts","../../src/lib/list/selection-list.ts","../../src/lib/list/list-module.ts","../../src/lib/menu/menu-content.ts","../../src/lib/menu/menu-animations.ts","../../src/lib/menu/menu-item.ts","../../src/lib/list/list.ts","../../src/lib/icon/icon-registry.ts","../../src/lib/icon/icon.ts","../../src/lib/icon/icon-module.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-module.ts","../../src/lib/divider/divider.ts","../../src/lib/divider/divider-module.ts","../../src/lib/expansion/accordion.ts","../../src/lib/expansion/expansion-panel-content.ts","../../src/lib/expansion/expansion-panel.ts","../../src/lib/expansion/expansion-panel-header.ts","../../src/lib/expansion/expansion-module.ts","../../src/lib/grid-list/grid-tile.ts","../../src/lib/grid-list/tile-coordinator.ts","../../src/lib/grid-list/tile-styler.ts","../../src/lib/grid-list/grid-list.ts","../../src/lib/grid-list/grid-list-module.ts","../../src/lib/datepicker/multi-year-view.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/datepicker/calendar.ts","../../src/lib/datepicker/datepicker-animations.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/dialog/dialog-container.ts","../../src/lib/dialog/dialog-ref.ts","../../src/lib/dialog/dialog.ts","../../src/lib/dialog/dialog-content-directives.ts","../../src/lib/dialog/dialog-module.ts","../../src/lib/input/autosize.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/input.ts","../../src/lib/input/input-module.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/chips/chip.ts","../../src/lib/chips/chip-default-options.ts","../../src/lib/chips/chip-list.ts","../../src/lib/chips/chip-input.ts","../../src/lib/chips/chips-module.ts","../../src/lib/dialog/dialog-config.ts","../../src/lib/dialog/dialog-animations.ts","../../src/lib/button/button.ts","../../src/lib/button/button-module.ts","../../src/lib/button-toggle/button-toggle.ts","../../src/lib/button-toggle/button-toggle-module.ts","../../src/lib/card/card.ts","../../src/lib/card/card-module.ts","../../src/lib/checkbox/checkbox-config.ts","../../src/lib/autocomplete/autocomplete-module.ts","../../src/lib/badge/badge.ts","../../src/lib/badge/badge-module.ts","../../src/lib/bottom-sheet/bottom-sheet-config.ts","../../src/lib/bottom-sheet/bottom-sheet-ref.ts","../../src/lib/bottom-sheet/bottom-sheet-animations.ts","../../src/lib/bottom-sheet/bottom-sheet-container.ts","../../src/lib/bottom-sheet/bottom-sheet.ts","../../src/lib/bottom-sheet/bottom-sheet-module.ts","../../src/lib/core/option/option.ts","../../src/lib/core/option/index.ts","../../src/lib/core/label/label-options.ts","../../src/lib/form-field/error.ts","../../src/lib/form-field/form-field-animations.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/label.ts","../../src/lib/form-field/placeholder.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field-module.ts","../../src/lib/autocomplete/autocomplete.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/disable-ripple.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/core/common-behaviors/initialized.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/grid-list/grid-list-measure.ts","../../src/lib/menu/menu-errors.ts","../../src/lib/select/select-errors.ts","../../src/lib/sort/sort-errors.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/datetime/date-formats.ts","../../src/lib/core/datetime/native-date-formats.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/line/line.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/option/optgroup.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {BreakpointObserver, Breakpoints, BreakpointState} from '@angular/cdk/layout';\nimport {\n  ConnectionPositionPair,\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConnectionPosition,\n  OverlayRef,\n  ScrollDispatcher,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject, Observable} from 'rxjs';\nimport {matTooltipAnimations} from './tooltip-animations';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/** Creates an error to be thrown if the user supplied an invalid tooltip position. */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy', {\n      providedIn: 'root',\n      factory: () => {\n        const overlay = inject(Overlay);\n        return () => overlay.scrollStrategies.reposition({scrollThrottle: SCROLL_THROTTLE_MS});\n      }\n    });\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options', {\n      providedIn: 'root',\n      factory: () => ({\n        showDelay: 0,\n        hideDelay: 0,\n        touchendHideDelay: 1500,\n      })\n    });\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.google.com/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': '_handleTouchend()',\n  },\n})\nexport class MatTooltip implements OnDestroy {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _portal: ComponentPortal<TooltipComponent>;\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      if (this._overlayRef) {\n        this._updatePosition();\n\n        if (this._tooltipInstance) {\n          this._tooltipInstance!.show(value, 0);\n        }\n\n        this._overlayRef.updatePosition();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay = this._defaultOptions.showDelay;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay = this._defaultOptions.hideDelay;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, Function>();\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    private _platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) private _scrollStrategy,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions: MatTooltipDefaultOptions) {\n\n    const element: HTMLElement = _elementRef.nativeElement;\n\n    // The mouse events shouldn't be bound on iOS devices, because\n    // they can prevent the first tap from firing its click event.\n    if (!_platform.IOS) {\n      this._manualListeners.set('mouseenter', () => this.show());\n      this._manualListeners.set('mouseleave', () => this.hide());\n\n      this._manualListeners\n        .forEach((listener, event) => _elementRef.nativeElement.addEventListener(event, listener));\n    } else if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS, because it will prevent users from typing in inputs. If\n      // we're on iOS and the tooltip is attached on an input or textarea, we clear\n      // the `user-select` to avoid these issues.\n      element.style.webkitUserSelect = element.style.userSelect = '';\n    }\n\n    _focusMonitor.monitor(element).pipe(takeUntil(this._destroyed)).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin !== 'program') {\n        _ngZone.run(() => this.show());\n      }\n    });\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._tooltipInstance = null;\n    }\n\n    // Clean up the event listeners set in the constructor\n    if (!this._platform.IOS) {\n      this._manualListeners.forEach((listener, event) =>\n        this._elementRef.nativeElement.removeEventListener(event, listener));\n\n      this._manualListeners.clear();\n    }\n\n    this._destroyed.next();\n    this._destroyed.complete();\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message) { return; }\n\n    const overlayRef = this._createOverlay();\n\n    this._detach();\n    this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    this._tooltipInstance = overlayRef.attach(this._portal).instance;\n    this._tooltipInstance.afterHidden()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(this._position, delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Handles the touchend events on the host element. */\n  _handleTouchend() {\n    this.hide(this._defaultOptions.touchendHideDelay);\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    if (this._overlayRef) {\n      return this._overlayRef;\n    }\n\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n    const direction = this._dir ? this._dir.value : 'ltr';\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay.position()\n      .flexibleConnectedTo(this._elementRef)\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8)\n      .withPositions([\n        {...origin.main, ...overlay.main},\n        {...origin.fallback, ...overlay.fallback}\n      ]);\n\n    const scrollableAncestors = this._scrollDispatcher\n      .getAncestorScrollContainers(this._elementRef);\n\n    strategy.withScrollableContainers(scrollableAncestors);\n\n    strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        } else {\n          // Otherwise recalculate the origin based on the new position.\n          this._tooltipInstance._setTransformOrigin(change.connectionPair, direction);\n        }\n      }\n    });\n\n    this._overlayRef = this._overlay.create({\n      direction,\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._overlayRef.detachments()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n\n    return this._overlayRef;\n  }\n\n  /** Detaches the currently-attached tooltip. */\n  private _detach() {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /** Updates the position of the current tooltip. */\n  private _updatePosition() {\n    const position =\n        this._overlayRef!.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    position\n      .withPositions([\n        {...origin.main, ...overlay.main},\n        {...origin.fallback, ...overlay.fallback}\n      ]);\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let originPosition: OriginConnectionPosition;\n\n    if (position == 'above' || position == 'below') {\n      originPosition = {originX: 'center', originY: position == 'above' ? 'top' : 'bottom'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      originPosition = {originX: 'start', originY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      originPosition = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(originPosition.originX, originPosition.originY);\n\n    return {\n      main: originPosition,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let overlayPosition: OverlayConnectionPosition;\n\n    if (position == 'above') {\n      overlayPosition = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (position == 'below') {\n      overlayPosition = {overlayX: 'center', overlayY: 'top'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      overlayPosition = {overlayX: 'end', overlayY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      overlayPosition = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n    return {\n      main: overlayPosition,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(\n        take(1),\n        takeUntil(this._destroyed)\n      ).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** The transform origin used in the animation for showing and hiding the tooltip */\n  _transformOrigin: 'top' | 'bottom' | 'left' | 'right' = 'bottom';\n\n  /** Current position of the tooltip. */\n  private _position: TooltipPosition;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private readonly _onHide: Subject<any> = new Subject();\n\n  /** Stream that emits whether the user has a handset-sized display.  */\n  _isHandset: Observable<BreakpointState> = this._breakpointObserver.observe(Breakpoints.Handset);\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _breakpointObserver: BreakpointObserver) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param position Position of the tooltip.\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(position: TooltipPosition, delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._position = position;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  /** Sets the tooltip transform origin according to the position of the tooltip overlay. */\n  _setTransformOrigin(overlayPosition: ConnectionPositionPair, direction: Direction) {\n    const axis = (this._position === 'above' || this._position === 'below') ? 'Y' : 'X';\n    const position = axis == 'X' ? overlayPosition.overlayX : overlayPosition.overlayY;\n\n    if (position === 'top' || position === 'bottom') {\n      this._transformOrigin = position;\n    } else if (position === 'start') {\n      this._transformOrigin = direction === 'ltr' ? 'left' : 'right';\n    } else if (position === 'end') {\n      this._transformOrigin = direction === 'ltr' ? 'right' : 'left';\n    } else {\n      throw getMatTooltipInvalidPositionError(this._position);\n    }\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      this._closeOnInteraction = true;\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.google.com/components/tooltips.html#tooltips-interaction\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {END, ENTER, HOME, LEFT_ARROW, RIGHT_ARROW, SPACE} from '@angular/cdk/keycodes';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, mixinDisableRipple} from '@angular/material/core';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\n\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n// Boilerplate for applying mixins to MatTabHeader.\n/** @docs-private */\nexport class MatTabHeaderBase {}\nexport const _MatTabHeaderMixinBase = mixinDisableRipple(MatTabHeaderBase);\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends _MatTabHeaderMixinBase\n    implements AfterContentChecked, AfterContentInit, OnDestroy, CanDisableRipple {\n\n  @ContentChildren(MatTabLabelWrapper) _labelWrappers: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer') _tabListContainer: ElementRef;\n  @ViewChild('tabList') _tabList: ElementRef;\n\n  /** The tab index that is focused. */\n  private _focusIndex: number = 0;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Combines listeners that will re-align the ink bar whenever they're invoked. */\n  private _realignInkBar = Subscription.EMPTY;\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  private _selectedIndex: number = 0;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number { return this._selectedIndex; }\n  set selectedIndex(value: number) {\n    value = coerceNumberProperty(value);\n    this._selectedIndexChanged = this._selectedIndex != value;\n    this._selectedIndex = value;\n    this._focusIndex = value;\n  }\n\n  /** Event emitted when the option is selected. */\n  @Output() readonly selectFocusedIndex = new EventEmitter();\n\n  /** Event emitted when a label is focused. */\n  @Output() readonly indexFocused = new EventEmitter();\n\n  constructor(private _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() private _dir: Directionality) {\n    super();\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this._updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case RIGHT_ARROW:\n        this._focusNextTab();\n        break;\n      case LEFT_ARROW:\n        this._focusPreviousTab();\n        break;\n      case HOME:\n        this._focusFirstTab();\n        event.preventDefault();\n        break;\n      case END:\n        this._focusLastTab();\n        event.preventDefault();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        event.preventDefault();\n        break;\n    }\n  }\n\n  /**\n   * Aligns the ink bar to the selected tab on load.\n   */\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this._updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n    this._realignInkBar = merge(dirChange, resize).subscribe(realign);\n  }\n\n  ngOnDestroy() {\n    this._realignInkBar.unsubscribe();\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    this._updatePagination();\n    this._alignInkBarToSelectedTab();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Updating the view whether pagination should be enabled or not\n   */\n  _updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this._focusIndex == value) { return; }\n\n    this._focusIndex = value;\n    this.indexFocused.emit(value);\n    this._setTabFocus(value);\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number { return this._focusIndex; }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /**\n   * Moves the focus towards the beginning or the end of the list depending on the offset provided.\n   * Valid offsets are 1 and -1.\n   */\n  _moveFocus(offset: number) {\n    if (this._labelWrappers) {\n      const tabs: MatTabLabelWrapper[] = this._labelWrappers.toArray();\n\n      for (let i = this.focusIndex + offset; i < tabs.length && i >= 0; i += offset) {\n        if (this._isValidIndex(i)) {\n          this.focusIndex = i;\n          return;\n        }\n      }\n    }\n  }\n\n  /** Increment the focus index by 1 until a valid tab is found. */\n  _focusNextTab(): void {\n    this._moveFocus(this._getLayoutDirection() == 'ltr' ? 1 : -1);\n  }\n\n  /** Decrement the focus index by 1 until a valid tab is found. */\n  _focusPreviousTab(): void {\n    this._moveFocus(this._getLayoutDirection() == 'ltr' ? -1 : 1);\n  }\n\n  /** Focuses the first tab. */\n  private _focusFirstTab(): void {\n    for (let i = 0; i < this._labelWrappers.length; i++) {\n      if (this._isValidIndex(i)) {\n        this.focusIndex = i;\n        break;\n      }\n    }\n  }\n\n  /** Focuses the last tab. */\n  private _focusLastTab(): void {\n    for (let i = this._labelWrappers.length - 1; i > -1; i--) {\n      if (this._isValidIndex(i)) {\n        this.focusIndex = i;\n        break;\n      }\n    }\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    const scrollDistance = this.scrollDistance;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    this._tabList.nativeElement.style.transform = `translate3d(${translateX}px, 0, 0)`;\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  get scrollDistance(): number { return this._scrollDistance; }\n  set scrollDistance(v: number) {\n    this._scrollDistance = Math.max(0, Math.min(this._getMaxScrollDistance(), v));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n  }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(scrollDir: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    this.scrollDistance += (scrollDir == 'before' ? -1 : 1) * viewLength / 3;\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    const selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    const isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  _alignInkBarToSelectedTab(): void {\n    const selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\n        null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisableRipple,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette\n} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\n\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nexport class MatTabGroupBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabGroupMixinBase = mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://www.google.com/design/spec/components/tabs.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\n\n  @ViewChild('tabBodyWrapper') _tabBodyWrapper: ElementRef;\n\n  @ViewChild('tabHeader') _tabHeader: MatTabHeader;\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n  private _dynamicHeight: boolean = false;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() readonly focusChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() readonly selectedTabChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\n\n  private _groupId: number;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super(elementRef);\n    this._groupId = nextId++;\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked() {\n    // Clamp the next selected index to the boundsof 0 and the tabs length.\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    let indexToSelect = this._indexToSelect =\n        Math.min(this._tabs.length - 1, Math.max(this._indexToSelect || 0, 0));\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect && this._selectedIndex != null) {\n      const tabChangeEvent = this._createChangeEvent(indexToSelect);\n      this.selectedTabChange.emit(tabChangeEvent);\n      // Emitting this value after change detection has run\n      // since the checked content may contain this variable'\n      Promise.resolve().then(() => this.selectedIndexChange.emit(indexToSelect));\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n      tab.isActive = index === indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  /** Re-aligns the ink bar to the selected tab element. */\n  realignInkBar() {\n    if (this._tabHeader) {\n      this._tabHeader._alignInkBarToSelectedTab();\n    }\n  }\n\n  _focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(\n        ...this._tabs.map(tab => tab._disableChange),\n        ...this._tabs.map(tab => tab._labelChange)).subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    this._tabBodyWrapperHeight = this._tabBodyWrapper.nativeElement.clientHeight;\n    this._tabBodyWrapper.nativeElement.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, idx: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = idx;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex, RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from '../ink-bar';\n\n\n// Boilerplate for applying mixins to MatTabNav.\n/** @docs-private */\nexport class MatTabNavBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabNavMixinBase = mixinDisableRipple(mixinColor(MatTabNavBase, 'primary'));\n\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  exportAs: 'matTabNavBar, matTabNav',\n  inputs: ['color', 'disableRipple'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTabNav extends _MatTabNavMixinBase implements AfterContentInit, CanColor,\n    CanDisableRipple, OnDestroy {\n\n  /** Subject that emits when the component has been destroyed. */\n  private readonly _onDestroy = new Subject<void>();\n\n  private _activeLinkChanged: boolean;\n  private _activeLinkElement: ElementRef | null;\n\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n\n  /** Query list of all tab links of the tab navigation. */\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true})\n  _tabLinks: QueryList<MatTabLink>;\n\n  /** Background color of the tab nav. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  constructor(elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler) {\n    super(elementRef);\n  }\n\n  /**\n   * Notifies the component that the active link has been changed.\n   * @deletion-target 7.0.0 `element` parameter to be removed.\n   */\n  updateActiveLink(element: ElementRef) {\n    // Note: keeping the `element` for backwards-compat, but isn't being used for anything.\n    // @deletion-target 7.0.0\n    this._activeLinkChanged = !!element;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  ngAfterContentInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      const dirChange = this._dir ? this._dir.change : observableOf(null);\n\n      return merge(dirChange, this._viewportRuler.change(10))\n          .pipe(takeUntil(this._onDestroy))\n          .subscribe(() => this._alignInkBar());\n    });\n  }\n\n  /** Checks if the active link has been changed and, if so, will update the ink bar. */\n  ngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      const activeTab = this._tabLinks.find(tab => tab.active);\n\n      this._activeLinkElement = activeTab ? activeTab._elementRef : null;\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Aligns the ink bar to the active link. */\n  _alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.show();\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    } else {\n      this._inkBar.hide();\n    }\n  }\n}\n\n\n// Boilerplate for applying mixins to MatTabLink.\nexport class MatTabLinkBase {}\nexport const _MatTabLinkMixinBase =\n  mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\n\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n@Directive({\n  selector: '[mat-tab-link], [matTabLink]',\n  exportAs: 'matTabLink',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabIndex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled',\n    '[class.mat-tab-label-active]': 'active',\n    '(click)': '_handleClick($event)'\n  }\n})\nexport class MatTabLink extends _MatTabLinkMixinBase\n    implements OnDestroy, CanDisable, CanDisableRipple, HasTabIndex, RippleTarget {\n\n  /** Whether the tab link is active or not. */\n  protected _isActive: boolean = false;\n\n  /** Reference to the RippleRenderer for the tab-link. */\n  protected _tabLinkRipple: RippleRenderer;\n\n  /** Whether the link is active. */\n  @Input()\n  get active(): boolean { return this._isActive; }\n  set active(value: boolean) {\n    if (value !== this._isActive) {\n      this._isActive = value;\n      this._tabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._tabNavBar.disableRipple;\n  }\n\n  constructor(private _tabNavBar: MatTabNav,\n              public _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Attribute('tabindex') tabIndex: string) {\n    super();\n\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._tabLinkRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    if (globalOptions) {\n      this.rippleConfig = {\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n        speedFactor: globalOptions.baseSpeedFactor,\n        animation: globalOptions.animation,\n      };\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabLinkRipple._removeTriggerEvents();\n  }\n\n  /**\n   * Handles the click event, preventing default navigation if the tab link is disabled.\n   */\n  _handleClick(event: MouseEvent) {\n    if (this.disabled) {\n      event.preventDefault();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabContent} from './tab-content';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n    MatTabContent,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader,\n    MatTabContent,\n  ],\n})\nexport class MatTabsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nexport class MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatToolbarMixinBase = mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': 'this._toolbarRows.length',\n    '[class.mat-toolbar-single-row]': '!this._toolbarRows.length'\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n  private _document: Document;\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(\n    elementRef: ElementRef,\n    private _platform: Platform,\n    @Inject(DOCUMENT) document?: any) {\n    super(elementRef);\n\n    // TODO: make the document a required param when doing breaking changes.\n    this._document = document;\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = [].slice.call(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n      .some(node => node.textContent.trim());\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodeOutlet} from '@angular/cdk/tree';\nimport {\n  Directive,\n  ViewContainerRef,\n} from '@angular/core';\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({\n  selector: '[matTreeNodeOutlet]'\n})\nexport class MatTreeNodeOutlet implements CdkTreeNodeOutlet {\n  constructor(public viewContainer: ViewContainerRef) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Attribute,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Input,\n  IterableDiffers,\n  QueryList\n} from '@angular/core';\nimport {\n  CdkNestedTreeNode,\n  CdkTree,\n  CdkTreeNodeDef,\n  CdkTreeNode,\n} from '@angular/cdk/tree';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {mixinTabIndex, mixinDisabled, CanDisable, HasTabIndex} from '@angular/material/core';\n\n\nexport const _MatTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkTreeNode));\nexport const _MatNestedTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkNestedTreeNode));\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n  selector: 'mat-tree-node',\n  exportAs: 'matTreeNode',\n  inputs: ['disabled', 'tabIndex'],\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n    '[attr.role]': 'role',\n    'class': 'mat-tree-node'\n  },\n  providers: [{provide: CdkTreeNode, useExisting: MatTreeNode}]\n})\nexport class MatTreeNode<T> extends _MatTreeNodeMixinBase<T> implements HasTabIndex, CanDisable {\n  @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n  constructor(protected _elementRef: ElementRef,\n              protected _tree: CdkTree<T>,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n}\n\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeDef]',\n  inputs: [\n    'when: matTreeNodeDefWhen'\n  ],\n  providers: [{provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef}]\n})\nexport class MatTreeNodeDef<T> extends CdkTreeNodeDef<T> {\n  @Input('matTreeNode') data: T;\n}\n\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\n@Directive({\n  selector: 'mat-nested-tree-node',\n  exportAs: 'matNestedTreeNode',\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.role]': 'role',\n    'class': 'mat-nested-tree-node',\n  },\n  inputs: ['disabled', 'tabIndex'],\n  providers: [\n    {provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CdkTreeNode, useExisting: MatNestedTreeNode}\n  ]\n})\nexport class MatNestedTreeNode<T> extends _MatNestedTreeNodeMixinBase<T>\n    implements HasTabIndex, CanDisable {\n\n  @Input('matNestedTreeNode') node: T;\n\n  @ContentChildren(MatTreeNodeOutlet) nodeOutlet: QueryList<MatTreeNodeOutlet>;\n\n  constructor(protected _elementRef: ElementRef,\n              protected _tree: CdkTree<T>,\n              protected _differs: IterableDiffers,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree, _differs);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n\n  // This is a workaround for https://github.com/angular/angular/issues/23091\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  // TODO(tinayuangao): Remove when the angular issue #23091 is fixed\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodePadding} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodePadding]',\n  providers: [{provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding}]\n})\nexport class MatTreeNodePadding<T> extends CdkTreeNodePadding<T> {\n\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  @Input('matTreeNodePadding') level: number;\n\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n  @Input('matTreeNodePaddingIndent') indent: number;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation} from '@angular/core';\nimport {CdkTree} from '@angular/cdk/tree';\nimport {MatTreeNodeOutlet} from './outlet';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tree',\n  exportAs: 'matTree',\n  template: `<ng-container matTreeNodeOutlet></ng-container>`,\n  host: {\n    'class': 'mat-tree',\n    'role': 'tree',\n  },\n  styleUrls: ['tree.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [{provide: CdkTree, useExisting: MatTree}]\n})\nexport class MatTree<T> extends CdkTree<T> {\n  // Outlets within the tree's template where the dataNodes will be inserted.\n  @ViewChild(MatTreeNodeOutlet) _nodeOutlet: MatTreeNodeOutlet;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\nimport {CdkTreeNodeToggle} from '@angular/cdk/tree';\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeToggle]',\n  host: {\n    '(click)': '_toggle($event)',\n  },\n  providers: [{provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle}]\n})\nexport class MatTreeNodeToggle<T> extends CdkTreeNodeToggle<T> {\n  @Input('matTreeNodeToggleRecursive') recursive: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatNestedTreeNode, MatTreeNodeDef, MatTreeNode} from './node';\nimport {MatTree} from './tree';\nimport {MatTreeNodeToggle} from './toggle';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {MatTreeNodePadding} from './padding';\n\nconst MAT_TREE_DIRECTIVES = [\n  MatNestedTreeNode,\n  MatTreeNodeDef,\n  MatTreeNodePadding,\n  MatTreeNodeToggle,\n  MatTree,\n  MatTreeNode,\n  MatTreeNodeOutlet\n];\n\n@NgModule({\n  imports: [CdkTreeModule, CommonModule, MatCommonModule],\n  exports: MAT_TREE_DIRECTIVES,\n  declarations: MAT_TREE_DIRECTIVES,\n})\nexport class MatTreeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {FlatTreeControl, TreeControl} from '@angular/cdk/tree';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map, take} from 'rxjs/operators';\n\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class MatTreeFlattener<T, F> {\n\n  constructor(public transformFunction: (node: T, level: number) => F,\n              public getLevel: (node: F) => number,\n              public isExpandable: (node: F) => boolean,\n              public getChildren: (node: T) => Observable<T[]>) {}\n\n  _flattenNode(node: T, level: number,\n               resultNodes: F[], parentMap: boolean[]): F[] {\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n\n    if (this.isExpandable(flatNode)) {\n      this.getChildren(node).pipe(take(1)).subscribe(children => {\n        children.forEach((child, index) => {\n          let childParentMap: boolean[] = parentMap.slice();\n          childParentMap.push(index != children.length - 1);\n          this._flattenNode(child, level + 1, resultNodes, childParentMap);\n        });\n      });\n    }\n    return resultNodes;\n  }\n\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   */\n  flattenNodes(structuredData: T[]): F[] {\n    let resultNodes: F[] = [];\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   */\n  expandFlattenedNodes(nodes: F[], treeControl: TreeControl<F>): F[] {\n    let results: F[] = [];\n    let currentExpand: boolean[] = [];\n    currentExpand[0] = true;\n\n    nodes.forEach((node) => {\n      let expand = true;\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n      if (expand) {\n        results.push(node);\n      }\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nexport class MatTreeFlatDataSource<T, F> extends DataSource<F> {\n  _flattenedData = new BehaviorSubject<F[]>([]);\n\n  _expandedData = new BehaviorSubject<F[]>([]);\n\n  _data: BehaviorSubject<T[]>;\n  get data() { return this._data.value; }\n  set data(value: T[]) {\n    this._data.next(value);\n    this._flattenedData.next(this.treeFlattener.flattenNodes(this.data));\n    this.treeControl.dataNodes = this._flattenedData.value;\n  }\n\n  constructor(private treeControl: FlatTreeControl<F>,\n              private treeFlattener: MatTreeFlattener<T, F>,\n              initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n  }\n\n  connect(collectionViewer: CollectionViewer): Observable<F[]> {\n    const changes = [\n      collectionViewer.viewChange,\n      this.treeControl.expansionModel.onChange!,\n      this._flattenedData\n    ];\n    return merge(...changes).pipe(map(() => {\n      this._expandedData.next(\n        this.treeFlattener.expandFlattenedNodes(this._flattenedData.value, this.treeControl));\n      return this._expandedData.value;\n    }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nexport class MatTreeNestedDataSource<T> extends DataSource<T> {\n  _data = new BehaviorSubject<T[]>([]);\n\n  /**\n   * Data for the nested treee\n   */\n  get data() { return this._data.value; }\n  set data(value: T[]) { this._data.next(value); }\n\n  connect(collectionViewer: CollectionViewer): Observable<T[]> {\n    return merge(...[collectionViewer.viewChange, this._data])\n      .pipe(map(() => {\n        return this.data;\n      }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('6.0.0-rc.14-cfe6c1d');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n  ViewportRuler,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {filter, take, switchMap, delay, tap} from 'rxjs/operators';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  MatOption,\n  MatOptionSelectionChange,\n} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {Subscription, defer, fromEvent, merge, of as observableOf, Subject, Observable} from 'rxjs';\nimport {MatAutocomplete} from './autocomplete';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy', {\n      providedIn: 'root',\n      factory: () => {\n        const overlay = inject(Overlay);\n        return () => overlay.scrollStrategies.reposition();\n      }\n    });\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    'role': 'combobox',\n    'autocomplete': 'off',\n    'aria-autocomplete': 'list',\n    '[attr.aria-activedescendant]': 'activeOption?.id',\n    '[attr.aria-expanded]': 'panelOpen.toString()',\n    '[attr.aria-owns]': 'autocomplete?.id',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  exportAs: 'matAutocompleteTrigger',\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal;\n  private _componentDestroyed = false;\n\n  /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n  private _previousValue: string | number | null;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Subscription to viewport size changes. */\n  private _viewportSubscription = Subscription.EMPTY;\n\n  /** Stream of keyboard events that can close the panel. */\n  private readonly _closeKeyEventStream = new Subject<void>();\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when autocomplete has been touched` */\n  _onTouched = () => {};\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  constructor(private _element: ElementRef, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @deletion-target 7.0.0 Make `_viewportRuler` required.\n              private _viewportRuler?: ViewportRuler) {}\n\n  ngOnDestroy() {\n    this._viewportSubscription.unsubscribe();\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._overlayAttached && this.autocomplete.showPanel;\n  }\n  private _overlayAttached: boolean = false;\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (!this._overlayAttached) {\n      return;\n    }\n\n    if (this.panelOpen) {\n      // Only emit if the panel was visible.\n      this.autocomplete.closed.emit();\n    }\n\n    this.autocomplete._isOpen = this._overlayAttached = false;\n\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n\n    // Note that in some cases this can end up being called after the component is destroyed.\n    // Add a check to ensure that we don't try to run change detection on a destroyed view.\n    if (!this._componentDestroyed) {\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)),\n      this._closeKeyEventStream,\n      this._outsideClickStream,\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n          observableOf()\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  readonly optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .asObservable()\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  });\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private get _outsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return merge(\n      fromEvent(this._document, 'click'),\n      fromEvent(this._document, 'touchend')\n    )\n    .pipe(filter((event: MouseEvent | TouchEvent) => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._overlayAttached &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n    if (keyCode === ESCAPE) {\n      event.preventDefault();\n    }\n\n    // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n    // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n    if (this.panelOpen && (keyCode === ESCAPE || (keyCode === UP_ARROW && event.altKey))) {\n      this._resetActiveItem();\n      this._closeKeyEventStream.next();\n      event.stopPropagation();\n    } else if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    let target = event.target as HTMLInputElement;\n    let value: number | string | null = target.value;\n\n    // Based on `NumberValueAccessor` from forms.\n    if (target.type === 'number') {\n      value = value == '' ? null : parseFloat(value);\n    }\n\n    // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._canOpen() && this._previousValue !== value &&\n      document.activeElement === event.target) {\n      this._previousValue = value;\n      this._onChange(value);\n      this.openPanel();\n    }\n  }\n\n  _handleFocus(): void {\n    if (this._canOpen()) {\n      this._previousValue = this._element.nativeElement.value;\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const index = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(index,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n\n    const newScrollPosition = _getOptionScrollPosition(\n      index + labelCount,\n      AUTOCOMPLETE_OPTION_HEIGHT,\n      this.autocomplete._getScrollTop(),\n      AUTOCOMPLETE_PANEL_HEIGHT\n    );\n\n    this.autocomplete._setScrollTop(newScrollPosition);\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.reapplyLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n      .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n          this._resetActiveItem();\n          this.autocomplete._setVisibility();\n          return this.panelClosingActions;\n        }),\n        // when the first closing event occurs...\n        take(1)\n      )\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      this._overlayRef = this._overlay.create(this._getOverlayConfig());\n\n      if (this._viewportRuler) {\n        this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n          if (this.panelOpen && this._overlayRef) {\n            this._overlayRef.updateSize({width: this._getHostWidth()});\n          }\n        });\n      }\n    } else {\n      /** Update the panel width, in case the host width has changed */\n      this._overlayRef.updateSize({width: this._getHostWidth()});\n    }\n\n    if (this._overlayRef && !this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    const wasOpen = this.panelOpen;\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._overlayAttached = true;\n\n    // We need to do an extra `panelOpen` check in here, because the\n    // autocomplete won't be shown if there are no options.\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\n      this.autocomplete.opened.emit();\n    }\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getHostWidth(),\n      direction: this._dir ? this._dir.value : 'ltr'\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy = this._overlay.position()\n      .flexibleConnectedTo(this._getConnectedElement())\n      .withFlexibleDimensions(false)\n      .withPush(false)\n      .withPositions([\n        {originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top'},\n        {originX: 'start', originY: 'top', overlayX: 'start', overlayY: 'bottom'}\n      ]);\n\n    return this._positionStrategy;\n  }\n\n  private _getConnectedElement(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n  }\n\n  /** Determines whether the panel can be opened. */\n  private _canOpen(): boolean {\n    const element: HTMLInputElement = this._element.nativeElement;\n    return !element.readOnly && !element.disabled;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n    OCT = 9, NOV = 10, DEC = 11;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  animateChild,\n  group,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/** Animations used by the Material expansion panel. */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '48px'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '64px'}\n    }),\n    transition('expanded <=> collapsed', group([\n      query('@indicatorRotate', animateChild(), {optional: true}),\n      animate(EXPANSION_PANEL_ANIMATION_TIMING),\n    ])),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  SPACE,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  CdkConnectedOverlay,\n  Overlay,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  ViewportRuler,\n} from '@angular/cdk/overlay';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  CanDisable,\n  CanDisableRipple,\n  CanUpdateErrorState,\n  ErrorStateMatcher,\n  HasTabIndex,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinErrorState,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {defer, merge, Observable, Subject} from 'rxjs';\nimport {filter, map, startWith, switchMap, take, takeUntil} from 'rxjs/operators';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 20px.\n */\nexport const SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 20;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nexport class MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatSelectMixinBase = mixinDisableRipple(\n    mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_ariaLabel',\n    '[attr.aria-labelledby]': 'ariaLabelledby',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanel,\n    matSelectAnimations.fadeInContent\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form. */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Whether the panel's animation is done. */\n  _panelDoneAnimating: boolean = false;\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy = this._scrollStrategyFactory();\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the component is disabling centering of the active option over the trigger. */\n  private _disableOptionCentering: boolean = false;\n\n  /** Whether the select is focused. */\n  focused: boolean = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger') trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether to center the active option over the trigger. */\n  @Input()\n  get disableOptionCentering(): boolean { return this._disableOptionCentering; }\n  set disableOptionCentering(value: boolean) {\n    this._disableOptionCentering = coerceBooleanProperty(value);\n  }\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.options) {\n      return merge(...this.options.map(option => option.onSelectionChange));\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  });\n\n   /** Event emitted when the select panel has been toggled. */\n   @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the select has been opened. */\n  @Output('opened') readonly _openedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => o), map(() => {}));\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed') readonly _closedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => !o), map(() => {}));\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectChange> =\n      new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) private _scrollStrategyFactory) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes.disabled) {\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);\n\n    this._panelOpen = true;\n    this._keyManager.withHorizontalOrientation(null);\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n        keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  /**\n   * When the panel element is finished transforming in (though not fading in), it\n   * emits an event and focuses an option if the panel is open.\n   */\n  _onPanelDone(): void {\n    if (this.panelOpen) {\n      this._scrollTop = 0;\n      this.openedChange.emit(true);\n    } else {\n      this.openedChange.emit(false);\n      this._panelDoneAnimating = false;\n      this.overlayDir.offsetX = 0;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * When the panel content is done fading in, the _panelDoneAnimating property is\n   * set so the proper class can be added to the panel.\n   */\n  _onFadeInDone(): void {\n    this._panelDoneAnimating = this.panelOpen;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this.focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this.focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[], isUserInput = false): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      this._clearSelection();\n\n      const correspondingOption = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(correspondingOption);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput = false): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      isUserInput ? correspondingOption._selectViaInteraction() : correspondingOption.select();\n      this._selectionModel.select(correspondingOption);\n      this.stateChanges.next();\n    }\n\n    return correspondingOption;\n  }\n\n\n  /**\n   * Clears the select trigger and deselects every option in the list.\n   * @param skip Option that should not be deselected.\n   */\n  private _clearSelection(skip?: MatOption): void {\n    this._selectionModel.clear();\n    this.options.forEach(option => {\n      if (option !== skip) {\n        option.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\n      .withTypeAhead()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n\n      this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => this.close());\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges\n      .pipe(takeUntil(changedOrDestroyed), filter(event => event.isUserInput))\n      .subscribe(event => {\n        this._onSelect(event.source);\n\n        if (!this.multiple && this._panelOpen) {\n          this.close();\n          this.focus();\n        }\n      });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    // TODO(crisbeto): handle blank/null options inside multi-select.\n    if (this.multiple) {\n      this._selectionModel.toggle(option);\n      this.stateChanges.next();\n      wasSelected ? option.deselect() : option.select();\n      this._keyManager.setActiveItem(option);\n      this._sortValues();\n    } else {\n      this._clearSelection(option.value == null ? undefined : option);\n\n      if (option.value == null) {\n        this._propagateChanges(option.value);\n      } else {\n        this._selectionModel.select(option);\n        this.stateChanges.next();\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.options.forEach(option => {\n        if (option.selected) {\n          this._selectionModel.select(option);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options,\n        this.optionGroups);\n\n    this.panel.nativeElement.scrollTop = _getOptionScrollPosition(\n      activeOptionIndex + labelCount,\n      this._getItemHeight(),\n      this.panel.nativeElement.scrollTop,\n      SELECT_PANEL_MAX_HEIGHT\n    );\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options,\n        this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  get _ariaLabel(): string | null {\n    // If an ariaLabelledby value has been set, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors.\n    this.overlayDir.offsetX = offsetX;\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    // Disable offset if requested by user by returning 0 as value to offset\n    if (this._disableOptionCentering) {\n      return 0;\n    }\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height\n    // difference, multiplied by -1 to ensure that the overlay moves in the correct\n    // direction up the page.\n    return optionOffsetFromPanelTop * -1 - optionHeightAdjustment;\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  TemplateRef,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperIntl} from './stepper-intl';\nimport {MatStepperIconContext} from './stepper-icon';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStepHeader implements OnDestroy {\n  private _intlSubscription: Subscription;\n\n  /** State of the given step. */\n  @Input() state: string;\n\n  /** Label of the given step. */\n  @Input() label: MatStepLabel | string;\n\n  /** Overrides for the header icons, passed in via the stepper. */\n  @Input() iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>};\n\n  /** Index of the given step. */\n  @Input() index: number;\n\n  /** Whether the given step is selected. */\n  @Input() selected: boolean;\n\n  /** Whether the given step label is active. */\n  @Input() active: boolean;\n\n  /** Whether the given step is optional. */\n  @Input() optional: boolean;\n\n  constructor(\n    public _intl: MatStepperIntl,\n    private _focusMonitor: FocusMonitor,\n    private _element: ElementRef,\n    changeDetectorRef: ChangeDetectorRef) {\n    _focusMonitor.monitor(_element.nativeElement, true);\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n\n  /** Returns string label of given step if it is a text label. */\n  _stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n\n  /** Returns MatStepLabel if the label of given step is a template label. */\n  _templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n\n  /** Returns the host HTML element. */\n  _getHostElement() {\n    return this._element.nativeElement;\n  }\n\n  /** Template context variables that are exposed to the `matStepperIcon` instances. */\n  _getIconContext(): MatStepperIconContext {\n    return {\n      index: this.index,\n      active: this.active,\n      optional: this.optional\n    };\n  }\n\n  focus() {\n    this._getHostElement().focus();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material steppers. */\nexport const matStepperAnimations: {\n  readonly horizontalStepTransition: AnimationTriggerMetadata;\n  readonly verticalStepTransition: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions the step along the X axis in a horizontal stepper. */\n  horizontalStepTransition: trigger('stepTransition', [\n    state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n    state('current', style({transform: 'none', visibility: 'visible'})),\n    state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n    transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n  ]),\n\n  /** Animation that transitions the step along the Y axis in a vertical stepper. */\n  verticalStepTransition: trigger('stepTransition', [\n    state('previous', style({height: '0px', visibility: 'hidden'})),\n    state('next', style({height: '0px', visibility: 'hidden'})),\n    state('current', style({height: '*', visibility: 'visible'})),\n    transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, TemplateRef} from '@angular/core';\n\n/** Template context available to an attached `matStepperIcon`. */\nexport interface MatStepperIconContext {\n  /** Index of the step. */\n  index: number;\n  /** Whether the step is currently active. */\n  active: boolean;\n  /** Whether the step is optional. */\n  optional: boolean;\n}\n\n/**\n * Template to be used to override the icons inside the step header.\n */\n@Directive({\n  selector: 'ng-template[matStepperIcon]',\n})\nexport class MatStepperIcon {\n  /** Name of the icon to be overridden. */\n  @Input('matStepperIcon') name: 'edit' | 'done' | 'number';\n\n  constructor(public templateRef: TemplateRef<MatStepperIconContext>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {CdkStep, CdkStepper, StepContentPositionState} from '@angular/cdk/stepper';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Optional,\n  Output,\n  QueryList,\n  SkipSelf,\n  TemplateRef,\n  ViewChildren,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {takeUntil} from 'rxjs/operators';\nimport {matStepperAnimations} from './stepper-animations';\nimport {MatStepperIcon, MatStepperIconContext} from './stepper-icon';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: ErrorStateMatcher, useExisting: MatStep}],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matStep',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\n  /** Content for step label given by `<ng-template matStepLabel>`. */\n  @ContentChild(MatStepLabel) stepLabel: MatStepLabel;\n\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher) {\n    super(stepper);\n  }\n\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    const customErrorState = !!(control && control.invalid && this.interacted);\n\n    return originalErrorState || customErrorState;\n  }\n}\n\n\n@Directive({\n  selector: '[matStepper]'\n})\nexport class MatStepper extends CdkStepper implements AfterContentInit {\n  /** The list of step headers of the steps in the stepper. */\n  @ViewChildren(MatStepHeader) _stepHeader: QueryList<MatStepHeader>;\n\n  /** Steps that the stepper holds. */\n  @ContentChildren(MatStep) _steps: QueryList<MatStep>;\n\n  /** Custom icon overrides passed in by the consumer. */\n  @ContentChildren(MatStepperIcon) _icons: QueryList<MatStepperIcon>;\n\n  /** Event emitted when the current step is done transitioning in. */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Consumer-specified template-refs to be used to override the header icons. */\n  _iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>} = {};\n\n  ngAfterContentInit() {\n    const icons = this._icons.toArray();\n\n    ['edit', 'done', 'number'].forEach(name => {\n      const override = icons.find(icon => icon.name === name);\n\n      if (override) {\n        this._iconOverrides[name] = override.templateRef;\n      }\n    });\n\n    // Mark the component for change detection whenever the content children query changes\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\n  }\n\n  _animationDone(event: AnimationEvent) {\n    if ((event.toState as StepContentPositionState) === 'current') {\n      this.animationDone.emit();\n    }\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-horizontal-stepper',\n  exportAs: 'matHorizontalStepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    'aria-orientation': 'horizontal',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.horizontalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatHorizontalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatHorizontalStepper extends MatStepper { }\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-vertical-stepper',\n  exportAs: 'matVerticalStepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'aria-orientation': 'vertical',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.verticalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatVerticalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatVerticalStepper extends MatStepper {\n  constructor(@Optional() dir: Directionality, changeDetectorRef: ChangeDetectorRef) {\n    super(dir, changeDetectorRef);\n    this._orientation = 'vertical';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepper, CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {MatStepper} from './stepper';\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperNext]',\n  host: {\n    '(click)': '_stepper.next()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperNext extends CdkStepperNext {}\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperPrevious]',\n  host: {\n    '(click)': '_stepper.previous()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperPrevious extends CdkStepperPrevious {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {ErrorStateMatcher, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nimport {MatStepperIcon} from './stepper-icon';\nimport {MatStepperIntl} from './stepper-intl';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule,\n    MatRippleModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  declarations: [\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  providers: [MatStepperIntl, ErrorStateMatcher],\n})\nexport class MatStepperModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  IterableDiffers,\n  ViewEncapsulation\n} from '@angular/core';\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table, table[mat-table]',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTable<T> extends CdkTable<T> {\n  // TODO(andrewseguin): Remove this explicitly set constructor when the compiler knows how to\n  // properly build the es6 version of the class. Currently sets ctorParameters to empty due to a\n  // fixed bug.\n  // https://github.com/angular/tsickle/pull/760 - tsickle PR that fixed this\n  // https://github.com/angular/angular/pull/23531 - updates compiler-cli to fixed version\n  constructor(protected _differs: IterableDiffers,\n              protected _changeDetectorRef: ChangeDetectorRef,\n              protected _elementRef: ElementRef,\n              @Attribute('role') role: string) {\n    super(_differs, _changeDetectorRef, _elementRef, role);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef, CdkFooterCell, CdkFooterCellDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends CdkCellDef { }\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends CdkHeaderCellDef { }\n\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matFooterCellDef]',\n  providers: [{provide: CdkFooterCellDef, useExisting: MatFooterCellDef}]\n})\nexport class MatFooterCellDef extends CdkFooterCellDef { }\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [{provide: CdkColumnDef, useExisting: MatColumnDef}],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell, th[mat-header-cell]',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Footer cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-footer-cell, td[mat-footer-cell]',\n  host: {\n    'class': 'mat-footer-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatFooterCell extends CdkFooterCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell, td[mat-cell]',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Directive, ViewEncapsulation} from '@angular/core';\nimport {\n  CDK_ROW_TEMPLATE, CdkFooterRow, CdkFooterRowDef,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef,\n} from '@angular/cdk/table';\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef'],\n})\nexport class MatHeaderRowDef extends CdkHeaderRowDef { }\n\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\n@Directive({\n  selector: '[matFooterRowDef]',\n  providers: [{provide: CdkFooterRowDef, useExisting: MatFooterRowDef}],\n  inputs: ['columns: matFooterRowDef'],\n})\nexport class MatFooterRowDef extends CdkFooterRowDef { }\n\n/**\n * Data row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends CdkRowDef<T> {\n}\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row, tr[mat-header-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n})\nexport class MatHeaderRow extends CdkHeaderRow { }\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-footer-row, tr[mat-footer-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-footer-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matFooterRow',\n})\nexport class MatFooterRow extends CdkFooterRow { }\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row, tr[mat-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n})\nexport class MatRow extends CdkRow { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {\n  MatCell,\n  MatCellDef,\n  MatColumnDef,\n  MatFooterCell,\n  MatFooterCellDef,\n  MatHeaderCell,\n  MatHeaderCellDef\n} from './cell';\nimport {\n  MatFooterRow,\n  MatFooterRowDef,\n  MatHeaderRow,\n  MatHeaderRowDef,\n  MatRow,\n  MatRowDef\n} from './row';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\nconst EXPORTED_DECLARATIONS = [\n  // Table\n  MatTable,\n\n  // Template defs\n  MatHeaderCellDef,\n  MatHeaderRowDef,\n  MatColumnDef,\n  MatCellDef,\n  MatRowDef,\n  MatFooterCellDef,\n  MatFooterRowDef,\n\n  // Cell directives\n  MatHeaderCell,\n  MatCell,\n  MatFooterCell,\n\n  // Row directions\n  MatHeaderRow,\n  MatRow,\n  MatFooterRow,\n];\n\n@NgModule({\n  imports: [CdkTableModule, CommonModule, MatCommonModule],\n  exports: EXPORTED_DECLARATIONS,\n  declarations: EXPORTED_DECLARATIONS,\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {_isNumberValue} from '@angular/cdk/coercion';\nimport {DataSource} from '@angular/cdk/table';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  merge,\n  Observable,\n  of as observableOf,\n  Subscription\n} from 'rxjs';\nimport {MatPaginator, PageEvent} from '@angular/material/paginator';\nimport {MatSort, Sort} from '@angular/material/sort';\nimport {map} from 'rxjs/operators';\n\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport class MatTableDataSource<T> extends DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private readonly _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private readonly _filter = new BehaviorSubject<string>('');\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription: Subscription;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() { return this._data.value; }\n  set data(data: T[]) { this._data.next(data); }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter(): string { return this._filter.value; }\n  set filter(filter: string) { this._filter.next(filter); }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort(): MatSort | null { return this._sort; }\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): MatPaginator | null { return this._paginator; }\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting through\n   * the default sortData function.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value: any = data[sortHeaderId];\n    return _isNumberValue(value) ? Number(value) : value;\n  }\n\n  /**\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n   * By default, the function retrieves the active sort and its direction and compares data\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n   * of data ordering.\n   * @param data The array of data that should be sorted.\n   * @param sort The connected MatSort that holds the current sort state.\n   */\n  sortData: ((data: T[], sort: MatSort) => T[]) = (data: T[], sort: MatSort): T[] => {\n    const active = sort.active;\n    const direction = sort.direction;\n    if (!active || direction == '') { return data; }\n\n    return data.sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n      // one value exists while the other doesn't. In this case, existing value should come first.\n      // This avoids inconsistent results when comparing values to undefined/null.\n      // If neither value exists, return 0 (equal).\n      let comparatorResult = 0;\n      if (valueA != null && valueB != null) {\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      } else if (valueA != null) {\n        comparatorResult = 1;\n      } else if (valueB != null) {\n        comparatorResult = -1;\n      }\n\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const accumulator = (currentTerm, key) => currentTerm + data[key];\n    const dataStr = Object.keys(data).reduce(accumulator, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // The events should emit whenever the component emits a change or initializes, or if no\n    // component is provided, a stream with just a null event should be provided.\n    // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n    // pipeline can progress to the next step. Note that the value from these streams are not used,\n    // they purely act as a signal to progress in the pipeline.\n    const sortChange: Observable<Sort|null> = this._sort ?\n        merge<Sort>(this._sort.sortChange, this._sort.initialized) :\n        observableOf(null);\n    const pageChange: Observable<PageEvent|null> = this._paginator ?\n        merge<PageEvent>(this._paginator.page, this._paginator.initialized) :\n        observableOf(null);\n\n    if (this._renderChangesSubscription) {\n      this._renderChangesSubscription.unsubscribe();\n    }\n\n    const dataStream = this._data;\n    // Watch for base data or filter changes to provide a filtered set of data.\n    const filteredData = combineLatest(dataStream, this._filter)\n      .pipe(map(([data]) => this._filterData(data)));\n    // Watch for filtered data or sort changes to provide an ordered set of data.\n    const orderedData = combineLatest(filteredData, sortChange)\n      .pipe(map(([data]) => this._orderData(data)));\n    // Watch for ordered data or page changes to provide a paged set of data.\n    const paginatedData = combineLatest(orderedData, pageChange)\n      .pipe(map(([data]) => this._pageData(data)));\n    // Watched for paged data changes and send the result to the table to render.\n    paginatedData.subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overridden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) { return data; }\n\n    return this.sortData(data.slice(), this.sort);\n  }\n\n  /**\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice().splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      if (!this.paginator) { return; }\n\n      this.paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (this.paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(this.paginator.length / this.paginator.pageSize) - 1 || 0;\n        this.paginator.pageIndex = Math.min(this.paginator.pageIndex, lastPageIndex);\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Inject, InjectionToken, NgZone} from '@angular/core';\n\n\n/**\n * Interface for a a MatInkBar positioner method, defining the positioning and width of the ink\n * bar in a set of tabs.\n */\n// tslint:disable-next-line class-name Using leading underscore to denote internal interface.\nexport interface _MatInkBarPositioner {\n  (element: HTMLElement): { left: string, width: string };\n}\n\n/** Injection token for the MatInkBar's Positioner. */\nexport const _MAT_INK_BAR_POSITIONER =\n  new InjectionToken<_MatInkBarPositioner>('MatInkBarPositioner', {\n    providedIn: 'root',\n    factory: () => _matInkBarPositioner\n  });\n\n/**\n * The default positioner function for the MatInkBar.\n */\nexport const _matInkBarPositioner: _MatInkBarPositioner = (element: HTMLElement) => {\n  return {\n    left: element ? (element.offsetLeft || 0) + 'px' : '0',\n    width: element ? (element.offsetWidth || 0) + 'px' : '0',\n  };\n};\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone,\n    @Inject(_MAT_INK_BAR_POSITIONER) private _inkBarPositioner: _MatInkBarPositioner) { }\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n  private _setStyles(element: HTMLElement) {\n    const positions = this._inkBarPositioner(element);\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\n\n    inkBar.style.left = positions.left;\n    inkBar.style.width = positions.width;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef, ViewContainerRef} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n})\nexport class MatTabLabel extends CdkPortal {\n  constructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\n    super(templateRef, viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/** Decorates the `ng-template` tags and reads out the template from it. */\n@Directive({selector: '[matTabContent]'})\nexport class MatTabContent {\n  constructor(public template: TemplateRef<any>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabContent} from './tab-content';\n\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nexport class MatTabBase {}\nexport const _MatTabMixinBase = mixinDisabled(MatTabBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matTab',\n})\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n  @ContentChild(MatTabLabel) templateLabel: MatTabLabel;\n\n  /**\n   * Template provided in the tab content that will be used if present, used to enable lazy-loading\n   */\n  @ContentChild(MatTabContent, {read: TemplateRef}) _explicitContent: TemplateRef<any>;\n\n  /** Template inside the MatTab view that contains an `<ng-content>`. */\n  @ViewChild(TemplateRef) _implicitContent: TemplateRef<any>;\n\n  /** The plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** The portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the label changes. */\n  readonly _labelChange = new Subject<void>();\n\n  /** Emits whenever the disable changes */\n  readonly _disableChange = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel')) {\n      this._labelChange.next();\n    }\n\n    if (changes.hasOwnProperty('disabled')) {\n      this._disableChange.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._disableChange.complete();\n    this._labelChange.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(\n        this._explicitContent || this._implicitContent, this._viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material tabs. */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n    state('left', style({transform: 'translate3d(-100%, 0, 0)'})),\n    state('right', style({transform: 'translate3d(100%, 0, 0)'})),\n    transition('* => left, * => right, left => center, right => center',\n        animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ])\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n  ViewChild,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet, PortalHostDirective} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {Subscription} from 'rxjs';\nimport {matTabsAnimations} from './tabs-animations';\nimport {startWith} from 'rxjs/operators';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]'\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** Subscription to events for when the tab body begins centering. */\n  private _centeringSub = Subscription.EMPTY;\n  /** Subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub = Subscription.EMPTY;\n\n  constructor(\n    componentFactoryResolver: ComponentFactoryResolver,\n    viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\n      super(componentFactoryResolver, viewContainerRef);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    this._centeringSub = this._host._beforeCentering\n      .pipe(startWith(this._host._isCenterPosition(this._host._position)))\n      .subscribe((isCentering: boolean) => {\n        if (isCentering && !this.hasAttached()) {\n          this.attach(this._host._content);\n        }\n      });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  /** Clean up centering subscription. */\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this._centeringSub.unsubscribe();\n    this._leavingSub.unsubscribe();\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  },\n})\nexport class MatTabBody implements OnInit {\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() readonly _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() readonly _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n   /** The portal host inside of this container into which the tab body content will be loaded. */\n  @ViewChild(PortalHostDirective) _portalHost: PortalHostDirective;\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal;\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  @Input()\n  set position(position: number) {\n    if (position < 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'left' : 'right';\n    } else if (position > 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n  _position: MatTabBodyPositionState;\n\n  /** The origin position from which this tab should appear when it is centered into view. */\n  @Input()\n  set origin(origin: number) {\n    if (origin == null) { return; }\n\n    const dir = this._getLayoutDirection();\n    if ((dir == 'ltr' && origin <= 0) || (dir == 'rtl' && origin > 0)) {\n      this._origin = 'left';\n    } else {\n      this._origin = 'right';\n    }\n  }\n  _origin: MatTabBodyOriginState;\n\n  constructor(private _elementRef: ElementRef,\n              @Optional() private _dir: Directionality) { }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this._origin) {\n      this._position = this._origin == 'left' ? 'left-origin-center' : 'right-origin-center';\n    }\n  }\n\n  _onTranslateTabStarted(e: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(e.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  _onTranslateTabComplete(e: AnimationEvent): void {\n    // If the transition to the center is complete, emit an event.\n    if (this._isCenterPosition(e.toState) && this._isCenterPosition(this._position)) {\n      this._onCentered.emit();\n    }\n\n    if (this._isCenterPosition(e.fromState) && !this._isCenterPosition(this._position)) {\n      this._afterLeavingCenter.emit();\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nexport class MatTabLabelWrapperBase {}\nexport const _MatTabLabelWrapperMixinBase = mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled'\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  HammerInput,\n  HasTabIndex,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {Subscription} from 'rxjs';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nexport class MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSliderMixinBase =\n  mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(click)': '_onClick($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert(): boolean { return this._invert; }\n  set invert(value: boolean) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundToDecimal = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value: boolean) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /** Value of the slider. */\n  @Input()\n  get value(): number | null {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      this._value = coerceNumberProperty(v);\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /**\n   * Function that will be used to format the value before it is displayed\n   * in the thumb label. Can be used to format very large number in order\n   * for them to fit into the slider thumb.\n   */\n  @Input() displayWith: (value: number | null) => string | number;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() readonly change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() readonly input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    if (this.displayWith) {\n      return this.displayWith(this.value);\n    }\n\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundToDecimal && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundToDecimal);\n    }\n\n    return this.value || 0;\n  }\n\n  /** set focus to the host element */\n  focus() {\n    this._focusHostElement();\n  }\n\n  /** blur the host element */\n  blur() {\n    this._blurHostElement();\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    let sign = this._invertMouseCoords ? '-' : '';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${1 - this.percent})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    let sign = this._invertMouseCoords ? '' : '-';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${this.percent})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._direction == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._direction == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._direction == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundToDecimal: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper') private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  private get _invertMouseCoords() {\n    return (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private get _direction() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef.nativeElement, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onClick(event: MouseEvent) {\n    if (this.disabled) {\n      return;\n    }\n\n    let oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    // Emit a change and input event if the value changed.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value && !this.disabled) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled) { return; }\n\n    let oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._direction == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._direction == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n\n    if (this._invertMouseCoords) {\n      percent = 1 - percent;\n    }\n\n    // Since the steps may not divide cleanly into the max value, if the user\n    // slid to 0 or 100 percent, we jump to the min/max value. This approach\n    // is slightly more intuitive than using `Math.ceil` below, because it\n    // follows the user's pointer closer.\n    if (percent === 0) {\n      this.value = this.min;\n    } else if (percent === 1) {\n      this.value = this.max;\n    } else {\n      let exactValue = this._calculateValue(percent);\n\n      // This calculation finds the closest step by finding the closest\n      // whole number divisible by the step relative to the min.\n      let closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n\n      // If we've got a step with a decimal, we may end up with something like 33.300000000000004.\n      // Truncate the value to ensure that it matches the label and to make it easier to work with.\n      if (this._roundToDecimal) {\n        closestValue = parseFloat(closestValue.toFixed(this._roundToDecimal));\n      }\n\n      // The value needs to snap to the min and max.\n      this.value = this._clamp(closestValue, this.min, this.max);\n    }\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Blurs the native element. */\n  private _blurHostElement() {\n    this._elementRef.nativeElement.blur();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to eb triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable, Subject} from 'rxjs';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n  /** Whether the snack bar was dismissed using the action button. */\n  dismissedByAction: boolean;\n}\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has been dismissed. */\n  private readonly _afterDismissed = new Subject<MatSnackBarDismiss>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private readonly _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  /** Whether the snack bar was dismissed using the action button. */\n  private _dismissedByAction = false;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  dismissWithAction(): void {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * @deletion-target 7.0.0\n   */\n  closeWithAction(): void {\n    this.dismissWithAction();\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<MatSnackBarDismiss> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /** Message to be announced by the MatAriaLiveAnnouncer */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material snack bar. */\nexport const matSnackBarAnimations: {\n  readonly contentFade: AnimationTriggerMetadata;\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  contentFade: trigger('contentFade', [\n    transition(':enter', [\n      style({opacity: '0'}),\n      animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.STANDARD_CURVE}`)\n    ])\n  ]),\n\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('visible-top, visible-bottom', style({transform: 'translateY(0%)'})),\n    transition('visible-top => hidden-top, visible-bottom => hidden-bottom',\n      animate(`${AnimationDurations.EXITING} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible-top, void => visible-bottom',\n      animate(`${AnimationDurations.ENTERING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\nimport {matSnackBarAnimations} from './snack-bar-animations';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matSnackBarAnimations.contentFade],\n  host: {\n    '[@contentFade]': '',\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: { message: string, action: string };\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.dismissWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  CdkPortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  NgZone,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\nimport {matSnackBarAnimations} from './snack-bar-animations';\nimport {MatSnackBarConfig} from './snack-bar-config';\n\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    'role': 'alert',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  readonly _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  readonly _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  /** The snack bar configuration. */\n  snackBarConfig: MatSnackBarConfig;\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState.startsWith('hidden')) {\n      this._completeExit();\n    }\n\n    if (toState.startsWith('visible')) {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = `visible-${this.snackBarConfig.verticalPosition}`;\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    this._animationState = `hidden-${this.snackBarConfig.verticalPosition}`;\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n  private _applySnackBarClasses() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClasses = this.snackBarConfig.panelClass;\n\n    if (panelClasses) {\n      if (Array.isArray(panelClasses)) {\n        // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n        panelClasses.forEach(cssClass => element.classList.add(cssClass));\n      } else {\n        element.classList.add(panelClasses);\n      }\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n  }\n\n  /** Asserts that no content is already attached to the container. */\n  private _assertNotAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  EmbeddedViewRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/** Injection token that can be used to specify default snack bar. */\nexport const MAT_SNACK_BAR_DEFAULT_OPTIONS =\n    new InjectionToken<MatSnackBarConfig>('mat-snack-bar-default-options', {\n      providedIn: 'root',\n      factory: () => new MatSnackBarConfig(),\n    });\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable()\nexport class MatSnackBar {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar,\n      @Inject(MAT_SNACK_BAR_DEFAULT_OPTIONS) private _defaultConfig: MatSnackBarConfig) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig):\n    MatSnackBarRef<T> {\n    return this._attach(component, config) as MatSnackBarRef<T>;\n  }\n\n  /**\n   * Creates and dispatches a snack bar with a custom template for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param template Template to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromTemplate(template: TemplateRef<any>, config?: MatSnackBarConfig):\n    MatSnackBarRef<EmbeddedViewRef<any>> {\n    return this._attach(template, config);\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = {...this._defaultConfig, ...config};\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n    _config.announcementMessage = message;\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n    const containerPortal = new ComponentPortal(MatSnackBarContainer, config.viewContainerRef);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component or a template as the content of the snack bar container.\n   */\n  private _attach<T>(content: ComponentType<T> | TemplateRef<T>, userConfig?: MatSnackBarConfig):\n    MatSnackBarRef<T | EmbeddedViewRef<any>> {\n\n    const config = {...this._defaultConfig, ...userConfig};\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T | EmbeddedViewRef<any>>(container, overlayRef);\n\n    if (content instanceof TemplateRef) {\n      const portal = new TemplatePortal(content, null!, {\n        $implicit: config.data,\n        snackBarRef\n      } as any);\n\n      snackBarRef.instance = container.attachTemplatePortal(portal);\n    } else {\n      const injector = this._createInjector(config, snackBarRef);\n      const portal = new ComponentPortal(content, undefined, injector);\n      const contentRef = container.attachComponentPortal<T>(portal);\n\n      // We can't pass this via the injector, because the injector is created earlier.\n      snackBarRef.instance = contentRef.instance;\n    }\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\n      takeUntil(overlayRef.detachments().pipe(take(1)))\n    ).subscribe(state => {\n      if (state.matches) {\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n      } else {\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n      }\n    });\n\n    this._animateSnackBar(snackBarRef, config);\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /** Animates the old snack bar out and the new one in. */\n  private _animateSnackBar(snackBarRef: MatSnackBarRef<any>, config: MatSnackBarConfig) {\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (config.duration && config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration!));\n    }\n\n    if (config.announcementMessage) {\n      this._live.announce(config.announcementMessage, config.politeness);\n    }\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap();\n\n    injectionTokens.set(MatSnackBarRef, snackBarRef);\n    injectionTokens.set(MAT_SNACK_BAR_DATA, config.data);\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MatSnackBar} from './snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatButtonModule,\n    MatCommonModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n  providers: [MatSnackBar]\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CanDisable, HasInitialized, mixinDisabled, mixinInitialized} from '@angular/material/core';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError,\n  getSortInvalidDirectionError\n} from './sort-errors';\nimport {Subject} from 'rxjs';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nexport class MatSortBase {}\nexport const _MatSortMixinBase = mixinInitialized(mixinDisabled(MatSortBase));\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase\n    implements CanDisable, HasInitialized, OnChanges, OnDestroy, OnInit {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  get direction(): SortDirection { return this._direction; }\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable): void {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable): void {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable): void {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.emit({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnInit() {\n    this._markInitialized();\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata, query, animateChild,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/** Animations used by MatSort. */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly arrowOpacity: AnimationTriggerMetadata;\n  readonly arrowPosition: AnimationTriggerMetadata;\n  readonly allowChildren: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('active-asc, asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('active-desc, desc', style({transform: 'translateY(10px)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('active-asc, asc', style({transform: 'rotate(-45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('active-asc, asc', style({transform: 'rotate(45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(-45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that controls the arrow opacity. */\n  arrowOpacity: trigger('arrowOpacity', [\n    state('desc-to-active, asc-to-active, active', style({opacity: 1})),\n    state('desc-to-hint, asc-to-hint, hint', style({opacity: .54})),\n    state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc',\n        style({opacity: 0})),\n    // Transition between all states except for immediate transitions\n    transition('* => asc, * => desc, * => active, * => hint', animate('0ms')),\n    transition('* <=> *', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /**\n   * Animation for the translation of the arrow as a whole. States are separated into two\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n   * peek, and active. The other states define a specific animation (source-to-destination)\n   * and are determined as a function of their prev user-perceived state and what the next state\n   * should be.\n   */\n  arrowPosition: trigger('arrowPosition', [\n    // Hidden Above => Hint Center\n    transition('* => desc-to-hint, * => desc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(-25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Below\n    transition('* => hint-to-desc, * => active-to-desc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(25%)'})\n        ]))),\n    // Hidden Below => Hint Center\n    transition('* => asc-to-hint, * => asc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Above\n    transition('* => hint-to-asc, * => active-to-asc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(-25%)'})\n        ]))),\n    state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active',\n        style({transform: 'translateY(0)'})),\n    state('hint-to-desc, active-to-desc, desc',\n        style({transform: 'translateY(-25%)'})),\n    state('hint-to-asc, active-to-asc, asc',\n        style({transform: 'translateY(25%)'})),\n  ]),\n\n  /** Necessary trigger that calls animate on children animations. */\n  allowChildren: trigger('allowChildren', [\n    transition('* <=> *', [\n      query('@*', animateChild(), {optional: true})\n    ])\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable({providedIn: 'root'})\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkColumnDef} from '@angular/cdk/table';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatSort, MatSortable} from './sort';\nimport {matSortAnimations} from './sort-animations';\nimport {SortDirection} from './sort-direction';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {MatSortHeaderIntl} from './sort-header-intl';\n\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nexport class MatSortHeaderBase {}\nexport const _MatSortHeaderMixinBase = mixinDisabled(MatSortHeaderBase);\n\n/**\n * Valid positions for the arrow to be in for its opacity and translation. If the state is a\n * sort direction, the position of the arrow will be above/below and opacity 0. If the state is\n * hint, the arrow will be in the center with a slight opacity. Active state means the arrow will\n * be fully opaque in the center.\n *\n * @docs-private\n */\nexport type ArrowViewState = SortDirection | 'hint' | 'active';\n\n/**\n * States describing the arrow's animated position (animating fromState to toState).\n * If the fromState is not defined, there will be no animated transition to the toState.\n * @docs-private\n */\nexport interface ArrowViewStateTransition {\n  fromState?: ArrowViewState;\n  toState: ArrowViewState;\n}\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_handleClick()',\n    '(mouseenter)': '_setIndicatorHintVisible(true)',\n    '(longpress)': '_setIndicatorHintVisible(true)',\n    '(mouseleave)': '_setIndicatorHintVisible(false)',\n    '[attr.aria-sort]': '_getAriaSortAttribute()',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.arrowOpacity,\n    matSortAnimations.arrowPosition,\n    matSortAnimations.allowChildren,\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase implements MatSortable, CanDisable {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n   * provide an affordance that the header is sortable by showing on focus and hover.\n   */\n  _showIndicatorHint: boolean = false;\n\n  /**\n   * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n   * position through the animation. If animations are currently disabled, the fromState is removed\n   * so that there is no animation displayed.\n   */\n  _viewState: ArrowViewStateTransition;\n\n  /** The direction the arrow should be facing according to the current state. */\n  _arrowDirection: SortDirection = '';\n\n  /**\n   * Whether the view state animation should show the transition between the `from` and `to` states.\n   */\n  _disableViewStateAnimation = false;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input() start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Optional() public _cdkColumnDef: CdkColumnDef) {\n\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n        .subscribe(() => {\n          if (this._isSorted()) {\n            this._updateArrowDirection();\n          }\n\n          // If this header was recently active and now no longer sorted, animate away the arrow.\n          if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = false;\n            this._setAnimationTransitionState({fromState: 'active', toState: this._arrowDirection});\n          }\n\n          changeDetectorRef.markForCheck();\n        });\n  }\n\n  ngOnInit() {\n    if (!this.id && this._cdkColumnDef) {\n      this.id = this._cdkColumnDef.name;\n    }\n\n    // Initialize the direction of the arrow and set the view state to be immediately that state.\n    this._updateArrowDirection();\n    this._setAnimationTransitionState(\n        {toState: this._isSorted() ? 'active' : this._arrowDirection});\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /**\n   * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n   * user showing what the active sort will become. If set to false, the arrow will fade away.\n   */\n  _setIndicatorHintVisible(visible: boolean) {\n    // No-op if the sort header is disabled - should not make the hint visible.\n    if (this._isDisabled() && visible) { return; }\n\n    this._showIndicatorHint = visible;\n\n    if (!this._isSorted()) {\n      this._updateArrowDirection();\n      if (this._showIndicatorHint) {\n        this._setAnimationTransitionState({fromState: this._arrowDirection, toState: 'hint'});\n      } else {\n        this._setAnimationTransitionState({fromState: 'hint', toState: this._arrowDirection});\n      }\n    }\n  }\n\n  /**\n   * Sets the animation transition view state for the arrow's position and opacity. If the\n   * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n   * no animation appears.\n   */\n  _setAnimationTransitionState(viewState: ArrowViewStateTransition) {\n    this._viewState = viewState;\n\n    // If the animation for arrow position state (opacity/translation) should be disabled,\n    // remove the fromState so that it jumps right to the toState.\n    if (this._disableViewStateAnimation) {\n      this._viewState = {toState: viewState.toState};\n    }\n  }\n\n  /** Triggers the sort on this sort header and removes the indicator hint. */\n  _handleClick() {\n    if (this._isDisabled()) { return; }\n\n    this._sort.sort(this);\n\n    // Do not show the animation if the header was already shown in the right position.\n    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n      this._disableViewStateAnimation = true;\n    }\n\n    // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n    // the direction it is facing.\n    const viewState: ArrowViewStateTransition = this._isSorted() ?\n        {fromState: this._arrowDirection, toState: 'active'} :\n        {fromState: 'active', toState: this._arrowDirection};\n    this._setAnimationTransitionState(viewState);\n\n    this._showIndicatorHint = false;\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  /** Returns the animation state for the arrow direction (indicator and pointers). */\n  _getArrowDirectionState() {\n    return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n  }\n\n  /** Returns the arrow position state (opacity, translation). */\n  _getArrowViewState() {\n    const fromState = this._viewState.fromState;\n    return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n  }\n\n  /**\n   * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n   * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n   * active sorted direction. The reason this is updated through a function is because the direction\n   * should only be changed at specific times - when deactivated but the hint is displayed and when\n   * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n   * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n   * preserving its direction, even though the next sort direction is actually different and should\n   * only be changed once the arrow displays again (hint or activation).\n   */\n  _updateArrowDirection() {\n    this._arrowDirection = this._isSorted() ?\n        this._sort.direction :\n        (this.start || this._sort.start);\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n\n  /**\n   * Gets the aria-sort attribute that should be applied to this sort header. If this header\n   * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n   * says that the aria-sort property should only be present on one header at a time, so removing\n   * ensures this is true.\n   */\n  _getAriaSortAttribute() {\n    if (!this._isSorted()) { return null; }\n\n    return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n\n@Directive({\n  selector: '[matStepLabel]',\n})\nexport class MatStepLabel extends CdkStepLabel {\n  constructor(template: TemplateRef<any>) {\n    super(template);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Stepper data that is required for internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** Label that is rendered below optional steps. */\n  optionalLabel: string = 'Optional';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusMonitor, FocusOrigin, FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {CdkScrollable} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {filter, take, startWith, takeUntil, map, debounceTime} from 'rxjs/operators';\nimport {merge, fromEvent, Observable, Subject} from 'rxjs';\nimport {matDrawerAnimations} from './drawer-animations';\n\n\n/** Throws an exception when two MatDrawer are matching the same position. */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/** Result of the toggle promise that indicates the state of the drawer. */\nexport type MatDrawerToggleResult = 'open' | 'close';\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n      providedIn: 'root',\n      factory: () => false,\n    });\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_margins.left',\n    '[style.margin-right.px]': '_margins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContent implements AfterContentInit {\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _margins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) private _container: MatDrawerContainer) {\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMargins.subscribe(margins => {\n      this._margins = margins;\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value: 'start' | 'end') {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value: 'over' | 'push' | 'side') {\n    this._mode = value;\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** Whether the drawer should focus the first focusable element automatically when opened. */\n  @Input()\n  get autoFocus(): boolean { return this._autoFocus; }\n  set autoFocus(value: boolean) { this._autoFocus = coerceBooleanProperty(value); }\n  private _autoFocus: boolean = true;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new EventEmitter<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() readonly openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer's position changes. */\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  readonly _modeChanged = new Subject();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              private _ngZone: NgZone,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n\n    /**\n     * Listen to `keydown` events outside the zone so that change detection is not run every\n     * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n     * and we don't have close disabled.\n     */\n    this._ngZone.runOutsideAngular(() => {\n        fromEvent(this._elementRef.nativeElement, 'keydown').pipe(\n            filter((event: KeyboardEvent) => event.keyCode === ESCAPE && !this.disableClose)\n        ).subscribe((event) => this._ngZone.run(() => {\n            this.close();\n            event.stopPropagation();\n        }));\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { this.toggle(coerceBooleanProperty(value)); }\n  private _opened: boolean = false;\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<MatDrawerToggleResult> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<MatDrawerToggleResult> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<MatDrawerToggleResult> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n\n    return new Promise<MatDrawerToggleResult>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n    });\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStarted.emit(event);\n  }\n\n  _onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n        (toState === 'void' && fromState.indexOf('open') === 0)) {\n      this.openedChange.emit(this._opened);\n    }\n  }\n\n  get _width(): number {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n}\n\n\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContainer implements AfterContentInit, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent) _content: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /**\n   * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n   * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n   * mode as well.\n   */\n  @Input()\n  get hasBackdrop() {\n    if (this._backdropOverride == null) {\n      return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n    }\n\n    return this._backdropOverride;\n  }\n  set hasBackdrop(value: any) {\n    this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n  }\n  _backdropOverride: boolean | null;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() readonly backdropClick: EventEmitter<void> = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private readonly _doCheckSubject = new Subject<void>();\n\n  readonly _contentMargins = new Subject<{left: number|null, right: number|null}>();\n\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n  @ViewChild(CdkScrollable) scrollable: CdkScrollable;\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this._updateContentMargins();\n      });\n    }\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this._updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this._updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      takeUntil(this._drawers.changes),\n      filter((event: AnimationEvent) => event.fromState !== event.toState)\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this._updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this._updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add('mat-drawer-opened');\n    } else {\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (!this._dir || this._dir.value == 'ltr') {\n      this._left = this._start;\n      this._right = this._end;\n    } else {\n      this._left = this._end;\n      this._right = this._start;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer))\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||\n           (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end));\n  }\n\n  private _canHaveBackdrop(drawer: MatDrawer): boolean {\n    return drawer.mode !== 'side' || !!this._backdropOverride;\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): drawer is MatDrawer {\n    return drawer != null && drawer.opened;\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  private _updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        let width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        let width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    // Pull back into the NgZone since in some cases we could be outside.\n    this._ngZone.run(() => this._contentMargins.next({left, right}));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  forwardRef,\n  Inject,\n  Input,\n  ViewEncapsulation,\n  QueryList,\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_margins.left',\n    '[style.margin-right.px]': '_margins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer) {\n    super(changeDetectorRef, container);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers: QueryList<MatSidenav>;\n  @ContentChild(MatSidenavContent) _content: MatSidenavContent;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {ScrollDispatchModule} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    ScrollDispatchModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HammerInput,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nexport class MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSlideToggleMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n    ControlValueAccessor, CanDisable, CanColor, HasTabIndex, CanDisableRipple {\n\n  private onChange = (_: any) => {};\n  private onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Reference to the focus state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Whether the thumb is currently being dragged. */\n  private _dragging = false;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  private _dragPercentage: number;\n\n  /** Reference to the thumb HTMLElement. */\n  @ViewChild('thumbContainer') _thumbEl: ElementRef<HTMLElement>;\n\n  /** Reference to the thumb bar HTMLElement. */\n  @ViewChild('toggleBar') _thumbBarEl: ElementRef<HTMLElement>;\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the slide-toggle element is checked or not */\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\n      new EventEmitter<MatSlideToggleChange>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** Reference to the ripple directive on the thumb container. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated The `_platform` parameter to be removed.\n               * @deletion-target 7.0.0\n               */\n              _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string,\n              private _ngZone: NgZone) {\n\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back.\n    if (this._dragging) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      // For keyboard focus show a persistent ripple as focus indicator.\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      this.onTouched();\n\n      // Fade out and clear the focus ripple if one is currently present.\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this.onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n  _onDragStart() {\n    if (!this.disabled && !this._dragging) {\n      const thumbEl = this._thumbEl.nativeElement;\n      this._thumbBarWidth = this._thumbBarEl.nativeElement.clientWidth - thumbEl.clientWidth;\n      thumbEl.classList.add('mat-dragging');\n\n      this._previousChecked = this.checked;\n      this._dragging = true;\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._dragging) {\n      this._dragPercentage = this._getDragPercentage(event.deltaX);\n      // Calculate the moved distance based on the thumb bar width.\n      const dragX = (this._dragPercentage / 100) * this._thumbBarWidth;\n      this._thumbEl.nativeElement.style.transform = `translate3d(${dragX}px, 0, 0)`;\n    }\n  }\n\n  _onDragEnd() {\n    if (this._dragging) {\n      const newCheckedValue = this._dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.checked = newCheckedValue;\n        this._emitChangeEvent();\n      }\n\n      // The drag should be stopped outside of the current event handler, otherwise the\n      // click event will be fired before it and will revert the drag change.\n      this._ngZone.runOutsideAngular(() => setTimeout(() => {\n        if (this._dragging) {\n          this._dragging = false;\n          this._thumbEl.nativeElement.classList.remove('mat-dragging');\n\n          // Reset the transform because the component will take care\n          // of the thumb position after drag.\n          this._thumbEl.nativeElement.style.transform = '';\n        }\n      }));\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the slide-toggle changes.\n    // Since the slide-toggle uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlideToggle} from './slide-toggle';\n\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatSlideToggle, MatCommonModule],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  Input,\n  ElementRef,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nexport class MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatProgressSpinnerMixinBase = mixinColor(MatProgressSpinnerBase, 'primary');\n\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/material2/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * `<mat-progress-spinner>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor {\n\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /** Tracks diameters of existing instances to de-dupe generated styles (default d = 100) */\n  private static diameters = new Set<number>([BASE_SIZE]);\n\n  /**\n   * Used for storing all of the generated keyframe animations.\n   * @dynamic\n   */\n  private static styleTag: HTMLStyleElement|null = null;\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number { return this._diameter; }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    if (!this._fallbackAnimation && !MatProgressSpinner.diameters.has(this._diameter)) {\n      this._attachStyleNode();\n    }\n  }\n  private _diameter = BASE_SIZE;\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n\n    super(_elementRef);\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    _elementRef.nativeElement.classList.add(animationClass);\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this.diameter * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    let styleTag = MatProgressSpinner.styleTag;\n\n    if (!styleTag) {\n      styleTag = this._document.createElement('style');\n      this._document.head.appendChild(styleTag);\n      MatProgressSpinner.styleTag = styleTag;\n    }\n\n    if (styleTag && styleTag.sheet) {\n      (styleTag.sheet as CSSStyleSheet).insertRule(this._getAnimationText(), 0);\n    }\n\n    MatProgressSpinner.diameters.add(this.diameter);\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n}\n\n\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any) {\n    super(elementRef, platform, document);\n    this.mode = 'indeterminate';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  constructor(\n    /** The MatRadioButton that emits the change event. */\n    public source: MatRadioButton,\n    /** The value of the MatRadioButton. */\n    public value: any) {}\n}\n\n\n// Boilerplate for applying mixins to MatRadioGroup.\n/** @docs-private */\nexport class MatRadioGroupBase { }\nexport const _MatRadioGroupMixinBase = mixinDisabled(MatRadioGroupBase);\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n  inputs: ['disabled'],\n})\nexport class MatRadioGroup extends _MatRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n  /**\n   * Selected value for group. Should equal the value of the selected radio button if there *is*\n   * a corresponding radio button with a matching value. If there is *not* such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n  set labelPosition(v) {\n    this._labelPosition = v === 'before' ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /** Value of the radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value !== newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /** Whether the radio button is selected. */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n    if (this._radios && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value === radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new MatRadioChange(this._selected!, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nexport class MatRadioButtonBase {\n  // Since the disabled property is manually defined for the MatRadioButton and isn't set up in\n  // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n  // defined to properly work.\n  disabled: boolean;\n\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nexport const _MatRadioButtonMixinBase =\n    mixinColor(mixinDisableRipple(mixinTabIndex(MatRadioButtonBase)), 'accent');\n\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['color', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, CanDisableRipple, HasTabIndex {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n    if (this._checked !== newCheckedState) {\n      this._checked = newCheckedState;\n      if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value !== value) {\n      this._value = value;\n      if (this.radioGroup !== null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value === value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio. */\n  private _value: any = null;\n\n  /** The child ripple instance. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  /** Reference to the current focus ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Unregister function for _radioDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id !== this.id && name === this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    this.change.emit(new MatRadioChange(this, this._value));\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      if (this.radioGroup) {\n        this.radioGroup._touch();\n      }\n\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material drawers. */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    state('open, open-instant', style({\n      'transform': 'translate3d(0, 0, 0)',\n      'visibility': 'visible',\n    })),\n    state('void', style({\n      // Avoids the shadow showing up when closed in SSR.\n      'box-shadow': 'none',\n      'visibility': 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelect, MatSelectTrigger} from './select';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by MatTooltip. */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('150ms cubic-bezier(0.0, 0.0, 0.2, 1)')),\n    transition('* => hidden', animate('150ms cubic-bezier(0.4, 0.0, 1, 1)')),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatTooltip, TooltipComponent} from './tooltip';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable({providedIn: 'root'})\nexport class MatPaginatorIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel: string = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel: string = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel: string = 'Previous page';\n\n  /** A label for the button that moves to the first page. */\n  firstPageLabel: string = 'First page';\n\n  /** A label for the button that moves to the last page. */\n  lastPageLabel: string = 'Last page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatPaginatorIntl} from './paginator-intl';\nimport {HasInitialized, mixinInitialized} from '@angular/material/core';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /**\n   * Index of the page that was selected previously.\n   * @deletion-target 7.0.0 To be made into a required property.\n   */\n  previousPageIndex?: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n// Boilerplate for applying mixins to MatPaginator.\n/** @docs-private */\nexport class MatPaginatorBase {}\nexport const _MatPaginatorBase = mixinInitialized(MatPaginatorBase);\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatPaginator extends _MatPaginatorBase implements OnInit, OnDestroy, HasInitialized {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(value: number) {\n    this._pageIndex = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  _pageIndex: number = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(value: number) {\n    this._length = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  _length: number = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(value: number) {\n    this._pageSize = coerceNumberProperty(value);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(value: number[]) {\n    this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Whether to hide the page size selection UI from the user. */\n  @Input()\n  get hidePageSize(): boolean { return this._hidePageSize; }\n  set hidePageSize(value: boolean) {\n    this._hidePageSize = coerceBooleanProperty(value);\n  }\n  private _hidePageSize = false;\n\n\n  /** Whether to show the first/last buttons UI to the user. */\n  @Input()\n  get showFirstLastButtons(): boolean { return this._showFirstLastButtons; }\n  set showFirstLastButtons(value: boolean) {\n    this._showFirstLastButtons = coerceBooleanProperty(value);\n  }\n  private _showFirstLastButtons = false;\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() readonly page: EventEmitter<PageEvent> = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n    this._markInitialized();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage(): void {\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex++;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage(): void {\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex--;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the first page if not already there. */\n  firstPage(): void {\n    // hasPreviousPage being false implies at the start\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = 0;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the last page if not already there. */\n  lastPage(): void {\n    // hasNextPage being false implies at the end\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = this.getNumberOfPages();\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage(): boolean {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage(): boolean {\n    const numberOfPages = this.getNumberOfPages();\n    return this.pageIndex < numberOfPages && this.pageSize != 0;\n  }\n\n  /** Calculate the number of pages */\n  getNumberOfPages(): number {\n    return Math.ceil(this.length / this.pageSize) - 1;\n  }\n\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    const previousPageIndex = this.pageIndex;\n\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n    this.pageSize = pageSize;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) === -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent(previousPageIndex: number) {\n    this.page.emit({\n      previousPageIndex,\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Input,\n  ViewEncapsulation\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\n\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nexport class MatProgressBarBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\nexport const _MatProgressBarMixinBase = mixinColor(MatProgressBarBase, 'primary');\n\n/** Counter used to generate unique IDs for progress bars. */\nlet progressbarId = 0;\n\n/**\n * `<mat-progress-bar>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n    'class': 'mat-progress-bar',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor {\n\n  constructor(public _elementRef: ElementRef) {\n    super(_elementRef);\n  }\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) { this._value = clamp(v || 0); }\n  private _value: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue(): number { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n  private _bufferValue: number = 0;\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** The id of the progress bar. */\n  progressbarId = `mat-progress-bar-${progressbarId++}`;\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    const scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode === 'buffer') {\n      const scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager, FocusOrigin} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, LEFT_ARROW, RIGHT_ARROW, DOWN_ARROW, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, switchMap, take} from 'rxjs/operators';\nimport {matMenuAnimations} from './menu-animations';\nimport {MatMenuContent} from './menu-content';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n\n  /** Class to be applied to the menu's backdrop. */\n  backdropClass: string;\n\n  /** Whether the menu has a backdrop. */\n  hasBackdrop?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options', {\n      providedIn: 'root',\n      factory: () => ({\n        overlapTrigger: true,\n        xPosition: 'after',\n        yPosition: 'below',\n        backdropClass: 'cdk-overlay-transparent-backdrop',\n      })\n    });\n\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 2;\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  exportAs: 'matMenu'\n})\nexport class MatMenu implements OnInit, AfterContentInit, MatMenuPanel, OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter' = 'void';\n\n  /** Emits whenever an animation on the menu completes. */\n  _animationDone = new Subject<void>();\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Class to be added to the backdrop element. */\n  @Input() backdropClass: string = this._defaultOptions.backdropClass;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition(): MenuPositionX { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition(): MenuPositionY { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) templateRef: TemplateRef<any>;\n\n  /** List of the items inside of a menu. */\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\n\n  /**\n   * Menu content that will be rendered lazily.\n   * @docs-private\n   */\n  @ContentChild(MatMenuContent) lazyContent: MatMenuContent;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  get overlapTrigger(): boolean { return this._overlapTrigger; }\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /** Whether the menu has a backdrop. */\n  @Input()\n  get hasBackdrop(): boolean | undefined { return this._hasBackdrop; }\n  set hasBackdrop(value: boolean | undefined) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n  private _hasBackdrop: boolean | undefined = this._defaultOptions.hasBackdrop;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    if (classes && classes.length) {\n      this._classList = classes.split(' ').reduce((obj: any, className: string) => {\n        obj[className] = true;\n        return obj;\n      }, {});\n\n      this._elementRef.nativeElement.className = '';\n      this.setPositionClasses();\n    }\n  }\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   * @deletion-target 7.0.0\n   */\n  @Input()\n  get classList(): string { return this.panelClass; }\n  set classList(classes: string) { this.panelClass = classes; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() readonly closed: EventEmitter<void | 'click' | 'keydown' | 'tab'> =\n      new EventEmitter<void | 'click' | 'keydown' | 'tab'>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   * @deletion-target 7.0.0\n   */\n  @Output() close = this.closed;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngOnInit() {\n    this.setPositionClasses();\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatMenuItem>(this.items).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.close.emit('tab'));\n  }\n\n  ngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    if (this.items) {\n      return this.items.changes.pipe(\n        startWith(this.items),\n        switchMap(items => merge(...items.map(item => item._hovered)))\n      );\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this._hovered()));\n  }\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n\n    switch (keyCode) {\n      case ESCAPE:\n        this.closed.emit('keydown');\n        event.stopPropagation();\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      default:\n        if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n          this._keyManager.setFocusOrigin('keyboard');\n        }\n\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n    if (this.lazyContent) {\n      this._ngZone.onStable.asObservable()\n        .pipe(take(1))\n        .subscribe(() => this._keyManager.setFocusOrigin(origin).setFirstItemActive());\n    } else {\n      this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n    }\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * It's necessary to set position-based classes to ensure the menu panel animation\n   * folds out from the correct direction.\n   */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    this._classList['mat-menu-before'] = posX === 'before';\n    this._classList['mat-menu-after'] = posX === 'after';\n    this._classList['mat-menu-above'] = posY === 'above';\n    this._classList['mat-menu-below'] = posY === 'below';\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    // @deletion-target 7.0.0 Combine with _resetAnimation.\n    this._panelAnimationState = 'enter';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    // @deletion-target 7.0.0 Combine with _startAnimation.\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone() {\n    this._animationDone.next();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin, isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {filter, take} from 'rxjs/operators';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {Subscription, merge, of as observableOf} from 'rxjs';\nimport {MatMenu} from './menu-directive';\nimport {throwMatMenuMissingError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy', {\n      providedIn: 'root',\n      factory: () => {\n        const overlay = inject(Overlay);\n        return () => overlay.scrollStrategies.reposition();\n      }\n    });\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closeSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  private _openedByMouse: boolean = false;\n\n  /**\n   * @deprecated\n   * @deletion-target 7.0.0\n   */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel {\n    return this.menu;\n  }\n\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor') menu: MatMenuPanel;\n\n  /** Data to be passed along to any lazily-rendered content. */\n  @Input('matMenuTriggerData') menuData: any;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() readonly menuOpened: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   * @deletion-target 7.0.0\n   */\n  @Output() readonly onMenuOpen: EventEmitter<void> = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() readonly menuClosed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   * @deletion-target 7.0.0\n   */\n  @Output() readonly onMenuClose: EventEmitter<void> = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _parentMenu: MatMenu,\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality,\n              // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n              // @deletion-target 7.0.0\n              private _focusMonitor?: FocusMonitor) {\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n\n    this.menu.close.subscribe(reason => {\n      this._destroyMenu();\n\n      // If a click closed the menu, we should close the entire chain of nested menus.\n      if ((reason === 'click' || reason === 'tab') && this._parentMenu) {\n        this._parentMenu.closed.emit(reason);\n      }\n    });\n\n    if (this.triggersSubmenu()) {\n      // Subscribe to changes in the hovered item in order to toggle the panel.\n      this._hoverSubscription = this._parentMenu._hovered()\n          .pipe(filter(active => active === this._menuItemInstance && !active.disabled))\n          .subscribe(() => {\n            this._openedByMouse = true;\n            this.openMenu();\n          });\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._cleanUpSubscriptions();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (this._menuOpen) {\n      return;\n    }\n\n    this._createOverlay().attach(this._portal);\n\n    if (this.menu.lazyContent) {\n      this.menu.lazyContent.attach(this.menuData);\n    }\n\n    this._closeSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n    this._initMenu();\n\n    if (this.menu instanceof MatMenu) {\n      this.menu._startAnimation();\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n  focus(origin: FocusOrigin = 'program') {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._element.nativeElement, origin);\n    } else {\n      this._element.nativeElement.focus();\n    }\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (!this._overlayRef || !this.menuOpen) {\n      return;\n    }\n\n    const menu = this.menu;\n\n    this._resetMenu();\n    this._closeSubscription.unsubscribe();\n    this._overlayRef.detach();\n\n    if (menu instanceof MatMenu) {\n      menu._resetAnimation();\n\n      if (menu.lazyContent) {\n        // Wait for the exit animation to finish before detaching the content.\n        menu._animationDone\n          .pipe(take(1))\n          .subscribe(() => menu.lazyContent!.detach());\n      }\n    } else if (menu.lazyContent) {\n      menu.lazyContent.detach();\n    }\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n    this.menu.focusFirstItem(this._openedByMouse ? 'mouse' : 'program');\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  /**\n   * This method resets the menu when it's closed, most importantly restoring\n   * focus to the menu trigger if the menu was opened via the keyboard.\n   */\n  private _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (!this._openedByMouse) {\n      // Note that the focus style will show up both for `program` and\n      // `keyboard` so we don't have to specify which one it is.\n      this.focus();\n    } else if (!this.triggersSubmenu()) {\n      this.focus('mouse');\n    }\n\n    this._openedByMouse = false;\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as FlexibleConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getPosition(),\n      hasBackdrop: this.menu.hasBackdrop == null ? !this.triggersSubmenu() : this.menu.hasBackdrop,\n      backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n      direction: this.dir,\n      scrollStrategy: this._scrollStrategy()\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: FlexibleConnectedPositionStrategy): void {\n    position.positionChanges.subscribe(change => {\n      const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n      const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n      this.menu.setPositionClasses(posX, posY);\n    });\n  }\n\n  /**\n   * This method builds the position strategy for the overlay, so the menu is properly connected\n   * to the trigger.\n   * @returns ConnectedPositionStrategy\n   */\n  private _getPosition(): FlexibleConnectedPositionStrategy {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    return this._overlay.position()\n        .flexibleConnectedTo(this._element)\n        .withPositions([\n          {originX, originY, overlayX, overlayY, offsetY},\n          {originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY},\n          {\n            originX,\n            originY: originFallbackY,\n            overlayX,\n            overlayY: overlayFallbackY,\n            offsetY: -offsetY\n          },\n          {\n            originX: originFallbackX,\n            originY: originFallbackY,\n            overlayX: overlayFallbackX,\n            overlayY: overlayFallbackY,\n            offsetY: -offsetY\n          }\n        ]);\n  }\n\n  /** Cleans up the active subscriptions. */\n  private _cleanUpSubscriptions(): void {\n    this._closeSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMenu ? this._parentMenu.close : observableOf();\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      this._openedByMouse = true;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatMenuContent} from './menu-content';\nimport {MatMenu} from './menu-directive';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuTrigger} from './menu-trigger';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    MatRippleModule,\n    OverlayModule,\n  ],\n  exports: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent, MatCommonModule],\n  declarations: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent],\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  animateChild,\n  group,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n */\nexport const matSelectAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      transform: 'scaleY(0)',\n      minWidth: '100%',\n      opacity: 0\n    })),\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', group([\n      query('@fadeInContent', animateChild()),\n      animate('150ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n    ])),\n    transition('* => void', [\n      animate('250ms 100ms linear', style({opacity: 0}))\n    ])\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {SPACE, ENTER, HOME, END, UP_ARROW, DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  MatLine,\n  MatLineSetter,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Subscription} from 'rxjs';\n\n\n/** @docs-private */\nexport class MatSelectionListBase {}\nexport const _MatSelectionListMixinBase = mixinDisableRipple(mixinDisabled(MatSelectionListBase));\n\n/** @docs-private */\nexport class MatListOptionBase {}\nexport const _MatListOptionMixinBase = mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-focus]': '_hasFocus',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _selected = false;\n  private _disabled = false;\n\n  /** Whether the option has focus. */\n  _hasFocus: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text') _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Value of the option */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  constructor(private _element: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */\n              @Inject(forwardRef(() => MatSelectionList)) public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    // List options that are selected at initialization can't be reported properly to the form\n    // control. This is because it takes some time until the selection-list knows about all\n    // available options. Also it can happen that the ControlValueAccessor has an initial value\n    // that should be used instead. Deferring the value change report to the next tick ensures\n    // that the form control value is not being overwritten.\n    const wasSelected = this._selected;\n\n    Promise.resolve().then(() => {\n      if (this._selected || wasSelected) {\n        this.selected = true;\n        this._changeDetector.markForCheck();\n      }\n    });\n  }\n\n  ngAfterContentInit() {\n    // TODO: consider turning the setter into a function, it doesn't do anything as a class.\n    // tslint:disable-next-line:no-unused-expression\n    new MatLineSetter(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => this.selected = false);\n    }\n\n    this.selectionList._removeOptionFromList(this);\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? this._text.nativeElement.textContent : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n    }\n  }\n\n  _handleFocus() {\n    this._hasFocus = true;\n    this.selectionList._setFocusedOption(this);\n  }\n\n  _handleBlur() {\n    this._hasFocus = false;\n    this.selectionList._onTouched();\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. */\n  _setSelected(selected: boolean) {\n    if (selected === this._selected) {\n      return;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list',\n    '(focus)': 'focus()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\n    CanDisable, CanDisableRipple, AfterContentInit, ControlValueAccessor, OnDestroy {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** Tabindex of the selection list. */\n  @Input() tabIndex: number = 0;\n\n  /**\n   * Function used for comparing an option against the selected value when determining which\n   * options should appear as selected. The first argument is the value of an options. The second\n   * one is a value from the selected value. A boolean must be returned.\n   */\n  @Input() compareWith: (o1: any, o2: any) => boolean;\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Used for storing the values that were assigned before the options were initialized. */\n  private _tempValues: string[]|null;\n\n  private _modelChanges = Subscription.EMPTY;\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  constructor(private _element: ElementRef, @Attribute('tabindex') tabIndex: string) {\n    super();\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options)\n      .withWrap()\n      .withTypeAhead()\n      // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\n      // screenreader users, that allows reading the different options of the list.\n      .skipPredicate(() => false);\n\n    if (this._tempValues) {\n      this._setOptionsFromValues(this._tempValues);\n      this._tempValues = null;\n    }\n\n    // Sync external changes to the model back to the options.\n    this._modelChanges = this.selectedOptions.onChange!.subscribe(event => {\n      if (event.added) {\n        for (let item of event.added) {\n          item.selected = true;\n        }\n      }\n\n      if (event.removed) {\n        for (let item of event.removed) {\n          item.selected = false;\n        }\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this._modelChanges.unsubscribe();\n  }\n\n  /** Focuses the last active list option. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this.options.forEach(option => option._setSelected(true));\n    this._reportValueChange();\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this.options.forEach(option => option._setSelected(false));\n    this._reportValueChange();\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItemIndex(this._getOptionIndex(option));\n  }\n\n  /** Removes an option from the selection list and updates the active item. */\n  _removeOptionFromList(option: MatListOption) {\n    if (option._hasFocus) {\n      const optionIndex = this._getOptionIndex(option);\n\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.setPreviousItemActive();\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.setNextItemActive();\n      }\n    }\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n    const previousFocusIndex = manager.activeItemIndex;\n\n    switch (keyCode) {\n      case SPACE:\n      case ENTER:\n        if (!this.disabled) {\n          this._toggleSelectOnFocusedOption();\n\n          // Always prevent space from scrolling the page since the list has focus\n          event.preventDefault();\n        }\n        break;\n      case HOME:\n      case END:\n        keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        event.preventDefault();\n        break;\n      default:\n        manager.onKeydown(event);\n    }\n\n    if ((keyCode === UP_ARROW || keyCode === DOWN_ARROW) && event.shiftKey &&\n        manager.activeItemIndex !== previousFocusIndex) {\n      this._toggleSelectOnFocusedOption();\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    if (this.options) {\n      this._onChange(this._getSelectedOptionValues());\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    } else {\n      this._tempValues = values;\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    if (this.options) {\n      this.options.forEach(option => option.disabled = isDisabled);\n    }\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values\n      .map(value => {\n        return this.options.find(option =>\n            this.compareWith ? this.compareWith(option.value, value) : option.value === value);\n      })\n      .filter(Boolean)\n      .forEach(option => option!._setSelected(true));\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the selected state of the currently focused option. */\n  private _toggleSelectOnFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n      }\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  TemplateRef,\n  ComponentFactoryResolver,\n  ApplicationRef,\n  Injector,\n  ViewContainerRef,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {TemplatePortal, DomPortalOutlet} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\n\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\n@Directive({\n  selector: 'ng-template[matMenuContent]'\n})\nexport class MatMenuContent implements OnDestroy {\n  private _portal: TemplatePortal<any>;\n  private _outlet: DomPortalOutlet;\n\n  constructor(\n    private _template: TemplateRef<any>,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n    private _injector: Injector,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) private _document: any) {}\n\n  /**\n   * Attaches the content with a particular context.\n   * @docs-private\n   */\n  attach(context: any = {}) {\n    if (!this._portal) {\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n    }\n\n    this.detach();\n\n    if (!this._outlet) {\n      this._outlet = new DomPortalOutlet(this._document.createElement('div'),\n          this._componentFactoryResolver, this._appRef, this._injector);\n    }\n\n    const element: HTMLElement = this._template.elementRef.nativeElement;\n\n    // Because we support opening the same menu from different triggers (which in turn have their\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n    // risk it staying attached to a pane that's no longer in the DOM.\n    element.parentNode!.insertBefore(this._outlet.outletElement, element);\n    this._portal.attach(this._outlet, context);\n  }\n\n  /**\n   * Detaches the content.\n   * @docs-private\n   */\n  detach() {\n    if (this._portal.isAttached) {\n      this._portal.detach();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._outlet) {\n      this._outlet.dispose();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  query,\n  group,\n  sequence,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: AnimationTriggerMetadata;\n  readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [\n    state('void', style({\n      opacity: 0,\n      // This starts off from 0.01, instead of 0, because there's an issue in the Angular animations\n      // as of 4.2, which causes the animation to be skipped if it starts from 0.\n      transform: 'scale(0.01, 0.01)'\n    })),\n    transition('void => enter', sequence([\n      query('.mat-menu-content', style({opacity: 0})),\n      animate('100ms linear', style({opacity: 1, transform: 'scale(1, 0.5)'})),\n      group([\n        query('.mat-menu-content', animate('400ms cubic-bezier(0.55, 0, 0.55, 0.2)',\n          style({opacity: 1})\n        )),\n        animate('300ms cubic-bezier(0.25, 0.8, 0.25, 1)', style({transform: 'scale(1, 1)'})),\n      ])\n    ])),\n    transition('* => void', animate('150ms 50ms linear', style({opacity: 0})))\n  ]),\n\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n    // TODO(crisbeto): this is inside the `transformMenu`\n    // now. Remove next time we do breaking changes.\n    state('showing', style({opacity: 1})),\n    transition('void => *', [\n      style({opacity: 0}),\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const transformMenu = matMenuAnimations.transformMenu;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nexport class MatMenuItemBase {}\nexport const _MatMenuItemMixinBase = mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    'role': 'menuitem',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n    '(click)': '_checkDisabled($event)',\n    '(mouseenter)': '_handleMouseEnter()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n\n  private _document: Document;\n\n  /** Stream that emits when the menu item is hovered. */\n  readonly _hovered: Subject<MatMenuItem> = new Subject<MatMenuItem>();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(\n    private _elementRef: ElementRef,\n    @Inject(DOCUMENT) document?: any,\n    private _focusMonitor?: FocusMonitor) {\n\n    // @deletion-target 7.0.0 make `_focusMonitor` and `document` required params.\n    super();\n\n    if (_focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      _focusMonitor.monitor(this._getHostElement(), false);\n    }\n\n    this._document = document;\n  }\n\n  /** Focuses the menu item. */\n  focus(origin: FocusOrigin = 'program'): void {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin);\n    } else {\n      this._getHostElement().focus();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._getHostElement());\n    }\n\n    this._hovered.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  _handleMouseEnter() {\n    this._hovered.next(this);\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === textNodeType) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, MatLine, MatLineSetter, mixinDisableRipple} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nexport class MatListBase {}\nexport const _MatListMixinBase = mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nexport class MatListItemBase {}\nexport const _MatListItemMixinBase = mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {'class': 'mat-list'},\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    // @deletion-target 7.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\n    '[class.mat-list-item-avatar]': '_avatar',\n    '[class.mat-list-item-with-avatar]': '_avatar',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple {\n  private _isNavList: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n\n  constructor(private _element: ElementRef,\n              @Optional() private _navList: MatNavList) {\n    super();\n    this._isNavList = !!_navList;\n  }\n\n  ngAfterContentInit() {\n    // TODO: consider turning the setter into a function, it doesn't do anything as a class.\n    // tslint:disable-next-line:no-unused-expression\n    new MatLineSetter(this._lines, this._element);\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isNavList || this.disableRipple || this._navList.disableRipple;\n  }\n\n  _handleFocus() {\n    this._element.nativeElement.classList.add('mat-list-item-focus');\n  }\n\n  _handleBlur() {\n    this._element.nativeElement.classList.remove('mat-list-item-focus');\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {HttpClient} from '@angular/common/http';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n} from '@angular/core';\nimport {DomSanitizer, SafeResourceUrl, SafeHtml} from '@angular/platform-browser';\nimport {forkJoin, Observable, of as observableOf, throwError as observableThrow} from 'rxjs';\nimport {catchError, finalize, map, share, tap} from 'rxjs/operators';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeUrlError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeLiteralError(literal: SafeHtml): Error {\n  return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n               `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  url: SafeResourceUrl | null;\n  svgElement: SVGElement | null;\n\n  constructor(url: SafeResourceUrl);\n  constructor(svgElement: SVGElement);\n  constructor(data: SafeResourceUrl | SVGElement) {\n    // Note that we can't use `instanceof SVGElement` here,\n    // because it'll break during server-side rendering.\n    if (!!(data as any).nodeName) {\n      this.svgElement = data as SVGElement;\n    } else {\n      this.url = data as SafeResourceUrl;\n    }\n  }\n}\n\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable({providedIn: 'root'})\nexport class MatIconRegistry {\n  private _document: Document;\n\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document: any) {\n      this._document = document;\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n\n  /**\n   * Registers an icon using an HTML string in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteral(iconName: string, literal: SafeHtml): this {\n    return this.addSvgIconLiteralInNamespace('', iconName, literal);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon using an HTML string in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteralInNamespace(namespace: string, iconName: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._createSvgElementForSingleIcon(sanitizedLiteral);\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the default namespace.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteral(literal: SafeHtml): this {\n    return this.addSvgIconSetLiteralInNamespace('', literal);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteralInNamespace(namespace: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._svgElementFromString(sanitizedLiteral);\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the `<mat-icon>` element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    const cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg)),\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg)),\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: any): Observable<SVGElement | null> => {\n            let url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the combined Observable won't\n            // necessarily fail.\n            console.log(`Loading icon set URL: ${url} failed: ${err}`);\n            return observableOf(null);\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // If the SVG for this icon set has already been parsed, do nothing.\n    if (config.svgElement) {\n      return observableOf(config.svgElement);\n    }\n\n    return this._fetchUrl(config.url).pipe(map(svgText => {\n      // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n      // only needs to occur if the cache is yet unset.\n      if (!config.svgElement) {\n        config.svgElement = this._svgElementFromString(svgText);\n      }\n\n      return config.svgElement;\n    }));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    const iconSource = iconSet.querySelector('#' + iconName);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.removeAttribute('id');\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    const div = this._document.createElement('DIV');\n    div.innerHTML = str;\n    const svg = div.querySelector('svg') as SVGElement;\n\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n\n    return svg;\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    let svg = this._svgElementFromString('<svg></svg>');\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl | null): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    if (safeUrl == null) {\n      throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finalize` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share(),\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n\n  /**\n   * Registers an icon config by name in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param iconName Name under which to register the config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconConfig(namespace: string, iconName: string, config: SvgIconConfig): this {\n    this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n    return this;\n  }\n\n  /**\n   * Registers an icon set config in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconSetConfig(namespace: string, config: SvgIconConfig): this {\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n\n    return this;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), DOCUMENT as InjectionToken<any>],\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nexport class MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatIconMixinBase = mixinColor(MatIconBase);\n\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon',\n    '[class.mat-icon-inline]': 'inline',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, CanColor {\n\n  /**\n   * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n   * the element the icon is contained in.\n   */\n  @Input()\n  get inline(): boolean {\n    return this._inline;\n  }\n  set inline(inline: boolean) {\n    this._inline = coerceBooleanProperty(inline);\n  }\n  private _inline: boolean = false;\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  constructor(\n      elementRef: ElementRef,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   `'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)`\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    if (changes.svgIcon) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    const childCount = layoutElement.childNodes.length;\n\n    // Remove existing child nodes and add the new SVG element. Note that we can't\n    // use innerHTML, because IE will throw if the element has a data binding.\n    for (let i = 0; i < childCount; i++) {\n      layoutElement.removeChild(layoutElement.childNodes[i]);\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\nimport {ICON_REGISTRY_PROVIDER} from './icon-registry';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n  providers: [ICON_REGISTRY_PROVIDER],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onBlur()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements AfterContentInit, ControlValueAccessor, OnDestroy,\n    Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    this.registerDatepicker(value);\n  }\n  _datepicker: MatDatepicker<D>;\n\n  private registerDatepicker(value: MatDatepicker<D>) {\n    if (value) {\n      this._datepicker = value;\n      this._datepicker._registerInput(this);\n    }\n  }\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(value: (date: D | null) => boolean) {\n    this._dateFilter = value;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    const oldDate = this.value;\n    this._value = value;\n    this._formatValue(value);\n\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    const element = this._elementRef.nativeElement;\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n\n    // We need to null check the `blur` method, because it's undefined during SSR.\n    if (newValue && element.blur) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      element.blur();\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D | null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngAfterContentInit() {\n    if (this._datepicker) {\n      this._datepickerSubscription = this._datepicker._selectedChanged.subscribe((selected: D) => {\n        this.value = selected;\n        this._cvaOnChange(selected);\n        this._onTouched();\n        this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n        this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** @docs-private */\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * @deprecated\n   * @deletion-target 7.0.0 Use `getConnectedOverlayOrigin` instead\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this.getConnectedOverlayOrigin();\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (event.altKey && event.keyCode === DOWN_ARROW) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n    this._value = date;\n    this._cvaOnChange(date);\n    this._valueChange.emit(date);\n    this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /** Returns the palette used by the input's form field, if any. */\n  _getThemePalette() {\n    return this._formField ? this._formField.color : undefined;\n  }\n\n  /** Handles blur events on the input. */\n  _onBlur() {\n    // Reformat the input only if we have a valid value.\n    if (this.value) {\n      this._formatValue(this.value);\n    }\n\n    this._onTouched();\n  }\n\n  /** Formats a value and sets it on the input element. */\n  private _formatValue(value: D | null) {\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class MatDatepickerToggleIcon {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'class': 'mat-datepicker-toggle',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n    '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n    '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon) _customIcon: MatDatepickerToggleIcon;\n\n  constructor(public _intl: MatDatepickerIntl, private _changeDetectorRef: ChangeDetectorRef) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.datepicker) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatCalendar, MatCalendarHeader} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {MatDatepicker, MatDatepickerContent} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    OverlayModule,\n    A11yModule,\n    PortalModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  providers: [\n    MatDatepickerIntl,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n    MatCalendarHeader,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input()\n  get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [MatDivider, MatCommonModule],\n  declarations: [MatDivider],\n})\nexport class MatDividerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * The display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the reset of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  SimpleChanges,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {filter, startWith, take} from 'rxjs/operators';\nimport {MatAccordion} from './accordion';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\n\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  }\n})\nexport class MatExpansionPanel extends CdkAccordionItem\n    implements AfterContentInit, OnChanges, OnDestroy {\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n  private _hideToggle = false;\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordion;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent) _lazyContent: MatExpansionPanelContent;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  constructor(@Optional() accordion: MatAccordion,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n  }\n\n  /** Whether the expansion indicator should be hidden. */\n  _getHideToggle(): boolean {\n    if (this.accordion) {\n      return this.accordion.hideToggle;\n    }\n    return this.hideToggle;\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._inputChanges.complete();\n  }\n\n  _bodyAnimation(event: AnimationEvent) {\n    const classList = event.element.classList;\n    const cssClass = 'mat-expanded';\n    const {phaseName, toState} = event;\n\n    // Toggle the body's `overflow: hidden` class when closing starts or when expansion ends in\n    // order to prevent the cases where switching too early would cause the animation to jump.\n    // Note that we do it directly on the DOM element to avoid the slight delay that comes\n    // with doing it via change detection.\n    if (phaseName === 'done' && toState === 'expanded') {\n      classList.add(cssClass);\n    } else if (phaseName === 'start' && toState === 'collapsed') {\n      classList.remove(cssClass);\n    }\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, Subscription} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanel} from './expansion-panel';\n\n\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'panel.disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n    @Host() public panel: MatExpansionPanel,\n    private _element: ElementRef,\n    private _focusMonitor: FocusMonitor,\n    private _changeDetectorRef: ChangeDetectorRef) {\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to  subscribe and trigger change detection manually.\n    this._parentChangeSubscription = merge(\n      panel.opened,\n      panel.closed,\n      panel._inputChanges.pipe(filter(changes => !!(changes.hideToggle || changes.disabled)))\n    )\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    _focusMonitor.monitor(_element.nativeElement);\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    this.panel.toggle();\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        event.preventDefault();\n        this._toggle();\n        break;\n      default:\n        return;\n    }\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n}\n\n/**\n * `<mat-panel-description>`\n *\n * This direction is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host : {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * `<mat-panel-title>`\n *\n * This direction is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host : {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanel, MatExpansionPanelActionRow} from './expansion-panel';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatLine, MatLineSetter} from '@angular/material/core';\nimport {coerceToNumber} from './grid-list-measure';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(private _element: ElementRef) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value: number) { this._rowspan = coerceToNumber(value); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value: number) { this._colspan = coerceToNumber(value); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    this._element.nativeElement.style[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridTileText implements AfterContentInit {\n  /**\n   *  Helper that watches the number of lines in a text area and sets\n   * a class on the host element that matches the line count.\n   */\n  _lineSetter: MatLineSetter;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef) {}\n\n  ngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {QueryList} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    let lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  constructor(numColumns: number, tiles: QueryList<MatGridTile>) {\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    let gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile.\n    } while (gapEndIndex - gapStartIndex < tileCols);\n\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'rtl' ? 'right' : 'left';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number);\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList);\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height. */\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['paddingBottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('marginTop', null);\n      tile._setStyle('paddingTop', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string { return `calc(${exp})`; }\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return (value.match(/px|em|rem/)) ? value : value + 'px';\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  coerceToString,\n  coerceToNumber,\n} from './grid-list-measure';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridList implements OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef, @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols(): number { return this._cols; }\n  set cols(value: number) { this._cols = coerceToNumber(value); }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize(): string { return this._gutter; }\n  set gutterSize(value: string) { this._gutter = coerceToString(value); }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  set rowHeight(value: string | number) {\n    const newValue = coerceToString(value);\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    const tracker = new TileCoordinator(this.cols, this._tiles);\n    const direction = this._dir ? this._dir.value : 'ltr';\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    this._tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      this._element.nativeElement.style[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new year is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody;\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n    this._focusActiveCell();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\n    let activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n        this._yearSelected(this._dateAdapter.getYear(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  _getActiveCell(): number {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  private _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _shouldEnableYear(year: number) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null ||\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n      return false;\n    }\n\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody;\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n    this._focusActiveCell();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    const normalizedDate =\n          this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    this.monthSelected.emit(normalizedDate);\n\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n        this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  private _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (month === undefined || month === null ||\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentPortal, ComponentType, Portal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView, yearsPerPage} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n/** Default header for MatCalendar */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar-header',\n  templateUrl: 'calendar-header.html',\n  exportAs: 'matCalendarHeader',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarHeader<D> {\n  constructor(private _intl: MatDatepickerIntl,\n              @Inject(forwardRef(() => MatCalendar)) public calendar: MatCalendar<D>,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    this.calendar.stateChanges.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  /** The label for the current calendar view. */\n  get periodButtonText(): string {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter\n          .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\n              .toLocaleUpperCase();\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYearName(this.calendar.activeDate);\n    }\n    const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n    const lastYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  get periodButtonLabel(): string {\n    return this.calendar.currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the the previous button. */\n  get prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** The label for the the next button. */\n  get nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** Handles user clicks on the period label. */\n  currentPeriodClicked(): void {\n    this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  previousClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage\n            );\n  }\n\n  /** Handles user clicks on the next button. */\n  nextClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate,\n                    this.calendar.currentView == 'year' ? 1 : yearsPerPage\n            );\n  }\n\n  /** Whether the previous period button is enabled. */\n  previousEnabled(): boolean {\n    if (!this.calendar.minDate) {\n      return true;\n    }\n    return !this.calendar.minDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  nextEnabled(): boolean {\n    return !this.calendar.maxDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n}\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, OnDestroy, OnChanges {\n  /** An input indicating the type of the header component, if set. */\n  @Input() headerComponent: ComponentType<any>;\n\n  /** A portal containing the header component type for this calendar. */\n  _calendarHeaderPortal: Portal<any>;\n\n  private _intlChanges: Subscription;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView) multiYearView: MatMultiYearView<D>;\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get activeDate(): D { return this._clampedActiveDate; }\n  set activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n    this.stateChanges.next();\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  currentView: 'month' | 'year' | 'multi-year';\n\n  /**\n   * Emits whenever there is a state change that the header may need to respond to.\n   */\n  stateChanges = new Subject<void>();\n\n  constructor(_intl: MatDatepickerIntl,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => {\n      changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    });\n  }\n\n  ngAfterContentInit() {\n    this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || MatCalendarHeader);\n\n    this.activeDate = this.startAt || this._dateAdapter.today();\n    this.currentView = this.startView;\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n    this.stateChanges.complete();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change = changes.minDate || changes.maxDate || changes.dateFilter;\n\n    if (change && !change.firstChange) {\n      const view = this.monthView || this.yearView || this.multiYearView;\n\n      if (view) {\n        view._init();\n      }\n    }\n\n    this.stateChanges.next();\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles year/month selection in the multi-year/year views. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this.activeDate = date;\n    this.currentView = view;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n  group,\n  query,\n  animateChild,\n} from '@angular/animations';\n\n/** Animations used by the Material datepicker. */\nexport const matDatepickerAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n  /** Transforms the height of the datepicker's calendar. */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({opacity: 0, transform: 'scale(1, 0)'})),\n    state('enter', style({opacity: 1, transform: 'scale(1, 1)'})),\n    transition('void => enter', group([\n      query('@fadeInCalendar', animateChild()),\n      animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n    ])),\n    transition('* => void', animate('100ms linear', style({opacity: 0})))\n  ]),\n\n  /** Fades in the content of the calendar. */\n  fadeInCalendar: trigger('fadeInCalendar', [\n    state('void', style({opacity: 0})),\n    state('enter', style({opacity: 1})),\n    transition('void => *', animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {take, filter} from 'rxjs/operators';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, DateAdapter, mixinColor, ThemePalette} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {merge, Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatCalendar} from './calendar';\nimport {matDatepickerAnimations} from './datepicker-animations';\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy', {\n      providedIn: 'root',\n      factory: () => {\n        const overlay = inject(Overlay);\n        return () => overlay.scrollStrategies.reposition();\n      }\n    });\n\n// Boilerplate for applying mixins to MatDatepickerContent.\n/** @docs-private */\nexport class MatDatepickerContentBase {\n  constructor(public _elementRef: ElementRef) { }\n}\nexport const _MatDatepickerContentMixinBase = mixinColor(MatDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[@transformPanel]': '\"enter\"',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n    '[class.mat-datepicker-content-above]': '_isAbove',\n  },\n  animations: [\n    matDatepickerAnimations.transformPanel,\n    matDatepickerAnimations.fadeInCalendar,\n  ],\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color'],\n})\nexport class MatDatepickerContent<D> extends _MatDatepickerContentMixinBase\n  implements AfterContentInit, CanColor, OnInit, OnDestroy {\n\n  /** Subscription to changes in the overlay's position. */\n  private _positionChange: Subscription|null;\n\n  /** Reference to the internal calendar component. */\n  @ViewChild(MatCalendar) _calendar: MatCalendar<D>;\n\n  /** Reference to the datepicker that created the overlay. */\n  datepicker: MatDatepicker<D>;\n\n  /** Whether the datepicker is above or below the input. */\n  _isAbove: boolean;\n\n  constructor(\n    elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone) {\n    super(elementRef);\n  }\n\n  ngOnInit() {\n    if (!this.datepicker._popupRef || this._positionChange) {\n      return;\n    }\n\n    const positionStrategy =\n      this.datepicker._popupRef.getConfig().positionStrategy! as FlexibleConnectedPositionStrategy;\n\n    this._positionChange = positionStrategy.positionChanges.subscribe(change => {\n      const isAbove = change.connectionPair.overlayY === 'bottom';\n\n      if (isAbove !== this._isAbove) {\n        this._ngZone.run(() => {\n          this._isAbove = isAbove;\n          this._changeDetectorRef.markForCheck();\n        });\n      }\n    });\n  }\n\n  ngAfterContentInit() {\n    this._focusActiveCell();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  private _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._elementRef.nativeElement.querySelector('.mat-calendar-body-active').focus();\n      });\n    });\n  }\n\n  ngOnDestroy() {\n    if (this._positionChange) {\n      this._positionChange.unsubscribe();\n      this._positionChange = null;\n    }\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDatepicker<D> implements OnDestroy, CanColor {\n  /** An input indicating the type of the custom header component for the calendar, if set. */\n  @Input() calendarHeaderComponent: ComponentType<any>;\n\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' = 'month';\n\n  /** Color palette to use on the datepicker's calendar. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n        (this._datepickerInput ? this._datepickerInput._getThemePalette() : undefined);\n  }\n  set color(value: ThemePalette) {\n    this._color = value;\n  }\n  _color: ThemePalette;\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits selected year in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected month in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { value ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<MatDatepickerContent<D>> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** Reference to the component instantiated in popup mode. */\n  private _popupComponentRef: ComponentRef<MatDatepickerContent<D>> | null;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  /** Subscription to value changes in the associated input element. */\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  /** Emits new selected date when selected date changes. */\n  readonly _selectedChanged = new Subject<D>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n      this._popupComponentRef = null;\n    }\n  }\n\n  /** Selects the given date */\n  _select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this._selectedChanged.next(date);\n    }\n  }\n\n  /** Emits the selected year in multiyear view */\n  _selectYear(normalizedYear: D): void {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Emits selected month in year view */\n  _selectMonth(normalizedMonth: D): void {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    this._dialogRef = this._dialog.open<MatDatepickerContent<D>>(MatDatepickerContent, {\n      direction: this._getDirection(),\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n    this._setColor();\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal<MatDatepickerContent<D>>(MatDatepickerContent,\n                                                                          this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      this._popupRef.setDirection(this._getDirection());\n      this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\n      this._popupComponentRef.instance.datepicker = this;\n      this._setColor();\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._getDirection(),\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => {\n        // Closing on alt + up is only valid when there's an input associated with the datepicker.\n        return event.keyCode === ESCAPE ||\n               (this._datepickerInput && event.altKey && event.keyCode === UP_ARROW);\n      }))\n    ).subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .flexibleConnectedTo(this._datepickerInput.getPopupConnectionElementRef())\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8)\n      .withPush(false)\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom'\n        },\n        {\n          originX: 'end',\n          originY: 'bottom',\n          overlayX: 'end',\n          overlayY: 'top'\n        },\n        {\n          originX: 'end',\n          originY: 'top',\n          overlayX: 'end',\n          overlayY: 'bottom'\n        }\n      ]);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Passes the current theme color along to the calendar overlay. */\n  private _setColor(): void {\n    const color = this.color;\n    if (this._popupComponentRef) {\n      this._popupComponentRef.instance.color = color;\n    }\n    if (this._dialogRef) {\n      this._dialogRef.componentInstance.color = color;\n    }\n  }\n\n  /** Returns the layout direction of the datepicker. */\n  private _getDirection() {\n    return this._dir ? this._dir.value : 'ltr';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AnimationEvent} from '@angular/animations';\nimport {matDialogAnimations} from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.slideDialog],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    '[attr.id]': '_id',\n    '[attr.role]': '_config?.role',\n    '[attr.aria-labelledby]': '_config?.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config?.ariaLabel',\n    '[attr.aria-describedby]': '_config?.ariaDescribedBy || null',\n    '[@slideDialog]': '_state',\n    '(@slideDialog.start)': '_onAnimationStart($event)',\n    '(@slideDialog.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** The dialog configuration. */\n  _config: MatDialogConfig;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null = null;\n\n  /** ID for the container DOM element. */\n  _id: string;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any) {\n\n    super();\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Note that there is no focus method when rendering on the server.\n      if (this._elementRef.nativeElement.focus) {\n        // Move focus onto the dialog immediately in order to prevent the user from accidentally\n        // opening multiple dialogs at the same time. Needs to be async, because the element\n        // may not be focusable immediately.\n        Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n      }\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {GlobalPositionStrategy, OverlayRef} from '@angular/cdk/overlay';\nimport {Location} from '@angular/common';\nimport {Observable, Subject, Subscription, SubscriptionLike} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {DialogPosition} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private readonly _afterOpen = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private readonly _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private readonly _beforeClose = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  /** Subscription to changes in the user's location. */\n  private _locationChanges: SubscriptionLike = Subscription.EMPTY;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    public _containerInstance: MatDialogContainer,\n    location?: Location,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Pass the id along to the container.\n    _containerInstance._id = id;\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpen.next();\n      this._afterOpen.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._overlayRef.dispose();\n      this._locationChanges.unsubscribe();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose))\n      .subscribe(() => this.close());\n\n    if (location) {\n      // Close the dialog when the user goes forwards/backwards in history or when the location\n      // hash changes. Note that this usually doesn't include clicking on links (unless the user\n      // is using the `HashLocationStrategy`).\n      this._locationChanges = location.subscribe(() => {\n        if (this._containerInstance._config.closeOnNavigation) {\n          this.close();\n        }\n      });\n    }\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._beforeClose.next(dialogResult);\n      this._beforeClose.complete();\n      this._overlayRef.detachBackdrop();\n    });\n\n    this._containerInstance._startExitAnimation();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpen(): Observable<void> {\n    return this._afterOpen.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this._beforeClose.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = 'auto', height: string = 'auto'): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayContainer,\n  OverlayRef,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  ComponentRef,\n  Inject,\n  inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {defer, Observable, of as observableOf, Subject} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy', {\n      providedIn: 'root',\n      factory: () => {\n        const overlay = inject(Overlay);\n        return () => overlay.scrollStrategies.block();\n      }\n    });\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private readonly _afterAllClosedAtThisLevel = new Subject<void>();\n  private readonly _afterOpenAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpen : this._afterOpenAtThisLevel;\n  }\n\n  get _afterAllClosed() {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  readonly afterAllClosed: Observable<void> = defer<void>(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined)));\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() private _location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) private _scrollStrategy,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {}\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T> {\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef =\n        this._attachDialogContent<T>(componentOrTemplateRef, dialogContainer, overlayRef, config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpen.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    let i = this.openDialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      this.openDialogs[i].close();\n    }\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    let containerPortal = new ComponentPortal(MatDialogContainer, config.viewContainerRef);\n    let containerRef: ComponentRef<MatDialogContainer> = overlay.attach(containerPortal);\n    containerRef.instance._config = config;\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef = new MatDialogRef<T>(overlayRef, dialogContainer, this._location, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap();\n\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    injectionTokens\n      .set(MatDialogContainer, dialogContainer)\n      .set(MAT_DIALOG_DATA, config.data)\n      .set(MatDialogRef, dialogRef);\n\n    if (!userInjector || !userInjector.get(Directionality, null)) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string = 'Close dialog';\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes._matDialogClose || changes._matDialogCloseResult;\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent {}\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions {}\n\n\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MatDialog} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogActions,\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTextareaAutosize} from '@angular/cdk/text-field';\nimport {Directive, Input} from '@angular/core';\n\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deletion-target 7.0.0 deprecate in favor of `cdkTextareaAutosize`.\n */\n@Directive({\n  selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n  exportAs: 'matTextareaAutosize',\n  inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n  host: {\n    'class': 'cdk-textarea-autosize mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n    '(input)': '_noopInputHandler()',\n  },\n})\nexport class MatTextareaAutosize extends CdkTextareaAutosize {\n  @Input()\n  get matAutosizeMinRows(): number { return this.minRows; }\n  set matAutosizeMinRows(value: number) { this.minRows = value; }\n\n  @Input()\n  get matAutosizeMaxRows(): number { return this.maxRows; }\n  set matAutosizeMaxRows(value: number) { this.maxRows = value; }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Self,\n  NgZone,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {CanUpdateErrorState, ErrorStateMatcher, mixinErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs';\nimport {AutofillMonitor} from '@angular/cdk/text-field';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nexport class MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatInputMixinBase = mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput]`,\n  exportAs: 'matInput',\n  host: {\n    /**\n     * @deletion-target 7.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n     */\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[attr.placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[readonly]': 'readonly',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, OnInit, DoCheck, CanUpdateErrorState {\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _inputValueAccessor: {value: any};\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  focused: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly stateChanges: Subject<void> = new Subject<void>();\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  controlType: string = 'mat-input';\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  autofilled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n  protected _disabled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n  protected _id: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input() placeholder: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  protected _required = false;\n\n  /** Input type of the element. */\n  @Input()\n  get type(): string { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      this._elementRef.nativeElement.type = this._type;\n    }\n  }\n  protected _type = 'text';\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): string { return this._inputValueAccessor.value; }\n  set value(value: string) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\n  private _readonly = false;\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(protected _elementRef: ElementRef,\n              protected _platform: Platform,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n              private _autofillMonitor: AutofillMonitor,\n              ngZone: NgZone) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || this._elementRef.nativeElement;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      ngZone.runOutsideAngular(() => {\n        _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n          let el = event.target as HTMLInputElement;\n          if (!el.value && !el.selectionStart && !el.selectionEnd) {\n            // Note: Just setting `0, 0` doesn't fix the issue. Setting\n            // `1, 1` fixes it for the first time that you type text and\n            // then hold delete. Toggling to `1, 1` and then back to\n            // `0, 0` seems to completely fix it.\n            el.setSelectionRange(1, 1);\n            el.setSelectionRange(0, 0);\n          }\n        });\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n  }\n\n  ngOnInit() {\n    this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n      this.autofilled = event.isAutofilled;\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n    this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n  }\n\n  /** Focuses the input. */\n  focus(): void { this._elementRef.nativeElement.focus(); }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && !this.readonly) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. */\n  protected _isTextarea() {\n    return this._elementRef.nativeElement.nodeName.toLowerCase() === 'textarea';\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n        !this.autofilled;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return this.focused || !this.empty; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() { this.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TextFieldModule} from '@angular/cdk/text-field';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\n\n\n@NgModule({\n  declarations: [MatInput, MatTextareaAutosize],\n  imports: [\n    CommonModule,\n    TextFieldModule,\n    MatFormFieldModule,\n  ],\n  exports: [\n    TextFieldModule,\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher],\n})\nexport class MatInputModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel: string = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel: string = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel: string = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel: string = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel: string = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel: string = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel: string = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel: string = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel: string = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  NgZone,\n} from '@angular/core';\nimport {take} from 'rxjs/operators';\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'attr.aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** Whether to allow selection of disabled cells. */\n  @Input() allowDisabledSelection = false;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  constructor(private _elementRef: ElementRef, private _ngZone: NgZone) { }\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (!this.allowDisabledSelection && !cell.enabled) {\n      return;\n    }\n    this.selectedValueChange.emit(cell.value);\n  }\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  get _firstRowOffset(): number {\n    return this.rows && this.rows.length && this.rows[0].length ?\n        this.numCols - this.rows[0].length : 0;\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._elementRef.nativeElement.querySelector('.mat-calendar-body-active').focus();\n      });\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody;\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n    this._focusActiveCell();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n\n    const isRtl = this._isRtl();\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n              this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n          this._dateSelected(this._dateAdapter.getDate(this._activeDate));\n          this._userSelection.emit();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  private _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(\n            this._dateAdapter.getYear(this.activeDate),\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const enabled = this._shouldEnableDate(date);\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));\n    }\n  }\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterViewInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nexport class MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatCheckboxMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://www.google.com/design/spec/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewInit, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  private _required: boolean;\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change: EventEmitter<MatCheckboxChange> =\n      new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  _onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Reference to the focused state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value != this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked: boolean = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean { return this._indeterminate; }\n  set indeterminate(value: boolean) {\n    const changed = value != this._indeterminate;\n    this._indeterminate = value;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n  private _indeterminate: boolean = false;\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the checkbox changes.\n    // Since the checkbox uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n    }\n  }\n\n  private _emitChangeEvent() {\n    let event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this.ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      this._removeFocusRipple();\n      this._onTouched();\n    }\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n\n  /** Fades out the focus state ripple. */\n  private _removeFocusRipple(): void {\n    if (this._focusRipple) {\n      this._focusRipple.fadeOut();\n      this._focusRipple = null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule],\n  declarations: [MatCheckbox, MatCheckboxRequiredValidator],\n})\nexport class MatCheckboxModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nexport class MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatChipMixinBase =\n    mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\n\nconst CHIP_ATTRIBUTE_NAMES = ['mat-basic-chip'];\n\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-avatar, [matChipAvatar]',\n  host: {'class': 'mat-chip-avatar'}\n})\nexport class MatChipAvatar {}\n\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n  host: {'class': 'mat-chip-trailing-icon'}\n})\nexport class MatChipTrailingIcon {}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled', 'disableRipple'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[class.mat-chip-with-avatar]': 'avatar',\n    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[class.mat-chip-disabled]': 'disabled',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n  },\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable, CanDisableRipple, RippleTarget {\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /** Reference to the RippleRenderer for the chip. */\n  private _chipRipple: RippleRenderer;\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple;\n  }\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether the chip list is selectable */\n  chipListSelectable: boolean = true;\n\n  /** The chip avatar */\n  @ContentChild(MatChipAvatar) avatar: MatChipAvatar;\n\n  /** The chip's trailing icon. */\n  @ContentChild(MatChipTrailingIcon) trailingIcon: MatChipTrailingIcon;\n\n  /** The chip's remove toggler. */\n  @ContentChild(forwardRef(() => MatChipRemove)) removeIcon: MatChipRemove;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) {\n    this._selected = coerceBooleanProperty(value);\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: value\n    });\n  }\n  protected _selected: boolean = false;\n\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n  @Input()\n  get value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(value: any) { this._value = value; }\n  protected _value: any;\n\n  /**\n   * Whether or not the chip is selectable. When a chip is not selectable,\n   * changes to it's selected state are always ignored. By default a chip is\n   * selectable, and it becomes non-selectable if it's parent chip list is\n   * not selectable.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable && this.chipListSelectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  protected _selectable: boolean = true;\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (removed) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  protected _removable: boolean = true;\n\n  /** Emits when the chip is focused. */\n  readonly _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  readonly _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\n      new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** Emitted when a chip is to be removed. */\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** The ARIA selected applied to the chip. */\n  get ariaSelected(): string | null {\n    return this.selectable ? this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions) {\n    super(_elementRef);\n\n    this._addHostClassName();\n\n    this._chipRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._chipRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    if (globalOptions) {\n      this.rippleConfig = {\n        speedFactor: globalOptions.baseSpeedFactor,\n        animation: globalOptions.animation,\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n      };\n    }\n  }\n\n  _addHostClassName() {\n    // Add class for the different chips\n    for (const attr of CHIP_ATTRIBUTE_NAMES) {\n      if (this._elementRef.nativeElement.hasAttribute(attr) ||\n        this._elementRef.nativeElement.tagName.toLowerCase() === attr) {\n        (this._elementRef.nativeElement as HTMLElement).classList.add(attr);\n        return;\n      }\n    }\n    (this._elementRef.nativeElement as HTMLElement).classList.add('mat-standard-chip');\n  }\n\n  ngOnDestroy() {\n    this.destroyed.emit({chip: this});\n    this._chipRipple._removeTriggerEvents();\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    this._selected = true;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: true\n    });\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    this._selected = false;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: false\n    });\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    this._selected = true;\n    // Emit select event when selected changes.\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: true,\n      selected: true\n    });\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    if (!this._hasFocus) {\n      this._elementRef.nativeElement.focus();\n      this._onFocus.next({chip: this});\n    }\n    this._hasFocus = true;\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Ensures events fire properly upon click. */\n  _handleClick(event: Event) {\n    // Check disabled\n    if (this.disabled) {\n      return;\n    }\n\n    event.preventDefault();\n    event.stopPropagation();\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    this._hasFocus = false;\n    this._onBlur.next({chip: this});\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove mat-chip-trailing-icon',\n    '(click)': '_handleClick()',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {\n  }\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(): void {\n    if (this._parentChip.removable) {\n      this._parentChip.remove();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** Default options, for the chips module, that can be overridden. */\nexport interface MatChipsDefaultOptions {\n  /** The list of key codes that will trigger a chipEnd event. */\n  separatorKeyCodes: number[];\n}\n\n/** Injection token to be used to override the default options for the chips module. */\nexport const MAT_CHIPS_DEFAULT_OPTIONS =\n    new InjectionToken<MatChipsDefaultOptions>('mat-chips-default-options');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {CanUpdateErrorState, ErrorStateMatcher, mixinErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {merge, Observable, Subscription} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipInput} from './chip-input';\n\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nexport class MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatChipListMixinBase = mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for it's similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': '_tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)',\n    '[id]': '_uid',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n  ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly controlType: string = 'mat-chip-list';\n\n  /** When a chip is destroyed, we track the index so we can focus the appropriate next chip. */\n  protected _lastDestroyedIndex: number|null = null;\n\n  /** Track which chips we're listening to for focus/destruction. */\n  protected _chipSet: WeakMap<MatChip, boolean> = new WeakMap();\n\n  /** Subscription to tabbing out from the chip list. */\n  private _tabOutSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the chip list. */\n  private _changeSubscription: Subscription;\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription | null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription | null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription | null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription | null;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipInput;\n\n  /** Uid of the chip list */\n  _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The ARIA role applied to the chip list. */\n  get role(): string | null { return this.empty ? null : 'listbox'; }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n  private _multiple: boolean = false;\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith(): (o1: any, o2: any) => boolean { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  protected _value: any;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get id(): string {\n    return this._chipInput ? this._chipInput.id : this._uid;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  protected _required: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  protected _placeholder: string;\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return this.chips.some(chip => chip._hasFocus) ||\n      (this._chipInput && this._chipInput.focused);\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  protected _disabled: boolean = false;\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip list is selectable. When a chip list is not selectable,\n   * the selected states for all the chips inside the chip list are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n    if (this.chips) {\n      this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n    }\n  }\n  protected _selectable: boolean = true;\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroyed));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipListChange> =\n      new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips)\n      .withWrap()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._tabOutSubscription = this._keyManager.tabOut.subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => this._tabIndex = this._userTabIndex || 0);\n    });\n\n    // When the list changes, re-subscribe\n    this._changeSubscription = this.chips.changes.pipe(startWith(null)).subscribe(() => {\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabOutSubscription.unsubscribe();\n\n    if (this._changeSubscription) {\n      this._changeSubscription.unsubscribe();\n    }\n\n    if (this._chipRemoveSubscription) {\n      this._chipRemoveSubscription.unsubscribe();\n    }\n\n    this._dropSubscriptions();\n    this.stateChanges.complete();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipInput): void {\n    this._chipInput = inputElement;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._elementRef.nativeElement.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() { this.focus(); }\n\n  /**\n   * Focuses the the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(): void {\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput();\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput() {\n    if (this._chipInput) {\n      this._chipInput.focus();\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    const target = event.target as HTMLElement;\n\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n    } else if (target && target.classList.contains('mat-chip')) {\n      this._keyManager.onKeydown(event);\n      this.stateChanges.next();\n    }\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * Update key manager's active item when chip is deleted.\n   * If the deleted chip is the last chip in chip list, focus the new last chip.\n   * Otherwise focus the next chip in the list.\n   * Save `_lastDestroyedIndex` so we can set the correct focus.\n   */\n  protected _updateKeyManager(chip: MatChip) {\n    let chipIndex: number = this.chips.toArray().indexOf(chip);\n    if (this._isValidIndex(chipIndex)) {\n      if (chip._hasFocus) {\n        // Check whether the chip is not the last item\n        if (chipIndex < this.chips.length - 1) {\n          this._keyManager.setActiveItem(chipIndex);\n        } else if (chipIndex - 1 >= 0) {\n          this._keyManager.setActiveItem(chipIndex - 1);\n        }\n      }\n      if (this._keyManager.activeItemIndex === chipIndex) {\n        this._lastDestroyedIndex = chipIndex;\n      }\n    }\n  }\n\n  /**\n   * Checks to see if a focus chip was recently destroyed so that we can refocus the next closest\n   * one.\n   */\n  protected _updateFocusForDestroyedChips() {\n    let chipsArray = this.chips;\n\n    if (this._lastDestroyedIndex != null && chipsArray.length > 0 && this.focused) {\n      // Check whether the destroyed chip was the last item\n      const newFocusIndex = Math.min(this._lastDestroyedIndex, chipsArray.length - 1);\n      this._keyManager.setActiveItem(newFocusIndex);\n      let focusChip = this._keyManager.activeItem;\n      // Focus the chip\n      if (focusChip) {\n        focusChip.focus();\n      }\n    }\n\n    // Reset our destroyed index\n    this._lastDestroyedIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChip);\n        }\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    this._keyManager.setActiveItem(-1);\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n      this._updateKeyManager(event.chip);\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Directive, ElementRef, EventEmitter, Input, Output, Inject} from '@angular/core';\nimport {MatChipList} from './chip-list';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n    '[id]': 'id',\n    '[attr.placeholder]': 'placeholder || null',\n  }\n})\nexport class MatChipInput {\n  /** Whether the control is focused. */\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  // TODO(tinayuangao): Support Set here\n  @Input('matChipInputSeparatorKeyCodes')\n  separatorKeyCodes: number[] = this._defaultOptions.separatorKeyCodes;\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /**\n   * The input's placeholder text.\n   * @deprecated Bind to the `placeholder` attribute directly.\n   * @deletion-target 7.0.0\n   */\n  @Input() placeholder: string = '';\n\n  /** Unique id for the input. */\n  @Input() id: string = `mat-chip-list-input-${nextUniqueId++}`;\n\n  /** Whether the input is empty. */\n  get empty(): boolean { return !this._inputElement.value; }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(\n    protected _elementRef: ElementRef,\n    @Inject(MAT_CHIPS_DEFAULT_OPTIONS) private _defaultOptions: MatChipsDefaultOptions) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this.separatorKeyCodes.indexOf(event.keyCode) > -1) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  /** Focuses the input. */\n  focus(): void { this._inputElement.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChip, MatChipAvatar, MatChipRemove, MatChipTrailingIcon} from './chip';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipInput} from './chip-input';\nimport {MatChipList} from './chip-list';\n\nconst CHIP_DECLARATIONS = [\n  MatChipList,\n  MatChip,\n  MatChipInput,\n  MatChipRemove,\n  MatChipAvatar,\n  MatChipTrailingIcon,\n];\n\n@NgModule({\n  exports: CHIP_DECLARATIONS,\n  declarations: CHIP_DECLARATIONS,\n  providers: [\n    ErrorStateMatcher,\n    {\n      provide: MAT_CHIPS_DEFAULT_OPTIONS,\n      useValue: {\n        separatorKeyCodes: [ENTER]\n      } as MatChipsDefaultOptions\n    }\n  ]\n})\nexport class MatChipsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking outside to close a modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction;\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /** Whether the dialog should close when the user goes backwards/forwards in history. */\n  closeOnNavigation?: boolean = true;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by MatDialog. */\nexport const matDialogAnimations: {\n  readonly slideDialog: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  slideDialog: trigger('slideDialog', [\n    // Note: The `enter` animation doesn't transition to something like `translate3d(0, 0, 0)\n    // scale(1)`, because for some reason specifying the transform explicitly, causes IE both\n    // to blur the dialog content and decimate the animation performance. Leaving it as `none`\n    // solves both issues.\n    state('enter', style({ transform: 'none', opacity: 1 })),\n    state('void', style({ transform: 'translate3d(0, 25%, 0) scale(0.9)', opacity: 0 })),\n    state('exit', style({ transform: 'translate3d(0, 25%, 0)', opacity: 0 })),\n    transition('* => *', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n/** Default color palette for flat buttons (mat-flat-button) */\nconst DEFAULT_FLAT_BUTTON_COLOR = 'primary';\n\n/**\n * List of classes to add to MatButton instances based on host attributes to\n * style as different variants.\n */\nconst BUTTON_HOST_ATTRIBUTES = [\n  'mat-button',\n  'mat-flat-button',\n  'mat-icon-button',\n  'mat-raised-button',\n  'mat-stroked-button',\n  'mat-mini-fab',\n  'mat-fab',\n];\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nexport class MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatButtonMixinBase = mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\n             button[mat-flat-button]`,\n  exportAs: 'matButton',\n  host: {\n    '[disabled]': 'disabled || null',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n\n  /** Whether the button is round. */\n  _isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  _isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated Platform checks for SSR are no longer needed\n               * @deletion-target 7.0.0\n               */\n              // tslint:disable-next-line:no-unused-variable\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor) {\n    super(elementRef);\n\n    // For each of the variant selectors that is prevent in the button's host\n    // attributes, add the correct corresponding class.\n    for (const attr of BUTTON_HOST_ATTRIBUTES) {\n      if (this._hasHostAttributes(attr)) {\n        (elementRef.nativeElement as HTMLElement).classList.add(attr);\n      }\n    }\n\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n\n    if (this._isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    } else if (this._hasHostAttributes('mat-flat-button')) {\n      this.color = DEFAULT_FLAT_BUTTON_COLOR;\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Raised Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n\n  constructor(platform: Platform, focusMonitor: FocusMonitor, elementRef: ElementRef) {\n    super(elementRef, platform, focusMonitor);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatAnchor, MatButton} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {SelectionModel} from '@angular/cdk/collections';\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n// Boilerplate for applying mixins to MatButtonToggleGroup and MatButtonToggleGroupMultiple\n/** @docs-private */\nexport class MatButtonToggleGroupBase {}\nexport const _MatButtonToggleGroupMixinBase = mixinDisabled(MatButtonToggleGroupBase);\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\n/**\n * @deprecated Use `MatButtonToggleGroup` instead.\n * @deletion-target 7.0.0\n */\nexport class MatButtonToggleGroupMultiple {}\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  constructor(\n    /** The MatButtonToggle that emits the event. */\n    public source: MatButtonToggle,\n\n    /** The value assigned to the MatButtonToggle. */\n    public value: any) {}\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group',\n  providers: [\n    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n    {provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup},\n  ],\n  inputs: ['disabled'],\n  host: {\n    '[attr.role]': 'multiple ? \"group\" : \"radiogroup\"',\n    'class': 'mat-button-toggle-group',\n    '[class.mat-button-toggle-vertical]': 'vertical'\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup extends _MatButtonToggleGroupMixinBase implements\n  ControlValueAccessor, CanDisable, OnInit, AfterContentInit {\n\n  private _vertical = false;\n  private _multiple = false;\n  private _selectionModel: SelectionModel<MatButtonToggle>;\n\n  /**\n   * Reference to the raw value that the consumer tried to assign. The real\n   * value will exaclude any values from this one that don't correspond to a\n   * toggle. Useful for the cases where the value is assigned before the toggles\n   * have been initialized or at the same that they're being swapped out.\n   */\n  private _rawValue: any;\n\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle.name = this._name);\n    }\n  }\n  private _name = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any {\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\n\n    if (this.multiple) {\n      return selected.map(toggle => toggle.value);\n    }\n\n    return selected[0] ? selected[0].value : undefined;\n  }\n  set value(newValue: any) {\n    this._setSelectionByValue(newValue);\n    this.valueChange.emit(this.value);\n  }\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() readonly valueChange = new EventEmitter<any>();\n\n  /** Selected button toggles in the group. */\n  get selected() {\n    const selected = this._selectionModel.selected;\n    return this.multiple ? selected : (selected[0] || null);\n  }\n\n  /** Whether multiple button toggles can be selected. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Event emitted when the group's value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatButtonToggle>(this.multiple, undefined, false);\n  }\n\n  ngAfterContentInit() {\n    this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle._markForCheck());\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    const selected = this.selected;\n    const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n    const event = new MatButtonToggleChange(source!, this.value);\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  /**\n   * Syncs a button toggle's selected state with the model value.\n   * @param toggle Toggle to be synced.\n   * @param select Whether the toggle should be selected.\n   * @param isUserInput Whether the change was a result of a user interaction.\n   */\n  _syncButtonToggle(toggle: MatButtonToggle, select: boolean, isUserInput = false) {\n    // Deselect the currently-selected toggle, if we're in single-selection\n    // mode and the button being toggled isn't selected at the moment.\n    if (!this.multiple && this.selected && !toggle.checked) {\n      (this.selected as MatButtonToggle).checked = false;\n    }\n\n    if (select) {\n      this._selectionModel.select(toggle);\n    } else {\n      this._selectionModel.deselect(toggle);\n    }\n\n    // Only emit the change event for user input.\n    if (isUserInput) {\n      this._emitChangeEvent();\n    }\n\n    // Note: we emit this one no matter whether it was a user interaction, because\n    // it is used by Angular to sync up the two-way data binding.\n    this.valueChange.emit(this.value);\n  }\n\n  /** Checks whether a button toggle is selected. */\n  _isSelected(toggle: MatButtonToggle) {\n    return this._selectionModel.isSelected(toggle);\n  }\n\n  /** Determines whether a button toggle should be checked on init. */\n  _isPrechecked(toggle: MatButtonToggle) {\n    if (typeof this._rawValue === 'undefined') {\n      return false;\n    }\n\n    if (this.multiple && Array.isArray(this._rawValue)) {\n      return !!this._rawValue.find(value => toggle.value != null && value === toggle.value);\n    }\n\n    return toggle.value === this._rawValue;\n  }\n\n  /** Updates the selection state of the toggles in the group based on a value. */\n  private _setSelectionByValue(value: any|any[]) {\n    this._rawValue = value;\n\n    if (!this._buttonToggles) {\n      return;\n    }\n\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw Error('Value must be an array in multiple-selection mode.');\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n    } else {\n      this._clearSelection();\n      this._selectValue(value);\n    }\n  }\n\n  /** Clears the selected toggles. */\n  private _clearSelection() {\n    this._selectionModel.clear();\n    this._buttonToggles.forEach(toggle => toggle.checked = false);\n  }\n\n  /** Selects a value if there's a toggle that corresponds to it. */\n  private _selectValue(value: any) {\n    const correspondingOption = this._buttonToggles.find(toggle => {\n      return toggle.value != null && toggle.value === value;\n    });\n\n    if (correspondingOption) {\n      correspondingOption.checked = true;\n      this._selectionModel.select(correspondingOption);\n    }\n  }\n}\n\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nexport class MatButtonToggleBase {}\nexport const _MatButtonToggleMixinBase = mixinDisableRipple(MatButtonToggleBase);\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disableRipple'],\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    'class': 'mat-button-toggle',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatButtonToggle extends _MatButtonToggleMixinBase implements OnInit,\n  CanDisableRipple, OnDestroy {\n\n  private _isSingleSelector = false;\n  private _checked = false;\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** Unique ID for the underlying `input` element. */\n  get inputId(): string { return `${this.id}-input`; }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input() value: any;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean {\n    return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n  }\n  set checked(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._checked) {\n      this._checked = newValue;\n\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n      }\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n  }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Event emitted when the group value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _elementRef: ElementRef<HTMLElement>,\n              private _focusMonitor: FocusMonitor) {\n    super();\n\n    this.buttonToggleGroup = toggleGroup;\n  }\n\n  ngOnInit() {\n    this._isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n    this._type = this._isSingleSelector ? 'radio' : 'checkbox';\n    this.id = this.id || `mat-button-toggle-${_uniqueIdCounter++}`;\n\n    if (this._isSingleSelector) {\n      this.name = this.buttonToggleGroup.name;\n    }\n\n    if (this.buttonToggleGroup && this.buttonToggleGroup._isPrechecked(this)) {\n      this.checked = true;\n    }\n\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._inputElement.nativeElement.focus();\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native input. */\n  _onInputChange(event: Event) {\n    event.stopPropagation();\n\n    this._checked = this._isSingleSelector ? true : !this._checked;\n\n    if (this.buttonToggleGroup) {\n      this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n      this.buttonToggleGroup._onTouched();\n    }\n\n    // Emit a change event when the native input does.\n    this.change.emit(new MatButtonToggleChange(this, this.value));\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When the group value changes, the button will not be notified.\n    // Use `markForCheck` to explicit update button toggle's status.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatButtonToggle, MatButtonToggleGroup} from './button-toggle';\n\n\n@NgModule({\n  imports: [MatCommonModule, MatRippleModule],\n  exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n  declarations: [MatButtonToggleGroup, MatButtonToggle],\n})\nexport class MatButtonToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n} from '@angular/core';\n\n\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-content',\n  host: {'class': 'mat-card-content'}\n})\nexport class MatCardContent {}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n})\nexport class MatCardTitle {}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n})\nexport class MatCardSubtitle {}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-actions',\n  exportAs: 'matCardActions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n})\nexport class MatCardActions {\n  /** Position of the actions inside the card. */\n  @Input() align: 'start' | 'end' = 'start';\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n})\nexport class MatCardFooter {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-image], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n})\nexport class MatCardImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n})\nexport class MatCardSmImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-md-image], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n})\nexport class MatCardMdImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n})\nexport class MatCardLgImage {}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n})\nexport class MatCardXlImage {}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-avatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n})\nexport class MatCardAvatar {}\n\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card',\n  exportAs: 'matCard',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card'}\n})\nexport class MatCard {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n})\nexport class MatCardHeader {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n})\nexport class MatCardTitleGroup {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatCard,\n  MatCardActions,\n  MatCardAvatar,\n  MatCardContent,\n  MatCardFooter,\n  MatCardHeader,\n  MatCardImage,\n  MatCardLgImage,\n  MatCardMdImage,\n  MatCardSmImage,\n  MatCardSubtitle,\n  MatCardTitle,\n  MatCardTitleGroup,\n  MatCardXlImage,\n} from './card';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatCard,\n    MatCardHeader,\n    MatCardTitleGroup,\n    MatCardContent,\n    MatCardTitle,\n    MatCardSubtitle,\n    MatCardActions,\n    MatCardFooter,\n    MatCardSmImage,\n    MatCardMdImage,\n    MatCardLgImage,\n    MatCardImage,\n    MatCardXlImage,\n    MatCardAvatar,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n    MatCardXlImage, MatCardAvatar,\n  ],\n})\nexport class MatCardModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n} from './autocomplete-trigger';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [MatAutocomplete, MatOptionModule, MatAutocompleteTrigger, MatCommonModule],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger],\n})\nexport class MatAutocompleteModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AriaDescriber} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOCUMENT} from '@angular/common';\nimport {Directive, ElementRef, Inject, Input, NgZone, OnDestroy, Optional} from '@angular/core';\nimport {ThemePalette} from '@angular/material/core';\n\n\nlet nextId = 0;\n\nexport type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after';\nexport type MatBadgeSize = 'small' | 'medium' | 'large';\n\n/** Directive to display a text badge. */\n@Directive({\n  selector: '[matBadge]',\n  host: {\n    'class': 'mat-badge',\n    '[class.mat-badge-overlap]': 'overlap',\n    '[class.mat-badge-above]': 'isAbove()',\n    '[class.mat-badge-below]': '!isAbove()',\n    '[class.mat-badge-before]': '!isAfter()',\n    '[class.mat-badge-after]': 'isAfter()',\n    '[class.mat-badge-small]': 'size === \"small\"',\n    '[class.mat-badge-medium]': 'size === \"medium\"',\n    '[class.mat-badge-large]': 'size === \"large\"',\n    '[class.mat-badge-hidden]': 'hidden',\n  },\n})\nexport class MatBadge implements OnDestroy {\n\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n  @Input('matBadgeColor')\n  get color(): ThemePalette { return this._color; }\n  set color(value: ThemePalette) {\n    this._setColor(value);\n    this._color = value;\n  }\n  private _color: ThemePalette = 'primary';\n\n  /** Whether the badge should overlap its contents or not */\n  @Input('matBadgeOverlap')\n  get overlap(): boolean { return this._overlap; }\n  set overlap(val: boolean) {\n    this._overlap = coerceBooleanProperty(val);\n  }\n  private _overlap: boolean = true;\n\n  /**\n   * Position the badge should reside.\n   * Accepts any combination of 'above'|'below' and 'before'|'after'\n   */\n  @Input('matBadgePosition') position: MatBadgePosition = 'above after';\n\n  /** The content for the badge */\n  @Input('matBadge')\n  get content(): string { return this._content; }\n  set content(val: string) {\n    this._content = val;\n    this._updateTextContent();\n  }\n  private _content: string;\n\n  /** Message used to describe the decorated element via aria-describedby */\n  @Input('matBadgeDescription')\n  get description(): string { return this._description; }\n  set description(newDescription: string) {\n    if (newDescription !== this._description) {\n      this._updateHostAriaDescription(newDescription, this._description);\n      this._description = newDescription;\n    }\n  }\n  private _description: string;\n\n  /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n  @Input('matBadgeSize') size: MatBadgeSize = 'medium';\n\n  /** Whether the badge is hidden. */\n  @Input('matBadgeHidden')\n  get hidden(): boolean { return this._hidden; }\n  set hidden(val: boolean) {\n    this._hidden = coerceBooleanProperty(val);\n  }\n  private _hidden: boolean;\n\n  /** Unique id for the badge */\n  _id: number = nextId++;\n\n  private _badgeElement: HTMLElement;\n\n  constructor(\n      @Optional() @Inject(DOCUMENT) private _document: any,\n      private _ngZone: NgZone,\n      private _elementRef: ElementRef,\n      private _ariaDescriber: AriaDescriber) {}\n\n  /** Whether the badge is above the host or not */\n  isAbove(): boolean {\n    return this.position.indexOf('below') === -1;\n  }\n\n  /** Whether the badge is after the host or not */\n  isAfter(): boolean {\n    return this.position.indexOf('before') === -1;\n  }\n\n  ngOnDestroy() {\n    if (this.description && this._badgeElement) {\n      this._ariaDescriber.removeDescription(this._badgeElement, this.description);\n    }\n  }\n\n  /** Injects a span element into the DOM with the content. */\n  private _updateTextContent(): HTMLSpanElement {\n    if (!this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n    } else {\n      this._badgeElement.textContent = this.content;\n    }\n    return this._badgeElement;\n  }\n\n  /** Creates the badge element */\n  private _createBadgeElement(): HTMLElement {\n    const badgeElement = this._document.createElement('span');\n    const activeClass = 'mat-badge-active';\n\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n    badgeElement.classList.add('mat-badge-content');\n    badgeElement.textContent = this.content;\n\n    if (this.description) {\n      badgeElement.setAttribute('aria-label', this.description);\n    }\n\n    this._elementRef.nativeElement.appendChild(badgeElement);\n\n    // animate in after insertion\n    if (typeof requestAnimationFrame === 'function') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          badgeElement.classList.add(activeClass);\n        });\n      });\n    } else {\n      badgeElement.classList.add(activeClass);\n    }\n\n    return badgeElement;\n  }\n\n  /** Sets the aria-label property on the element */\n  private _updateHostAriaDescription(newDescription: string, oldDescription: string): void {\n    // ensure content available before setting label\n    const content = this._updateTextContent();\n\n    if (oldDescription) {\n      this._ariaDescriber.removeDescription(content, oldDescription);\n    }\n\n    if (newDescription) {\n      this._ariaDescriber.describe(content, newDescription);\n    }\n  }\n\n  /** Adds css theme class given the color to the component host */\n  private _setColor(colorPalette: ThemePalette) {\n    if (colorPalette !== this._color) {\n      if (this._color) {\n        this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\n      }\n      if (colorPalette) {\n        this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatBadge} from './badge';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatBadge],\n  declarations: [MatBadge],\n})\nexport class MatBadgeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a bottom sheet. */\nexport const MAT_BOTTOM_SHEET_DATA = new InjectionToken<any>('MatBottomSheetData');\n\n/**\n * Configuration used when opening a bottom sheet.\n */\nexport class MatBottomSheetConfig<D = any> {\n  /** The view container to place the overlay for the bottom sheet into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** Extra CSS classes to be added to the bottom sheet container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the bottom sheet. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Whether the bottom sheet has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop. */\n  backdropClass?: string;\n\n  /** Whether the user can use escape or clicking outside to close the bottom sheet. */\n  disableClose?: boolean = false;\n\n  /** Aria label to assign to the bottom sheet element. */\n  ariaLabel?: string | null = null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {merge, Observable, Subject} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n/**\n * Reference to a bottom sheet dispatched from the bottom sheet service.\n */\nexport class MatBottomSheetRef<T = any, R = any> {\n  /** Instance of the component making up the content of the bottom sheet. */\n  instance: T;\n\n  /**\n   * Instance of the component into which the bottom sheet content is projected.\n   * @docs-private\n   */\n  containerInstance: MatBottomSheetContainer;\n\n  /** Subject for notifying the user that the bottom sheet has been dismissed. */\n  private readonly _afterDismissed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the bottom sheet has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Result to be passed down to the `afterDismissed` stream. */\n  private _result: R | undefined;\n\n  constructor(containerInstance: MatBottomSheetContainer, private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n\n    // Emit when opening animation completes\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'visible'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'hidden'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._overlayRef.dispose();\n      this._afterDismissed.next(this._result);\n      this._afterDismissed.complete();\n    });\n\n    if (!containerInstance.bottomSheetConfig.disableClose) {\n      merge(\n        _overlayRef.backdropClick(),\n        _overlayRef._keydownEvents.pipe(filter(event => event.keyCode === ESCAPE))\n      ).subscribe(() => this.dismiss());\n    }\n  }\n\n  /**\n   * Dismisses the bottom sheet.\n   * @param result Data to be passed back to the bottom sheet opener.\n   */\n  dismiss(result?: R): void {\n    if (!this._afterDismissed.closed) {\n      // Transition the backdrop in parallel to the bottom sheet.\n      this.containerInstance._animationStateChanged.pipe(\n        filter(event => event.phaseName === 'start'),\n        take(1)\n      ).subscribe(() => this._overlayRef.detachBackdrop());\n\n      this._result = result;\n      this.containerInstance.exit();\n    }\n  }\n\n  /** Gets an observable that is notified when the bottom sheet is finished closing. */\n  afterDismissed(): Observable<R | undefined> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the bottom sheet has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material bottom sheet. */\nexport const matBottomSheetAnimations: {\n  readonly bottomSheetState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a bottom sheet. */\n  bottomSheetState: trigger('state', [\n    state('void, hidden', style({transform: 'translateY(100%)'})),\n    state('visible', style({transform: 'translateY(0%)'})),\n    transition('visible => void, visible => hidden',\n        animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible',\n        animate(`${AnimationDurations.EXITING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  EventEmitter,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {MatBottomSheetConfig} from './bottom-sheet-config';\nimport {matBottomSheetAnimations} from './bottom-sheet-animations';\nimport {Subscription} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\n\n// TODO(crisbeto): consolidate some logic between this, MatDialog and MatSnackBar\n\n/**\n * Internal component that wraps user-provided bottom sheet content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-bottom-sheet-container',\n  templateUrl: 'bottom-sheet-container.html',\n  styleUrls: ['bottom-sheet-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matBottomSheetAnimations.bottomSheetState],\n  host: {\n    'class': 'mat-bottom-sheet-container',\n    'tabindex': '-1',\n    'role': 'dialog',\n    '[attr.aria-label]': 'bottomSheetConfig?.ariaLabel',\n    '[@state]': '_animationState',\n    '(@state.start)': '_onAnimationStart($event)',\n    '(@state.done)': '_onAnimationDone($event)'\n  },\n})\nexport class MatBottomSheetContainer extends BasePortalOutlet implements OnDestroy {\n  private _breakpointSubscription: Subscription;\n\n  /** The portal outlet inside of this container into which the content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The state of the bottom sheet animations. */\n  _animationState: 'void' | 'visible' | 'hidden' = 'void';\n\n  /** Emits whenever the state of the animation changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** The bottom sheet configuration. */\n  bottomSheetConfig: MatBottomSheetConfig;\n\n  /** The class that traps and manages focus within the bottom sheet. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the bottom sheet was opened. */\n  private _elementFocusedBeforeOpened: HTMLElement | null = null;\n\n  /** Server-side rendering-compatible reference to the global document object. */\n  private _document: Document;\n\n  /** Whether the component has been destroyed. */\n  private _destroyed: boolean;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    breakpointObserver: BreakpointObserver,\n    @Optional() @Inject(DOCUMENT) document: any) {\n    super();\n\n    this._document = document;\n    this._breakpointSubscription = breakpointObserver\n      .observe([Breakpoints.Medium, Breakpoints.Large, Breakpoints.XLarge])\n      .subscribe(() => {\n        this._toggleClass('mat-bottom-sheet-container-medium',\n            breakpointObserver.isMatched(Breakpoints.Medium));\n        this._toggleClass('mat-bottom-sheet-container-large',\n            breakpointObserver.isMatched(Breakpoints.Large));\n        this._toggleClass('mat-bottom-sheet-container-xlarge',\n            breakpointObserver.isMatched(Breakpoints.XLarge));\n      });\n  }\n\n  /** Attach a component portal as content to this bottom sheet container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this bottom sheet container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Begin animation of bottom sheet entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the bottom sheet exiting from view. */\n  exit(): void {\n    if (!this._destroyed) {\n      this._animationState = 'hidden';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._breakpointSubscription.unsubscribe();\n    this._destroyed = true;\n  }\n\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'visible') {\n      this._trapFocus();\n    } else if (event.toState === 'hidden') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  private _toggleClass(cssClass: string, add: boolean) {\n    const classList = this._elementRef.nativeElement.classList;\n    add ? classList.add(cssClass) : classList.remove(cssClass);\n  }\n\n  private _validatePortalAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach bottom sheet content after content is already attached');\n    }\n  }\n\n  private _setPanelClass() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClass = this.bottomSheetConfig.panelClass;\n\n    if (Array.isArray(panelClass)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      panelClass.forEach(cssClass => element.classList.add(cssClass));\n    } else if (panelClass) {\n      element.classList.add(panelClass);\n    }\n  }\n\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    this._focusTrap.focusInitialElementWhenReady();\n  }\n\n  /** Restores focus to the element that was focused before the bottom sheet opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the bottom sheet was opened. */\n  private _savePreviouslyFocusedElement() {\n    this._elementFocusedBeforeOpened = this._document.activeElement as HTMLElement;\n\n    // The `focus` method isn't available during server-side rendering.\n    if (this._elementRef.nativeElement.focus) {\n      Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, TemplatePortal, ComponentType, PortalInjector} from '@angular/cdk/portal';\nimport {ComponentRef, TemplateRef, Injectable, Injector, Optional, SkipSelf} from '@angular/core';\nimport {MatBottomSheetConfig, MAT_BOTTOM_SHEET_DATA} from './bottom-sheet-config';\nimport {MatBottomSheetRef} from './bottom-sheet-ref';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\nimport {of as observableOf} from 'rxjs';\nimport {Directionality} from '@angular/cdk/bidi';\n\n/**\n * Service to trigger Material Design bottom sheets.\n */\n@Injectable()\nexport class MatBottomSheet {\n  private _bottomSheetRefAtThisLevel: MatBottomSheetRef<any> | null = null;\n\n  /** Reference to the currently opened bottom sheet. */\n  get _openedBottomSheetRef(): MatBottomSheetRef<any> | null {\n    const parent = this._parentBottomSheet;\n    return parent ? parent._openedBottomSheetRef : this._bottomSheetRefAtThisLevel;\n  }\n\n  set _openedBottomSheetRef(value: MatBottomSheetRef<any> | null) {\n    if (this._parentBottomSheet) {\n      this._parentBottomSheet._openedBottomSheetRef = value;\n    } else {\n      this._bottomSheetRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() @SkipSelf() private _parentBottomSheet: MatBottomSheet) {}\n\n  open<T, D = any, R = any>(component: ComponentType<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n  open<T, D = any, R = any>(template: TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R> {\n\n    const _config = _applyConfigDefaults(config);\n    const overlayRef = this._createOverlay(_config);\n    const container = this._attachContainer(overlayRef, _config);\n    const ref = new MatBottomSheetRef<T, R>(container, overlayRef);\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      container.attachTemplatePortal(new TemplatePortal<T>(componentOrTemplateRef, null!, {\n        $implicit: _config.data,\n        bottomSheetRef: ref\n      } as any));\n    } else {\n      const portal = new ComponentPortal(componentOrTemplateRef, undefined,\n            this._createInjector(_config, ref));\n      const contentRef = container.attachComponentPortal(portal);\n      ref.instance = contentRef.instance;\n    }\n\n    // When the bottom sheet is dismissed, clear the reference to it.\n    ref.afterDismissed().subscribe(() => {\n      // Clear the bottom sheet ref if it hasn't already been replaced by a newer one.\n      if (this._openedBottomSheetRef == ref) {\n        this._openedBottomSheetRef = null;\n      }\n    });\n\n    if (this._openedBottomSheetRef) {\n      // If a bottom sheet is already in view, dismiss it and enter the\n      // new bottom sheet after exit animation is complete.\n      this._openedBottomSheetRef.afterDismissed().subscribe(() => ref.containerInstance.enter());\n      this._openedBottomSheetRef.dismiss();\n    } else {\n      // If no bottom sheet is in view, enter the new bottom sheet.\n      ref.containerInstance.enter();\n    }\n\n    this._openedBottomSheetRef = ref;\n\n    return ref;\n  }\n\n  /**\n   * Dismisses the currently-visible bottom sheet.\n   */\n  dismiss(): void {\n    if (this._openedBottomSheetRef) {\n      this._openedBottomSheetRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the bottom sheet container component to the overlay.\n   */\n  private _attachContainer(overlayRef: OverlayRef,\n                           config: MatBottomSheetConfig): MatBottomSheetContainer {\n    const containerPortal = new ComponentPortal(MatBottomSheetContainer, config.viewContainerRef);\n    const containerRef: ComponentRef<MatBottomSheetContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.bottomSheetConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified bottom sheet config.\n   */\n  private _createOverlay(config: MatBottomSheetConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig({\n      direction: config.direction,\n      hasBackdrop: config.hasBackdrop,\n      maxWidth: '100%',\n      scrollStrategy: this._overlay.scrollStrategies.block(),\n      positionStrategy: this._overlay.position()\n        .global()\n        .centerHorizontally()\n        .bottom('0')\n    });\n\n    if (config.backdropClass) {\n      overlayConfig.backdropClass = config.backdropClass;\n    }\n\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a bottom sheet component.\n   * @param config Config that was used to create the bottom sheet.\n   * @param bottomSheetRef Reference to the bottom sheet.\n   */\n  private _createInjector<T>(config: MatBottomSheetConfig,\n                             bottomSheetRef: MatBottomSheetRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap();\n\n    injectionTokens.set(MatBottomSheetRef, bottomSheetRef);\n    injectionTokens.set(MAT_BOTTOM_SHEET_DATA, config.data);\n\n    if (!userInjector || !userInjector.get(Directionality, null)) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the bottom sheet config.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(config?: MatBottomSheetConfig): MatBottomSheetConfig {\n  return {...new MatBottomSheetConfig(), ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatBottomSheet} from './bottom-sheet';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PortalModule,\n  ],\n  exports: [MatBottomSheetContainer, MatCommonModule],\n  declarations: [MatBottomSheetContainer],\n  entryComponents: [MatBottomSheetContainer],\n  providers: [MatBottomSheet],\n})\nexport class MatBottomSheetModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {Subject} from 'rxjs';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n  AfterViewChecked,\n  OnDestroy,\n} from '@angular/core';\nimport {MatOptgroup} from './optgroup';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT =\n    new InjectionToken<MatOptionParentComponent>('MAT_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  styleUrls: ['option.css'],\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption implements AfterViewChecked, OnDestroy {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _id = `mat-option-${_uniqueIdCounter++}`;\n  private _mostRecentViewValue = '';\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() { return this._parent && this._parent.multiple; }\n\n  /** The unique ID of the option. */\n  get id(): string { return this._id; }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple() { return this._parent && this._parent.disableRipple; }\n\n  /** Event emitted when the option is selected or deselected. */\n  @Output() readonly onSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n\n  /** Emits when the state of the option changes and any parents have to be notified. */\n  readonly _stateChanges = new Subject<void>();\n\n  constructor(\n    private _element: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() readonly group: MatOptgroup) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    this._selected = true;\n    this._changeDetectorRef.markForCheck();\n    this._emitSelectionChangeEvent();\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    this._selected = false;\n    this._changeDetectorRef.markForCheck();\n    this._emitSelectionChangeEvent();\n  }\n\n  /** Sets focus onto this option. */\n  focus(): void {\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * `Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.`\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  ngAfterViewChecked() {\n    // Since parent components could be using the option's label to display the selected values\n    // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n    // relatively cheap, however we still limit them only to selected options in order to avoid\n    // hitting the DOM too often.\n    if (this._selected) {\n      const viewValue = this.viewValue;\n\n      if (viewValue !== this._mostRecentViewValue) {\n        this._mostRecentViewValue = viewValue;\n        this._stateChanges.next();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function _countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n  optionGroups: QueryList<MatOptgroup>): number {\n\n  if (optionGroups.length) {\n    let optionsArray = options.toArray();\n    let groups = optionGroups.toArray();\n    let groupCounter = 0;\n\n    for (let i = 0; i < optionIndex + 1; i++) {\n      if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n        groupCounter++;\n      }\n    }\n\n    return groupCounter;\n  }\n\n  return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function _getOptionScrollPosition(optionIndex: number, optionHeight: number,\n    currentScrollPosition: number, panelHeight: number): number {\n  const optionOffset = optionIndex * optionHeight;\n\n  if (optionOffset < currentScrollPosition) {\n    return optionOffset;\n  }\n\n  if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n    return Math.max(0, optionOffset - panelHeight + optionHeight);\n  }\n\n  return currentScrollPosition;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n\n@NgModule({\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup]\n})\nexport class MatOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MAT_LABEL_GLOBAL_OPTIONS =\n  new InjectionToken<LabelOptions>('mat-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n  /**\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n   * Default behavior is assumed to be `auto`.\n   */\n  float?: FloatLabelType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the MatFormField. */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /**\n   * Whether the input is currently in an autofilled state. If property is not present on the\n   * control it is assumed to be false.\n   */\n  readonly autofilled?: boolean;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/**\n * The placeholder text for an `MatFormField`.\n * @deprecated Use `<mat-label>` to specify the label and the `placeholder` attribute to specify the\n *     placeholder.\n * @deletion-target 8.0.0\n */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed the the front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  FloatLabelType,\n  LabelOptions,\n  MAT_LABEL_GLOBAL_OPTIONS,\n  mixinColor,\n} from '@angular/material/core';\nimport {EMPTY, fromEvent, merge} from 'rxjs';\nimport {startWith, take} from 'rxjs/operators';\nimport {MatError} from './error';\nimport {matFormFieldAnimations} from './form-field-animations';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {Platform} from '@angular/cdk/platform';\n\n\nlet nextUniqueId = 0;\nconst floatingLabelScale = 0.75;\nconst outlineGapPadding = 5;\n\n\n// Boilerplate for applying mixins to MatFormField.\n/** @docs-private */\nexport class MatFormFieldBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n\nexport const _MatFormFieldMixinBase = mixinColor(MatFormFieldBase, 'primary');\n\n\nexport type MatFormFieldAppearance = 'legacy' | 'standard' | 'fill' | 'outline';\n\n\nexport interface MatFormFieldDefaultOptions {\n  appearance?: MatFormFieldAppearance;\n}\n\nexport const MAT_FORM_FIELD_DEFAULT_OPTIONS =\n    new InjectionToken<MatFormFieldDefaultOptions>('MAT_FORM_FIELD_DEFAULT_OPTIONS');\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here.\n  // The MatInput styles are fairly minimal so it shouldn't be a big deal for people who\n  // aren't using MatInput.\n  styleUrls: [\n    'form-field.css',\n    'form-field-fill.css',\n    'form-field-legacy.css',\n    'form-field-outline.css',\n    'form-field-standard.css',\n    '../input/input.css',\n  ],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-form-field',\n    '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n    '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n    '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n    '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-form-field-autofilled]': '_control.autofilled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n  },\n  inputs: ['color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField extends _MatFormFieldMixinBase\n    implements AfterContentInit, AfterContentChecked, AfterViewInit, CanColor {\n  private _labelOptions: LabelOptions;\n\n  /** The form-field appearance style. */\n  @Input()\n  get appearance(): MatFormFieldAppearance {\n    return this._appearance || this._defaultOptions && this._defaultOptions.appearance || 'legacy';\n  }\n  set appearance(value: MatFormFieldAppearance) {\n    this._appearance = value;\n  }\n  _appearance: MatFormFieldAppearance;\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker(): boolean { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: boolean) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat(): boolean {\n    return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat(): boolean { return this.floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel(): string { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  /**\n   * Whether the label should always float, never float or float as the user types.\n   *\n   * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n   * way to make the floating label emulate the behavior of a standard input placeholder. However\n   * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n   * appearances the `never` option has been disabled in favor of just using the placeholder.\n   */\n  @Input()\n  get floatLabel(): FloatLabelType {\n    return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n  }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  _outlineGapWidth = 0;\n\n  _outlineGapStart = 0;\n\n  _initialGapCalculated = false;\n\n  /**\n   * @deprecated\n   * @deletion-target 7.0.0\n   */\n  @ViewChild('underline') underlineRef: ElementRef;\n\n  @ViewChild('connectionContainer') _connectionContainerRef: ElementRef;\n  @ViewChild('inputContainer') _inputContainerRef: ElementRef;\n  @ViewChild('label') private _label: ElementRef;\n  @ContentChild(MatFormFieldControl) _control: MatFormFieldControl<any>;\n  @ContentChild(MatPlaceholder) _placeholderChild: MatPlaceholder;\n  @ContentChild(MatLabel) _labelChild: MatLabel;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions,\n      @Optional() private _dir: Directionality,\n      @Optional() @Inject(MAT_FORM_FIELD_DEFAULT_OPTIONS) private _defaultOptions:\n          MatFormFieldDefaultOptions,\n      // @deletion-target 7.0.0 _platform to be made required.\n      private _platform?: Platform) {\n    super(_elementRef);\n\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n  }\n\n  /**\n   * Gets an ElementRef for the element that a overlay attached to the form-field should be\n   * positioned relative to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._connectionContainerRef || this._elementRef;\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n    if (this._control.controlType) {\n      this._elementRef.nativeElement.classList\n          .add(`mat-form-field-type-${this._control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    this._control.stateChanges.pipe(startWith(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Run change detection if the value, prefix, or suffix changes.\n    const valueChanges = this._control.ngControl && this._control.ngControl.valueChanges || EMPTY;\n    merge(valueChanges, this._prefixChildren.changes, this._suffixChildren.changes)\n        .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n    if (!this._initialGapCalculated) {\n      Promise.resolve().then(() => this.updateOutlineGap());\n    }\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: string): boolean {\n    let ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && (ngControl as any)[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control && this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this.appearance === 'legacy' && !this._hasLabel() ||\n        this._hasLabel() && !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      this._showAlwaysAnimate = true;\n      this.floatLabel = 'always';\n\n      fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n        this._showAlwaysAnimate = false;\n      });\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align === 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align === 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        let startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        let endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n\n  /**\n   * Updates the width and position of the gap in the outline. Only relevant for the outline\n   * appearance.\n   */\n  updateOutlineGap() {\n    if (this.appearance === 'outline' && this._label && this._label.nativeElement.children.length) {\n      if (this._platform && !this._platform.isBrowser) {\n        // getBoundingClientRect isn't available on the server.\n        this._initialGapCalculated = true;\n        return;\n      }\n      if (!document.contains(this._elementRef.nativeElement)) {\n        return;\n      }\n\n      const containerStart = this._getStartEnd(\n          this._connectionContainerRef.nativeElement.getBoundingClientRect());\n      const labelStart = this._getStartEnd(\n          this._label.nativeElement.children[0].getBoundingClientRect());\n      let labelWidth = 0;\n      for (const child of this._label.nativeElement.children) {\n        labelWidth += child.offsetWidth;\n      }\n      this._outlineGapStart = labelStart - containerStart - outlineGapPadding;\n      this._outlineGapWidth = labelWidth * floatingLabelScale + outlineGapPadding * 2;\n    } else {\n      this._outlineGapStart = 0;\n      this._outlineGapWidth = 0;\n    }\n    this._initialGapCalculated = true;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Gets the start end of the rect considering the current directionality. */\n  private _getStartEnd(rect: ClientRect): number {\n    return this._dir && this._dir.value === 'rtl' ? rect.right : rect.left;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n  imports: [CommonModule],\n  exports: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n})\nexport class MatFormFieldModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  ElementRef,\n  Input,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n  EventEmitter,\n  Output,\n  InjectionToken,\n  Inject,\n} from '@angular/core';\nimport {\n  MatOption,\n  MatOptgroup,\n  MAT_OPTION_PARENT_COMPONENT,\n  mixinDisableRipple,\n  CanDisableRipple,\n} from '@angular/material/core';\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected. */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nexport class MatAutocompleteBase {}\nexport const _MatAutocompleteMixinBase = mixinDisableRipple(MatAutocompleteBase);\n\n/** Default `mat-autocomplete` options that can be overridden. */\nexport interface MatAutocompleteDefaultOptions {\n  /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n  autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nexport const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<MatAutocompleteDefaultOptions>('mat-autocomplete-default-options', {\n      providedIn: 'root',\n      factory: () => ({autoActiveFirstOption: false}),\n    });\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel: boolean = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean { return this._isOpen && this.showPanel; }\n  _isOpen: boolean = false;\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /**\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n   */\n  @Input()\n  get autoActiveFirstOption(): boolean { return this._autoActiveFirstOption; }\n  set autoActiveFirstOption(value: boolean) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  private _autoActiveFirstOption: boolean;\n\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /** Event that is emitted when the autocomplete panel is opened. */\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event that is emitted when the autocomplete panel is closed. */\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(value: string) {\n    if (value && value.length) {\n      value.split(' ').forEach(className => this._classList[className.trim()] = true);\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef,\n    @Inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS) defaults: MatAutocompleteDefaultOptions) {\n    super();\n\n    this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibility state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._classList['mat-autocomplete-visible'] = this.showPanel;\n    this._classList['mat-autocomplete-hidden'] = !this.showPanel;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n}\n\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  /** Whether the component is disabled. */\n  disabled: boolean;\n}\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): Constructor<CanDisable> & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled() { return this._disabled; }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  /** Theme color palette for the component. */\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values. */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(base: T,\n    defaultColor?: ThemePalette): Constructor<CanColor> & T {\n  return class extends base {\n    private _color: ThemePalette;\n\n    get color(): ThemePalette { return this._color; }\n    set color(value: ThemePalette) {\n      const colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  /** Whether ripples are disabled. */\n  disableRipple: boolean;\n}\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T)\n    : Constructor<CanDisableRipple> & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n/** @docs-private */\nexport interface HasTabIndex {\n  /** Tabindex of the component. */\n  tabIndex: number;\n}\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : Constructor<HasTabIndex> & T {\n  return class extends base {\n    private _tabIndex: number = defaultTabIndex;\n\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs';\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  updateErrorState();\n  readonly stateChanges: Subject<void>;\n  errorState: boolean;\n  errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n  ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n: Constructor<CanUpdateErrorState> & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping\n     * `MatFormField` needs to run change detection.\n     */\n    readonly stateChanges = new Subject<void>();\n\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable, Subscriber} from 'rxjs';\nimport {Constructor} from './constructor';\n\n\n/**\n * Mixin that adds an initialized property to a directive which, when subscribed to, will emit a\n * value once markInitialized has been called, which should be done during the ngOnInit function.\n * If the subscription is made after it has already been marked as initialized, then it will trigger\n * an emit immediately.\n * @docs-private\n */\nexport interface HasInitialized {\n  /** Stream that emits once during the directive/component's ngOnInit. */\n  initialized: Observable<void>;\n\n  /**\n   * Sets the state as initialized and must be called during ngOnInit to notify subscribers that\n   * the directive has been initialized.\n   * @docs-private\n   */\n  _markInitialized: () => void;\n}\n\n/** Mixin to augment a directive with an initialized property that will emits when ngOnInit ends. */\nexport function mixinInitialized<T extends Constructor<{}>>(base: T):\n    Constructor<HasInitialized> & T {\n  return class extends base {\n    /** Whether this directive has been marked as initialized. */\n    _isInitialized = false;\n\n    /**\n     * List of subscribers that subscribed before the directive was initialized. Should be notified\n     * during _markInitialized. Set to null after pending subscribers are notified, and should\n     * not expect to be populated after.\n     */\n    _pendingSubscribers: Subscriber<void>[] | null = [];\n\n    /**\n     * Observable stream that emits when the directive initializes. If already initialized, the\n     * subscriber is stored to be notified once _markInitialized is called.\n     */\n    initialized = new Observable<void>(subscriber => {\n      // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify\n      // when _markInitialized is called.\n      if (this._isInitialized) {\n        this._notifySubscriber(subscriber);\n      } else {\n        this._pendingSubscribers!.push(subscriber);\n      }\n    });\n\n    constructor(...args: any[]) { super(...args); }\n\n    /**\n     * Marks the state as initialized and notifies pending subscribers. Should be called at the end\n     * of ngOnInit.\n     * @docs-private\n     */\n    _markInitialized(): void {\n      if (this._isInitialized) {\n        throw Error('This directive has already been marked as initialized and ' +\n            'should not be called twice.');\n      }\n\n      this._isInitialized = true;\n\n      this._pendingSubscribers!.forEach(this._notifySubscriber);\n      this._pendingSubscribers = null;\n    }\n\n    /** Emits and completes the subscriber stream (should only emit once). */\n    _notifySubscriber(subscriber: Subscriber<void>): void {\n      subscriber.next();\n      subscriber.complete();\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n  private readonly _clampDate: boolean;\n\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   *\n   * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\n   * getting the string representation of a Date object from it's utc representation. We're keeping\n   * it here for sometime, just for precaution, in case we decide to revert some of these changes\n   * though.\n   */\n  useUtcForDisplay: boolean = true;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string, platform: Platform) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    this.useUtcForDisplay = !platform.TRIDENT;\n    this._clampDate = platform.TRIDENT || platform.EDGE;\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {month: style, timeZone: 'utc'});\n      return range(12, i =>\n          this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric', timeZone: 'utc'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {weekday: style, timeZone: 'utc'});\n      return range(7, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric', timeZone: 'utc'});\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    if (SUPPORTS_INTL_API) {\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n        date = this.clone(date);\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n      }\n\n      displayFormat = {...displayFormat, timeZone: 'utc'};\n\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    const result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n\n  /**\n   * When converting Date object to string, javascript built-in functions may return wrong\n   * results because it applies its internal DST rules. The DST rules around the world change\n   * very frequently, and the current valid rule is not always valid in previous years though.\n   * We work around this problem building a new Date object which has its internal UTC\n   * representation with the local date and time.\n   * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\n   *    timeZone set to 'utc' to work fine.\n   * @param date Date from which we want to get the string representation according to dtf\n   * @returns A Date object with its UTC representation based on the passed in date info\n   */\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\n    const d = new Date(Date.UTC(\n        date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n        date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n    return dtf.format(d);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, supportsPassiveEventListeners} from '@angular/cdk/platform';\nimport {RippleRef, RippleState} from './ripple-ref';\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  persistent?: boolean;\n  animation?: RippleAnimationConfig;\n  terminateOnPointerUp?: boolean;\n  /**\n   * @deprecated Use the `animation` property instead.\n   * @deletion-target 7.0.0\n   */\n  speedFactor?: number;\n};\n\n/**\n * Interface that describes the configuration for the animation of a ripple.\n * There are two animation phases with different durations for the ripples.\n */\nexport interface RippleAnimationConfig {\n  /** Duration in milliseconds for the enter animation (expansion from point of contact). */\n  enterDuration?: number;\n  /** Duration in milliseconds for the exit animation (fade-out). */\n  exitDuration?: number;\n}\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nexport const defaultRippleAnimationConfig = {\n  enterDuration: 450,\n  exitDuration: 400\n};\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst ignoreMouseEventsTimeout = 800;\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer {\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /** Events to be registered on the trigger element. */\n  private _triggerEvents = new Map<string, any>();\n\n  /** Set of currently active ripple references. */\n  private _activeRipples = new Set<RippleRef>();\n\n  /** Latest non-persistent ripple that was triggered. */\n  private _mostRecentTransientRipple: RippleRef | null;\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /** Options that apply to all the event listeners that are bound by the renderer. */\n  private _eventOptions = supportsPassiveEventListeners() ? ({passive: true} as any) : false;\n\n  /**\n   * Cached dimensions of the ripple container. Set when the first\n   * ripple is shown and cleared once no more ripples are visible.\n   */\n  private _containerRect: ClientRect | null;\n\n  constructor(private _target: RippleTarget,\n              private _ngZone: NgZone,\n              elementRef: ElementRef,\n              platform: Platform) {\n\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents.set('mousedown', this.onMousedown);\n      this._triggerEvents.set('mouseup', this.onPointerUp);\n      this._triggerEvents.set('mouseleave', this.onPointerUp);\n\n      this._triggerEvents.set('touchstart', this.onTouchStart);\n      this._triggerEvents.set('touchend', this.onPointerUp);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = this._containerRect =\n                          this._containerRect || this._containerElement.getBoundingClientRect();\n    const animationConfig = {...defaultRippleAnimationConfig, ...config.animation};\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n    const duration = animationConfig.enterDuration / (config.speedFactor || 1);\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    if (!config.persistent) {\n      this._mostRecentTransientRipple = rippleRef;\n    }\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      const isMostRecentTransientRipple = rippleRef === this._mostRecentTransientRipple;\n\n      rippleRef.state = RippleState.VISIBLE;\n\n      // When the timer runs out while the user has kept their pointer down, we want to\n      // keep only the persistent ripples and the latest transient ripple. We do this,\n      // because we don't want stacked transient ripples to appear after their enter\n      // animation has finished.\n      if (!config.persistent && (!isMostRecentTransientRipple || !this._isPointerDown)) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    const wasActive = this._activeRipples.delete(rippleRef);\n\n    if (rippleRef === this._mostRecentTransientRipple) {\n      this._mostRecentTransientRipple = null;\n    }\n\n    // Clear out the cached bounding rect if we have no more ripples.\n    if (!this._activeRipples.size) {\n      this._containerRect = null;\n    }\n\n    // For ripples that are not active anymore, don't re-un the fade-out animation.\n    if (!wasActive) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n    const animationConfig = {...defaultRippleAnimationConfig, ...rippleRef.config.animation};\n\n    rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n    rippleEl.style.opacity = '0';\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode!.removeChild(rippleEl);\n    }, animationConfig.exitDuration);\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(element: HTMLElement) {\n    if (!element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n\n    this._ngZone.runOutsideAngular(() => {\n      this._triggerEvents.forEach((fn, type) =>\n          element.addEventListener(type, fn, this._eventOptions));\n    });\n\n    this._triggerElement = element;\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private onMousedown = (event: MouseEvent) => {\n    const isSyntheticEvent = this._lastTouchStartEvent &&\n        Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n\n    if (!this._target.rippleDisabled && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private onTouchStart = (event: TouchEvent) => {\n    if (!this._target.rippleDisabled) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      this.fadeInRipple(\n          event.touches[0].clientX, event.touches[0].clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private onPointerUp = () => {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      // By default, only ripples that are completely visible will fade out on pointer release.\n      // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\n      const isVisible = ripple.state === RippleState.VISIBLE ||\n        ripple.config.terminateOnPointerUp && ripple.state === RippleState.FADING_IN;\n\n      if (!ripple.config.persistent && isVisible) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n  private runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => {\n        this._triggerElement!.removeEventListener(type, fn, this._eventOptions);\n      });\n    }\n  }\n}\n\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Converts values into strings. Falsy values become empty strings.\n * @docs-private\n */\nexport function coerceToString(value: string | number): string {\n  return `${value || ''}`;\n}\n\n/**\n * Converts a value that might be a string into a number.\n * @docs-private\n */\nexport function coerceToNumber(value: string | number): number {\n  return typeof value === 'string' ? parseInt(value, 10) : value;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`mat-menu-trigger: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`x-position value must be either 'before' or after'.\n      Example: <mat-menu x-position=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`y-position value must be either 'above' or below'.\n      Example: <mat-menu y-position=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {BidiModule} from '@angular/cdk/bidi';\n\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks', {\n  providedIn: 'root',\n  factory: () => true,\n});\n\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  /** Whether we've already checked for HammerJs availability. */\n  private _hasCheckedHammer = false;\n\n  /** Reference to the global `document` object. */\n  private _document = typeof document === 'object' && document ? document : null;\n\n  /** Reference to the global 'window' object. */\n  private _window = typeof window === 'object' && window ? window : null;\n\n  constructor(@Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecksEnabled: boolean) {\n    if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n      this._checkDoctypeIsDefined();\n      this._checkThemeIsPresent();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n\n  /** Whether any sanity checks are enabled */\n  private _areChecksEnabled(): boolean {\n    return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n  }\n\n  /** Whether the code is running in tests. */\n  private _isTestEnv() {\n    return this._window && (this._window['__karma__'] || this._window['jasmine']);\n  }\n\n  private _checkDoctypeIsDefined(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n\n  private _checkThemeIsPresent(): void {\n    if (this._document && typeof getComputedStyle === 'function') {\n      const testElement = this._document.createElement('div');\n\n      testElement.classList.add('mat-theme-loaded-marker');\n      this._document.body.appendChild(testElement);\n\n      const computedStyle = getComputedStyle(testElement);\n\n      // In some situations, the computed style of the test element can be null. For example in\n      // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n      // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n      if (computedStyle && computedStyle.display !== 'none') {\n        console.warn(\n          'Could not find Angular Material core theme. Most Material ' +\n          'components may not work as expected. For more info refer ' +\n          'to the theming guide: https://material.angular.io/guide/theming'\n        );\n      }\n\n      this._document.body.removeChild(testElement);\n    }\n  }\n\n  /** Checks whether HammerJS is available. */\n  _checkHammerIsAvailable(): void {\n    if (this._hasCheckedHammer || !this._window) {\n      return;\n    }\n\n    if (this._areChecksEnabled() && !this._window['Hammer']) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material components may not work correctly.');\n    }\n    this._hasCheckedHammer = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {inject, InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE', {\n  providedIn: 'root',\n  factory: () => inject(LOCALE_ID)\n});\n\n/**\n * No longer needed since MAT_DATE_LOCALE has been changed to a scoped injectable.\n * If you are importing and providing this in your code you can simply remove it.\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges = new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {DateAdapter} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n  imports: [PlatformModule],\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n  ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({providedIn: 'root'})\nexport class ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {\n  HammerStatic,\n  HammerInstance,\n  Recognizer,\n  RecognizerStatic,\n  HammerOptions,\n} from './gesture-annotations';\n\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\n\n/** Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class GestureConfig extends HammerGestureConfig {\n  private _hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\n\n  /** List of new event names to add to the gesture support list */\n  events: string[] = this._hammer ? [\n    'longpress',\n    'slide',\n    'slidestart',\n    'slideend',\n    'slideright',\n    'slideleft'\n  ] : [];\n\n  constructor(\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\n    @Optional() commonModule?: MatCommonModule) {\n    super();\n    if (commonModule) {\n      commonModule._checkHammerIsAvailable();\n    }\n  }\n\n  /**\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://www.google.com/design/spec/patterns/gestures.html#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * @param element Element to which to assign the new HammerJS gestures.\n   * @returns Newly-created HammerJS instance.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const mc = new this._hammer(element, this._hammerOptions || undefined);\n\n    // Default Hammer Recognizers.\n    const pan = new this._hammer.Pan();\n    const swipe = new this._hammer.Swipe();\n    const press = new this._hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return mc as HammerInstance;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  NgModule,\n  Directive,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport class MatLineSetter {\n  constructor(private _lines: QueryList<MatLine>, private _element: ElementRef) {\n    this._setLineClass(this._lines.length);\n\n    this._lines.changes.subscribe(() => {\n      this._setLineClass(this._lines.length);\n    });\n  }\n\n  private _setLineClass(count: number): void {\n    this._resetClasses();\n    if (count === 2 || count === 3) {\n      this._setClass(`mat-${count}-line`, true);\n    } else if (count > 3) {\n      this._setClass(`mat-multi-line`, true);\n    }\n  }\n\n  private _resetClasses(): void {\n    this._setClass('mat-2-line', false);\n    this._setClass('mat-3-line', false);\n    this._setClass('mat-multi-line', false);\n  }\n\n  private _setClass(className: string, isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add(className);\n    } else {\n      this._element.nativeElement.classList.remove(className);\n    }\n  }\n\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\n\n/** Possible states for a ripple element. */\nexport enum RippleState {\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n\n  /** Current state of the ripple reference. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: RippleRenderer,\n    public element: HTMLElement,\n    public config: RippleConfig) {\n  }\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {RippleRef} from './ripple-ref';\nimport {RippleAnimationConfig, RippleConfig, RippleRenderer, RippleTarget} from './ripple-renderer';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * Configuration for the animation duration of the ripples.\n   * There are two phases with different durations for the ripples.\n   */\n  animation?: RippleAnimationConfig;\n\n  /**\n   * If set, the default duration of the fade-in animation is divided by this value. For example,\n   * setting it to 0.5 will cause the ripple fade-in animation to take twice as long.\n   * A changed speedFactor will not affect the fade-out duration of the ripples.\n   * @deprecated Use the `animation` global option instead.\n   * @deletion-target 7.0.0\n   */\n  baseSpeedFactor?: number;\n\n  /**\n   * Whether ripples should start fading out immediately after the mouse our touch is released. By\n   * default, ripples will wait for the enter animation to complete and for mouse or touch release.\n   */\n  terminateOnPointerUp?: boolean;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * If set, the normal duration of ripple animations is divided by this value. For example,\n   * setting it to 0.5 will cause the animations to take twice as long.\n   * A changed speedFactor will not modify the fade-out duration of the ripples.\n   * @deprecated Use the [matRippleAnimation] binding instead.\n   * @deletion-target 7.0.0\n   */\n  @Input('matRippleSpeedFactor') speedFactor: number = 1;\n\n  /**\n   * Configuration for the ripple animation. Allows modifying the enter and exit animation\n   * duration of the ripples.\n   */\n  @Input('matRippleAnimation') animation: RippleAnimationConfig;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() { return this._trigger || this._elementRef.nativeElement; }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** Whether ripple directive is initialized and the input bindings are set. */\n  private _isInitialized: boolean = false;\n\n  constructor(private _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions) {\n\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /** Ripple configuration from the directive's input values. */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      radius: this.radius,\n      color: this.color,\n      animation: {...this._globalOptions.animation, ...this.animation},\n      terminateOnPointerUp: this._globalOptions.terminateOnPointerUp,\n      speedFactor: this.speedFactor * (this._globalOptions.baseSpeedFactor || 1),\n    };\n  }\n\n  /** Whether ripples on pointer-down are disabled or not. */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n\n  /**\n   * Launches a manual ripple using the specified ripple configuration.\n   * @param config Configuration for the manual ripple.\n   */\n  launch(config: RippleConfig): RippleRef;\n\n  /**\n   * Launches a manual ripple at the specified coordinates within the element.\n   * @param x Coordinate within the element, along the X axis at which to fade-in the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to fade-in the ripple.\n   * @param config Optional ripple configuration for the manual ripple.\n   */\n  launch(x: number, y: number, config?: RippleConfig): RippleRef;\n\n  /** Launches a manual ripple at the specified coordinated or just by the ripple config. */\n  launch(configOrX: number | RippleConfig, y: number = 0, config?: RippleConfig): RippleRef {\n    if (typeof configOrX === 'number') {\n      return this._rippleRenderer.fadeInRipple(configOrX, y, {...this.rippleConfig, ...config});\n    } else {\n      return this._rippleRenderer.fadeInRipple(0, 0, {...this.rippleConfig, ...configOrX});\n    }\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\n\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n})\nexport class MatPseudoCheckboxModule { }\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\nimport {mixinDisabled, CanDisable} from '../common-behaviors/disabled';\n\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nexport class MatOptgroupBase { }\nexport const _MatOptgroupMixinBase = mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  styleUrls: ['optgroup.css'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n})\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n"],"names":["isEnabled","this","scrollDistance","_showPaginationControls","_changeDetectorRef","markForCheck","MatTabHeader","prototype","_checkScrollingControls","_disableScrollBefore","_disableScrollAfter","_getMaxScrollDistance","_tabList","nativeElement","scrollWidth","_tabListContainer","offsetWidth","_alignInkBarToSelectedTab","selectedLabelWrapper","_labelWrappers","length","toArray","selectedIndex","elementRef","_inkBar","alignToElement","type","Component","args","selector","template","styles","inputs","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","host","class","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","ViewportRuler","Directionality","decorators","Optional","propDecorators","ViewChild","Input","selectFocusedIndex","Output","indexFocused","nextId","MatTabChangeEvent","MatTabGroupBase","_elementRef","_MatTabGroupMixinBase","mixinColor","mixinDisableRipple","MatTabGroup","_this","_super","call","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","Subscription","EMPTY","_tabLabelSubscription","_dynamicHeight","_selectedIndex","headerPosition","selectedIndexChange","EventEmitter","focusChange","animationDone","selectedTabChange","_groupId","tslib_1.__extends","Object","defineProperty","value","coerceBooleanProperty","coerceNumberProperty","_backgroundColor","classList","remove","backgroundColor","add","ngAfterContentChecked","indexToSelect","Math","min","_tabs","max","tabChangeEvent","_createChangeEvent","emit","Promise","resolve","then","forEach","tab","index","position","isActive","origin","ngAfterContentInit","_subscribeToTabLabels","changes","subscribe","ngOnDestroy","unsubscribe","realignInkBar","_tabHeader","_focusChanged","event","merge","apply","map","_disableChange","concat","_labelChange","_getTabLabelId","i","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","style","height","offsetHeight","_removeTabBodyWrapperHeight","clientHeight","_handleClick","tabHeader","idx","disabled","focusIndex","_getTabIndex","exportAs","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","dynamicHeight","MatTabNavBase","_MatTabNavMixinBase","MatTabNav","_dir","_ngZone","_viewportRuler","_onDestroy","Subject","updateActiveLink","element","_activeLinkChanged","runOutsideAngular","dirChange","change","observableOf","pipe","takeUntil","_alignInkBar","activeTab","_tabLinks","find","active","_activeLinkElement","next","complete","show","hide","NgZone","ChangeDetectorRef","MatTabLinkBase","_MatTabLinkMixinBase","mixinTabIndex","mixinDisabled","_tabNavBar","_tabLinkRipple","setupTriggerEvents","tabIndex","parseInt","globalOptions","rippleConfig","terminateOnPointerUp","speedFactor","baseSpeedFactor","animation","get","_isActive","enumerable","configurable","preventDefault","MatTabLink","Directive","[attr.aria-disabled]","[attr.tabIndex]","[class.mat-tab-disabled]","[class.mat-tab-label-active]","(click)","Platform","undefined","Inject","MAT_RIPPLE_GLOBAL_OPTIONS","Attribute","NgModule","imports","CommonModule","MatCommonModule","PortalModule","MatRippleModule","ObserversModule","exports","MatTabLabel","MatTab","MatTabContent","declarations","MatInkBar","MatTabLabelWrapper","MatTabBody","MatTabBodyPortal","MatTabsModule","MatToolbarBase","_MatToolbarMixinBase","MatToolbarRow","MatToolbar","_platform","document","_document","ngAfterViewInit","isDevMode","isBrowser","_checkToolbarMixedModes","_toolbarRows","slice","childNodes","filter","node","contains","nodeType","COMMENT_NODE","some","textContent","trim","throwToolbarMixedModesError","[class.mat-toolbar-multiple-rows]","[class.mat-toolbar-single-row]","DOCUMENT","MatToolbarModule","MatTreeNodeOutlet","viewContainer","ViewContainerRef","_MatTreeNodeMixinBase","CdkTreeNode","_MatNestedTreeNodeMixinBase","CdkNestedTreeNode","MatTreeNode","_tree","role","Number","[attr.aria-expanded]","[attr.aria-level]","[attr.role]","providers","provide","useExisting","ElementRef","CdkTree","MatTreeNodeDef","CdkTreeNodeDef","data","MatNestedTreeNode","_differs","IterableDiffers","nodeOutlet","ContentChildren","MatTreeNodePadding","CdkTreeNodePadding","level","indent","MatTree","recursive","MatTreeNodeToggle","CdkTreeNodeToggle","MAT_TREE_DIRECTIVES","CdkTreeModule","MatTreeModule","MatTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","_flattenNode","resultNodes","parentMap","flatNode","push","take","children","child","childParentMap","flattenNodes","structuredData","expandFlattenedNodes","nodes","treeControl","results","currentExpand","expand","isExpanded","MatTreeFlatDataSource","treeFlattener","initialData","_flattenedData","BehaviorSubject","_expandedData","_data","dataNodes","connect","collectionViewer","viewChange","expansionModel","disconnect","DataSource","MatTreeNestedDataSource","VERSION","Version","SELECT_PANEL_PADDING_X","MatStepHeader","iconOverrides","selected","optional","matStepperAnimations","horizontalStepTransition","trigger","state","transform","visibility","transition","animate","verticalStepTransition","MatStepperIcon","templateRef","TemplateRef","name","MatStep","stepper","_errorStateMatcher","isErrorState","control","form","originalErrorState","customErrorState","invalid","interacted","ErrorStateMatcher","MatStepper","arguments","icons","_icons","override","icon","_iconOverrides","_steps","_destroyed","_stateChanged","MatHorizontalStepper","aria-orientation","animations","MatVerticalStepper","ctorParameters","MatStepperNext","[type]","CdkStepper","CdkStepperNext","MatStepperPrevious","CdkStepperPrevious","MatButtonModule","CdkStepperModule","MatIconModule","MatStepLabel","MatStepperIntl","MatStepperModule","MatTable","CDK_TABLE_TEMPLATE","MatCellDef","CdkCellDef","MatHeaderCellDef","CdkHeaderCellDef","MatFooterCellDef","CdkFooterCellDef","MatColumnDef","CdkColumnDef","MatHeaderCell","columnDef","cssClassFriendlyName","CdkHeaderCell","MatFooterCell","CdkFooterCell","MatCell","CdkCell","MatHeaderRowDef","CdkHeaderRowDef","MatFooterRowDef","CdkFooterRowDef","MatRowDef","CdkRowDef","MatHeaderRow","CDK_ROW_TEMPLATE","MatFooterRow","CdkFooterRow","MatRow","CdkRow","EXPORTED_DECLARATIONS","CdkTableModule","MatTableModule","MatTableDataSource","_renderData","_filter","sortingDataAccessor","sortHeaderId","_isNumberValue","sortData","sort","direction","a","b","valueA","valueB","comparatorResult","filterPredicate","accumulator","currentTerm","key","dataStr","keys","reduce","toLowerCase","transformedFilter","indexOf","_updateChangeSubscription","_sort","_paginator","paginator","sortChange","initialized","pageChange","page","_renderChangesSubscription","dataStream","filteredData","combineLatest","_a","_filterData","orderedData","_orderData","_pageData","obj","_updatePaginator","startIndex","pageIndex","pageSize","splice","filteredDataLength","lastPageIndex","ceil","_MAT_INK_BAR_POSITIONER","InjectionToken","providedIn","factory","_matInkBarPositioner","left","offsetLeft","width","_inkBarPositioner","requestAnimationFrame","_setStyles","positions","inkBar","viewContainerRef","CdkPortal","MatTabBase","_MatTabMixinBase","_viewContainerRef","textLabel","_contentPortal","ngOnChanges","hasOwnProperty","ngOnInit","TemplatePortal","_explicitContent","_implicitContent","matTabsAnimations","translateTab","componentFactoryResolver","_host","_centeringSub","_leavingSub","_beforeCentering","startWith","_isCenterPosition","_position","isCentering","hasAttached","attach","_content","_afterLeavingCenter","detach","ComponentFactoryResolver","forwardRef","CdkPortalOutlet","_onCentering","_onCentered","_getLayoutDirection","dir","_origin","_onTranslateTabStarted","e","toState","_onTranslateTabComplete","fromState","_portalHost","PortalHostDirective","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","focus","getOffsetLeft","getOffsetWidth","MatTabHeaderBase","_MatTabHeaderMixinBase","_focusIndex","_scrollDistance","_selectedIndexChanged","_realignInkBar","_tabLabelCount","_updatePagination","_scrollToLabel","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","keyCode","RIGHT_ARROW","_focusNextTab","LEFT_ARROW","_focusPreviousTab","HOME","_focusFirstTab","END","_focusLastTab","ENTER","SPACE","resize","realign","_onContentChanges","_checkPaginationEnabled","_isValidIndex","_setTabFocus","containerEl","scrollLeft","_moveFocus","offset","tabs","translateX","v","_scrollHeader","scrollDir","viewLength","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","beforeVisiblePos","afterVisiblePos","MatSlider","step","thumbLabel","tickInterval","displayWith","vertical","input","_sliderWrapper","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MatSliderModule","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","dismiss","_onExit","_finishDismiss","closed","exit","clearTimeout","_durationTimeoutId","dismissWithAction","closeWithAction","_dismissAfter","duration","setTimeout","_open","dispose","dismissedByAction","afterDismissed","asObservable","afterOpened","_onEnter","MAT_SNACK_BAR_DATA","MatSnackBarConfig","politeness","announcementMessage","horizontalPosition","verticalPosition","matSnackBarAnimations","contentFade","opacity","AnimationDurations","COMPLEX","AnimationCurves","STANDARD_CURVE","snackBarState","EXITING","ACCELERATION_CURVE","ENTERING","DECELERATION_CURVE","SimpleSnackBar","snackBarRef","action","[@contentFade]","MatSnackBarContainer","_animationState","attachComponentPortal","portal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","attachTemplatePortal","onAnimationEnd","startsWith","_completeExit","onEnter_1","run","enter","snackBarConfig","detectChanges","onMicrotaskEmpty","panelClasses","panelClass","Array","isArray","cssClass","Error","[@state]","(@state.done)","MAT_SNACK_BAR_DEFAULT_OPTIONS","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","openFromComponent","component","config","_attach","openFromTemplate","open","message","_config","tslib_1.__assign","_attachSnackBarContainer","overlayRef","containerPortal","ComponentPortal","containerRef","instance","content","userConfig","_createOverlay","container","$implicit","injector","_createInjector","contentRef","observe","Breakpoints","Handset","detachments","matches","overlayElement","_animateSnackBar","announce","overlayConfig","OverlayConfig","positionStrategy","global","isRtl","isLeft","isRight","right","centerHorizontally","top","bottom","create","userInjector","injectionTokens","WeakMap","set","PortalInjector","Injectable","Overlay","LiveAnnouncer","Injector","BreakpointObserver","SkipSelf","OverlayModule","entryComponents","MatSnackBarModule","MatSortBase","_MatSortMixinBase","mixinInitialized","sortables","Map","_stateChanges","start","_direction","MatSort","getSortInvalidDirectionError","_disableClear","register","sortable","id","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","deregister","delete","getNextSortDirection","disableClear","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","_markInitialized","SORT_ANIMATION_TRANSITION","matSortAnimations","indicator","leftPointer","rightPointer","arrowOpacity","arrowPosition","keyframes","allowChildren","query","animateChild","sortButtonLabel","MatSortHeaderIntl","MAT_SORT_HEADER_INTL_PROVIDER","deps","useFactory","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","MatSortHeaderBase","_MatSortHeaderMixinBase","MatSortHeader","_intl","changeDetectorRef","_cdkColumnDef","_showIndicatorHint","_arrowDirection","_disableViewStateAnimation","getSortHeaderNotContainedWithinSortError","_rerenderSubscription","_isSorted","_updateArrowDirection","_viewState","_setAnimationTransitionState","_setIndicatorHintVisible","visible","_isDisabled","viewState","_getArrowDirectionState","_getArrowViewState","_getAriaSortAttribute","(mouseenter)","(longpress)","(mouseleave)","[attr.aria-sort]","[class.mat-sort-header-disabled]","MatSortModule","CdkStepLabel","optionalLabel","_focusMonitor","_element","monitor","_intlSubscription","stopMonitoring","_stringLabel","label","_templateLabel","_getHostElement","_getIconContext","MatDrawerContainer","MatSidenavContent","[style.margin-left.px]","[style.margin-right.px]","MatSidenav","_fixedBottomGap","matDrawerAnimations","transformDrawer","[@transform]","(@transform.start)","(@transform.done)","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","fixedInViewport","MatDrawer","MatSidenavContainer","[class.mat-drawer-container-explicit-backdrop]","_drawers","ContentChild","MatSidenavModule","ScrollDispatchModule","PlatformModule","MatDrawerContent","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlideToggle","multi","MatSlideToggleChange","source","checked","MatSlideToggleBase","_MatSlideToggleMixinBase","onChange","_","onTouched","_uniqueId","_required","_checked","_dragging","labelPosition","ariaLabel","ariaLabelledby","_inputElement","focusOrigin","_onInputFocusChange","_onChangeEvent","stopPropagation","_emitChangeEvent","_onInputClick","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","focusVia","toggle","_focusRipple","fadeOut","_ripple","launch","persistent","_getDragPercentage","distance","percentage","_thumbBarWidth","_previousChecked","_onDragStart","thumbEl","_thumbEl","_thumbBarEl","clientWidth","_onDrag","_dragPercentage","deltaX","dragX","_onDragEnd","newCheckedValue","_onLabelTextChange","[id]","[class.mat-checked]","[class.mat-disabled]","[class.mat-slide-toggle-label-before]","FocusMonitor","required","MatRipple","MatSlideToggleModule","MAT_SLIDER_VALUE_ACCESSOR","MatSliderChange","MatSliderBase","_MatSliderMixinBase","_invert","_max","_min","_step","_thumbLabel","_tickInterval","_value","_vertical","_percent","_isSliding","_tickIntervalPercent","_sliderDimensions","_controlValueAccessorChangeFn","_dirChangeSubscription","_calculatePercentage","_roundToDecimal","toString","split","pop","toFixed","_focusHostElement","blur","_blurHostElement","_clamp","invert","percent","_isMinValue","axis","_invertMouseCoords","_thumbGap","tickSize","backgroundSize","sign","rotate","_invertAxis","_onMouseenter","_getSliderDimensions","_updateTickIntervalPercent","_onClick","oldValue","_updateValueFromPosition","x","clientX","y","clientY","_emitInputEvent","_onSlide","_onSlideStart","center","_valueOnSlideStart","_onSlideEnd","_onFocus","_onBlur","_onKeydown","PAGE_UP","_increment","PAGE_DOWN","UP_ARROW","DOWN_ARROW","_onKeyup","numSteps","pos","size","posComponent","exactValue","_calculateValue","closestValue","round","parseFloat","trackSize","pixelsPerStep","stepsPerTick","pixelsPerTick","getBoundingClientRect","(focus)","(blur)","(keydown)","(keyup)","(slide)","(slideend)","(slidestart)","[tabIndex]","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[attr.aria-orientation]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[class.mat-slider-axis-inverted]","[class.mat-slider-sliding]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","MatProgressSpinner","mode","platform","[style.width.px]","[style.height.px]","MatSpinner","MatProgressSpinnerModule","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MatRadioGroup","MatRadioChange","MatRadioGroupBase","_MatRadioGroupMixinBase","_changeDetector","_name","_selected","_isInitialized","_labelPosition","_disabled","_updateRadioButtonNames","_markRadiosForCheck","newValue","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_touch","_radios","radio","isAlreadySelected","_markForCheck","MatRadioButton","descendants","MatRadioButtonBase","_MatRadioButtonMixinBase","radioGroup","_radioDispatcher","_removeUniqueSelectionListener","listen","newCheckedState","notify","_isRippleDisabled","disableRipple","_onInputChange","groupValueChanged","[class.mat-radio-checked]","[class.mat-radio-disabled]","[attr.id]","UniqueSelectionDispatcher","ariaDescribedby","MatRadioModule","box-shadow","MAT_DRAWER_DEFAULT_AUTOSIZE","_container","_margins","_contentMargins","margins","_focusTrapFactory","_doc","_elementFocusedBeforeDrawerWasOpened","_mode","_disableClose","_autoFocus","openedChange","opened","_isFocusTrapEnabled","_focusTrap","_trapFocus","_restoreFocus","close","onPositionChanged","_modeChanged","focusInitialElementWhenReady","hasMovedFocus","activeEl","activeElement","HTMLElement","_openedVia","enabled","destroy","isOpen","openedVia","_opened","_enableAnimations","_openedStream","openedStart","_closedStream","closedStart","backdropClick","_doCheckSubject","_autosize","defaultAutosize","drawer","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","_isDrawerOpen","_start","_end","_updateContentMargins","debounceTime","ngDoCheck","_setContainerClass","throwMatDuplicatedDrawerError","_right","_left","_closeModalDrawer","disableClose","_canHaveBackdrop","_isShowingBackdrop","_width","autosize","hasBackdrop","MatSelect","MatOptionModule","MatFormFieldModule","MatSelectTrigger","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","MatSelectModule","matTooltipAnimations","tooltipState","MAT_TOOLTIP_SCROLL_STRATEGY","overlay","inject","scrollStrategies","reposition","scrollThrottle","MAT_TOOLTIP_DEFAULT_OPTIONS","showDelay","hideDelay","touchendHideDelay","MatTooltip","_scrollDispatcher","_ariaDescriber","_scrollStrategy","_defaultOptions","_message","_manualListeners","IOS","nodeName","webkitUserSelect","userSelect","listener","addEventListener","_updatePosition","_tooltipInstance","updatePosition","removeDescription","_isTooltipVisible","_updateTooltipMessage","describe","_tooltipClass","_setTooltipClass","removeEventListener","clear","delay","_detach","_portal","TooltipComponent","afterHidden","isVisible","ESCAPE","_handleTouchend","_getOrigin","_getOverlayPosition","strategy","flexibleConnectedTo","withFlexibleDimensions","withViewportMargin","withPositions","main","fallback","scrollableAncestors","getAncestorScrollContainers","withScrollableContainers","positionChanges","scrollableViewProperties","isOverlayClipped","_setTransformOrigin","connectionPair","scrollStrategy","getConfig","originPosition","isLtr","originX","originY","getMatTooltipInvalidPositionError","_invertPosition","overlayPosition","overlayX","overlayY","tooltipClass","(touchend)","ScrollDispatcher","AriaDescriber","_visibility","_closeOnInteraction","_transformOrigin","_onHide","_isHandset","_hideTimeoutId","_showTimeoutId","_animationStart","_animationDone","_handleBodyInteraction","aria-hidden","MatTooltipModule","itemsPerPageLabel","nextPageLabel","previousPageLabel","firstPageLabel","lastPageLabel","getRangeLabel","MatPaginatorIntl","MAT_PAGINATOR_INTL_PROVIDER","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","PageEvent","MatPaginatorBase","_MatPaginatorBase","MatPaginator","_pageIndex","_length","_pageSizeOptions","_hidePageSize","_showFirstLastButtons","_intlChanges","_pageSize","_updateDisplayedPageSizeOptions","p","_initialized","nextPage","hasNextPage","previousPageIndex","_emitPageEvent","previousPage","hasPreviousPage","firstPage","lastPage","getNumberOfPages","numberOfPages","_changePageSize","floor","pageSizeOptions","_displayedPageSizeOptions","hidePageSize","showFirstLastButtons","MatPaginatorModule","MatProgressBarBase","_MatProgressBarMixinBase","progressbarId","MatProgressBar","_bufferValue","clamp","_primaryTransform","_bufferTransform","bufferValue","aria-valuemin","aria-valuemax","[attr.mode]","MatProgressBarModule","BASE_SIZE","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","INDETERMINATE_ANIMATION_TEMPLATE","_fallbackAnimation","_diameter","EDGE","TRIDENT","animationClass","diameters","_attachStyleNode","_strokeWidth","diameter","viewBox","_circleRadius","strokeWidth","PI","_strokeCircumference","styleTag","createElement","head","appendChild","sheet","insertRule","_getAnimationText","replace","Set","MatMenu","_onAnimationDone","matMenuAnimations","transformMenu","fadeInItems","MAT_MENU_DEFAULT_OPTIONS","yPosition","items","MatMenuItem","lazyContent","MatMenuContent","overlapTrigger","MAT_MENU_SCROLL_STRATEGY","MatMenuTrigger","_parentMenu","_menuItemInstance","_menuOpen","_closeSubscription","_hoverSubscription","_openedByMouse","menuOpened","onMenuOpen","menuClosed","onMenuClose","_triggersSubmenu","triggersSubmenu","menu","_checkMenu","reason","_destroyMenu","_hovered","openMenu","_cleanUpSubscriptions","toggleMenu","closeMenu","menuData","_menuClosingActions","_initMenu","_startAnimation","menuOpen","_resetMenu","_resetAnimation","parentMenu","_setMenuElevation","_setIsMenuOpen","focusFirstItem","setElevation","depth","_highlighted","throwMatMenuMissingError","_getOverlayConfig","_subscribeToPositions","_getPosition","backdropClass","posX","posY","setPositionClasses","xPosition","originFallbackX","_b","overlayFallbackY","_c","originFallbackY","_d","overlayFallbackX","offsetY","backdrop","parentClose","hover","_handleMousedown","isFakeMousedownFromScreenReader","aria-haspopup","(mousedown)","Self","_deprecatedMatMenuTriggerFor","MatMenuModule","matSelectAnimations","transformPanel","minWidth","group","fadeInContent","MAT_SELECT_SCROLL_STRATEGY","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinErrorState","_parentFormField","_scrollStrategyFactory","_panelOpen","_scrollTop","_multiple","_compareWith","o1","o2","_uid","_destroy","_triggerFontSize","_onChange","_onTouched","_optionIds","_panelDoneAnimating","_offsetY","_positions","_disableOptionCentering","focused","controlType","optionSelectionChanges","defer","options","option","onSelectionChange","onStable","switchMap","o","selectionChange","valueChange","valueAccessor","_placeholder","stateChanges","_selectionModel","getMatSelectDynamicMultipleError","getMatSelectNonFunctionValueError","_initializeSelection","_id","SelectionModel","multiple","_initKeyManager","_resetOptions","updateErrorState","panelOpen","_triggerRect","getComputedStyle","_keyManager","withHorizontalOrientation","_calculateOverlayPosition","_highlightCorrectOption","overlayDir","fontSize","_isRtl","_setSelectionByValue","empty","selectedOptions","viewValue","reverse","join","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","altKey","onKeydown","manager","setFirstItemActive","setLastItemActive","activeItem","previouslyFocusedIndex","activeItemIndex","shiftKey","_selectViaInteraction","_onPanelDone","offsetX","_onFadeInDone","_onAttached","positionChange","_calculateOverlayOffsetX","panel","scrollTop","_getPanelTheme","color","isEmpty","isUserInput","getMatSelectNonArrayValueError","_clearSelection","currentValue","_selectValue","_sortValues","correspondingOption","setActiveItem","error","console","warn","select","skip","deselect","ActiveDescendantKeyManager","withTypeAhead","withVerticalOrientation","tabOut","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","_setOptionIds","wasSelected","isSelected","_propagateChanges","fallbackValue","valueToEmit","activeOptionIndex","labelCount","_countGroupLabelsBeforeOption","optionGroups","_getOptionScrollPosition","_getItemHeight","_getOptionIndex","result","current","itemHeight","_getItemCount","panelHeight","scrollContainerHeight","maxScroll","selectedOptionOffset","scrollBuffer","_calculateOverlayScroll","_calculateOverlayOffsetY","_checkOverlayWithinViewport","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","placeholder","_getAriaActiveDescendant","overlayRect","viewportSize","getViewportSize","paddingWidth","SELECT_MULTIPLE_PANEL_PADDING_X","first","leftOverflow","rightOverflow","optionOffsetFromPanelTop","optionHeightAdjustment","maxOptionsDisplayed","firstDisplayedIndex","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","setDescribedByIds","ids","_ariaDescribedby","onContainerClick","[attr.tabindex]","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","MatFormFieldControl","MAT_OPTION_PARENT_COMPONENT","NgForm","FormGroupDirective","MatFormField","NgControl","CdkConnectedOverlay","MatOption","MatOptgroup","customTrigger","disableOptionCentering","compareWith","errorStateMatcher","MatSelectionList","MAT_SELECTION_LIST_VALUE_ACCESSOR","MatListOption","_MatSelectionListMixinBase","MatLineModule","MatPseudoCheckboxModule","MatList","MatNavList","MatListItem","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatListSubheaderCssMatStyler","MatDividerModule","MatListModule","_template","_componentFactoryResolver","_appRef","context","_outlet","DomPortalOutlet","insertBefore","outletElement","isAttached","ApplicationRef","sequence","MatMenuItemBase","_MatMenuItemMixinBase","_checkDisabled","_handleMouseEnter","getLabel","textNodeType","TEXT_NODE","output","length_1","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","_xPosition","_yPosition","_tabSubscription","_classList","_panelAnimationState","_overlapTrigger","_hasBackdrop","throwMatMenuInvalidPositionX","throwMatMenuInvalidPositionY","classes","className","FocusKeyManager","withWrap","item","setFocusOrigin","resetActiveItem","newElevation","customElevation","c","_previousElevation","_MatListMixinBase","_navList","_isNavList","_handleFocus","_handleBlur","[class.mat-list-item-avatar]","[class.mat-list-item-with-avatar]","MatSelectionListBase","MatListOptionBase","_MatListOptionMixinBase","MatSelectionListChange","selectionList","_hasFocus","checkboxPosition","_setSelected","_reportValueChange","MatLineSetter","_lines","_removeOptionFromList","_text","_setFocusedOption","tabindex","[class.mat-list-item-disabled]","[class.mat-list-item-focus]","[attr.aria-selected]","skipPredicate","_tempValues","_setOptionsFromValues","_modelChanges","_i","added","removed","optionIndex","setNextItemActive","previousFocusIndex","_toggleSelectOnFocusedOption","_getSelectedOptionValues","values","Boolean","focusedOption","focusedIndex","svgElement","MatIconRegistry","_createSvgElementForSingleIcon","responseText","svg","_svgElementFromString","_setSvgAttributes","_extractSvgIconFromSet","iconSet","iconName","iconSource","querySelector","iconElement","cloneNode","removeAttribute","_toSvgElement","str","div","innerHTML","ELEMENT_NODE","setAttribute","_fetchUrl","safeUrl","_httpClient","getMatIconNoHttpProviderError","url","_sanitizer","sanitize","SecurityContext","RESOURCE_URL","getMatIconFailedToSanitizeUrlError","inProgressFetch","_inProgressUrlFetches","req","responseType","finalize","share","_addSvgIconConfig","namespace","_svgIconConfigs","iconKey","_addSvgIconSetConfig","configNamespace","_iconSetConfigs","HttpClient","DomSanitizer","ICON_REGISTRY_PROVIDER","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","_MatIconMixinBase","MatIcon","_iconRegistry","ariaHidden","_inline","inline","_fontSet","_cleanupFontValue","_fontIcon","_splitIconName","parts","svgIcon","getNamedSvgIcon","_setSvgElement","err","log","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","classNameForFontAlias","getDefaultFontSetClass","_previousFontSetClass","fontIcon","_previousFontIconClass","[class.mat-icon-inline]","MatListBase","MatListItemBase","_MatListItemMixinBase","_disabledChange","MatDatepickerInput","_datepicker","_datepickerSubscription","_selectedChanged","_cvaOnChange","dateInput","MatDatepickerInputEvent","dateChange","_localeSubscription","_valueChange","registerOnValidatorChange","_validatorOnChange","validate","_validator","getPopupConnectionElementRef","getConnectedOverlayOrigin","_formField","_onInput","date","_dateAdapter","parse","_dateFormats","_lastValueValid","isValid","_getValidDateOrNull","_getThemePalette","_formatValue","format","display","isDateInstance","MAT_DATEPICKER_VALUE_ACCESSOR","MAT_DATEPICKER_VALIDATORS","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","DateAdapter","MAT_DATE_FORMATS","matDatepicker","matDatepickerFilter","MatDatepickerToggleIcon","MatDatepickerToggle","datepicker","_watchStateChanges","datepickerDisabled","inputDisabled","_datepickerInput","datepickerToggled","openedStream","closedStream","[class.mat-datepicker-toggle-active]","[class.mat-accent]","[class.mat-warn]","_customIcon","MatDialogModule","A11yModule","MatCalendar","MatCalendarBody","MatDatepicker","MatDatepickerContent","MatMonthView","MatYearView","MatMultiYearView","MatCalendarHeader","MatDatepickerIntl","MatDatepickerModule","_inset","MatDivider","[class.mat-divider-vertical]","[class.mat-divider-inset]","_hideToggle","displayMode","MatAccordion","hideToggle","CdkAccordion","matExpansionAnimations","indicatorRotate","expansionHeaderHeight","params","collapsedHeight","expandedHeight","bodyExpansion","MatExpansionPanelContent","uniqueId","MatExpansionPanel","accordion","_uniqueSelectionDispatcher","_inputChanges","_headerId","_getHideToggle","_hasSpacing","expanded","_getExpandedState","_lazyContent","_bodyAnimation","phaseName","outputs","[class.mat-expanded]","[class.mat-expansion-panel-spacing]","MatExpansionPanelActionRow","MatExpansionPanelHeader","_parentChangeSubscription","_toggle","_isExpanded","_getPanelId","_showToggle","_keydown","[attr.aria-controls]","[@expansionHeight]","MatExpansionPanelDescription","MatExpansionPanelTitle","CdkAccordionModule","MatExpansionModule","MatGridTile","_rowspan","_colspan","coerceToNumber","_setStyle","property","MatGridTileText","MatGridAvatarCssMatStyler","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","TileCoordinator","numColumns","tiles","columnIndex","rowIndex","tracker","fill","tile","_trackTile","lastRowMax","rowCount","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","rowspan","row","col","TileStyler","_rows","init","gutterSize","cols","_gutterSize","normalizeUnits","_cols","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","reset","list","_setListStyle","_tiles","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","FitTileStyler","gutterHeightPerTile","MatGridList","_gutter","coerceToString","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","rowHeight","_tileStyler","MatGridListModule","SvgIconConfig","_cachedIconsByUrl","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","addSvgIconInNamespace","addSvgIconLiteral","literal","addSvgIconLiteralInNamespace","sanitizedLiteral","HTML","getMatIconFailedToSanitizeLiteralError","addSvgIconSet","addSvgIconSetInNamespace","addSvgIconSetLiteral","addSvgIconSetLiteralInNamespace","registerFontClassAlias","alias","setDefaultFontSetClass","getSvgIconFromUrl","cachedIcon","cloneSvg","_loadSvgIconFromConfig","tap","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","observableThrow","getMatIconNameNotFoundError","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","catchError","forkJoin","foundIcon","svgText","_createCellForYear","year","yearName","getYearName","createDate","MatCalendarCell","_shouldEnableYear","maxDate","getYear","minDate","dateFilter","firstOfYear","addCalendarDays","selectedChange","yearSelected","_matCalendarBody","monthSelected","createMissingDateImplError","_activeDate","today","oldActiveDate","validDate","deserialize","clampDate","_init","_selectedMonth","_getMonthInCurrentYear","_minDate","_maxDate","_focusActiveCell","_monthSelected","month","normalizedDate","activeDate","daysInMonth","getNumDaysInMonth","getDate","_handleCalendarBodyKeydown","addCalendarMonths","getMonth","addCalendarYears","_todayMonth","_yearLabel","monthNames","getMonthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","toLocaleUpperCase","_shouldEnableMonth","activeYear","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","firstOfMonth","maxYear","maxMonth","minYear","minMonth","calendar","currentView","monthYearLabel","switchToMultiYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","multi-year","prevMultiYearLabel","nextMonthLabel","nextYearLabel","nextMultiYearLabel","currentPeriodClicked","previousClicked","nextClicked","previousEnabled","_isSameView","nextEnabled","date1","date2","startAt","startView","firstChange","view","monthView","yearView","multiYearView","headerComponent","_userSelection","matDatepickerAnimations","fadeInCalendar","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY","MatDatepickerContentBase","_MatDatepickerContentMixinBase","_popupRef","_positionChange","isAbove","_isAbove","[@transformPanel]","[class.mat-datepicker-content-touch]","[class.mat-datepicker-content-above]","_inputSubscription","_popupComponentRef","sameDate","_focusedElementBeforeOpen","touchUi","_openAsDialog","_openAsPopup","_dialogRef","_calendarPortal","completeClose","afterClosed","componentInstance","_setColor","_createPopup","setDirection","_getDirection","keydownEvents","withPush","MatDialog","calendarHeaderComponent","NG_VALIDATORS","target","targetElement","_parseValidator","matDatepickerParse","text","_minValidator","controlValue","compareDate","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_filterValidator","_dateFilter","Validators","compose","localeChanges","registerDatepicker","_registerInput","oldDate","[@slideDialog]","(@slideDialog.start)","(@slideDialog.done)","MatDialogContainer","MatDialogRef","_containerInstance","location","_afterOpen","_afterClosed","_beforeClose","_locationChanges","_animationStateChanged","_result","closeOnNavigation","dialogResult","detachBackdrop","_startExitAnimation","afterOpen","beforeClose","_getPositionStrategy","centerVertically","updateSize","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","block","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","_location","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","componentOrTemplateRef","_applyConfigDefaults","MatDialogConfig","getDialogById","dialogContainer","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","dialog","dialogConfig","minHeight","maxWidth","maxHeight","previousValue","overlayContainer","getContainerElement","parentElement","siblings","sibling","hasAttribute","getAttribute","Location","OverlayContainer","dialogElementUid","MatDialogClose","_dialog","getClosestDialog","proxiedChange","_matDialogClose","MatDialogTitle","_ariaLabelledBy","MatDialogContent","MatDialogActions","MatTextareaAutosize","minRows","maxRows","rows","matAutosizeMinRows","matAutosizeMaxRows","CdkTextareaAutosize","MAT_INPUT_INVALID_TYPES","MatInputBase","_MatInputMixinBase","MatInput","inputValueAccessor","_autofillMonitor","ngZone","_isServer","autofilled","_type","_readonly","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","el","selectionStart","selectionEnd","setSelectionRange","_validateType","_isTextarea","isAutofilled","_dirtyCheckNativeValue","isFocused","readonly","getMatInputUnsupportedTypeError","_isNeverEmpty","_isBadInput","validity","badInput","[class.mat-input-server]","[attr.placeholder]","[required]","[readonly]","AutofillMonitor","TextFieldModule","MatInputModule","calendarLabel","openCalendarLabel","displayValue","numCols","allowDisabledSelection","activeCell","cellAspectRatio","selectedValueChange","_cellClicked","cell","_isActiveCell","cellNumber","_firstRowOffset","attr.aria-readonly","todayValue","selectedValue","labelMinRequiredCells","activeDateChange","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","_weekdays","_hasSameMonthAndYear","_selectedDate","_getDateInCurrentMonth","_dateSelected","selectedYear","selectedMonth","selectedDate","_todayDate","_monthLabel","_firstWeekOffset","getDayOfWeek","_createWeekCells","dateNames","getDateNames","_weeks","_shouldEnableDate","dateA11yLabel","d1","d2","_selectedYear","_todayYear","activeOffset","_years","_yearSelected","yearsPerPage","_getActiveCell","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MAT_CHECKBOX_CLICK_ACTION","MatCheckbox","indeterminateChange","ripple","indeterminate","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","MatCheckboxModule","MatChipSelectionChange","MatChipBase","_MatChipMixinBase","CHIP_ATTRIBUTE_NAMES","MatChipAvatar","MatChipTrailingIcon","MatChip","chipListSelectable","_selectable","_removable","destroyed","_addHostClassName","_chipRipple","RippleRenderer","selectable","CHIP_ATTRIBUTE_NAMES_1","attr","tagName","chip","_removeTriggerEvents","selectViaInteraction","toggleSelected","removable","DELETE","BACKSPACE","_blur","[class.mat-chip-selected]","[class.mat-chip-with-avatar]","[class.mat-chip-with-trailing-icon]","[class.mat-chip-disabled]","avatar","trailingIcon","removeIcon","MatChipRemove","_parentChip","MAT_CHIPS_DEFAULT_OPTIONS","MatChipListBase","_MatChipListMixinBase","MatChipListChange","MatChipList","_lastDestroyedIndex","_chipSet","_tabOutSubscription","_tabIndex","_userTabIndex","ariaOrientation","_chipInput","chips","_changeSubscription","_resetChips","_updateTabIndex","_updateFocusForDestroyedChips","_chipRemoveSubscription","_dropSubscriptions","registerInput","inputElement","_focusInput","_isInputEmpty","_updateKeyManager","chipIndex","chipsArray","newFocusIndex","focusChip","correspondingChip","_markAsTouched","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","chipSelectionChanges","chipFocusChanges","updateActiveItemIndex","chipBlurChanges","chipRemoveChanges","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","[class.mat-chip-list-required]","MatChipInput","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","_emitChipEnd","addOnBlur","_focus","chipList","CHIP_DECLARATIONS","ɵ0","useValue","MatChipsModule","ariaDescribedBy","autoFocus","matDialogAnimations","slideDialog","_elementFocusedBeforeDialogWasOpened","_state","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","toFocus","_onAnimationStart","MatAnchor","MatButton","MatButtonToggleGroupBase","_MatButtonToggleGroupMixinBase","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","MatButtonToggleGroupMultiple","_uniqueIdCounter","MatButtonToggleChange","_buttonToggles","_syncButtonToggle","_isSelected","_isPrechecked","_rawValue","[class.mat-button-toggle-vertical]","MatButtonToggle","MatButtonToggleBase","_MatButtonToggleMixinBase","toggleGroup","_isSingleSelector","buttonToggleGroup","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","MatButtonToggleModule","MatCardContent","MatCardTitle","MatCardSubtitle","align","[class.mat-card-actions-align-end]","MatCardActions","MatCardFooter","MatCardImage","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardXlImage","MatCardAvatar","MatCard","MatCardHeader","MatCardTitleGroup","MatCardModule","MatCheckboxChange","MatCheckboxBase","_MatCheckboxMixinBase","_clickAction","_currentAnimationClass","_currentCheckState","TransitionCheckState","Init","_indeterminate","changed","_transitionCheckState","Indeterminate","Checked","Unchecked","_getAriaChecked","newState","oldState","_getAnimationClassForCheckStateTransition","_removeFocusRipple","_onInteractionEvent","animSuffix","openPanel","MatAutocompleteTrigger","_canOpen","_previousValue","_attachOverlay","_floatLabel","shouldAnimate","floatLabel","_animateAndLockLabel","_manuallyFloatingLabel","_resetLabel","_scrollToOption","autocomplete","newScrollPosition","_getScrollTop","_setScrollTop","_subscribeToClosingActions","firstStable","_zone","optionChanges","_positionStrategy","reapplyLastPosition","_resetActiveItem","_setVisibility","panelClosingActions","_setValueAndClose","_destroyPanel","closePanel","_setTriggerValue","toDisplay","inputValue","_control","_clearPreviousSelectedOption","_emitSelectEvent","getMatAutocompleteMissingPanelError","_getHostWidth","_viewportSubscription","_closingActionsSubscription","wasOpen","_isOpen","_overlayAttached","_getConnectedElement","autoActiveFirstOption","readOnly","aria-autocomplete","(focusin)","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","Host","MatAutocomplete","MatAutocompleteModule","MatBadge","_color","_overlap","val","_updateTextContent","_description","newDescription","_updateHostAriaDescription","_hidden","isAfter","description","_badgeElement","_createBadgeElement","badgeElement","oldDescription","colorPalette","[class.mat-badge-overlap]","[class.mat-badge-above]","[class.mat-badge-below]","[class.mat-badge-before]","[class.mat-badge-after]","[class.mat-badge-small]","[class.mat-badge-medium]","[class.mat-badge-large]","[class.mat-badge-hidden]","overlap","hidden","MatBadgeModule","MAT_BOTTOM_SHEET_DATA","MatBottomSheetConfig","MatBottomSheetRef","bottomSheetConfig","_keydownEvents","matBottomSheetAnimations","bottomSheetState","MatBottomSheetContainer","breakpointObserver","_elementFocusedBeforeOpened","_breakpointSubscription","Medium","Large","XLarge","_toggleClass","isMatched","_validatePortalAttached","_setPanelClass","(@state.start)","FocusTrapFactory","MatBottomSheet","_parentBottomSheet","_bottomSheetRefAtThisLevel","_openedBottomSheetRef","_attachContainer","ref","bottomSheetRef","MatBottomSheetModule","DEFAULT_ROUND_BUTTON_COLOR","DEFAULT_FLAT_BUTTON_COLOR","BUTTON_HOST_ATTRIBUTES","MatButtonBase","_MatButtonMixinBase","_isRoundButton","_hasHostAttributes","_isIconButton","BUTTON_HOST_ATTRIBUTES_1","attributes","attribute","focusMonitor","stopImmediatePropagation","_emitSelectionChangeEvent","MatOptionSelectionChange","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]","MAT_LABEL_GLOBAL_OPTIONS","MatError","matFormFieldAnimations","transitionMessages","[class.mat-right]","MatHint","MatLabel","MatPlaceholder","MatPrefix","MatSuffix","MatFormFieldBase","_MatFormFieldMixinBase","MAT_FORM_FIELD_DEFAULT_OPTIONS","labelOptions","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_outlineGapWidth","_outlineGapStart","_initialGapCalculated","_labelOptions","float","_appearance","appearance","_hideRequiredMarker","_processHints","_connectionContainerRef","_validateControlChild","_validatePlaceholders","_syncDescribedByIds","valueChanges","_prefixChildren","_suffixChildren","_hintChildren","_errorChildren","updateOutlineGap","_shouldForward","prop","_hasPlaceholder","_placeholderChild","_hasLabel","_labelChild","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_hasFloatingLabel","_getDisplayedMessages","errorState","fromEvent","_label","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","hintLabel","getMatFormFieldDuplicatedHintError","startHint","endHint","getMatFormFieldMissingControlError","containerStart","_getStartEnd","labelStart","labelWidth","outlineGapPadding","rect","[class.mat-form-field-appearance-standard]","[class.mat-form-field-appearance-fill]","[class.mat-form-field-appearance-outline]","[class.mat-form-field-appearance-legacy]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-form-field-autofilled]","[class.mat-focused]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","hideRequiredMarker","underlineRef","_inputContainerRef","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","MatAutocompleteBase","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","defaults","showPanel","optionSelected","_autoActiveFirstOption","_componentDestroyed","_closeKeyEventStream","optionSelections","_outsideClickStream","clickTarget","formField","activeOption","prevActiveItem","TAB","_handleInput","__extends","d","__","constructor","extendStatics","base","class_1","defaultColor","_disableRipple","defaultTabIndex","matcher","_pendingSubscribers","Observable","subscriber","_notifySubscriber","range","valueFunction","valuesArray","enforceStyleRecalculation","window","getPropertyValue","distanceToFurthestCorner","distX","distY","sqrt","optionsArray","groups","groupCounter","optionOffset","currentScrollPosition","optionHeight","defaultOptions","provider","exp","match","parentRegistry","httpClient","sanitizer","parentIntl","sortOrder","setPrototypeOf","__proto__","__assign","assign","s","n","SHARP_CURVE","MATERIAL_SANITY_CHECKS","_sanityChecksEnabled","_hasDoneGlobalChecks","_hasCheckedHammer","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","doctype","testElement","body","computedStyle","_checkHammerIsAvailable","BidiModule","MAT_DATE_LOCALE","LOCALE_ID","MAT_DATE_LOCALE_PROVIDER","_localeChanges","setLocale","locale","second","firstValid","secondValid","SUPPORTS_INTL_API","Intl","DEFAULT_MONTH_NAMES","short","String","DEFAULT_DATE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","NativeDateAdapter","matDateLocale","useUtcForDisplay","_clampDate","getFullYear","getDay","dtf_1","DateTimeFormat","timeZone","_stripDirectionalityCharacters","_format","Date","dtf_2","day","dtf_3","weekday","dtf","_createDateWithOverflow","clone","displayFormat","setFullYear","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","test","isNaN","getTime","NaN","UTC","getHours","getMinutes","getSeconds","getMilliseconds","MAT_NATIVE_DATE_FORMATS","NativeDateModule","MatNativeDateModule","ShowOnDirtyErrorStateMatcher","dirty","submitted","touched","MAT_HAMMER_OPTIONS","_hammerOptions","commonModule","_hammer","Hammer","events","buildHammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","MatLine","_setLineClass","count","_resetClasses","_setClass","isAdd","RippleRef","_renderer","RippleState","HIDDEN","fadeOutRipple","defaultRippleAnimationConfig","enterDuration","exitDuration","ignoreMouseEventsTimeout","_target","_isPointerDown","_triggerEvents","_activeRipples","_eventOptions","supportsPassiveEventListeners","passive","onMousedown","isSyntheticEvent","_lastTouchStartEvent","now","rippleDisabled","fadeInRipple","onTouchStart","touches","onPointerUp","VISIBLE","FADING_IN","_containerElement","containerRect","_containerRect","animationConfig","centered","radius","transitionDuration","rippleRef","_mostRecentTransientRipple","runTimeoutOutsideZone","isMostRecentTransientRipple","wasActive","rippleEl","FADING_OUT","fadeOutAll","_triggerElement","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","_trigger","configOrX","[class.mat-ripple-unbounded]","unbounded","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatPseudoCheckbox","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter","_labelId","[class.mat-optgroup-disabled]","_parent","_active","_mostRecentViewValue","setActiveStyles","setInactiveStyles","ngAfterViewChecked"],"mappings":"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"}