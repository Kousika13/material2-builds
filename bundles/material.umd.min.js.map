{"version":3,"file":"material.umd.min.js","sources":["../../src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/lib/tabs/tabs-module.ts","../../src/lib/toolbar/toolbar.ts","../../src/lib/toolbar/toolbar-module.ts","../../src/lib/tree/outlet.ts","../../src/lib/tree/node.ts","../../src/lib/tree/padding.ts","../../src/lib/tree/tree.ts","../../src/lib/tree/toggle.ts","../../src/lib/tree/tree-module.ts","../../src/lib/tree/data-source/flat-data-source.ts","../../src/lib/tree/data-source/nested-data-source.ts","../../src/lib/version.ts","../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/core/testing/month-constants.ts","../../src/lib/expansion/expansion-animations.ts","../../src/lib/select/select.ts","../../src/lib/tooltip/tooltip.ts","../../src/lib/table/row.ts","../../src/lib/table/table-module.ts","../../src/lib/table/table-data-source.ts","../../src/lib/tabs/ink-bar.ts","../../src/lib/tabs/tab-content.ts","../../src/lib/tabs/tab-label.ts","../../src/lib/tabs/tab.ts","../../src/lib/tabs/tabs-animations.ts","../../src/lib/tabs/tab-body.ts","../../src/lib/tabs/tab-label-wrapper.ts","../../src/lib/tabs/tab-header.ts","../../src/lib/tabs/tab-group.ts","../../src/lib/sort/sort-animations.ts","../../src/lib/sort/sort-header-intl.ts","../../src/lib/sort/sort-header.ts","../../src/lib/sort/sort-module.ts","../../src/lib/stepper/step-label.ts","../../src/lib/stepper/stepper-intl.ts","../../src/lib/stepper/step-header.ts","../../src/lib/stepper/stepper-animations.ts","../../src/lib/stepper/stepper-icon.ts","../../src/lib/stepper/stepper.ts","../../src/lib/stepper/stepper-button.ts","../../src/lib/stepper/stepper-module.ts","../../src/lib/table/table.ts","../../src/lib/table/cell.ts","../../src/lib/slider/slider.ts","../../src/lib/slider/slider-module.ts","../../src/lib/snack-bar/snack-bar-ref.ts","../../src/lib/snack-bar/snack-bar-config.ts","../../src/lib/snack-bar/simple-snack-bar.ts","../../src/lib/snack-bar/snack-bar-animations.ts","../../src/lib/snack-bar/snack-bar-container.ts","../../src/lib/snack-bar/snack-bar-module.ts","../../src/lib/snack-bar/snack-bar.ts","../../src/lib/sort/sort.ts","../../src/lib/sidenav/drawer.ts","../../src/lib/sidenav/sidenav.ts","../../src/lib/sidenav/sidenav-module.ts","../../src/lib/slide-toggle/slide-toggle-config.ts","../../src/lib/slide-toggle/slide-toggle.ts","../../src/lib/slide-toggle/slide-toggle-module.ts","../../src/lib/progress-bar/progress-bar.ts","../../src/lib/progress-bar/progress-bar-module.ts","../../src/lib/progress-spinner/progress-spinner.ts","../../src/lib/progress-spinner/progress-spinner-module.ts","../../src/lib/radio/radio.ts","../../src/lib/radio/radio-module.ts","../../src/lib/sidenav/drawer-animations.ts","../../src/lib/select/select-module.ts","../../src/lib/tooltip/tooltip-animations.ts","../../src/lib/tooltip/tooltip-module.ts","../../src/lib/paginator/paginator-intl.ts","../../src/lib/paginator/paginator.ts","../../src/lib/paginator/paginator-module.ts","../../src/lib/menu/menu-content.ts","../../src/lib/menu/menu-animations.ts","../../src/lib/menu/menu-panel.ts","../../src/lib/menu/menu-item.ts","../../src/lib/menu/menu-directive.ts","../../src/lib/menu/menu-trigger.ts","../../src/lib/menu/menu-module.ts","../../src/lib/select/select-animations.ts","../../src/lib/list/selection-list.ts","../../src/lib/list/list-module.ts","../../src/lib/list/list.ts","../../src/lib/grid-list/grid-tile.ts","../../src/lib/grid-list/tile-coordinator.ts","../../src/lib/grid-list/tile-styler.ts","../../src/lib/grid-list/grid-list.ts","../../src/lib/grid-list/grid-list-module.ts","../../src/lib/icon/icon-registry.ts","../../src/lib/icon/icon.ts","../../src/lib/icon/icon-module.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-module.ts","../../src/lib/divider/divider.ts","../../src/lib/divider/divider-module.ts","../../src/lib/expansion/accordion-base.ts","../../src/lib/expansion/expansion-panel-content.ts","../../src/lib/expansion/expansion-panel.ts","../../src/lib/expansion/expansion-panel-header.ts","../../src/lib/expansion/accordion.ts","../../src/lib/expansion/expansion-module.ts","../../src/lib/grid-list/grid-list-base.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/datepicker/multi-year-view.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/datepicker/calendar.ts","../../src/lib/datepicker/datepicker-animations.ts","../../src/lib/chips/chip-list.ts","../../src/lib/chips/chip-input.ts","../../src/lib/chips/chips-module.ts","../../src/lib/dialog/dialog-config.ts","../../src/lib/dialog/dialog-animations.ts","../../src/lib/dialog/dialog-container.ts","../../src/lib/dialog/dialog-ref.ts","../../src/lib/dialog/dialog.ts","../../src/lib/dialog/dialog-content-directives.ts","../../src/lib/dialog/dialog-module.ts","../../src/lib/input/autosize.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/input.ts","../../src/lib/input/input-module.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/chips/chip.ts","../../src/lib/chips/chip-default-options.ts","../../src/lib/button/button.ts","../../src/lib/button/button-module.ts","../../src/lib/button-toggle/button-toggle.ts","../../src/lib/button-toggle/button-toggle-module.ts","../../src/lib/card/card.ts","../../src/lib/card/card-module.ts","../../src/lib/checkbox/checkbox-config.ts","../../src/lib/autocomplete/autocomplete.ts","../../src/lib/autocomplete/autocomplete-origin.ts","../../src/lib/autocomplete/autocomplete-module.ts","../../src/lib/badge/badge.ts","../../src/lib/badge/badge-module.ts","../../src/lib/bottom-sheet/bottom-sheet-config.ts","../../src/lib/bottom-sheet/bottom-sheet-animations.ts","../../src/lib/bottom-sheet/bottom-sheet-container.ts","../../src/lib/bottom-sheet/bottom-sheet-module.ts","../../src/lib/bottom-sheet/bottom-sheet-ref.ts","../../src/lib/bottom-sheet/bottom-sheet.ts","../../src/lib/core/option/option.ts","../../src/lib/core/option/index.ts","../../src/lib/core/label/label-options.ts","../../src/lib/form-field/error.ts","../../src/lib/form-field/form-field-animations.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/label.ts","../../src/lib/form-field/placeholder.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field-module.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/disable-ripple.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/core/common-behaviors/initialized.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/line/line.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/menu/menu-errors.ts","../../src/lib/select/select-errors.ts","../../src/lib/sort/sort-errors.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/datetime/date-formats.ts","../../src/lib/core/datetime/native-date-formats.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/option/optgroup.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor, CanColorCtor,\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  HasTabIndex, HasTabIndexCtor,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex, RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from '../ink-bar';\nimport {FocusMonitor} from '@angular/cdk/a11y';\n\n\n// Boilerplate for applying mixins to MatTabNav.\n/** @docs-private */\nexport class MatTabNavBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabNavMixinBase: CanDisableRippleCtor & CanColorCtor & typeof MatTabNavBase =\n    mixinDisableRipple(mixinColor(MatTabNavBase, 'primary'));\n\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  exportAs: 'matTabNavBar, matTabNav',\n  inputs: ['color', 'disableRipple'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTabNav extends _MatTabNavMixinBase\n    implements AfterContentChecked, AfterContentInit, CanColor, CanDisableRipple, OnDestroy {\n\n  /** Subject that emits when the component has been destroyed. */\n  private readonly _onDestroy = new Subject<void>();\n\n  private _activeLinkChanged: boolean;\n  private _activeLinkElement: ElementRef<HTMLElement> | null;\n\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n\n  /** Query list of all tab links of the tab navigation. */\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true})\n  _tabLinks: QueryList<MatTabLink>;\n\n  /** Background color of the tab nav. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  constructor(elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler) {\n    super(elementRef);\n  }\n\n  /**\n   * Notifies the component that the active link has been changed.\n   * @breaking-change 8.0.0 `element` parameter to be removed.\n   */\n  updateActiveLink(element: ElementRef) {\n    // Note: keeping the `element` for backwards-compat, but isn't being used for anything.\n    // @breaking-change 8.0.0\n    this._activeLinkChanged = !!element;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  ngAfterContentInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      const dirChange = this._dir ? this._dir.change : observableOf(null);\n\n      return merge(dirChange, this._viewportRuler.change(10))\n          .pipe(takeUntil(this._onDestroy))\n          .subscribe(() => this._alignInkBar());\n    });\n  }\n\n  /** Checks if the active link has been changed and, if so, will update the ink bar. */\n  ngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      const activeTab = this._tabLinks.find(tab => tab.active);\n\n      this._activeLinkElement = activeTab ? activeTab._elementRef : null;\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Aligns the ink bar to the active link. */\n  _alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.show();\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    } else {\n      this._inkBar.hide();\n    }\n  }\n}\n\n\n// Boilerplate for applying mixins to MatTabLink.\nexport class MatTabLinkBase {}\nexport const _MatTabLinkMixinBase:\n    HasTabIndexCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatTabLinkBase =\n        mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\n\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n@Directive({\n  selector: '[mat-tab-link], [matTabLink]',\n  exportAs: 'matTabLink',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-current]': 'active',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabIndex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled',\n    '[class.mat-tab-label-active]': 'active',\n  }\n})\nexport class MatTabLink extends _MatTabLinkMixinBase\n    implements OnDestroy, CanDisable, CanDisableRipple, HasTabIndex, RippleTarget {\n\n  /** Whether the tab link is active or not. */\n  protected _isActive: boolean = false;\n\n  /** Reference to the RippleRenderer for the tab-link. */\n  protected _tabLinkRipple: RippleRenderer;\n\n  /** Whether the ripples are globally disabled through the RippleGlobalOptions */\n  private _ripplesGloballyDisabled = false;\n\n  /** Whether the link is active. */\n  @Input()\n  get active(): boolean { return this._isActive; }\n  set active(value: boolean) {\n    if (value !== this._isActive) {\n      this._isActive = value;\n      this._tabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._tabNavBar.disableRipple ||\n      this._ripplesGloballyDisabled;\n  }\n\n  constructor(private _tabNavBar: MatTabNav,\n              public _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Attribute('tabindex') tabIndex: string,\n              /**\n               * @deprecated\n               * @breaking-change 8.0.0 `_focusMonitor` parameter to be made required.\n               */\n              private _focusMonitor?: FocusMonitor) {\n    super();\n\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._tabLinkRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    if (globalOptions) {\n      // TODO(paul): Do not copy each option manually. Allow dynamic global option changes: #9729\n      this._ripplesGloballyDisabled = !!globalOptions.disabled;\n      this.rippleConfig = {\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n        animation: globalOptions.animation,\n      };\n    }\n\n    if (_focusMonitor) {\n      _focusMonitor.monitor(_elementRef);\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabLinkRipple._removeTriggerEvents();\n\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabContent} from './tab-content';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n    A11yModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n    MatTabContent,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader,\n    MatTabContent,\n  ],\n})\nexport class MatTabsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Inject,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\n\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nexport class MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatToolbarMixinBase: CanColorCtor & typeof MatToolbarBase =\n    mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': '_toolbarRows.length > 0',\n    '[class.mat-toolbar-single-row]': '_toolbarRows.length === 0',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n  private _document: Document;\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(\n    elementRef: ElementRef,\n    private _platform: Platform,\n    @Inject(DOCUMENT) document?: any) {\n    super(elementRef);\n\n    // TODO: make the document a required param when doing breaking changes.\n    this._document = document;\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = Array.from<HTMLElement>(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n      .some(node => !!(node.textContent && node.textContent.trim()));\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodeOutlet} from '@angular/cdk/tree';\nimport {\n  Directive,\n  ViewContainerRef,\n} from '@angular/core';\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({\n  selector: '[matTreeNodeOutlet]'\n})\nexport class MatTreeNodeOutlet implements CdkTreeNodeOutlet {\n  constructor(public viewContainer: ViewContainerRef) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkNestedTreeNode, CdkTree, CdkTreeNode, CdkTreeNodeDef} from '@angular/cdk/tree';\nimport {\n  AfterContentInit,\n  Attribute,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Input,\n  IterableDiffers,\n  OnDestroy,\n  QueryList,\n} from '@angular/core';\nimport {\n  CanDisable, CanDisableCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkTreeNodeDef = CdkTreeNodeDef;\n\nexport const _MatTreeNodeMixinBase: HasTabIndexCtor & CanDisableCtor & typeof CdkTreeNode =\n    mixinTabIndex(mixinDisabled(CdkTreeNode));\n\nexport const _MatNestedTreeNodeMixinBase:\n    HasTabIndexCtor & CanDisableCtor & typeof CdkNestedTreeNode =\n        mixinTabIndex(mixinDisabled(CdkNestedTreeNode));\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n  selector: 'mat-tree-node',\n  exportAs: 'matTreeNode',\n  inputs: ['disabled', 'tabIndex'],\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n    '[attr.role]': 'role',\n    'class': 'mat-tree-node'\n  },\n  providers: [{provide: CdkTreeNode, useExisting: MatTreeNode}]\n})\nexport class MatTreeNode<T> extends _MatTreeNodeMixinBase<T>\n    implements CanDisable, HasTabIndex {\n  @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n}\n\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeDef]',\n  inputs: [\n    'when: matTreeNodeDefWhen'\n  ],\n  providers: [{provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef}]\n})\nexport class MatTreeNodeDef<T> extends _CdkTreeNodeDef<T> {\n  @Input('matTreeNode') data: T;\n}\n\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\n@Directive({\n  selector: 'mat-nested-tree-node',\n  exportAs: 'matNestedTreeNode',\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.role]': 'role',\n    'class': 'mat-nested-tree-node',\n  },\n  inputs: ['disabled', 'tabIndex'],\n  providers: [\n    {provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CdkTreeNode, useExisting: MatNestedTreeNode}\n  ]\n})\nexport class MatNestedTreeNode<T> extends _MatNestedTreeNodeMixinBase<T>\n    implements AfterContentInit, CanDisable, HasTabIndex, OnDestroy {\n\n  @Input('matNestedTreeNode') node: T;\n\n  @ContentChildren(MatTreeNodeOutlet) nodeOutlet: QueryList<MatTreeNodeOutlet>;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              protected _differs: IterableDiffers,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree, _differs);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n\n  // This is a workaround for https://github.com/angular/angular/issues/23091\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  // TODO(tinayuangao): Remove when the angular issue #23091 is fixed\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodePadding} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkTreeNodePadding = CdkTreeNodePadding;\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodePadding]',\n  providers: [{provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding}]\n})\nexport class MatTreeNodePadding<T> extends _CdkTreeNodePadding<T> {\n\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  @Input('matTreeNodePadding') level: number;\n\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n  @Input('matTreeNodePaddingIndent') indent: number;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTree} from '@angular/cdk/tree';\nimport {ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation} from '@angular/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkTree = CdkTree;\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tree',\n  exportAs: 'matTree',\n  template: `<ng-container matTreeNodeOutlet></ng-container>`,\n  host: {\n    'class': 'mat-tree',\n    'role': 'tree',\n  },\n  styleUrls: ['tree.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [{provide: CdkTree, useExisting: MatTree}]\n})\nexport class MatTree<T> extends _CdkTree<T> {\n  // Outlets within the tree's template where the dataNodes will be inserted.\n  @ViewChild(MatTreeNodeOutlet) _nodeOutlet: MatTreeNodeOutlet;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTreeNodeToggle} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkTreeNodeToggle = CdkTreeNodeToggle;\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeToggle]',\n  host: {\n    '(click)': '_toggle($event)',\n  },\n  providers: [{provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle}]\n})\nexport class MatTreeNodeToggle<T> extends _CdkTreeNodeToggle<T> {\n  @Input('matTreeNodeToggleRecursive') recursive: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatNestedTreeNode, MatTreeNodeDef, MatTreeNode} from './node';\nimport {MatTree} from './tree';\nimport {MatTreeNodeToggle} from './toggle';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {MatTreeNodePadding} from './padding';\n\nconst MAT_TREE_DIRECTIVES = [\n  MatNestedTreeNode,\n  MatTreeNodeDef,\n  MatTreeNodePadding,\n  MatTreeNodeToggle,\n  MatTree,\n  MatTreeNode,\n  MatTreeNodeOutlet\n];\n\n@NgModule({\n  imports: [CdkTreeModule, CommonModule, MatCommonModule],\n  exports: MAT_TREE_DIRECTIVES,\n  declarations: MAT_TREE_DIRECTIVES,\n})\nexport class MatTreeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {FlatTreeControl, TreeControl} from '@angular/cdk/tree';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map, take} from 'rxjs/operators';\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class MatTreeFlattener<T, F> {\n\n  constructor(public transformFunction: (node: T, level: number) => F,\n              public getLevel: (node: F) => number,\n              public isExpandable: (node: F) => boolean,\n              public getChildren: (node: T) => Observable<T[]> | T[]) {}\n\n  _flattenNode(node: T, level: number,\n               resultNodes: F[], parentMap: boolean[]): F[] {\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n\n    if (this.isExpandable(flatNode)) {\n      const childrenNodes = this.getChildren(node);\n      if (Array.isArray(childrenNodes)) {\n        this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n      } else {\n        childrenNodes.pipe(take(1)).subscribe(children => {\n          this._flattenChildren(children, level, resultNodes, parentMap);\n        });\n      }\n    }\n    return resultNodes;\n  }\n\n  _flattenChildren(children: T[], level: number,\n                   resultNodes: F[], parentMap: boolean[]): void {\n    children.forEach((child, index) => {\n      let childParentMap: boolean[] = parentMap.slice();\n      childParentMap.push(index != children.length - 1);\n      this._flattenNode(child, level + 1, resultNodes, childParentMap);\n    });\n  }\n\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   */\n  flattenNodes(structuredData: T[]): F[] {\n    let resultNodes: F[] = [];\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   */\n  expandFlattenedNodes(nodes: F[], treeControl: TreeControl<F>): F[] {\n    let results: F[] = [];\n    let currentExpand: boolean[] = [];\n    currentExpand[0] = true;\n\n    nodes.forEach(node => {\n      let expand = true;\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n      if (expand) {\n        results.push(node);\n      }\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nexport class MatTreeFlatDataSource<T, F> extends DataSource<F> {\n  _flattenedData = new BehaviorSubject<F[]>([]);\n\n  _expandedData = new BehaviorSubject<F[]>([]);\n\n  _data: BehaviorSubject<T[]>;\n  get data() { return this._data.value; }\n  set data(value: T[]) {\n    this._data.next(value);\n    this._flattenedData.next(this.treeFlattener.flattenNodes(this.data));\n    this.treeControl.dataNodes = this._flattenedData.value;\n  }\n\n  constructor(private treeControl: FlatTreeControl<F>,\n              private treeFlattener: MatTreeFlattener<T, F>,\n              initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n  }\n\n  connect(collectionViewer: CollectionViewer): Observable<F[]> {\n    const changes = [\n      collectionViewer.viewChange,\n      this.treeControl.expansionModel.onChange,\n      this._flattenedData\n    ];\n    return merge(...changes).pipe(map(() => {\n      this._expandedData.next(\n        this.treeFlattener.expandFlattenedNodes(this._flattenedData.value, this.treeControl));\n      return this._expandedData.value;\n    }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nexport class MatTreeNestedDataSource<T> extends DataSource<T> {\n  _data = new BehaviorSubject<T[]>([]);\n\n  /**\n   * Data for the nested tree\n   */\n  get data() { return this._data.value; }\n  set data(value: T[]) { this._data.next(value); }\n\n  connect(collectionViewer: CollectionViewer): Observable<T[]> {\n    return merge(...[collectionViewer.viewChange, this._data])\n      .pipe(map(() => {\n        return this.data;\n      }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('7.0.1-83fc823');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {filter, take, switchMap, delay, tap, map} from 'rxjs/operators';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  MatOption,\n  MatOptionSelectionChange,\n} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {Subscription, defer, fromEvent, merge, of as observableOf, Subject, Observable} from 'rxjs';\nimport {MatAutocomplete} from './autocomplete';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    '[attr.autocomplete]': 'autocompleteAttribute',\n    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n    '[attr.aria-activedescendant]': 'activeOption?.id',\n    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n    '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  exportAs: 'matAutocompleteTrigger',\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal;\n  private _componentDestroyed = false;\n  private _autocompleteDisabled = false;\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n  private _previousValue: string | number | null;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Subscription to viewport size changes. */\n  private _viewportSubscription = Subscription.EMPTY;\n\n  /**\n   * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n   * closed autocomplete from being reopened if the user switches to another browser tab and then\n   * comes back.\n   */\n  private _canOpenOnNextFocus = true;\n\n  /** Stream of keyboard events that can close the panel. */\n  private readonly _closeKeyEventStream = new Subject<void>();\n\n  /**\n   * Event handler for when the window is blurred. Needs to be an\n   * arrow function in order to preserve the context.\n   */\n  private _windowBlurHandler = () => {\n    // If the user blurred the window while the autocomplete is focused, it means that it'll be\n    // refocused when they come back. In this case we want to skip the first focus event, if the\n    // pane was closed, in order to avoid reopening it unintentionally.\n    this._canOpenOnNextFocus =\n        document.activeElement !== this._element.nativeElement || this.panelOpen;\n  }\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when autocomplete has been touched` */\n  _onTouched = () => {};\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  /**\n   * Reference relative to which to position the autocomplete panel.\n   * Defaults to the autocomplete trigger element.\n   */\n  @Input('matAutocompleteConnectedTo') connectedTo: MatAutocompleteOrigin;\n\n  /**\n   * `autocomplete` attribute to be set on the input element.\n   * @docs-private\n   */\n  @Input('autocomplete') autocompleteAttribute: string = 'off';\n\n  /**\n   * Whether the autocomplete is disabled. When disabled, the element will\n   * act as a regular input and the user won't be able to open the panel.\n   */\n  @Input('matAutocompleteDisabled')\n  get autocompleteDisabled(): boolean { return this._autocompleteDisabled; }\n  set autocompleteDisabled(value: boolean) {\n    this._autocompleteDisabled = coerceBooleanProperty(value);\n  }\n\n  constructor(private _element: ElementRef<HTMLInputElement>, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @breaking-change 8.0.0 Make `_viewportRuler` required.\n              private _viewportRuler?: ViewportRuler) {\n\n    if (typeof window !== 'undefined') {\n      _zone.runOutsideAngular(() => {\n        window.addEventListener('blur', this._windowBlurHandler);\n      });\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngOnDestroy() {\n    if (typeof window !== 'undefined') {\n      window.removeEventListener('blur', this._windowBlurHandler);\n    }\n\n    this._viewportSubscription.unsubscribe();\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._overlayAttached && this.autocomplete.showPanel;\n  }\n  private _overlayAttached: boolean = false;\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (!this._overlayAttached) {\n      return;\n    }\n\n    if (this.panelOpen) {\n      // Only emit if the panel was visible.\n      this.autocomplete.closed.emit();\n    }\n\n    this.autocomplete._isOpen = this._overlayAttached = false;\n\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n\n    // Note that in some cases this can end up being called after the component is destroyed.\n    // Add a check to ensure that we don't try to run change detection on a destroyed view.\n    if (!this._componentDestroyed) {\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n   * within the viewport.\n   */\n  updatePosition(): void {\n    if (this._overlayAttached) {\n      this._overlayRef!.updatePosition();\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange|null> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)),\n      this._closeKeyEventStream,\n      this._getOutsideClickStream(),\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n          observableOf()\n    ).pipe(\n      // Normalize the output so we return a consistent type.\n      map(event => event instanceof MatOptionSelectionChange ? event : null)\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  readonly optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .asObservable()\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  });\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private _getOutsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return merge(\n      fromEvent<MouseEvent>(this._document, 'click'),\n      fromEvent<TouchEvent>(this._document, 'touchend')\n    )\n    .pipe(filter(event => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._overlayAttached &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n    if (keyCode === ESCAPE) {\n      event.preventDefault();\n    }\n\n    if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else if (this.autocomplete) {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    let target = event.target as HTMLInputElement;\n    let value: number | string | null = target.value;\n\n    // Based on `NumberValueAccessor` from forms.\n    if (target.type === 'number') {\n      value = value == '' ? null : parseFloat(value);\n    }\n\n    // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._previousValue !== value && document.activeElement === event.target) {\n      this._previousValue = value;\n      this._onChange(value);\n\n      if (this._canOpen()) {\n        this.openPanel();\n      }\n    }\n  }\n\n  _handleFocus(): void {\n    if (!this._canOpenOnNextFocus) {\n      this._canOpenOnNextFocus = true;\n    } else if (this._canOpen()) {\n      this._previousValue = this._element.nativeElement.value;\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const index = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(index,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n\n    const newScrollPosition = _getOptionScrollPosition(\n      index + labelCount,\n      AUTOCOMPLETE_OPTION_HEIGHT,\n      this.autocomplete._getScrollTop(),\n      AUTOCOMPLETE_PANEL_HEIGHT\n    );\n\n    this.autocomplete._setScrollTop(newScrollPosition);\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.reapplyLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n      .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n          this._resetActiveItem();\n          this.autocomplete._setVisibility();\n\n          if (this.panelOpen) {\n            this._overlayRef!.updatePosition();\n          }\n\n          return this.panelClosingActions;\n        }),\n        // when the first closing event occurs...\n        take(1)\n      )\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n\n    this._previousValue = inputValue;\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      this._overlayRef = this._overlay.create(this._getOverlayConfig());\n\n      // Use the `keydownEvents` in order to take advantage of\n      // the overlay event targeting provided by the CDK overlay.\n      this._overlayRef.keydownEvents().subscribe(event => {\n        // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n        // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n        if (event.keyCode === ESCAPE || (event.keyCode === UP_ARROW && event.altKey)) {\n          this._resetActiveItem();\n          this._closeKeyEventStream.next();\n        }\n      });\n\n      if (this._viewportRuler) {\n        this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n          if (this.panelOpen && this._overlayRef) {\n            this._overlayRef.updateSize({width: this._getPanelWidth()});\n          }\n        });\n      }\n    } else {\n      // Update the panel width and direction, in case anything has changed.\n      this._overlayRef.updateSize({width: this._getPanelWidth()});\n    }\n\n    if (this._overlayRef && !this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    const wasOpen = this.panelOpen;\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._overlayAttached = true;\n\n    // We need to do an extra `panelOpen` check in here, because the\n    // autocomplete won't be shown if there are no options.\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\n      this.autocomplete.opened.emit();\n    }\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getPanelWidth(),\n      direction: this._dir\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy = this._overlay.position()\n      .flexibleConnectedTo(this._getConnectedElement())\n      .withFlexibleDimensions(false)\n      .withPush(false)\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom',\n\n          // The overlay edge connected to the trigger should have squared corners, while\n          // the opposite end has rounded corners. We apply a CSS class to swap the\n          // border-radius based on the overlay position.\n          panelClass: 'mat-autocomplete-panel-above'\n        }\n      ]);\n\n    return this._positionStrategy;\n  }\n\n  private _getConnectedElement(): ElementRef {\n    if (this.connectedTo) {\n      return this.connectedTo.elementRef;\n    }\n\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n  }\n\n  private _getPanelWidth(): number | string {\n    return this.autocomplete.panelWidth || this._getHostWidth();\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n  }\n\n  /** Determines whether the panel can be opened. */\n  private _canOpen(): boolean {\n    const element = this._element.nativeElement;\n    return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n    OCT = 9, NOV = 10, DEC = 11;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  animateChild,\n  group,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/**\n * Animations used by the Material expansion panel.\n *\n * A bug in angular animation's `state` when ViewContainers are moved using ViewContainerRef.move()\n * causes the animation state of moved components to become `void` upon exit, and not update again\n * upon reentry into the DOM.  This can lead a to situation for the expansion panel where the state\n * of the panel is `expanded` or `collapsed` but the animation state is `void`.\n *\n * To correctly handle animating to the next state, we animate between `void` and `collapsed` which\n * are defined to have the same styles. Since angular animates from the current styles to the\n * destination state's style definition, in situations where we are moving from `void`'s styles to\n * `collapsed` this acts a noop since no style values change.\n *\n * In the case where angular's animation state is out of sync with the expansion panel's state, the\n * expansion panel being `expanded` and angular animations being `void`, the animation from the\n * `expanded`'s effective styles (though in a `void` animation state) to the collapsed state will\n * occur as expected.\n *\n * Angular Bug: https://github.com/angular/angular/issues/18847\n *\n * @docs-private\n */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed, void', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed, void', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '48px'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '64px'}\n    }),\n    transition('expanded <=> collapsed, void => collapsed', group([\n      query('@indicatorRotate', animateChild(), {optional: true}),\n      animate(EXPANSION_PANEL_ANIMATION_TIMING),\n    ])),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed, void', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  A,\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  SPACE,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {CdkConnectedOverlay, Overlay, ScrollStrategy} from '@angular/cdk/overlay';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinErrorState,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {defer, merge, Observable, Subject} from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  startWith,\n  switchMap,\n  take,\n  takeUntil,\n} from 'rxjs/operators';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n// TODO(josephperrott): Revert to a constant after 2018 spec updates are fully merged.\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * Calculated as:\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 16px.\n */\nexport let SELECT_MULTIPLE_PANEL_PADDING_X = 0;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nexport class MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatSelectMixinBase:\n    CanDisableCtor &\n    HasTabIndexCtor &\n    CanDisableRippleCtor &\n    CanUpdateErrorStateCtor &\n    typeof MatSelectBase =\n        mixinDisableRipple(mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_getAriaLabel()',\n    '[attr.aria-labelledby]': '_getAriaLabelledby()',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    '[class.mat-select-empty]': 'empty',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanel\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  private _scrollStrategyFactory: () => ScrollStrategy;\n\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form. */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Emits when the panel element is finished transforming in. */\n  _panelDoneAnimatingStream = new Subject<string>();\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy: ScrollStrategy;\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the component is disabling centering of the active option over the trigger. */\n  private _disableOptionCentering: boolean = false;\n\n  /** Whether the select is focused. */\n  get focused(): boolean {\n    return this._focused || this._panelOpen;\n  }\n  /**\n   * @deprecated Setter to be removed as this property is intended to be readonly.\n   * @breaking-change 8.0.0\n   */\n  set focused(value: boolean) {\n    this._focused = value;\n  }\n  private _focused = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger') trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether to center the active option over the trigger. */\n  @Input()\n  get disableOptionCentering(): boolean { return this._disableOptionCentering; }\n  set disableOptionCentering(value: boolean) {\n    this._disableOptionCentering = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Function used to sort the values in a select in multiple mode.\n   * Follows the same logic as `Array.prototype.sort`.\n   */\n  @Input() sortComparator: (a: MatOption, b: MatOption, options: MatOption[]) => number;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.options) {\n      return merge(...this.options.map(option => option.onSelectionChange));\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  });\n\n  /** Event emitted when the select panel has been toggled. */\n  @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the select has been opened. */\n  @Output('opened') readonly _openedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => o), map(() => {}));\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed') readonly _closedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => !o), map(() => {}));\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectChange> =\n      new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) scrollStrategyFactory: any) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this._scrollStrategyFactory = scrollStrategyFactory;\n    this._scrollStrategy = this._scrollStrategyFactory();\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple);\n    this.stateChanges.next();\n\n    // We need `distinctUntilChanged` here, because some browsers will\n    // fire the animation end event twice for the same animation. See:\n    // https://github.com/angular/angular/issues/24084\n    this._panelDoneAnimatingStream\n      .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n      .subscribe(() => {\n        if (this.panelOpen) {\n          this._scrollTop = 0;\n          this.openedChange.emit(true);\n        } else {\n          this.openedChange.emit(false);\n          this.overlayDir.offsetX = 0;\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this._selectionModel.onChange.pipe(takeUntil(this._destroy)).subscribe(event => {\n      event.added.forEach(option => option.select());\n      event.removed.forEach(option => option.deselect());\n    });\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes.disabled) {\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement).fontSize || '0');\n\n    this._panelOpen = true;\n    this._keyManager.withHorizontalOrientation(null);\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n                       keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n    const manager = this._keyManager;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      if (keyCode === HOME || keyCode === END) {\n        keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        manager.onKeydown(event);\n      }\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else if (this._multiple && keyCode === A && event.ctrlKey) {\n      event.preventDefault();\n      const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n\n      this.options.forEach(option => {\n        if (!option.disabled) {\n          hasDeselectedOptions ? option.select() : option.deselect();\n        }\n      });\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this._focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this._focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._setPseudoCheckboxPaddingSize();\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  // TODO(josephperrott): Remove after 2018 spec updates are fully merged.\n  /** Sets the pseudo checkbox padding size based on the width of the pseudo checkbox. */\n  private _setPseudoCheckboxPaddingSize() {\n    if (!SELECT_MULTIPLE_PANEL_PADDING_X && this.multiple) {\n      const pseudoCheckbox = this.panel.nativeElement.querySelector('.mat-pseudo-checkbox');\n      if (pseudoCheckbox) {\n        SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + pseudoCheckbox.offsetWidth;\n      }\n    }\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[]): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._selectionModel.clear();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n      this._sortValues();\n    } else {\n      this._selectionModel.clear();\n      const correspondingOption = this._selectValue(value);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(correspondingOption);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      this._selectionModel.select(correspondingOption);\n    }\n\n    return correspondingOption;\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\n      .withTypeAhead()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n      // Restore focus to the trigger before closing. Ensures that the focus\n      // position won't be lost if the user got focus into the overlay.\n      this.focus();\n      this.close();\n    });\n\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n      this._onSelect(event.source, event.isUserInput);\n\n      if (event.isUserInput && !this.multiple && this._panelOpen) {\n        this.close();\n        this.focus();\n      }\n    });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption, isUserInput: boolean): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    if (option.value == null && !this._multiple) {\n      option.deselect();\n      this._selectionModel.clear();\n      this._propagateChanges(option.value);\n    } else {\n      option.selected ? this._selectionModel.select(option) : this._selectionModel.deselect(option);\n\n      if (isUserInput) {\n        this._keyManager.setActiveItem(option);\n      }\n\n      if (this.multiple) {\n        this._sortValues();\n\n        if (isUserInput) {\n          // In case the user selected the option with their mouse, we\n          // want to restore focus back to the trigger, in order to\n          // prevent the select keyboard controls from clashing with\n          // the ones from `mat-option`.\n          this.focus();\n        }\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n\n    this.stateChanges.next();\n  }\n\n  /** Sorts the selected values in the selected based on their order in the panel. */\n  private _sortValues() {\n    if (this.multiple) {\n      const options = this.options.toArray();\n\n      this._selectionModel.sort((a, b) => {\n        return this.sortComparator ? this.sortComparator(a, b, options) :\n                                     options.indexOf(a) - options.indexOf(b);\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options,\n        this.optionGroups);\n\n    this.panel.nativeElement.scrollTop = _getOptionScrollPosition(\n      activeOptionIndex + labelCount,\n      this._getItemHeight(),\n      this.panel.nativeElement.scrollTop,\n      SELECT_PANEL_MAX_HEIGHT\n    );\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number | undefined, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options,\n        this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  _getAriaLabel(): string | null {\n    // If an ariaLabelledby value has been set by the consumer, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Returns the aria-labelledby of the select component. */\n  _getAriaLabelledby(): string | null {\n    if (this.ariaLabelledby) {\n      return this.ariaLabelledby;\n    }\n\n    // Note: we use `_getAriaLabel` here, because we want to check whether there's a\n    // computed label. `this.ariaLabel` is only the user-specified label.\n    if (!this._parentFormField || !this._parentFormField._hasFloatingLabel() ||\n      this._getAriaLabel()) {\n      return null;\n    }\n\n    return this._parentFormField._labelId || null;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n    // blurry content in some browsers.\n    this.overlayDir.offsetX = Math.round(offsetX);\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    // Disable offset if requested by user by returning 0 as value to offset\n    if (this._disableOptionCentering) {\n      return 0;\n    }\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height difference,\n    // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n    // The value is rounded to prevent some browsers from blurring the content.\n    return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {BreakpointObserver, Breakpoints, BreakpointState} from '@angular/cdk/layout';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConnectionPosition,\n  OverlayRef,\n  VerticalConnectionPos,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject, Observable} from 'rxjs';\nimport {matTooltipAnimations} from './tooltip-animations';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * @docs-private\n */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition({scrollThrottle: SCROLL_THROTTLE_MS});\n}\n\n/** @docs-private */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options', {\n      providedIn: 'root',\n      factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY(): MatTooltipDefaultOptions {\n  return {\n    showDelay: 0,\n    hideDelay: 0,\n    touchendHideDelay: 1500,\n  };\n}\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.io/design/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': '_handleTouchend()',\n  },\n})\nexport class MatTooltip implements OnDestroy {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _portal: ComponentPortal<TooltipComponent>;\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      if (this._overlayRef) {\n        this._updatePosition();\n\n        if (this._tooltipInstance) {\n          this._tooltipInstance!.show(0);\n        }\n\n        this._overlayRef.updatePosition();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay = this._defaultOptions.showDelay;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay = this._defaultOptions.hideDelay;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, EventListenerOrEventListenerObject>();\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    private _platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) scrollStrategy: any,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions: MatTooltipDefaultOptions) {\n\n    this._scrollStrategy = scrollStrategy;\n    const element: HTMLElement = _elementRef.nativeElement;\n    const elementStyle = element.style as CSSStyleDeclaration & {webkitUserDrag: string};\n\n    // The mouse events shouldn't be bound on mobile devices, because they can prevent the\n    // first tap from firing its click event or can cause the tooltip to open for clicks.\n    if (!_platform.IOS && !_platform.ANDROID) {\n      this._manualListeners\n        .set('mouseenter', () => this.show())\n        .set('mouseleave', () => this.hide())\n        .forEach((listener, event) => element.addEventListener(event, listener));\n    }\n\n    if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS and in Safari, because it will prevent users from typing in inputs.\n      // Since `user-select: none` is not needed for the `longpress` event and can cause unexpected\n      // behavior for text fields, we always clear the `user-select` to avoid such issues.\n      elementStyle.webkitUserSelect = elementStyle.userSelect = elementStyle.msUserSelect = '';\n    }\n\n    // Hammer applies `-webkit-user-drag: none` on all elements by default,\n    // which breaks the native drag&drop. If the consumer explicitly made\n    // the element draggable, clear the `-webkit-user-drag`.\n    if (element.draggable && elementStyle.webkitUserDrag === 'none') {\n      elementStyle.webkitUserDrag = '';\n    }\n\n    _focusMonitor.monitor(_elementRef).pipe(takeUntil(this._destroyed)).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin === 'keyboard') {\n        _ngZone.run(() => this.show());\n      }\n    });\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._tooltipInstance = null;\n    }\n\n    // Clean up the event listeners set in the constructor\n    if (!this._platform.IOS) {\n      this._manualListeners.forEach((listener, event) =>\n        this._elementRef.nativeElement.removeEventListener(event, listener));\n\n      this._manualListeners.clear();\n    }\n\n    this._destroyed.next();\n    this._destroyed.complete();\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message || (this._isTooltipVisible() &&\n      !this._tooltipInstance!._showTimeoutId && !this._tooltipInstance!._hideTimeoutId)) {\n        return;\n    }\n\n    const overlayRef = this._createOverlay();\n\n    this._detach();\n    this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    this._tooltipInstance = overlayRef.attach(this._portal).instance;\n    this._tooltipInstance.afterHidden()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Handles the touchend events on the host element. */\n  _handleTouchend() {\n    this.hide(this._defaultOptions.touchendHideDelay);\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    if (this._overlayRef) {\n      return this._overlayRef;\n    }\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay.position()\n      .flexibleConnectedTo(this._elementRef)\n      .withTransformOriginOn('.mat-tooltip')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8);\n\n    const scrollableAncestors = this._scrollDispatcher\n      .getAncestorScrollContainers(this._elementRef);\n\n    strategy.withScrollableContainers(scrollableAncestors);\n\n    strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        }\n      }\n    });\n\n    this._overlayRef = this._overlay.create({\n      direction: this._dir,\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._updatePosition();\n\n    this._overlayRef.detachments()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n\n    return this._overlayRef;\n  }\n\n  /** Detaches the currently-attached tooltip. */\n  private _detach() {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /** Updates the position of the current tooltip. */\n  private _updatePosition() {\n    const position =\n        this._overlayRef!.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    position.withPositions([\n      {...origin.main, ...overlay.main},\n      {...origin.fallback, ...overlay.fallback}\n    ]);\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let originPosition: OriginConnectionPosition;\n\n    if (position == 'above' || position == 'below') {\n      originPosition = {originX: 'center', originY: position == 'above' ? 'top' : 'bottom'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      originPosition = {originX: 'start', originY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      originPosition = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(originPosition.originX, originPosition.originY);\n\n    return {\n      main: originPosition,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let overlayPosition: OverlayConnectionPosition;\n\n    if (position == 'above') {\n      overlayPosition = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (position == 'below') {\n      overlayPosition = {overlayX: 'center', overlayY: 'top'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      overlayPosition = {overlayX: 'end', overlayY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      overlayPosition = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n    return {\n      main: overlayPosition,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(\n        take(1),\n        takeUntil(this._destroyed)\n      ).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number | null;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number | null;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private readonly _onHide: Subject<any> = new Subject();\n\n  /** Stream that emits whether the user has a handset-sized display.  */\n  _isHandset: Observable<BreakpointState> = this._breakpointObserver.observe(Breakpoints.Handset);\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _breakpointObserver: BreakpointObserver) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n      this._hideTimeoutId = null;\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n      this._showTimeoutId = null;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n      this._showTimeoutId = null;\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n      this._hideTimeoutId = null;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      this._closeOnInteraction = true;\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.io/design/components/tooltips.html#behavior\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  ViewEncapsulation\n} from '@angular/core';\nimport {\n  CDK_ROW_TEMPLATE, CdkFooterRow, CdkFooterRowDef,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef,\n} from '@angular/cdk/table';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkHeaderRowDef = CdkHeaderRowDef;\nexport const _CdkFooterRowDef = CdkFooterRowDef;\nexport const _CdkRowDef = CdkRowDef;\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef', 'sticky: matHeaderRowDefSticky'],\n})\nexport class MatHeaderRowDef extends _CdkHeaderRowDef {}\n\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\n@Directive({\n  selector: '[matFooterRowDef]',\n  providers: [{provide: CdkFooterRowDef, useExisting: MatFooterRowDef}],\n  inputs: ['columns: matFooterRowDef', 'sticky: matFooterRowDefSticky'],\n})\nexport class MatFooterRowDef extends _CdkFooterRowDef {}\n\n/**\n * Data row definition for the mat-table.\n * Captures the data row's template and other properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends _CdkRowDef<T> {}\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row, tr[mat-header-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n  providers: [{provide: CdkHeaderRow, useExisting: MatHeaderRow}],\n})\nexport class MatHeaderRow extends CdkHeaderRow { }\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-footer-row, tr[mat-footer-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-footer-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matFooterRow',\n  providers: [{provide: CdkFooterRow, useExisting: MatFooterRow}],\n})\nexport class MatFooterRow extends CdkFooterRow { }\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row, tr[mat-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n  providers: [{provide: CdkRow, useExisting: MatRow}],\n})\nexport class MatRow extends CdkRow { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {\n  MatCell,\n  MatCellDef,\n  MatColumnDef,\n  MatFooterCell,\n  MatFooterCellDef,\n  MatHeaderCell,\n  MatHeaderCellDef\n} from './cell';\nimport {\n  MatFooterRow,\n  MatFooterRowDef,\n  MatHeaderRow,\n  MatHeaderRowDef,\n  MatRow,\n  MatRowDef\n} from './row';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\nconst EXPORTED_DECLARATIONS = [\n  // Table\n  MatTable,\n\n  // Template defs\n  MatHeaderCellDef,\n  MatHeaderRowDef,\n  MatColumnDef,\n  MatCellDef,\n  MatRowDef,\n  MatFooterCellDef,\n  MatFooterRowDef,\n\n  // Cell directives\n  MatHeaderCell,\n  MatCell,\n  MatFooterCell,\n\n  // Row directions\n  MatHeaderRow,\n  MatRow,\n  MatFooterRow,\n];\n\n@NgModule({\n  imports: [CdkTableModule, CommonModule, MatCommonModule],\n  exports: EXPORTED_DECLARATIONS,\n  declarations: EXPORTED_DECLARATIONS,\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {_isNumberValue} from '@angular/cdk/coercion';\nimport {DataSource} from '@angular/cdk/table';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  merge,\n  Observable,\n  of as observableOf,\n  Subscription\n} from 'rxjs';\nimport {MatPaginator, PageEvent} from '@angular/material/paginator';\nimport {MatSort, Sort} from '@angular/material/sort';\nimport {map} from 'rxjs/operators';\n\n/**\n * Corresponds to `Number.MAX_SAFE_INTEGER`. Moved out into a variable here due to\n * flaky browser support and the value not being defined in Closure's typings.\n */\nconst MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport class MatTableDataSource<T> extends DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private readonly _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private readonly _filter = new BehaviorSubject<string>('');\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription = Subscription.EMPTY;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() { return this._data.value; }\n  set data(data: T[]) { this._data.next(data); }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter(): string { return this._filter.value; }\n  set filter(filter: string) { this._filter.next(filter); }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort(): MatSort | null { return this._sort; }\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): MatPaginator | null { return this._paginator; }\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting through\n   * the default sortData function.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value = (data as {[key: string]: any})[sortHeaderId];\n\n    if (_isNumberValue(value)) {\n      const numberValue = Number(value);\n\n      // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we\n      // leave them as strings. For more info: https://goo.gl/y5vbSg\n      return numberValue < MAX_SAFE_INTEGER ? numberValue : value;\n    }\n\n    return value;\n  }\n\n  /**\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n   * By default, the function retrieves the active sort and its direction and compares data\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n   * of data ordering.\n   * @param data The array of data that should be sorted.\n   * @param sort The connected MatSort that holds the current sort state.\n   */\n  sortData: ((data: T[], sort: MatSort) => T[]) = (data: T[], sort: MatSort): T[] => {\n    const active = sort.active;\n    const direction = sort.direction;\n    if (!active || direction == '') { return data; }\n\n    return data.sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n      // one value exists while the other doesn't. In this case, existing value should come first.\n      // This avoids inconsistent results when comparing values to undefined/null.\n      // If neither value exists, return 0 (equal).\n      let comparatorResult = 0;\n      if (valueA != null && valueB != null) {\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      } else if (valueA != null) {\n        comparatorResult = 1;\n      } else if (valueB != null) {\n        comparatorResult = -1;\n      }\n\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const dataStr = Object.keys(data).reduce((currentTerm: string, key: string) => {\n      // Use an obscure Unicode character to delimit the words in the concatenated string.\n      // This avoids matches where the values of two columns combined will match the user's query\n      // (e.g. `Flute` and `Stop` will match `Test`). The character is intended to be something\n      // that has a very low chance of being typed in by somebody in a text field. This one in\n      // particular is \"White up-pointing triangle with dot\" from\n      // https://en.wikipedia.org/wiki/List_of_Unicode_characters\n      return currentTerm + (data as {[key: string]: any})[key] + '◬';\n    }, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // The events should emit whenever the component emits a change or initializes, or if no\n    // component is provided, a stream with just a null event should be provided.\n    // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n    // pipeline can progress to the next step. Note that the value from these streams are not used,\n    // they purely act as a signal to progress in the pipeline.\n    const sortChange: Observable<Sort|null|void> = this._sort ?\n        merge<Sort|void>(this._sort.sortChange, this._sort.initialized) :\n        observableOf(null);\n    const pageChange: Observable<PageEvent|null|void> = this._paginator ?\n        merge<PageEvent|void>(this._paginator.page, this._paginator.initialized) :\n        observableOf(null);\n\n    const dataStream = this._data;\n    // Watch for base data or filter changes to provide a filtered set of data.\n    const filteredData = combineLatest(dataStream, this._filter)\n      .pipe(map(([data]) => this._filterData(data)));\n    // Watch for filtered data or sort changes to provide an ordered set of data.\n    const orderedData = combineLatest(filteredData, sortChange)\n      .pipe(map(([data]) => this._orderData(data)));\n    // Watch for ordered data or page changes to provide a paged set of data.\n    const paginatedData = combineLatest(orderedData, pageChange)\n      .pipe(map(([data]) => this._pageData(data)));\n    // Watched for paged data changes and send the result to the table to render.\n    this._renderChangesSubscription.unsubscribe();\n    this._renderChangesSubscription = paginatedData.subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overridden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) { return data; }\n\n    return this.sortData(data.slice(), this.sort);\n  }\n\n  /**\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice().splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      if (!this.paginator) { return; }\n\n      this.paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (this.paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(this.paginator.length / this.paginator.pageSize) - 1 || 0;\n        this.paginator.pageIndex = Math.min(this.paginator.pageIndex, lastPageIndex);\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Inject, InjectionToken, NgZone} from '@angular/core';\n\n\n/**\n * Interface for a a MatInkBar positioner method, defining the positioning and width of the ink\n * bar in a set of tabs.\n */\n// tslint:disable-next-line class-name Using leading underscore to denote internal interface.\nexport interface _MatInkBarPositioner {\n  (element: HTMLElement): { left: string, width: string };\n}\n\n/** Injection token for the MatInkBar's Positioner. */\nexport const _MAT_INK_BAR_POSITIONER =\n  new InjectionToken<_MatInkBarPositioner>('MatInkBarPositioner', {\n    providedIn: 'root',\n    factory: _MAT_INK_BAR_POSITIONER_FACTORY\n  });\n\n/**\n * The default positioner function for the MatInkBar.\n * @docs-private\n */\nexport function _MAT_INK_BAR_POSITIONER_FACTORY(): _MatInkBarPositioner {\n  const method = (element: HTMLElement) => ({\n    left: element ? (element.offsetLeft || 0) + 'px' : '0',\n    width: element ? (element.offsetWidth || 0) + 'px' : '0',\n  });\n\n  return method;\n}\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(_MAT_INK_BAR_POSITIONER) private _inkBarPositioner: _MatInkBarPositioner) { }\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n  private _setStyles(element: HTMLElement) {\n    const positions = this._inkBarPositioner(element);\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\n\n    inkBar.style.left = positions.left;\n    inkBar.style.width = positions.width;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/** Decorates the `ng-template` tags and reads out the template from it. */\n@Directive({selector: '[matTabContent]'})\nexport class MatTabContent {\n  constructor(public template: TemplateRef<any>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n// TODO(devversion): Workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkPortal = CdkPortal;\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n})\nexport class MatTabLabel extends _CdkPortal {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {MatTabContent} from './tab-content';\nimport {MatTabLabel} from './tab-label';\n\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nexport class MatTabBase {}\nexport const _MatTabMixinBase: CanDisableCtor & typeof MatTabBase =\n    mixinDisabled(MatTabBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matTab',\n})\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n  @ContentChild(MatTabLabel) templateLabel: MatTabLabel;\n\n  /**\n   * Template provided in the tab content that will be used if present, used to enable lazy-loading\n   */\n  @ContentChild(MatTabContent, {read: TemplateRef}) _explicitContent: TemplateRef<any>;\n\n  /** Template inside the MatTab view that contains an `<ng-content>`. */\n  @ViewChild(TemplateRef) _implicitContent: TemplateRef<any>;\n\n  /** Plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** Aria label for the tab. */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Reference to the element that the tab is labelled by.\n   * Will be cleared if `aria-label` is set at the same time.\n   */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the internal state of the tab changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel') || changes.hasOwnProperty('disabled')) {\n      this._stateChanges.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._stateChanges.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(\n        this._explicitContent || this._implicitContent, this._viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material tabs.\n * @docs-private\n */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n\n    // If the tab is either on the left or right, we additionally add a `min-height` of 1px\n    // in order to ensure that the element has a height before its state changes. This is\n    // necessary because Chrome does seem to skip the transition in RTL mode if the element does\n    // not have a static height and is not rendered. See related issue: #9465\n    state('left', style({transform: 'translate3d(-100%, 0, 0)', minHeight: '1px'})),\n    state('right', style({transform: 'translate3d(100%, 0, 0)', minHeight: '1px'})),\n\n    transition('* => left, * => right, left => center, right => center',\n        animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)'}),\n      animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)'}),\n      animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n    ])\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectorRef,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n  ViewChild,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet, PortalHostDirective} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {Subscription} from 'rxjs';\nimport {matTabsAnimations} from './tabs-animations';\nimport {startWith} from 'rxjs/operators';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]'\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** Subscription to events for when the tab body begins centering. */\n  private _centeringSub = Subscription.EMPTY;\n  /** Subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub = Subscription.EMPTY;\n\n  constructor(\n    componentFactoryResolver: ComponentFactoryResolver,\n    viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\n      super(componentFactoryResolver, viewContainerRef);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    this._centeringSub = this._host._beforeCentering\n      .pipe(startWith(this._host._isCenterPosition(this._host._position)))\n      .subscribe((isCentering: boolean) => {\n        if (isCentering && !this.hasAttached()) {\n          this.attach(this._host._content);\n        }\n      });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  /** Clean up centering subscription. */\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this._centeringSub.unsubscribe();\n    this._leavingSub.unsubscribe();\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  },\n})\nexport class MatTabBody implements OnInit, OnDestroy {\n\n  /** Current position of the tab-body in the tab-group. Zero means that the tab is visible. */\n  private _positionIndex: number;\n\n  /** Subscription to the directionality change observable. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** Tab body position state. Used by the animation trigger for the current state. */\n  _position: MatTabBodyPositionState;\n\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() readonly _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() readonly _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n   /** The portal host inside of this container into which the tab body content will be loaded. */\n  @ViewChild(PortalHostDirective) _portalHost: PortalHostDirective;\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal;\n\n  /** Position that will be used when the tab is immediately becoming visible after creation. */\n  @Input() origin: number;\n\n  // Note that the default value will always be overwritten by `MatTabBody`, but we need one\n  // anyway to prevent the animations module from throwing an error if the body is used on its own.\n  /** Duration for the tab's animation. */\n  @Input() animationDuration: string = '500ms';\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  @Input()\n  set position(position: number) {\n    this._positionIndex = position;\n    this._computePositionAnimationState();\n  }\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality,\n              /**\n               * @breaking-change 8.0.0 changeDetectorRef to be made required.\n               */\n              changeDetectorRef?: ChangeDetectorRef) {\n\n    if (this._dir && changeDetectorRef) {\n      this._dirChangeSubscription = this._dir.change.subscribe((dir: Direction) => {\n        this._computePositionAnimationState(dir);\n        changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this.origin != null) {\n      this._position = this._computePositionFromOrigin();\n    }\n  }\n\n  ngOnDestroy() {\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onTranslateTabStarted(e: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(e.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  _onTranslateTabComplete(e: AnimationEvent): void {\n    // If the transition to the center is complete, emit an event.\n    if (this._isCenterPosition(e.toState) && this._isCenterPosition(this._position)) {\n      this._onCentered.emit();\n    }\n\n    if (this._isCenterPosition(e.fromState) && !this._isCenterPosition(this._position)) {\n      this._afterLeavingCenter.emit();\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\n\n  /** Computes the position state that will be used for the tab-body animation trigger. */\n  private _computePositionAnimationState(dir: Direction = this._getLayoutDirection()) {\n    if (this._positionIndex < 0) {\n      this._position = dir == 'ltr' ? 'left' : 'right';\n    } else if (this._positionIndex > 0) {\n      this._position = dir == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n\n  /**\n   * Computes the position state based on the specified origin position. This is used if the\n   * tab is becoming visible immediately after creation.\n   */\n  private _computePositionFromOrigin(): MatTabBodyPositionState {\n    const dir = this._getLayoutDirection();\n\n    if ((dir == 'ltr' && this.origin <= 0) || (dir == 'rtl' && this.origin > 0)) {\n      return 'left-origin-center';\n    }\n\n    return 'right-origin-center';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\n\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nexport class MatTabLabelWrapperBase {}\nexport const _MatTabLabelWrapperMixinBase: CanDisableCtor & typeof MatTabLabelWrapperBase =\n    mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled',\n    '[attr.aria-disabled]': '!!disabled',\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {END, ENTER, HOME, SPACE} from '@angular/cdk/keycodes';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, CanDisableRippleCtor, mixinDisableRipple} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\n\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n// Boilerplate for applying mixins to MatTabHeader.\n/** @docs-private */\nexport class MatTabHeaderBase {}\nexport const _MatTabHeaderMixinBase: CanDisableRippleCtor & typeof MatTabHeaderBase =\n    mixinDisableRipple(MatTabHeaderBase);\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends _MatTabHeaderMixinBase\n    implements AfterContentChecked, AfterContentInit, OnDestroy, CanDisableRipple {\n\n  @ContentChildren(MatTabLabelWrapper) _labelWrappers: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer') _tabListContainer: ElementRef;\n  @ViewChild('tabList') _tabList: ElementRef;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  /** Used to manage focus between the tabs. */\n  private _keyManager: FocusKeyManager<MatTabLabelWrapper>;\n\n  private _selectedIndex: number = 0;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number { return this._selectedIndex; }\n  set selectedIndex(value: number) {\n    value = coerceNumberProperty(value);\n    this._selectedIndexChanged = this._selectedIndex != value;\n    this._selectedIndex = value;\n\n    if (this._keyManager) {\n      this._keyManager.updateActiveItemIndex(value);\n    }\n  }\n\n  /** Event emitted when the option is selected. */\n  @Output() readonly selectFocusedIndex = new EventEmitter();\n\n  /** Event emitted when a label is focused. */\n  @Output() readonly indexFocused = new EventEmitter();\n\n  constructor(private _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() private _dir: Directionality,\n              // @breaking-change 8.0.0 `_ngZone` parameter to be made required.\n              private _ngZone?: NgZone) {\n    super();\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this._updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case HOME:\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n        break;\n      case END:\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        event.preventDefault();\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Aligns the ink bar to the selected tab on load.\n   */\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this._updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    this._keyManager = new FocusKeyManager(this._labelWrappers)\n      .withHorizontalOrientation(this._getLayoutDirection())\n      .withWrap();\n\n    this._keyManager.updateActiveItem(0);\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n\n    // On dir change or window resize, realign the ink bar and update the orientation of\n    // the key manager if the direction has changed.\n    merge(dirChange, resize).pipe(takeUntil(this._destroyed)).subscribe(() => {\n      realign();\n      this._keyManager.withHorizontalOrientation(this._getLayoutDirection());\n    });\n\n    // If there is a change in the focus key manager we need to emit the `indexFocused`\n    // event in order to provide a public event that notifies about focus changes. Also we realign\n    // the tabs container by scrolling the new focused tab into the visible section.\n    this._keyManager.change.pipe(takeUntil(this._destroyed)).subscribe(newFocusIndex => {\n      this.indexFocused.emit(newFocusIndex);\n      this._setTabFocus(newFocusIndex);\n    });\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    const zoneCallback = () => {\n      this._updatePagination();\n      this._alignInkBarToSelectedTab();\n      this._changeDetectorRef.markForCheck();\n    };\n\n    // The content observer runs outside the `NgZone` by default, which\n    // means that we need to bring the callback back in ourselves.\n    // @breaking-change 8.0.0 Remove null check for `_ngZone` once it's a required parameter.\n    this._ngZone ? this._ngZone.run(zoneCallback) : zoneCallback();\n  }\n\n  /**\n   * Updating the view whether pagination should be enabled or not\n   */\n  _updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number {\n    return this._keyManager ? this._keyManager.activeItemIndex! : 0;\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this.focusIndex === value || !this._keyManager) {\n      return;\n    }\n\n    this._keyManager.setActiveItem(value);\n  }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    const scrollDistance = this.scrollDistance;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    // Don't use `translate3d` here because we don't want to create a new layer. A new layer\n    // seems to cause flickering and overflow in Internet Explorer. For example, the ink bar\n    // and ripples will exceed the boundaries of the visible tab bar.\n    // See: https://github.com/angular/material2/issues/10276\n    this._tabList.nativeElement.style.transform = `translateX(${translateX}px)`;\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  get scrollDistance(): number { return this._scrollDistance; }\n  set scrollDistance(v: number) {\n    this._scrollDistance = Math.max(0, Math.min(this._getMaxScrollDistance(), v));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n  }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(scrollDir: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    this.scrollDistance += (scrollDir == 'before' ? -1 : 1) * viewLength / 3;\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    const selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    const isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  _alignInkBarToSelectedTab(): void {\n    const selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\n        null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper!);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\n\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n/** Object that can be used to configure the default options for the tabs module. */\nexport interface MatTabsConfig {\n  /** Duration for the tab animation. Must be a valid CSS value (e.g. 600ms). */\n  animationDuration?: string;\n}\n\n/** Injection token that can be used to provide the default options the tabs module. */\nexport const MAT_TABS_CONFIG = new InjectionToken('MAT_TABS_CONFIG');\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nexport class MatTabGroupBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabGroupMixinBase: CanColorCtor & CanDisableRippleCtor & typeof MatTabGroupBase =\n    mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://material.io/design/components/tabs.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\n\n  @ViewChild('tabBodyWrapper') _tabBodyWrapper: ElementRef;\n\n  @ViewChild('tabHeader') _tabHeader: MatTabHeader;\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n  private _dynamicHeight: boolean = false;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Duration for the tab animation. Must be a valid CSS value (e.g. 600ms). */\n  @Input() animationDuration: string;\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() readonly focusChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() readonly selectedTabChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\n\n  private _groupId: number;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_TABS_CONFIG) @Optional() defaultConfig?: MatTabsConfig) {\n    super(elementRef);\n    this._groupId = nextId++;\n    this.animationDuration = defaultConfig && defaultConfig.animationDuration ?\n        defaultConfig.animationDuration : '500ms';\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked() {\n    // Don't clamp the `indexToSelect` immediately in the setter because it can happen that\n    // the amount of tabs changes before the actual change detection runs.\n    const indexToSelect = this._indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect) {\n      const isFirstRun = this._selectedIndex == null;\n\n      if (!isFirstRun) {\n        this.selectedTabChange.emit(this._createChangeEvent(indexToSelect));\n      }\n\n      // Changing these values after change detection has run\n      // since the checked content may contain references to them.\n      Promise.resolve().then(() => {\n        this._tabs.forEach((tab, index) => tab.isActive = index === indexToSelect);\n\n        if (!isFirstRun) {\n          this.selectedIndexChange.emit(indexToSelect);\n        }\n      });\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      const indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n      // Maintain the previously-selected tab if a new tab is added or removed and there is no\n      // explicit change that selects a different tab.\n      if (indexToSelect === this._selectedIndex) {\n        const tabs = this._tabs.toArray();\n\n        for (let i = 0; i < tabs.length; i++) {\n          if (tabs[i].isActive) {\n            // Assign both to the `_indexToSelect` and `_selectedIndex` so we don't fire a changed\n            // event, otherwise the consumer may end up in an infinite loop in some edge cases like\n            // adding a tab within the `selectedIndexChange` event.\n            this._indexToSelect = this._selectedIndex = i;\n            break;\n          }\n        }\n      }\n\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  /** Re-aligns the ink bar to the selected tab element. */\n  realignInkBar() {\n    if (this._tabHeader) {\n      this._tabHeader._alignInkBarToSelectedTab();\n    }\n  }\n\n  _focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(...this._tabs.map(tab => tab._stateChanges))\n      .subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  /** Clamps the given index to the bounds of 0 and the tabs length. */\n  private _clampTabIndex(index: number | null): number {\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    return Math.min(this._tabs.length - 1, Math.max(index || 0, 0));\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    this._tabBodyWrapperHeight = this._tabBodyWrapper.nativeElement.clientHeight;\n    this._tabBodyWrapper.nativeElement.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, idx: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = idx;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata, query, animateChild,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/**\n * Animations used by MatSort.\n * @docs-private\n */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly arrowOpacity: AnimationTriggerMetadata;\n  readonly arrowPosition: AnimationTriggerMetadata;\n  readonly allowChildren: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('active-asc, asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('active-desc, desc', style({transform: 'translateY(10px)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('active-asc, asc', style({transform: 'rotate(-45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('active-asc, asc', style({transform: 'rotate(45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(-45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that controls the arrow opacity. */\n  arrowOpacity: trigger('arrowOpacity', [\n    state('desc-to-active, asc-to-active, active', style({opacity: 1})),\n    state('desc-to-hint, asc-to-hint, hint', style({opacity: .54})),\n    state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc, void',\n        style({opacity: 0})),\n    // Transition between all states except for immediate transitions\n    transition('* => asc, * => desc, * => active, * => hint, * => void', animate('0ms')),\n    transition('* <=> *', animate(SORT_ANIMATION_TRANSITION)),\n  ]),\n\n  /**\n   * Animation for the translation of the arrow as a whole. States are separated into two\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n   * peek, and active. The other states define a specific animation (source-to-destination)\n   * and are determined as a function of their prev user-perceived state and what the next state\n   * should be.\n   */\n  arrowPosition: trigger('arrowPosition', [\n    // Hidden Above => Hint Center\n    transition('* => desc-to-hint, * => desc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(-25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Below\n    transition('* => hint-to-desc, * => active-to-desc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(25%)'})\n        ]))),\n    // Hidden Below => Hint Center\n    transition('* => asc-to-hint, * => asc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Above\n    transition('* => hint-to-asc, * => active-to-asc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(-25%)'})\n        ]))),\n    state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active',\n        style({transform: 'translateY(0)'})),\n    state('hint-to-desc, active-to-desc, desc',\n        style({transform: 'translateY(-25%)'})),\n    state('hint-to-asc, active-to-asc, asc',\n        style({transform: 'translateY(25%)'})),\n  ]),\n\n  /** Necessary trigger that calls animate on children animations. */\n  allowChildren: trigger('allowChildren', [\n    transition('* <=> *', [\n      query('@*', animateChild(), {optional: true})\n    ])\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable({providedIn: 'root'})\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatSort, MatSortable} from './sort';\nimport {matSortAnimations} from './sort-animations';\nimport {SortDirection} from './sort-direction';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {MatSortHeaderIntl} from './sort-header-intl';\n\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nexport class MatSortHeaderBase {}\nexport const _MatSortHeaderMixinBase: CanDisableCtor & typeof MatSortHeaderBase =\n    mixinDisabled(MatSortHeaderBase);\n\n/**\n * Valid positions for the arrow to be in for its opacity and translation. If the state is a\n * sort direction, the position of the arrow will be above/below and opacity 0. If the state is\n * hint, the arrow will be in the center with a slight opacity. Active state means the arrow will\n * be fully opaque in the center.\n *\n * @docs-private\n */\nexport type ArrowViewState = SortDirection | 'hint' | 'active';\n\n/**\n * States describing the arrow's animated position (animating fromState to toState).\n * If the fromState is not defined, there will be no animated transition to the toState.\n * @docs-private\n */\nexport interface ArrowViewStateTransition {\n  fromState?: ArrowViewState;\n  toState: ArrowViewState;\n}\n\n/** Column definition associated with a `MatSortHeader`. */\ninterface MatSortHeaderColumnDef {\n  name: string;\n}\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_handleClick()',\n    '(mouseenter)': '_setIndicatorHintVisible(true)',\n    '(longpress)': '_setIndicatorHintVisible(true)',\n    '(mouseleave)': '_setIndicatorHintVisible(false)',\n    '[attr.aria-sort]': '_getAriaSortAttribute()',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.arrowOpacity,\n    matSortAnimations.arrowPosition,\n    matSortAnimations.allowChildren,\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase\n    implements CanDisable, MatSortable, OnDestroy, OnInit {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n   * provide an affordance that the header is sortable by showing on focus and hover.\n   */\n  _showIndicatorHint: boolean = false;\n\n  /**\n   * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n   * position through the animation. If animations are currently disabled, the fromState is removed\n   * so that there is no animation displayed.\n   */\n  _viewState: ArrowViewStateTransition;\n\n  /** The direction the arrow should be facing according to the current state. */\n  _arrowDirection: SortDirection = '';\n\n  /**\n   * Whether the view state animation should show the transition between the `from` and `to` states.\n   */\n  _disableViewStateAnimation = false;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input() start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Inject('MAT_SORT_HEADER_COLUMN_DEF') @Optional()\n                  public _columnDef: MatSortHeaderColumnDef) {\n    // Note that we use a string token for the `_columnDef`, because the value is provided both by\n    // `material/table` and `cdk/table` and we can't have the CDK depending on Material,\n    // and we want to avoid having the sort header depending on the CDK table because\n    // of this single reference.\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n        .subscribe(() => {\n          if (this._isSorted()) {\n            this._updateArrowDirection();\n          }\n\n          // If this header was recently active and now no longer sorted, animate away the arrow.\n          if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = false;\n            this._setAnimationTransitionState({fromState: 'active', toState: this._arrowDirection});\n          }\n\n          changeDetectorRef.markForCheck();\n        });\n  }\n\n  ngOnInit() {\n    if (!this.id && this._columnDef) {\n      this.id = this._columnDef.name;\n    }\n\n    // Initialize the direction of the arrow and set the view state to be immediately that state.\n    this._updateArrowDirection();\n    this._setAnimationTransitionState(\n        {toState: this._isSorted() ? 'active' : this._arrowDirection});\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /**\n   * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n   * user showing what the active sort will become. If set to false, the arrow will fade away.\n   */\n  _setIndicatorHintVisible(visible: boolean) {\n    // No-op if the sort header is disabled - should not make the hint visible.\n    if (this._isDisabled() && visible) { return; }\n\n    this._showIndicatorHint = visible;\n\n    if (!this._isSorted()) {\n      this._updateArrowDirection();\n      if (this._showIndicatorHint) {\n        this._setAnimationTransitionState({fromState: this._arrowDirection, toState: 'hint'});\n      } else {\n        this._setAnimationTransitionState({fromState: 'hint', toState: this._arrowDirection});\n      }\n    }\n  }\n\n  /**\n   * Sets the animation transition view state for the arrow's position and opacity. If the\n   * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n   * no animation appears.\n   */\n  _setAnimationTransitionState(viewState: ArrowViewStateTransition) {\n    this._viewState = viewState;\n\n    // If the animation for arrow position state (opacity/translation) should be disabled,\n    // remove the fromState so that it jumps right to the toState.\n    if (this._disableViewStateAnimation) {\n      this._viewState = {toState: viewState.toState};\n    }\n  }\n\n  /** Triggers the sort on this sort header and removes the indicator hint. */\n  _handleClick() {\n    if (this._isDisabled()) { return; }\n\n    this._sort.sort(this);\n\n    // Do not show the animation if the header was already shown in the right position.\n    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n      this._disableViewStateAnimation = true;\n    }\n\n    // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n    // the direction it is facing.\n    const viewState: ArrowViewStateTransition = this._isSorted() ?\n        {fromState: this._arrowDirection, toState: 'active'} :\n        {fromState: 'active', toState: this._arrowDirection};\n    this._setAnimationTransitionState(viewState);\n\n    this._showIndicatorHint = false;\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  /** Returns the animation state for the arrow direction (indicator and pointers). */\n  _getArrowDirectionState() {\n    return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n  }\n\n  /** Returns the arrow position state (opacity, translation). */\n  _getArrowViewState() {\n    const fromState = this._viewState.fromState;\n    return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n  }\n\n  /**\n   * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n   * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n   * active sorted direction. The reason this is updated through a function is because the direction\n   * should only be changed at specific times - when deactivated but the hint is displayed and when\n   * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n   * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n   * preserving its direction, even though the next sort direction is actually different and should\n   * only be changed once the arrow displays again (hint or activation).\n   */\n  _updateArrowDirection() {\n    this._arrowDirection = this._isSorted() ?\n        this._sort.direction :\n        (this.start || this._sort.start);\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n\n  /**\n   * Gets the aria-sort attribute that should be applied to this sort header. If this header\n   * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n   * says that the aria-sort property should only be present on one header at a time, so removing\n   * ensures this is true.\n   */\n  _getAriaSortAttribute() {\n    if (!this._isSorted()) { return null; }\n\n    return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkStepLabel = CdkStepLabel;\n\n@Directive({\n  selector: '[matStepLabel]',\n})\nexport class MatStepLabel extends _CdkStepLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Stepper data that is required for internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** Label that is rendered below optional steps. */\n  optionalLabel: string = 'Optional';\n}\n\n\n/** @docs-private */\nexport function MAT_STEPPER_INTL_PROVIDER_FACTORY(parentIntl: MatStepperIntl) {\n  return parentIntl || new MatStepperIntl();\n}\n\n/** @docs-private */\nexport const MAT_STEPPER_INTL_PROVIDER = {\n  provide: MatStepperIntl,\n  deps: [[new Optional(), new SkipSelf(), MatStepperIntl]],\n  useFactory: MAT_STEPPER_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  TemplateRef,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperIntl} from './stepper-intl';\nimport {MatStepperIconContext} from './stepper-icon';\nimport {StepState} from '@angular/cdk/stepper';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStepHeader implements OnDestroy {\n  private _intlSubscription: Subscription;\n\n  /** State of the given step. */\n  @Input() state: StepState;\n\n  /** Label of the given step. */\n  @Input() label: MatStepLabel | string;\n\n  /** Error message to display when there's an error. */\n  @Input() errorMessage: string;\n\n  /** Overrides for the header icons, passed in via the stepper. */\n  @Input() iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>};\n\n  /** Index of the given step. */\n  @Input() index: number;\n\n  /** Whether the given step is selected. */\n  @Input() selected: boolean;\n\n  /** Whether the given step label is active. */\n  @Input() active: boolean;\n\n  /** Whether the given step is optional. */\n  @Input() optional: boolean;\n\n  constructor(\n    public _intl: MatStepperIntl,\n    private _focusMonitor: FocusMonitor,\n    private _element: ElementRef<HTMLElement>,\n    changeDetectorRef: ChangeDetectorRef) {\n    _focusMonitor.monitor(_element, true);\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element);\n  }\n\n  /** Returns string label of given step if it is a text label. */\n  _stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n\n  /** Returns MatStepLabel if the label of given step is a template label. */\n  _templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n\n  /** Returns the host HTML element. */\n  _getHostElement() {\n    return this._element.nativeElement;\n  }\n\n  /** Template context variables that are exposed to the `matStepperIcon` instances. */\n  _getIconContext(): MatStepperIconContext {\n    return {\n      index: this.index,\n      active: this.active,\n      optional: this.optional\n    };\n  }\n\n  focus() {\n    this._getHostElement().focus();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material steppers.\n * @docs-private\n */\nexport const matStepperAnimations: {\n  readonly horizontalStepTransition: AnimationTriggerMetadata;\n  readonly verticalStepTransition: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions the step along the X axis in a horizontal stepper. */\n  horizontalStepTransition: trigger('stepTransition', [\n    state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n    state('current', style({transform: 'none', visibility: 'visible'})),\n    state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n    transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n  ]),\n\n  /** Animation that transitions the step along the Y axis in a vertical stepper. */\n  verticalStepTransition: trigger('stepTransition', [\n    state('previous', style({height: '0px', visibility: 'hidden'})),\n    state('next', style({height: '0px', visibility: 'hidden'})),\n    state('current', style({height: '*', visibility: 'visible'})),\n    transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, TemplateRef} from '@angular/core';\nimport {StepState} from '@angular/cdk/stepper';\n\n/** Template context available to an attached `matStepperIcon`. */\nexport interface MatStepperIconContext {\n  /** Index of the step. */\n  index: number;\n  /** Whether the step is currently active. */\n  active: boolean;\n  /** Whether the step is optional. */\n  optional: boolean;\n}\n\n/**\n * Template to be used to override the icons inside the step header.\n */\n@Directive({\n  selector: 'ng-template[matStepperIcon]',\n})\nexport class MatStepperIcon {\n  /** Name of the icon to be overridden. */\n  @Input('matStepperIcon') name: StepState;\n\n  constructor(public templateRef: TemplateRef<MatStepperIconContext>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  CdkStep,\n  CdkStepper,\n  StepContentPositionState,\n  MAT_STEPPER_GLOBAL_OPTIONS,\n  StepperOptions\n} from '@angular/cdk/stepper';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  QueryList,\n  SkipSelf,\n  TemplateRef,\n  ViewChildren,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {DOCUMENT} from '@angular/common';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {takeUntil, distinctUntilChanged} from 'rxjs/operators';\n\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {matStepperAnimations} from './stepper-animations';\nimport {MatStepperIcon, MatStepperIconContext} from './stepper-icon';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkStepper = CdkStepper;\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: ErrorStateMatcher, useExisting: MatStep}],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matStep',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\n  /** Content for step label given by `<ng-template matStepLabel>`. */\n  @ContentChild(MatStepLabel) stepLabel: MatStepLabel;\n\n  /** @breaking-change 8.0.0 remove the `?` after `stepperOptions` */\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher,\n              @Optional() @Inject(MAT_STEPPER_GLOBAL_OPTIONS) stepperOptions?: StepperOptions) {\n    super(stepper, stepperOptions);\n  }\n\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    const customErrorState = !!(control && control.invalid && this.interacted);\n\n    return originalErrorState || customErrorState;\n  }\n}\n\n\n@Directive({\n  selector: '[matStepper]'\n})\nexport class MatStepper extends _CdkStepper implements AfterContentInit {\n  /** The list of step headers of the steps in the stepper. */\n  @ViewChildren(MatStepHeader) _stepHeader: QueryList<MatStepHeader>;\n\n  /** Steps that the stepper holds. */\n  @ContentChildren(MatStep) _steps: QueryList<MatStep>;\n\n  /** Custom icon overrides passed in by the consumer. */\n  @ContentChildren(MatStepperIcon) _icons: QueryList<MatStepperIcon>;\n\n  /** Event emitted when the current step is done transitioning in. */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Consumer-specified template-refs to be used to override the header icons. */\n  _iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>} = {};\n\n  /** Stream of animation `done` events when the body expands/collapses. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  ngAfterContentInit() {\n    this._icons.forEach(({name, templateRef}) => this._iconOverrides[name] = templateRef);\n\n    // Mark the component for change detection whenever the content children query changes\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\n\n    this._animationDone.pipe(\n      // This needs a `distinctUntilChanged` in order to avoid emitting the same event twice due\n      // to a bug in animations where the `.done` callback gets invoked twice on some browsers.\n      // See https://github.com/angular/angular/issues/24084\n      distinctUntilChanged((x, y) => x.fromState === y.fromState && x.toState === y.toState),\n      takeUntil(this._destroyed)\n    ).subscribe(event => {\n      if ((event.toState as StepContentPositionState) === 'current') {\n        this.animationDone.emit();\n      }\n    });\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-horizontal-stepper',\n  exportAs: 'matHorizontalStepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    '[class.mat-stepper-label-position-end]': 'labelPosition == \"end\"',\n    '[class.mat-stepper-label-position-bottom]': 'labelPosition == \"bottom\"',\n    'aria-orientation': 'horizontal',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.horizontalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatHorizontalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatHorizontalStepper extends MatStepper {\n  /** Whether the label should display in bottom or end position. */\n  @Input()\n  labelPosition: 'bottom' | 'end' = 'end';\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-vertical-stepper',\n  exportAs: 'matVerticalStepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'aria-orientation': 'vertical',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.verticalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatVerticalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatVerticalStepper extends MatStepper {\n  constructor(\n    @Optional() dir: Directionality,\n    changeDetectorRef: ChangeDetectorRef,\n    // @breaking-change 8.0.0 `elementRef` and `_document` parameters to become required.\n    elementRef?: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) _document?: any) {\n    super(dir, changeDetectorRef, elementRef, _document);\n    this._orientation = 'vertical';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepper, CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {MatStepper} from './stepper';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkStepperNext = CdkStepperNext;\nexport const _CdkStepperPrevious = CdkStepperPrevious;\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperNext]',\n  host: {\n    '(click)': '_stepper.next()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperNext extends _CdkStepperNext {}\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperPrevious]',\n  host: {\n    '(click)': '_stepper.previous()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperPrevious extends _CdkStepperPrevious {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {ErrorStateMatcher, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nimport {MatStepperIcon} from './stepper-icon';\nimport {MAT_STEPPER_INTL_PROVIDER} from './stepper-intl';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule,\n    MatRippleModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  declarations: [\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  providers: [MAT_STEPPER_INTL_PROVIDER, ErrorStateMatcher],\n})\nexport class MatStepperModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkTable = CdkTable;\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table, table[mat-table]',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTable<T> extends _CdkTable<T> {\n  /** Overrides the sticky CSS class set by the `CdkTable`. */\n  protected stickyCssClass = 'mat-table-sticky';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef, CdkFooterCell, CdkFooterCellDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkCellDef = CdkCellDef;\nexport const _CdkHeaderCellDef = CdkHeaderCellDef;\nexport const _CdkFooterCellDef = CdkFooterCellDef;\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends _CdkCellDef {}\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends _CdkHeaderCellDef {}\n\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matFooterCellDef]',\n  providers: [{provide: CdkFooterCellDef, useExisting: MatFooterCellDef}]\n})\nexport class MatFooterCellDef extends _CdkFooterCellDef {}\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [\n    {provide: CdkColumnDef, useExisting: MatColumnDef},\n    {provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: MatColumnDef}\n  ],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n\n  /** Whether this column should be sticky positioned at the start of the row */\n  @Input() sticky: boolean;\n\n  /** Whether this column should be sticky positioned on the end of the row */\n  @Input() stickyEnd: boolean;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell, th[mat-header-cell]',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef<HTMLElement>) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Footer cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-footer-cell, td[mat-footer-cell]',\n  host: {\n    'class': 'mat-footer-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatFooterCell extends CdkFooterCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell, td[mat-cell]',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef<HTMLElement>) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  HammerInput,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subscription} from 'rxjs';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n * @docs-private\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nexport class MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSliderMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableCtor &\n    typeof MatSliderBase =\n        mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(mousedown)': '_onMousedown($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert(): boolean { return this._invert; }\n  set invert(value: boolean) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundToDecimal = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value: boolean) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /** Value of the slider. */\n  @Input()\n  get value(): number | null {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      let value = coerceNumberProperty(v);\n\n      // While incrementing by a decimal we can end up with values like 33.300000000000004.\n      // Truncate it to ensure that it matches the label and to make it easier to work with.\n      if (this._roundToDecimal) {\n        value = parseFloat(value.toFixed(this._roundToDecimal));\n      }\n\n      this._value = value;\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /**\n   * Function that will be used to format the value before it is displayed\n   * in the thumb label. Can be used to format very large number in order\n   * for them to fit into the slider thumb.\n   */\n  @Input() displayWith: (value: number | null) => string | number;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() readonly change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() readonly input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /**\n   * Emits when the raw value of the slider changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<number | null> = new EventEmitter<number | null>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    if (this.displayWith) {\n      return this.displayWith(this.value);\n    }\n\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundToDecimal && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundToDecimal);\n    }\n\n    return this.value || 0;\n  }\n\n  /** set focus to the host element */\n  focus() {\n    this._focusHostElement();\n  }\n\n  /** blur the host element */\n  blur() {\n    this._blurHostElement();\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${1 - this.percent}, 1` : `${1 - this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '-' : '';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${this.percent}, 1` : `${this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '' : '-';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._getDirection() == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundToDecimal: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper') private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  private _shouldInvertMouseCoords() {\n    return (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private _getDirection() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string,\n              // @breaking-change 8.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onMousedown(event: MouseEvent) {\n    if (this.disabled) {\n      return;\n    }\n\n    const oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    // Emit a change and input event if the value changed.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value && !this.disabled) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled) { return; }\n\n    let oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._getDirection() == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._getDirection() == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n\n    if (this._shouldInvertMouseCoords()) {\n      percent = 1 - percent;\n    }\n\n    // Since the steps may not divide cleanly into the max value, if the user\n    // slid to 0 or 100 percent, we jump to the min/max value. This approach\n    // is slightly more intuitive than using `Math.ceil` below, because it\n    // follows the user's pointer closer.\n    if (percent === 0) {\n      this.value = this.min;\n    } else if (percent === 1) {\n      this.value = this.max;\n    } else {\n      const exactValue = this._calculateValue(percent);\n\n      // This calculation finds the closest step by finding the closest\n      // whole number divisible by the step relative to the min.\n      const closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n\n      // The value needs to snap to the min and max.\n      this.value = this._clamp(closestValue, this.min, this.max);\n    }\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.valueChange.emit(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Blurs the native element. */\n  private _blurHostElement() {\n    this._elementRef.nativeElement.blur();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable, Subject} from 'rxjs';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n  /** Whether the snack bar was dismissed using the action button. */\n  dismissedByAction: boolean;\n}\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has been dismissed. */\n  private readonly _afterDismissed = new Subject<MatSnackBarDismiss>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private readonly _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  /** Whether the snack bar was dismissed using the action button. */\n  private _dismissedByAction = false;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  dismissWithAction(): void {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * @breaking-change 8.0.0\n   */\n  closeWithAction(): void {\n    this.dismissWithAction();\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<MatSnackBarDismiss> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /**\n   * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n   * component or template, the announcement message will default to the specified message.\n   */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: {message: string, action: string};\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.dismissWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material snack bar.\n * @docs-private\n */\nexport const matSnackBarAnimations: {\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('void, hidden', style({\n      transform: 'scale(0.8)',\n      opacity: 0,\n    })),\n    state('visible', style({\n      transform: 'scale(1)',\n      opacity: 1,\n    })),\n    transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\n      opacity: 0\n    }))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  CdkPortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  NgZone,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\nimport {matSnackBarAnimations} from './snack-bar-animations';\nimport {MatSnackBarConfig} from './snack-bar-config';\n\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    'role': 'alert',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  readonly _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  readonly _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    /** The snack bar configuration. */\n    public snackBarConfig: MatSnackBarConfig) {\n\n    super();\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\n      this._completeExit();\n    }\n\n    if (toState === 'visible') {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n    // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n    // `MatSnackBar.open`).\n    this._animationState = 'hidden';\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n  private _applySnackBarClasses() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClasses = this.snackBarConfig.panelClass;\n\n    if (panelClasses) {\n      if (Array.isArray(panelClasses)) {\n        // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n        panelClasses.forEach(cssClass => element.classList.add(cssClass));\n      } else {\n        element.classList.add(panelClasses);\n      }\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n  }\n\n  /** Asserts that no content is already attached to the container. */\n  private _assertNotAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatButtonModule,\n    MatCommonModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  EmbeddedViewRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n  OnDestroy,\n} from '@angular/core';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarModule} from './snack-bar-module';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/** Injection token that can be used to specify default snack bar. */\nexport const MAT_SNACK_BAR_DEFAULT_OPTIONS =\n    new InjectionToken<MatSnackBarConfig>('mat-snack-bar-default-options', {\n      providedIn: 'root',\n      factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY(): MatSnackBarConfig {\n  return new MatSnackBarConfig();\n}\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable({providedIn: MatSnackBarModule})\nexport class MatSnackBar implements OnDestroy {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar,\n      @Inject(MAT_SNACK_BAR_DEFAULT_OPTIONS) private _defaultConfig: MatSnackBarConfig) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig):\n    MatSnackBarRef<T> {\n    return this._attach(component, config) as MatSnackBarRef<T>;\n  }\n\n  /**\n   * Creates and dispatches a snack bar with a custom template for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param template Template to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromTemplate(template: TemplateRef<any>, config?: MatSnackBarConfig):\n    MatSnackBarRef<EmbeddedViewRef<any>> {\n    return this._attach(template, config);\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = {...this._defaultConfig, ...config};\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n\n    if (!_config.announcementMessage) {\n      _config.announcementMessage = message;\n    }\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  ngOnDestroy() {\n    // Only dismiss the snack bar at the current level on destroy.\n    if (this._snackBarRefAtThisLevel) {\n      this._snackBarRefAtThisLevel.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatSnackBarConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatSnackBarContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component or a template as the content of the snack bar container.\n   */\n  private _attach<T>(content: ComponentType<T> | TemplateRef<T>, userConfig?: MatSnackBarConfig):\n    MatSnackBarRef<T | EmbeddedViewRef<any>> {\n\n    const config = {...new MatSnackBarConfig(), ...this._defaultConfig, ...userConfig};\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T | EmbeddedViewRef<any>>(container, overlayRef);\n\n    if (content instanceof TemplateRef) {\n      const portal = new TemplatePortal(content, null!, {\n        $implicit: config.data,\n        snackBarRef\n      } as any);\n\n      snackBarRef.instance = container.attachTemplatePortal(portal);\n    } else {\n      const injector = this._createInjector(config, snackBarRef);\n      const portal = new ComponentPortal(content, undefined, injector);\n      const contentRef = container.attachComponentPortal<T>(portal);\n\n      // We can't pass this via the injector, because the injector is created earlier.\n      snackBarRef.instance = contentRef.instance;\n    }\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\n      takeUntil(overlayRef.detachments().pipe(take(1)))\n    ).subscribe(state => {\n      if (state.matches) {\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n      } else {\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n      }\n    });\n\n    this._animateSnackBar(snackBarRef, config);\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /** Animates the old snack bar out and the new one in. */\n  private _animateSnackBar(snackBarRef: MatSnackBarRef<any>, config: MatSnackBarConfig) {\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (config.duration && config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration!));\n    }\n\n    if (config.announcementMessage) {\n      this._live.announce(config.announcementMessage, config.politeness);\n    }\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    return new PortalInjector(userInjector || this._injector, new WeakMap<any, any>([\n      [MatSnackBarRef, snackBarRef],\n      [MAT_SNACK_BAR_DATA, config.data]\n    ]));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableCtor,\n  HasInitialized,\n  HasInitializedCtor,\n  mixinDisabled,\n  mixinInitialized,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError,\n  getSortInvalidDirectionError,\n} from './sort-errors';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nexport class MatSortBase {}\nexport const _MatSortMixinBase: HasInitializedCtor & CanDisableCtor & typeof MatSortBase =\n    mixinInitialized(mixinDisabled(MatSortBase));\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase\n    implements CanDisable, HasInitialized, OnChanges, OnDestroy, OnInit {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  get direction(): SortDirection { return this._direction; }\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable): void {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable): void {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable): void {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.emit({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnInit() {\n    this._markInitialized();\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusMonitor, FocusOrigin, FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {CdkScrollable, ScrollDispatcher} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {fromEvent, merge, Observable, Subject} from 'rxjs';\nimport {\n  debounceTime,\n  filter,\n  map,\n  startWith,\n  take,\n  takeUntil,\n  distinctUntilChanged,\n} from 'rxjs/operators';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/**\n * Throws an exception when two MatDrawer are matching the same position.\n * @docs-private\n */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/** Result of the toggle promise that indicates the state of the drawer. */\nexport type MatDrawerToggleResult = 'open' | 'close';\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n      providedIn: 'root',\n      factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY(): boolean {\n  return false;\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContent extends CdkScrollable implements AfterContentInit {\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) public _container: MatDrawerContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(elementRef, scrollDispatcher, ngZone);\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMarginChanges.subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  templateUrl: 'drawer.html',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_animationStarted.next($event)',\n    '(@transform.done)': '_animationEnd.next($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value: 'start' | 'end') {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value: 'over' | 'push' | 'side') {\n    this._mode = value;\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** Whether the drawer should focus the first focusable element automatically when opened. */\n  @Input()\n  get autoFocus(): boolean { return this._autoFocus; }\n  set autoFocus(value: boolean) { this._autoFocus = coerceBooleanProperty(value); }\n  private _autoFocus: boolean = true;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new Subject<AnimationEvent>();\n\n  /** Emits whenever the drawer is done animating. */\n  _animationEnd = new Subject<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() readonly openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer's position changes. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  readonly _modeChanged = new Subject();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              private _ngZone: NgZone,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n\n    /**\n     * Listen to `keydown` events outside the zone so that change detection is not run every\n     * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n     * and we don't have close disabled.\n     */\n    this._ngZone.runOutsideAngular(() => {\n        fromEvent<KeyboardEvent>(this._elementRef.nativeElement, 'keydown').pipe(\n            filter(event => event.keyCode === ESCAPE && !this.disableClose)\n        ).subscribe(event => this._ngZone.run(() => {\n            this.close();\n            event.stopPropagation();\n        }));\n    });\n\n    // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n    this._animationEnd.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe((event: AnimationEvent) => {\n      const {fromState, toState} = event;\n\n      if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n          (toState === 'void' && fromState.indexOf('open') === 0)) {\n        this.openedChange.emit(this._opened);\n      }\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n\n    this._animationStarted.complete();\n    this._animationEnd.complete();\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { this.toggle(coerceBooleanProperty(value)); }\n  private _opened: boolean = false;\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<MatDrawerToggleResult> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<MatDrawerToggleResult> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<MatDrawerToggleResult> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n\n    return new Promise<MatDrawerToggleResult>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n    });\n  }\n\n  get _width(): number {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n}\n\n\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContainer implements AfterContentInit, DoCheck, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent) _content: MatDrawerContent;\n  @ViewChild(MatDrawerContent) _userContent: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /**\n   * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n   * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n   * mode as well.\n   */\n  @Input()\n  get hasBackdrop() {\n    if (this._backdropOverride == null) {\n      return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n    }\n\n    return this._backdropOverride;\n  }\n  set hasBackdrop(value: any) {\n    this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n  }\n  _backdropOverride: boolean | null;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() readonly backdropClick: EventEmitter<void> = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private readonly _doCheckSubject = new Subject<void>();\n\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _contentMargins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  readonly _contentMarginChanges = new Subject<{left: number|null, right: number|null}>();\n\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n  get scrollable(): CdkScrollable {\n    return this._userContent || this._content;\n  }\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef<HTMLElement>,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this._updateContentMargins();\n      });\n    }\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this._updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this._updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      takeUntil(this._drawers.changes),\n      filter((event: AnimationEvent) => event.fromState !== event.toState)\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant' && this._animationMode !== 'NoopAnimations') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this._updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this._updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add('mat-drawer-opened');\n    } else {\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (this._dir && this._dir.value === 'rtl') {\n      this._left = this._end;\n      this._right = this._start;\n    } else {\n      this._left = this._start;\n      this._right = this._end;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer))\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||\n           (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end));\n  }\n\n  private _canHaveBackdrop(drawer: MatDrawer): boolean {\n    return drawer.mode !== 'side' || !!this._backdropOverride;\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): drawer is MatDrawer {\n    return drawer != null && drawer.opened;\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  private _updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        let width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        let width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    // If either `right` or `left` is zero, don't set a style to the element. This\n    // allows users to specify a custom size via CSS class in SSR scenarios where the\n    // measured widths will always be zero. Note that we reset to `null` here, rather\n    // than below, in order to ensure that the types in the `if` below are consistent.\n    left = left || null!;\n    right = right || null!;\n\n    if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n      this._contentMargins = {left, right};\n\n      // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n      // to do it only when something changed, otherwise we can end up hitting the zone too often.\n      this._ngZone.run(() => this._contentMarginChanges.next(this._contentMargins));\n    }\n\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  forwardRef,\n  Inject,\n  Input,\n  ViewEncapsulation,\n  QueryList,\n  ElementRef,\n  NgZone,\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(changeDetectorRef, container, elementRef, scrollDispatcher, ngZone);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  templateUrl: 'drawer.html',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_animationStarted.next($event)',\n    '(@transform.done)': '_animationEnd.next($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers: QueryList<MatSidenav>;\n  @ContentChild(MatSidenavContent) _content: MatSidenavContent;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {ScrollingModule} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    ScrollingModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/** Default `mat-slide-toggle` options that can be overridden. */\nexport interface MatSlideToggleDefaultOptions {\n  /** Whether toggle action triggers value changes in slide toggle. */\n  disableToggleValue?: boolean;\n  /** Whether drag action triggers value changes in slide toggle. */\n  disableDragValue?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-slide-toggle`. */\nexport const MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS =\n  new InjectionToken<MatSlideToggleDefaultOptions>('mat-slide-toggle-default-options', {\n    providedIn: 'root',\n    factory: () => ({disableToggleValue: false, disableDragValue: false})\n  });\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor, CanColorCtor,\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  HammerInput,\n  HasTabIndex, HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {\n  MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,\n  MatSlideToggleDefaultOptions\n} from './slide-toggle-config';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\n/** @docs-private */\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nexport class MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSlideToggleMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatSlideToggleBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    '[attr.tabindex]': 'null',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n    ControlValueAccessor, CanDisable, CanColor, HasTabIndex, CanDisableRipple {\n\n  private onChange = (_: any) => {};\n  private onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Whether the thumb is currently being dragged. */\n  private _dragging = false;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  private _dragPercentage: number;\n\n  /** Reference to the thumb HTMLElement. */\n  @ViewChild('thumbContainer') _thumbEl: ElementRef;\n\n  /** Reference to the thumb bar HTMLElement. */\n  @ViewChild('toggleBar') _thumbBarEl: ElementRef;\n\n  /** Name value will be applied to the input element if present. */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after'. */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\n      new EventEmitter<MatSlideToggleChange>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle input is toggled.\n   * This event is always emitted when the user toggles the slide toggle, but this does not mean\n   * the slide toggle's value has changed. The event does not fire when the user drags to change\n   * the slide toggle value.\n   */\n  @Output() readonly toggleChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle is dragged.\n   * This event is always emitted when the user drags the slide toggle to make a change greater\n   * than 50%. It does not mean the slide toggle's value is changed. The event is not emitted when\n   * the user toggles the slide toggle to change its value.\n   */\n  @Output() readonly dragChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated The `_platform` parameter to be removed.\n               * @breaking-change 8.0.0\n               */\n              _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string,\n              private _ngZone: NgZone,\n              @Inject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS)\n                  public defaults: MatSlideToggleDefaultOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              @Optional() private _dir?: Directionality) {\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin) {\n          // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n          // Angular does not expect events to be raised during change detection, so any state\n          // change (such as a form control's 'ng-touched') will cause a changed-after-checked\n          // error. See https://github.com/angular/angular/issues/17793. To work around this,\n          // we defer telling the form control it has been touched until the next tick.\n          Promise.resolve().then(() => this.onTouched());\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    if (!this._dragging) {\n      this.toggleChange.emit();\n    }\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back. Or when the slide toggle's config\n    // disabled toggle change event by setting `disableToggleValue: true`, the slide toggle's value\n    // does not change, and the checked state of the underlying input needs to be changed back.\n    if (this._dragging || this.defaults.disableToggleValue) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n    this.onChange(this.checked);\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this.onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n  _onDragStart() {\n    if (!this.disabled && !this._dragging) {\n      const thumbEl = this._thumbEl.nativeElement;\n      this._thumbBarWidth = this._thumbBarEl.nativeElement.clientWidth - thumbEl.clientWidth;\n      thumbEl.classList.add('mat-dragging');\n\n      this._previousChecked = this.checked;\n      this._dragging = true;\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._dragging) {\n      const direction = this._dir && this._dir.value === 'rtl' ? -1 : 1;\n      this._dragPercentage = this._getDragPercentage(event.deltaX * direction);\n      // Calculate the moved distance based on the thumb bar width.\n      const dragX = (this._dragPercentage / 100) * this._thumbBarWidth * direction;\n      this._thumbEl.nativeElement.style.transform = `translate3d(${dragX}px, 0, 0)`;\n    }\n  }\n\n  _onDragEnd() {\n    if (this._dragging) {\n      const newCheckedValue = this._dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.dragChange.emit();\n        if (!this.defaults.disableDragValue) {\n          this.checked = newCheckedValue;\n          this._emitChangeEvent();\n        }\n      }\n\n      // The drag should be stopped outside of the current event handler, otherwise the\n      // click event will be fired before it and will revert the drag change.\n      this._ngZone.runOutsideAngular(() => setTimeout(() => {\n        if (this._dragging) {\n          this._dragging = false;\n          this._thumbEl.nativeElement.classList.remove('mat-dragging');\n\n          // Reset the transform because the component will take care\n          // of the thumb position after drag.\n          this._thumbEl.nativeElement.style.transform = '';\n        }\n      }));\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the\n    // slide-toggle component will be only marked for check, but no actual change detection runs\n    // automatically. Instead of going back into the zone in order to trigger a change detection\n    // which causes *all* components to be checked (if explicitly marked or not using OnPush),\n    // we only trigger an explicit change detection for the slide-toggle view and it's children.\n    this._changeDetectorRef.detectChanges();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlideToggle} from './slide-toggle';\n\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatSlideToggle, MatCommonModule],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Inject,\n  Input,\n  Output,\n  EventEmitter,\n  Optional,\n  NgZone,\n  ViewEncapsulation,\n  AfterViewInit,\n  ViewChild,\n  OnDestroy,\n  InjectionToken,\n  inject,\n} from '@angular/core';\nimport {fromEvent, Subscription} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {DOCUMENT} from '@angular/common';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\n\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nexport class MatProgressBarBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/** Last animation end data. */\nexport interface ProgressAnimationEnd {\n  value: number;\n}\n\nexport const _MatProgressBarMixinBase: CanColorCtor & typeof MatProgressBarBase =\n    mixinColor(MatProgressBarBase, 'primary');\n\n/**\n * Injection token used to provide the current location to `MatProgressBar`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport const MAT_PROGRESS_BAR_LOCATION = new InjectionToken<MatProgressBarLocation>(\n  'mat-progress-bar-location',\n  {providedIn: 'root', factory: MAT_PROGRESS_BAR_LOCATION_FACTORY}\n);\n\n/**\n * Stubbed out location for `MatProgressBar`.\n * @docs-private\n */\nexport interface MatProgressBarLocation {\n  getPathname: () => string;\n}\n\n/** @docs-private */\nexport function MAT_PROGRESS_BAR_LOCATION_FACTORY(): MatProgressBarLocation {\n  const _document = inject(DOCUMENT);\n\n  return {\n    // Note that this needs to be a function, because Angular will only instantiate\n    // this provider once, but we want the current location on each call.\n    getPathname: () => (_document && _document.location && _document.location.pathname) || ''\n  };\n}\n\n\n/** Counter used to generate unique IDs for progress bars. */\nlet progressbarId = 0;\n\n/**\n * `<mat-progress-bar>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n    'class': 'mat-progress-bar',\n    '[class._mat-animation-noopable]': `_isNoopAnimation`,\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor,\n                                                      AfterViewInit, OnDestroy {\n  constructor(public _elementRef: ElementRef, private _ngZone: NgZone,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              /**\n               * @deprecated `location` parameter to be made required.\n               * @breaking-change 8.0.0\n               */\n              @Optional() @Inject(MAT_PROGRESS_BAR_LOCATION) location?: MatProgressBarLocation) {\n    super(_elementRef);\n\n    // We need to prefix the SVG reference with the current path, otherwise they won't work\n    // in Safari if the page has a `<base>` tag. Note that we need quotes inside the `url()`,\n\n    // because named route URLs can contain parentheses (see #12338). Also we don't use since\n    // we can't tell the difference between whether\n    // the consumer is using the hash location strategy or not, because `Location` normalizes\n    // both `/#/foo/bar` and `/foo/bar` to the same thing.\n    const path = location ? location.getPathname().split('#')[0] : '';\n    this._rectangleFillValue = `url('${path}#${this.progressbarId}')`;\n    this._isNoopAnimation = _animationMode === 'NoopAnimations';\n  }\n\n  /** Flag that indicates whether NoopAnimations mode is set to true. */\n  _isNoopAnimation = false;\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) {\n    this._value = clamp(v || 0);\n\n    // When noop animation is set to true, trigger animationEnd directly.\n    if (this._isNoopAnimation) {\n      this.emitAnimationEnd();\n    }\n  }\n  private _value: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue(): number { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n  private _bufferValue: number = 0;\n\n  @ViewChild('primaryValueBar') _primaryValueBar: ElementRef;\n\n  /**\n   * Event emitted when animation of the primary progress bar completes. This event will not\n   * be emitted when animations are disabled, nor will it be emitted for modes with continuous\n   * animations (indeterminate and query).\n   */\n  @Output() animationEnd = new EventEmitter<ProgressAnimationEnd>();\n\n  /** Reference to animation end subscription to be unsubscribed on destroy. */\n  private _animationEndSubscription: Subscription = Subscription.EMPTY;\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** ID of the progress bar. */\n  progressbarId = `mat-progress-bar-${progressbarId++}`;\n\n  /** Attribute to be used for the `fill` attribute on the internal `rect` element. */\n  _rectangleFillValue: string;\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    const scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode === 'buffer') {\n      const scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\n\n  ngAfterViewInit() {\n    if (!this._isNoopAnimation) {\n      // Run outside angular so change detection didn't get triggered on every transition end\n      // instead only on the animation that we care about (primary value bar's transitionend)\n      this._ngZone.runOutsideAngular((() => {\n        this._animationEndSubscription =\n            fromEvent<TransitionEvent>(this._primaryValueBar.nativeElement, 'transitionend')\n            .pipe(filter(((e: TransitionEvent) =>\n              e.target === this._primaryValueBar.nativeElement)))\n            .subscribe(_ => this._ngZone.run(() => this.emitAnimationEnd()));\n      }));\n    }\n  }\n\n  ngOnDestroy() {\n    this._animationEndSubscription.unsubscribe();\n  }\n\n  /** Emit an animationEnd event if in determinate or buffer mode. */\n  private emitAnimationEnd(): void {\n    if (this.mode === 'determinate' || this.mode === 'buffer') {\n      this.animationEnd.next({value: this.value});\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  Optional,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nexport class MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatProgressSpinnerMixinBase: CanColorCtor & typeof MatProgressSpinnerBase =\n    mixinColor(MatProgressSpinnerBase, 'primary');\n\n/** Default `mat-progress-spinner` options that can be overridden. */\nexport interface MatProgressSpinnerDefaultOptions {\n  /** Diameter of the spinner. */\n  diameter?: number;\n  /** Width of the spinner's stroke. */\n  strokeWidth?: number;\n  /**\n   * Whether the animations should be force to be enabled, ignoring if the current environment is\n   * using NoopAnimationsModule.\n   */\n  _forceAnimations?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-progress-spinner`. */\nexport const MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS =\n    new InjectionToken<MatProgressSpinnerDefaultOptions>('mat-progress-spinner-default-options', {\n      providedIn: 'root',\n      factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY(): MatProgressSpinnerDefaultOptions {\n  return {diameter: BASE_SIZE};\n}\n\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/material2/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * `<mat-progress-spinner>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor {\n\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /** Tracks diameters of existing instances to de-dupe generated styles (default d = 100) */\n  private static diameters = new Set<number>([BASE_SIZE]);\n\n  /**\n   * Used for storing all of the generated keyframe animations.\n   * @dynamic\n   */\n  private static styleTag: HTMLStyleElement|null = null;\n\n  /** Whether the _mat-animation-noopable class should be applied, disabling animations.  */\n  _noopAnimations: boolean = this.animationMode === 'NoopAnimations' && (\n      !!this.defaults && !this.defaults._forceAnimations);\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number { return this._diameter; }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    if (!this._fallbackAnimation && !MatProgressSpinner.diameters.has(this._diameter)) {\n      this._attachStyleNode();\n    }\n  }\n  private _diameter = BASE_SIZE;\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @breaking-change 8.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  private defaults?: MatProgressSpinnerDefaultOptions) {\n\n    super(_elementRef);\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n\n    if (defaults) {\n      if (defaults.diameter) {\n        this.diameter = defaults.diameter;\n      }\n\n      if (defaults.strokeWidth) {\n        this.strokeWidth = defaults.strokeWidth;\n      }\n    }\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    _elementRef.nativeElement.classList.add(animationClass);\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this.diameter * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    let styleTag = MatProgressSpinner.styleTag;\n\n    if (!styleTag) {\n      styleTag = this._document.createElement('style');\n      this._document.head.appendChild(styleTag);\n      MatProgressSpinner.styleTag = styleTag;\n    }\n\n    if (styleTag && styleTag.sheet) {\n      (styleTag.sheet as CSSStyleSheet).insertRule(this._getAnimationText(), 0);\n    }\n\n    MatProgressSpinner.diameters.add(this.diameter);\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n}\n\n\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any,\n              // @breaking-change 8.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  defaults?: MatProgressSpinnerDefaultOptions) {\n    super(elementRef, platform, document, animationMode, defaults);\n    this.mode = 'indeterminate';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  constructor(\n    /** The MatRadioButton that emits the change event. */\n    public source: MatRadioButton,\n    /** The value of the MatRadioButton. */\n    public value: any) {}\n}\n\n\n// Boilerplate for applying mixins to MatRadioGroup.\n/** @docs-private */\nexport class MatRadioGroupBase { }\nexport const _MatRadioGroupMixinBase: CanDisableCtor & typeof MatRadioGroupBase =\n    mixinDisabled(MatRadioGroupBase);\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n  inputs: ['disabled'],\n})\nexport class MatRadioGroup extends _MatRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n\n  /** Selected value for the radio group. */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n  set labelPosition(v) {\n    this._labelPosition = v === 'before' ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /**\n   * Value for the radio-group. Should equal the value of the selected radio button if there is\n   * a corresponding radio button with a matching value. If there is not such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value !== newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /**\n   * The currently selected radio button. If set to a new radio button, the radio group value\n   * will be updated to match the new selected button.\n   */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n    if (this._radios && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value === radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new MatRadioChange(this._selected!, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nexport class MatRadioButtonBase {\n  // Since the disabled property is manually defined for the MatRadioButton and isn't set up in\n  // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n  // defined to properly work.\n  disabled: boolean;\n\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nexport const _MatRadioButtonMixinBase:\n    CanColorCtor & CanDisableRippleCtor & HasTabIndexCtor & typeof MatRadioButtonBase =\n        mixinColor(mixinDisableRipple(mixinTabIndex(MatRadioButtonBase)), 'accent');\n\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['color', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[attr.tabindex]': 'null',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, CanDisableRipple, HasTabIndex {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n    if (this._checked !== newCheckedState) {\n      this._checked = newCheckedState;\n      if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value !== value) {\n      this._value = value;\n      if (this.radioGroup !== null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value === value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    const newDisabledState = coerceBooleanProperty(value);\n    if (this._disabled !== newDisabledState) {\n      this._disabled = newDisabledState;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio. */\n  private _value: any = null;\n\n  /** Unregister function for _radioDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id !== this.id && name === this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin && this.radioGroup) {\n          this.radioGroup._touch();\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    this.change.emit(new MatRadioChange(this, this._value));\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material drawers.\n * @docs-private\n */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    // We remove the `transform` here completely, rather than setting it to zero, because:\n    // 1. Having a transform can cause elements with ripples or an animated\n    //    transform to shift around in Chrome with an RTL layout (see #10023).\n    // 2. 3d transforms causes text to appear blurry on IE and Edge.\n    state('open, open-instant', style({\n      'transform': 'none',\n      'visibility': 'visible',\n    })),\n    state('void', style({\n      // Avoids the shadow showing up when closed in SSR.\n      'box-shadow': 'none',\n      'visibility': 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelect, MatSelectTrigger} from './select';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  keyframes,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * Animations used by MatTooltip.\n * @docs-private\n */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({opacity: 0, transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('200ms cubic-bezier(0, 0, 0.2, 1)', keyframes([\n      style({opacity: 0, transform: 'scale(0)', offset: 0}),\n      style({opacity: 0.5, transform: 'scale(0.99)', offset: 0.5}),\n      style({opacity: 1, transform: 'scale(1)', offset: 1})\n    ]))),\n    transition('* => hidden', animate('100ms cubic-bezier(0, 0, 0.2, 1)', style({opacity: 0}))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {\n  MatTooltip,\n  TooltipComponent,\n  MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './tooltip';\n\n@NgModule({\n  imports: [\n    A11yModule,\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [\n    MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig},\n  ]\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable({providedIn: 'root'})\nexport class MatPaginatorIntl {\n  /**\n   * Stream to emit from when labels are changed. Use this to notify components when the labels have\n   * changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel: string = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel: string = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel: string = 'Previous page';\n\n  /** A label for the button that moves to the first page. */\n  firstPageLabel: string = 'First page';\n\n  /** A label for the button that moves to the last page. */\n  lastPageLabel: string = 'Last page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatPaginatorIntl} from './paginator-intl';\nimport {\n  HasInitialized,\n  HasInitializedCtor,\n  mixinInitialized,\n  ThemePalette,\n} from '@angular/material/core';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /**\n   * Index of the page that was selected previously.\n   * @breaking-change 8.0.0 To be made into a required property.\n   */\n  previousPageIndex?: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n// Boilerplate for applying mixins to MatPaginator.\n/** @docs-private */\nexport class MatPaginatorBase {}\nexport const _MatPaginatorBase: HasInitializedCtor & typeof MatPaginatorBase =\n    mixinInitialized(MatPaginatorBase);\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatPaginator extends _MatPaginatorBase implements OnInit, OnDestroy, HasInitialized {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** Theme color to be used for the underlying form controls. */\n  @Input() color: ThemePalette;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(value: number) {\n    this._pageIndex = Math.max(coerceNumberProperty(value), 0);\n    this._changeDetectorRef.markForCheck();\n  }\n  _pageIndex: number = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(value: number) {\n    this._length = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  _length: number = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(value: number) {\n    this._pageSize = Math.max(coerceNumberProperty(value), 0);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(value: number[]) {\n    this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Whether to hide the page size selection UI from the user. */\n  @Input()\n  get hidePageSize(): boolean { return this._hidePageSize; }\n  set hidePageSize(value: boolean) {\n    this._hidePageSize = coerceBooleanProperty(value);\n  }\n  private _hidePageSize = false;\n\n\n  /** Whether to show the first/last buttons UI to the user. */\n  @Input()\n  get showFirstLastButtons(): boolean { return this._showFirstLastButtons; }\n  set showFirstLastButtons(value: boolean) {\n    this._showFirstLastButtons = coerceBooleanProperty(value);\n  }\n  private _showFirstLastButtons = false;\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() readonly page: EventEmitter<PageEvent> = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n    this._markInitialized();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage(): void {\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex++;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage(): void {\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex--;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the first page if not already there. */\n  firstPage(): void {\n    // hasPreviousPage being false implies at the start\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = 0;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the last page if not already there. */\n  lastPage(): void {\n    // hasNextPage being false implies at the end\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = this.getNumberOfPages() - 1;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage(): boolean {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage(): boolean {\n    const maxPageIndex = this.getNumberOfPages() - 1;\n    return this.pageIndex < maxPageIndex && this.pageSize != 0;\n  }\n\n  /** Calculate the number of pages */\n  getNumberOfPages(): number {\n    if (!this.pageSize) {\n      return 0;\n    }\n\n    return Math.ceil(this.length / this.pageSize);\n  }\n\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    const previousPageIndex = this.pageIndex;\n\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n    this.pageSize = pageSize;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) === -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent(previousPageIndex: number) {\n    this.page.emit({\n      previousPageIndex,\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  TemplateRef,\n  ComponentFactoryResolver,\n  ApplicationRef,\n  Injector,\n  ViewContainerRef,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {TemplatePortal, DomPortalOutlet} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {Subject} from 'rxjs';\n\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\n@Directive({\n  selector: 'ng-template[matMenuContent]'\n})\nexport class MatMenuContent implements OnDestroy {\n  private _portal: TemplatePortal<any>;\n  private _outlet: DomPortalOutlet;\n\n  /** Emits when the menu content has been attached. */\n  _attached = new Subject<void>();\n\n  constructor(\n    private _template: TemplateRef<any>,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n    private _injector: Injector,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) private _document: any) {}\n\n  /**\n   * Attaches the content with a particular context.\n   * @docs-private\n   */\n  attach(context: any = {}) {\n    if (!this._portal) {\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n    }\n\n    this.detach();\n\n    if (!this._outlet) {\n      this._outlet = new DomPortalOutlet(this._document.createElement('div'),\n          this._componentFactoryResolver, this._appRef, this._injector);\n    }\n\n    const element: HTMLElement = this._template.elementRef.nativeElement;\n\n    // Because we support opening the same menu from different triggers (which in turn have their\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n    // risk it staying attached to a pane that's no longer in the DOM.\n    element.parentNode!.insertBefore(this._outlet.outletElement, element);\n    this._portal.attach(this._outlet, context);\n    this._attached.next();\n  }\n\n  /**\n   * Detaches the content.\n   * @docs-private\n   */\n  detach() {\n    if (this._portal.isAttached) {\n      this._portal.detach();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._outlet) {\n      this._outlet.dispose();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  query,\n  group,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n * @docs-private\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: AnimationTriggerMetadata;\n  readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(0.8)'\n    })),\n    transition('void => enter', group([\n      query('.mat-menu-content', animate('100ms linear', style({opacity: 1}))),\n      animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({transform: 'scale(1)'})),\n    ])),\n    transition('* => void', animate('100ms 25ms linear', style({opacity: 0})))\n  ]),\n\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n    // TODO(crisbeto): this is inside the `transformMenu`\n    // now. Remove next time we do breaking changes.\n    state('showing', style({opacity: 1})),\n    transition('void => *', [\n      style({opacity: 0}),\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const transformMenu = matMenuAnimations.transformMenu;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EventEmitter, TemplateRef, InjectionToken} from '@angular/core';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {Direction} from '@angular/cdk/bidi';\nimport {FocusOrigin} from '@angular/cdk/a11y';\nimport {MatMenuContent} from './menu-content';\n\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * @docs-private\n */\nexport const MAT_MENU_PANEL = new InjectionToken<MatMenuPanel>('MAT_MENU_PANEL');\n\n/**\n * Interface for a custom menu panel that can be used with `matMenuTriggerFor`.\n * @docs-private\n */\nexport interface MatMenuPanel<T = any> {\n  xPosition: MenuPositionX;\n  yPosition: MenuPositionY;\n  overlapTrigger: boolean;\n  templateRef: TemplateRef<any>;\n  close: EventEmitter<void | 'click' | 'keydown' | 'tab'>;\n  parentMenu?: MatMenuPanel | undefined;\n  direction?: Direction;\n  focusFirstItem: (origin?: FocusOrigin) => void;\n  resetActiveItem: () => void;\n  setPositionClasses?: (x: MenuPositionX, y: MenuPositionY) => void;\n  setElevation?(depth: number): void;\n  lazyContent?: MatMenuContent;\n  backdropClass?: string;\n  hasBackdrop?: boolean;\n  addItem?: (item: T) => void;\n  removeItem?: (item: T) => void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nexport class MatMenuItemBase {}\nexport const _MatMenuItemMixinBase: CanDisableRippleCtor & CanDisableCtor & typeof MatMenuItemBase =\n    mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    'role': 'menuitem',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n    '(click)': '_checkDisabled($event)',\n    '(mouseenter)': '_handleMouseEnter()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n\n  private _document: Document;\n\n  /** Stream that emits when the menu item is hovered. */\n  readonly _hovered: Subject<MatMenuItem> = new Subject<MatMenuItem>();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) document?: any,\n    private _focusMonitor?: FocusMonitor,\n    @Inject(MAT_MENU_PANEL) @Optional() private _parentMenu?: MatMenuPanel<MatMenuItem>) {\n\n    // @breaking-change 8.0.0 make `_focusMonitor` and `document` required params.\n    super();\n\n    if (_focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      _focusMonitor.monitor(this._elementRef, false);\n    }\n\n    if (_parentMenu && _parentMenu.addItem) {\n      _parentMenu.addItem(this);\n    }\n\n    this._document = document;\n  }\n\n  /** Focuses the menu item. */\n  focus(origin: FocusOrigin = 'program'): void {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin);\n    } else {\n      this._getHostElement().focus();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n\n    if (this._parentMenu && this._parentMenu.removeItem) {\n      this._parentMenu.removeItem(this);\n    }\n\n    this._hovered.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  _handleMouseEnter() {\n    this._hovered.next(this);\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === textNodeType) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager, FocusOrigin} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, LEFT_ARROW, RIGHT_ARROW, DOWN_ARROW, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Output,\n  TemplateRef,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  OnInit,\n} from '@angular/core';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, switchMap, take} from 'rxjs/operators';\nimport {matMenuAnimations} from './menu-animations';\nimport {MatMenuContent} from './menu-content';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {AnimationEvent} from '@angular/animations';\n\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n\n  /** Class to be applied to the menu's backdrop. */\n  backdropClass: string;\n\n  /** Whether the menu has a backdrop. */\n  hasBackdrop?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options', {\n      providedIn: 'root',\n      factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_MENU_DEFAULT_OPTIONS_FACTORY(): MatMenuDefaultOptions {\n  return {\n    overlapTrigger: false,\n    xPosition: 'after',\n    yPosition: 'below',\n    backdropClass: 'cdk-overlay-transparent-backdrop',\n  };\n}\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 4;\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matMenu',\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  providers: [\n    {provide: MAT_MENU_PANEL, useExisting: MatMenu}\n  ]\n})\nexport class MatMenu implements AfterContentInit, MatMenuPanel<MatMenuItem>, OnInit, OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** Menu items inside the current menu. */\n  private _items: MatMenuItem[] = [];\n\n  /** Emits whenever the amount of menu items changes. */\n  private _itemChanges = new Subject<MatMenuItem[]>();\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter' = 'void';\n\n  /** Emits whenever an animation on the menu completes. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  /** Whether the menu is animating. */\n  _isAnimating: boolean;\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Class to be added to the backdrop element. */\n  @Input() backdropClass: string = this._defaultOptions.backdropClass;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition(): MenuPositionX { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition(): MenuPositionY { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) templateRef: TemplateRef<any>;\n\n  /**\n   * List of the items inside of a menu.\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\n\n  /**\n   * Menu content that will be rendered lazily.\n   * @docs-private\n   */\n  @ContentChild(MatMenuContent) lazyContent: MatMenuContent;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  get overlapTrigger(): boolean { return this._overlapTrigger; }\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /** Whether the menu has a backdrop. */\n  @Input()\n  get hasBackdrop(): boolean | undefined { return this._hasBackdrop; }\n  set hasBackdrop(value: boolean | undefined) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n  private _hasBackdrop: boolean | undefined = this._defaultOptions.hasBackdrop;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    if (classes && classes.length) {\n      this._classList = classes.split(' ').reduce((obj: any, className: string) => {\n        obj[className] = true;\n        return obj;\n      }, {});\n\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   * @breaking-change 8.0.0\n   */\n  @Input()\n  get classList(): string { return this.panelClass; }\n  set classList(classes: string) { this.panelClass = classes; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() readonly closed: EventEmitter<void | 'click' | 'keydown' | 'tab'> =\n      new EventEmitter<void | 'click' | 'keydown' | 'tab'>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   * @breaking-change 8.0.0\n   */\n  @Output() close = this.closed;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngOnInit() {\n    this.setPositionClasses();\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatMenuItem>(this._items).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n  }\n\n  ngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    return this._itemChanges.pipe(\n      startWith(this._items),\n      switchMap(items => merge(...items.map(item => item._hovered)))\n    );\n  }\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n\n    switch (keyCode) {\n      case ESCAPE:\n        this.closed.emit('keydown');\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      default:\n        if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n          this._keyManager.setFocusOrigin('keyboard');\n        }\n\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n    if (this.lazyContent) {\n      this._ngZone.onStable.asObservable()\n        .pipe(take(1))\n        .subscribe(() => this._keyManager.setFocusOrigin(origin).setFirstItemActive());\n    } else {\n      this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n    }\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /**\n   * Registers a menu item with the menu.\n   * @docs-private\n   */\n  addItem(item: MatMenuItem) {\n    // We register the items through this method, rather than picking them up through\n    // `ContentChildren`, because we need the items to be picked up by their closest\n    // `mat-menu` ancestor. If we used `@ContentChildren(MatMenuItem, {descendants: true})`,\n    // all descendant items will bleed into the top-level menu in the case where the consumer\n    // has `mat-menu` instances nested inside each other.\n    if (this._items.indexOf(item) === -1) {\n      this._items.push(item);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Removes an item from the menu.\n   * @docs-private\n   */\n  removeItem(item: MatMenuItem) {\n    const index = this._items.indexOf(item);\n\n    if (this._items.indexOf(item) > -1) {\n      this._items.splice(index, 1);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Adds classes to the menu panel based on its position. Can be used by\n   * consumers to add specific styling based on the position.\n   * @param posX Position of the menu along the x axis.\n   * @param posY Position of the menu along the y axis.\n   * @docs-private\n   */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    const classes = this._classList;\n    classes['mat-menu-before'] = posX === 'before';\n    classes['mat-menu-after'] = posX === 'after';\n    classes['mat-menu-above'] = posY === 'above';\n    classes['mat-menu-below'] = posY === 'below';\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    // @breaking-change 8.0.0 Combine with _resetAnimation.\n    this._panelAnimationState = 'enter';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    // @breaking-change 8.0.0 Combine with _startAnimation.\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    this._animationDone.next(event);\n    this._isAnimating = false;\n\n    // Scroll the content element to the top once the animation is done. This is necessary, because\n    // we move focus to the first item while it's still being animated, which can throw the browser\n    // off when it determines the scroll position. Alternatively we can move focus when the\n    // animation is done, however moving focus asynchronously will interrupt screen readers\n    // which are in the process of reading out the menu already. We take the `element` from\n    // the `event` since we can't use a `ViewChild` to access the pane.\n    if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n      event.element.scrollTop = 0;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin, isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  VerticalConnectionPos,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {asapScheduler, merge, of as observableOf, Subscription} from 'rxjs';\nimport {delay, filter, take, takeUntil} from 'rxjs/operators';\nimport {MatMenu} from './menu-directive';\nimport {throwMatMenuMissingError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '[attr.aria-expanded]': 'menuOpen || null',\n    '(mousedown)': '_handleMousedown($event)',\n    '(touchstart)': '_openedBy = \"touch\"',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closeSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n  private _scrollStrategy: () => ScrollStrategy;\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  _openedBy: 'mouse' | 'touch' | null = null;\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel {\n    return this.menu;\n  }\n\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor') menu: MatMenuPanel;\n\n  /** Data to be passed along to any lazily-rendered content. */\n  @Input('matMenuTriggerData') menuData: any;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() readonly menuOpened: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   * @breaking-change 8.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuOpen: EventEmitter<void> = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() readonly menuClosed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   * @breaking-change 8.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuClose: EventEmitter<void> = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef<HTMLElement>,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _parentMenu: MatMenu,\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality,\n              // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n              // @breaking-change 8.0.0\n              private _focusMonitor?: FocusMonitor) {\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n\n    this.menu.close.asObservable().subscribe(reason => {\n      this._destroyMenu();\n\n      // If a click closed the menu, we should close the entire chain of nested menus.\n      if ((reason === 'click' || reason === 'tab') && this._parentMenu) {\n        this._parentMenu.closed.emit(reason);\n      }\n    });\n\n    this._handleHover();\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._cleanUpSubscriptions();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (this._menuOpen) {\n      return;\n    }\n\n    this._checkMenu();\n\n    const overlayRef = this._createOverlay();\n    this._setPosition(overlayRef.getConfig().positionStrategy as FlexibleConnectedPositionStrategy);\n    overlayRef.attach(this._portal);\n\n    if (this.menu.lazyContent) {\n      this.menu.lazyContent.attach(this.menuData);\n    }\n\n    this._closeSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n    this._initMenu();\n\n    if (this.menu instanceof MatMenu) {\n      this.menu._startAnimation();\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n  focus(origin: FocusOrigin = 'program') {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._element, origin);\n    } else {\n      this._element.nativeElement.focus();\n    }\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (!this._overlayRef || !this.menuOpen) {\n      return;\n    }\n\n    const menu = this.menu;\n\n    this._closeSubscription.unsubscribe();\n    this._overlayRef.detach();\n\n    if (menu instanceof MatMenu) {\n      menu._resetAnimation();\n\n      if (menu.lazyContent) {\n        // Wait for the exit animation to finish before detaching the content.\n        menu._animationDone\n          .pipe(\n            filter(event => event.toState === 'void'),\n            take(1),\n            // Interrupt if the content got re-attached.\n            takeUntil(menu.lazyContent._attached)\n          )\n          .subscribe(() => menu.lazyContent!.detach(), undefined, () => {\n            // No matter whether the content got re-attached, reset the menu.\n            this._resetMenu();\n          });\n      } else {\n        this._resetMenu();\n      }\n    } else {\n      this._resetMenu();\n\n      if (menu.lazyContent) {\n        menu.lazyContent.detach();\n      }\n    }\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n    this.menu.focusFirstItem(this._openedBy || 'program');\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  /**\n   * This method resets the menu when it's closed, most importantly restoring\n   * focus to the menu trigger if the menu was opened via the keyboard.\n   */\n  private _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (!this._openedBy) {\n      // Note that the focus style will show up both for `program` and\n      // `keyboard` so we don't have to specify which one it is.\n      this.focus();\n    } else if (!this.triggersSubmenu()) {\n      this.focus(this._openedBy);\n    }\n\n    this._openedBy = null;\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as FlexibleConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n\n      // Consume the `keydownEvents` in order to prevent them from going to another overlay.\n      // Ideally we'd also have our keyboard event logic in here, however doing so will\n      // break anybody that may have implemented the `MatMenuPanel` themselves.\n      this._overlayRef.keydownEvents().subscribe();\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._overlay.position()\n          .flexibleConnectedTo(this._element)\n          .withLockedPosition()\n          .withTransformOriginOn('.mat-menu-panel'),\n      hasBackdrop: this.menu.hasBackdrop == null ? !this.triggersSubmenu() : this.menu.hasBackdrop,\n      backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n      scrollStrategy: this._scrollStrategy(),\n      direction: this._dir\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: FlexibleConnectedPositionStrategy): void {\n    if (this.menu.setPositionClasses) {\n      position.positionChanges.subscribe(change => {\n        const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n        const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n        this.menu.setPositionClasses!(posX, posY);\n      });\n    }\n  }\n\n  /**\n   * Sets the appropriate positions on a position strategy\n   * so the overlay connects with the trigger correctly.\n   * @param positionStrategy Strategy whose position to update.\n   */\n  private _setPosition(positionStrategy: FlexibleConnectedPositionStrategy) {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    positionStrategy.withPositions([\n      {originX, originY, overlayX, overlayY, offsetY},\n      {originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY},\n      {\n        originX,\n        originY: originFallbackY,\n        overlayX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      },\n      {\n        originX: originFallbackX,\n        originY: originFallbackY,\n        overlayX: overlayFallbackX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      }\n    ]);\n  }\n\n  /** Cleans up the active subscriptions. */\n  private _cleanUpSubscriptions(): void {\n    this._closeSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMenu ? this._parentMenu.closed : observableOf();\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      // Since right or middle button clicks won't trigger the `click` event,\n      // we shouldn't consider the menu as opened by mouse in those cases.\n      this._openedBy = event.button === 0 ? 'mouse' : null;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n  /** Handles the cases where the user hovers over the trigger. */\n  private _handleHover() {\n    // Subscribe to changes in the hovered item in order to toggle the panel.\n    if (!this.triggersSubmenu()) {\n      return;\n    }\n\n    this._hoverSubscription = this._parentMenu._hovered()\n      // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n      // with different data and triggers), we have to delay it by a tick to ensure that\n      // it won't be closed immediately after it is opened.\n      .pipe(\n        filter(active => active === this._menuItemInstance && !active.disabled),\n        delay(0, asapScheduler)\n      )\n      .subscribe(() => {\n        this._openedBy = 'mouse';\n\n        // If the same menu is used between multiple triggers, it might still be animating\n        // while the new trigger tries to re-open it. Wait for the animation to finish\n        // before doing so. Also interrupt if the user moves to another item.\n        if (this.menu instanceof MatMenu && this.menu._isAnimating) {\n          // We need the `delay(0)` here in order to avoid\n          // 'changed after checked' errors in some cases. See #12194.\n          this.menu._animationDone\n            .pipe(take(1), delay(0, asapScheduler), takeUntil(this._parentMenu._hovered()))\n            .subscribe(() => this.openMenu());\n        } else {\n          this.openMenu();\n        }\n      });\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatMenuContent} from './menu-content';\nimport {MatMenu} from './menu-directive';\nimport {MatMenuItem} from './menu-item';\nimport {\n  MatMenuTrigger,\n  MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './menu-trigger';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    MatRippleModule,\n    OverlayModule,\n  ],\n  exports: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent, MatCommonModule],\n  declarations: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent],\n  providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * @docs-private\n */\nexport const matSelectAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      transform: 'scaleY(0.8)',\n      minWidth: '100%',\n      opacity: 0\n    })),\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', animate('120ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void', animate('100ms 25ms linear', style({opacity: 0})))\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   * @deprecated Not used anymore. To be removed.\n   * @breaking-change 8.0.0\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {SPACE, ENTER, HOME, END, UP_ARROW, DOWN_ARROW, A} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple, CanDisableRippleCtor,\n  MatLine,\n  setLines,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Subscription} from 'rxjs';\nimport {MatListAvatarCssMatStyler, MatListIconCssMatStyler} from './list';\n\n\n/** @docs-private */\nexport class MatSelectionListBase {}\nexport const _MatSelectionListMixinBase: CanDisableRippleCtor & typeof MatSelectionListBase =\n    mixinDisableRipple(MatSelectionListBase);\n\n/** @docs-private */\nexport class MatListOptionBase {}\nexport const _MatListOptionMixinBase: CanDisableRippleCtor & typeof MatListOptionBase =\n    mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _selected = false;\n  private _disabled = false;\n  private _hasFocus = false;\n\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler) _icon: MatListIconCssMatStyler;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text') _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Value of the option */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */\n              @Inject(forwardRef(() => MatSelectionList)) public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    // List options that are selected at initialization can't be reported properly to the form\n    // control. This is because it takes some time until the selection-list knows about all\n    // available options. Also it can happen that the ControlValueAccessor has an initial value\n    // that should be used instead. Deferring the value change report to the next tick ensures\n    // that the form control value is not being overwritten.\n    const wasSelected = this._selected;\n\n    Promise.resolve().then(() => {\n      if (this._selected || wasSelected) {\n        this.selected = true;\n        this._changeDetector.markForCheck();\n      }\n    });\n  }\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => this.selected = false);\n    }\n\n    const hadFocus = this._hasFocus;\n    const newActiveItem = this.selectionList._removeOptionFromList(this);\n\n    // Only move focus if this option was focused at the time it was destroyed.\n    if (hadFocus && newActiveItem) {\n      newActiveItem.focus();\n    }\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? (this._text.nativeElement.textContent || '') : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n    }\n  }\n\n  _handleFocus() {\n    this.selectionList._setFocusedOption(this);\n    this._hasFocus = true;\n  }\n\n  _handleBlur() {\n    this.selectionList._onTouched();\n    this._hasFocus = false;\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. Returns whether the value has changed. */\n  _setSelected(selected: boolean): boolean {\n    if (selected === this._selected) {\n      return false;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n    return true;\n  }\n\n  /**\n   * Notifies Angular that the option needs to be checked in the next change detection run. Mainly\n   * used to trigger an update of the list option if the disabled state of the selection list\n   * changed.\n   */\n  _markForCheck() {\n    this._changeDetector.markForCheck();\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list',\n    '(focus)': 'focus()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    'aria-multiselectable': 'true',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\n    CanDisableRipple, AfterContentInit, ControlValueAccessor, OnDestroy {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** Tabindex of the selection list. */\n  @Input() tabIndex: number = 0;\n\n  /**\n   * Function used for comparing an option against the selected value when determining which\n   * options should appear as selected. The first argument is the value of an options. The second\n   * one is a value from the selected value. A boolean must be returned.\n   */\n  @Input() compareWith: (o1: any, o2: any) => boolean;\n\n  /** Whether the selection list is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // The `MatSelectionList` and `MatListOption` are using the `OnPush` change detection\n    // strategy. Therefore the options will not check for any changes if the `MatSelectionList`\n    // changed its state. Since we know that a change to `disabled` property of the list affects\n    // the state of the options, we manually mark each option for check.\n    if (this.options) {\n      this.options.forEach(option => option._markForCheck());\n    }\n  }\n  private _disabled: boolean = false;\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Used for storing the values that were assigned before the options were initialized. */\n  private _tempValues: string[]|null;\n\n  /** Subscription to sync value changes in the SelectionModel back to the SelectionList. */\n  private _modelChanges = Subscription.EMPTY;\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  constructor(private _element: ElementRef<HTMLElement>, @Attribute('tabindex') tabIndex: string) {\n    super();\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options)\n      .withWrap()\n      .withTypeAhead()\n      // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\n      // screenreader users, that allows reading the different options of the list.\n      .skipPredicate(() => false);\n\n    if (this._tempValues) {\n      this._setOptionsFromValues(this._tempValues);\n      this._tempValues = null;\n    }\n\n    // Sync external changes to the model back to the options.\n    this._modelChanges = this.selectedOptions.onChange.subscribe(event => {\n      if (event.added) {\n        for (let item of event.added) {\n          item.selected = true;\n        }\n      }\n\n      if (event.removed) {\n        for (let item of event.removed) {\n          item.selected = false;\n        }\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this._modelChanges.unsubscribe();\n  }\n\n  /** Focuses the last active list option. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this._setAllOptionsSelected(true);\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this._setAllOptionsSelected(false);\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItemIndex(this._getOptionIndex(option));\n  }\n\n  /**\n   * Removes an option from the selection list and updates the active item.\n   * @returns Currently-active item.\n   */\n  _removeOptionFromList(option: MatListOption): MatListOption | null {\n    const optionIndex = this._getOptionIndex(option);\n\n    if (optionIndex > -1 && this._keyManager.activeItemIndex === optionIndex) {\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.updateActiveItemIndex(optionIndex - 1);\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.updateActiveItemIndex(Math.min(optionIndex + 1, this.options.length - 1));\n      }\n    }\n\n    return this._keyManager.activeItem;\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n    const previousFocusIndex = manager.activeItemIndex;\n\n    switch (keyCode) {\n      case SPACE:\n      case ENTER:\n        this._toggleFocusedOption();\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n      case HOME:\n      case END:\n        keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case A:\n        if (event.ctrlKey) {\n          this.options.find(option => !option.selected) ? this.selectAll() : this.deselectAll();\n          event.preventDefault();\n        }\n        break;\n      default:\n        manager.onKeydown(event);\n    }\n\n    if ((keyCode === UP_ARROW || keyCode === DOWN_ARROW) && event.shiftKey &&\n        manager.activeItemIndex !== previousFocusIndex) {\n      this._toggleFocusedOption();\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    if (this.options) {\n      this._onChange(this._getSelectedOptionValues());\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    } else {\n      this._tempValues = values;\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values.forEach(value => {\n      const correspondingOption = this.options.find(option => {\n        // Skip options that are already in the model. This allows us to handle cases\n        // where the same primitive value is selected multiple times.\n        if (option.selected) {\n          return false;\n        }\n\n        return this.compareWith ? this.compareWith(option.value, value) : option.value === value;\n      });\n\n      if (correspondingOption) {\n        correspondingOption._setSelected(true);\n      }\n    });\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the state of the currently focused option if enabled. */\n  private _toggleFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption && !focusedOption.disabled) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n      }\n    }\n  }\n\n  /**\n   * Sets the selected state on all of the options\n   * and emits an event if anything changed.\n   */\n  private _setAllOptionsSelected(isSelected: boolean) {\n    // Keep track of whether anything changed, because we only want to\n    // emit the changed event when something actually changed.\n    let hasChanged = false;\n\n    this.options.forEach(option => {\n      if (option._setSelected(isSelected)) {\n        hasChanged = true;\n      }\n    });\n\n    if (hasChanged) {\n      this._reportValueChange();\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MatLine,\n  setLines,\n  mixinDisableRipple,\n} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nexport class MatListBase {}\nexport const _MatListMixinBase: CanDisableRippleCtor & typeof MatListBase =\n    mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nexport class MatListItemBase {}\nexport const _MatListItemMixinBase: CanDisableRippleCtor & typeof MatListItemBase =\n    mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list, mat-action-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {'class': 'mat-list'},\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item], button[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    // @breaking-change 8.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\n    '[class.mat-list-item-avatar]': '_avatar || _icon',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple {\n  private _isNavList: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler) _icon: MatListIconCssMatStyler;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              @Optional() private _navList: MatNavList) {\n    super();\n    this._isNavList = !!_navList;\n\n    // If no type attributed is specified for <button>, set it to \"button\".\n    // If a type attribute is already specified, do nothing.\n    const element = this._getHostElement();\n    if (element.nodeName && element.nodeName.toLowerCase() === 'button'\n        && !element.hasAttribute('type')) {\n      element.setAttribute('type', 'button');\n    }\n  }\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isNavList || this.disableRipple || this._navList.disableRipple;\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  Optional,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n  Inject,\n} from '@angular/core';\nimport {MatLine, setLines} from '@angular/material/core';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MAT_GRID_LIST, MatGridListBase} from './grid-list-base';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(\n    private _element: ElementRef<HTMLElement>,\n    @Optional() @Inject(MAT_GRID_LIST) public _gridList?: MatGridListBase) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value: number) { this._rowspan = Math.round(coerceNumberProperty(value)); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value: number) { this._colspan = Math.round(coerceNumberProperty(value)); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    (this._element.nativeElement.style as any)[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridTileText implements AfterContentInit {\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef<HTMLElement>) {}\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    const lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  /**\n   * Updates the tile positions.\n   * @param numColumns Amount of columns in the grid.\n   */\n  update(numColumns: number, tiles: MatGridTile[]) {\n    this.columnIndex = 0;\n    this.rowIndex = 0;\n\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    const gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile. Since gapEndIndex is\n      // exclusive, gapEndIndex is 0 means we didn't find a gap and should continue.\n    } while ((gapEndIndex - gapStartIndex < tileCols) || (gapEndIndex == 0));\n\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * RegExp that can be used to check whether a value will\n * be allowed inside a CSS `calc()` expression.\n */\nconst cssCalcAllowedValue = /^-?\\d+((\\.\\d+)?[A-Za-z%$]?)+$/;\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'rtl' ? 'right' : 'left';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number): void;\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList): void;\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n\n    if (!cssCalcAllowedValue.test(this.fixedRowHeight)) {\n      throw Error(`Invalid value \"${this.fixedRowHeight}\" set as rowHeight.`);\n    }\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    if (list._tiles) {\n      list._tiles.forEach(tile => {\n        tile._setStyle('top', null);\n        tile._setStyle('height', null);\n      });\n    }\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height. */\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['paddingBottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('marginTop', null);\n      tile._setStyle('paddingTop', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    if (list._tiles) {\n      list._tiles.forEach(tile => {\n        tile._setStyle('top', null);\n        tile._setStyle('height', null);\n      });\n    }\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string { return `calc(${exp})`; }\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return (value.match(/px|em|rem/)) ? value : value + 'px';\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MAT_GRID_LIST, MatGridListBase} from './grid-list-base';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  providers: [{\n    provide: MAT_GRID_LIST,\n    useExisting: MatGridList\n  }],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridList implements MatGridListBase, OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /** Used for determiningthe position of each tile in the grid. */\n  private _tileCoordinator: TileCoordinator;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile, {descendants: true}) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols(): number { return this._cols; }\n  set cols(value: number) {\n    this._cols = Math.max(1, Math.round(coerceNumberProperty(value)));\n  }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize(): string { return this._gutter; }\n  set gutterSize(value: string) { this._gutter = `${value == null ? '' : value}`; }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  get rowHeight(): string | number { return this._rowHeight; }\n  set rowHeight(value: string | number) {\n    const newValue = `${value == null ? '' : value}`;\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    if (!this._tileCoordinator) {\n      this._tileCoordinator = new TileCoordinator();\n    }\n\n\n    const tracker = this._tileCoordinator;\n    const tiles = this._tiles.filter(tile => !tile._gridList || tile._gridList === this);\n    const direction = this._dir ? this._dir.value : 'ltr';\n\n    this._tileCoordinator.update(this.cols, tiles);\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      (this._element.nativeElement.style as any)[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {HttpClient, HttpErrorResponse} from '@angular/common/http';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n} from '@angular/core';\nimport {DomSanitizer, SafeResourceUrl, SafeHtml} from '@angular/platform-browser';\nimport {forkJoin, Observable, of as observableOf, throwError as observableThrow} from 'rxjs';\nimport {catchError, finalize, map, share, tap} from 'rxjs/operators';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeUrlError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeLiteralError(literal: SafeHtml): Error {\n  return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n               `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  url: SafeResourceUrl | null;\n  svgElement: SVGElement | null;\n\n  constructor(url: SafeResourceUrl);\n  constructor(svgElement: SVGElement);\n  constructor(data: SafeResourceUrl | SVGElement) {\n    // Note that we can't use `instanceof SVGElement` here,\n    // because it'll break during server-side rendering.\n    if (!!(data as any).nodeName) {\n      this.svgElement = data as SVGElement;\n    } else {\n      this.url = data as SafeResourceUrl;\n    }\n  }\n}\n\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable({providedIn: 'root'})\nexport class MatIconRegistry {\n  private _document: Document;\n\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document: any) {\n      this._document = document;\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n\n  /**\n   * Registers an icon using an HTML string in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteral(iconName: string, literal: SafeHtml): this {\n    return this.addSvgIconLiteralInNamespace('', iconName, literal);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon using an HTML string in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteralInNamespace(namespace: string, iconName: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._createSvgElementForSingleIcon(sanitizedLiteral);\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the default namespace.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteral(literal: SafeHtml): this {\n    return this.addSvgIconSetLiteralInNamespace('', literal);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteralInNamespace(namespace: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._svgElementFromString(sanitizedLiteral);\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the `<mat-icon>` element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    const cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg)),\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg)),\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: HttpErrorResponse): Observable<SVGElement | null> => {\n            const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the\n            // combined Observable won't necessarily fail.\n            console.error(`Loading icon set URL: ${url} failed: ${err.message}`);\n            return observableOf(null);\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // If the SVG for this icon set has already been parsed, do nothing.\n    if (config.svgElement) {\n      return observableOf(config.svgElement);\n    }\n\n    return this._fetchUrl(config.url).pipe(map(svgText => {\n      // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n      // only needs to occur if the cache is yet unset.\n      if (!config.svgElement) {\n        config.svgElement = this._svgElementFromString(svgText);\n      }\n\n      return config.svgElement;\n    }));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    const iconSource = iconSet.querySelector('#' + iconName);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.removeAttribute('id');\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    const div = this._document.createElement('DIV');\n    div.innerHTML = str;\n    const svg = div.querySelector('svg') as SVGElement;\n\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n\n    return svg;\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    let svg = this._svgElementFromString('<svg></svg>');\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl | null): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    if (safeUrl == null) {\n      throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finalize` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share(),\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n\n  /**\n   * Registers an icon config by name in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param iconName Name under which to register the config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconConfig(namespace: string, iconName: string, config: SvgIconConfig): this {\n    this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n    return this;\n  }\n\n  /**\n   * Registers an icon set config in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconSetConfig(namespace: string, config: SvgIconConfig): this {\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n\n    return this;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), DOCUMENT as InjectionToken<any>],\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n  Optional,\n  InjectionToken,\n  inject,\n  Inject,\n  OnDestroy,\n  AfterViewChecked,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nexport class MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatIconMixinBase: CanColorCtor & typeof MatIconBase =\n    mixinColor(MatIconBase);\n\n/**\n * Injection token used to provide the current location to `MatIcon`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport const MAT_ICON_LOCATION = new InjectionToken<MatIconLocation>('mat-icon-location', {\n  providedIn: 'root',\n  factory: MAT_ICON_LOCATION_FACTORY\n});\n\n/**\n * Stubbed out location for `MatIcon`.\n * @docs-private\n */\nexport interface MatIconLocation {\n  getPathname: () => string;\n}\n\n/** @docs-private */\nexport function MAT_ICON_LOCATION_FACTORY(): MatIconLocation {\n  const _document = inject(DOCUMENT);\n\n  return {\n    // Note that this needs to be a function, rather than a property, because Angular\n    // will only resolve it once, but we want the current path on each call.\n    getPathname: () => (_document && _document.location && _document.location.pathname) || ''\n  };\n}\n\n\n/** SVG attributes that accept a FuncIRI (e.g. `url(<something>)`). */\nconst funcIriAttributes = [\n  'clip-path',\n  'color-profile',\n  'src',\n  'cursor',\n  'fill',\n  'filter',\n  'marker',\n  'marker-start',\n  'marker-mid',\n  'marker-end',\n  'mask',\n  'stroke'\n];\n\n/** Selector that can be used to find all elements that are using a `FuncIRI`. */\nconst funcIriAttributeSelector = funcIriAttributes.map(attr => `[${attr}]`).join(', ');\n\n/** Regex that can be used to extract the id out of a FuncIRI. */\nconst funcIriPattern = /^url\\(['\"]?#(.*?)['\"]?\\)$/;\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon',\n    '[class.mat-icon-inline]': 'inline',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, AfterViewChecked,\n  CanColor, OnDestroy {\n\n  /**\n   * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n   * the element the icon is contained in.\n   */\n  @Input()\n  get inline(): boolean {\n    return this._inline;\n  }\n  set inline(inline: boolean) {\n    this._inline = coerceBooleanProperty(inline);\n  }\n  private _inline: boolean = false;\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  /** Keeps track of the current page path. */\n  private _previousPath?: string;\n\n  /** Keeps track of the elements and attributes that we've prefixed with the current path. */\n  private _elementsWithExternalReferences?: Map<Element, {name: string, value: string}[]>;\n\n  constructor(\n      elementRef: ElementRef<HTMLElement>,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string,\n      /**\n       * @deprecated `location` parameter to be made required.\n       * @breaking-change 8.0.0\n       */\n      @Optional() @Inject(MAT_ICON_LOCATION) private _location?: MatIconLocation) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   `'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)`\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    if (changes.svgIcon) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngAfterViewChecked() {\n    const cachedElements = this._elementsWithExternalReferences;\n\n    if (cachedElements && this._location && cachedElements.size) {\n      const newPath = this._location.getPathname();\n\n      // We need to check whether the URL has changed on each change detection since\n      // the browser doesn't have an API that will let us react on link clicks and\n      // we can't depend on the Angular router. The references need to be updated,\n      // because while most browsers don't care whether the URL is correct after\n      // the first render, Safari will break if the user navigates to a different\n      // page and the SVG isn't re-rendered.\n      if (newPath !== this._previousPath) {\n        this._previousPath = newPath;\n        this._prependPathToReferences(newPath);\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._elementsWithExternalReferences) {\n      this._elementsWithExternalReferences.clear();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n\n    // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\n    // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\n    // Do this before inserting the element into the DOM, in order to avoid a style recalculation.\n    const styleTags = svg.querySelectorAll('style') as NodeListOf<HTMLStyleElement>;\n\n    for (let i = 0; i < styleTags.length; i++) {\n      styleTags[i].textContent += ' ';\n    }\n\n    // Note: we do this fix here, rather than the icon registry, because the\n    // references have to point to the URL at the time that the icon was created.\n    if (this._location) {\n      const path = this._location.getPathname();\n      this._previousPath = path;\n      this._cacheChildrenWithExternalReferences(svg);\n      this._prependPathToReferences(path);\n    }\n\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    let childCount = layoutElement.childNodes.length;\n\n    if (this._elementsWithExternalReferences) {\n      this._elementsWithExternalReferences.clear();\n    }\n\n    // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n    // we can't use innerHTML, because IE will throw if the element has a data binding.\n    while (childCount--) {\n      const child = layoutElement.childNodes[childCount];\n\n      // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n      // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n      if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n        layoutElement.removeChild(child);\n      }\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n\n  /**\n   * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`\n   * reference. This is required because WebKit browsers require references to be prefixed with\n   * the current path, if the page has a `base` tag.\n   */\n  private _prependPathToReferences(path: string) {\n    const elements = this._elementsWithExternalReferences;\n\n    if (elements) {\n      elements.forEach((attrs, element) => {\n        attrs.forEach(attr => {\n          element.setAttribute(attr.name, `url('${path}#${attr.value}')`);\n        });\n      });\n    }\n  }\n\n  /**\n   * Caches the children of an SVG element that have `url()`\n   * references that we need to prefix with the current path.\n   */\n  private _cacheChildrenWithExternalReferences(element: SVGElement) {\n    const elementsWithFuncIri = element.querySelectorAll(funcIriAttributeSelector);\n    const elements = this._elementsWithExternalReferences =\n        this._elementsWithExternalReferences || new Map();\n\n    for (let i = 0; i < elementsWithFuncIri.length; i++) {\n      funcIriAttributes.forEach(attr => {\n        const elementWithReference = elementsWithFuncIri[i];\n        const value = elementWithReference.getAttribute(attr);\n        const match = value ? value.match(funcIriPattern) : null;\n\n        if (match) {\n          let attributes = elements.get(elementWithReference);\n\n          if (!attributes) {\n            attributes = [];\n            elements.set(elementWithReference, attributes);\n          }\n\n          attributes!.push({name: attr, value: match[1]});\n        }\n      });\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  DateAdapter,\n  mixinColor,\n  ThemePalette,\n} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {merge, Subject, Subscription} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatCalendar} from './calendar';\nimport {matDatepickerAnimations} from './datepicker-animations';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY,\n};\n\n// Boilerplate for applying mixins to MatDatepickerContent.\n/** @docs-private */\nexport class MatDatepickerContentBase {\n  constructor(public _elementRef: ElementRef) { }\n}\nexport const _MatDatepickerContentMixinBase: CanColorCtor & typeof MatDatepickerContentBase =\n    mixinColor(MatDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[@transformPanel]': '\"enter\"',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n  },\n  animations: [\n    matDatepickerAnimations.transformPanel,\n    matDatepickerAnimations.fadeInCalendar,\n  ],\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color'],\n})\nexport class MatDatepickerContent<D> extends _MatDatepickerContentMixinBase\n  implements AfterViewInit, CanColor {\n\n  /** Reference to the internal calendar component. */\n  @ViewChild(MatCalendar) _calendar: MatCalendar<D>;\n\n  /** Reference to the datepicker that created the overlay. */\n  datepicker: MatDatepicker<D>;\n\n  /** Whether the datepicker is above or below the input. */\n  _isAbove: boolean;\n\n  constructor(elementRef: ElementRef) {\n    super(elementRef);\n  }\n\n  ngAfterViewInit() {\n    this._calendar.focusActiveCell();\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDatepicker<D> implements OnDestroy, CanColor {\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** An input indicating the type of the custom header component for the calendar, if set. */\n  @Input() calendarHeaderComponent: ComponentType<any>;\n\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n  /** Color palette to use on the datepicker's calendar. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n        (this._datepickerInput ? this._datepickerInput._getThemePalette() : undefined);\n  }\n  set color(value: ThemePalette) {\n    this._color = value;\n  }\n  _color: ThemePalette;\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits selected year in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected month in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { value ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<MatDatepickerContent<D>> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** Reference to the component instantiated in popup mode. */\n  private _popupComponentRef: ComponentRef<MatDatepickerContent<D>> | null;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  /** Subscription to value changes in the associated input element. */\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  /** Emits new selected date when selected date changes. */\n  readonly _selectedChanged = new Subject<D>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n      this._popupComponentRef = null;\n    }\n  }\n\n  /** Selects the given date */\n  select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this._selectedChanged.next(date);\n    }\n  }\n\n  /** Emits the selected year in multiyear view */\n  _selectYear(normalizedYear: D): void {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Emits selected month in year view */\n  _selectMonth(normalizedMonth: D): void {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    // Usually this would be handled by `open` which ensures that we can only have one overlay\n    // open at a time, however since we reset the variables in async handlers some overlays\n    // may slip through if the user opens and closes multiple times in quick succession (e.g.\n    // by holding down the enter key).\n    if (this._dialogRef) {\n      this._dialogRef.close();\n    }\n\n    this._dialogRef = this._dialog.open<MatDatepickerContent<D>>(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n    this._setColor();\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal<MatDatepickerContent<D>>(MatDatepickerContent,\n                                                                          this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\n      this._popupComponentRef.instance.datepicker = this;\n      this._setColor();\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir,\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n    this._popupRef.overlayElement.setAttribute('role', 'dialog');\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => {\n        // Closing on alt + up is only valid when there's an input associated with the datepicker.\n        return event.keyCode === ESCAPE ||\n               (this._datepickerInput && event.altKey && event.keyCode === UP_ARROW);\n      }))\n    ).subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .flexibleConnectedTo(this._datepickerInput.getConnectedOverlayOrigin())\n      .withTransformOriginOn('.mat-datepicker-content')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8)\n      .withLockedPosition()\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom'\n        },\n        {\n          originX: 'end',\n          originY: 'bottom',\n          overlayX: 'end',\n          overlayY: 'top'\n        },\n        {\n          originX: 'end',\n          originY: 'top',\n          overlayX: 'end',\n          overlayY: 'bottom'\n        }\n      ]);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Passes the current theme color along to the calendar overlay. */\n  private _setColor(): void {\n    const color = this.color;\n    if (this._popupComponentRef) {\n      this._popupComponentRef.instance.color = color;\n    }\n    if (this._dialogRef) {\n      this._dialogRef.componentInstance.color = color;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators,\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats, ThemePalette} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/** @docs-private */\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n/** @docs-private */\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onBlur()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements ControlValueAccessor, OnDestroy, Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    if (!value) {\n      return;\n    }\n\n    this._datepicker = value;\n    this._datepicker._registerInput(this);\n    this._datepickerSubscription.unsubscribe();\n\n    this._datepickerSubscription = this._datepicker._selectedChanged.subscribe((selected: D) => {\n      this.value = selected;\n      this._cvaOnChange(selected);\n      this._onTouched();\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n      this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    });\n  }\n  _datepicker: MatDatepicker<D>;\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(value: (date: D | null) => boolean) {\n    this._dateFilter = value;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    const oldDate = this.value;\n    this._value = value;\n    this._formatValue(value);\n\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    const element = this._elementRef.nativeElement;\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n\n    // We need to null check the `blur` method, because it's undefined during SSR.\n    if (newValue && element.blur) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      element.blur();\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D | null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef<HTMLInputElement>,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** @docs-private */\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0 Use `getConnectedOverlayOrigin` instead\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this.getConnectedOverlayOrigin();\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    const isAltDownArrow = event.altKey && event.keyCode === DOWN_ARROW;\n\n    if (this._datepicker && isAltDownArrow && !this._elementRef.nativeElement.readOnly) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n\n    if (!this._dateAdapter.sameDate(date, this._value)) {\n      this._value = date;\n      this._cvaOnChange(date);\n      this._valueChange.emit(date);\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    }\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /** Returns the palette used by the input's form field, if any. */\n  _getThemePalette(): ThemePalette {\n    return this._formField ? this._formField.color : undefined;\n  }\n\n  /** Handles blur events on the input. */\n  _onBlur() {\n    // Reformat the input only if we have a valid value.\n    if (this.value) {\n      this._formatValue(this.value);\n    }\n\n    this._onTouched();\n  }\n\n  /** Formats a value and sets it on the input element. */\n  private _formatValue(value: D | null) {\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class MatDatepickerToggleIcon {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'class': 'mat-datepicker-toggle',\n    // Clear out the native tabindex here since we forward it to the underlying button\n    '[attr.tabindex]': 'null',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n    '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n    '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon) _customIcon: MatDatepickerToggleIcon;\n\n  constructor(\n    public _intl: MatDatepickerIntl,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Attribute('tabindex') defaultTabIndex: string) {\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.datepicker) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatCalendar, MatCalendarHeader} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {\n  MatDatepicker,\n  MatDatepickerContent,\n  MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    OverlayModule,\n    A11yModule,\n    PortalModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n    MatCalendarHeader,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-horizontal]': '!vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input()\n  get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [MatDivider, MatCommonModule],\n  declarations: [MatDivider],\n})\nexport class MatDividerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/**\n * Base interface for a `MatAccordion`.\n * @docs-private\n */\nexport interface MatAccordionBase extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  hideToggle: boolean;\n\n  /** Display mode used for all expansion panels in the accordion. */\n  displayMode: MatAccordionDisplayMode;\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown: (event: KeyboardEvent) => void;\n\n  /** Handles focus events on the panel headers. */\n  _handleHeaderFocus: (header: any) => void;\n}\n\n\n/**\n * Token used to provide a `MatAccordion` to `MatExpansionPanel`.\n * Used primarily to avoid circular imports between `MatAccordion` and `MatExpansionPanel`.\n */\nexport const MAT_ACCORDION = new InjectionToken<MatAccordionBase>('MAT_ACCORDION');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  EventEmitter,\n  ElementRef,\n  Input,\n  Inject,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  SkipSelf,\n  ViewContainerRef,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subject} from 'rxjs';\nimport {filter, startWith, take, distinctUntilChanged} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {MAT_ACCORDION, MatAccordionBase} from './accordion-base';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkAccordionItem = CdkAccordionItem;\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  providers: [\n    // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n    // to the same accordion.\n    {provide: MAT_ACCORDION, useValue: undefined},\n  ],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  }\n})\nexport class MatExpansionPanel extends CdkAccordionItem implements AfterContentInit, OnChanges,\n  OnDestroy {\n\n  // @breaking-change 8.0.0 Remove `| undefined` from here\n  // when the `_document` constructor param is required.\n  private _document: Document | undefined;\n\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean {\n    return this._hideToggle || (this.accordion && this.accordion.hideToggle);\n  }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n  private _hideToggle = false;\n\n  /** An event emitted after the body's expansion animation happens. */\n  @Output() afterExpand = new EventEmitter<void>();\n\n  /** An event emitted after the body's collapse animation happens. */\n  @Output() afterCollapse = new EventEmitter<void>();\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordionBase;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent) _lazyContent: MatExpansionPanelContent;\n\n  /** Element containing the panel's user-provided content. */\n  @ViewChild('body') _body: ElementRef<HTMLElement>;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  /** Stream of body animation done events. */\n  _bodyAnimationDone = new Subject<AnimationEvent>();\n\n  constructor(@Optional() @SkipSelf() @Inject(MAT_ACCORDION) accordion: MatAccordionBase,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef,\n              // @breaking-change 8.0.0 _document and _animationMode to be made required\n              @Inject(DOCUMENT) _document?: any,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n    this._document = _document;\n\n    // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n    this._bodyAnimationDone.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe(event => {\n      if (event.fromState !== 'void') {\n        if (event.toState === 'expanded') {\n          this.afterExpand.emit();\n        } else if (event.toState === 'collapsed') {\n          this.afterCollapse.emit();\n        }\n      }\n    });\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      // We don't need to subscribe to the `stateChanges` of the parent accordion because each time\n      // the [displayMode] input changes, the change detection will also cover the host bindings\n      // of this expansion panel.\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith<void>(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._bodyAnimationDone.complete();\n    this._inputChanges.complete();\n  }\n\n  /** Checks whether the expansion panel's content contains the currently-focused element. */\n  _containsFocus(): boolean {\n    if (this._body && this._document) {\n      const focusedElement = this._document.activeElement;\n      const bodyElement = this._body.nativeElement;\n      return focusedElement === bodyElement || bodyElement.contains(focusedElement);\n    }\n\n    return false;\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusableOption, FocusOrigin} from '@angular/cdk/a11y';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, Subscription, EMPTY} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanel} from './expansion-panel';\n\n\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy, FocusableOption {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n      @Host() public panel: MatExpansionPanel,\n      private _element: ElementRef,\n      private _focusMonitor: FocusMonitor,\n      private _changeDetectorRef: ChangeDetectorRef) {\n\n    const accordionHideToggleChange = panel.accordion ?\n      panel.accordion._stateChanges.pipe(filter(changes => !!changes.hideToggle)) : EMPTY;\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to subscribe and trigger change detection manually.\n    this._parentChangeSubscription = merge(\n      panel.opened,\n      panel.closed,\n      accordionHideToggleChange,\n      panel._inputChanges.pipe(filter(changes => !!(changes.hideToggle || changes.disabled)))\n    )\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Avoids focus being lost if the panel contained the focused element and was closed.\n    panel.closed\n      .pipe(filter(() => panel._containsFocus()))\n      .subscribe(() => _focusMonitor.focusVia(_element, 'program'));\n\n    _focusMonitor.monitor(_element).subscribe(origin => {\n      if (origin && panel.accordion) {\n        panel.accordion._handleHeaderFocus(this);\n      }\n    });\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /**\n   * Whether the associated panel is disabled. Implemented as a part of `FocusableOption`.\n   * @docs-private\n   */\n  get disabled() {\n    return this.panel.disabled;\n  }\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    this.panel.toggle();\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        event.preventDefault();\n        this._toggle();\n        break;\n      default:\n        if (this.panel.accordion) {\n          this.panel.accordion._handleHeaderKeydown(event);\n        }\n\n        return;\n    }\n  }\n\n  /**\n   * Focuses the panel header. Implemented as a part of `FocusableOption`.\n   * @param origin Origin of the action that triggered the focus.\n   * @docs-private\n   */\n  focus(origin: FocusOrigin = 'program') {\n    this._focusMonitor.focusVia(this._element, origin);\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element);\n  }\n}\n\n/**\n * `<mat-panel-description>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host: {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * `<mat-panel-title>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host: {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, ContentChildren, QueryList, AfterContentInit} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {HOME, END} from '@angular/cdk/keycodes';\nimport {MAT_ACCORDION, MatAccordionBase, MatAccordionDisplayMode} from './accordion-base';\nimport {MatExpansionPanelHeader} from './expansion-panel-header';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  inputs: ['multi'],\n  providers: [{\n    provide: MAT_ACCORDION,\n    useExisting: MatAccordion\n  }],\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion implements MatAccordionBase, AfterContentInit {\n  private _keyManager: FocusKeyManager<MatExpansionPanelHeader>;\n\n  @ContentChildren(MatExpansionPanelHeader, {descendants: true})\n  _headers: QueryList<MatExpansionPanelHeader>;\n\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * Display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the rest of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager(this._headers).withWrap();\n  }\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown(event: KeyboardEvent) {\n    const {keyCode} = event;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME) {\n      manager.setFirstItemActive();\n      event.preventDefault();\n    } else if (keyCode === END) {\n      manager.setLastItemActive();\n      event.preventDefault();\n    } else {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  _handleHeaderFocus(header: MatExpansionPanelHeader) {\n    this._keyManager.updateActiveItem(header);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanel, MatExpansionPanelActionRow} from './expansion-panel';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/**\n * Injection token used to provide a grid list to a tile and to avoid circular imports.\n * @docs-private\n */\nexport const MAT_GRID_LIST = new InjectionToken<MatGridListBase>('MAT_GRID_LIST');\n\n/**\n * Base interface for a `MatGridList`.\n * @docs-private\n */\nexport interface MatGridListBase {\n  cols: number;\n  gutterSize: string;\n  rowHeight: number | string;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  NgZone,\n} from '@angular/core';\nimport {take} from 'rxjs/operators';\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  constructor(private _elementRef: ElementRef<HTMLElement>, private _ngZone: NgZone) { }\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (cell.enabled) {\n      this.selectedValueChange.emit(cell.value);\n    }\n  }\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  get _firstRowOffset(): number {\n    return this.rows && this.rows.length && this.rows[0].length ?\n        this.numCols - this.rows[0].length : 0;\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        const activeCell: HTMLElement | null =\n            this._elementRef.nativeElement.querySelector('.mat-calendar-body-active');\n\n        if (activeCell) {\n          activeCell.focus();\n        }\n      });\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n              this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n      case SPACE:\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n          this._dateSelected(this._dateAdapter.getDate(this._activeDate));\n          this._userSelection.emit();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(\n            this._dateAdapter.getYear(this.activeDate),\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const enabled = this._shouldEnableDate(date);\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));\n    }\n  }\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new year is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\n    let activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n      case SPACE:\n        this._yearSelected(this._dateAdapter.getYear(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  _getActiveCell(): number {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _shouldEnableYear(year: number) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null ||\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n      return false;\n    }\n\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    const normalizedDate =\n          this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    this.monthSelected.emit(normalizedDate);\n\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n      case SPACE:\n        this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (month === undefined || month === null ||\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentPortal, ComponentType, Portal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView, yearsPerPage} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n/**\n * Possible views for the calendar.\n * @docs-private\n */\nexport type MatCalendarView = 'month' | 'year' | 'multi-year';\n\n/** Default header for MatCalendar */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar-header',\n  templateUrl: 'calendar-header.html',\n  exportAs: 'matCalendarHeader',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarHeader<D> {\n  constructor(private _intl: MatDatepickerIntl,\n              @Inject(forwardRef(() => MatCalendar)) public calendar: MatCalendar<D>,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    this.calendar.stateChanges.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  /** The label for the current calendar view. */\n  get periodButtonText(): string {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter\n          .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\n              .toLocaleUpperCase();\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYearName(this.calendar.activeDate);\n    }\n    const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n    const lastYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  get periodButtonLabel(): string {\n    return this.calendar.currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the the previous button. */\n  get prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** The label for the the next button. */\n  get nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** Handles user clicks on the period label. */\n  currentPeriodClicked(): void {\n    this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  previousClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage\n            );\n  }\n\n  /** Handles user clicks on the next button. */\n  nextClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate,\n                    this.calendar.currentView == 'year' ? 1 : yearsPerPage\n            );\n  }\n\n  /** Whether the previous period button is enabled. */\n  previousEnabled(): boolean {\n    if (!this.calendar.minDate) {\n      return true;\n    }\n    return !this.calendar.minDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  nextEnabled(): boolean {\n    return !this.calendar.maxDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n}\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, AfterViewChecked, OnDestroy, OnChanges {\n  /** An input indicating the type of the header component, if set. */\n  @Input() headerComponent: ComponentType<any>;\n\n  /** A portal containing the header component type for this calendar. */\n  _calendarHeaderPortal: Portal<any>;\n\n  private _intlChanges: Subscription;\n\n  /**\n   * Used for scheduling that focus should be moved to the active cell on the next tick.\n   * We need to schedule it, rather than do it immediately, because we have to wait\n   * for Angular to re-evaluate the view children.\n   */\n  private _moveFocusOnNextTick = false;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: MatCalendarView = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView) multiYearView: MatMultiYearView<D>;\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get activeDate(): D { return this._clampedActiveDate; }\n  set activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n    this.stateChanges.next();\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  get currentView(): MatCalendarView { return this._currentView; }\n  set currentView(value: MatCalendarView) {\n    this._currentView = value;\n    this._moveFocusOnNextTick = true;\n  }\n  private _currentView: MatCalendarView;\n\n  /**\n   * Emits whenever there is a state change that the header may need to respond to.\n   */\n  stateChanges = new Subject<void>();\n\n  constructor(_intl: MatDatepickerIntl,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => {\n      _changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    });\n  }\n\n  ngAfterContentInit() {\n    this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || MatCalendarHeader);\n    this.activeDate = this.startAt || this._dateAdapter.today();\n\n    // Assign to the private property since we don't want to move focus on init.\n    this._currentView = this.startView;\n  }\n\n  ngAfterViewChecked() {\n    if (this._moveFocusOnNextTick) {\n      this._moveFocusOnNextTick = false;\n      this.focusActiveCell();\n    }\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n    this.stateChanges.complete();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change = changes.minDate || changes.maxDate || changes.dateFilter;\n\n    if (change && !change.firstChange) {\n      const view = this._getCurrentViewComponent();\n\n      if (view) {\n        // We need to `detectChanges` manually here, because the `minDate`, `maxDate` etc. are\n        // passed down to the view via data bindings which won't be up-to-date when we call `_init`.\n        this._changeDetectorRef.detectChanges();\n        view._init();\n      }\n    }\n\n    this.stateChanges.next();\n  }\n\n  focusActiveCell() {\n    this._getCurrentViewComponent()._focusActiveCell();\n  }\n\n  /** Updates today's date after an update of the active date */\n  updateTodaysDate() {\n    let view = this.currentView == 'month' ? this.monthView :\n            (this.currentView == 'year' ? this.yearView : this.multiYearView);\n\n    view.ngAfterContentInit();\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles year/month selection in the multi-year/year views. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this.activeDate = date;\n    this.currentView = view;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Returns the component instance that corresponds to the current calendar view. */\n  private _getCurrentViewComponent() {\n    return this.monthView || this.yearView || this.multiYearView;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material datepicker.\n * @docs-private\n */\nexport const matDatepickerAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n  /** Transforms the height of the datepicker's calendar. */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(1, 0.8)'\n    })),\n    transition('void => enter',  animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n      opacity: 1,\n      transform: 'scale(1, 1)'\n    }))),\n    transition('* => void', animate('100ms linear', style({opacity: 0})))\n  ]),\n\n  /** Fades in the content of the calendar. */\n  fadeInCalendar: trigger('fadeInCalendar', [\n    state('void', style({opacity: 0})),\n    state('enter', style({opacity: 1})),\n\n    // TODO(crisbeto): this animation should be removed since it isn't quite on spec, but we\n    // need to keep it until #12440 gets in, otherwise the exit animation will look glitchy.\n    transition('void => *', animate('120ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE, END, HOME} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, takeUntil} from 'rxjs/operators';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipInput} from './chip-input';\n\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nexport class MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatChipListMixinBase: CanUpdateErrorStateCtor & typeof MatChipListBase =\n    mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for it's similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': 'disabled ? null : _tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)',\n    '[id]': '_uid',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n  ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly controlType: string = 'mat-chip-list';\n\n  /**\n   * When a chip is destroyed, we store the index of the destroyed chip until the chips\n   * query list notifies about the update. This is necessary because we cannot determine an\n   * appropriate chip that should receive focus until the array of chips updated completely.\n   */\n  private _lastDestroyedChipIndex: number | null = null;\n\n  /** Subject that emits when the component has been destroyed. */\n  private _destroyed = new Subject<void>();\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription | null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription | null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription | null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription | null;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipInput;\n\n  /** Uid of the chip list */\n  _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The ARIA role applied to the chip list. */\n  get role(): string | null { return this.empty ? null : 'listbox'; }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n  private _multiple: boolean = false;\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith(): (o1: any, o2: any) => boolean { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  protected _value: any;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get id(): string {\n    return this._chipInput ? this._chipInput.id : this._uid;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  protected _required: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  protected _placeholder: string;\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return (this._chipInput && this._chipInput.focused) || this._hasFocusedChip();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    if (this.chips) {\n      this.chips.forEach(chip => chip.disabled = this._disabled);\n    }\n  }\n  protected _disabled: boolean = false;\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip list is selectable. When a chip list is not selectable,\n   * the selected states for all the chips inside the chip list are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n\n    if (this.chips) {\n      this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n    }\n  }\n  protected _selectable: boolean = true;\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroyed));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipListChange> =\n      new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips)\n      .withWrap()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => this._tabIndex = this._userTabIndex || 0);\n    });\n\n    // When the list changes, re-subscribe\n    this.chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this.stateChanges.complete();\n\n    this._dropSubscriptions();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipInput): void {\n    this._chipInput = inputElement;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick(event: MouseEvent) {\n    if (!this._originatesFromChip(event)) {\n      this.focus();\n    }\n  }\n\n  /**\n   * Focuses the the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(): void {\n    if (this.disabled) {\n      return;\n    }\n\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput();\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput() {\n    if (this._chipInput) {\n      this._chipInput.focus();\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    const target = event.target as HTMLElement;\n\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n    } else if (target && target.classList.contains('mat-chip')) {\n      if (event.keyCode === HOME) {\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n      } else if (event.keyCode === END) {\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        this._keyManager.onKeydown(event);\n      }\n\n      this.stateChanges.next();\n    }\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * If the amount of chips changed, we need to update the\n   * key manager state and focus the next closest chip.\n   */\n  protected _updateFocusForDestroyedChips() {\n    if (this._lastDestroyedChipIndex != null && this.chips.length) {\n      const newChipIndex = Math.min(this._lastDestroyedChipIndex, this.chips.length - 1);\n      this._keyManager.setActiveItem(newChipIndex);\n    }\n\n    this._lastDestroyedChipIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChip);\n        }\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    if (!this._hasFocusedChip()) {\n      this._keyManager.setActiveItem(-1);\n    }\n\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n\n    if (this._chipRemoveSubscription) {\n      this._chipRemoveSubscription.unsubscribe();\n      this._chipRemoveSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n      const chip = event.chip;\n      const chipIndex = this.chips.toArray().indexOf(event.chip);\n\n      // In case the chip that will be removed is currently focused, we temporarily store\n      // the index in order to be able to determine an appropriate sibling chip that will\n      // receive focus.\n      if (this._isValidIndex(chipIndex) && chip._hasFocus) {\n        this._lastDestroyedChipIndex = chipIndex;\n      }\n    });\n  }\n\n  /** Checks whether an event comes from inside a chip element. */\n  private _originatesFromChip(event: Event): boolean {\n    let currentElement = event.target as HTMLElement | null;\n\n    while (currentElement && currentElement !== this._elementRef.nativeElement) {\n      if (currentElement.classList.contains('mat-chip')) {\n        return true;\n      }\n\n      currentElement = currentElement.parentElement;\n    }\n\n    return false;\n  }\n\n  /** Checks whether any of the chips is focused. */\n  private _hasFocusedChip() {\n    return this.chips.some(chip => chip._hasFocus);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Directive, ElementRef, EventEmitter, Input, Output, Inject, OnChanges} from '@angular/core';\nimport {MatChipList} from './chip-list';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n    '[id]': 'id',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.placeholder]': 'placeholder || null',\n    '[attr.aria-invalid]': '_chipList && _chipList.ngControl ? _chipList.ngControl.invalid : null',\n  }\n})\nexport class MatChipInput implements OnChanges {\n  /** Whether the control is focused. */\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  @Input('matChipInputSeparatorKeyCodes')\n  separatorKeyCodes: number[] | Set<number> = this._defaultOptions.separatorKeyCodes;\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /** The input's placeholder text. */\n  @Input() placeholder: string = '';\n\n  /** Unique id for the input. */\n  @Input() id: string = `mat-chip-list-input-${nextUniqueId++}`;\n\n  /** Whether the input is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled || (this._chipList && this._chipList.disabled); }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Whether the input is empty. */\n  get empty(): boolean { return !this._inputElement.value; }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement>,\n    @Inject(MAT_CHIPS_DEFAULT_OPTIONS) private _defaultOptions: MatChipsDefaultOptions) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  ngOnChanges() {\n    this._chipList.stateChanges.next();\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this._isSeparatorKey(event.keyCode)) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  /** Focuses the input. */\n  focus(): void {\n    this._inputElement.focus();\n  }\n\n  /** Checks whether a keycode is one of the configured separators. */\n  private _isSeparatorKey(keyCode: number) {\n    const separators = this.separatorKeyCodes;\n    return Array.isArray(separators) ? separators.indexOf(keyCode) > -1 : separators.has(keyCode);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChip, MatChipAvatar, MatChipRemove, MatChipTrailingIcon} from './chip';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipInput} from './chip-input';\nimport {MatChipList} from './chip-list';\n\nconst CHIP_DECLARATIONS = [\n  MatChipList,\n  MatChip,\n  MatChipInput,\n  MatChipRemove,\n  MatChipAvatar,\n  MatChipTrailingIcon,\n];\n\n@NgModule({\n  exports: CHIP_DECLARATIONS,\n  declarations: CHIP_DECLARATIONS,\n  providers: [\n    ErrorStateMatcher,\n    {\n      provide: MAT_CHIPS_DEFAULT_OPTIONS,\n      useValue: {\n        separatorKeyCodes: [ENTER]\n      } as MatChipsDefaultOptions\n    }\n  ]\n})\nexport class MatChipsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction;\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /**\n   * Whether the dialog should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n  restoreFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /**\n   * Whether the dialog should close when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n  closeOnNavigation?: boolean = true;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\nconst animationBody = [\n  // Note: The `enter` animation transitions to `transform: none`, because for some reason\n  // specifying the transform explicitly, causes IE both to blur the dialog content and\n  // decimate the animation performance. Leaving it as `none` solves both issues.\n  state('void, exit', style({opacity: 0, transform: 'scale(0.7)'})),\n  state('enter', style({transform: 'none'})),\n  transition('* => enter', animate('150ms cubic-bezier(0, 0, 0.2, 1)',\n      style({transform: 'none', opacity: 1}))),\n  transition('* => void, * => exit',\n      animate('75ms cubic-bezier(0.4, 0.0, 0.2, 1)', style({opacity: 0}))),\n];\n\n/**\n * Animations used by MatDialog.\n * @docs-private\n */\nexport const matDialogAnimations: {\n  readonly dialogContainer: AnimationTriggerMetadata;\n  readonly slideDialog: AnimationTriggerMetadata;\n} = {\n  /** Animation that is applied on the dialog container by defalt. */\n  dialogContainer: trigger('dialogContainer', animationBody),\n\n  /** @deprecated @breaking-change 8.0.0 Use `matDialogAnimations.dialogContainer` instead. */\n  slideDialog: trigger('slideDialog', animationBody)\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AnimationEvent} from '@angular/animations';\nimport {matDialogAnimations} from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.dialogContainer],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    'aria-modal': 'true',\n    '[attr.id]': '_id',\n    '[attr.role]': '_config.role',\n    '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config.ariaLabel',\n    '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n    '[@dialogContainer]': '_state',\n    '(@dialogContainer.start)': '_onAnimationStart($event)',\n    '(@dialogContainer.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null = null;\n\n  /** ID for the container DOM element. */\n  _id: string;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any,\n    /** The dialog configuration. */\n    public _config: MatDialogConfig) {\n\n    super();\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (this._config.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Note that there is no focus method when rendering on the server.\n      if (this._elementRef.nativeElement.focus) {\n        // Move focus onto the dialog immediately in order to prevent the user from accidentally\n        // opening multiple dialogs at the same time. Needs to be async, because the element\n        // may not be focusable immediately.\n        Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n      }\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {GlobalPositionStrategy, OverlayRef} from '@angular/cdk/overlay';\nimport {Location} from '@angular/common';\nimport {Observable, Subject} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {DialogPosition} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private readonly _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private readonly _beforeClosed = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    public _containerInstance: MatDialogContainer,\n    // @breaking-change 8.0.0 `_location` parameter to be removed.\n    _location?: Location,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Pass the id along to the container.\n    _containerInstance._id = id;\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    ).subscribe(() => this._overlayRef.dispose());\n\n    _overlayRef.detachments().subscribe(() => {\n      this._beforeClosed.next(this._result);\n      this._beforeClosed.complete();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n      this._overlayRef.dispose();\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose))\n      .subscribe(() => this.close());\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._beforeClosed.next(dialogResult);\n      this._beforeClosed.complete();\n      this._overlayRef.detachBackdrop();\n    });\n\n    this._containerInstance._startExitAnimation();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClosed(): Observable<R | undefined> {\n    return this._beforeClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = '', height: string = ''): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  afterOpen(): Observable<void> {\n    return this.afterOpened();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   * @deprecated Use `beforeClosed` instead.\n   * @breaking-change 8.0.0\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this.beforeClosed();\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayContainer,\n  OverlayRef,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  OnDestroy,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {defer, Observable, of as observableOf, Subject} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n  () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog implements OnDestroy {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private readonly _afterAllClosedAtThisLevel = new Subject<void>();\n  private readonly _afterOpenedAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpened(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when a dialog has been opened.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this.afterOpened;\n  }\n\n  get _afterAllClosed(): Subject<void> {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  readonly afterAllClosed: Observable<void> = defer<void>(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined)));\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() private _location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions: MatDialogConfig,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) scrollStrategy: any,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T, R> {\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef = this._attachDialogContent<T, R>(componentOrTemplateRef,\n                                                      dialogContainer,\n                                                      overlayRef,\n                                                      config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpened.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    this._closeDialogs(this.openDialogs);\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  ngOnDestroy() {\n    // Only close the dialogs at this level on destroy\n    // since the parent service may still be active.\n    this._closeDialogs(this._openDialogsAtThisLevel);\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight,\n      disposeOnNavigation: dialogConfig.closeOnNavigation\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatDialogConfig, config]\n    ]));\n    const containerPortal =\n        new ComponentPortal(MatDialogContainer, config.viewContainerRef, injector);\n    const containerRef = overlay.attach<MatDialogContainer>(containerPortal);\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T, R>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T, R> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef =\n        new MatDialogRef<T, R>(overlayRef, dialogContainer, this._location, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    const injectionTokens = new WeakMap<any, any>([\n      [MatDialogContainer, dialogContainer],\n      [MAT_DIALOG_DATA, config.data],\n      [MatDialogRef, dialogRef]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n  }\n\n  /** Closes all of the dialogs in an array. */\n  private _closeDialogs(dialogs: MatDialogRef<any>[]) {\n    let i = dialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      dialogs[i].close();\n    }\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string = 'Close dialog';\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes._matDialogClose || changes._matDialogCloseResult;\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent {}\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions {}\n\n\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef<HTMLElement>, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MatDialog} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogActions,\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTextareaAutosize} from '@angular/cdk/text-field';\nimport {Directive, Input} from '@angular/core';\n\n// TODO(devversion): Workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkTextareaAutosize = CdkTextareaAutosize;\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deprecated Use `cdkTextareaAutosize` from `@angular/cdk/text-field` instead.\n * @breaking-change 8.0.0\n */\n@Directive({\n  selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n  exportAs: 'matTextareaAutosize',\n  inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n  host: {\n    'class': 'cdk-textarea-autosize mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n    '(input)': '_noopInputHandler()',\n  },\n})\nexport class MatTextareaAutosize extends _CdkTextareaAutosize {\n  @Input()\n  get matAutosizeMinRows(): number { return this.minRows; }\n  set matAutosizeMinRows(value: number) { this.minRows = value; }\n\n  @Input()\n  get matAutosizeMaxRows(): number { return this.maxRows; }\n  set matAutosizeMaxRows(value: number) { this.maxRows = value; }\n\n  @Input('mat-autosize')\n  get matAutosize(): boolean { return this.enabled; }\n  set matAutosize(value: boolean) { this.enabled = value; }\n\n  @Input()\n  get matTextareaAutosize(): boolean { return this.enabled; }\n  set matTextareaAutosize(value: boolean) { this.enabled = value; }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {AutofillMonitor} from '@angular/cdk/text-field';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Self,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nexport class MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatInputMixinBase: CanUpdateErrorStateCtor & typeof MatInputBase =\n    mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput], select[matNativeControl],\n      input[matNativeControl], textarea[matNativeControl]`,\n  exportAs: 'matInput',\n  host: {\n    /**\n     * @breaking-change 8.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n     */\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[attr.placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[attr.readonly]': 'readonly && !_isNativeSelect || null',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, OnInit, DoCheck, CanUpdateErrorState {\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _inputValueAccessor: {value: any};\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /** Whether the component is a native html select. */\n  _isNativeSelect = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  focused: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly stateChanges: Subject<void> = new Subject<void>();\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  controlType: string = 'mat-input';\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  autofilled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n  protected _disabled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n  protected _id: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input() placeholder: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  protected _required = false;\n\n  /** Input type of the element. */\n  @Input()\n  get type(): string { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      (this._elementRef.nativeElement as HTMLInputElement).type = this._type;\n    }\n  }\n  protected _type = 'text';\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): string { return this._inputValueAccessor.value; }\n  set value(value: string) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\n  private _readonly = false;\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>,\n    protected _platform: Platform,\n    /** @docs-private */\n    @Optional() @Self() public ngControl: NgControl,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n    private _autofillMonitor: AutofillMonitor,\n    ngZone: NgZone) {\n\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n\n    const element = this._elementRef.nativeElement;\n\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || element;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      ngZone.runOutsideAngular(() => {\n        _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n          let el = event.target as HTMLInputElement;\n          if (!el.value && !el.selectionStart && !el.selectionEnd) {\n            // Note: Just setting `0, 0` doesn't fix the issue. Setting\n            // `1, 1` fixes it for the first time that you type text and\n            // then hold delete. Toggling to `1, 1` and then back to\n            // `0, 0` seems to completely fix it.\n            el.setSelectionRange(1, 1);\n            el.setSelectionRange(0, 0);\n          }\n        });\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n    this._isNativeSelect = element.nodeName.toLowerCase() === 'select';\n\n    if (this._isNativeSelect) {\n      this.controlType = (element as HTMLSelectElement).multiple ? 'mat-native-select-multiple' :\n                                                                   'mat-native-select';\n    }\n  }\n\n  ngOnInit() {\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n        this.autofilled = event.isAutofilled;\n        this.stateChanges.next();\n      });\n    }\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n  }\n\n  /** Focuses the input. */\n  focus(): void { this._elementRef.nativeElement.focus(); }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && !this.readonly) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this._elementRef.nativeElement.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. */\n  protected _isTextarea() {\n    return this._elementRef.nativeElement.nodeName.toLowerCase() === 'textarea';\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n        !this.autofilled;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    if (this._isNativeSelect) {\n      // For a single-selection `<select>`, the label should float when the selected option has\n      // a non-empty display value. For a `<select multiple>`, the label *always* floats to avoid\n      // overlapping the label with the options.\n      const selectElement = this._elementRef.nativeElement as HTMLSelectElement;\n\n      return selectElement.multiple || !this.empty || !!selectElement.options[0].label ||\n          this.focused;\n    } else {\n      return this.focused || !this.empty;\n    }\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    // Do not re-focus the input element if the element is already focused. Otherwise it can happen\n    // that someone clicks on a time input and the cursor resets to the \"hours\" field while the\n    // \"minutes\" field was actually clicked. See: https://github.com/angular/material2/issues/12849\n    if (!this.focused) {\n      this.focus();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TextFieldModule} from '@angular/cdk/text-field';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\n\n\n@NgModule({\n  declarations: [MatInput, MatTextareaAutosize],\n  imports: [\n    CommonModule,\n    TextFieldModule,\n    MatFormFieldModule,\n  ],\n  exports: [\n    TextFieldModule,\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher],\n})\nexport class MatInputModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel: string = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel: string = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel: string = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel: string = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel: string = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel: string = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel: string = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel: string = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel: string = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  AfterViewChecked,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n// TODO(josephperrott): Revert to constants for ripple radius once 2018 Checkbox updates have\n// landed.\n// The radius for the checkbox's ripple, in pixels.\nlet calculatedRippleRadius = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nexport class MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatCheckboxMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatCheckboxBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[attr.tabindex]': 'null',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewChecked, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  private _required: boolean;\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change: EventEmitter<MatCheckboxChange> =\n      new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  _onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  constructor(elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _ngZone: NgZone,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    this._focusMonitor.monitor(elementRef, true).subscribe(focusOrigin => {\n      if (!focusOrigin) {\n        // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n        // Angular does not expect events to be raised during change detection, so any state change\n        // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n        // See https://github.com/angular/angular/issues/17793. To work around this, we defer\n        // telling the form control it has been touched until the next tick.\n        Promise.resolve().then(() => this._onTouched());\n      }\n    });\n  }\n\n  ngAfterViewChecked() {\n    this._calculateRippleRadius();\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value != this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked: boolean = false;\n\n  /**\n   * Whether the checkbox is disabled. This fully overrides the implementation provided by\n   * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n   */\n  @Input()\n  get disabled() { return this._disabled; }\n  set disabled(value: any) {\n    if (value != this.disabled) {\n      this._disabled = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean { return this._indeterminate; }\n  set indeterminate(value: boolean) {\n    const changed = value != this._indeterminate;\n    this._indeterminate = value;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n  private _indeterminate: boolean = false;\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the checkbox\n    // component will be only marked for check, but no actual change detection runs automatically.\n    // Instead of going back into the zone in order to trigger a change detection which causes\n    // *all* components to be checked (if explicitly marked or not using OnPush), we only trigger\n    // an explicit change detection for the checkbox view and it's children.\n    this._changeDetectorRef.detectChanges();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n\n      // Remove the animation class to avoid animation when the checkbox is moved between containers\n      const animationClass = this._currentAnimationClass;\n\n      this._ngZone.runOutsideAngular(() => {\n        setTimeout(() => {\n          element.classList.remove(animationClass);\n        }, 1000);\n      });\n    }\n  }\n\n  private _emitChangeEvent() {\n    const event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    // Don't transition if animations are disabled.\n    if (this._animationMode === 'NoopAnimations') {\n      return '';\n    }\n\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n\n  // TODO(josephperrott): Revert to constants for ripple radius once 2018 Checkbox updates have\n  // landed.\n  /**\n   * Calculate the radius for the ripple based on the ripple elements width.  Only calculated once\n   * for the application.\n   */\n  private _calculateRippleRadius() {\n    if (!calculatedRippleRadius) {\n      const rippleWidth =\n          this._elementRef.nativeElement.querySelector('.mat-checkbox-ripple').clientWidth || 0;\n      calculatedRippleRadius = rippleWidth / 2;\n    }\n    this.ripple.radius = calculatedRippleRadius;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule],\n  declarations: [MatCheckbox, MatCheckboxRequiredValidator],\n})\nexport class MatCheckboxModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nexport class MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatChipMixinBase:\n    CanColorCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatChipBase =\n        mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\n\nconst CHIP_ATTRIBUTE_NAMES = ['mat-basic-chip'];\n\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-avatar, [matChipAvatar]',\n  host: {'class': 'mat-chip-avatar'}\n})\nexport class MatChipAvatar {}\n\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n  host: {'class': 'mat-chip-trailing-icon'}\n})\nexport class MatChipTrailingIcon {}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled', 'disableRipple'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[class.mat-chip-with-avatar]': 'avatar',\n    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[class.mat-chip-disabled]': 'disabled',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n  },\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable, CanDisableRipple, RippleTarget {\n\n  /** Reference to the RippleRenderer for the chip. */\n  private _chipRipple: RippleRenderer;\n\n  /** Whether the ripples are globally disabled through the RippleGlobalOptions */\n  private _ripplesGloballyDisabled = false;\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._ripplesGloballyDisabled;\n  }\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether the chip list is selectable */\n  chipListSelectable: boolean = true;\n\n  /** The chip avatar */\n  @ContentChild(MatChipAvatar) avatar: MatChipAvatar;\n\n  /** The chip's trailing icon. */\n  @ContentChild(MatChipTrailingIcon) trailingIcon: MatChipTrailingIcon;\n\n  /** The chip's remove toggler. */\n  @ContentChild(forwardRef(() => MatChipRemove)) removeIcon: MatChipRemove;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) {\n    const coercedValue = coerceBooleanProperty(value);\n\n    if (coercedValue !== this._selected) {\n      this._selected = coercedValue;\n      this._dispatchSelectionChange();\n    }\n  }\n  protected _selected: boolean = false;\n\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n  @Input()\n  get value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(value: any) { this._value = value; }\n  protected _value: any;\n\n  /**\n   * Whether or not the chip is selectable. When a chip is not selectable,\n   * changes to it's selected state are always ignored. By default a chip is\n   * selectable, and it becomes non-selectable if it's parent chip list is\n   * not selectable.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable && this.chipListSelectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  protected _selectable: boolean = true;\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (removed) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  protected _removable: boolean = true;\n\n  /** Emits when the chip is focused. */\n  readonly _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  readonly _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\n      new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** Emitted when a chip is to be removed. */\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** The ARIA selected applied to the chip. */\n  get ariaSelected(): string | null {\n    return this.selectable ? this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef,\n              private _ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions) {\n    super(_elementRef);\n\n    this._addHostClassName();\n\n    this._chipRipple = new RippleRenderer(this, _ngZone, _elementRef, platform);\n    this._chipRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    if (globalOptions) {\n      // TODO(paul): Do not copy each option manually. Allow dynamic global option changes: #9729\n      this._ripplesGloballyDisabled = !!globalOptions.disabled;\n      this.rippleConfig = {\n        animation: globalOptions.animation,\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n      };\n    }\n  }\n\n  _addHostClassName() {\n    // Add class for the different chips\n    for (const attr of CHIP_ATTRIBUTE_NAMES) {\n      if (this._elementRef.nativeElement.hasAttribute(attr) ||\n        this._elementRef.nativeElement.tagName.toLowerCase() === attr) {\n        (this._elementRef.nativeElement as HTMLElement).classList.add(attr);\n        return;\n      }\n    }\n    (this._elementRef.nativeElement as HTMLElement).classList.add('mat-standard-chip');\n  }\n\n  ngOnDestroy() {\n    this.destroyed.emit({chip: this});\n    this._chipRipple._removeTriggerEvents();\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._dispatchSelectionChange();\n    }\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._dispatchSelectionChange();\n    }\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._dispatchSelectionChange(true);\n    }\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n    this._dispatchSelectionChange(isUserInput);\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    if (!this._hasFocus) {\n      this._elementRef.nativeElement.focus();\n      this._onFocus.next({chip: this});\n    }\n    this._hasFocus = true;\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Handles click events on the chip. */\n  _handleClick(event: Event) {\n    if (this.disabled) {\n      event.preventDefault();\n    } else {\n      event.stopPropagation();\n    }\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    // When animations are enabled, Angular may end up removing the chip from the DOM a little\n    // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\n    // that moves focus not the next item. To work around the issue, we defer marking the chip\n    // as not focused until the next time the zone stabilizes.\n    this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1))\n      .subscribe(() => {\n        this._ngZone.run(() => {\n          this._hasFocus = false;\n          this._onBlur.next({chip: this});\n        });\n      });\n  }\n\n  private _dispatchSelectionChange(isUserInput = false) {\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove mat-chip-trailing-icon',\n    '(click)': '_handleClick($event)',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {}\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(event: Event): void {\n    if (this._parentChip.removable) {\n      this._parentChip.remove();\n    }\n\n    // We need to stop event propagation because otherwise the event will bubble up to the\n    // form field and cause the `onContainerClick` method to be invoked. This method would then\n    // reset the focused chip that has been focused after chip removal. Usually the parent\n    // the parent click listener of the `MatChip` would prevent propagation, but it can happen\n    // that the chip is being removed before the event bubbles up.\n    event.stopPropagation();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** Default options, for the chips module, that can be overridden. */\nexport interface MatChipsDefaultOptions {\n  /** The list of key codes that will trigger a chipEnd event. */\n  separatorKeyCodes: number[] | Set<number>;\n}\n\n/** Injection token to be used to override the default options for the chips module. */\nexport const MAT_CHIPS_DEFAULT_OPTIONS =\n    new InjectionToken<MatChipsDefaultOptions>('mat-chips-default-options');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n  Input,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  CanColorCtor,\n  CanDisableCtor,\n  CanDisableRippleCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n/**\n * List of classes to add to MatButton instances based on host attributes to\n * style as different variants.\n */\nconst BUTTON_HOST_ATTRIBUTES = [\n  'mat-button',\n  'mat-flat-button',\n  'mat-icon-button',\n  'mat-raised-button',\n  'mat-stroked-button',\n  'mat-mini-fab',\n  'mat-fab',\n];\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nexport class MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatButtonMixinBase:\n    CanDisableRippleCtor & CanDisableCtor & CanColorCtor & typeof MatButtonBase =\n        mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\n             button[mat-flat-button]`,\n  exportAs: 'matButton',\n  host: {\n    '[disabled]': 'disabled || null',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n\n  /** Whether the button is round. */\n  readonly isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  readonly isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated Platform checks for SSR are no longer needed\n               * @breaking-change 8.0.0\n               */\n              // tslint:disable-next-line:no-unused-variable\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 8.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // For each of the variant selectors that is prevent in the button's host\n    // attributes, add the correct corresponding class.\n    for (const attr of BUTTON_HOST_ATTRIBUTES) {\n      if (this._hasHostAttributes(attr)) {\n        (elementRef.nativeElement as HTMLElement).classList.add(attr);\n      }\n    }\n\n    this._focusMonitor.monitor(this._elementRef, true);\n\n    if (this.isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Raised Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    // Note that we ignore the user-specified tabindex when it's disabled for\n    // consistency with the `mat-button` applied on native buttons where even\n    // though they have an index, they're not tabbable.\n    '[attr.tabindex]': 'disabled ? -1 : (tabIndex || 0)',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n  /** Tabindex of the button. */\n  @Input() tabIndex: number;\n\n  constructor(\n    platform: Platform,\n    focusMonitor: FocusMonitor,\n    elementRef: ElementRef,\n    // @breaking-change 8.0.0 `animationMode` parameter to be made required.\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n    super(elementRef, platform, focusMonitor, animationMode);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatAnchor, MatButton} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisableRipple,\n  mixinDisableRipple,\n  CanDisableRippleCtor,\n} from '@angular/material/core';\n\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n/** Possible appearance styles for the button toggle. */\nexport type MatButtonToggleAppearance = 'legacy' | 'standard';\n\n/**\n * Represents the default options for the button toggle that can be configured\n * using the `MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatButtonToggleDefaultOptions {\n  appearance?: MatButtonToggleAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all button toggles within an app.\n */\nexport const MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS =\n    new InjectionToken<MatButtonToggleDefaultOptions>('MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS');\n\n\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\n/**\n * @deprecated Use `MatButtonToggleGroup` instead.\n * @breaking-change 8.0.0\n */\nexport class MatButtonToggleGroupMultiple {}\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  constructor(\n    /** The MatButtonToggle that emits the event. */\n    public source: MatButtonToggle,\n\n    /** The value assigned to the MatButtonToggle. */\n    public value: any) {}\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group',\n  providers: [\n    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n    {provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup},\n  ],\n  host: {\n    'role': 'group',\n    'class': 'mat-button-toggle-group',\n    '[attr.aria-disabled]': 'disabled',\n    '[class.mat-button-toggle-vertical]': 'vertical',\n    '[class.mat-button-toggle-group-appearance-standard]': 'appearance === \"standard\"',\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup implements ControlValueAccessor, OnInit, AfterContentInit {\n  private _vertical = false;\n  private _multiple = false;\n  private _disabled = false;\n  private _selectionModel: SelectionModel<MatButtonToggle>;\n\n  /**\n   * Reference to the raw value that the consumer tried to assign. The real\n   * value will exclude any values from this one that don't correspond to a\n   * toggle. Useful for the cases where the value is assigned before the toggles\n   * have been initialized or at the same that they're being swapped out.\n   */\n  private _rawValue: any;\n\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** The appearance for all the buttons in the group. */\n  @Input() appearance: MatButtonToggleAppearance;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle.name = this._name);\n    }\n  }\n  private _name = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any {\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\n\n    if (this.multiple) {\n      return selected.map(toggle => toggle.value);\n    }\n\n    return selected[0] ? selected[0].value : undefined;\n  }\n  set value(newValue: any) {\n    this._setSelectionByValue(newValue);\n    this.valueChange.emit(this.value);\n  }\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() readonly valueChange = new EventEmitter<any>();\n\n  /** Selected button toggles in the group. */\n  get selected() {\n    const selected = this._selectionModel.selected;\n    return this.multiple ? selected : (selected[0] || null);\n  }\n\n  /** Whether multiple button toggles can be selected. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether multiple button toggle group is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle._markForCheck());\n    }\n  }\n\n  /** Event emitted when the group's value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(\n    private _changeDetector: ChangeDetectorRef,\n    @Optional() @Inject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS)\n        defaultOptions?: MatButtonToggleDefaultOptions) {\n\n      this.appearance =\n          defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n    }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatButtonToggle>(this.multiple, undefined, false);\n  }\n\n  ngAfterContentInit() {\n    this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    const selected = this.selected;\n    const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n    const event = new MatButtonToggleChange(source!, this.value);\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  /**\n   * Syncs a button toggle's selected state with the model value.\n   * @param toggle Toggle to be synced.\n   * @param select Whether the toggle should be selected.\n   * @param isUserInput Whether the change was a result of a user interaction.\n   */\n  _syncButtonToggle(toggle: MatButtonToggle, select: boolean, isUserInput = false) {\n    // Deselect the currently-selected toggle, if we're in single-selection\n    // mode and the button being toggled isn't selected at the moment.\n    if (!this.multiple && this.selected && !toggle.checked) {\n      (this.selected as MatButtonToggle).checked = false;\n    }\n\n    if (select) {\n      this._selectionModel.select(toggle);\n    } else {\n      this._selectionModel.deselect(toggle);\n    }\n\n    // Only emit the change event for user input.\n    if (isUserInput) {\n      this._emitChangeEvent();\n    }\n\n    // Note: we emit this one no matter whether it was a user interaction, because\n    // it is used by Angular to sync up the two-way data binding.\n    this.valueChange.emit(this.value);\n  }\n\n  /** Checks whether a button toggle is selected. */\n  _isSelected(toggle: MatButtonToggle) {\n    return this._selectionModel.isSelected(toggle);\n  }\n\n  /** Determines whether a button toggle should be checked on init. */\n  _isPrechecked(toggle: MatButtonToggle) {\n    if (typeof this._rawValue === 'undefined') {\n      return false;\n    }\n\n    if (this.multiple && Array.isArray(this._rawValue)) {\n      return this._rawValue.some(value => toggle.value != null && value === toggle.value);\n    }\n\n    return toggle.value === this._rawValue;\n  }\n\n  /** Updates the selection state of the toggles in the group based on a value. */\n  private _setSelectionByValue(value: any|any[]) {\n    this._rawValue = value;\n\n    if (!this._buttonToggles) {\n      return;\n    }\n\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw Error('Value must be an array in multiple-selection mode.');\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n    } else {\n      this._clearSelection();\n      this._selectValue(value);\n    }\n  }\n\n  /** Clears the selected toggles. */\n  private _clearSelection() {\n    this._selectionModel.clear();\n    this._buttonToggles.forEach(toggle => toggle.checked = false);\n  }\n\n  /** Selects a value if there's a toggle that corresponds to it. */\n  private _selectValue(value: any) {\n    const correspondingOption = this._buttonToggles.find(toggle => {\n      return toggle.value != null && toggle.value === value;\n    });\n\n    if (correspondingOption) {\n      correspondingOption.checked = true;\n      this._selectionModel.select(correspondingOption);\n    }\n  }\n}\n\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nexport class MatButtonToggleBase {}\nexport const _MatButtonToggleMixinBase: CanDisableRippleCtor & typeof MatButtonToggleBase =\n    mixinDisableRipple(MatButtonToggleBase);\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disableRipple'],\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    '[class.mat-button-toggle-appearance-standard]': 'appearance === \"standard\"',\n    'class': 'mat-button-toggle',\n    // Clear out the native tabindex here since we forward it to the underlying button\n    '[attr.tabindex]': 'null',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatButtonToggle extends _MatButtonToggleMixinBase implements OnInit,\n  CanDisableRipple, OnDestroy {\n\n  private _isSingleSelector = false;\n  private _checked = false;\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  @ViewChild('button') _buttonElement: ElementRef<HTMLButtonElement>;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** Unique ID for the underlying `button` element. */\n  get buttonId(): string { return `${this.id}-button`; }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input() value: any;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** The appearance style of the button. */\n  @Input()\n  get appearance(): MatButtonToggleAppearance {\n    return this.buttonToggleGroup ? this.buttonToggleGroup.appearance : this._appearance;\n  }\n  set appearance(value: MatButtonToggleAppearance) {\n    this._appearance = value;\n  }\n  private _appearance: MatButtonToggleAppearance;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean {\n    return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n  }\n  set checked(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._checked) {\n      this._checked = newValue;\n\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n      }\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n  }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Event emitted when the group value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _elementRef: ElementRef<HTMLElement>,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 8.0.0 `defaultTabIndex` to be made a required parameter.\n              @Attribute('tabindex') defaultTabIndex: string,\n              @Optional() @Inject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS)\n                  defaultOptions?: MatButtonToggleDefaultOptions) {\n    super();\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n    this.buttonToggleGroup = toggleGroup;\n    this.appearance =\n        defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n  }\n\n  ngOnInit() {\n    this._isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n    this._type = this._isSingleSelector ? 'radio' : 'checkbox';\n    this.id = this.id || `mat-button-toggle-${_uniqueIdCounter++}`;\n\n    if (this._isSingleSelector) {\n      this.name = this.buttonToggleGroup.name;\n    }\n\n    if (this.buttonToggleGroup && this.buttonToggleGroup._isPrechecked(this)) {\n      this.checked = true;\n    }\n\n    this._focusMonitor.monitor(this._elementRef, true);\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._buttonElement.nativeElement.focus();\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native button. */\n  _onButtonClick() {\n    const newChecked = this._isSingleSelector ? true : !this._checked;\n\n    if (newChecked !== this._checked) {\n      this._checked = newChecked;\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n        this.buttonToggleGroup._onTouched();\n      }\n    }\n    // Emit a change event when it's the single selector\n    this.change.emit(new MatButtonToggleChange(this, this.value));\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When the group value changes, the button will not be notified.\n    // Use `markForCheck` to explicit update button toggle's status.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatButtonToggle, MatButtonToggleGroup} from './button-toggle';\n\n\n@NgModule({\n  imports: [MatCommonModule, MatRippleModule],\n  exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n  declarations: [MatButtonToggleGroup, MatButtonToggle],\n})\nexport class MatButtonToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n} from '@angular/core';\n\n\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-content',\n  host: {'class': 'mat-card-content'}\n})\nexport class MatCardContent {}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n})\nexport class MatCardTitle {}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n})\nexport class MatCardSubtitle {}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-actions',\n  exportAs: 'matCardActions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n})\nexport class MatCardActions {\n  /** Position of the actions inside the card. */\n  @Input() align: 'start' | 'end' = 'start';\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n})\nexport class MatCardFooter {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-image], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n})\nexport class MatCardImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n})\nexport class MatCardSmImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-md-image], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n})\nexport class MatCardMdImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n})\nexport class MatCardLgImage {}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n})\nexport class MatCardXlImage {}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-avatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n})\nexport class MatCardAvatar {}\n\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card',\n  exportAs: 'matCard',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card'}\n})\nexport class MatCard {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n})\nexport class MatCardHeader {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n})\nexport class MatCardTitleGroup {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatCard,\n  MatCardActions,\n  MatCardAvatar,\n  MatCardContent,\n  MatCardFooter,\n  MatCardHeader,\n  MatCardImage,\n  MatCardLgImage,\n  MatCardMdImage,\n  MatCardSmImage,\n  MatCardSubtitle,\n  MatCardTitle,\n  MatCardTitleGroup,\n  MatCardXlImage,\n} from './card';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatCard,\n    MatCardHeader,\n    MatCardTitleGroup,\n    MatCardContent,\n    MatCardTitle,\n    MatCardSubtitle,\n    MatCardActions,\n    MatCardFooter,\n    MatCardSmImage,\n    MatCardMdImage,\n    MatCardLgImage,\n    MatCardImage,\n    MatCardXlImage,\n    MatCardAvatar,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n    MatCardXlImage, MatCardAvatar,\n  ],\n})\nexport class MatCardModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  mixinDisableRipple,\n} from '@angular/material/core';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected. */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nexport class MatAutocompleteBase {}\nexport const _MatAutocompleteMixinBase: CanDisableRippleCtor & typeof MatAutocompleteBase =\n    mixinDisableRipple(MatAutocompleteBase);\n\n/** Default `mat-autocomplete` options that can be overridden. */\nexport interface MatAutocompleteDefaultOptions {\n  /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n  autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nexport const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<MatAutocompleteDefaultOptions>('mat-autocomplete-default-options', {\n      providedIn: 'root',\n      factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY(): MatAutocompleteDefaultOptions {\n  return {autoActiveFirstOption: false};\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel: boolean = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean { return this._isOpen && this.showPanel; }\n  _isOpen: boolean = false;\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /**\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n   */\n  @Input()\n  get autoActiveFirstOption(): boolean { return this._autoActiveFirstOption; }\n  set autoActiveFirstOption(value: boolean) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  private _autoActiveFirstOption: boolean;\n\n  /**\n   * Specify the width of the autocomplete panel.  Can be any CSS sizing value, otherwise it will\n   * match the width of its host.\n   */\n  @Input() panelWidth: string | number;\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /** Event that is emitted when the autocomplete panel is opened. */\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event that is emitted when the autocomplete panel is closed. */\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(value: string) {\n    if (value && value.length) {\n      value.split(' ').forEach(className => this._classList[className.trim()] = true);\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS) defaults: MatAutocompleteDefaultOptions) {\n    super();\n\n    this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibility state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._classList['mat-autocomplete-visible'] = this.showPanel;\n    this._classList['mat-autocomplete-hidden'] = !this.showPanel;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\n\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\n@Directive({\n  selector: '[matAutocompleteOrigin]',\n  exportAs: 'matAutocompleteOrigin',\n})\nexport class MatAutocompleteOrigin {\n  constructor(\n      /** Reference to the element on which the directive is applied. */\n      public elementRef: ElementRef<HTMLElement>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './autocomplete-trigger';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [\n    MatAutocomplete,\n    MatOptionModule,\n    MatAutocompleteTrigger,\n    MatAutocompleteOrigin,\n    MatCommonModule\n  ],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n})\nexport class MatAutocompleteModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AriaDescriber} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Renderer2,\n} from '@angular/core';\nimport {ThemePalette, mixinDisabled, CanDisableCtor, CanDisable} from '@angular/material/core';\n\n\nlet nextId = 0;\n\n// Boilerplate for applying mixins to MatBadge.\n/** @docs-private */\nexport class MatBadgeBase {}\n\nexport const _MatBadgeMixinBase:\n    CanDisableCtor & typeof MatBadgeBase = mixinDisabled(MatBadgeBase);\n\nexport type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after';\nexport type MatBadgeSize = 'small' | 'medium' | 'large';\n\n/** Directive to display a text badge. */\n@Directive({\n  selector: '[matBadge]',\n  inputs: ['disabled: matBadgeDisabled'],\n  host: {\n    'class': 'mat-badge',\n    '[class.mat-badge-overlap]': 'overlap',\n    '[class.mat-badge-above]': 'isAbove()',\n    '[class.mat-badge-below]': '!isAbove()',\n    '[class.mat-badge-before]': '!isAfter()',\n    '[class.mat-badge-after]': 'isAfter()',\n    '[class.mat-badge-small]': 'size === \"small\"',\n    '[class.mat-badge-medium]': 'size === \"medium\"',\n    '[class.mat-badge-large]': 'size === \"large\"',\n    '[class.mat-badge-hidden]': 'hidden || !_hasContent',\n    '[class.mat-badge-disabled]': 'disabled',\n  },\n})\nexport class MatBadge extends _MatBadgeMixinBase implements OnDestroy, CanDisable {\n  /** Whether the badge has any content. */\n  _hasContent = false;\n\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n  @Input('matBadgeColor')\n  get color(): ThemePalette { return this._color; }\n  set color(value: ThemePalette) {\n    this._setColor(value);\n    this._color = value;\n  }\n  private _color: ThemePalette = 'primary';\n\n  /** Whether the badge should overlap its contents or not */\n  @Input('matBadgeOverlap')\n  get overlap(): boolean { return this._overlap; }\n  set overlap(val: boolean) {\n    this._overlap = coerceBooleanProperty(val);\n  }\n  private _overlap: boolean = true;\n\n  /**\n   * Position the badge should reside.\n   * Accepts any combination of 'above'|'below' and 'before'|'after'\n   */\n  @Input('matBadgePosition') position: MatBadgePosition = 'above after';\n\n  /** The content for the badge */\n  @Input('matBadge')\n  get content(): string { return this._content; }\n  set content(value: string) {\n    this._content = value;\n    this._hasContent = value != null && `${value}`.trim().length > 0;\n    this._updateTextContent();\n  }\n  private _content: string;\n\n  /** Message used to describe the decorated element via aria-describedby */\n  @Input('matBadgeDescription')\n  get description(): string { return this._description; }\n  set description(newDescription: string) {\n    if (newDescription !== this._description) {\n      this._updateHostAriaDescription(newDescription, this._description);\n      this._description = newDescription;\n    }\n  }\n  private _description: string;\n\n  /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n  @Input('matBadgeSize') size: MatBadgeSize = 'medium';\n\n  /** Whether the badge is hidden. */\n  @Input('matBadgeHidden')\n  get hidden(): boolean { return this._hidden; }\n  set hidden(val: boolean) {\n    this._hidden = coerceBooleanProperty(val);\n  }\n  private _hidden: boolean;\n\n  /** Unique id for the badge */\n  _id: number = nextId++;\n\n  private _badgeElement: HTMLElement;\n\n  constructor(\n      @Optional() @Inject(DOCUMENT) private _document: any,\n      private _ngZone: NgZone,\n      private _elementRef: ElementRef<HTMLElement>,\n      private _ariaDescriber: AriaDescriber,\n      /** @breaking-change 8.0.0 Make _renderer a required param and remove _document. */\n      private _renderer?: Renderer2) {\n        super();\n      }\n\n  /** Whether the badge is above the host or not */\n  isAbove(): boolean {\n    return this.position.indexOf('below') === -1;\n  }\n\n  /** Whether the badge is after the host or not */\n  isAfter(): boolean {\n    return this.position.indexOf('before') === -1;\n  }\n\n  ngOnDestroy() {\n    if (this.description && this._badgeElement) {\n      this._ariaDescriber.removeDescription(this._badgeElement, this.description);\n    }\n  }\n\n  /** Injects a span element into the DOM with the content. */\n  private _updateTextContent(): HTMLSpanElement {\n    if (!this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n    } else {\n      this._badgeElement.textContent = this.content;\n    }\n    return this._badgeElement;\n  }\n\n  /** Creates the badge element */\n  private _createBadgeElement(): HTMLElement {\n    // @breaking-change 8.0.0 Remove null check for _renderer\n    const rootNode = this._renderer || this._document;\n    const badgeElement = rootNode.createElement('span');\n    const activeClass = 'mat-badge-active';\n\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n    badgeElement.classList.add('mat-badge-content');\n    badgeElement.textContent = this.content;\n\n    if (this.description) {\n      badgeElement.setAttribute('aria-label', this.description);\n    }\n\n    this._elementRef.nativeElement.appendChild(badgeElement);\n\n    // animate in after insertion\n    if (typeof requestAnimationFrame === 'function') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          badgeElement.classList.add(activeClass);\n        });\n      });\n    } else {\n      badgeElement.classList.add(activeClass);\n    }\n\n    return badgeElement;\n  }\n\n  /** Sets the aria-label property on the element */\n  private _updateHostAriaDescription(newDescription: string, oldDescription: string): void {\n    // ensure content available before setting label\n    const content = this._updateTextContent();\n\n    if (oldDescription) {\n      this._ariaDescriber.removeDescription(content, oldDescription);\n    }\n\n    if (newDescription) {\n      this._ariaDescriber.describe(content, newDescription);\n    }\n  }\n\n  /** Adds css theme class given the color to the component host */\n  private _setColor(colorPalette: ThemePalette) {\n    if (colorPalette !== this._color) {\n      if (this._color) {\n        this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\n      }\n      if (colorPalette) {\n        this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatBadge} from './badge';\n\n\n@NgModule({\n  imports: [\n    A11yModule,\n    MatCommonModule\n  ],\n  exports: [MatBadge],\n  declarations: [MatBadge],\n})\nexport class MatBadgeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a bottom sheet. */\nexport const MAT_BOTTOM_SHEET_DATA = new InjectionToken<any>('MatBottomSheetData');\n\n/**\n * Configuration used when opening a bottom sheet.\n */\nexport class MatBottomSheetConfig<D = any> {\n  /** The view container to place the overlay for the bottom sheet into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** Extra CSS classes to be added to the bottom sheet container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the bottom sheet. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Whether the bottom sheet has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop. */\n  backdropClass?: string;\n\n  /** Whether the user can use escape or clicking outside to close the bottom sheet. */\n  disableClose?: boolean = false;\n\n  /** Aria label to assign to the bottom sheet element. */\n  ariaLabel?: string | null = null;\n\n  /**\n   * Whether the bottom sheet should close when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n  closeOnNavigation?: boolean = true;\n\n  /** Whether the bottom sheet should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /**\n   * Whether the bottom sheet should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n  restoreFocus?: boolean = true;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material bottom sheet. */\nexport const matBottomSheetAnimations: {\n  readonly bottomSheetState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a bottom sheet. */\n  bottomSheetState: trigger('state', [\n    state('void, hidden', style({transform: 'translateY(100%)'})),\n    state('visible', style({transform: 'translateY(0%)'})),\n    transition('visible => void, visible => hidden',\n        animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible',\n        animate(`${AnimationDurations.EXITING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  EventEmitter,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {MatBottomSheetConfig} from './bottom-sheet-config';\nimport {matBottomSheetAnimations} from './bottom-sheet-animations';\nimport {Subscription} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\n\n// TODO(crisbeto): consolidate some logic between this, MatDialog and MatSnackBar\n\n/**\n * Internal component that wraps user-provided bottom sheet content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-bottom-sheet-container',\n  templateUrl: 'bottom-sheet-container.html',\n  styleUrls: ['bottom-sheet-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matBottomSheetAnimations.bottomSheetState],\n  host: {\n    'class': 'mat-bottom-sheet-container',\n    'tabindex': '-1',\n    'role': 'dialog',\n    'aria-modal': 'true',\n    '[attr.aria-label]': 'bottomSheetConfig?.ariaLabel',\n    '[@state]': '_animationState',\n    '(@state.start)': '_onAnimationStart($event)',\n    '(@state.done)': '_onAnimationDone($event)'\n  },\n})\nexport class MatBottomSheetContainer extends BasePortalOutlet implements OnDestroy {\n  private _breakpointSubscription: Subscription;\n\n  /** The portal outlet inside of this container into which the content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The state of the bottom sheet animations. */\n  _animationState: 'void' | 'visible' | 'hidden' = 'void';\n\n  /** Emits whenever the state of the animation changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** The class that traps and manages focus within the bottom sheet. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the bottom sheet was opened. */\n  private _elementFocusedBeforeOpened: HTMLElement | null = null;\n\n  /** Server-side rendering-compatible reference to the global document object. */\n  private _document: Document;\n\n  /** Whether the component has been destroyed. */\n  private _destroyed: boolean;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    breakpointObserver: BreakpointObserver,\n    @Optional() @Inject(DOCUMENT) document: any,\n    /** The bottom sheet configuration. */\n    public bottomSheetConfig: MatBottomSheetConfig) {\n    super();\n\n    this._document = document;\n    this._breakpointSubscription = breakpointObserver\n      .observe([Breakpoints.Medium, Breakpoints.Large, Breakpoints.XLarge])\n      .subscribe(() => {\n        this._toggleClass('mat-bottom-sheet-container-medium',\n            breakpointObserver.isMatched(Breakpoints.Medium));\n        this._toggleClass('mat-bottom-sheet-container-large',\n            breakpointObserver.isMatched(Breakpoints.Large));\n        this._toggleClass('mat-bottom-sheet-container-xlarge',\n            breakpointObserver.isMatched(Breakpoints.XLarge));\n      });\n  }\n\n  /** Attach a component portal as content to this bottom sheet container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this bottom sheet container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Begin animation of bottom sheet entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the bottom sheet exiting from view. */\n  exit(): void {\n    if (!this._destroyed) {\n      this._animationState = 'hidden';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._breakpointSubscription.unsubscribe();\n    this._destroyed = true;\n  }\n\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'hidden') {\n      this._restoreFocus();\n    } else if (event.toState === 'visible' && this.bottomSheetConfig.autoFocus) {\n      this._trapFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  private _toggleClass(cssClass: string, add: boolean) {\n    const classList = this._elementRef.nativeElement.classList;\n    add ? classList.add(cssClass) : classList.remove(cssClass);\n  }\n\n  private _validatePortalAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach bottom sheet content after content is already attached');\n    }\n  }\n\n  private _setPanelClass() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClass = this.bottomSheetConfig.panelClass;\n\n    if (Array.isArray(panelClass)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      panelClass.forEach(cssClass => element.classList.add(cssClass));\n    } else if (panelClass) {\n      element.classList.add(panelClass);\n    }\n  }\n\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    this._focusTrap.focusInitialElementWhenReady();\n  }\n\n  /** Restores focus to the element that was focused before the bottom sheet was opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (this.bottomSheetConfig.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the bottom sheet was opened. */\n  private _savePreviouslyFocusedElement() {\n    this._elementFocusedBeforeOpened = this._document.activeElement as HTMLElement;\n\n    // The `focus` method isn't available during server-side rendering.\n    if (this._elementRef.nativeElement.focus) {\n      Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PortalModule,\n  ],\n  exports: [MatBottomSheetContainer, MatCommonModule],\n  declarations: [MatBottomSheetContainer],\n  entryComponents: [MatBottomSheetContainer],\n})\nexport class MatBottomSheetModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Location} from '@angular/common';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {merge, Observable, Subject} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n/**\n * Reference to a bottom sheet dispatched from the bottom sheet service.\n */\nexport class MatBottomSheetRef<T = any, R = any> {\n  /** Instance of the component making up the content of the bottom sheet. */\n  instance: T;\n\n  /**\n   * Instance of the component into which the bottom sheet content is projected.\n   * @docs-private\n   */\n  containerInstance: MatBottomSheetContainer;\n\n  /** Subject for notifying the user that the bottom sheet has been dismissed. */\n  private readonly _afterDismissed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the bottom sheet has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Result to be passed down to the `afterDismissed` stream. */\n  private _result: R | undefined;\n\n  constructor(\n    containerInstance: MatBottomSheetContainer,\n    private _overlayRef: OverlayRef,\n    // @breaking-change 8.0.0 `_location` parameter to be removed.\n    _location?: Location) {\n    this.containerInstance = containerInstance;\n\n    // Emit when opening animation completes\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'visible'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'hidden'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._overlayRef.dispose();\n      this._afterDismissed.next(this._result);\n      this._afterDismissed.complete();\n    });\n\n    if (!containerInstance.bottomSheetConfig.disableClose) {\n      merge(\n        _overlayRef.backdropClick(),\n        _overlayRef.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE))\n      ).subscribe(() => this.dismiss());\n    }\n  }\n\n  /**\n   * Dismisses the bottom sheet.\n   * @param result Data to be passed back to the bottom sheet opener.\n   */\n  dismiss(result?: R): void {\n    if (!this._afterDismissed.closed) {\n      // Transition the backdrop in parallel to the bottom sheet.\n      this.containerInstance._animationStateChanged.pipe(\n        filter(event => event.phaseName === 'start'),\n        take(1)\n      ).subscribe(() => this._overlayRef.detachBackdrop());\n\n      this._result = result;\n      this.containerInstance.exit();\n    }\n  }\n\n  /** Gets an observable that is notified when the bottom sheet is finished closing. */\n  afterDismissed(): Observable<R | undefined> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the bottom sheet has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  Injectable,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n  InjectionToken,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {Location} from '@angular/common';\nimport {of as observableOf} from 'rxjs';\nimport {MAT_BOTTOM_SHEET_DATA, MatBottomSheetConfig} from './bottom-sheet-config';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\nimport {MatBottomSheetModule} from './bottom-sheet-module';\nimport {MatBottomSheetRef} from './bottom-sheet-ref';\n\n\n/** Injection token that can be used to specify default bottom sheet options. */\nexport const MAT_BOTTOM_SHEET_DEFAULT_OPTIONS =\n    new InjectionToken<MatBottomSheetConfig>('mat-bottom-sheet-default-options');\n\n/**\n * Service to trigger Material Design bottom sheets.\n */\n@Injectable({providedIn: MatBottomSheetModule})\nexport class MatBottomSheet implements OnDestroy {\n  private _bottomSheetRefAtThisLevel: MatBottomSheetRef<any> | null = null;\n\n  /** Reference to the currently opened bottom sheet. */\n  get _openedBottomSheetRef(): MatBottomSheetRef<any> | null {\n    const parent = this._parentBottomSheet;\n    return parent ? parent._openedBottomSheetRef : this._bottomSheetRefAtThisLevel;\n  }\n\n  set _openedBottomSheetRef(value: MatBottomSheetRef<any> | null) {\n    if (this._parentBottomSheet) {\n      this._parentBottomSheet._openedBottomSheetRef = value;\n    } else {\n      this._bottomSheetRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() @SkipSelf() private _parentBottomSheet: MatBottomSheet,\n      @Optional() private _location?: Location,\n      @Optional() @Inject(MAT_BOTTOM_SHEET_DEFAULT_OPTIONS)\n          private _defaultOptions?: MatBottomSheetConfig) {}\n\n  open<T, D = any, R = any>(component: ComponentType<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n  open<T, D = any, R = any>(template: TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R> {\n\n    const _config =\n        _applyConfigDefaults(this._defaultOptions || new MatBottomSheetConfig(), config);\n    const overlayRef = this._createOverlay(_config);\n    const container = this._attachContainer(overlayRef, _config);\n    const ref = new MatBottomSheetRef<T, R>(container, overlayRef, this._location);\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      container.attachTemplatePortal(new TemplatePortal<T>(componentOrTemplateRef, null!, {\n        $implicit: _config.data,\n        bottomSheetRef: ref\n      } as any));\n    } else {\n      const portal = new ComponentPortal(componentOrTemplateRef, undefined,\n            this._createInjector(_config, ref));\n      const contentRef = container.attachComponentPortal(portal);\n      ref.instance = contentRef.instance;\n    }\n\n    // When the bottom sheet is dismissed, clear the reference to it.\n    ref.afterDismissed().subscribe(() => {\n      // Clear the bottom sheet ref if it hasn't already been replaced by a newer one.\n      if (this._openedBottomSheetRef == ref) {\n        this._openedBottomSheetRef = null;\n      }\n    });\n\n    if (this._openedBottomSheetRef) {\n      // If a bottom sheet is already in view, dismiss it and enter the\n      // new bottom sheet after exit animation is complete.\n      this._openedBottomSheetRef.afterDismissed().subscribe(() => ref.containerInstance.enter());\n      this._openedBottomSheetRef.dismiss();\n    } else {\n      // If no bottom sheet is in view, enter the new bottom sheet.\n      ref.containerInstance.enter();\n    }\n\n    this._openedBottomSheetRef = ref;\n\n    return ref;\n  }\n\n  /**\n   * Dismisses the currently-visible bottom sheet.\n   */\n  dismiss(): void {\n    if (this._openedBottomSheetRef) {\n      this._openedBottomSheetRef.dismiss();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._bottomSheetRefAtThisLevel) {\n      this._bottomSheetRefAtThisLevel.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the bottom sheet container component to the overlay.\n   */\n  private _attachContainer(overlayRef: OverlayRef,\n                           config: MatBottomSheetConfig): MatBottomSheetContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatBottomSheetConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatBottomSheetContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatBottomSheetContainer> = overlayRef.attach(containerPortal);\n    return containerRef.instance;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified bottom sheet config.\n   */\n  private _createOverlay(config: MatBottomSheetConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig({\n      direction: config.direction,\n      hasBackdrop: config.hasBackdrop,\n      disposeOnNavigation: config.closeOnNavigation,\n      maxWidth: '100%',\n      scrollStrategy: this._overlay.scrollStrategies.block(),\n      positionStrategy: this._overlay.position()\n        .global()\n        .centerHorizontally()\n        .bottom('0')\n    });\n\n    if (config.backdropClass) {\n      overlayConfig.backdropClass = config.backdropClass;\n    }\n\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a bottom sheet component.\n   * @param config Config that was used to create the bottom sheet.\n   * @param bottomSheetRef Reference to the bottom sheet.\n   */\n  private _createInjector<T>(config: MatBottomSheetConfig,\n                             bottomSheetRef: MatBottomSheetRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap<any, any>([\n      [MatBottomSheetRef, bottomSheetRef],\n      [MAT_BOTTOM_SHEET_DATA, config.data]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the bottom sheet config.\n * @param defaults Object containing the default values to which to fall back.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(defaults: MatBottomSheetConfig,\n                              config?: MatBottomSheetConfig): MatBottomSheetConfig {\n  return {...defaults, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {MatOptgroup} from './optgroup';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT =\n    new InjectionToken<MatOptionParentComponent>('MAT_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  styleUrls: ['option.css'],\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption implements AfterViewChecked, OnDestroy {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _mostRecentViewValue = '';\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() { return this._parent && this._parent.multiple; }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** The unique ID of the option. */\n  @Input() id: string = `mat-option-${_uniqueIdCounter++}`;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple() { return this._parent && this._parent.disableRipple; }\n\n  /** Event emitted when the option is selected or deselected. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n\n  /** Emits when the state of the option changes and any parents have to be notified. */\n  readonly _stateChanges = new Subject<void>();\n\n  constructor(\n    private _element: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() readonly group: MatOptgroup) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Sets focus onto this option. */\n  focus(): void {\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * `Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.`\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  ngAfterViewChecked() {\n    // Since parent components could be using the option's label to display the selected values\n    // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n    // relatively cheap, however we still limit them only to selected options in order to avoid\n    // hitting the DOM too often.\n    if (this._selected) {\n      const viewValue = this.viewValue;\n\n      if (viewValue !== this._mostRecentViewValue) {\n        this._mostRecentViewValue = viewValue;\n        this._stateChanges.next();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function _countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n  optionGroups: QueryList<MatOptgroup>): number {\n\n  if (optionGroups.length) {\n    let optionsArray = options.toArray();\n    let groups = optionGroups.toArray();\n    let groupCounter = 0;\n\n    for (let i = 0; i < optionIndex + 1; i++) {\n      if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n        groupCounter++;\n      }\n    }\n\n    return groupCounter;\n  }\n\n  return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function _getOptionScrollPosition(optionIndex: number, optionHeight: number,\n    currentScrollPosition: number, panelHeight: number): number {\n  const optionOffset = optionIndex * optionHeight;\n\n  if (optionOffset < currentScrollPosition) {\n    return optionOffset;\n  }\n\n  if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n    return Math.max(0, optionOffset - panelHeight + optionHeight);\n  }\n\n  return currentScrollPosition;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n\n@NgModule({\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup]\n})\nexport class MatOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MAT_LABEL_GLOBAL_OPTIONS =\n  new InjectionToken<LabelOptions>('mat-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n  /**\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n   * Default behavior is assumed to be `auto`.\n   */\n  float?: FloatLabelType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the MatFormField.\n * @docs-private\n */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /**\n   * Whether the input is currently in an autofilled state. If property is not present on the\n   * control it is assumed to be false.\n   */\n  readonly autofilled?: boolean;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/**\n * The placeholder text for an `MatFormField`.\n * @deprecated Use `<mat-label>` to specify the label and the `placeholder` attribute to specify the\n *     placeholder.\n * @breaking-change 8.0.0\n */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed the the front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor, CanColorCtor,\n  FloatLabelType,\n  LabelOptions,\n  MAT_LABEL_GLOBAL_OPTIONS,\n  mixinColor,\n} from '@angular/material/core';\nimport {fromEvent, merge} from 'rxjs';\nimport {startWith, take} from 'rxjs/operators';\nimport {MatError} from './error';\nimport {matFormFieldAnimations} from './form-field-animations';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {Platform} from '@angular/cdk/platform';\nimport {NgControl} from '@angular/forms';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nlet nextUniqueId = 0;\nconst floatingLabelScale = 0.75;\nconst outlineGapPadding = 5;\n\n\n/**\n * Boilerplate for applying mixins to MatFormField.\n * @docs-private\n */\nexport class MatFormFieldBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/**\n * Base class to which we're applying the form field mixins.\n * @docs-private\n */\nexport const _MatFormFieldMixinBase: CanColorCtor & typeof MatFormFieldBase =\n    mixinColor(MatFormFieldBase, 'primary');\n\n/** Possible appearance styles for the form field. */\nexport type MatFormFieldAppearance = 'legacy' | 'standard' | 'fill' | 'outline';\n\n/**\n * Represents the default options form the form field that can be configured\n * using the `MAT_FORM_FIELD_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatFormFieldDefaultOptions {\n  appearance?: MatFormFieldAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all form field within an app.\n */\nexport const MAT_FORM_FIELD_DEFAULT_OPTIONS =\n    new InjectionToken<MatFormFieldDefaultOptions>('MAT_FORM_FIELD_DEFAULT_OPTIONS');\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here.\n  // The MatInput styles are fairly minimal so it shouldn't be a big deal for people who\n  // aren't using MatInput.\n  styleUrls: [\n    'form-field.css',\n    'form-field-fill.css',\n    'form-field-legacy.css',\n    'form-field-outline.css',\n    'form-field-standard.css',\n    '../input/input.css',\n  ],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-form-field',\n    '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n    '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n    '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n    '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-form-field-autofilled]': '_control.autofilled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n    '[class._mat-animation-noopable]': '!_animationsEnabled',\n  },\n  inputs: ['color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField extends _MatFormFieldMixinBase\n    implements AfterContentInit, AfterContentChecked, AfterViewInit, CanColor {\n  private _labelOptions: LabelOptions;\n  private _outlineGapCalculationNeeded = false;\n\n  /** The form-field appearance style. */\n  @Input()\n  get appearance(): MatFormFieldAppearance { return this._appearance; }\n  set appearance(value: MatFormFieldAppearance) {\n    const oldValue = this._appearance;\n\n    this._appearance = value || (this._defaults && this._defaults.appearance) || 'legacy';\n\n    if (this._appearance === 'outline' && oldValue !== value) {\n      this._updateOutlineGapOnStable();\n    }\n  }\n  _appearance: MatFormFieldAppearance;\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker(): boolean { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: boolean) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat(): boolean {\n    return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat(): boolean { return this.floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel(): string { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  // Unique id for the internal form field label.\n  _labelId = `mat-form-field-label-${nextUniqueId++}`;\n\n  /**\n   * Whether the label should always float, never float or float as the user types.\n   *\n   * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n   * way to make the floating label emulate the behavior of a standard input placeholder. However\n   * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n   * appearances the `never` option has been disabled in favor of just using the placeholder.\n   */\n  @Input()\n  get floatLabel(): FloatLabelType {\n    return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n  }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  /** Whether the Angular animations are enabled. */\n  _animationsEnabled: boolean;\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @ViewChild('underline') underlineRef: ElementRef;\n\n  @ViewChild('connectionContainer') _connectionContainerRef: ElementRef;\n  @ViewChild('inputContainer') _inputContainerRef: ElementRef;\n  @ViewChild('label') private _label: ElementRef;\n  @ContentChild(MatFormFieldControl) _control: MatFormFieldControl<any>;\n  @ContentChild(MatPlaceholder) _placeholderChild: MatPlaceholder;\n  @ContentChild(MatLabel) _labelChild: MatLabel;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions,\n      @Optional() private _dir: Directionality,\n      @Optional() @Inject(MAT_FORM_FIELD_DEFAULT_OPTIONS)\n          private _defaults: MatFormFieldDefaultOptions,\n      // @breaking-change 8.0.0 _platform, _ngZone and _animationMode to be made required.\n      private _platform?: Platform,\n      private _ngZone?: NgZone,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) _animationMode?: string) {\n    super(_elementRef);\n\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n    this._animationsEnabled = _animationMode !== 'NoopAnimations';\n\n    // Set the default through here so we invoke the setter on the first run.\n    this.appearance = (_defaults && _defaults.appearance) ? _defaults.appearance : 'legacy';\n  }\n\n  /**\n   * Gets an ElementRef for the element that a overlay attached to the form-field should be\n   * positioned relative to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._connectionContainerRef || this._elementRef;\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n\n    const control = this._control;\n\n    if (control.controlType) {\n      this._elementRef.nativeElement.classList.add(`mat-form-field-type-${control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    control.stateChanges.pipe(startWith<void>(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Run change detection if the value changes.\n    if (control.ngControl && control.ngControl.valueChanges) {\n      control.ngControl.valueChanges.subscribe(() => this._changeDetectorRef.markForCheck());\n    }\n\n    // Run change detection and update the outline if the suffix or prefix changes.\n    merge(this._prefixChildren.changes, this._suffixChildren.changes).subscribe(() => {\n      this._updateOutlineGapOnStable();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n    if (this._outlineGapCalculationNeeded) {\n      this.updateOutlineGap();\n    }\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: keyof NgControl): boolean {\n    const ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && ngControl[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control && this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this.appearance === 'legacy' && !this._hasLabel() ||\n        this._hasLabel() && !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      // If animations are disabled, we shouldn't go in here,\n      // because the `transitionend` will never fire.\n      if (this._animationsEnabled) {\n        this._showAlwaysAnimate = true;\n\n        fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n          this._showAlwaysAnimate = false;\n        });\n      }\n\n      this.floatLabel = 'always';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align === 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align === 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        const startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        const endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n\n  /**\n   * Updates the width and position of the gap in the outline. Only relevant for the outline\n   * appearance.\n   */\n  updateOutlineGap() {\n    const labelEl = this._label ? this._label.nativeElement : null;\n\n    if (this.appearance !== 'outline' || !labelEl || !labelEl.children.length ||\n        !labelEl.textContent.trim()) {\n      return;\n    }\n\n    if (this._platform && !this._platform.isBrowser) {\n      // getBoundingClientRect isn't available on the server.\n      return;\n    }\n    // If the element is not present in the DOM, the outline gap will need to be calculated\n    // the next time it is checked and in the DOM.\n    if (!document.documentElement!.contains(this._elementRef.nativeElement)) {\n      this._outlineGapCalculationNeeded = true;\n      return;\n    }\n\n    let startWidth = 0;\n    let gapWidth = 0;\n    const startEls = this._connectionContainerRef.nativeElement.querySelectorAll(\n      '.mat-form-field-outline-start');\n    const gapEls = this._connectionContainerRef.nativeElement.querySelectorAll(\n        '.mat-form-field-outline-gap');\n    if (this._label && this._label.nativeElement.children.length) {\n      const containerStart = this._getStartEnd(\n          this._connectionContainerRef.nativeElement.getBoundingClientRect());\n      const labelStart = this._getStartEnd(labelEl.children[0].getBoundingClientRect());\n      let labelWidth = 0;\n\n      for (const child of labelEl.children) {\n        labelWidth += child.offsetWidth;\n      }\n      startWidth = labelStart - containerStart - outlineGapPadding;\n      gapWidth = labelWidth > 0 ? labelWidth * floatingLabelScale + outlineGapPadding * 2 : 0;\n    }\n\n    for (let i = 0; i < startEls.length; i++) {\n      startEls.item(i).style.width = `${startWidth}px`;\n    }\n    for (let i = 0; i < gapEls.length; i++) {\n      gapEls.item(i).style.width = `${gapWidth}px`;\n    }\n\n    this._outlineGapCalculationNeeded = false;\n  }\n\n  /** Gets the start end of the rect considering the current directionality. */\n  private _getStartEnd(rect: ClientRect): number {\n    return this._dir && this._dir.value === 'rtl' ? rect.right : rect.left;\n  }\n\n  /** Updates the outline gap the new time the zone stabilizes. */\n  private _updateOutlineGapOnStable() {\n    // @breaking-change 8.0.0 Remove this check and else block once _ngZone is required.\n    if (this._ngZone) {\n      this._ngZone.onStable.pipe(take(1)).subscribe(() => this.updateOutlineGap());\n    } else {\n      Promise.resolve().then(() => this.updateOutlineGap());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n  imports: [\n    CommonModule,\n    ObserversModule,\n  ],\n  exports: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n})\nexport class MatFormFieldModule {}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {HammerLoader, HAMMER_LOADER} from '@angular/platform-browser';\nimport {BidiModule} from '@angular/cdk/bidi';\n\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks', {\n  providedIn: 'root',\n  factory: MATERIAL_SANITY_CHECKS_FACTORY,\n});\n\n/** @docs-private */\nexport function MATERIAL_SANITY_CHECKS_FACTORY(): boolean {\n  return true;\n}\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  /** Whether we've already checked for HammerJs availability. */\n  private _hasCheckedHammer = false;\n\n  /** Reference to the global `document` object. */\n  private _document = typeof document === 'object' && document ? document : null;\n\n  /** Reference to the global 'window' object. */\n  private _window = typeof window === 'object' && window ? window : null;\n\n  constructor(\n    @Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecksEnabled: boolean,\n    @Optional() @Inject(HAMMER_LOADER) private _hammerLoader?: HammerLoader) {\n\n    if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n      this._checkDoctypeIsDefined();\n      this._checkThemeIsPresent();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n\n  /** Whether any sanity checks are enabled */\n  private _areChecksEnabled(): boolean {\n    return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n  }\n\n  /** Whether the code is running in tests. */\n  private _isTestEnv() {\n    const window = this._window as any;\n    return window && (window.__karma__ || window.jasmine);\n  }\n\n  private _checkDoctypeIsDefined(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n\n  private _checkThemeIsPresent(): void {\n    // We need to assert that the `body` is defined, because these checks run very early\n    // and the `body` won't be defined if the consumer put their scripts in the `head`.\n    if (!this._document || !this._document.body || typeof getComputedStyle !== 'function') {\n      return;\n    }\n\n    const testElement = this._document.createElement('div');\n\n    testElement.classList.add('mat-theme-loaded-marker');\n    this._document.body.appendChild(testElement);\n\n    const computedStyle = getComputedStyle(testElement);\n\n    // In some situations the computed style of the test element can be null. For example in\n    // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n    // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n    if (computedStyle && computedStyle.display !== 'none') {\n      console.warn(\n        'Could not find Angular Material core theme. Most Material ' +\n        'components may not work as expected. For more info refer ' +\n        'to the theming guide: https://material.angular.io/guide/theming'\n      );\n    }\n\n    this._document.body.removeChild(testElement);\n  }\n\n  /** Checks whether HammerJS is available. */\n  _checkHammerIsAvailable(): void {\n    if (this._hasCheckedHammer || !this._window) {\n      return;\n    }\n\n    if (this._areChecksEnabled() && !(this._window as any)['Hammer'] && !this._hammerLoader) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material components may not work correctly.');\n    }\n    this._hasCheckedHammer = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  /** Whether the component is disabled. */\n  disabled: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableCtor = Constructor<CanDisable>;\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): CanDisableCtor & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled() { return this._disabled; }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  /** Theme color palette for the component. */\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport type CanColorCtor = Constructor<CanColor>;\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values. */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(\n    base: T, defaultColor?: ThemePalette): CanColorCtor & T {\n  return class extends base {\n    private _color: ThemePalette;\n\n    get color(): ThemePalette { return this._color; }\n    set color(value: ThemePalette) {\n      const colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  /** Whether ripples are disabled. */\n  disableRipple: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableRippleCtor = Constructor<CanDisableRipple>;\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T): CanDisableRippleCtor & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n\n/** @docs-private */\nexport interface HasTabIndex {\n  /** Tabindex of the component. */\n  tabIndex: number;\n}\n\n/** @docs-private */\nexport type HasTabIndexCtor = Constructor<HasTabIndex>;\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : HasTabIndexCtor & T {\n  return class extends base {\n    private _tabIndex: number = defaultTabIndex;\n\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {Constructor} from './constructor';\n\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  updateErrorState(): void;\n  readonly stateChanges: Subject<void>;\n  errorState: boolean;\n  errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport type CanUpdateErrorStateCtor = Constructor<CanUpdateErrorState>;\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n  ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n: CanUpdateErrorStateCtor & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping\n     * `MatFormField` needs to run change detection.\n     */\n    readonly stateChanges = new Subject<void>();\n\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable, Subscriber} from 'rxjs';\nimport {Constructor} from './constructor';\n\n\n/**\n * Mixin that adds an initialized property to a directive which, when subscribed to, will emit a\n * value once markInitialized has been called, which should be done during the ngOnInit function.\n * If the subscription is made after it has already been marked as initialized, then it will trigger\n * an emit immediately.\n * @docs-private\n */\nexport interface HasInitialized {\n  /** Stream that emits once during the directive/component's ngOnInit. */\n  initialized: Observable<void>;\n\n  /**\n   * Sets the state as initialized and must be called during ngOnInit to notify subscribers that\n   * the directive has been initialized.\n   * @docs-private\n   */\n  _markInitialized: () => void;\n}\n\n/** @docs-private */\nexport type HasInitializedCtor = Constructor<HasInitialized>;\n\n/** Mixin to augment a directive with an initialized property that will emits when ngOnInit ends. */\nexport function mixinInitialized<T extends Constructor<{}>>(base: T):\n    HasInitializedCtor & T {\n  return class extends base {\n    /** Whether this directive has been marked as initialized. */\n    _isInitialized = false;\n\n    /**\n     * List of subscribers that subscribed before the directive was initialized. Should be notified\n     * during _markInitialized. Set to null after pending subscribers are notified, and should\n     * not expect to be populated after.\n     */\n    _pendingSubscribers: Subscriber<void>[] | null = [];\n\n    /**\n     * Observable stream that emits when the directive initializes. If already initialized, the\n     * subscriber is stored to be notified once _markInitialized is called.\n     */\n    initialized = new Observable<void>(subscriber => {\n      // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify\n      // when _markInitialized is called.\n      if (this._isInitialized) {\n        this._notifySubscriber(subscriber);\n      } else {\n        this._pendingSubscribers!.push(subscriber);\n      }\n    });\n\n    constructor(...args: any[]) { super(...args); }\n\n    /**\n     * Marks the state as initialized and notifies pending subscribers. Should be called at the end\n     * of ngOnInit.\n     * @docs-private\n     */\n    _markInitialized(): void {\n      if (this._isInitialized) {\n        throw Error('This directive has already been marked as initialized and ' +\n            'should not be called twice.');\n      }\n\n      this._isInitialized = true;\n\n      this._pendingSubscribers!.forEach(this._notifySubscriber);\n      this._pendingSubscribers = null;\n    }\n\n    /** Emits and completes the subscriber stream (should only emit once). */\n    _notifySubscriber(subscriber: Subscriber<void>): void {\n      subscriber.next();\n      subscriber.complete();\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {inject, InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE', {\n  providedIn: 'root',\n  factory: MAT_DATE_LOCALE_FACTORY,\n});\n\n/** @docs-private */\nexport function MAT_DATE_LOCALE_FACTORY(): string {\n  return inject(LOCALE_ID);\n}\n\n/**\n * No longer needed since MAT_DATE_LOCALE has been changed to a scoped injectable.\n * If you are importing and providing this in your code you can simply remove it.\n * @deprecated\n * @breaking-change 8.0.0\n */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges = new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n  private readonly _clampDate: boolean;\n\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   *\n   * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\n   * getting the string representation of a Date object from it's utc representation. We're keeping\n   * it here for sometime, just for precaution, in case we decide to revert some of these changes\n   * though.\n   */\n  useUtcForDisplay: boolean = true;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string, platform: Platform) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    this.useUtcForDisplay = !platform.TRIDENT;\n    this._clampDate = platform.TRIDENT || platform.EDGE;\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {month: style, timeZone: 'utc'});\n      return range(12, i =>\n          this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric', timeZone: 'utc'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {weekday: style, timeZone: 'utc'});\n      return range(7, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric', timeZone: 'utc'});\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    if (SUPPORTS_INTL_API) {\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n        date = this.clone(date);\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n      }\n\n      displayFormat = {...displayFormat, timeZone: 'utc'};\n\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    const result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n\n  /**\n   * When converting Date object to string, javascript built-in functions may return wrong\n   * results because it applies its internal DST rules. The DST rules around the world change\n   * very frequently, and the current valid rule is not always valid in previous years though.\n   * We work around this problem building a new Date object which has its internal UTC\n   * representation with the local date and time.\n   * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\n   *    timeZone set to 'utc' to work fine.\n   * @param date Date from which we want to get the string representation according to dtf\n   * @returns A Date object with its UTC representation based on the passed in date info\n   */\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\n    const d = new Date(Date.UTC(\n        date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n        date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n    return dtf.format(d);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  NgModule,\n  Directive,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {startWith} from 'rxjs/operators';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport function setLines(lines: QueryList<MatLine>, element: ElementRef<HTMLElement>) {\n  // Note: doesn't need to unsubscribe, because `changes`\n  // gets completed by Angular when the view is destroyed.\n  lines.changes.pipe(startWith<QueryList<MatLine>>(lines)).subscribe(({length}) => {\n    setClass(element, 'mat-2-line', false);\n    setClass(element, 'mat-3-line', false);\n    setClass(element, 'mat-multi-line', false);\n\n    if (length === 2 || length === 3) {\n      setClass(element, `mat-${length}-line`, true);\n    } else if (length > 3) {\n      setClass(element, `mat-multi-line`, true);\n    }\n  });\n}\n\n/** Adds or removes a class from an element. */\nfunction setClass(element: ElementRef<HTMLElement>, className: string, isAdd: boolean): void {\n  const classList = element.nativeElement.classList;\n  isAdd ? classList.add(className) : classList.remove(className);\n}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n * @deprecated Use `setLines` instead.\n * @breaking-change 8.0.0\n */\nexport class MatLineSetter {\n  constructor(lines: QueryList<MatLine>, element: ElementRef<HTMLElement>) {\n    setLines(lines, element);\n  }\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {RippleRef, RippleState} from './ripple-ref';\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  persistent?: boolean;\n  animation?: RippleAnimationConfig;\n  terminateOnPointerUp?: boolean;\n};\n\n/**\n * Interface that describes the configuration for the animation of a ripple.\n * There are two animation phases with different durations for the ripples.\n */\nexport interface RippleAnimationConfig {\n  /** Duration in milliseconds for the enter animation (expansion from point of contact). */\n  enterDuration?: number;\n  /** Duration in milliseconds for the exit animation (fade-out). */\n  exitDuration?: number;\n}\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nexport const defaultRippleAnimationConfig = {\n  enterDuration: 450,\n  exitDuration: 400\n};\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst ignoreMouseEventsTimeout = 800;\n\n/** Options that apply to all the event listeners that are bound by the ripple renderer. */\nconst passiveEventOptions = normalizePassiveListenerOptions({passive: true});\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer {\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /** Events to be registered on the trigger element. */\n  private _triggerEvents = new Map<string, any>();\n\n  /** Set of currently active ripple references. */\n  private _activeRipples = new Set<RippleRef>();\n\n  /** Latest non-persistent ripple that was triggered. */\n  private _mostRecentTransientRipple: RippleRef | null;\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /**\n   * Cached dimensions of the ripple container. Set when the first\n   * ripple is shown and cleared once no more ripples are visible.\n   */\n  private _containerRect: ClientRect | null;\n\n  constructor(private _target: RippleTarget,\n              private _ngZone: NgZone,\n              elementRef: ElementRef<HTMLElement>,\n              platform: Platform) {\n\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents\n        .set('mousedown', this.onMousedown)\n        .set('mouseup', this.onPointerUp)\n        .set('mouseleave', this.onPointerUp)\n\n        .set('touchstart', this.onTouchStart)\n        .set('touchend', this.onPointerUp)\n        .set('touchcancel', this.onPointerUp);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = this._containerRect =\n                          this._containerRect || this._containerElement.getBoundingClientRect();\n    const animationConfig = {...defaultRippleAnimationConfig, ...config.animation};\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n    const duration = animationConfig.enterDuration;\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    if (!config.persistent) {\n      this._mostRecentTransientRipple = rippleRef;\n    }\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      const isMostRecentTransientRipple = rippleRef === this._mostRecentTransientRipple;\n\n      rippleRef.state = RippleState.VISIBLE;\n\n      // When the timer runs out while the user has kept their pointer down, we want to\n      // keep only the persistent ripples and the latest transient ripple. We do this,\n      // because we don't want stacked transient ripples to appear after their enter\n      // animation has finished.\n      if (!config.persistent && (!isMostRecentTransientRipple || !this._isPointerDown)) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    const wasActive = this._activeRipples.delete(rippleRef);\n\n    if (rippleRef === this._mostRecentTransientRipple) {\n      this._mostRecentTransientRipple = null;\n    }\n\n    // Clear out the cached bounding rect if we have no more ripples.\n    if (!this._activeRipples.size) {\n      this._containerRect = null;\n    }\n\n    // For ripples that are not active anymore, don't re-un the fade-out animation.\n    if (!wasActive) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n    const animationConfig = {...defaultRippleAnimationConfig, ...rippleRef.config.animation};\n\n    rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n    rippleEl.style.opacity = '0';\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode!.removeChild(rippleEl);\n    }, animationConfig.exitDuration);\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(element: HTMLElement) {\n    if (!element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n\n    this._ngZone.runOutsideAngular(() => {\n      this._triggerEvents.forEach((fn, type) => {\n        element.addEventListener(type, fn, passiveEventOptions);\n      });\n    });\n\n    this._triggerElement = element;\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private onMousedown = (event: MouseEvent) => {\n    // Screen readers will fire fake mouse events for space/enter. Skip launching a\n    // ripple in this case for consistency with the non-screen-reader experience.\n    const isFakeMousedown = isFakeMousedownFromScreenReader(event);\n    const isSyntheticEvent = this._lastTouchStartEvent &&\n        Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n\n    if (!this._target.rippleDisabled && !isFakeMousedown && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private onTouchStart = (event: TouchEvent) => {\n    if (!this._target.rippleDisabled) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      // Use `changedTouches` so we skip any touches where the user put\n      // their finger down, but used another finger to tap the element again.\n      const touches = event.changedTouches;\n\n      for (let i = 0; i < touches.length; i++) {\n        this.fadeInRipple(touches[i].clientX, touches[i].clientY, this._target.rippleConfig);\n      }\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private onPointerUp = () => {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      // By default, only ripples that are completely visible will fade out on pointer release.\n      // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\n      const isVisible = ripple.state === RippleState.VISIBLE ||\n        ripple.config.terminateOnPointerUp && ripple.state === RippleState.FADING_IN;\n\n      if (!ripple.config.persistent && isVisible) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n  private runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => {\n        this._triggerElement!.removeEventListener(type, fn, passiveEventOptions);\n      });\n    }\n  }\n}\n\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`matMenuTriggerFor: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`xPosition value must be either 'before' or after'.\n      Example: <mat-menu xPosition=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`yPosition value must be either 'above' or below'.\n      Example: <mat-menu yPosition=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {DateAdapter} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n  imports: [PlatformModule],\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n  ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({providedIn: 'root'})\nexport class ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {\n  HammerStatic,\n  HammerInstance,\n  Recognizer,\n  RecognizerStatic,\n  HammerOptions,\n} from './gesture-annotations';\n\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\n\nconst ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES = [\n  'longpress',\n  'slide',\n  'slidestart',\n  'slideend',\n  'slideright',\n  'slideleft'\n];\n\n/**\n * Fake HammerInstance that is used when a Hammer instance is requested when HammerJS has not\n * been loaded on the page.\n */\nconst noopHammerInstance: HammerInstance = {\n  on: () => {},\n  off: () => {},\n};\n\n/** Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class GestureConfig extends HammerGestureConfig {\n  /** List of new event names to add to the gesture support list */\n  events = ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES;\n\n  constructor(\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\n    @Optional() commonModule?: MatCommonModule) {\n    super();\n    if (commonModule) {\n      commonModule._checkHammerIsAvailable();\n    }\n  }\n\n  /**\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://material.io/design/#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * @param element Element to which to assign the new HammerJS gestures.\n   * @returns Newly-created HammerJS instance.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\n\n    if (!hammer) {\n      // If HammerJS is not loaded here, return the noop HammerInstance. This is necessary to\n      // ensure that omitting HammerJS completely will not cause any errors while *also* supporting\n      // the lazy-loading of HammerJS via the HAMMER_LOADER token introduced in Angular 6.1.\n      // Because we can't depend on HAMMER_LOADER's existance until 7.0, we have to always set\n      // `this.events` to the set we support, instead of conditionally setting it to `[]` if\n      // `HAMMER_LOADER` is present (and then throwing an Error here if `window.Hammer` is\n      // undefined).\n      // @breaking-change 8.0.0\n      return noopHammerInstance;\n    }\n\n    const mc = new hammer(element, this._hammerOptions || undefined);\n\n    // Default Hammer Recognizers.\n    const pan = new hammer.Pan();\n    const swipe = new hammer.Swipe();\n    const press = new hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Since the slide event threshold is set to zero, the slide recognizer can fire and\n    // accidentally reset the longpress recognizer. In order to make sure that the two\n    // recognizers can run simultaneously but don't affect each other, we allow the slide\n    // recognizer to recognize while a longpress is being processed.\n    // See: https://github.com/hammerjs/hammer.js/blob/master/src/manager.js#L123-L124\n    longpress.recognizeWith(slide);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return mc as HammerInstance;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\n\n/** Possible states for a ripple element. */\nexport enum RippleState {\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n\n  /** Current state of the ripple. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: RippleRenderer,\n    /** Reference to the ripple HTML element. */\n    public element: HTMLElement,\n    /** Ripple configuration used for the ripple. */\n    public config: RippleConfig) {\n  }\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {RippleRef} from './ripple-ref';\nimport {RippleAnimationConfig, RippleConfig, RippleRenderer, RippleTarget} from './ripple-renderer';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * Configuration for the animation duration of the ripples. There are two phases with different\n   * durations for the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  animation?: RippleAnimationConfig;\n\n  /**\n   * Whether ripples should start fading out immediately after the mouse our touch is released. By\n   * default, ripples will wait for the enter animation to complete and for mouse or touch release.\n   */\n  terminateOnPointerUp?: boolean;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * Configuration for the ripple animation. Allows modifying the enter and exit animation\n   * duration of the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  @Input('matRippleAnimation') animation: RippleAnimationConfig;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() { return this._trigger || this._elementRef.nativeElement; }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** Whether ripple directive is initialized and the input bindings are set. */\n  private _isInitialized: boolean = false;\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n\n    if (animationMode === 'NoopAnimations') {\n      this._globalOptions.animation = {enterDuration: 0, exitDuration: 0};\n    }\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /**\n   * Ripple configuration from the directive's input values.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      radius: this.radius,\n      color: this.color,\n      animation: {...this._globalOptions.animation, ...this.animation},\n      terminateOnPointerUp: this._globalOptions.terminateOnPointerUp,\n    };\n  }\n\n  /**\n   * Whether ripples on pointer-down are disabled or not.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n\n  /**\n   * Launches a manual ripple using the specified ripple configuration.\n   * @param config Configuration for the manual ripple.\n   */\n  launch(config: RippleConfig): RippleRef;\n\n  /**\n   * Launches a manual ripple at the specified coordinates within the element.\n   * @param x Coordinate within the element, along the X axis at which to fade-in the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to fade-in the ripple.\n   * @param config Optional ripple configuration for the manual ripple.\n   */\n  launch(x: number, y: number, config?: RippleConfig): RippleRef;\n\n  /** Launches a manual ripple at the specified coordinated or just by the ripple config. */\n  launch(configOrX: number | RippleConfig, y: number = 0, config?: RippleConfig): RippleRef {\n    if (typeof configOrX === 'number') {\n      return this._rippleRenderer.fadeInRipple(configOrX, y, {...this.rippleConfig, ...config});\n    } else {\n      return this._rippleRenderer.fadeInRipple(0, 0, {...this.rippleConfig, ...configOrX});\n    }\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  Input,\n  ChangeDetectionStrategy,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/**\n * Possible states for a pseudo checkbox.\n * @docs-private\n */\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n\n  constructor(@Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n})\nexport class MatPseudoCheckboxModule { }\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '../common-behaviors/disabled';\n\n\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nexport class MatOptgroupBase { }\nexport const _MatOptgroupMixinBase: CanDisableCtor & typeof MatOptgroupBase =\n    mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  styleUrls: ['optgroup.css'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n})\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n"],"names":["type","Component","args","selector","exportAs","inputs","template","styles","host","class","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","NgZone","ChangeDetectorRef","ViewportRuler","MatTabNav","propDecorators","backgroundColor","Input","MatTabLinkBase","_MatTabLinkMixinBase","mixinTabIndex","mixinDisableRipple","mixinDisabled","_this","_super","call","this","_tabNavBar","_elementRef","_focusMonitor","_tabLinkRipple","setupTriggerEvents","nativeElement","tabIndex","parseInt","globalOptions","_ripplesGloballyDisabled","disabled","terminateOnPointerUp","animation","monitor","get","_isActive","value","updateActiveLink","enumerable","configurable","stopMonitoring","MatTabLink","decorators","Directive","[attr.aria-current]","[attr.aria-disabled]","[attr.tabIndex]","[class.mat-tab-disabled]","[class.mat-tab-label-active]","Platform","undefined","Optional","Inject","MAT_RIPPLE_GLOBAL_OPTIONS","String","Attribute","FocusMonitor","NgModule","imports","CommonModule","MatCommonModule","PortalModule","MatRippleModule","ObserversModule","A11yModule","exports","MatTabGroup","MatTabLabel","MatTab","MatTabContent","declarations","MatInkBar","MatTabLabelWrapper","MatTabBody","MatTabBodyPortal","MatTabHeader","MatTabsModule","MatToolbarBase","_MatToolbarMixinBase","mixinColor","MatToolbarRow","MatToolbar","elementRef","_platform","document","_document","tslib_1.__extends","prototype","ngAfterViewInit","isDevMode","isBrowser","_checkToolbarMixedModes","_toolbarRows","changes","subscribe","length","Array","from","childNodes","filter","node","classList","contains","nodeType","COMMENT_NODE","some","textContent","trim","throwToolbarMixedModesError","[class.mat-toolbar-multiple-rows]","[class.mat-toolbar-single-row]","DOCUMENT","MatToolbarModule","MatTreeNodeOutlet","viewContainer","ViewContainerRef","_CdkTreeNodeDef","CdkTreeNodeDef","_MatTreeNodeMixinBase","CdkTreeNode","_MatNestedTreeNodeMixinBase","CdkNestedTreeNode","MatTreeNode","_tree","role","Number","[attr.aria-expanded]","[attr.aria-level]","[attr.role]","providers","provide","useExisting","ElementRef","CdkTree","MatTreeNodeDef","data","MatNestedTreeNode","_differs","ngAfterContentInit","ngOnDestroy","IterableDiffers","nodeOutlet","ContentChildren","_CdkTreeNodePadding","CdkTreeNodePadding","MatTreeNodePadding","level","indent","_CdkTree","MatTree","_CdkTreeNodeToggle","CdkTreeNodeToggle","recursive","MatTreeNodeToggle","(click)","MAT_TREE_DIRECTIVES","CdkTreeModule","MatTreeModule","MatTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","_flattenNode","resultNodes","parentMap","flatNode","push","childrenNodes","isArray","_flattenChildren","pipe","take","children","forEach","child","index","childParentMap","slice","flattenNodes","structuredData","expandFlattenedNodes","nodes","treeControl","results","currentExpand","expand","i","isExpanded","MatTreeFlatDataSource","treeFlattener","initialData","_flattenedData","BehaviorSubject","_expandedData","_data","Object","defineProperty","next","dataNodes","connect","collectionViewer","viewChange","expansionModel","onChange","merge","apply","map","disconnect","DataSource","MatTreeNestedDataSource","VERSION","Version","SELECT_PANEL_PADDING_X","CdkFooterRowDef","MatFooterRowDef","_CdkFooterRowDef","MatRowDef","CdkRowDef","_CdkRowDef","MatHeaderRow","CDK_ROW_TEMPLATE","CdkHeaderRow","arguments","CdkFooterRow","MatFooterRow","MatRow","CdkRow","EXPORTED_DECLARATIONS","MatTable","MatHeaderCellDef","MatHeaderRowDef","MatColumnDef","MatCellDef","MatFooterCellDef","MatHeaderCell","MatCell","MatFooterCell","CdkTableModule","MatTableModule","MAX_SAFE_INTEGER","MatTableDataSource","_renderData","_filter","_renderChangesSubscription","Subscription","EMPTY","sortingDataAccessor","sortHeaderId","_isNumberValue","numberValue","sortData","sort","active","direction","a","b","valueA","valueB","comparatorResult","filterPredicate","dataStr","keys","reduce","currentTerm","key","toLowerCase","transformedFilter","indexOf","_updateChangeSubscription","_sort","_paginator","paginator","sortChange","initialized","observableOf","pageChange","page","dataStream","filteredData","combineLatest","_a","_filterData","orderedData","_orderData","paginatedData","_pageData","unsubscribe","obj","_updatePaginator","startIndex","pageIndex","pageSize","splice","filteredDataLength","Promise","resolve","then","lastPageIndex","Math","ceil","min","_MAT_INK_BAR_POSITIONER","InjectionToken","providedIn","factory","_MAT_INK_BAR_POSITIONER_FACTORY","_ngZone","_inkBarPositioner","alignToElement","element","show","requestAnimationFrame","runOutsideAngular","_setStyles","style","visibility","hide","positions","inkBar","left","width","TemplateRef","_CdkPortal","CdkPortal","MatTabBase","_MatTabMixinBase","_viewContainerRef","textLabel","_contentPortal","_stateChanges","Subject","position","origin","isActive","ngOnChanges","hasOwnProperty","complete","ngOnInit","TemplatePortal","_explicitContent","_implicitContent","ViewChild","ariaLabel","ariaLabelledby","matTabsAnimations","translateTab","trigger","state","transform","minHeight","transition","animate","componentFactoryResolver","viewContainerRef","_host","_centeringSub","_leavingSub","_beforeCentering","startWith","_isCenterPosition","_position","isCentering","hasAttached","attach","_content","_afterLeavingCenter","detach","ComponentFactoryResolver","forwardRef","CdkPortalOutlet","_dir","changeDetectorRef","_dirChangeSubscription","_onCentering","EventEmitter","_onCentered","animationDuration","change","dir","_computePositionAnimationState","markForCheck","_positionIndex","_computePositionFromOrigin","_onTranslateTabStarted","e","toState","emit","clientHeight","_onTranslateTabComplete","fromState","_getLayoutDirection","animations","Output","_portalHost","PortalHostDirective","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","focus","getOffsetLeft","offsetLeft","getOffsetWidth","offsetWidth","MatTabHeaderBase","_MatTabHeaderMixinBase","_changeDetectorRef","_viewportRuler","_scrollDistance","_selectedIndexChanged","_destroyed","_showPaginationControls","_disableScrollAfter","_disableScrollBefore","_selectedIndex","selectFocusedIndex","indexFocused","coerceNumberProperty","_keyManager","updateActiveItemIndex","ngAfterContentChecked","_tabLabelCount","_labelWrappers","_updatePagination","_scrollToLabel","_checkScrollingControls","_alignInkBarToSelectedTab","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","event","keyCode","HOME","setFirstItemActive","preventDefault","END","setLastItemActive","ENTER","SPACE","focusIndex","onKeydown","dirChange","resize","realign","FocusKeyManager","withHorizontalOrientation","withWrap","updateActiveItem","takeUntil","newFocusIndex","_setTabFocus","_onContentChanges","zoneCallback","run","_checkPaginationEnabled","_isValidIndex","setActiveItem","tab","toArray","containerEl","_tabListContainer","scrollLeft","scrollWidth","scrollDistance","translateX","_tabList","v","max","_getMaxScrollDistance","_scrollHeader","scrollDir","viewLength","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","beforeVisiblePos","afterVisiblePos","isEnabled","selectedLabelWrapper","selectedIndex","_inkBar","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","Directionality","nextId","MatTabChangeEvent","MAT_TABS_CONFIG","MatTabGroupBase","_MatTabGroupMixinBase","defaultConfig","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","_tabLabelSubscription","_dynamicHeight","headerPosition","selectedIndexChange","focusChange","animationDone","selectedTabChange","_groupId","coerceBooleanProperty","_backgroundColor","remove","add","indexToSelect","_clampTabIndex","isFirstRun_1","_createChangeEvent","_tabs","_subscribeToTabLabels","tabs","realignInkBar","_tabHeader","_focusChanged","_getTabLabelId","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","height","offsetHeight","_removeTabBodyWrapperHeight","_handleClick","tabHeader","idx","_getTabIndex","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","dynamicHeight","MatTabNavBase","_MatTabNavMixinBase","_onDestroy","_activeLinkChanged","_alignInkBar","activeTab","_tabLinks","find","_activeLinkElement","arrowPosition","SORT_ANIMATION_TRANSITION","keyframes","allowChildren","query","animateChild","optional","sortButtonLabel","id","Injectable","MatSortHeaderIntl","MAT_SORT_HEADER_INTL_PROVIDER","deps","SkipSelf","useFactory","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","MatSortHeaderBase","_MatSortHeaderMixinBase","MatSortHeader","_intl","_columnDef","_showIndicatorHint","_arrowDirection","_disableViewStateAnimation","getSortHeaderNotContainedWithinSortError","_rerenderSubscription","_isSorted","_updateArrowDirection","_viewState","_setAnimationTransitionState","_disableClear","name","register","deregister","_setIndicatorHintVisible","visible","_isDisabled","viewState","_getArrowDirectionState","_getArrowViewState","start","_getAriaSortAttribute","(mouseenter)","(longpress)","(mouseleave)","[attr.aria-sort]","[class.mat-sort-header-disabled]","matSortAnimations","indicator","leftPointer","rightPointer","arrowOpacity","MatSort","disableClear","MatSortModule","_CdkStepLabel","CdkStepLabel","MatStepLabel","optionalLabel","MatStepperIntl","MAT_STEPPER_INTL_PROVIDER","MAT_STEPPER_INTL_PROVIDER_FACTORY","MatStepHeader","_element","_intlSubscription","_stringLabel","label","_templateLabel","_getHostElement","_getIconContext","errorMessage","iconOverrides","selected","matStepperAnimations","horizontalStepTransition","verticalStepTransition","MatStepperIcon","templateRef","_CdkStepper","CdkStepper","MatStep","stepper","_errorStateMatcher","stepperOptions","isErrorState","control","form","originalErrorState","customErrorState","invalid","interacted","ErrorStateMatcher","MAT_STEPPER_GLOBAL_OPTIONS","MatStepper","_icons","_iconOverrides","_steps","_stateChanged","MatHorizontalStepper","[class.mat-stepper-label-position-end]","[class.mat-stepper-label-position-bottom]","aria-orientation","labelPosition","MatVerticalStepper","_orientation","ctorParameters","_CdkStepperNext","CdkStepperNext","_CdkStepperPrevious","CdkStepperPrevious","MatStepperNext","[type]","MatStepperPrevious","MatButtonModule","CdkStepperModule","MatIconModule","MatStepperModule","_CdkTable","CdkTable","stickyCssClass","CDK_TABLE_TEMPLATE","_CdkCellDef","CdkCellDef","_CdkHeaderCellDef","CdkHeaderCellDef","_CdkFooterCellDef","CdkFooterCellDef","CdkColumnDef","sticky","stickyEnd","columnDef","cssClassFriendlyName","CdkHeaderCell","CdkFooterCell","CdkCell","_CdkHeaderRowDef","CdkHeaderRowDef","MatSlider","_thumbLabel","_tickInterval","_value","_min","_roundToDecimal","parseFloat","toFixed","_percent","_calculatePercentage","_vertical","displayWith","_focusHostElement","blur","_blurHostElement","_clamp","vertical","invert","percent","_isMinValue","thumbLabel","axis","scale","_shouldInvertMouseCoords","_thumbGap","_getDirection","_tickIntervalPercent","tickSize","backgroundSize","sign","rotate","_invertAxis","detectChanges","_onMouseenter","_sliderDimensions","_getSliderDimensions","_updateTickIntervalPercent","_onMousedown","oldValue","_isSliding","_updateValueFromPosition","x","clientX","y","clientY","_emitInputEvent","_emitChangeEvent","_onSlide","_onSlideStart","center","_valueOnSlideStart","_onSlideEnd","_onFocus","_onBlur","onTouched","_onKeydown","PAGE_UP","_increment","PAGE_DOWN","LEFT_ARROW","UP_ARROW","RIGHT_ARROW","DOWN_ARROW","_onKeyup","numSteps","step","pos","offset","top","size","posComponent","exactValue","_calculateValue","closestValue","round","_controlValueAccessorChangeFn","valueChange","input","tickInterval","trackSize","pixelsPerStep","stepsPerTick","pixelsPerTick","MatSliderChange","source","percentage","_sliderWrapper","getBoundingClientRect","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","MAT_SLIDER_VALUE_ACCESSOR","(focus)","(blur)","(mousedown)","(keydown)","(keyup)","(slide)","(slideend)","(slidestart)","[tabIndex]","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[attr.aria-orientation]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[class.mat-slider-axis-inverted]","[class.mat-slider-sliding]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","[class._mat-animation-noopable]","ANIMATION_MODULE_TYPE","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MatSliderModule","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","dismiss","_onExit","_finishDismiss","closed","exit","clearTimeout","_durationTimeoutId","dismissWithAction","closeWithAction","_dismissAfter","duration","setTimeout","_open","dispose","dismissedByAction","afterDismissed","asObservable","afterOpened","_onEnter","MAT_SNACK_BAR_DATA","MatSnackBarConfig","politeness","announcementMessage","horizontalPosition","verticalPosition","SimpleSnackBar","snackBarRef","action","matSnackBarAnimations","snackBarState","opacity","MatSnackBarContainer","snackBarConfig","_animationState","attachComponentPortal","portal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","attachTemplatePortal","onAnimationEnd","_completeExit","onEnter_1","enter","onMicrotaskEmpty","panelClasses","panelClass","cssClass","Error","[@state]","(@state.done)","OverlayModule","entryComponents","MatSnackBarModule","MAT_SNACK_BAR_DEFAULT_OPTIONS","MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","openFromComponent","component","config","_attach","openFromTemplate","open","message","_config","tslib_1.__assign","_attachSnackBarContainer","overlayRef","userInjector","injector","PortalInjector","WeakMap","containerPortal","ComponentPortal","containerRef","instance","content","userConfig","_createOverlay","container","$implicit","_createInjector","contentRef","observe","Breakpoints","Handset","detachments","matches","overlayElement","_animateSnackBar","announce","overlayConfig","OverlayConfig","positionStrategy","global","isRtl","isLeft","isRight","right","centerHorizontally","bottom","create","Overlay","LiveAnnouncer","Injector","BreakpointObserver","MatSortBase","_MatSortMixinBase","mixinInitialized","sortables","Map","_direction","getSortInvalidDirectionError","sortable","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","set","delete","getNextSortDirection","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","_markInitialized","AnimationDurations","ENTERING","AnimationCurves","STANDARD_CURVE","_focusTrapFactory","_doc","_elementFocusedBeforeDrawerWasOpened","_mode","_disableClose","_autoFocus","openedChange","opened","_isFocusTrapEnabled","_focusTrap","_trapFocus","_restoreFocus","close","stopPropagation","_opened","MatDrawer","onPositionChanged","_modeChanged","mode","focusInitialElementWhenReady","hasMovedFocus","activeEl","activeElement","HTMLElement","focusVia","_openedVia","enabled","destroy","_animationStarted","_animationEnd","isOpen","openedVia","_enableAnimations","matDrawerAnimations","transformDrawer","[@transform]","(@transform.start)","(@transform.done)","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","_openedStream","openedStart","_closedStream","closedStart","_animationMode","backdropClick","_doCheckSubject","_autosize","defaultAutosize","MatDrawerContainer","_backdropOverride","_drawers","drawer","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","_isDrawerOpen","_start","_end","_updateContentMargins","debounceTime","ngDoCheck","_setContainerClass","throwMatDuplicatedDrawerError","_right","_left","_closeModalDrawer","disableClose","_canHaveBackdrop","_isShowingBackdrop","_width","_contentMarginChanges","_contentMargins","[class.mat-drawer-container-explicit-backdrop]","ContentChild","MatDrawerContent","_userContent","autosize","MatSidenavContent","scrollDispatcher","ngZone","[style.margin-left.px]","[style.margin-right.px]","ScrollDispatcher","MatSidenav","_fixedBottomGap","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","fixedInViewport","fixedTopGap","MatSidenavContainer","MatSidenavModule","ScrollingModule","PlatformModule","MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS","disableToggleValue","disableDragValue","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlideToggle","multi","MatSlideToggleChange","checked","MatSlideToggleBase","_MatSlideToggleMixinBase","defaults","_","_uniqueId","_required","_checked","_dragging","toggleChange","dragChange","focusOrigin","_onChangeEvent","_inputElement","_onInputClick","toggle","_getDragPercentage","distance","_thumbBarWidth","_previousChecked","_onDragStart","thumbEl","_thumbEl","_thumbBarEl","clientWidth","_onDrag","_dragPercentage","deltaX","dragX","_onDragEnd","newCheckedValue","_onLabelTextChange","[id]","[attr.tabindex]","[class.mat-checked]","[class.mat-disabled]","[class.mat-slide-toggle-label-before]","required","MatSlideToggleModule","MatSliderBase","_MatSliderMixinBase","_invert","_max","_step","toString","split","pop","MAT_PROGRESS_BAR_LOCATION","MatProgressBar","_primaryValueBar","animationEnd","MatProgressBarModule","BASE_SIZE","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY","INDETERMINATE_ANIMATION_TEMPLATE","MatProgressSpinner","platform","animationMode","_fallbackAnimation","_noopAnimations","_forceAnimations","_diameter","EDGE","TRIDENT","diameter","strokeWidth","animationClass","diameters","_attachStyleNode","_strokeWidth","newValue","viewBox","_circleRadius","PI","_strokeCircumference","styleTag","createElement","head","appendChild","sheet","insertRule","_getAnimationText","replace","Set","[style.width.px]","[style.height.px]","[attr.mode]","MatSpinner","MatProgressSpinnerModule","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MatRadioGroup","MatRadioChange","MatRadioGroupBase","_MatRadioGroupMixinBase","_changeDetector","_name","_selected","_isInitialized","_labelPosition","_disabled","_updateRadioButtonNames","_markRadiosForCheck","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_touch","_radios","radio","isAlreadySelected","_markForCheck","MatRadioButton","descendants","MatRadioButtonBase","_MatRadioButtonMixinBase","radioGroup","_radioDispatcher","_removeUniqueSelectionListener","listen","newCheckedState","notify","newDisabledState","_isRippleDisabled","disableRipple","_onInputChange","groupValueChanged","[class.mat-radio-checked]","[class.mat-radio-disabled]","[attr.id]","UniqueSelectionDispatcher","ariaDescribedby","MatRadioModule","box-shadow","MAT_DRAWER_DEFAULT_AUTOSIZE","MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY","_container","itemHeight","_getItemHeight","items","_getItemCount","panelHeight","scrollContainerHeight","maxScroll","selectedOptionOffset","empty","_getOptionIndex","_selectionModel","_countGroupLabelsBeforeOption","options","optionGroups","scrollBuffer","_scrollTop","_calculateOverlayScroll","_offsetY","_calculateOverlayOffsetY","_checkOverlayWithinViewport","MatSelect","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","_getAriaLabel","placeholder","_getAriaLabelledby","_parentFormField","_hasFloatingLabel","_labelId","_getAriaActiveDescendant","panelOpen","activeItem","_calculateOverlayOffsetX","offsetX","overlayRect","overlayDir","viewportSize","getViewportSize","_isRtl","paddingWidth","multiple","SELECT_MULTIPLE_PANEL_PADDING_X","first","group","leftOverflow","rightOverflow","updatePosition","optionOffsetFromPanelTop","optionHeightAdjustment","_triggerRect","maxOptionsDisplayed","floor","_disableOptionCentering","firstDisplayedIndex","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_transformOrigin","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","_triggerFontSize","setDescribedByIds","ids","_ariaDescribedby","join","onContainerClick","_panelOpen","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","[class.mat-select-empty]","matSelectAnimations","transformPanel","MatFormFieldControl","MAT_OPTION_PARENT_COMPONENT","NgForm","FormGroupDirective","MatFormField","NgControl","Self","MAT_SELECT_SCROLL_STRATEGY","CdkConnectedOverlay","MatOption","MatOptgroup","customTrigger","MatSelectTrigger","disableOptionCentering","compareWith","errorStateMatcher","sortComparator","selectionChange","MatOptionModule","MatFormFieldModule","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","MatSelectModule","matTooltipAnimations","tooltipState","SCROLL_THROTTLE_MS","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY","MAT_TOOLTIP_DEFAULT_OPTIONS","MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY","MatTooltip","_scrollDispatcher","_ariaDescriber","scrollStrategy","_defaultOptions","showDelay","hideDelay","_message","_manualListeners","_scrollStrategy","elementStyle","IOS","ANDROID","listener","addEventListener","nodeName","webkitUserSelect","userSelect","msUserSelect","draggable","webkitUserDrag","_updatePosition","_tooltipInstance","removeDescription","_isTooltipVisible","_updateTooltipMessage","describe","_tooltipClass","_setTooltipClass","removeEventListener","clear","delay","_showTimeoutId","_hideTimeoutId","_detach","_portal","TooltipComponent","afterHidden","isVisible","ESCAPE","_handleTouchend","touchendHideDelay","strategy","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","scrollableAncestors","getAncestorScrollContainers","withScrollableContainers","positionChanges","scrollableViewProperties","isOverlayClipped","getConfig","_getOrigin","overlay","_getOverlayPosition","withPositions","main","fallback","originPosition","isLtr","originX","originY","getMatTooltipInvalidPositionError","_invertPosition","overlayPosition","overlayX","overlayY","tooltipClass","(touchend)","AriaDescriber","_visibility","_closeOnInteraction","_onHide","_isHandset","_animationStart","_animationDone","_handleBodyInteraction","aria-hidden","MatTooltipModule","itemsPerPageLabel","nextPageLabel","previousPageLabel","firstPageLabel","lastPageLabel","getRangeLabel","MatPaginatorIntl","MAT_PAGINATOR_INTL_PROVIDER","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","PageEvent","MatPaginatorBase","_MatPaginatorBase","MatPaginator","_pageIndex","_length","_pageSizeOptions","_hidePageSize","_showFirstLastButtons","_intlChanges","_pageSize","_updateDisplayedPageSizeOptions","p","_initialized","nextPage","hasNextPage","previousPageIndex","_emitPageEvent","previousPage","hasPreviousPage","firstPage","lastPage","getNumberOfPages","maxPageIndex","_changePageSize","pageSizeOptions","_displayedPageSizeOptions","hidePageSize","showFirstLastButtons","MatPaginatorModule","MatProgressBarBase","_MatProgressBarMixinBase","MAT_PROGRESS_BAR_LOCATION_FACTORY","progressbarId","location","_isNoopAnimation","_bufferValue","_animationEndSubscription","path","getPathname","_rectangleFillValue","clamp","emitAnimationEnd","_primaryTransform","_bufferTransform","bufferValue","fromEvent","target","aria-valuemin","aria-valuemax","_attached","MatMenuContent","context","_template","_outlet","DomPortalOutlet","_componentFactoryResolver","_appRef","insertBefore","outletElement","isAttached","ApplicationRef","matMenuAnimations","transformMenu","fadeInItems","MAT_MENU_PANEL","MatMenuItemBase","_MatMenuItemMixinBase","MatMenuItem","_parentMenu","_hovered","_highlighted","_triggersSubmenu","addItem","removeItem","_checkDisabled","_handleMouseEnter","getLabel","textNodeType","TEXT_NODE","output","length_1","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","MAT_MENU_DEFAULT_OPTIONS","MAT_MENU_DEFAULT_OPTIONS_FACTORY","MatMenu","_xPosition","xPosition","_yPosition","yPosition","_items","_itemChanges","_tabSubscription","_classList","_panelAnimationState","backdropClass","_overlapTrigger","overlapTrigger","_hasBackdrop","hasBackdrop","throwMatMenuInvalidPositionX","setPositionClasses","throwMatMenuInvalidPositionY","classes","className","withTypeAhead","tabOut","switchMap","item","parentMenu","setFocusOrigin","focusFirstItem","lazyContent","onStable","resetActiveItem","setElevation","depth","newElevation","customElevation","c","startsWith","_previousElevation","posX","posY","_startAnimation","_resetAnimation","_onAnimationDone","_isAnimating","activeItemIndex","scrollTop","MAT_MENU_SCROLL_STRATEGY","MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_MENU_SCROLL_STRATEGY_FACTORY","MatMenuTrigger","_menuItemInstance","_menuOpen","_closeSubscription","_hoverSubscription","_openedBy","menuOpened","onMenuOpen","menuClosed","onMenuClose","triggersSubmenu","menu","_checkMenu","reason","_destroyMenu","_handleHover","_cleanUpSubscriptions","toggleMenu","closeMenu","openMenu","_setPosition","menuData","_menuClosingActions","_initMenu","menuOpen","_resetMenu","_setMenuElevation","_setIsMenuOpen","throwMatMenuMissingError","_getOverlayConfig","_subscribeToPositions","keydownEvents","withLockedPosition","connectionPair","originFallbackX","_b","overlayFallbackY","_c","originFallbackY","_d","overlayFallbackX","offsetY","backdrop","parentClose","hover","_handleMousedown","isFakeMousedownFromScreenReader","button","asapScheduler","aria-haspopup","(touchstart)","_deprecatedMatMenuTriggerFor","MatMenuModule","minWidth","fadeInContent","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinErrorState","scrollStrategyFactory","_multiple","_compareWith","o1","o2","_uid","_destroy","_onChange","_onTouched","_optionIds","_panelDoneAnimatingStream","_positions","_focused","controlType","optionSelectionChanges","defer","option","onSelectionChange","o","valueAccessor","_scrollStrategyFactory","_placeholder","stateChanges","getMatSelectDynamicMultipleError","getMatSelectNonFunctionValueError","_initializeSelection","_id","SelectionModel","distinctUntilChanged","_initKeyManager","added","select","removed","deselect","_resetOptions","updateErrorState","getComputedStyle","fontSize","_calculateOverlayPosition","_highlightCorrectOption","_setSelectionByValue","selectedOptions","viewValue","reverse","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","isOpenKey","manager","altKey","A","ctrlKey","hasDeselectedOptions_1","opt","previouslyFocusedIndex","shiftKey","_selectViaInteraction","_onAttached","positionChange","_setPseudoCheckboxPaddingSize","panel","_getPanelTheme","color","pseudoCheckbox","querySelector","isEmpty","getMatSelectNonArrayValueError","currentValue","_selectValue","_sortValues","correspondingOption","error","console","warn","ActiveDescendantKeyManager","withVerticalOrientation","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","isUserInput","_setOptionIds","wasSelected","isSelected","_propagateChanges","options_1","fallbackValue","valueToEmit","activeOptionIndex","labelCount","_getOptionScrollPosition","result","current","MAT_SELECTION_LIST_VALUE_ACCESSOR","MatSelectionList","MatListOption","_MatSelectionListMixinBase","MatLineModule","MatPseudoCheckboxModule","MatList","MatNavList","MatListItem","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatListSubheaderCssMatStyler","MatDividerModule","MatListModule","setLines","_lines","[class.mat-list-item-avatar]","[class.mat-list-item-with-avatar]","_icon","MatSelectionListBase","MatListOptionBase","_MatListOptionMixinBase","MatSelectionListChange","selectionList","_hasFocus","checkboxPosition","_setSelected","_reportValueChange","hadFocus","newActiveItem","_removeOptionFromList","_text","_handleFocus","_setFocusedOption","_handleBlur","tabindex","[class.mat-list-item-disabled]","[attr.aria-selected]","MatLine","skipPredicate","_tempValues","_setOptionsFromValues","_modelChanges","_i","optionIndex","previousFocusIndex","_toggleFocusedOption","selectAll","deselectAll","_getSelectedOptionValues","values","focusedOption","focusedIndex","hasChanged","aria-multiselectable","_MatListMixinBase","_navList","_isNavList","hasAttribute","MatGridTile","MatGridTileText","MatGridAvatarCssMatStyler","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","TileCoordinator","columnIndex","rowIndex","lastRowMax","tracker","rowCount","update","numColumns","tiles","fill","tile","_trackTile","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","rowspan","row","col","cssCalcAllowedValue","TileStyler","_rows","_rowspan","init","gutterSize","cols","_gutterSize","normalizeUnits","_cols","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","_setStyle","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","test","reset","list","_setListStyle","_tiles","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","FitTileStyler","gutterHeightPerTile","MatGridList","_gutter","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","rowHeight","_tileStyler","_tileCoordinator","_gridList","MAT_GRID_LIST","MatGridListModule","SvgIconConfig","svgElement","url","MatIconRegistry","_httpClient","_sanitizer","_svgIconConfigs","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","iconName","addSvgIconInNamespace","addSvgIconLiteral","literal","addSvgIconLiteralInNamespace","namespace","_addSvgIconConfig","sanitizedLiteral","sanitize","SecurityContext","HTML","getMatIconFailedToSanitizeLiteralError","_createSvgElementForSingleIcon","addSvgIconSet","addSvgIconSetInNamespace","addSvgIconSetLiteral","addSvgIconSetLiteralInNamespace","_addSvgIconSetConfig","_svgElementFromString","registerFontClassAlias","alias","classNameForFontAlias","setDefaultFontSetClass","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","RESOURCE_URL","getMatIconFailedToSanitizeUrlError","cachedIcon","cloneSvg","_loadSvgIconFromConfig","tap","svg","getNamedSvgIcon","iconKey","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","observableThrow","getMatIconNameNotFoundError","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","catchError","err","forkJoin","foundIcon","_extractSvgIconFromSet","_fetchUrl","svgText","responseText","_setSvgAttributes","iconSet","iconSource","iconElement","cloneNode","removeAttribute","_toSvgElement","str","div","innerHTML","ELEMENT_NODE","setAttribute","getMatIconNoHttpProviderError","inProgressFetch","req","responseType","finalize","share","configNamespace","HttpClient","DomSanitizer","ICON_REGISTRY_PROVIDER","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","_MatIconMixinBase","MAT_ICON_LOCATION","MAT_ICON_LOCATION_FACTORY","funcIriAttributes","ɵ0","attr","funcIriAttributeSelector","funcIriPattern","MatIcon","_iconRegistry","ariaHidden","_location","_inline","inline","_fontSet","_cleanupFontValue","_fontIcon","_splitIconName","parts","svgIcon","_setSvgElement","log","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","ngAfterViewChecked","cachedElements","_elementsWithExternalReferences","newPath","_previousPath","_prependPathToReferences","styleTags","querySelectorAll","_cacheChildrenWithExternalReferences","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","_previousFontSetClass","fontIcon","_previousFontIconClass","elements","attrs","elementsWithFuncIri","elementWithReference","getAttribute","match","attributes","[class.mat-icon-inline]","MatListBase","MatListItemBase","_MatListItemMixinBase","createMissingDateImplError","MatDatepicker","_datepickerInput","_getThemePalette","_disabledChange","_inputSubscription","_popupRef","_popupComponentRef","_dateAdapter","sameDate","_selectedChanged","date","_valueChange","_focusedElementBeforeOpen","touchUi","_openAsDialog","_openAsPopup","openedStream","_dialogRef","_calendarPortal","completeClose","closedStream","_dialog","MatDatepickerContent","afterClosed","componentInstance","datepicker","_setColor","_createPopup","MatDialog","MAT_DATEPICKER_SCROLL_STRATEGY","DateAdapter","calendarHeaderComponent","startAt","yearSelected","monthSelected","MAT_DATEPICKER_VALUE_ACCESSOR","MatDatepickerInput","MAT_DATEPICKER_VALIDATORS","NG_VALIDATORS","MatDatepickerInputEvent","targetElement","_dateFormats","_formField","dateChange","dateInput","_cvaOnChange","_validatorOnChange","_datepickerSubscription","_localeSubscription","_parseValidator","_lastValueValid","matDatepickerParse","text","_minValidator","controlValue","_getValidDateOrNull","deserialize","compareDate","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_filterValidator","_dateFilter","matDatepickerFilter","_validator","Validators","compose","localeChanges","_datepicker","_registerInput","isValid","oldDate","_formatValue","registerOnValidatorChange","validate","getPopupConnectionElementRef","getConnectedOverlayOrigin","isAltDownArrow","readOnly","_onInput","parse","format","display","isDateInstance","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","MAT_DATE_FORMATS","matDatepicker","MatDatepickerToggleIcon","MatDatepickerToggle","defaultTabIndex","parsedTabIndex","_watchStateChanges","datepickerDisabled","inputDisabled","datepickerToggled","[class.mat-accent]","[class.mat-warn]","_customIcon","MatDialogModule","MatCalendar","MatCalendarBody","MatMonthView","MatYearView","MatMultiYearView","MatCalendarHeader","MatDatepickerIntl","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER","MatDatepickerModule","_inset","MatDivider","[class.mat-divider-vertical]","[class.mat-divider-horizontal]","[class.mat-divider-inset]","MAT_ACCORDION","matExpansionAnimations","indicatorRotate","expansionHeaderHeight","params","collapsedHeight","expandedHeight","bodyExpansion","MatExpansionPanelContent","_CdkAccordionItem","CdkAccordionItem","uniqueId","MatExpansionPanel","accordion","_uniqueSelectionDispatcher","_hideToggle","afterExpand","afterCollapse","_inputChanges","_headerId","_bodyAnimationDone","hideToggle","_hasSpacing","expanded","displayMode","_getExpandedState","_lazyContent","_containsFocus","_body","focusedElement","bodyElement","outputs","[class.mat-expanded]","[class.mat-expansion-panel-spacing]","MatExpansionPanelActionRow","MatExpansionPanelHeader","_parentChangeSubscription","accordionHideToggleChange","_handleHeaderFocus","_toggle","_isExpanded","_getPanelId","_showToggle","_keydown","_handleHeaderKeydown","[attr.aria-controls]","[@expansionHeight]","MatExpansionPanelDescription","MatExpansionPanelTitle","MatAccordion","_headers","header","CdkAccordion","CdkAccordionModule","MatExpansionModule","_colspan","property","selectedValue","labelMinRequiredCells","numCols","activeCell","cellAspectRatio","selectedValueChange","selectedChange","_userSelection","activeDateChange","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","_weekdays","concat","_activeDate","today","oldActiveDate","validDate","clampDate","minDate","maxDate","_hasSameMonthAndYear","_init","_selectedDate","_getDateInCurrentMonth","_minDate","_maxDate","_dateSelected","selectedYear","getYear","activeDate","selectedMonth","getMonth","selectedDate","createDate","_handleCalendarBodyKeydown","addCalendarDays","getDate","getNumDaysInMonth","addCalendarYears","addCalendarMonths","dateFilter","_focusActiveCell","_todayDate","_monthLabel","getMonthNames","toLocaleUpperCase","firstOfMonth","_firstWeekOffset","getDayOfWeek","_createWeekCells","_matCalendarBody","daysInMonth","dateNames","getDateNames","_weeks","cell","_shouldEnableDate","dateA11yLabel","MatCalendarCell","d1","d2","_selectedYear","_todayYear","activeYear","activeOffset","_years","year","_createCellForYear","_yearSelected","month","yearsPerPage","_getActiveCell","yearName","getYearName","_shouldEnableYear","firstOfYear","_selectedMonth","_getMonthInCurrentYear","_monthSelected","normalizedDate","_todayMonth","_yearLabel","monthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","_shouldEnableMonth","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","maxYear","maxMonth","minYear","minMonth","calendar","currentView","monthYearLabel","switchToMultiYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","multi-year","prevMultiYearLabel","nextMonthLabel","nextYearLabel","nextMultiYearLabel","currentPeriodClicked","previousClicked","nextClicked","previousEnabled","_isSameView","nextEnabled","date1","date2","_moveFocusOnNextTick","_currentView","startView","focusActiveCell","view","_getCurrentViewComponent","monthView","headerComponent","yearView","multiYearView","matDatepickerAnimations","fadeInCalendar","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY","MatDatepickerContentBase","_MatDatepickerContentMixinBase","_calendar","[@transformPanel]","[class.mat-datepicker-content-touch]","MatChipList","ariaOrientation","selectable","chips","MatChip","MatChipInput","focused","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","registerInput","_emitChipEnd","_blur","addOnBlur","_focus","_isSeparatorKey","separators","[attr.placeholder]","MAT_CHIPS_DEFAULT_OPTIONS","chipList","CHIP_DECLARATIONS","MatChipRemove","MatChipAvatar","MatChipTrailingIcon","useValue","MatChipsModule","MatDialogConfig","maxWidth","ariaDescribedBy","autoFocus","restoreFocus","closeOnNavigation","animationBody","matDialogAnimations","dialogContainer","slideDialog","MatDialogContainer","_elementFocusedBeforeDialogWasOpened","_state","_animationStateChanged","_ariaLabelledBy","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","toFocus","_onAnimationStart","_startExitAnimation","aria-modal","[@dialogContainer]","(@dialogContainer.start)","(@dialogContainer.done)","MatDialogRef","_containerInstance","_afterClosed","_beforeClosed","phaseName","_result","dialogResult","detachBackdrop","beforeClosed","_getPositionStrategy","centerVertically","updateSize","afterOpen","beforeClose","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenedAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","componentOrTemplateRef","_applyConfigDefaults","getDialogById","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","_closeDialogs","dialog","dialogConfig","maxHeight","disposeOnNavigation","injectionTokens","previousValue","overlayContainer","getContainerElement","parentElement","siblings","sibling","dialogs","Location","OverlayContainer","dialogElementUid","MatDialogClose","getClosestDialog","proxiedChange","_matDialogClose","MatDialogTitle","MatDialogContent","MatDialogActions","_CdkTextareaAutosize","CdkTextareaAutosize","MatTextareaAutosize","minRows","maxRows","rows","matAutosizeMinRows","matAutosizeMaxRows","matAutosize","matTextareaAutosize","MAT_INPUT_INVALID_TYPES","MatInputBase","_MatInputMixinBase","MatInput","inputValueAccessor","_autofillMonitor","_isServer","_isNativeSelect","autofilled","_type","_readonly","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","el","selectionStart","selectionEnd","setSelectionRange","_validateType","_isTextarea","isAutofilled","_dirtyCheckNativeValue","isFocused","readonly","getMatInputUnsupportedTypeError","_isNeverEmpty","_isBadInput","validity","badInput","selectElement","[class.mat-input-server]","[required]","[attr.readonly]","AutofillMonitor","TextFieldModule","MatInputModule","calendarLabel","openCalendarLabel","displayValue","_cellClicked","_isActiveCell","cellNumber","_firstRowOffset","aria-readonly","todayValue","MatCheckboxChange","MatCheckboxBase","_MatCheckboxMixinBase","MatCheckbox","_clickAction","indeterminateChange","_currentAnimationClass","_currentCheckState","TransitionCheckState","Init","_indeterminate","_calculateRippleRadius","changed","_transitionCheckState","Indeterminate","Checked","Unchecked","_getAriaChecked","indeterminate","newState","oldState","_getAnimationClassForCheckStateTransition","animationClass_1","_onInteractionEvent","animSuffix","calculatedRippleRadius","rippleWidth","ripple","radius","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MAT_CHECKBOX_CLICK_ACTION","MatRipple","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","MatCheckboxModule","MatChipSelectionChange","MatChipBase","_MatChipMixinBase","CHIP_ATTRIBUTE_NAMES","rippleConfig","chipListSelectable","_selectable","_removable","destroyed","_addHostClassName","_chipRipple","RippleRenderer","coercedValue","_dispatchSelectionChange","CHIP_ATTRIBUTE_NAMES_1","tagName","chip","_removeTriggerEvents","selectViaInteraction","toggleSelected","removable","DELETE","BACKSPACE","[class.mat-chip-selected]","[class.mat-chip-with-avatar]","[class.mat-chip-with-trailing-icon]","[class.mat-chip-disabled]","avatar","trailingIcon","removeIcon","_parentChip","MatChipListBase","_MatChipListMixinBase","MatChipListChange","_lastDestroyedChipIndex","_tabIndex","_userTabIndex","_chipInput","_hasFocusedChip","_resetChips","_updateTabIndex","_updateFocusForDestroyedChips","_dropSubscriptions","inputElement","_originatesFromChip","_focusInput","_isInputEmpty","newChipIndex","_clearSelection","correspondingChip","skip","_markAsTouched","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","_chipRemoveSubscription","chipSelectionChanges","chipFocusChanges","chipIndex","chipBlurChanges","chipRemoveChanges","currentElement","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","[class.mat-chip-list-required]","MatButton","stopImmediatePropagation","MatAnchor","MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","MatButtonToggleGroupMultiple","_uniqueIdCounter","MatButtonToggleChange","defaultOptions","appearance","_buttonToggles","_syncButtonToggle","_isSelected","_isPrechecked","_rawValue","[class.mat-button-toggle-vertical]","[class.mat-button-toggle-group-appearance-standard]","MatButtonToggle","MatButtonToggleBase","_MatButtonToggleMixinBase","toggleGroup","_isSingleSelector","buttonToggleGroup","_appearance","_buttonElement","_onButtonClick","newChecked","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","[class.mat-button-toggle-appearance-standard]","MatButtonToggleModule","MatCardContent","MatCardTitle","MatCardSubtitle","align","[class.mat-card-actions-align-end]","MatCardActions","MatCardFooter","MatCardImage","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardXlImage","MatCardAvatar","MatCard","MatCardHeader","MatCardTitleGroup","MatCardModule","MatAutocomplete","_autoActiveFirstOption","_setVisibility","_setScrollTop","_getScrollTop","showPanel","_emitSelectEvent","MatAutocompleteSelectedEvent","optionSelected","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","autoActiveFirstOption","panelWidth","MatAutocompleteOrigin","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","_zone","_componentDestroyed","_autocompleteDisabled","_manuallyFloatingLabel","_viewportSubscription","_canOpenOnNextFocus","_closeKeyEventStream","_windowBlurHandler","autocompleteAttribute","_overlayAttached","optionSelections","autocomplete","window","_destroyPanel","openPanel","_attachOverlay","_floatLabel","closePanel","_resetLabel","_isOpen","_closingActionsSubscription","_getOutsideClickStream","MatOptionSelectionChange","clickTarget","formField","_setTriggerValue","activeOption","_resetActiveItem","prevActiveItem","TAB","_canOpen","_scrollToOption","_handleInput","_previousValue","shouldAnimate","floatLabel","_animateAndLockLabel","newScrollPosition","_subscribeToClosingActions","firstStable","optionChanges","_positionStrategy","reapplyLastPosition","panelClosingActions","_setValueAndClose","toDisplay","inputValue","_control","_clearPreviousSelectedOption","getMatAutocompleteMissingPanelError","_getPanelWidth","wasOpen","_getConnectedElement","withPush","connectedTo","_getHostWidth","[attr.autocomplete]","[attr.aria-autocomplete]","(focusin)","Host","autocompleteDisabled","MatAutocompleteModule","MatBadgeBase","_MatBadgeMixinBase","MatBadge","_renderer","_hasContent","_color","_overlap","val","_updateTextContent","_description","newDescription","_updateHostAriaDescription","_hidden","isAbove","isAfter","description","_badgeElement","_createBadgeElement","rootNode","badgeElement","oldDescription","colorPalette","[class.mat-badge-overlap]","[class.mat-badge-above]","[class.mat-badge-below]","[class.mat-badge-before]","[class.mat-badge-after]","[class.mat-badge-small]","[class.mat-badge-medium]","[class.mat-badge-large]","[class.mat-badge-hidden]","[class.mat-badge-disabled]","Renderer2","overlap","hidden","MatBadgeModule","MAT_BOTTOM_SHEET_DATA","MatBottomSheetConfig","matBottomSheetAnimations","bottomSheetState","COMPLEX","ACCELERATION_CURVE","EXITING","DECELERATION_CURVE","MatBottomSheetContainer","breakpointObserver","bottomSheetConfig","_elementFocusedBeforeOpened","_breakpointSubscription","Medium","Large","XLarge","_toggleClass","isMatched","_validatePortalAttached","_setPanelClass","(@state.start)","FocusTrapFactory","MatBottomSheetModule","MatBottomSheetRef","MAT_BOTTOM_SHEET_DEFAULT_OPTIONS","MatBottomSheet","_parentBottomSheet","_bottomSheetRefAtThisLevel","_openedBottomSheetRef","_attachContainer","ref","bottomSheetRef","scrollStrategies","block","DEFAULT_ROUND_BUTTON_COLOR","BUTTON_HOST_ATTRIBUTES","MatButtonBase","_MatButtonMixinBase","isRoundButton","_hasHostAttributes","isIconButton","BUTTON_HOST_ATTRIBUTES_1","attribute","_active","_emitSelectionChangeEvent","setActiveStyles","setInactiveStyles","_mostRecentViewValue","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]","MAT_LABEL_GLOBAL_OPTIONS","MatError","matFormFieldAnimations","transitionMessages","[class.mat-right]","MatHint","MatLabel","MatPlaceholder","MatPrefix","MatSuffix","MatFormFieldBase","_MatFormFieldMixinBase","MAT_FORM_FIELD_DEFAULT_OPTIONS","labelOptions","_defaults","_outlineGapCalculationNeeded","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_labelOptions","float","_animationsEnabled","_updateOutlineGapOnStable","_hideRequiredMarker","_processHints","_connectionContainerRef","_validateControlChild","_validatePlaceholders","_syncDescribedByIds","valueChanges","_prefixChildren","_suffixChildren","_hintChildren","_errorChildren","updateOutlineGap","_shouldForward","prop","_hasPlaceholder","_placeholderChild","_hasLabel","_labelChild","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_getDisplayedMessages","errorState","_label","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","hintLabel","getMatFormFieldDuplicatedHintError","startHint","endHint","getMatFormFieldMissingControlError","labelEl","startWidth","gapWidth","startEls","gapEls","containerStart","_getStartEnd","labelStart","labelWidth","outlineGapPadding","rect","[class.mat-form-field-appearance-standard]","[class.mat-form-field-appearance-fill]","[class.mat-form-field-appearance-outline]","[class.mat-form-field-appearance-legacy]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-form-field-autofilled]","[class.mat-focused]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","hideRequiredMarker","underlineRef","_inputContainerRef","_uniqueAutocompleteIdCounter","MatAutocompleteBase","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","__extends","d","__","constructor","extendStatics","MATERIAL_SANITY_CHECKS_FACTORY","base","class_1","defaultColor","_disableRipple","matcher","_pendingSubscribers","Observable","subscriber","_notifySubscriber","MAT_DATE_LOCALE_FACTORY","inject","LOCALE_ID","range","valueFunction","valuesArray","lines","setClass","isAdd","enforceStyleRecalculation","getPropertyValue","distanceToFurthestCorner","distX","distY","sqrt","optionsArray","groups","groupCounter","optionOffset","optionHeight","currentScrollPosition","reposition","MAT_DIALOG_SCROLL_STRATEGY_FACTORY","provider","exp","parentRegistry","httpClient","sanitizer","pathname","scrollThrottle","parentIntl","sortOrder","setPrototypeOf","__proto__","__assign","assign","s","n","SHARP_CURVE","MATERIAL_SANITY_CHECKS","_sanityChecksEnabled","_hammerLoader","_hasDoneGlobalChecks","_hasCheckedHammer","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","__karma__","jasmine","doctype","body","testElement","computedStyle","_checkHammerIsAvailable","BidiModule","Boolean","HAMMER_LOADER","MAT_DATE_LOCALE","MAT_DATE_LOCALE_PROVIDER","_localeChanges","setLocale","locale","second","firstValid","secondValid","SUPPORTS_INTL_API","Intl","DEFAULT_MONTH_NAMES","short","DEFAULT_DATE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","NativeDateAdapter","matDateLocale","useUtcForDisplay","_clampDate","getFullYear","getDay","dtf_1","DateTimeFormat","timeZone","_stripDirectionalityCharacters","_format","Date","dtf_2","day","dtf_3","weekday","dtf","_createDateWithOverflow","clone","displayFormat","setFullYear","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","isNaN","getTime","NaN","UTC","getHours","getMinutes","getSeconds","getMilliseconds","MAT_NATIVE_DATE_FORMATS","NativeDateModule","MatNativeDateModule","ShowOnDirtyErrorStateMatcher","dirty","submitted","touched","MAT_HAMMER_OPTIONS","ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES","ɵ1","noopHammerInstance","on","off","_hammerOptions","commonModule","events","buildHammer","hammer","Hammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","MatLineSetter","FADING_IN","VISIBLE","FADING_OUT","HIDDEN","RippleState","RippleRef","fadeOut","fadeOutRipple","defaultRippleAnimationConfig","enterDuration","exitDuration","ignoreMouseEventsTimeout","passiveEventOptions","normalizePassiveListenerOptions","passive","_target","_isPointerDown","_triggerEvents","_activeRipples","onMousedown","isFakeMousedown","isSyntheticEvent","_lastTouchStartEvent","now","rippleDisabled","fadeInRipple","onTouchStart","touches","changedTouches","onPointerUp","persistent","_containerElement","containerRect","_containerRect","animationConfig","centered","transitionDuration","rippleRef","_mostRecentTransientRipple","runTimeoutOutsideZone","isMostRecentTransientRipple","wasActive","rippleEl","fadeOutAll","_triggerElement","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","_trigger","launch","configOrX","[class.mat-ripple-unbounded]","unbounded","MatPseudoCheckbox","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter","[class.mat-optgroup-disabled]","_parent"],"mappings":"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"}