{"version":3,"file":"material.umd.min.js","sources":["../../src/lib/toolbar/toolbar.ts","../../src/lib/toolbar/toolbar-module.ts","../../src/lib/tree/outlet.ts","../../src/lib/tree/node.ts","../../src/lib/tree/padding.ts","../../src/lib/tree/tree.ts","../../src/lib/tree/toggle.ts","../../src/lib/tree/tree-module.ts","../../src/lib/tree/data-source/flat-data-source.ts","../../src/lib/tree/data-source/nested-data-source.ts","../../src/lib/version.ts","../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/core/testing/month-constants.ts","../../src/lib/expansion/expansion-animations.ts","../../src/lib/select/select.ts","../../src/lib/tooltip/tooltip.ts","../../src/lib/tabs/ink-bar.ts","../../src/lib/tabs/tab-label.ts","../../src/lib/tabs/tab-content.ts","../../src/lib/tabs/tab.ts","../../src/lib/tabs/tabs-animations.ts","../../src/lib/tabs/tab-body.ts","../../src/lib/tabs/tab-label-wrapper.ts","../../src/lib/tabs/tab-header.ts","../../src/lib/tabs/tab-group.ts","../../src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/lib/tabs/tabs-module.ts","../../src/lib/sort/sort-animations.ts","../../src/lib/sort/sort-header-intl.ts","../../src/lib/sort/sort-header.ts","../../src/lib/sort/sort-module.ts","../../src/lib/stepper/step-label.ts","../../src/lib/stepper/stepper-intl.ts","../../src/lib/stepper/step-header.ts","../../src/lib/stepper/stepper-animations.ts","../../src/lib/stepper/stepper-icon.ts","../../src/lib/stepper/stepper.ts","../../src/lib/stepper/stepper-button.ts","../../src/lib/stepper/stepper-module.ts","../../src/lib/table/table.ts","../../src/lib/table/cell.ts","../../src/lib/table/row.ts","../../src/lib/table/table-module.ts","../../src/lib/table/table-data-source.ts","../../src/lib/slider/slider.ts","../../src/lib/slider/slider-module.ts","../../src/lib/snack-bar/snack-bar-ref.ts","../../src/lib/snack-bar/snack-bar-config.ts","../../src/lib/snack-bar/snack-bar-animations.ts","../../src/lib/snack-bar/simple-snack-bar.ts","../../src/lib/snack-bar/snack-bar-container.ts","../../src/lib/snack-bar/snack-bar-module.ts","../../src/lib/snack-bar/snack-bar.ts","../../src/lib/sort/sort.ts","../../src/lib/sidenav/drawer.ts","../../src/lib/sidenav/sidenav.ts","../../src/lib/sidenav/sidenav-module.ts","../../src/lib/slide-toggle/slide-toggle-config.ts","../../src/lib/slide-toggle/slide-toggle.ts","../../src/lib/slide-toggle/slide-toggle-module.ts","../../src/lib/progress-bar/progress-bar.ts","../../src/lib/progress-bar/progress-bar-module.ts","../../src/lib/progress-spinner/progress-spinner.ts","../../src/lib/progress-spinner/progress-spinner-module.ts","../../src/lib/radio/radio.ts","../../src/lib/radio/radio-module.ts","../../src/lib/sidenav/drawer-animations.ts","../../src/lib/select/select-module.ts","../../src/lib/tooltip/tooltip-animations.ts","../../src/lib/tooltip/tooltip-module.ts","../../src/lib/paginator/paginator-intl.ts","../../src/lib/paginator/paginator.ts","../../src/lib/paginator/paginator-module.ts","../../src/lib/menu/menu-content.ts","../../src/lib/menu/menu-animations.ts","../../src/lib/menu/menu-panel.ts","../../src/lib/menu/menu-item.ts","../../src/lib/menu/menu-directive.ts","../../src/lib/menu/menu-trigger.ts","../../src/lib/menu/menu-module.ts","../../src/lib/select/select-animations.ts","../../src/lib/list/selection-list.ts","../../src/lib/list/list-module.ts","../../src/lib/list/list.ts","../../src/lib/grid-list/grid-tile.ts","../../src/lib/grid-list/tile-coordinator.ts","../../src/lib/grid-list/tile-styler.ts","../../src/lib/grid-list/grid-list.ts","../../src/lib/grid-list/grid-list-module.ts","../../src/lib/icon/icon-registry.ts","../../src/lib/icon/icon.ts","../../src/lib/icon/icon-module.ts","../../src/lib/datepicker/calendar.ts","../../src/lib/datepicker/datepicker-animations.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-module.ts","../../src/lib/divider/divider.ts","../../src/lib/divider/divider-module.ts","../../src/lib/expansion/accordion.ts","../../src/lib/expansion/expansion-panel-content.ts","../../src/lib/expansion/expansion-panel.ts","../../src/lib/expansion/expansion-panel-header.ts","../../src/lib/expansion/expansion-module.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/datepicker/multi-year-view.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/chips/chip-list.ts","../../src/lib/chips/chip-input.ts","../../src/lib/chips/chips-module.ts","../../src/lib/dialog/dialog-config.ts","../../src/lib/dialog/dialog-animations.ts","../../src/lib/dialog/dialog-container.ts","../../src/lib/dialog/dialog-ref.ts","../../src/lib/dialog/dialog.ts","../../src/lib/dialog/dialog-content-directives.ts","../../src/lib/dialog/dialog-module.ts","../../src/lib/input/autosize.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/input.ts","../../src/lib/input/input-module.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/card/card.ts","../../src/lib/card/card-module.ts","../../src/lib/checkbox/checkbox-config.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/chips/chip.ts","../../src/lib/chips/chip-default-options.ts","../../src/lib/button/button.ts","../../src/lib/button/button-module.ts","../../src/lib/button-toggle/button-toggle.ts","../../src/lib/button-toggle/button-toggle-module.ts","../../src/lib/autocomplete/autocomplete.ts","../../src/lib/autocomplete/autocomplete-origin.ts","../../src/lib/autocomplete/autocomplete-module.ts","../../src/lib/badge/badge.ts","../../src/lib/badge/badge-module.ts","../../src/lib/bottom-sheet/bottom-sheet-config.ts","../../src/lib/bottom-sheet/bottom-sheet-animations.ts","../../src/lib/bottom-sheet/bottom-sheet-container.ts","../../src/lib/bottom-sheet/bottom-sheet-module.ts","../../src/lib/bottom-sheet/bottom-sheet-ref.ts","../../src/lib/bottom-sheet/bottom-sheet.ts","../../src/lib/core/option/option.ts","../../src/lib/core/option/index.ts","../../src/lib/core/label/label-options.ts","../../src/lib/form-field/error.ts","../../src/lib/form-field/form-field-animations.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/label.ts","../../src/lib/form-field/placeholder.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field-module.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/disable-ripple.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/core/common-behaviors/initialized.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/grid-list/grid-list-measure.ts","../../src/lib/menu/menu-errors.ts","../../src/lib/select/select-errors.ts","../../src/lib/sort/sort-errors.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/datetime/date-formats.ts","../../src/lib/core/datetime/native-date-formats.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/line/line.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/option/optgroup.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nexport class MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatToolbarMixinBase = mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': '_toolbarRows.length > 0',\n    '[class.mat-toolbar-single-row]': '_toolbarRows.length === 0',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n  private _document: Document;\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(\n    elementRef: ElementRef,\n    private _platform: Platform,\n    @Inject(DOCUMENT) document?: any) {\n    super(elementRef);\n\n    // TODO: make the document a required param when doing breaking changes.\n    this._document = document;\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = [].slice.call(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n      .some(node => node.textContent.trim());\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodeOutlet} from '@angular/cdk/tree';\nimport {\n  Directive,\n  ViewContainerRef,\n} from '@angular/core';\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({\n  selector: '[matTreeNodeOutlet]'\n})\nexport class MatTreeNodeOutlet implements CdkTreeNodeOutlet {\n  constructor(public viewContainer: ViewContainerRef) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkNestedTreeNode, CdkTree, CdkTreeNode, CdkTreeNodeDef} from '@angular/cdk/tree';\nimport {\n  AfterContentInit,\n  Attribute,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Input,\n  IterableDiffers,\n  OnDestroy,\n  QueryList,\n} from '@angular/core';\nimport {CanDisable, HasTabIndex, mixinDisabled, mixinTabIndex} from '@angular/material/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkTreeNodeDef = CdkTreeNodeDef;\n\nexport const _MatTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkTreeNode));\nexport const _MatNestedTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkNestedTreeNode));\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n  selector: 'mat-tree-node',\n  exportAs: 'matTreeNode',\n  inputs: ['disabled', 'tabIndex'],\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n    '[attr.role]': 'role',\n    'class': 'mat-tree-node'\n  },\n  providers: [{provide: CdkTreeNode, useExisting: MatTreeNode}]\n})\nexport class MatTreeNode<T> extends _MatTreeNodeMixinBase<T>\n    implements CanDisable, HasTabIndex {\n  @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n  constructor(protected _elementRef: ElementRef,\n              protected _tree: CdkTree<T>,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n}\n\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeDef]',\n  inputs: [\n    'when: matTreeNodeDefWhen'\n  ],\n  providers: [{provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef}]\n})\nexport class MatTreeNodeDef<T> extends _CdkTreeNodeDef<T> {\n  @Input('matTreeNode') data: T;\n}\n\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\n@Directive({\n  selector: 'mat-nested-tree-node',\n  exportAs: 'matNestedTreeNode',\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.role]': 'role',\n    'class': 'mat-nested-tree-node',\n  },\n  inputs: ['disabled', 'tabIndex'],\n  providers: [\n    {provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CdkTreeNode, useExisting: MatNestedTreeNode}\n  ]\n})\nexport class MatNestedTreeNode<T> extends _MatNestedTreeNodeMixinBase<T>\n    implements AfterContentInit, CanDisable, HasTabIndex, OnDestroy {\n\n  @Input('matNestedTreeNode') node: T;\n\n  @ContentChildren(MatTreeNodeOutlet) nodeOutlet: QueryList<MatTreeNodeOutlet>;\n\n  constructor(protected _elementRef: ElementRef,\n              protected _tree: CdkTree<T>,\n              protected _differs: IterableDiffers,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree, _differs);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n\n  // This is a workaround for https://github.com/angular/angular/issues/23091\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  // TODO(tinayuangao): Remove when the angular issue #23091 is fixed\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodePadding} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkTreeNodePadding = CdkTreeNodePadding;\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodePadding]',\n  providers: [{provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding}]\n})\nexport class MatTreeNodePadding<T> extends _CdkTreeNodePadding<T> {\n\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  @Input('matTreeNodePadding') level: number;\n\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n  @Input('matTreeNodePaddingIndent') indent: number;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTree} from '@angular/cdk/tree';\nimport {ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation} from '@angular/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkTree = CdkTree;\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tree',\n  exportAs: 'matTree',\n  template: `<ng-container matTreeNodeOutlet></ng-container>`,\n  host: {\n    'class': 'mat-tree',\n    'role': 'tree',\n  },\n  styleUrls: ['tree.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [{provide: CdkTree, useExisting: MatTree}]\n})\nexport class MatTree<T> extends _CdkTree<T> {\n  // Outlets within the tree's template where the dataNodes will be inserted.\n  @ViewChild(MatTreeNodeOutlet) _nodeOutlet: MatTreeNodeOutlet;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTreeNodeToggle} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkTreeNodeToggle = CdkTreeNodeToggle;\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeToggle]',\n  host: {\n    '(click)': '_toggle($event)',\n  },\n  providers: [{provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle}]\n})\nexport class MatTreeNodeToggle<T> extends _CdkTreeNodeToggle<T> {\n  @Input('matTreeNodeToggleRecursive') recursive: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatNestedTreeNode, MatTreeNodeDef, MatTreeNode} from './node';\nimport {MatTree} from './tree';\nimport {MatTreeNodeToggle} from './toggle';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {MatTreeNodePadding} from './padding';\n\nconst MAT_TREE_DIRECTIVES = [\n  MatNestedTreeNode,\n  MatTreeNodeDef,\n  MatTreeNodePadding,\n  MatTreeNodeToggle,\n  MatTree,\n  MatTreeNode,\n  MatTreeNodeOutlet\n];\n\n@NgModule({\n  imports: [CdkTreeModule, CommonModule, MatCommonModule],\n  exports: MAT_TREE_DIRECTIVES,\n  declarations: MAT_TREE_DIRECTIVES,\n})\nexport class MatTreeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {FlatTreeControl, TreeControl} from '@angular/cdk/tree';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map, take} from 'rxjs/operators';\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class MatTreeFlattener<T, F> {\n\n  constructor(public transformFunction: (node: T, level: number) => F,\n              public getLevel: (node: F) => number,\n              public isExpandable: (node: F) => boolean,\n              public getChildren: (node: T) => Observable<T[]> | T[]) {}\n\n  _flattenNode(node: T, level: number,\n               resultNodes: F[], parentMap: boolean[]): F[] {\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n\n    if (this.isExpandable(flatNode)) {\n      const childrenNodes = this.getChildren(node);\n      if (Array.isArray(childrenNodes)) {\n        this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n      } else {\n        childrenNodes.pipe(take(1)).subscribe(children => {\n          this._flattenChildren(children, level, resultNodes, parentMap);\n        });\n      }\n    }\n    return resultNodes;\n  }\n\n  _flattenChildren(children: T[], level: number,\n                   resultNodes: F[], parentMap: boolean[]): void {\n    children.forEach((child, index) => {\n      let childParentMap: boolean[] = parentMap.slice();\n      childParentMap.push(index != children.length - 1);\n      this._flattenNode(child, level + 1, resultNodes, childParentMap);\n    });\n  }\n\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   */\n  flattenNodes(structuredData: T[]): F[] {\n    let resultNodes: F[] = [];\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   */\n  expandFlattenedNodes(nodes: F[], treeControl: TreeControl<F>): F[] {\n    let results: F[] = [];\n    let currentExpand: boolean[] = [];\n    currentExpand[0] = true;\n\n    nodes.forEach(node => {\n      let expand = true;\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n      if (expand) {\n        results.push(node);\n      }\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nexport class MatTreeFlatDataSource<T, F> extends DataSource<F> {\n  _flattenedData = new BehaviorSubject<F[]>([]);\n\n  _expandedData = new BehaviorSubject<F[]>([]);\n\n  _data: BehaviorSubject<T[]>;\n  get data() { return this._data.value; }\n  set data(value: T[]) {\n    this._data.next(value);\n    this._flattenedData.next(this.treeFlattener.flattenNodes(this.data));\n    this.treeControl.dataNodes = this._flattenedData.value;\n  }\n\n  constructor(private treeControl: FlatTreeControl<F>,\n              private treeFlattener: MatTreeFlattener<T, F>,\n              initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n  }\n\n  connect(collectionViewer: CollectionViewer): Observable<F[]> {\n    const changes = [\n      collectionViewer.viewChange,\n      this.treeControl.expansionModel.onChange!,\n      this._flattenedData\n    ];\n    return merge(...changes).pipe(map(() => {\n      this._expandedData.next(\n        this.treeFlattener.expandFlattenedNodes(this._flattenedData.value, this.treeControl));\n      return this._expandedData.value;\n    }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nexport class MatTreeNestedDataSource<T> extends DataSource<T> {\n  _data = new BehaviorSubject<T[]>([]);\n\n  /**\n   * Data for the nested tree\n   */\n  get data() { return this._data.value; }\n  set data(value: T[]) { this._data.next(value); }\n\n  connect(collectionViewer: CollectionViewer): Observable<T[]> {\n    return merge(...[collectionViewer.viewChange, this._data])\n      .pipe(map(() => {\n        return this.data;\n      }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('6.4.6-636d27e');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n  ViewportRuler,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {filter, take, switchMap, delay, tap, map} from 'rxjs/operators';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  MatOption,\n  MatOptionSelectionChange,\n} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {Subscription, defer, fromEvent, merge, of as observableOf, Subject, Observable} from 'rxjs';\nimport {MatAutocomplete} from './autocomplete';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    '[attr.autocomplete]': 'autocompleteAttribute',\n    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n    '[attr.aria-activedescendant]': 'activeOption?.id',\n    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n    '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  exportAs: 'matAutocompleteTrigger',\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal;\n  private _componentDestroyed = false;\n  private _autocompleteDisabled = false;\n\n  /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n  private _previousValue: string | number | null;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Subscription to viewport size changes. */\n  private _viewportSubscription = Subscription.EMPTY;\n\n  /** Stream of keyboard events that can close the panel. */\n  private readonly _closeKeyEventStream = new Subject<void>();\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when autocomplete has been touched` */\n  _onTouched = () => {};\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  /**\n   * Reference relative to which to position the autocomplete panel.\n   * Defaults to the autocomplete trigger element.\n   */\n  @Input('matAutocompleteConnectedTo') connectedTo: MatAutocompleteOrigin;\n\n  /**\n   * `autocomplete` attribute to be set on the input element.\n   * @docs-private\n   */\n  @Input('autocomplete') autocompleteAttribute: string = 'off';\n\n  /**\n   * Whether the autocomplete is disabled. When disabled, the element will\n   * act as a regular input and the user won't be able to open the panel.\n   */\n  @Input('matAutocompleteDisabled')\n  get autocompleteDisabled(): boolean { return this._autocompleteDisabled; }\n  set autocompleteDisabled(value: boolean) {\n    this._autocompleteDisabled = coerceBooleanProperty(value);\n  }\n\n  constructor(private _element: ElementRef, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @breaking-change 7.0.0 Make `_viewportRuler` required.\n              private _viewportRuler?: ViewportRuler) {}\n\n  ngOnDestroy() {\n    this._viewportSubscription.unsubscribe();\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._overlayAttached && this.autocomplete.showPanel;\n  }\n  private _overlayAttached: boolean = false;\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (!this._overlayAttached) {\n      return;\n    }\n\n    if (this.panelOpen) {\n      // Only emit if the panel was visible.\n      this.autocomplete.closed.emit();\n    }\n\n    this.autocomplete._isOpen = this._overlayAttached = false;\n\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n\n    // Note that in some cases this can end up being called after the component is destroyed.\n    // Add a check to ensure that we don't try to run change detection on a destroyed view.\n    if (!this._componentDestroyed) {\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n   * within the viewport.\n   */\n  updatePosition(): void {\n    if (this._overlayAttached) {\n      this._overlayRef!.updatePosition();\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange|null> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)),\n      this._closeKeyEventStream,\n      this._outsideClickStream,\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n          observableOf()\n    ).pipe(\n      // Normalize the output so we return a consistent type.\n      map(event => event instanceof MatOptionSelectionChange ? event : null)\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  readonly optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .asObservable()\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  });\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private get _outsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return merge(\n      fromEvent(this._document, 'click'),\n      fromEvent(this._document, 'touchend')\n    )\n    .pipe(filter((event: MouseEvent | TouchEvent) => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._overlayAttached &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n    if (keyCode === ESCAPE) {\n      event.preventDefault();\n    }\n\n    // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n    // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n    if (this.panelOpen && (keyCode === ESCAPE || (keyCode === UP_ARROW && event.altKey))) {\n      this._resetActiveItem();\n      this._closeKeyEventStream.next();\n      event.stopPropagation();\n    } else if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else if (this.autocomplete) {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    let target = event.target as HTMLInputElement;\n    let value: number | string | null = target.value;\n\n    // Based on `NumberValueAccessor` from forms.\n    if (target.type === 'number') {\n      value = value == '' ? null : parseFloat(value);\n    }\n\n    // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._previousValue !== value && document.activeElement === event.target) {\n      this._previousValue = value;\n      this._onChange(value);\n\n      if (this._canOpen()) {\n        this.openPanel();\n      }\n    }\n  }\n\n  _handleFocus(): void {\n    if (this._canOpen()) {\n      this._previousValue = this._element.nativeElement.value;\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const index = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(index,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n\n    const newScrollPosition = _getOptionScrollPosition(\n      index + labelCount,\n      AUTOCOMPLETE_OPTION_HEIGHT,\n      this.autocomplete._getScrollTop(),\n      AUTOCOMPLETE_PANEL_HEIGHT\n    );\n\n    this.autocomplete._setScrollTop(newScrollPosition);\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.reapplyLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n      .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n          this._resetActiveItem();\n          this.autocomplete._setVisibility();\n\n          if (this.panelOpen) {\n            this._overlayRef!.updatePosition();\n          }\n\n          return this.panelClosingActions;\n        }),\n        // when the first closing event occurs...\n        take(1)\n      )\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      this._overlayRef = this._overlay.create(this._getOverlayConfig());\n\n      if (this._viewportRuler) {\n        this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n          if (this.panelOpen && this._overlayRef) {\n            this._overlayRef.updateSize({width: this._getPanelWidth()});\n          }\n        });\n      }\n    } else {\n      // Update the panel width and direction, in case anything has changed.\n      this._overlayRef.updateSize({width: this._getPanelWidth()});\n    }\n\n    if (this._overlayRef && !this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    const wasOpen = this.panelOpen;\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._overlayAttached = true;\n\n    // We need to do an extra `panelOpen` check in here, because the\n    // autocomplete won't be shown if there are no options.\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\n      this.autocomplete.opened.emit();\n    }\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getPanelWidth(),\n      direction: this._dir\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy = this._overlay.position()\n      .flexibleConnectedTo(this._getConnectedElement())\n      .withFlexibleDimensions(false)\n      .withPush(false)\n      .withPositions([\n        {originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top'},\n        {originX: 'start', originY: 'top', overlayX: 'start', overlayY: 'bottom'}\n      ]);\n\n    // The overlay edge connected to the trigger should have squared corners, while\n    // the opposite end has rounded corners. We apply a CSS class to swap the\n    // border-radius based on the overlay position.\n    this._positionStrategy.positionChanges.subscribe(({connectionPair}) => {\n      if (this.autocomplete) {\n        this.autocomplete._classList['mat-autocomplete-panel-above'] =\n            connectionPair.originY === 'top';\n      }\n    });\n\n    return this._positionStrategy;\n  }\n\n  private _getConnectedElement(): ElementRef {\n    if (this.connectedTo) {\n      return this.connectedTo.elementRef;\n    }\n\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n  }\n\n  private _getPanelWidth(): number | string {\n    return this.autocomplete.panelWidth || this._getHostWidth();\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n  }\n\n  /** Determines whether the panel can be opened. */\n  private _canOpen(): boolean {\n    const element: HTMLInputElement = this._element.nativeElement;\n    return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n    OCT = 9, NOV = 10, DEC = 11;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  animateChild,\n  group,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/** Animations used by the Material expansion panel. */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '48px'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '64px'}\n    }),\n    transition('expanded <=> collapsed', group([\n      query('@indicatorRotate', animateChild(), {optional: true}),\n      animate(EXPANSION_PANEL_ANIMATION_TIMING),\n    ])),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  SPACE,\n  UP_ARROW,\n  A,\n} from '@angular/cdk/keycodes';\nimport {\n  CdkConnectedOverlay,\n  Overlay,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  ViewportRuler,\n} from '@angular/cdk/overlay';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  CanDisable,\n  CanDisableRipple,\n  CanUpdateErrorState,\n  ErrorStateMatcher,\n  HasTabIndex,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinErrorState,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {defer, merge, Observable, Subject} from 'rxjs';\nimport {\n  filter,\n  map,\n  startWith,\n  switchMap,\n  take,\n  takeUntil,\n  distinctUntilChanged,\n} from 'rxjs/operators';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 20px.\n */\nexport const SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 20;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nexport class MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatSelectMixinBase = mixinDisableRipple(\n    mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_getAriaLabel()',\n    '[attr.aria-labelledby]': '_getAriaLabelledby()',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanel,\n    matSelectAnimations.fadeInContent\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form. */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Whether the panel's animation is done. */\n  _panelDoneAnimating: boolean = false;\n\n  /** Emits when the panel element is finished transforming in. */\n  _panelDoneAnimatingStream = new Subject<string>();\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy = this._scrollStrategyFactory();\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the component is disabling centering of the active option over the trigger. */\n  private _disableOptionCentering: boolean = false;\n\n  /** Whether the select is focused. */\n  get focused(): boolean {\n    return this._focused || this._panelOpen;\n  }\n  /**\n   * @deprecated Setter to be removed as this property is intended to be readonly.\n   * @breaking-change 8.0.0\n   */\n  set focused(value: boolean) {\n    this._focused = value;\n  }\n  private _focused = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger') trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether to center the active option over the trigger. */\n  @Input()\n  get disableOptionCentering(): boolean { return this._disableOptionCentering; }\n  set disableOptionCentering(value: boolean) {\n    this._disableOptionCentering = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Function used to sort the values in a select in multiple mode.\n   * Follows the same logic as `Array.prototype.sort`.\n   */\n  @Input() sortComparator: (a: MatOption, b: MatOption, options: MatOption[]) => number;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.options) {\n      return merge(...this.options.map(option => option.onSelectionChange));\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  });\n\n  /** Event emitted when the select panel has been toggled. */\n  @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the select has been opened. */\n  @Output('opened') readonly _openedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => o), map(() => {}));\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed') readonly _closedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => !o), map(() => {}));\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectChange> =\n      new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) private _scrollStrategyFactory) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple);\n    this.stateChanges.next();\n\n    // We need `distinctUntilChanged` here, because some browsers will\n    // fire the animation end event twice for the same animation. See:\n    // https://github.com/angular/angular/issues/24084\n    this._panelDoneAnimatingStream\n      .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n      .subscribe(() => {\n        if (this.panelOpen) {\n          this._scrollTop = 0;\n          this.openedChange.emit(true);\n        } else {\n          this.openedChange.emit(false);\n          this._panelDoneAnimating = false;\n          this.overlayDir.offsetX = 0;\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this._selectionModel.onChange!.pipe(takeUntil(this._destroy)).subscribe(event => {\n      event.added.forEach(option => option.select());\n      event.removed.forEach(option => option.deselect());\n    });\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes.disabled) {\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);\n\n    this._panelOpen = true;\n    this._keyManager.withHorizontalOrientation(null);\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n        keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else if (this._multiple && keyCode === A && event.ctrlKey) {\n      event.preventDefault();\n      const hasDeselectedOptions = this.options.some(option => !option.selected);\n      this.options.forEach(option => hasDeselectedOptions ? option.select() : option.deselect());\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  /**\n   * When the panel content is done fading in, the _panelDoneAnimating property is\n   * set so the proper class can be added to the panel.\n   */\n  _onFadeInDone(): void {\n    this._panelDoneAnimating = this.panelOpen;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this._focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this._focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[]): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._selectionModel.clear();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n      this._sortValues();\n    } else {\n      this._selectionModel.clear();\n      const correspondingOption = this._selectValue(value);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(correspondingOption);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      this._selectionModel.select(correspondingOption);\n    }\n\n    return correspondingOption;\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\n      .withTypeAhead()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n      // Restore focus to the trigger before closing. Ensures that the focus\n      // position won't be lost if the user got focus into the overlay.\n      this.focus();\n      this.close();\n    });\n\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n      this._onSelect(event.source, event.isUserInput);\n\n      if (event.isUserInput && !this.multiple && this._panelOpen) {\n        this.close();\n        this.focus();\n      }\n    });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption, isUserInput: boolean): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    if (option.value == null && !this._multiple) {\n      option.deselect();\n      this._selectionModel.clear();\n      this._propagateChanges(option.value);\n    } else {\n      option.selected ? this._selectionModel.select(option) : this._selectionModel.deselect(option);\n\n      if (isUserInput) {\n        this._keyManager.setActiveItem(option);\n      }\n\n      if (this.multiple) {\n        this._sortValues();\n\n        if (isUserInput) {\n          // In case the user selected the option with their mouse, we\n          // want to restore focus back to the trigger, in order to\n          // prevent the select keyboard controls from clashing with\n          // the ones from `mat-option`.\n          this.focus();\n        }\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n\n    this.stateChanges.next();\n  }\n\n  /** Sorts the selected values in the selected based on their order in the panel. */\n  private _sortValues() {\n    if (this.multiple) {\n      const options = this.options.toArray();\n\n      this._selectionModel.sort((a, b) => {\n        return this.sortComparator ? this.sortComparator(a, b, options) :\n                                     options.indexOf(a) - options.indexOf(b);\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options,\n        this.optionGroups);\n\n    this.panel.nativeElement.scrollTop = _getOptionScrollPosition(\n      activeOptionIndex + labelCount,\n      this._getItemHeight(),\n      this.panel.nativeElement.scrollTop,\n      SELECT_PANEL_MAX_HEIGHT\n    );\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options,\n        this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  _getAriaLabel(): string | null {\n    // If an ariaLabelledby value has been set by the consumer, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Returns the aria-labelledby of the select component. */\n  _getAriaLabelledby(): string | null {\n    if (this.ariaLabelledby) {\n      return this.ariaLabelledby;\n    }\n\n    // Note: we use `_getAriaLabel` here, because we want to check whether there's a\n    // computed label. `this.ariaLabel` is only the user-specified label.\n    if (!this._parentFormField || this._getAriaLabel()) {\n      return null;\n    }\n\n    return this._parentFormField._labelId || null;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n    // blurry content in some browsers.\n    this.overlayDir.offsetX = Math.round(offsetX);\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    // Disable offset if requested by user by returning 0 as value to offset\n    if (this._disableOptionCentering) {\n      return 0;\n    }\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height difference,\n    // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n    // The value is rounded to prevent some browsers from blurring the content.\n    return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {BreakpointObserver, Breakpoints, BreakpointState} from '@angular/cdk/layout';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConnectionPosition,\n  OverlayRef,\n  ScrollDispatcher,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject, Observable} from 'rxjs';\nimport {matTooltipAnimations} from './tooltip-animations';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * @docs-private\n */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition({scrollThrottle: SCROLL_THROTTLE_MS});\n}\n\n/** @docs-private */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options', {\n      providedIn: 'root',\n      factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY(): MatTooltipDefaultOptions {\n  return {\n    showDelay: 0,\n    hideDelay: 0,\n    touchendHideDelay: 1500,\n  };\n}\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.google.com/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': '_handleTouchend()',\n  },\n})\nexport class MatTooltip implements OnDestroy {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _portal: ComponentPortal<TooltipComponent>;\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      if (this._overlayRef) {\n        this._updatePosition();\n\n        if (this._tooltipInstance) {\n          this._tooltipInstance!.show(0);\n        }\n\n        this._overlayRef.updatePosition();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay = this._defaultOptions.showDelay;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay = this._defaultOptions.hideDelay;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, Function>();\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    private _platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) private _scrollStrategy,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions: MatTooltipDefaultOptions) {\n\n    const element: HTMLElement = _elementRef.nativeElement;\n\n    // The mouse events shouldn't be bound on iOS devices, because\n    // they can prevent the first tap from firing its click event.\n    if (!_platform.IOS) {\n      this._manualListeners.set('mouseenter', () => this.show());\n      this._manualListeners.set('mouseleave', () => this.hide());\n\n      this._manualListeners\n        .forEach((listener, event) => _elementRef.nativeElement.addEventListener(event, listener));\n    } else if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS, because it will prevent users from typing in inputs. If\n      // we're on iOS and the tooltip is attached on an input or textarea, we clear\n      // the `user-select` to avoid these issues.\n      element.style.webkitUserSelect = element.style.userSelect = '';\n    }\n\n    // Hammer applies `-webkit-user-drag: none` on all elements by default,\n    // which breaks the native drag&drop. If the consumer explicitly made\n    // the element draggable, clear the `-webkit-user-drag`.\n    if (element.draggable && element.style['webkitUserDrag'] === 'none') {\n      element.style['webkitUserDrag'] = '';\n    }\n\n    _focusMonitor.monitor(element).pipe(takeUntil(this._destroyed)).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin === 'keyboard') {\n        _ngZone.run(() => this.show());\n      }\n    });\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._tooltipInstance = null;\n    }\n\n    // Clean up the event listeners set in the constructor\n    if (!this._platform.IOS) {\n      this._manualListeners.forEach((listener, event) =>\n        this._elementRef.nativeElement.removeEventListener(event, listener));\n\n      this._manualListeners.clear();\n    }\n\n    this._destroyed.next();\n    this._destroyed.complete();\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message) { return; }\n\n    const overlayRef = this._createOverlay();\n\n    this._detach();\n    this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    this._tooltipInstance = overlayRef.attach(this._portal).instance;\n    this._tooltipInstance.afterHidden()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Handles the touchend events on the host element. */\n  _handleTouchend() {\n    this.hide(this._defaultOptions.touchendHideDelay);\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    if (this._overlayRef) {\n      return this._overlayRef;\n    }\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay.position()\n      .flexibleConnectedTo(this._elementRef)\n      .withTransformOriginOn('.mat-tooltip')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8);\n\n    const scrollableAncestors = this._scrollDispatcher\n      .getAncestorScrollContainers(this._elementRef);\n\n    strategy.withScrollableContainers(scrollableAncestors);\n\n    strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        }\n      }\n    });\n\n    this._overlayRef = this._overlay.create({\n      direction: this._dir,\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._updatePosition();\n\n    this._overlayRef.detachments()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n\n    return this._overlayRef;\n  }\n\n  /** Detaches the currently-attached tooltip. */\n  private _detach() {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /** Updates the position of the current tooltip. */\n  private _updatePosition() {\n    const position =\n        this._overlayRef!.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    position.withPositions([\n      {...origin.main, ...overlay.main},\n      {...origin.fallback, ...overlay.fallback}\n    ]);\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let originPosition: OriginConnectionPosition;\n\n    if (position == 'above' || position == 'below') {\n      originPosition = {originX: 'center', originY: position == 'above' ? 'top' : 'bottom'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      originPosition = {originX: 'start', originY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      originPosition = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(originPosition.originX, originPosition.originY);\n\n    return {\n      main: originPosition,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let overlayPosition: OverlayConnectionPosition;\n\n    if (position == 'above') {\n      overlayPosition = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (position == 'below') {\n      overlayPosition = {overlayX: 'center', overlayY: 'top'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      overlayPosition = {overlayX: 'end', overlayY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      overlayPosition = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n    return {\n      main: overlayPosition,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(\n        take(1),\n        takeUntil(this._destroyed)\n      ).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private readonly _onHide: Subject<any> = new Subject();\n\n  /** Stream that emits whether the user has a handset-sized display.  */\n  _isHandset: Observable<BreakpointState> = this._breakpointObserver.observe(Breakpoints.Handset);\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _breakpointObserver: BreakpointObserver) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      this._closeOnInteraction = true;\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.google.com/components/tooltips.html#tooltips-interaction\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Inject, InjectionToken, NgZone} from '@angular/core';\n\n\n/**\n * Interface for a a MatInkBar positioner method, defining the positioning and width of the ink\n * bar in a set of tabs.\n */\n// tslint:disable-next-line class-name Using leading underscore to denote internal interface.\nexport interface _MatInkBarPositioner {\n  (element: HTMLElement): { left: string, width: string };\n}\n\n/** Injection token for the MatInkBar's Positioner. */\nexport const _MAT_INK_BAR_POSITIONER =\n  new InjectionToken<_MatInkBarPositioner>('MatInkBarPositioner', {\n    providedIn: 'root',\n    factory: _MAT_INK_BAR_POSITIONER_FACTORY\n  });\n\n/**\n * The default positioner function for the MatInkBar.\n * @docs-private\n */\nexport function _MAT_INK_BAR_POSITIONER_FACTORY(): _MatInkBarPositioner {\n  const method = (element: HTMLElement) => ({\n    left: element ? (element.offsetLeft || 0) + 'px' : '0',\n    width: element ? (element.offsetWidth || 0) + 'px' : '0',\n  });\n\n  return method;\n}\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone,\n    @Inject(_MAT_INK_BAR_POSITIONER) private _inkBarPositioner: _MatInkBarPositioner) { }\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n  private _setStyles(element: HTMLElement) {\n    const positions = this._inkBarPositioner(element);\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\n\n    inkBar.style.left = positions.left;\n    inkBar.style.width = positions.width;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n// TODO(devversion): Workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkPortal = CdkPortal;\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n})\nexport class MatTabLabel extends _CdkPortal {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/** Decorates the `ng-template` tags and reads out the template from it. */\n@Directive({selector: '[matTabContent]'})\nexport class MatTabContent {\n  constructor(public template: TemplateRef<any>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabContent} from './tab-content';\n\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nexport class MatTabBase {}\nexport const _MatTabMixinBase = mixinDisabled(MatTabBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matTab',\n})\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n  @ContentChild(MatTabLabel) templateLabel: MatTabLabel;\n\n  /**\n   * Template provided in the tab content that will be used if present, used to enable lazy-loading\n   */\n  @ContentChild(MatTabContent, {read: TemplateRef}) _explicitContent: TemplateRef<any>;\n\n  /** Template inside the MatTab view that contains an `<ng-content>`. */\n  @ViewChild(TemplateRef) _implicitContent: TemplateRef<any>;\n\n  /** Plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** Aria label for the tab. */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Reference to the element that the tab is labelled by.\n   * Will be cleared if `aria-label` is set at the same time.\n   */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the internal state of the tab changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel') || changes.hasOwnProperty('disabled')) {\n      this._stateChanges.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._stateChanges.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(\n        this._explicitContent || this._implicitContent, this._viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material tabs. */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n\n    // If the tab is either on the left or right, we additionally add a `min-height` of 1px\n    // in order to ensure that the element has a height before its state changes. This is\n    // necessary because Chrome does seem to skip the transition in RTL mode if the element does\n    // not have a static height and is not rendered. See related issue: #9465\n    state('left', style({transform: 'translate3d(-100%, 0, 0)', minHeight: '1px'})),\n    state('right', style({transform: 'translate3d(100%, 0, 0)', minHeight: '1px'})),\n\n    transition('* => left, * => right, left => center, right => center',\n        animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ])\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectorRef,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n  ViewChild,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet, PortalHostDirective} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {Subscription} from 'rxjs';\nimport {matTabsAnimations} from './tabs-animations';\nimport {startWith} from 'rxjs/operators';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]'\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** Subscription to events for when the tab body begins centering. */\n  private _centeringSub = Subscription.EMPTY;\n  /** Subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub = Subscription.EMPTY;\n\n  constructor(\n    componentFactoryResolver: ComponentFactoryResolver,\n    viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\n      super(componentFactoryResolver, viewContainerRef);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    this._centeringSub = this._host._beforeCentering\n      .pipe(startWith(this._host._isCenterPosition(this._host._position)))\n      .subscribe((isCentering: boolean) => {\n        if (isCentering && !this.hasAttached()) {\n          this.attach(this._host._content);\n        }\n      });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  /** Clean up centering subscription. */\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this._centeringSub.unsubscribe();\n    this._leavingSub.unsubscribe();\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  },\n})\nexport class MatTabBody implements OnInit, OnDestroy {\n\n  /** Current position of the tab-body in the tab-group. Zero means that the tab is visible. */\n  private _positionIndex: number;\n\n  /** Subscription to the directionality change observable. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** Tab body position state. Used by the animation trigger for the current state. */\n  _position: MatTabBodyPositionState;\n\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() readonly _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() readonly _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n   /** The portal host inside of this container into which the tab body content will be loaded. */\n  @ViewChild(PortalHostDirective) _portalHost: PortalHostDirective;\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal;\n\n  /** Position that will be used when the tab is immediately becoming visible after creation. */\n  @Input() origin: number;\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  @Input()\n  set position(position: number) {\n    this._positionIndex = position;\n    this._computePositionAnimationState();\n  }\n\n  constructor(private _elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              /**\n               * @breaking-change 7.0.0 changeDetectorRef to be made required.\n               */\n              changeDetectorRef?: ChangeDetectorRef) {\n\n    if (this._dir && changeDetectorRef) {\n      this._dirChangeSubscription = this._dir.change.subscribe(dir => {\n        this._computePositionAnimationState(dir);\n        changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this.origin != null) {\n      this._position = this._computePositionFromOrigin();\n    }\n  }\n\n  ngOnDestroy() {\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onTranslateTabStarted(e: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(e.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  _onTranslateTabComplete(e: AnimationEvent): void {\n    // If the transition to the center is complete, emit an event.\n    if (this._isCenterPosition(e.toState) && this._isCenterPosition(this._position)) {\n      this._onCentered.emit();\n    }\n\n    if (this._isCenterPosition(e.fromState) && !this._isCenterPosition(this._position)) {\n      this._afterLeavingCenter.emit();\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\n\n  /** Computes the position state that will be used for the tab-body animation trigger. */\n  private _computePositionAnimationState(dir: Direction = this._getLayoutDirection()) {\n    if (this._positionIndex < 0) {\n      this._position = dir == 'ltr' ? 'left' : 'right';\n    } else if (this._positionIndex > 0) {\n      this._position = dir == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n\n  /**\n   * Computes the position state based on the specified origin position. This is used if the\n   * tab is becoming visible immediately after creation.\n   */\n  private _computePositionFromOrigin(): MatTabBodyPositionState {\n    const dir = this._getLayoutDirection();\n\n    if ((dir == 'ltr' && this.origin <= 0) || (dir == 'rtl' && this.origin > 0)) {\n      return 'left-origin-center';\n    }\n\n    return 'right-origin-center';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nexport class MatTabLabelWrapperBase {}\nexport const _MatTabLabelWrapperMixinBase = mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled',\n    '[attr.aria-disabled]': '!!disabled',\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {END, ENTER, HOME, SPACE} from '@angular/cdk/keycodes';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, mixinDisableRipple} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\n\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n// Boilerplate for applying mixins to MatTabHeader.\n/** @docs-private */\nexport class MatTabHeaderBase {}\nexport const _MatTabHeaderMixinBase = mixinDisableRipple(MatTabHeaderBase);\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends _MatTabHeaderMixinBase\n    implements AfterContentChecked, AfterContentInit, OnDestroy, CanDisableRipple {\n\n  @ContentChildren(MatTabLabelWrapper) _labelWrappers: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer') _tabListContainer: ElementRef;\n  @ViewChild('tabList') _tabList: ElementRef;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  /** Used to manage focus between the tabs. */\n  private _keyManager: FocusKeyManager<MatTabLabelWrapper>;\n\n  private _selectedIndex: number = 0;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number { return this._selectedIndex; }\n  set selectedIndex(value: number) {\n    value = coerceNumberProperty(value);\n    this._selectedIndexChanged = this._selectedIndex != value;\n    this._selectedIndex = value;\n\n    if (this._keyManager) {\n      this._keyManager.updateActiveItemIndex(value);\n    }\n  }\n\n  /** Event emitted when the option is selected. */\n  @Output() readonly selectFocusedIndex = new EventEmitter();\n\n  /** Event emitted when a label is focused. */\n  @Output() readonly indexFocused = new EventEmitter();\n\n  constructor(private _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() private _dir: Directionality) {\n    super();\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this._updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case HOME:\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n        break;\n      case END:\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        event.preventDefault();\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Aligns the ink bar to the selected tab on load.\n   */\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this._updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    this._keyManager = new FocusKeyManager(this._labelWrappers)\n      .withHorizontalOrientation(this._getLayoutDirection())\n      .withWrap();\n\n    this._keyManager.updateActiveItem(0);\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n\n    // On dir change or window resize, realign the ink bar and update the orientation of\n    // the key manager if the direction has changed.\n    merge(dirChange, resize).pipe(takeUntil(this._destroyed)).subscribe(() => {\n      realign();\n      this._keyManager.withHorizontalOrientation(this._getLayoutDirection());\n    });\n\n    // If there is a change in the focus key manager we need to emit the `indexFocused`\n    // event in order to provide a public event that notifies about focus changes. Also we realign\n    // the tabs container by scrolling the new focused tab into the visible section.\n    this._keyManager.change.pipe(takeUntil(this._destroyed)).subscribe(newFocusIndex => {\n      this.indexFocused.emit(newFocusIndex);\n      this._setTabFocus(newFocusIndex);\n    });\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    this._updatePagination();\n    this._alignInkBarToSelectedTab();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Updating the view whether pagination should be enabled or not\n   */\n  _updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number {\n    return this._keyManager ? this._keyManager.activeItemIndex! : 0;\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this.focusIndex === value || !this._keyManager) {\n      return;\n    }\n\n    this._keyManager.setActiveItem(value);\n  }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    const scrollDistance = this.scrollDistance;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    // Don't use `translate3d` here because we don't want to create a new layer. A new layer\n    // seems to cause flickering and overflow in Internet Explorer. For example, the ink bar\n    // and ripples will exceed the boundaries of the visible tab bar.\n    // See: https://github.com/angular/material2/issues/10276\n    this._tabList.nativeElement.style.transform = `translateX(${translateX}px)`;\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  get scrollDistance(): number { return this._scrollDistance; }\n  set scrollDistance(v: number) {\n    this._scrollDistance = Math.max(0, Math.min(this._getMaxScrollDistance(), v));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n  }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(scrollDir: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    this.scrollDistance += (scrollDir == 'before' ? -1 : 1) * viewLength / 3;\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    const selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    const isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  _alignInkBarToSelectedTab(): void {\n    const selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\n        null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisableRipple,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette\n} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\n\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nexport class MatTabGroupBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabGroupMixinBase = mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://material.io/design/components/tabs.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\n\n  @ViewChild('tabBodyWrapper') _tabBodyWrapper: ElementRef;\n\n  @ViewChild('tabHeader') _tabHeader: MatTabHeader;\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n  private _dynamicHeight: boolean = false;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() readonly focusChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() readonly selectedTabChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\n\n  private _groupId: number;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super(elementRef);\n    this._groupId = nextId++;\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked() {\n    // Don't clamp the `indexToSelect` immediately in the setter because it can happen that\n    // the amount of tabs changes before the actual change detection runs.\n    const indexToSelect = this._indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect) {\n      const isFirstRun = this._selectedIndex == null;\n\n      if (!isFirstRun) {\n        this.selectedTabChange.emit(this._createChangeEvent(indexToSelect));\n      }\n\n      // Changing these values after change detection has run\n      // since the checked content may contain references to them.\n      Promise.resolve().then(() => {\n        this._tabs.forEach((tab, index) => tab.isActive = index === indexToSelect);\n\n        if (!isFirstRun) {\n          this.selectedIndexChange.emit(indexToSelect);\n        }\n      });\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      const indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n      // Maintain the previously-selected tab if a new tab is added or removed and there is no\n      // explicit change that selects a different tab.\n      if (indexToSelect === this._selectedIndex) {\n        const tabs = this._tabs.toArray();\n\n        for (let i = 0; i < tabs.length; i++) {\n          if (tabs[i].isActive) {\n            // Assign both to the `_indexToSelect` and `_selectedIndex` so we don't fire a changed\n            // event, otherwise the consumer may end up in an infinite loop in some edge cases like\n            // adding a tab within the `selectedIndexChange` event.\n            this._indexToSelect = this._selectedIndex = i;\n            break;\n          }\n        }\n      }\n\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  /** Re-aligns the ink bar to the selected tab element. */\n  realignInkBar() {\n    if (this._tabHeader) {\n      this._tabHeader._alignInkBarToSelectedTab();\n    }\n  }\n\n  _focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(...this._tabs.map(tab => tab._stateChanges))\n      .subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  /** Clamps the given index to the bounds of 0 and the tabs length. */\n  private _clampTabIndex(index: number | null): number {\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    return Math.min(this._tabs.length - 1, Math.max(index || 0, 0));\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    this._tabBodyWrapperHeight = this._tabBodyWrapper.nativeElement.clientHeight;\n    this._tabBodyWrapper.nativeElement.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, idx: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = idx;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex, RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from '../ink-bar';\nimport {FocusMonitor} from '@angular/cdk/a11y';\n\n\n// Boilerplate for applying mixins to MatTabNav.\n/** @docs-private */\nexport class MatTabNavBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabNavMixinBase = mixinDisableRipple(mixinColor(MatTabNavBase, 'primary'));\n\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  exportAs: 'matTabNavBar, matTabNav',\n  inputs: ['color', 'disableRipple'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTabNav extends _MatTabNavMixinBase\n    implements AfterContentChecked, AfterContentInit, CanColor, CanDisableRipple, OnDestroy {\n\n  /** Subject that emits when the component has been destroyed. */\n  private readonly _onDestroy = new Subject<void>();\n\n  private _activeLinkChanged: boolean;\n  private _activeLinkElement: ElementRef | null;\n\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n\n  /** Query list of all tab links of the tab navigation. */\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true})\n  _tabLinks: QueryList<MatTabLink>;\n\n  /** Background color of the tab nav. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  constructor(elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler) {\n    super(elementRef);\n  }\n\n  /**\n   * Notifies the component that the active link has been changed.\n   * @breaking-change 7.0.0 `element` parameter to be removed.\n   */\n  updateActiveLink(element: ElementRef) {\n    // Note: keeping the `element` for backwards-compat, but isn't being used for anything.\n    // @breaking-change 7.0.0\n    this._activeLinkChanged = !!element;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  ngAfterContentInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      const dirChange = this._dir ? this._dir.change : observableOf(null);\n\n      return merge(dirChange, this._viewportRuler.change(10))\n          .pipe(takeUntil(this._onDestroy))\n          .subscribe(() => this._alignInkBar());\n    });\n  }\n\n  /** Checks if the active link has been changed and, if so, will update the ink bar. */\n  ngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      const activeTab = this._tabLinks.find(tab => tab.active);\n\n      this._activeLinkElement = activeTab ? activeTab._elementRef : null;\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Aligns the ink bar to the active link. */\n  _alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.show();\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    } else {\n      this._inkBar.hide();\n    }\n  }\n}\n\n\n// Boilerplate for applying mixins to MatTabLink.\nexport class MatTabLinkBase {}\nexport const _MatTabLinkMixinBase =\n  mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\n\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n@Directive({\n  selector: '[mat-tab-link], [matTabLink]',\n  exportAs: 'matTabLink',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-current]': 'active',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabIndex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled',\n    '[class.mat-tab-label-active]': 'active',\n    '(click)': '_handleClick($event)'\n  }\n})\nexport class MatTabLink extends _MatTabLinkMixinBase\n    implements OnDestroy, CanDisable, CanDisableRipple, HasTabIndex, RippleTarget {\n\n  /** Whether the tab link is active or not. */\n  protected _isActive: boolean = false;\n\n  /** Reference to the RippleRenderer for the tab-link. */\n  protected _tabLinkRipple: RippleRenderer;\n\n  /** Whether the ripples are globally disabled through the RippleGlobalOptions */\n  private _ripplesGloballyDisabled = false;\n\n  /** Whether the link is active. */\n  @Input()\n  get active(): boolean { return this._isActive; }\n  set active(value: boolean) {\n    if (value !== this._isActive) {\n      this._isActive = value;\n      this._tabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._tabNavBar.disableRipple ||\n      this._ripplesGloballyDisabled;\n  }\n\n  constructor(private _tabNavBar: MatTabNav,\n              public _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Attribute('tabindex') tabIndex: string,\n              /**\n               * @deprecated\n               * @breaking-change 7.0.0 `_focusMonitor` parameter to be made required.\n               */\n              private _focusMonitor?: FocusMonitor) {\n    super();\n\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._tabLinkRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    if (globalOptions) {\n      this._ripplesGloballyDisabled = !!globalOptions.disabled;\n      // TODO(paul): Once the speedFactor is removed, we no longer need to copy each single option.\n      this.rippleConfig = {\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n        speedFactor: globalOptions.baseSpeedFactor,\n        animation: globalOptions.animation,\n      };\n    }\n\n    if (_focusMonitor) {\n      _focusMonitor.monitor(_elementRef.nativeElement);\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabLinkRipple._removeTriggerEvents();\n\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n  }\n\n  /**\n   * Handles the click event, preventing default navigation if the tab link is disabled.\n   */\n  _handleClick(event: MouseEvent) {\n    if (this.disabled) {\n      event.preventDefault();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabContent} from './tab-content';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n    A11yModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n    MatTabContent,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader,\n    MatTabContent,\n  ],\n})\nexport class MatTabsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata, query, animateChild,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/** Animations used by MatSort. */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly arrowOpacity: AnimationTriggerMetadata;\n  readonly arrowPosition: AnimationTriggerMetadata;\n  readonly allowChildren: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('active-asc, asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('active-desc, desc', style({transform: 'translateY(10px)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('active-asc, asc', style({transform: 'rotate(-45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('active-asc, asc', style({transform: 'rotate(45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(-45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that controls the arrow opacity. */\n  arrowOpacity: trigger('arrowOpacity', [\n    state('desc-to-active, asc-to-active, active', style({opacity: 1})),\n    state('desc-to-hint, asc-to-hint, hint', style({opacity: .54})),\n    state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc, void',\n        style({opacity: 0})),\n    // Transition between all states except for immediate transitions\n    transition('* => asc, * => desc, * => active, * => hint, * => void', animate('0ms')),\n    transition('* <=> *', animate(SORT_ANIMATION_TRANSITION)),\n  ]),\n\n  /**\n   * Animation for the translation of the arrow as a whole. States are separated into two\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n   * peek, and active. The other states define a specific animation (source-to-destination)\n   * and are determined as a function of their prev user-perceived state and what the next state\n   * should be.\n   */\n  arrowPosition: trigger('arrowPosition', [\n    // Hidden Above => Hint Center\n    transition('* => desc-to-hint, * => desc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(-25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Below\n    transition('* => hint-to-desc, * => active-to-desc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(25%)'})\n        ]))),\n    // Hidden Below => Hint Center\n    transition('* => asc-to-hint, * => asc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Above\n    transition('* => hint-to-asc, * => active-to-asc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(-25%)'})\n        ]))),\n    state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active',\n        style({transform: 'translateY(0)'})),\n    state('hint-to-desc, active-to-desc, desc',\n        style({transform: 'translateY(-25%)'})),\n    state('hint-to-asc, active-to-asc, asc',\n        style({transform: 'translateY(25%)'})),\n  ]),\n\n  /** Necessary trigger that calls animate on children animations. */\n  allowChildren: trigger('allowChildren', [\n    transition('* <=> *', [\n      query('@*', animateChild(), {optional: true})\n    ])\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable({providedIn: 'root'})\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkColumnDef} from '@angular/cdk/table';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatSort, MatSortable} from './sort';\nimport {matSortAnimations} from './sort-animations';\nimport {SortDirection} from './sort-direction';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {MatSortHeaderIntl} from './sort-header-intl';\n\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nexport class MatSortHeaderBase {}\nexport const _MatSortHeaderMixinBase = mixinDisabled(MatSortHeaderBase);\n\n/**\n * Valid positions for the arrow to be in for its opacity and translation. If the state is a\n * sort direction, the position of the arrow will be above/below and opacity 0. If the state is\n * hint, the arrow will be in the center with a slight opacity. Active state means the arrow will\n * be fully opaque in the center.\n *\n * @docs-private\n */\nexport type ArrowViewState = SortDirection | 'hint' | 'active';\n\n/**\n * States describing the arrow's animated position (animating fromState to toState).\n * If the fromState is not defined, there will be no animated transition to the toState.\n * @docs-private\n */\nexport interface ArrowViewStateTransition {\n  fromState?: ArrowViewState;\n  toState: ArrowViewState;\n}\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_handleClick()',\n    '(mouseenter)': '_setIndicatorHintVisible(true)',\n    '(longpress)': '_setIndicatorHintVisible(true)',\n    '(mouseleave)': '_setIndicatorHintVisible(false)',\n    '[attr.aria-sort]': '_getAriaSortAttribute()',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.arrowOpacity,\n    matSortAnimations.arrowPosition,\n    matSortAnimations.allowChildren,\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase\n    implements CanDisable, MatSortable, OnDestroy, OnInit {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n   * provide an affordance that the header is sortable by showing on focus and hover.\n   */\n  _showIndicatorHint: boolean = false;\n\n  /**\n   * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n   * position through the animation. If animations are currently disabled, the fromState is removed\n   * so that there is no animation displayed.\n   */\n  _viewState: ArrowViewStateTransition;\n\n  /** The direction the arrow should be facing according to the current state. */\n  _arrowDirection: SortDirection = '';\n\n  /**\n   * Whether the view state animation should show the transition between the `from` and `to` states.\n   */\n  _disableViewStateAnimation = false;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input() start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Optional() public _cdkColumnDef: CdkColumnDef) {\n\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n        .subscribe(() => {\n          if (this._isSorted()) {\n            this._updateArrowDirection();\n          }\n\n          // If this header was recently active and now no longer sorted, animate away the arrow.\n          if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = false;\n            this._setAnimationTransitionState({fromState: 'active', toState: this._arrowDirection});\n          }\n\n          changeDetectorRef.markForCheck();\n        });\n  }\n\n  ngOnInit() {\n    if (!this.id && this._cdkColumnDef) {\n      this.id = this._cdkColumnDef.name;\n    }\n\n    // Initialize the direction of the arrow and set the view state to be immediately that state.\n    this._updateArrowDirection();\n    this._setAnimationTransitionState(\n        {toState: this._isSorted() ? 'active' : this._arrowDirection});\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /**\n   * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n   * user showing what the active sort will become. If set to false, the arrow will fade away.\n   */\n  _setIndicatorHintVisible(visible: boolean) {\n    // No-op if the sort header is disabled - should not make the hint visible.\n    if (this._isDisabled() && visible) { return; }\n\n    this._showIndicatorHint = visible;\n\n    if (!this._isSorted()) {\n      this._updateArrowDirection();\n      if (this._showIndicatorHint) {\n        this._setAnimationTransitionState({fromState: this._arrowDirection, toState: 'hint'});\n      } else {\n        this._setAnimationTransitionState({fromState: 'hint', toState: this._arrowDirection});\n      }\n    }\n  }\n\n  /**\n   * Sets the animation transition view state for the arrow's position and opacity. If the\n   * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n   * no animation appears.\n   */\n  _setAnimationTransitionState(viewState: ArrowViewStateTransition) {\n    this._viewState = viewState;\n\n    // If the animation for arrow position state (opacity/translation) should be disabled,\n    // remove the fromState so that it jumps right to the toState.\n    if (this._disableViewStateAnimation) {\n      this._viewState = {toState: viewState.toState};\n    }\n  }\n\n  /** Triggers the sort on this sort header and removes the indicator hint. */\n  _handleClick() {\n    if (this._isDisabled()) { return; }\n\n    this._sort.sort(this);\n\n    // Do not show the animation if the header was already shown in the right position.\n    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n      this._disableViewStateAnimation = true;\n    }\n\n    // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n    // the direction it is facing.\n    const viewState: ArrowViewStateTransition = this._isSorted() ?\n        {fromState: this._arrowDirection, toState: 'active'} :\n        {fromState: 'active', toState: this._arrowDirection};\n    this._setAnimationTransitionState(viewState);\n\n    this._showIndicatorHint = false;\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  /** Returns the animation state for the arrow direction (indicator and pointers). */\n  _getArrowDirectionState() {\n    return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n  }\n\n  /** Returns the arrow position state (opacity, translation). */\n  _getArrowViewState() {\n    const fromState = this._viewState.fromState;\n    return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n  }\n\n  /**\n   * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n   * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n   * active sorted direction. The reason this is updated through a function is because the direction\n   * should only be changed at specific times - when deactivated but the hint is displayed and when\n   * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n   * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n   * preserving its direction, even though the next sort direction is actually different and should\n   * only be changed once the arrow displays again (hint or activation).\n   */\n  _updateArrowDirection() {\n    this._arrowDirection = this._isSorted() ?\n        this._sort.direction :\n        (this.start || this._sort.start);\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n\n  /**\n   * Gets the aria-sort attribute that should be applied to this sort header. If this header\n   * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n   * says that the aria-sort property should only be present on one header at a time, so removing\n   * ensures this is true.\n   */\n  _getAriaSortAttribute() {\n    if (!this._isSorted()) { return null; }\n\n    return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkStepLabel = CdkStepLabel;\n\n@Directive({\n  selector: '[matStepLabel]',\n})\nexport class MatStepLabel extends _CdkStepLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Stepper data that is required for internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** Label that is rendered below optional steps. */\n  optionalLabel: string = 'Optional';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  TemplateRef,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperIntl} from './stepper-intl';\nimport {MatStepperIconContext} from './stepper-icon';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStepHeader implements OnDestroy {\n  private _intlSubscription: Subscription;\n\n  /** State of the given step. */\n  @Input() state: string;\n\n  /** Label of the given step. */\n  @Input() label: MatStepLabel | string;\n\n  /** Overrides for the header icons, passed in via the stepper. */\n  @Input() iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>};\n\n  /** Index of the given step. */\n  @Input() index: number;\n\n  /** Whether the given step is selected. */\n  @Input() selected: boolean;\n\n  /** Whether the given step label is active. */\n  @Input() active: boolean;\n\n  /** Whether the given step is optional. */\n  @Input() optional: boolean;\n\n  constructor(\n    public _intl: MatStepperIntl,\n    private _focusMonitor: FocusMonitor,\n    private _element: ElementRef,\n    changeDetectorRef: ChangeDetectorRef) {\n    _focusMonitor.monitor(_element.nativeElement, true);\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n\n  /** Returns string label of given step if it is a text label. */\n  _stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n\n  /** Returns MatStepLabel if the label of given step is a template label. */\n  _templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n\n  /** Returns the host HTML element. */\n  _getHostElement() {\n    return this._element.nativeElement;\n  }\n\n  /** Template context variables that are exposed to the `matStepperIcon` instances. */\n  _getIconContext(): MatStepperIconContext {\n    return {\n      index: this.index,\n      active: this.active,\n      optional: this.optional\n    };\n  }\n\n  focus() {\n    this._getHostElement().focus();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material steppers. */\nexport const matStepperAnimations: {\n  readonly horizontalStepTransition: AnimationTriggerMetadata;\n  readonly verticalStepTransition: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions the step along the X axis in a horizontal stepper. */\n  horizontalStepTransition: trigger('stepTransition', [\n    state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n    state('current', style({transform: 'none', visibility: 'visible'})),\n    state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n    transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n  ]),\n\n  /** Animation that transitions the step along the Y axis in a vertical stepper. */\n  verticalStepTransition: trigger('stepTransition', [\n    state('previous', style({height: '0px', visibility: 'hidden'})),\n    state('next', style({height: '0px', visibility: 'hidden'})),\n    state('current', style({height: '*', visibility: 'visible'})),\n    transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, TemplateRef} from '@angular/core';\n\n/** Template context available to an attached `matStepperIcon`. */\nexport interface MatStepperIconContext {\n  /** Index of the step. */\n  index: number;\n  /** Whether the step is currently active. */\n  active: boolean;\n  /** Whether the step is optional. */\n  optional: boolean;\n}\n\n/**\n * Template to be used to override the icons inside the step header.\n */\n@Directive({\n  selector: 'ng-template[matStepperIcon]',\n})\nexport class MatStepperIcon {\n  /** Name of the icon to be overridden. */\n  @Input('matStepperIcon') name: 'edit' | 'done' | 'number';\n\n  constructor(public templateRef: TemplateRef<MatStepperIconContext>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {CdkStep, CdkStepper, StepContentPositionState} from '@angular/cdk/stepper';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Optional,\n  Output,\n  QueryList,\n  SkipSelf,\n  TemplateRef,\n  ViewChildren,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {DOCUMENT} from '@angular/common';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {takeUntil} from 'rxjs/operators';\nimport {matStepperAnimations} from './stepper-animations';\nimport {MatStepperIcon, MatStepperIconContext} from './stepper-icon';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkStepper = CdkStepper;\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: ErrorStateMatcher, useExisting: MatStep}],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matStep',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\n  /** Content for step label given by `<ng-template matStepLabel>`. */\n  @ContentChild(MatStepLabel) stepLabel: MatStepLabel;\n\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher) {\n    super(stepper);\n  }\n\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    const customErrorState = !!(control && control.invalid && this.interacted);\n\n    return originalErrorState || customErrorState;\n  }\n}\n\n\n@Directive({\n  selector: '[matStepper]'\n})\nexport class MatStepper extends _CdkStepper implements AfterContentInit {\n  /** The list of step headers of the steps in the stepper. */\n  @ViewChildren(MatStepHeader) _stepHeader: QueryList<MatStepHeader>;\n\n  /** Steps that the stepper holds. */\n  @ContentChildren(MatStep) _steps: QueryList<MatStep>;\n\n  /** Custom icon overrides passed in by the consumer. */\n  @ContentChildren(MatStepperIcon) _icons: QueryList<MatStepperIcon>;\n\n  /** Event emitted when the current step is done transitioning in. */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Consumer-specified template-refs to be used to override the header icons. */\n  _iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>} = {};\n\n  ngAfterContentInit() {\n    const icons = this._icons.toArray();\n\n    ['edit', 'done', 'number'].forEach(name => {\n      const override = icons.find(icon => icon.name === name);\n\n      if (override) {\n        this._iconOverrides[name] = override.templateRef;\n      }\n    });\n\n    // Mark the component for change detection whenever the content children query changes\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\n  }\n\n  _animationDone(event: AnimationEvent) {\n    if ((event.toState as StepContentPositionState) === 'current') {\n      this.animationDone.emit();\n    }\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-horizontal-stepper',\n  exportAs: 'matHorizontalStepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    'aria-orientation': 'horizontal',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.horizontalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatHorizontalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatHorizontalStepper extends MatStepper { }\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-vertical-stepper',\n  exportAs: 'matVerticalStepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'aria-orientation': 'vertical',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.verticalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatVerticalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatVerticalStepper extends MatStepper {\n  constructor(\n    @Optional() dir: Directionality,\n    changeDetectorRef: ChangeDetectorRef,\n    // @breaking-change 8.0.0 `elementRef` and `_document` parameters to become required.\n    elementRef?: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) _document?: any) {\n    super(dir, changeDetectorRef, elementRef, _document);\n    this._orientation = 'vertical';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepper, CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {MatStepper} from './stepper';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkStepperNext = CdkStepperNext;\nexport const _CdkStepperPrevious = CdkStepperPrevious;\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperNext]',\n  host: {\n    '(click)': '_stepper.next()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperNext extends _CdkStepperNext {}\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperPrevious]',\n  host: {\n    '(click)': '_stepper.previous()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperPrevious extends _CdkStepperPrevious {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {ErrorStateMatcher, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nimport {MatStepperIcon} from './stepper-icon';\nimport {MatStepperIntl} from './stepper-intl';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule,\n    MatRippleModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  declarations: [\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  providers: [MatStepperIntl, ErrorStateMatcher],\n})\nexport class MatStepperModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkTable = CdkTable;\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table, table[mat-table]',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTable<T> extends _CdkTable<T> {\n  /** Overrides the sticky CSS class set by the `CdkTable`. */\n  protected stickyCssClass = 'mat-table-sticky';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef, CdkFooterCell, CdkFooterCellDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkCellDef = CdkCellDef;\nexport const _CdkHeaderCellDef = CdkHeaderCellDef;\nexport const _CdkFooterCellDef = CdkFooterCellDef;\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends _CdkCellDef {}\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends _CdkHeaderCellDef {}\n\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matFooterCellDef]',\n  providers: [{provide: CdkFooterCellDef, useExisting: MatFooterCellDef}]\n})\nexport class MatFooterCellDef extends _CdkFooterCellDef {}\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [{provide: CdkColumnDef, useExisting: MatColumnDef}],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n\n  /** Whether this column should be sticky positioned at the start of the row */\n  @Input() sticky: boolean;\n\n  /** Whether this column should be sticky positioned on the end of the row */\n  @Input() stickyEnd: boolean;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell, th[mat-header-cell]',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Footer cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-footer-cell, td[mat-footer-cell]',\n  host: {\n    'class': 'mat-footer-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatFooterCell extends CdkFooterCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell, td[mat-cell]',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  ViewEncapsulation\n} from '@angular/core';\nimport {\n  CDK_ROW_TEMPLATE, CdkFooterRow, CdkFooterRowDef,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef,\n} from '@angular/cdk/table';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkHeaderRowDef = CdkHeaderRowDef;\nexport const _CdkFooterRowDef = CdkFooterRowDef;\nexport const _CdkRowDef = CdkRowDef;\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef', 'sticky: matHeaderRowDefSticky'],\n})\nexport class MatHeaderRowDef extends _CdkHeaderRowDef {}\n\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\n@Directive({\n  selector: '[matFooterRowDef]',\n  providers: [{provide: CdkFooterRowDef, useExisting: MatFooterRowDef}],\n  inputs: ['columns: matFooterRowDef', 'sticky: matFooterRowDefSticky'],\n})\nexport class MatFooterRowDef extends _CdkFooterRowDef {}\n\n/**\n * Data row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends _CdkRowDef<T> {}\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row, tr[mat-header-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n  providers: [{provide: CdkHeaderRow, useExisting: MatHeaderRow}],\n})\nexport class MatHeaderRow extends CdkHeaderRow { }\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-footer-row, tr[mat-footer-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-footer-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matFooterRow',\n  providers: [{provide: CdkFooterRow, useExisting: MatFooterRow}],\n})\nexport class MatFooterRow extends CdkFooterRow { }\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row, tr[mat-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n  providers: [{provide: CdkRow, useExisting: MatRow}],\n})\nexport class MatRow extends CdkRow { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {\n  MatCell,\n  MatCellDef,\n  MatColumnDef,\n  MatFooterCell,\n  MatFooterCellDef,\n  MatHeaderCell,\n  MatHeaderCellDef\n} from './cell';\nimport {\n  MatFooterRow,\n  MatFooterRowDef,\n  MatHeaderRow,\n  MatHeaderRowDef,\n  MatRow,\n  MatRowDef\n} from './row';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\nconst EXPORTED_DECLARATIONS = [\n  // Table\n  MatTable,\n\n  // Template defs\n  MatHeaderCellDef,\n  MatHeaderRowDef,\n  MatColumnDef,\n  MatCellDef,\n  MatRowDef,\n  MatFooterCellDef,\n  MatFooterRowDef,\n\n  // Cell directives\n  MatHeaderCell,\n  MatCell,\n  MatFooterCell,\n\n  // Row directions\n  MatHeaderRow,\n  MatRow,\n  MatFooterRow,\n];\n\n@NgModule({\n  imports: [CdkTableModule, CommonModule, MatCommonModule],\n  exports: EXPORTED_DECLARATIONS,\n  declarations: EXPORTED_DECLARATIONS,\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {_isNumberValue} from '@angular/cdk/coercion';\nimport {DataSource} from '@angular/cdk/table';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  merge,\n  Observable,\n  of as observableOf,\n  Subscription\n} from 'rxjs';\nimport {MatPaginator, PageEvent} from '@angular/material/paginator';\nimport {MatSort, Sort} from '@angular/material/sort';\nimport {map} from 'rxjs/operators';\n\n/**\n * Corresponds to `Number.MAX_SAFE_INTEGER`. Moved out into a variable here due to\n * flaky browser support and the value not being defined in Closure's typings.\n */\nconst MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport class MatTableDataSource<T> extends DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private readonly _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private readonly _filter = new BehaviorSubject<string>('');\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription = Subscription.EMPTY;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() { return this._data.value; }\n  set data(data: T[]) { this._data.next(data); }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter(): string { return this._filter.value; }\n  set filter(filter: string) { this._filter.next(filter); }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort(): MatSort | null { return this._sort; }\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): MatPaginator | null { return this._paginator; }\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting through\n   * the default sortData function.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value: any = data[sortHeaderId];\n\n    if (_isNumberValue(value)) {\n      const numberValue = Number(value);\n\n      // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we\n      // leave them as strings. For more info: https://goo.gl/y5vbSg\n      return numberValue < MAX_SAFE_INTEGER ? numberValue : value;\n    }\n\n    return value;\n  }\n\n  /**\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n   * By default, the function retrieves the active sort and its direction and compares data\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n   * of data ordering.\n   * @param data The array of data that should be sorted.\n   * @param sort The connected MatSort that holds the current sort state.\n   */\n  sortData: ((data: T[], sort: MatSort) => T[]) = (data: T[], sort: MatSort): T[] => {\n    const active = sort.active;\n    const direction = sort.direction;\n    if (!active || direction == '') { return data; }\n\n    return data.sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n      // one value exists while the other doesn't. In this case, existing value should come first.\n      // This avoids inconsistent results when comparing values to undefined/null.\n      // If neither value exists, return 0 (equal).\n      let comparatorResult = 0;\n      if (valueA != null && valueB != null) {\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      } else if (valueA != null) {\n        comparatorResult = 1;\n      } else if (valueB != null) {\n        comparatorResult = -1;\n      }\n\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const accumulator = (currentTerm, key) => currentTerm + data[key];\n    const dataStr = Object.keys(data).reduce(accumulator, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // The events should emit whenever the component emits a change or initializes, or if no\n    // component is provided, a stream with just a null event should be provided.\n    // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n    // pipeline can progress to the next step. Note that the value from these streams are not used,\n    // they purely act as a signal to progress in the pipeline.\n    const sortChange: Observable<Sort|null> = this._sort ?\n        merge<Sort>(this._sort.sortChange, this._sort.initialized) :\n        observableOf(null);\n    const pageChange: Observable<PageEvent|null> = this._paginator ?\n        merge<PageEvent>(this._paginator.page, this._paginator.initialized) :\n        observableOf(null);\n\n    const dataStream = this._data;\n    // Watch for base data or filter changes to provide a filtered set of data.\n    const filteredData = combineLatest(dataStream, this._filter)\n      .pipe(map(([data]) => this._filterData(data)));\n    // Watch for filtered data or sort changes to provide an ordered set of data.\n    const orderedData = combineLatest(filteredData, sortChange)\n      .pipe(map(([data]) => this._orderData(data)));\n    // Watch for ordered data or page changes to provide a paged set of data.\n    const paginatedData = combineLatest(orderedData, pageChange)\n      .pipe(map(([data]) => this._pageData(data)));\n    // Watched for paged data changes and send the result to the table to render.\n    this._renderChangesSubscription.unsubscribe();\n    this._renderChangesSubscription = paginatedData.subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overridden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) { return data; }\n\n    return this.sortData(data.slice(), this.sort);\n  }\n\n  /**\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice().splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      if (!this.paginator) { return; }\n\n      this.paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (this.paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(this.paginator.length / this.paginator.pageSize) - 1 || 0;\n        this.paginator.pageIndex = Math.min(this.paginator.pageIndex, lastPageIndex);\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  HammerInput,\n  HasTabIndex,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {Subscription} from 'rxjs';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nexport class MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSliderMixinBase =\n  mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(click)': '_onClick($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert(): boolean { return this._invert; }\n  set invert(value: boolean) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundToDecimal = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value: boolean) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /** Value of the slider. */\n  @Input()\n  get value(): number | null {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      let value = coerceNumberProperty(v);\n\n      // While incrementing by a decimal we can end up with values like 33.300000000000004.\n      // Truncate it to ensure that it matches the label and to make it easier to work with.\n      if (this._roundToDecimal) {\n        value = parseFloat(value.toFixed(this._roundToDecimal));\n      }\n\n      this._value = value;\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /**\n   * Function that will be used to format the value before it is displayed\n   * in the thumb label. Can be used to format very large number in order\n   * for them to fit into the slider thumb.\n   */\n  @Input() displayWith: (value: number | null) => string | number;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() readonly change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() readonly input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /**\n   * Emits when the raw value of the slider changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<number | null> = new EventEmitter<number | null>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    if (this.displayWith) {\n      return this.displayWith(this.value);\n    }\n\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundToDecimal && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundToDecimal);\n    }\n\n    return this.value || 0;\n  }\n\n  /** set focus to the host element */\n  focus() {\n    this._focusHostElement();\n  }\n\n  /** blur the host element */\n  blur() {\n    this._blurHostElement();\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${1 - this.percent}, 1` : `${1 - this.percent}, 1, 1`;\n    const sign = this._invertMouseCoords ? '-' : '';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${this.percent}, 1` : `${this.percent}, 1, 1`;\n    const sign = this._invertMouseCoords ? '' : '-';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._direction == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._direction == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._direction == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundToDecimal: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper') private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  private get _invertMouseCoords() {\n    return (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private get _direction() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string,\n              // @breaking-change 7.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef.nativeElement, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onClick(event: MouseEvent) {\n    if (this.disabled) {\n      return;\n    }\n\n    let oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    // Emit a change and input event if the value changed.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value && !this.disabled) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled) { return; }\n\n    let oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._direction == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._direction == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n\n    if (this._invertMouseCoords) {\n      percent = 1 - percent;\n    }\n\n    // Since the steps may not divide cleanly into the max value, if the user\n    // slid to 0 or 100 percent, we jump to the min/max value. This approach\n    // is slightly more intuitive than using `Math.ceil` below, because it\n    // follows the user's pointer closer.\n    if (percent === 0) {\n      this.value = this.min;\n    } else if (percent === 1) {\n      this.value = this.max;\n    } else {\n      const exactValue = this._calculateValue(percent);\n\n      // This calculation finds the closest step by finding the closest\n      // whole number divisible by the step relative to the min.\n      const closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n\n      // The value needs to snap to the min and max.\n      this.value = this._clamp(closestValue, this.min, this.max);\n    }\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.valueChange.emit(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Blurs the native element. */\n  private _blurHostElement() {\n    this._elementRef.nativeElement.blur();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable, Subject} from 'rxjs';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n  /** Whether the snack bar was dismissed using the action button. */\n  dismissedByAction: boolean;\n}\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has been dismissed. */\n  private readonly _afterDismissed = new Subject<MatSnackBarDismiss>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private readonly _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  /** Whether the snack bar was dismissed using the action button. */\n  private _dismissedByAction = false;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  dismissWithAction(): void {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * @breaking-change 7.0.0\n   */\n  closeWithAction(): void {\n    this.dismissWithAction();\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<MatSnackBarDismiss> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /**\n   * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n   * component or template, the announcement message will default to the specified message.\n   */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material snack bar. */\nexport const matSnackBarAnimations: {\n  readonly contentFade: AnimationTriggerMetadata;\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  contentFade: trigger('contentFade', [\n    transition(':enter', [\n      style({opacity: '0'}),\n      animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.STANDARD_CURVE}`)\n    ])\n  ]),\n\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('visible-top, visible-bottom', style({transform: 'translateY(0%)'})),\n    transition('visible-top => hidden-top, visible-bottom => hidden-bottom',\n      animate(`${AnimationDurations.EXITING} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible-top, void => visible-bottom',\n      animate(`${AnimationDurations.ENTERING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\nimport {matSnackBarAnimations} from './snack-bar-animations';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matSnackBarAnimations.contentFade],\n  host: {\n    '[@contentFade]': '',\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: { message: string, action: string };\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.dismissWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  CdkPortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  NgZone,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\nimport {matSnackBarAnimations} from './snack-bar-animations';\nimport {MatSnackBarConfig} from './snack-bar-config';\n\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    'role': 'alert',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  readonly _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  readonly _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    /** The snack bar configuration. */\n    public snackBarConfig: MatSnackBarConfig) {\n\n    super();\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState.startsWith('hidden')) {\n      this._completeExit();\n    }\n\n    if (toState.startsWith('visible')) {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = `visible-${this.snackBarConfig.verticalPosition}`;\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    this._animationState = `hidden-${this.snackBarConfig.verticalPosition}`;\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n  private _applySnackBarClasses() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClasses = this.snackBarConfig.panelClass;\n\n    if (panelClasses) {\n      if (Array.isArray(panelClasses)) {\n        // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n        panelClasses.forEach(cssClass => element.classList.add(cssClass));\n      } else {\n        element.classList.add(panelClasses);\n      }\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n  }\n\n  /** Asserts that no content is already attached to the container. */\n  private _assertNotAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatButtonModule,\n    MatCommonModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  EmbeddedViewRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarModule} from './snack-bar-module';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/** Injection token that can be used to specify default snack bar. */\nexport const MAT_SNACK_BAR_DEFAULT_OPTIONS =\n    new InjectionToken<MatSnackBarConfig>('mat-snack-bar-default-options', {\n      providedIn: 'root',\n      factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY(): MatSnackBarConfig {\n  return new MatSnackBarConfig();\n}\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable({providedIn: MatSnackBarModule})\nexport class MatSnackBar {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar,\n      @Inject(MAT_SNACK_BAR_DEFAULT_OPTIONS) private _defaultConfig: MatSnackBarConfig) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig):\n    MatSnackBarRef<T> {\n    return this._attach(component, config) as MatSnackBarRef<T>;\n  }\n\n  /**\n   * Creates and dispatches a snack bar with a custom template for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param template Template to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromTemplate(template: TemplateRef<any>, config?: MatSnackBarConfig):\n    MatSnackBarRef<EmbeddedViewRef<any>> {\n    return this._attach(template, config);\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = {...this._defaultConfig, ...config};\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n\n    if (!_config.announcementMessage) {\n      _config.announcementMessage = message;\n    }\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatSnackBarConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatSnackBarContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component or a template as the content of the snack bar container.\n   */\n  private _attach<T>(content: ComponentType<T> | TemplateRef<T>, userConfig?: MatSnackBarConfig):\n    MatSnackBarRef<T | EmbeddedViewRef<any>> {\n\n    const config = {...new MatSnackBarConfig(), ...this._defaultConfig, ...userConfig};\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T | EmbeddedViewRef<any>>(container, overlayRef);\n\n    if (content instanceof TemplateRef) {\n      const portal = new TemplatePortal(content, null!, {\n        $implicit: config.data,\n        snackBarRef\n      } as any);\n\n      snackBarRef.instance = container.attachTemplatePortal(portal);\n    } else {\n      const injector = this._createInjector(config, snackBarRef);\n      const portal = new ComponentPortal(content, undefined, injector);\n      const contentRef = container.attachComponentPortal<T>(portal);\n\n      // We can't pass this via the injector, because the injector is created earlier.\n      snackBarRef.instance = contentRef.instance;\n    }\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\n      takeUntil(overlayRef.detachments().pipe(take(1)))\n    ).subscribe(state => {\n      if (state.matches) {\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n      } else {\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n      }\n    });\n\n    this._animateSnackBar(snackBarRef, config);\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /** Animates the old snack bar out and the new one in. */\n  private _animateSnackBar(snackBarRef: MatSnackBarRef<any>, config: MatSnackBarConfig) {\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (config.duration && config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration!));\n    }\n\n    if (config.announcementMessage) {\n      this._live.announce(config.announcementMessage, config.politeness);\n    }\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    return new PortalInjector(userInjector || this._injector, new WeakMap<any, any>([\n      [MatSnackBarRef, snackBarRef],\n      [MAT_SNACK_BAR_DATA, config.data]\n    ]));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CanDisable, HasInitialized, mixinDisabled, mixinInitialized} from '@angular/material/core';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError,\n  getSortInvalidDirectionError\n} from './sort-errors';\nimport {Subject} from 'rxjs';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nexport class MatSortBase {}\nexport const _MatSortMixinBase = mixinInitialized(mixinDisabled(MatSortBase));\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase\n    implements CanDisable, HasInitialized, OnChanges, OnDestroy, OnInit {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  get direction(): SortDirection { return this._direction; }\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable): void {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable): void {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable): void {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.emit({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnInit() {\n    this._markInitialized();\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusMonitor, FocusOrigin, FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {CdkScrollable, ScrollDispatcher} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {fromEvent, merge, Observable, Subject} from 'rxjs';\nimport {debounceTime, filter, map, startWith, take, takeUntil} from 'rxjs/operators';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/**\n * Throws an exception when two MatDrawer are matching the same position.\n * @docs-private\n */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/** Result of the toggle promise that indicates the state of the drawer. */\nexport type MatDrawerToggleResult = 'open' | 'close';\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n      providedIn: 'root',\n      factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY(): boolean {\n  return false;\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContent extends CdkScrollable implements AfterContentInit {\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) public _container: MatDrawerContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(elementRef, scrollDispatcher, ngZone);\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMarginChanges.subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value: 'start' | 'end') {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value: 'over' | 'push' | 'side') {\n    this._mode = value;\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** Whether the drawer should focus the first focusable element automatically when opened. */\n  @Input()\n  get autoFocus(): boolean { return this._autoFocus; }\n  set autoFocus(value: boolean) { this._autoFocus = coerceBooleanProperty(value); }\n  private _autoFocus: boolean = true;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new EventEmitter<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() readonly openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer's position changes. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  readonly _modeChanged = new Subject();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              private _ngZone: NgZone,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n\n    /**\n     * Listen to `keydown` events outside the zone so that change detection is not run every\n     * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n     * and we don't have close disabled.\n     */\n    this._ngZone.runOutsideAngular(() => {\n        fromEvent(this._elementRef.nativeElement, 'keydown').pipe(\n            filter((event: KeyboardEvent) => event.keyCode === ESCAPE && !this.disableClose)\n        ).subscribe((event) => this._ngZone.run(() => {\n            this.close();\n            event.stopPropagation();\n        }));\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { this.toggle(coerceBooleanProperty(value)); }\n  private _opened: boolean = false;\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<MatDrawerToggleResult> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<MatDrawerToggleResult> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<MatDrawerToggleResult> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n\n    return new Promise<MatDrawerToggleResult>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n    });\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStarted.emit(event);\n  }\n\n  _onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n        (toState === 'void' && fromState.indexOf('open') === 0)) {\n      this.openedChange.emit(this._opened);\n    }\n  }\n\n  get _width(): number {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n}\n\n\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContainer implements AfterContentInit, DoCheck, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent) _content: MatDrawerContent;\n  @ViewChild(MatDrawerContent) _userContent: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /**\n   * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n   * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n   * mode as well.\n   */\n  @Input()\n  get hasBackdrop() {\n    if (this._backdropOverride == null) {\n      return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n    }\n\n    return this._backdropOverride;\n  }\n  set hasBackdrop(value: any) {\n    this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n  }\n  _backdropOverride: boolean | null;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() readonly backdropClick: EventEmitter<void> = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private readonly _doCheckSubject = new Subject<void>();\n\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _contentMargins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  readonly _contentMarginChanges = new Subject<{left: number|null, right: number|null}>();\n\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n  get scrollable(): CdkScrollable {\n    return this._userContent || this._content;\n  }\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this._updateContentMargins();\n      });\n    }\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this._updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this._updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      takeUntil(this._drawers.changes),\n      filter((event: AnimationEvent) => event.fromState !== event.toState)\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant' && this._animationMode !== 'NoopAnimations') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this._updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this._updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add('mat-drawer-opened');\n    } else {\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (this._dir && this._dir.value === 'rtl') {\n      this._left = this._end;\n      this._right = this._start;\n    } else {\n      this._left = this._start;\n      this._right = this._end;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer))\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||\n           (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end));\n  }\n\n  private _canHaveBackdrop(drawer: MatDrawer): boolean {\n    return drawer.mode !== 'side' || !!this._backdropOverride;\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): drawer is MatDrawer {\n    return drawer != null && drawer.opened;\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  private _updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        let width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        let width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    // If either `right` or `left` is zero, don't set a style to the element. This\n    // allows users to specify a custom size via CSS class in SSR scenarios where the\n    // measured widths will always be zero. Note that we reset to `null` here, rather\n    // than below, in order to ensure that the types in the `if` below are consistent.\n    left = left || null!;\n    right = right || null!;\n\n    if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n      this._contentMargins = {left, right};\n\n      // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n      // to do it only when something changed, otherwise we can end up hitting the zone too often.\n      this._ngZone.run(() => this._contentMarginChanges.next(this._contentMargins));\n    }\n\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  forwardRef,\n  Inject,\n  Input,\n  ViewEncapsulation,\n  QueryList,\n  ElementRef,\n  NgZone,\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(changeDetectorRef, container, elementRef, scrollDispatcher, ngZone);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers: QueryList<MatSidenav>;\n  @ContentChild(MatSidenavContent) _content: MatSidenavContent;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {ScrollingModule} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    ScrollingModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/** Default `mat-slide-toggle` options that can be overridden. */\nexport interface MatSlideToggleDefaultOptions {\n  /** Whether toggle action triggers value changes in slide toggle. */\n  disableToggleValue?: boolean;\n  /** Whether drag action triggers value changes in slide toggle. */\n  disableDragValue?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-slide-toggle`. */\nexport const MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS =\n  new InjectionToken<MatSlideToggleDefaultOptions>('mat-slide-toggle-default-options', {\n    providedIn: 'root',\n    factory: () => ({disableToggleValue: false, disableDragValue: false})\n  });\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HammerInput,\n  HasTabIndex,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {\n  MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,\n  MatSlideToggleDefaultOptions\n} from './slide-toggle-config';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nexport class MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSlideToggleMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n    ControlValueAccessor, CanDisable, CanColor, HasTabIndex, CanDisableRipple {\n\n  private onChange = (_: any) => {};\n  private onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Whether the thumb is currently being dragged. */\n  private _dragging = false;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  private _dragPercentage: number;\n\n  /** Reference to the thumb HTMLElement. */\n  @ViewChild('thumbContainer') _thumbEl: ElementRef<HTMLElement>;\n\n  /** Reference to the thumb bar HTMLElement. */\n  @ViewChild('toggleBar') _thumbBarEl: ElementRef<HTMLElement>;\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the slide-toggle element is checked or not */\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\n      new EventEmitter<MatSlideToggleChange>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle input is toggled.\n   * This event always fire when user toggle the slide toggle, but does not mean the slide toggle's\n   * value is changed. The event does not fire when user drag to change the slide toggle value.\n   */\n  @Output() readonly toggleChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle is dragged.\n   * This event always fire when user drag the slide toggle to make a change that greater than 50%.\n   * It does not mean the slide toggle's value is changed. The event does not fire when user toggle\n   * the slide toggle to change the slide toggle's value.\n   */\n  @Output() readonly dragChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated The `_platform` parameter to be removed.\n               * @breaking-change 7.0.0\n               */\n              _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string,\n              private _ngZone: NgZone,\n              @Inject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS)\n                  public defaults: MatSlideToggleDefaultOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              @Optional() private _dir?: Directionality) {\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._focusMonitor\n      .monitor(this._elementRef.nativeElement, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin) {\n          // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n          // Angular does not expect events to be raised during change detection, so any state\n          // change (such as a form control's 'ng-touched') will cause a changed-after-checked\n          // error. See https://github.com/angular/angular/issues/17793. To work around this,\n          // we defer telling the form control it has been touched until the next tick.\n          Promise.resolve().then(() => this.onTouched());\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    if (!this._dragging) {\n      this.toggleChange.emit();\n    }\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back. Or when the slide toggle's config\n    // disabled toggle change event by setting `disableToggleValue: true`, the slide toggle's value\n    // does not change, and the checked state of the underlying input needs to be changed back.\n    if (this._dragging || this.defaults.disableToggleValue) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n    this.onChange(this.checked);\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this.onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n  _onDragStart() {\n    if (!this.disabled && !this._dragging) {\n      const thumbEl = this._thumbEl.nativeElement;\n      this._thumbBarWidth = this._thumbBarEl.nativeElement.clientWidth - thumbEl.clientWidth;\n      thumbEl.classList.add('mat-dragging');\n\n      this._previousChecked = this.checked;\n      this._dragging = true;\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._dragging) {\n      const direction = this._dir && this._dir.value === 'rtl' ? -1 : 1;\n      this._dragPercentage = this._getDragPercentage(event.deltaX * direction);\n      // Calculate the moved distance based on the thumb bar width.\n      const dragX = (this._dragPercentage / 100) * this._thumbBarWidth * direction;\n      this._thumbEl.nativeElement.style.transform = `translate3d(${dragX}px, 0, 0)`;\n    }\n  }\n\n  _onDragEnd() {\n    if (this._dragging) {\n      const newCheckedValue = this._dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.dragChange.emit();\n        if (!this.defaults.disableDragValue) {\n          this.checked = newCheckedValue;\n          this._emitChangeEvent();\n        }\n      }\n\n      // The drag should be stopped outside of the current event handler, otherwise the\n      // click event will be fired before it and will revert the drag change.\n      this._ngZone.runOutsideAngular(() => setTimeout(() => {\n        if (this._dragging) {\n          this._dragging = false;\n          this._thumbEl.nativeElement.classList.remove('mat-dragging');\n\n          // Reset the transform because the component will take care\n          // of the thumb position after drag.\n          this._thumbEl.nativeElement.style.transform = '';\n        }\n      }));\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the slide-toggle changes.\n    // Since the slide-toggle uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlideToggle} from './slide-toggle';\n\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatSlideToggle, MatCommonModule],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Inject,\n  Input,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {Location} from '@angular/common';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {CanColor, mixinColor} from '@angular/material/core';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\n\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nexport class MatProgressBarBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\nexport const _MatProgressBarMixinBase = mixinColor(MatProgressBarBase, 'primary');\n\n/** Counter used to generate unique IDs for progress bars. */\nlet progressbarId = 0;\n\n/**\n * `<mat-progress-bar>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n    'class': 'mat-progress-bar',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor {\n  constructor(public _elementRef: ElementRef,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              /**\n               * @deprecated `location` parameter to be made required.\n               * @breaking-change 8.0.0\n               */\n              @Optional() location?: Location) {\n    super(_elementRef);\n\n    // We need to prefix the SVG reference with the current path, otherwise they won't work\n    // in Safari if the page has a `<base>` tag. Note that we need quotes inside the `url()`,\n    // because named route URLs can contain parentheses (see #12338).\n    this._rectangleFillValue = `url('${location ? location.path() : ''}#${this.progressbarId}')`;\n  }\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) { this._value = clamp(v || 0); }\n  private _value: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue(): number { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n  private _bufferValue: number = 0;\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** ID of the progress bar. */\n  progressbarId = `mat-progress-bar-${progressbarId++}`;\n\n  /** Attribute to be used for the `fill` attribute on the internal `rect` element. */\n  _rectangleFillValue: string;\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    const scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode === 'buffer') {\n      const scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  Inject,\n  Input,\n  ElementRef,\n  ViewEncapsulation,\n  Optional,\n  InjectionToken,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nexport class MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatProgressSpinnerMixinBase = mixinColor(MatProgressSpinnerBase, 'primary');\n\n/** Default `mat-progress-spinner` options that can be overridden. */\nexport interface MatProgressSpinnerDefaultOptions {\n  /** Diameter of the spinner. */\n  diameter?: number;\n  /** Width of the spinner's stroke. */\n  strokeWidth?: number;\n  /**\n   * Whether the animations should be force to be enabled, ignoring if the current environment is\n   * using NoopAnimationsModule.\n   */\n  _forceAnimations?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-progress-spinner`. */\nexport const MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS =\n    new InjectionToken<MatProgressSpinnerDefaultOptions>('mat-progress-spinner-default-options', {\n      providedIn: 'root',\n      factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY(): MatProgressSpinnerDefaultOptions {\n  return {diameter: BASE_SIZE};\n}\n\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/material2/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * `<mat-progress-spinner>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor {\n\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /** Tracks diameters of existing instances to de-dupe generated styles (default d = 100) */\n  private static diameters = new Set<number>([BASE_SIZE]);\n\n  /**\n   * Used for storing all of the generated keyframe animations.\n   * @dynamic\n   */\n  private static styleTag: HTMLStyleElement|null = null;\n\n  /** Whether the _mat-animation-noopable class should be applied, disabling animations.  */\n  _noopAnimations: boolean = this.animationMode === 'NoopAnimations' && (\n      !!this.defaults && !this.defaults._forceAnimations);\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number { return this._diameter; }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    if (!this._fallbackAnimation && !MatProgressSpinner.diameters.has(this._diameter)) {\n      this._attachStyleNode();\n    }\n  }\n  private _diameter = BASE_SIZE;\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @breaking-change 7.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  private defaults?: MatProgressSpinnerDefaultOptions) {\n\n    super(_elementRef);\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n\n    if (defaults) {\n      if (defaults.diameter) {\n        this.diameter = defaults.diameter;\n      }\n\n      if (defaults.strokeWidth) {\n        this.strokeWidth = defaults.strokeWidth;\n      }\n    }\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    _elementRef.nativeElement.classList.add(animationClass);\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this.diameter * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    let styleTag = MatProgressSpinner.styleTag;\n\n    if (!styleTag) {\n      styleTag = this._document.createElement('style');\n      this._document.head.appendChild(styleTag);\n      MatProgressSpinner.styleTag = styleTag;\n    }\n\n    if (styleTag && styleTag.sheet) {\n      (styleTag.sheet as CSSStyleSheet).insertRule(this._getAnimationText(), 0);\n    }\n\n    MatProgressSpinner.diameters.add(this.diameter);\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n}\n\n\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any,\n              // @breaking-changes 7.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  defaults?: MatProgressSpinnerDefaultOptions) {\n    super(elementRef, platform, document, animationMode, defaults);\n    this.mode = 'indeterminate';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  constructor(\n    /** The MatRadioButton that emits the change event. */\n    public source: MatRadioButton,\n    /** The value of the MatRadioButton. */\n    public value: any) {}\n}\n\n\n// Boilerplate for applying mixins to MatRadioGroup.\n/** @docs-private */\nexport class MatRadioGroupBase { }\nexport const _MatRadioGroupMixinBase = mixinDisabled(MatRadioGroupBase);\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n  inputs: ['disabled'],\n})\nexport class MatRadioGroup extends _MatRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n\n  /** Selected value for the radio group. */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n  set labelPosition(v) {\n    this._labelPosition = v === 'before' ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /**\n   * Value for the radio-group. Should equal the value of the selected radio button if there is\n   * a corresponding radio button with a matching value. If there is not such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value !== newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /**\n   * The currently selected radio button. If set to a new radio button, the radio group value\n   * will be updated to match the new selected button.\n   */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n    if (this._radios && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value === radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new MatRadioChange(this._selected!, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nexport class MatRadioButtonBase {\n  // Since the disabled property is manually defined for the MatRadioButton and isn't set up in\n  // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n  // defined to properly work.\n  disabled: boolean;\n\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nexport const _MatRadioButtonMixinBase =\n    mixinColor(mixinDisableRipple(mixinTabIndex(MatRadioButtonBase)), 'accent');\n\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['color', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, CanDisableRipple, HasTabIndex {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n    if (this._checked !== newCheckedState) {\n      this._checked = newCheckedState;\n      if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value !== value) {\n      this._value = value;\n      if (this.radioGroup !== null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value === value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    const newDisabledState = coerceBooleanProperty(value);\n    if (this._disabled !== newDisabledState) {\n      this._disabled = newDisabledState;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio. */\n  private _value: any = null;\n\n  /** The child ripple instance. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  /** Reference to the current focus ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Unregister function for _radioDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id !== this.id && name === this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    this.change.emit(new MatRadioChange(this, this._value));\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      if (this.radioGroup) {\n        this.radioGroup._touch();\n      }\n\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material drawers. */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    state('open, open-instant', style({\n      'transform': 'translate3d(0, 0, 0)',\n      'visibility': 'visible',\n    })),\n    state('void', style({\n      // Avoids the shadow showing up when closed in SSR.\n      'box-shadow': 'none',\n      'visibility': 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelect, MatSelectTrigger} from './select';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  keyframes,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/** Animations used by MatTooltip. */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({opacity: 0, transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('200ms cubic-bezier(0, 0, 0.2, 1)', keyframes([\n      style({opacity: 0, transform: 'scale(0)', offset: 0}),\n      style({opacity: 0.5, transform: 'scale(0.99)', offset: 0.5}),\n      style({opacity: 1, transform: 'scale(1)', offset: 1})\n    ]))),\n    transition('* => hidden', animate('100ms cubic-bezier(0, 0, 0.2, 1)', style({opacity: 0}))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatTooltip,\n  TooltipComponent,\n  MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './tooltip';\n\n@NgModule({\n  imports: [\n    A11yModule,\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable({providedIn: 'root'})\nexport class MatPaginatorIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel: string = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel: string = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel: string = 'Previous page';\n\n  /** A label for the button that moves to the first page. */\n  firstPageLabel: string = 'First page';\n\n  /** A label for the button that moves to the last page. */\n  lastPageLabel: string = 'Last page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatPaginatorIntl} from './paginator-intl';\nimport {HasInitialized, mixinInitialized} from '@angular/material/core';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /**\n   * Index of the page that was selected previously.\n   * @breaking-change 7.0.0 To be made into a required property.\n   */\n  previousPageIndex?: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n// Boilerplate for applying mixins to MatPaginator.\n/** @docs-private */\nexport class MatPaginatorBase {}\nexport const _MatPaginatorBase = mixinInitialized(MatPaginatorBase);\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatPaginator extends _MatPaginatorBase implements OnInit, OnDestroy, HasInitialized {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(value: number) {\n    this._pageIndex = Math.max(coerceNumberProperty(value), 0);\n    this._changeDetectorRef.markForCheck();\n  }\n  _pageIndex: number = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(value: number) {\n    this._length = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  _length: number = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(value: number) {\n    this._pageSize = Math.max(coerceNumberProperty(value), 0);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(value: number[]) {\n    this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Whether to hide the page size selection UI from the user. */\n  @Input()\n  get hidePageSize(): boolean { return this._hidePageSize; }\n  set hidePageSize(value: boolean) {\n    this._hidePageSize = coerceBooleanProperty(value);\n  }\n  private _hidePageSize = false;\n\n\n  /** Whether to show the first/last buttons UI to the user. */\n  @Input()\n  get showFirstLastButtons(): boolean { return this._showFirstLastButtons; }\n  set showFirstLastButtons(value: boolean) {\n    this._showFirstLastButtons = coerceBooleanProperty(value);\n  }\n  private _showFirstLastButtons = false;\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() readonly page: EventEmitter<PageEvent> = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n    this._markInitialized();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage(): void {\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex++;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage(): void {\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex--;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the first page if not already there. */\n  firstPage(): void {\n    // hasPreviousPage being false implies at the start\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = 0;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the last page if not already there. */\n  lastPage(): void {\n    // hasNextPage being false implies at the end\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = this.getNumberOfPages();\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage(): boolean {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage(): boolean {\n    const numberOfPages = this.getNumberOfPages();\n    return this.pageIndex < numberOfPages && this.pageSize != 0;\n  }\n\n  /** Calculate the number of pages */\n  getNumberOfPages(): number {\n    return Math.ceil(this.length / this.pageSize) - 1;\n  }\n\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    const previousPageIndex = this.pageIndex;\n\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n    this.pageSize = pageSize;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) === -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent(previousPageIndex: number) {\n    this.page.emit({\n      previousPageIndex,\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  TemplateRef,\n  ComponentFactoryResolver,\n  ApplicationRef,\n  Injector,\n  ViewContainerRef,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {TemplatePortal, DomPortalOutlet} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {Subject} from 'rxjs';\n\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\n@Directive({\n  selector: 'ng-template[matMenuContent]'\n})\nexport class MatMenuContent implements OnDestroy {\n  private _portal: TemplatePortal<any>;\n  private _outlet: DomPortalOutlet;\n\n  /** Emits when the menu content has been attached. */\n  _attached = new Subject<void>();\n\n  constructor(\n    private _template: TemplateRef<any>,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n    private _injector: Injector,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) private _document: any) {}\n\n  /**\n   * Attaches the content with a particular context.\n   * @docs-private\n   */\n  attach(context: any = {}) {\n    if (!this._portal) {\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n    }\n\n    this.detach();\n\n    if (!this._outlet) {\n      this._outlet = new DomPortalOutlet(this._document.createElement('div'),\n          this._componentFactoryResolver, this._appRef, this._injector);\n    }\n\n    const element: HTMLElement = this._template.elementRef.nativeElement;\n\n    // Because we support opening the same menu from different triggers (which in turn have their\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n    // risk it staying attached to a pane that's no longer in the DOM.\n    element.parentNode!.insertBefore(this._outlet.outletElement, element);\n    this._portal.attach(this._outlet, context);\n    this._attached.next();\n  }\n\n  /**\n   * Detaches the content.\n   * @docs-private\n   */\n  detach() {\n    if (this._portal.isAttached) {\n      this._portal.detach();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._outlet) {\n      this._outlet.dispose();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  query,\n  group,\n  sequence,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: AnimationTriggerMetadata;\n  readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [\n    state('void', style({\n      opacity: 0,\n      // This starts off from 0.01, instead of 0, because there's an issue in the Angular animations\n      // as of 4.2, which causes the animation to be skipped if it starts from 0.\n      transform: 'scale(0.01, 0.01)'\n    })),\n    transition('void => enter', sequence([\n      query('.mat-menu-content', style({opacity: 0})),\n      animate('100ms linear', style({opacity: 1, transform: 'scale(1, 0.5)'})),\n      group([\n        query('.mat-menu-content', animate('400ms cubic-bezier(0.55, 0, 0.55, 0.2)',\n          style({opacity: 1})\n        )),\n        animate('300ms cubic-bezier(0.25, 0.8, 0.25, 1)', style({transform: 'scale(1, 1)'})),\n      ])\n    ])),\n    transition('* => void', animate('150ms 50ms linear', style({opacity: 0})))\n  ]),\n\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n    // TODO(crisbeto): this is inside the `transformMenu`\n    // now. Remove next time we do breaking changes.\n    state('showing', style({opacity: 1})),\n    transition('void => *', [\n      style({opacity: 0}),\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const transformMenu = matMenuAnimations.transformMenu;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EventEmitter, TemplateRef, InjectionToken} from '@angular/core';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {Direction} from '@angular/cdk/bidi';\nimport {FocusOrigin} from '@angular/cdk/a11y';\nimport {MatMenuContent} from './menu-content';\n\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * @docs-private\n */\nexport const MAT_MENU_PANEL = new InjectionToken<MatMenuPanel>('MAT_MENU_PANEL');\n\n/**\n * Interface for a custom menu panel that can be used with `matMenuTriggerFor`.\n * @docs-private\n */\nexport interface MatMenuPanel<T = any> {\n  xPosition: MenuPositionX;\n  yPosition: MenuPositionY;\n  overlapTrigger: boolean;\n  templateRef: TemplateRef<any>;\n  close: EventEmitter<void | 'click' | 'keydown' | 'tab'>;\n  parentMenu?: MatMenuPanel | undefined;\n  direction?: Direction;\n  focusFirstItem: (origin?: FocusOrigin) => void;\n  resetActiveItem: () => void;\n  setPositionClasses?: (x: MenuPositionX, y: MenuPositionY) => void;\n  setElevation?(depth: number): void;\n  lazyContent?: MatMenuContent;\n  backdropClass?: string;\n  hasBackdrop?: boolean;\n  addItem?: (item: T) => void;\n  removeItem?: (item: T) => void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nexport class MatMenuItemBase {}\nexport const _MatMenuItemMixinBase = mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    'role': 'menuitem',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n    '(click)': '_checkDisabled($event)',\n    '(mouseenter)': '_handleMouseEnter()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n\n  private _document: Document;\n\n  /** Stream that emits when the menu item is hovered. */\n  readonly _hovered: Subject<MatMenuItem> = new Subject<MatMenuItem>();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(\n    private _elementRef: ElementRef,\n    @Inject(DOCUMENT) document?: any,\n    private _focusMonitor?: FocusMonitor,\n    @Inject(MAT_MENU_PANEL) @Optional() private _parentMenu?: MatMenuPanel<MatMenuItem>) {\n\n    // @breaking-change 7.0.0 make `_focusMonitor` and `document` required params.\n    super();\n\n    if (_focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      _focusMonitor.monitor(this._getHostElement(), false);\n    }\n\n    if (_parentMenu && _parentMenu.addItem) {\n      _parentMenu.addItem(this);\n    }\n\n    this._document = document;\n  }\n\n  /** Focuses the menu item. */\n  focus(origin: FocusOrigin = 'program'): void {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin);\n    } else {\n      this._getHostElement().focus();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._getHostElement());\n    }\n\n    if (this._parentMenu && this._parentMenu.removeItem) {\n      this._parentMenu.removeItem(this);\n    }\n\n    this._hovered.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  _handleMouseEnter() {\n    this._hovered.next(this);\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === textNodeType) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager, FocusOrigin} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, LEFT_ARROW, RIGHT_ARROW, DOWN_ARROW, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Output,\n  TemplateRef,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  OnInit,\n} from '@angular/core';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, switchMap, take} from 'rxjs/operators';\nimport {matMenuAnimations} from './menu-animations';\nimport {MatMenuContent} from './menu-content';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {AnimationEvent} from '@angular/animations';\n\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n\n  /** Class to be applied to the menu's backdrop. */\n  backdropClass: string;\n\n  /** Whether the menu has a backdrop. */\n  hasBackdrop?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options', {\n      providedIn: 'root',\n      factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_MENU_DEFAULT_OPTIONS_FACTORY(): MatMenuDefaultOptions {\n  return {\n    overlapTrigger: true,\n    xPosition: 'after',\n    yPosition: 'below',\n    backdropClass: 'cdk-overlay-transparent-backdrop',\n  };\n}\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 2;\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matMenu',\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  providers: [\n    {provide: MAT_MENU_PANEL, useExisting: MatMenu}\n  ]\n})\nexport class MatMenu implements AfterContentInit, MatMenuPanel<MatMenuItem>, OnInit, OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** Menu items inside the current menu. */\n  private _items: MatMenuItem[] = [];\n\n  /** Emits whenever the amount of menu items changes. */\n  private _itemChanges = new Subject<MatMenuItem[]>();\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter' = 'void';\n\n  /** Emits whenever an animation on the menu completes. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  /** Whether the menu is animating. */\n  _isAnimating: boolean;\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Class to be added to the backdrop element. */\n  @Input() backdropClass: string = this._defaultOptions.backdropClass;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition(): MenuPositionX { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition(): MenuPositionY { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) templateRef: TemplateRef<any>;\n\n  /**\n   * List of the items inside of a menu.\n   * @deprecated\n   * @breaking-change 7.0.0\n   */\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\n\n  /**\n   * Menu content that will be rendered lazily.\n   * @docs-private\n   */\n  @ContentChild(MatMenuContent) lazyContent: MatMenuContent;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  get overlapTrigger(): boolean { return this._overlapTrigger; }\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /** Whether the menu has a backdrop. */\n  @Input()\n  get hasBackdrop(): boolean | undefined { return this._hasBackdrop; }\n  set hasBackdrop(value: boolean | undefined) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n  private _hasBackdrop: boolean | undefined = this._defaultOptions.hasBackdrop;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    if (classes && classes.length) {\n      this._classList = classes.split(' ').reduce((obj: any, className: string) => {\n        obj[className] = true;\n        return obj;\n      }, {});\n\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   * @breaking-change 7.0.0\n   */\n  @Input()\n  get classList(): string { return this.panelClass; }\n  set classList(classes: string) { this.panelClass = classes; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() readonly closed: EventEmitter<void | 'click' | 'keydown' | 'tab'> =\n      new EventEmitter<void | 'click' | 'keydown' | 'tab'>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   * @breaking-change 7.0.0\n   */\n  @Output() close = this.closed;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngOnInit() {\n    this.setPositionClasses();\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatMenuItem>(this._items).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n  }\n\n  ngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    return this._itemChanges.pipe(\n      startWith(this._items),\n      switchMap(items => merge(...items.map(item => item._hovered)))\n    );\n  }\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n\n    switch (keyCode) {\n      case ESCAPE:\n        this.closed.emit('keydown');\n        event.stopPropagation();\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      default:\n        if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n          this._keyManager.setFocusOrigin('keyboard');\n        }\n\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n    if (this.lazyContent) {\n      this._ngZone.onStable.asObservable()\n        .pipe(take(1))\n        .subscribe(() => this._keyManager.setFocusOrigin(origin).setFirstItemActive());\n    } else {\n      this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n    }\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /**\n   * Registers a menu item with the menu.\n   * @docs-private\n   */\n  addItem(item: MatMenuItem) {\n    // We register the items through this method, rather than picking them up through\n    // `ContentChildren`, because we need the items to be picked up by their closest\n    // `mat-menu` ancestor. If we used `@ContentChildren(MatMenuItem, {descendants: true})`,\n    // all descendant items will bleed into the top-level menu in the case where the consumer\n    // has `mat-menu` instances nested inside each other.\n    if (this._items.indexOf(item) === -1) {\n      this._items.push(item);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Removes an item from the menu.\n   * @docs-private\n   */\n  removeItem(item: MatMenuItem) {\n    const index = this._items.indexOf(item);\n\n    if (this._items.indexOf(item) > -1) {\n      this._items.splice(index, 1);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Adds classes to the menu panel based on its position. Can be used by\n   * consumers to add specific styling based on the position.\n   * @param posX Position of the menu along the x axis.\n   * @param posY Position of the menu along the y axis.\n   * @docs-private\n   */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    const classes = this._classList;\n    classes['mat-menu-before'] = posX === 'before';\n    classes['mat-menu-after'] = posX === 'after';\n    classes['mat-menu-above'] = posY === 'above';\n    classes['mat-menu-below'] = posY === 'below';\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    // @breaking-change 7.0.0 Combine with _resetAnimation.\n    this._panelAnimationState = 'enter';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    // @breaking-change 7.0.0 Combine with _startAnimation.\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    this._animationDone.next(event);\n    this._isAnimating = false;\n\n    // Scroll the content element to the top once the animation is done. This is necessary, because\n    // we move focus to the first item while it's still being animated, which can throw the browser\n    // off when it determines the scroll position. Alternatively we can move focus when the\n    // animation is done, however moving focus asynchronously will interrupt screen readers\n    // which are in the process of reading out the menu already. We take the `element` from\n    // the `event` since we can't use a `ViewChild` to access the pane.\n    if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n      event.element.scrollTop = 0;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin, isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {asapScheduler, merge, of as observableOf, Subscription} from 'rxjs';\nimport {delay, filter, take, takeUntil} from 'rxjs/operators';\nimport {MatMenu} from './menu-directive';\nimport {throwMatMenuMissingError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '[attr.aria-expanded]': 'menuOpen || null',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closeSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  private _openedByMouse: boolean = false;\n\n  /**\n   * @deprecated\n   * @breaking-change 7.0.0\n   */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel {\n    return this.menu;\n  }\n\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor') menu: MatMenuPanel;\n\n  /** Data to be passed along to any lazily-rendered content. */\n  @Input('matMenuTriggerData') menuData: any;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() readonly menuOpened: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   * @breaking-change 7.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuOpen: EventEmitter<void> = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() readonly menuClosed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   * @breaking-change 7.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuClose: EventEmitter<void> = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _parentMenu: MatMenu,\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality,\n              // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n              // @breaking-change 7.0.0\n              private _focusMonitor?: FocusMonitor) {\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n\n    this.menu.close.subscribe(reason => {\n      this._destroyMenu();\n\n      // If a click closed the menu, we should close the entire chain of nested menus.\n      if ((reason === 'click' || reason === 'tab') && this._parentMenu) {\n        this._parentMenu.closed.emit(reason);\n      }\n    });\n\n    this._handleHover();\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._cleanUpSubscriptions();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (this._menuOpen) {\n      return;\n    }\n\n    const overlayRef = this._createOverlay();\n    this._setPosition(overlayRef.getConfig().positionStrategy as FlexibleConnectedPositionStrategy);\n    overlayRef.attach(this._portal);\n\n    if (this.menu.lazyContent) {\n      this.menu.lazyContent.attach(this.menuData);\n    }\n\n    this._closeSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n    this._initMenu();\n\n    if (this.menu instanceof MatMenu) {\n      this.menu._startAnimation();\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n  focus(origin: FocusOrigin = 'program') {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._element.nativeElement, origin);\n    } else {\n      this._element.nativeElement.focus();\n    }\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (!this._overlayRef || !this.menuOpen) {\n      return;\n    }\n\n    const menu = this.menu;\n\n    this._closeSubscription.unsubscribe();\n    this._overlayRef.detach();\n\n    if (menu instanceof MatMenu) {\n      menu._resetAnimation();\n\n      if (menu.lazyContent) {\n        // Wait for the exit animation to finish before detaching the content.\n        menu._animationDone\n          .pipe(\n            filter(event => event.toState === 'void'),\n            take(1),\n            // Interrupt if the content got re-attached.\n            takeUntil(menu.lazyContent._attached)\n          )\n          .subscribe(() => menu.lazyContent!.detach(), undefined, () => {\n            // No matter whether the content got re-attached, reset the menu.\n            this._resetMenu();\n          });\n      } else {\n        this._resetMenu();\n      }\n    } else {\n      this._resetMenu();\n\n      if (menu.lazyContent) {\n        menu.lazyContent.detach();\n      }\n    }\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n    this.menu.focusFirstItem(this._openedByMouse ? 'mouse' : 'program');\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  /**\n   * This method resets the menu when it's closed, most importantly restoring\n   * focus to the menu trigger if the menu was opened via the keyboard.\n   */\n  private _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (!this._openedByMouse) {\n      // Note that the focus style will show up both for `program` and\n      // `keyboard` so we don't have to specify which one it is.\n      this.focus();\n    } else if (!this.triggersSubmenu()) {\n      this.focus('mouse');\n    }\n\n    this._openedByMouse = false;\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as FlexibleConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._overlay.position()\n          .flexibleConnectedTo(this._element)\n          .withTransformOriginOn('.mat-menu-panel'),\n      hasBackdrop: this.menu.hasBackdrop == null ? !this.triggersSubmenu() : this.menu.hasBackdrop,\n      backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n      scrollStrategy: this._scrollStrategy(),\n      direction: this._dir\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: FlexibleConnectedPositionStrategy): void {\n    if (this.menu.setPositionClasses) {\n      position.positionChanges.subscribe(change => {\n        const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n        const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n        this.menu.setPositionClasses!(posX, posY);\n      });\n    }\n  }\n\n  /**\n   * Sets the appropriate positions on a position strategy\n   * so the overlay connects with the trigger correctly.\n   * @param positionStrategy Strategy whose position to update.\n   */\n  private _setPosition(positionStrategy: FlexibleConnectedPositionStrategy) {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    positionStrategy.withPositions([\n      {originX, originY, overlayX, overlayY, offsetY},\n      {originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY},\n      {\n        originX,\n        originY: originFallbackY,\n        overlayX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      },\n      {\n        originX: originFallbackX,\n        originY: originFallbackY,\n        overlayX: overlayFallbackX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      }\n    ]);\n  }\n\n  /** Cleans up the active subscriptions. */\n  private _cleanUpSubscriptions(): void {\n    this._closeSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMenu ? this._parentMenu.closed : observableOf();\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      this._openedByMouse = true;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n  /** Handles the cases where the user hovers over the trigger. */\n  private _handleHover() {\n    // Subscribe to changes in the hovered item in order to toggle the panel.\n    if (!this.triggersSubmenu()) {\n      return;\n    }\n\n    this._hoverSubscription = this._parentMenu._hovered()\n      // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n      // with different data and triggers), we have to delay it by a tick to ensure that\n      // it won't be closed immediately after it is opened.\n      .pipe(\n        filter(active => active === this._menuItemInstance && !active.disabled),\n        delay(0, asapScheduler)\n      )\n      .subscribe(() => {\n        this._openedByMouse = true;\n\n        // If the same menu is used between multiple triggers, it might still be animating\n        // while the new trigger tries to re-open it. Wait for the animation to finish\n        // before doing so. Also interrupt if the user moves to another item.\n        if (this.menu instanceof MatMenu && this.menu._isAnimating) {\n          // We need the `delay(0)` here in order to avoid\n          // 'changed after checked' errors in some cases. See #12194.\n          this.menu._animationDone\n            .pipe(take(1), delay(0, asapScheduler), takeUntil(this._parentMenu._hovered()))\n            .subscribe(() => this.openMenu());\n        } else {\n          this.openMenu();\n        }\n      });\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatMenuContent} from './menu-content';\nimport {MatMenu} from './menu-directive';\nimport {MatMenuItem} from './menu-item';\nimport {\n  MatMenuTrigger,\n  MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './menu-trigger';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    MatRippleModule,\n    OverlayModule,\n  ],\n  exports: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent, MatCommonModule],\n  declarations: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent],\n  providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  animateChild,\n  group,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n */\nexport const matSelectAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      transform: 'scaleY(0)',\n      minWidth: '100%',\n      opacity: 0\n    })),\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', group([\n      query('@fadeInContent', animateChild()),\n      animate('150ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n    ])),\n    transition('* => void', [\n      animate('250ms 100ms linear', style({opacity: 0}))\n    ])\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {SPACE, ENTER, HOME, END, UP_ARROW, DOWN_ARROW, A} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  MatLine,\n  MatLineSetter,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Subscription} from 'rxjs';\nimport {MatListAvatarCssMatStyler} from './list';\n\n\n/** @docs-private */\nexport class MatSelectionListBase {}\nexport const _MatSelectionListMixinBase = mixinDisableRipple(MatSelectionListBase);\n\n/** @docs-private */\nexport class MatListOptionBase {}\nexport const _MatListOptionMixinBase = mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-focus]': '_hasFocus',\n    '[class.mat-list-item-with-avatar]': '_avatar',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _selected = false;\n  private _disabled = false;\n\n  /** Whether the option has focus. */\n  _hasFocus: boolean = false;\n\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text') _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Value of the option */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  constructor(private _element: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */\n              @Inject(forwardRef(() => MatSelectionList)) public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    // List options that are selected at initialization can't be reported properly to the form\n    // control. This is because it takes some time until the selection-list knows about all\n    // available options. Also it can happen that the ControlValueAccessor has an initial value\n    // that should be used instead. Deferring the value change report to the next tick ensures\n    // that the form control value is not being overwritten.\n    const wasSelected = this._selected;\n\n    Promise.resolve().then(() => {\n      if (this._selected || wasSelected) {\n        this.selected = true;\n        this._changeDetector.markForCheck();\n      }\n    });\n  }\n\n  ngAfterContentInit() {\n    // TODO: consider turning the setter into a function, it doesn't do anything as a class.\n    // tslint:disable-next-line:no-unused-expression\n    new MatLineSetter(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => this.selected = false);\n    }\n\n    this.selectionList._removeOptionFromList(this);\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? this._text.nativeElement.textContent : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n    }\n  }\n\n  _handleFocus() {\n    this._hasFocus = true;\n    this.selectionList._setFocusedOption(this);\n  }\n\n  _handleBlur() {\n    this._hasFocus = false;\n    this.selectionList._onTouched();\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. Returns whether the value has changed. */\n  _setSelected(selected: boolean): boolean {\n    if (selected === this._selected) {\n      return false;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n    return true;\n  }\n\n  /**\n   * Notifies Angular that the option needs to be checked in the next change detection run. Mainly\n   * used to trigger an update of the list option if the disabled state of the selection list\n   * changed.\n   */\n  _markForCheck() {\n    this._changeDetector.markForCheck();\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list',\n    '(focus)': 'focus()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\n    CanDisableRipple, AfterContentInit, ControlValueAccessor, OnDestroy {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** Tabindex of the selection list. */\n  @Input() tabIndex: number = 0;\n\n  /**\n   * Function used for comparing an option against the selected value when determining which\n   * options should appear as selected. The first argument is the value of an options. The second\n   * one is a value from the selected value. A boolean must be returned.\n   */\n  @Input() compareWith: (o1: any, o2: any) => boolean;\n\n  /** Whether the selection list is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // The `MatSelectionList` and `MatListOption` are using the `OnPush` change detection\n    // strategy. Therefore the options will not check for any changes if the `MatSelectionList`\n    // changed its state. Since we know that a change to `disabled` property of the list affects\n    // the state of the options, we manually mark each option for check.\n    if (this.options) {\n      this.options.forEach(option => option._markForCheck());\n    }\n  }\n  private _disabled: boolean = false;\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Used for storing the values that were assigned before the options were initialized. */\n  private _tempValues: string[]|null;\n\n  /** Subscription to sync value changes in the SelectionModel back to the SelectionList. */\n  private _modelChanges = Subscription.EMPTY;\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  constructor(private _element: ElementRef, @Attribute('tabindex') tabIndex: string) {\n    super();\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options)\n      .withWrap()\n      .withTypeAhead()\n      // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\n      // screenreader users, that allows reading the different options of the list.\n      .skipPredicate(() => false);\n\n    if (this._tempValues) {\n      this._setOptionsFromValues(this._tempValues);\n      this._tempValues = null;\n    }\n\n    // Sync external changes to the model back to the options.\n    this._modelChanges = this.selectedOptions.onChange!.subscribe(event => {\n      if (event.added) {\n        for (let item of event.added) {\n          item.selected = true;\n        }\n      }\n\n      if (event.removed) {\n        for (let item of event.removed) {\n          item.selected = false;\n        }\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this._modelChanges.unsubscribe();\n  }\n\n  /** Focuses the last active list option. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this._setAllOptionsSelected(true);\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this._setAllOptionsSelected(false);\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItemIndex(this._getOptionIndex(option));\n  }\n\n  /** Removes an option from the selection list and updates the active item. */\n  _removeOptionFromList(option: MatListOption) {\n    if (option._hasFocus) {\n      const optionIndex = this._getOptionIndex(option);\n\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.setPreviousItemActive();\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.setNextItemActive();\n      }\n    }\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n    const previousFocusIndex = manager.activeItemIndex;\n\n    switch (keyCode) {\n      case SPACE:\n      case ENTER:\n        this._toggleFocusedOption();\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n      case HOME:\n      case END:\n        keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case A:\n        if (event.ctrlKey) {\n          this.options.find(option => !option.selected) ? this.selectAll() : this.deselectAll();\n          event.preventDefault();\n        }\n        break;\n      default:\n        manager.onKeydown(event);\n    }\n\n    if ((keyCode === UP_ARROW || keyCode === DOWN_ARROW) && event.shiftKey &&\n        manager.activeItemIndex !== previousFocusIndex) {\n      this._toggleFocusedOption();\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    if (this.options) {\n      this._onChange(this._getSelectedOptionValues());\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    } else {\n      this._tempValues = values;\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values\n      .map(value => {\n        return this.options.find(option =>\n            this.compareWith ? this.compareWith(option.value, value) : option.value === value);\n      })\n      .filter(Boolean)\n      .forEach(option => option!._setSelected(true));\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the state of the currently focused option if enabled. */\n  private _toggleFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption && !focusedOption.disabled) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n      }\n    }\n  }\n\n  /**\n   * Sets the selected state on all of the options\n   * and emits an event if anything changed.\n   */\n  private _setAllOptionsSelected(isSelected: boolean) {\n    // Keep track of whether anything changed, because we only want to\n    // emit the changed event when something actually changed.\n    let hasChanged = false;\n\n    this.options.forEach(option => {\n      if (option._setSelected(isSelected)) {\n        hasChanged = true;\n      }\n    });\n\n    if (hasChanged) {\n      this._reportValueChange();\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, MatLine, MatLineSetter, mixinDisableRipple} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nexport class MatListBase {}\nexport const _MatListMixinBase = mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nexport class MatListItemBase {}\nexport const _MatListItemMixinBase = mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {'class': 'mat-list'},\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    // @breaking-change 7.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\n    '[class.mat-list-item-avatar]': '_avatar || _icon',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple {\n  private _isNavList: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler) _icon: MatListIconCssMatStyler;\n\n  constructor(private _element: ElementRef,\n              @Optional() private _navList: MatNavList) {\n    super();\n    this._isNavList = !!_navList;\n  }\n\n  ngAfterContentInit() {\n    // TODO: consider turning the setter into a function, it doesn't do anything as a class.\n    // tslint:disable-next-line:no-unused-expression\n    new MatLineSetter(this._lines, this._element);\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isNavList || this.disableRipple || this._navList.disableRipple;\n  }\n\n  _handleFocus() {\n    this._element.nativeElement.classList.add('mat-list-item-focus');\n  }\n\n  _handleBlur() {\n    this._element.nativeElement.classList.remove('mat-list-item-focus');\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatLine, MatLineSetter} from '@angular/material/core';\nimport {coerceToNumber} from './grid-list-measure';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(private _element: ElementRef) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value: number) { this._rowspan = coerceToNumber(value); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value: number) { this._colspan = coerceToNumber(value); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    this._element.nativeElement.style[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridTileText implements AfterContentInit {\n  /**\n   *  Helper that watches the number of lines in a text area and sets\n   * a class on the host element that matches the line count.\n   */\n  _lineSetter: MatLineSetter;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef) {}\n\n  ngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {QueryList} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    let lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  constructor(numColumns: number, tiles: QueryList<MatGridTile>) {\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    let gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile.\n    } while (gapEndIndex - gapStartIndex < tileCols);\n\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'rtl' ? 'right' : 'left';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number);\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList);\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height. */\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['paddingBottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('marginTop', null);\n      tile._setStyle('paddingTop', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string { return `calc(${exp})`; }\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return (value.match(/px|em|rem/)) ? value : value + 'px';\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  coerceToString,\n  coerceToNumber,\n} from './grid-list-measure';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridList implements OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef, @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols(): number { return this._cols; }\n  set cols(value: number) { this._cols = coerceToNumber(value); }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize(): string { return this._gutter; }\n  set gutterSize(value: string) { this._gutter = coerceToString(value); }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  set rowHeight(value: string | number) {\n    const newValue = coerceToString(value);\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    const tracker = new TileCoordinator(this.cols, this._tiles);\n    const direction = this._dir ? this._dir.value : 'ltr';\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    this._tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      this._element.nativeElement.style[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {HttpClient, HttpErrorResponse} from '@angular/common/http';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n} from '@angular/core';\nimport {DomSanitizer, SafeResourceUrl, SafeHtml} from '@angular/platform-browser';\nimport {forkJoin, Observable, of as observableOf, throwError as observableThrow} from 'rxjs';\nimport {catchError, finalize, map, share, tap} from 'rxjs/operators';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeUrlError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeLiteralError(literal: SafeHtml): Error {\n  return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n               `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  url: SafeResourceUrl | null;\n  svgElement: SVGElement | null;\n\n  constructor(url: SafeResourceUrl);\n  constructor(svgElement: SVGElement);\n  constructor(data: SafeResourceUrl | SVGElement) {\n    // Note that we can't use `instanceof SVGElement` here,\n    // because it'll break during server-side rendering.\n    if (!!(data as any).nodeName) {\n      this.svgElement = data as SVGElement;\n    } else {\n      this.url = data as SafeResourceUrl;\n    }\n  }\n}\n\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable({providedIn: 'root'})\nexport class MatIconRegistry {\n  private _document: Document;\n\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document: any) {\n      this._document = document;\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n\n  /**\n   * Registers an icon using an HTML string in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteral(iconName: string, literal: SafeHtml): this {\n    return this.addSvgIconLiteralInNamespace('', iconName, literal);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon using an HTML string in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteralInNamespace(namespace: string, iconName: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._createSvgElementForSingleIcon(sanitizedLiteral);\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the default namespace.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteral(literal: SafeHtml): this {\n    return this.addSvgIconSetLiteralInNamespace('', literal);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteralInNamespace(namespace: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._svgElementFromString(sanitizedLiteral);\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the `<mat-icon>` element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    const cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg)),\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg)),\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: HttpErrorResponse): Observable<SVGElement | null> => {\n            const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the\n            // combined Observable won't necessarily fail.\n            console.error(`Loading icon set URL: ${url} failed: ${err.message}`);\n            return observableOf(null);\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // If the SVG for this icon set has already been parsed, do nothing.\n    if (config.svgElement) {\n      return observableOf(config.svgElement);\n    }\n\n    return this._fetchUrl(config.url).pipe(map(svgText => {\n      // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n      // only needs to occur if the cache is yet unset.\n      if (!config.svgElement) {\n        config.svgElement = this._svgElementFromString(svgText);\n      }\n\n      return config.svgElement;\n    }));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    const iconSource = iconSet.querySelector('#' + iconName);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.removeAttribute('id');\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    const div = this._document.createElement('DIV');\n    div.innerHTML = str;\n    const svg = div.querySelector('svg') as SVGElement;\n\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n\n    return svg;\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    let svg = this._svgElementFromString('<svg></svg>');\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl | null): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    if (safeUrl == null) {\n      throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finalize` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share(),\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n\n  /**\n   * Registers an icon config by name in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param iconName Name under which to register the config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconConfig(namespace: string, iconName: string, config: SvgIconConfig): this {\n    this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n    return this;\n  }\n\n  /**\n   * Registers an icon set config in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconSetConfig(namespace: string, config: SvgIconConfig): this {\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n\n    return this;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), DOCUMENT as InjectionToken<any>],\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nexport class MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatIconMixinBase = mixinColor(MatIconBase);\n\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon',\n    '[class.mat-icon-inline]': 'inline',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, CanColor {\n  /**\n   * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n   * the element the icon is contained in.\n   */\n  @Input()\n  get inline(): boolean {\n    return this._inline;\n  }\n  set inline(inline: boolean) {\n    this._inline = coerceBooleanProperty(inline);\n  }\n  private _inline: boolean = false;\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  constructor(\n      elementRef: ElementRef,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   `'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)`\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    if (changes.svgIcon) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n\n    // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\n    // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\n    // Do this before inserting the element into the DOM, in order to avoid a style recalculation.\n    const styleTags = svg.querySelectorAll('style') as NodeListOf<HTMLStyleElement>;\n\n    for (let i = 0; i < styleTags.length; i++) {\n      styleTags[i].textContent += ' ';\n    }\n\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    let childCount = layoutElement.childNodes.length;\n\n    // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n    // we can't use innerHTML, because IE will throw if the element has a data binding.\n    while (childCount--) {\n      const child = layoutElement.childNodes[childCount];\n\n      // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n      // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n      if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n        layoutElement.removeChild(child);\n      }\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentPortal, ComponentType, Portal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView, yearsPerPage} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n/**\n * Possible views for the calendar.\n * @docs-private\n */\nexport type MatCalendarView = 'month' | 'year' | 'multi-year';\n\n/** Default header for MatCalendar */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar-header',\n  templateUrl: 'calendar-header.html',\n  exportAs: 'matCalendarHeader',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarHeader<D> {\n  constructor(private _intl: MatDatepickerIntl,\n              @Inject(forwardRef(() => MatCalendar)) public calendar: MatCalendar<D>,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    this.calendar.stateChanges.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  /** The label for the current calendar view. */\n  get periodButtonText(): string {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter\n          .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\n              .toLocaleUpperCase();\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYearName(this.calendar.activeDate);\n    }\n    const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n    const lastYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  get periodButtonLabel(): string {\n    return this.calendar.currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the the previous button. */\n  get prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** The label for the the next button. */\n  get nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** Handles user clicks on the period label. */\n  currentPeriodClicked(): void {\n    this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  previousClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage\n            );\n  }\n\n  /** Handles user clicks on the next button. */\n  nextClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate,\n                    this.calendar.currentView == 'year' ? 1 : yearsPerPage\n            );\n  }\n\n  /** Whether the previous period button is enabled. */\n  previousEnabled(): boolean {\n    if (!this.calendar.minDate) {\n      return true;\n    }\n    return !this.calendar.minDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  nextEnabled(): boolean {\n    return !this.calendar.maxDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n}\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, AfterViewChecked, OnDestroy, OnChanges {\n  /** An input indicating the type of the header component, if set. */\n  @Input() headerComponent: ComponentType<any>;\n\n  /** A portal containing the header component type for this calendar. */\n  _calendarHeaderPortal: Portal<any>;\n\n  private _intlChanges: Subscription;\n\n  /**\n   * Used for scheduling that focus should be moved to the active cell on the next tick.\n   * We need to schedule it, rather than do it immediately, because we have to wait\n   * for Angular to re-evaluate the view children.\n   */\n  private _moveFocusOnNextTick = false;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: MatCalendarView = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView) multiYearView: MatMultiYearView<D>;\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get activeDate(): D { return this._clampedActiveDate; }\n  set activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n    this.stateChanges.next();\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  get currentView(): MatCalendarView { return this._currentView; }\n  set currentView(value: MatCalendarView) {\n    this._currentView = value;\n    this._moveFocusOnNextTick = true;\n  }\n  private _currentView: MatCalendarView;\n\n  /**\n   * Emits whenever there is a state change that the header may need to respond to.\n   */\n  stateChanges = new Subject<void>();\n\n  constructor(_intl: MatDatepickerIntl,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => {\n      _changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    });\n  }\n\n  ngAfterContentInit() {\n    this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || MatCalendarHeader);\n    this.activeDate = this.startAt || this._dateAdapter.today();\n\n    // Assign to the private property since we don't want to move focus on init.\n    this._currentView = this.startView;\n  }\n\n  ngAfterViewChecked() {\n    if (this._moveFocusOnNextTick) {\n      this._moveFocusOnNextTick = false;\n      this.focusActiveCell();\n    }\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n    this.stateChanges.complete();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change = changes.minDate || changes.maxDate || changes.dateFilter;\n\n    if (change && !change.firstChange) {\n      const view = this._getCurrentViewComponent();\n\n      if (view) {\n        // We need to `detectChanges` manually here, because the `minDate`, `maxDate` etc. are\n        // passed down to the view via data bindings which won't be up-to-date when we call `_init`.\n        this._changeDetectorRef.detectChanges();\n        view._init();\n      }\n    }\n\n    this.stateChanges.next();\n  }\n\n  focusActiveCell() {\n    this._getCurrentViewComponent()._focusActiveCell();\n  }\n\n  /** Updates today's date after an update of the active date */\n  updateTodaysDate() {\n    let view = this.currentView == 'month' ? this.monthView :\n            (this.currentView == 'year' ? this.yearView : this.multiYearView);\n\n    view.ngAfterContentInit();\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles year/month selection in the multi-year/year views. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this.activeDate = date;\n    this.currentView = view;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Returns the component instance that corresponds to the current calendar view. */\n  private _getCurrentViewComponent() {\n    return this.monthView || this.yearView || this.multiYearView;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n  group,\n  query,\n  animateChild,\n} from '@angular/animations';\n\n/** Animations used by the Material datepicker. */\nexport const matDatepickerAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n  /** Transforms the height of the datepicker's calendar. */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({opacity: 0, transform: 'scale(1, 0)'})),\n    state('enter', style({opacity: 1, transform: 'scale(1, 1)'})),\n    transition('void => enter', group([\n      query('@fadeInCalendar', animateChild()),\n      animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n    ])),\n    transition('* => void', animate('100ms linear', style({opacity: 0})))\n  ]),\n\n  /** Fades in the content of the calendar. */\n  fadeInCalendar: trigger('fadeInCalendar', [\n    state('void', style({opacity: 0})),\n    state('enter', style({opacity: 1})),\n    transition('void => *', animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {take, filter} from 'rxjs/operators';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n  OnDestroy,\n} from '@angular/core';\nimport {CanColor, DateAdapter, mixinColor, ThemePalette} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {merge, Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatCalendar} from './calendar';\nimport {matDatepickerAnimations} from './datepicker-animations';\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY,\n};\n\n// Boilerplate for applying mixins to MatDatepickerContent.\n/** @docs-private */\nexport class MatDatepickerContentBase {\n  constructor(public _elementRef: ElementRef) { }\n}\nexport const _MatDatepickerContentMixinBase = mixinColor(MatDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[@transformPanel]': '\"enter\"',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n  },\n  animations: [\n    matDatepickerAnimations.transformPanel,\n    matDatepickerAnimations.fadeInCalendar,\n  ],\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color'],\n})\nexport class MatDatepickerContent<D> extends _MatDatepickerContentMixinBase\n  implements AfterViewInit, CanColor {\n\n  /** Reference to the internal calendar component. */\n  @ViewChild(MatCalendar) _calendar: MatCalendar<D>;\n\n  /** Reference to the datepicker that created the overlay. */\n  datepicker: MatDatepicker<D>;\n\n  /** Whether the datepicker is above or below the input. */\n  _isAbove: boolean;\n\n  constructor(elementRef: ElementRef) {\n    super(elementRef);\n  }\n\n  ngAfterViewInit() {\n    this._calendar.focusActiveCell();\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDatepicker<D> implements OnDestroy, CanColor {\n  /** An input indicating the type of the custom header component for the calendar, if set. */\n  @Input() calendarHeaderComponent: ComponentType<any>;\n\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' = 'month';\n\n  /** Color palette to use on the datepicker's calendar. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n        (this._datepickerInput ? this._datepickerInput._getThemePalette() : undefined);\n  }\n  set color(value: ThemePalette) {\n    this._color = value;\n  }\n  _color: ThemePalette;\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits selected year in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected month in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { value ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<MatDatepickerContent<D>> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** Reference to the component instantiated in popup mode. */\n  private _popupComponentRef: ComponentRef<MatDatepickerContent<D>> | null;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  /** Subscription to value changes in the associated input element. */\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  /** Emits new selected date when selected date changes. */\n  readonly _selectedChanged = new Subject<D>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n      this._popupComponentRef = null;\n    }\n  }\n\n  /** Selects the given date */\n  select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this._selectedChanged.next(date);\n    }\n  }\n\n  /** Emits the selected year in multiyear view */\n  _selectYear(normalizedYear: D): void {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Emits selected month in year view */\n  _selectMonth(normalizedMonth: D): void {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    this._dialogRef = this._dialog.open<MatDatepickerContent<D>>(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n    this._setColor();\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal<MatDatepickerContent<D>>(MatDatepickerContent,\n                                                                          this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\n      this._popupComponentRef.instance.datepicker = this;\n      this._setColor();\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir,\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n    this._popupRef.overlayElement.setAttribute('role', 'dialog');\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => {\n        // Closing on alt + up is only valid when there's an input associated with the datepicker.\n        return event.keyCode === ESCAPE ||\n               (this._datepickerInput && event.altKey && event.keyCode === UP_ARROW);\n      }))\n    ).subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .flexibleConnectedTo(this._datepickerInput.getConnectedOverlayOrigin())\n      .withTransformOriginOn('.mat-datepicker-content')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8)\n      .withPush(false)\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom'\n        },\n        {\n          originX: 'end',\n          originY: 'bottom',\n          overlayX: 'end',\n          overlayY: 'top'\n        },\n        {\n          originX: 'end',\n          originY: 'top',\n          overlayX: 'end',\n          overlayY: 'bottom'\n        }\n      ]);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Passes the current theme color along to the calendar overlay. */\n  private _setColor(): void {\n    const color = this.color;\n    if (this._popupComponentRef) {\n      this._popupComponentRef.instance.color = color;\n    }\n    if (this._dialogRef) {\n      this._dialogRef.componentInstance.color = color;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onBlur()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements ControlValueAccessor, OnDestroy, Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    if (!value) {\n      return;\n    }\n\n    this._datepicker = value;\n    this._datepicker._registerInput(this);\n    this._datepickerSubscription.unsubscribe();\n\n    this._datepickerSubscription = this._datepicker._selectedChanged.subscribe((selected: D) => {\n      this.value = selected;\n      this._cvaOnChange(selected);\n      this._onTouched();\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n      this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    });\n  }\n  _datepicker: MatDatepicker<D>;\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(value: (date: D | null) => boolean) {\n    this._dateFilter = value;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    const oldDate = this.value;\n    this._value = value;\n    this._formatValue(value);\n\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    const element = this._elementRef.nativeElement;\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n\n    // We need to null check the `blur` method, because it's undefined during SSR.\n    if (newValue && element.blur) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      element.blur();\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D | null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** @docs-private */\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * @deprecated\n   * @breaking-change 7.0.0 Use `getConnectedOverlayOrigin` instead\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this.getConnectedOverlayOrigin();\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this._datepicker && event.altKey && event.keyCode === DOWN_ARROW) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n\n    if (!this._dateAdapter.sameDate(date, this._value)) {\n      this._value = date;\n      this._cvaOnChange(date);\n      this._valueChange.emit(date);\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    }\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /** Returns the palette used by the input's form field, if any. */\n  _getThemePalette() {\n    return this._formField ? this._formField.color : undefined;\n  }\n\n  /** Handles blur events on the input. */\n  _onBlur() {\n    // Reformat the input only if we have a valid value.\n    if (this.value) {\n      this._formatValue(this.value);\n    }\n\n    this._onTouched();\n  }\n\n  /** Formats a value and sets it on the input element. */\n  private _formatValue(value: D | null) {\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class MatDatepickerToggleIcon {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'class': 'mat-datepicker-toggle',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n    '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n    '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon) _customIcon: MatDatepickerToggleIcon;\n\n  constructor(public _intl: MatDatepickerIntl, private _changeDetectorRef: ChangeDetectorRef) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.datepicker) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatCalendar, MatCalendarHeader} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {\n  MatDatepicker,\n  MatDatepickerContent,\n  MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    OverlayModule,\n    A11yModule,\n    PortalModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n    MatCalendarHeader,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-horizontal]': '!vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input()\n  get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [MatDivider, MatCommonModule],\n  declarations: [MatDivider],\n})\nexport class MatDividerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  inputs: ['multi'],\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * The display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the rest of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  EventEmitter,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  SkipSelf,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {filter, startWith, take} from 'rxjs/operators';\nimport {MatAccordion} from './accordion';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkAccordionItem = CdkAccordionItem;\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  providers: [\n    // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n    // to the same accordion.\n    {provide: MatAccordion, useValue: undefined},\n  ],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  }\n})\nexport class MatExpansionPanel extends _CdkAccordionItem\n  implements AfterContentInit, OnChanges, OnDestroy {\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean {\n    return this._hideToggle || (this.accordion && this.accordion.hideToggle);\n  }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n  private _hideToggle = false;\n\n  /** An event emitted after the body's expansion animation happens. */\n  @Output() afterExpand = new EventEmitter<void>();\n\n  /** An event emitted after the body's collapse animation happens. */\n  @Output() afterCollapse = new EventEmitter<void>();\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordion;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent) _lazyContent: MatExpansionPanelContent;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  constructor(@Optional() @SkipSelf() accordion: MatAccordion,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      // We don't need to subscribe to the `stateChanges` of the parent accordion because each time\n      // the [displayMode] input changes, the change detection will also cover the host bindings\n      // of this expansion panel.\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._inputChanges.complete();\n  }\n\n  _bodyAnimation(event: AnimationEvent) {\n    const classList = event.element.classList;\n    const cssClass = 'mat-expanded';\n    const {phaseName, toState, fromState} = event;\n\n    // Toggle the body's `overflow: hidden` class when closing starts or when expansion ends in\n    // order to prevent the cases where switching too early would cause the animation to jump.\n    // Note that we do it directly on the DOM element to avoid the slight delay that comes\n    // with doing it via change detection.\n    if (phaseName === 'done' && toState === 'expanded') {\n      classList.add(cssClass);\n    }\n    if (phaseName === 'start' && toState === 'collapsed') {\n      classList.remove(cssClass);\n    }\n\n    if (phaseName === 'done' && toState === 'expanded' && fromState !== 'void') {\n      this.afterExpand.emit();\n    }\n    if (phaseName === 'done' && toState === 'collapsed' && fromState !== 'void') {\n      this.afterCollapse.emit();\n    }\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, Subscription, EMPTY} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanel} from './expansion-panel';\n\n\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'panel.disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n      @Host() public panel: MatExpansionPanel,\n      private _element: ElementRef,\n      private _focusMonitor: FocusMonitor,\n      private _changeDetectorRef: ChangeDetectorRef) {\n\n    const accordionHideToggleChange = panel.accordion ?\n      panel.accordion._stateChanges.pipe(filter(changes => !!changes.hideToggle)) : EMPTY;\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to subscribe and trigger change detection manually.\n    this._parentChangeSubscription = merge(\n      panel.opened,\n      panel.closed,\n      accordionHideToggleChange,\n      panel._inputChanges.pipe(filter(changes => !!(changes.hideToggle || changes.disabled)))\n    )\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    _focusMonitor.monitor(_element.nativeElement);\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    this.panel.toggle();\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        event.preventDefault();\n        this._toggle();\n        break;\n      default:\n        return;\n    }\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n}\n\n/**\n * `<mat-panel-description>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host : {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * `<mat-panel-title>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host : {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanel, MatExpansionPanelActionRow} from './expansion-panel';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  NgZone,\n} from '@angular/core';\nimport {take} from 'rxjs/operators';\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'attr.aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** Whether to allow selection of disabled cells. */\n  @Input() allowDisabledSelection = false;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  constructor(private _elementRef: ElementRef, private _ngZone: NgZone) { }\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (!this.allowDisabledSelection && !cell.enabled) {\n      return;\n    }\n    this.selectedValueChange.emit(cell.value);\n  }\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  get _firstRowOffset(): number {\n    return this.rows && this.rows.length && this.rows[0].length ?\n        this.numCols - this.rows[0].length : 0;\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._elementRef.nativeElement.querySelector('.mat-calendar-body-active').focus();\n      });\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n              this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n          this._dateSelected(this._dateAdapter.getDate(this._activeDate));\n          this._userSelection.emit();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(\n            this._dateAdapter.getYear(this.activeDate),\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const enabled = this._shouldEnableDate(date);\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));\n    }\n  }\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new year is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\n    let activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n        this._yearSelected(this._dateAdapter.getYear(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  _getActiveCell(): number {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _shouldEnableYear(year: number) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null ||\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n      return false;\n    }\n\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    const normalizedDate =\n          this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    this.monthSelected.emit(normalizedDate);\n\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n        this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (month === undefined || month === null ||\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {CanUpdateErrorState, ErrorStateMatcher, mixinErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {merge, Observable, Subscription} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipInput} from './chip-input';\n\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nexport class MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatChipListMixinBase = mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for it's similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': '_tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)',\n    '[id]': '_uid',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n  ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly controlType: string = 'mat-chip-list';\n\n  /** When a chip is destroyed, we track the index so we can focus the appropriate next chip. */\n  protected _lastDestroyedIndex: number|null = null;\n\n  /** Track which chips we're listening to for focus/destruction. */\n  protected _chipSet: WeakMap<MatChip, boolean> = new WeakMap();\n\n  /** Subscription to tabbing out from the chip list. */\n  private _tabOutSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the chip list. */\n  private _changeSubscription: Subscription;\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription | null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription | null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription | null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription | null;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipInput;\n\n  /** Uid of the chip list */\n  _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The ARIA role applied to the chip list. */\n  get role(): string | null { return this.empty ? null : 'listbox'; }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n  private _multiple: boolean = false;\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith(): (o1: any, o2: any) => boolean { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  protected _value: any;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get id(): string {\n    return this._chipInput ? this._chipInput.id : this._uid;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  protected _required: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  protected _placeholder: string;\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return (this._chipInput && this._chipInput.focused) || this.chips.some(chip => chip._hasFocus);\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  protected _disabled: boolean = false;\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip list is selectable. When a chip list is not selectable,\n   * the selected states for all the chips inside the chip list are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n    if (this.chips) {\n      this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n    }\n  }\n  protected _selectable: boolean = true;\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroyed));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipListChange> =\n      new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips)\n      .withWrap()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._tabOutSubscription = this._keyManager.tabOut.subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => this._tabIndex = this._userTabIndex || 0);\n    });\n\n    // When the list changes, re-subscribe\n    this._changeSubscription = this.chips.changes.pipe(startWith(null)).subscribe(() => {\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabOutSubscription.unsubscribe();\n\n    if (this._changeSubscription) {\n      this._changeSubscription.unsubscribe();\n    }\n\n    if (this._chipRemoveSubscription) {\n      this._chipRemoveSubscription.unsubscribe();\n    }\n\n    this._dropSubscriptions();\n    this.stateChanges.complete();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipInput): void {\n    this._chipInput = inputElement;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._elementRef.nativeElement.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() { this.focus(); }\n\n  /**\n   * Focuses the the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(): void {\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput();\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput() {\n    if (this._chipInput) {\n      this._chipInput.focus();\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    const target = event.target as HTMLElement;\n\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n    } else if (target && target.classList.contains('mat-chip')) {\n      this._keyManager.onKeydown(event);\n      this.stateChanges.next();\n    }\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * Update key manager's active item when chip is deleted.\n   * If the deleted chip is the last chip in chip list, focus the new last chip.\n   * Otherwise focus the next chip in the list.\n   * Save `_lastDestroyedIndex` so we can set the correct focus.\n   */\n  protected _updateKeyManager(chip: MatChip) {\n    let chipIndex: number = this.chips.toArray().indexOf(chip);\n    if (this._isValidIndex(chipIndex)) {\n      if (chip._hasFocus) {\n        // Check whether the chip is not the last item\n        if (chipIndex < this.chips.length - 1) {\n          this._keyManager.setActiveItem(chipIndex);\n        } else if (chipIndex - 1 >= 0) {\n          this._keyManager.setActiveItem(chipIndex - 1);\n        }\n      }\n      if (this._keyManager.activeItemIndex === chipIndex) {\n        this._lastDestroyedIndex = chipIndex;\n      }\n    }\n  }\n\n  /**\n   * Checks to see if a focus chip was recently destroyed so that we can refocus the next closest\n   * one.\n   */\n  protected _updateFocusForDestroyedChips() {\n    const chipsArray = this.chips.toArray();\n\n    if (this._lastDestroyedIndex != null && chipsArray.length > 0 && (this.focused ||\n      (this._keyManager.activeItem && chipsArray.indexOf(this._keyManager.activeItem) === -1))) {\n      // Check whether the destroyed chip was the last item\n      const newFocusIndex = Math.min(this._lastDestroyedIndex, chipsArray.length - 1);\n      this._keyManager.setActiveItem(newFocusIndex);\n      const focusChip = this._keyManager.activeItem;\n      // Focus the chip\n      if (focusChip) {\n        focusChip.focus();\n      }\n    }\n\n    // Reset our destroyed index\n    this._lastDestroyedIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChip);\n        }\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    this._keyManager.setActiveItem(-1);\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n      this._updateKeyManager(event.chip);\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Directive, ElementRef, EventEmitter, Input, Output, Inject, OnChanges} from '@angular/core';\nimport {MatChipList} from './chip-list';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n    '[id]': 'id',\n    '[attr.placeholder]': 'placeholder || null',\n  }\n})\nexport class MatChipInput implements OnChanges {\n  /** Whether the control is focused. */\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  @Input('matChipInputSeparatorKeyCodes')\n  separatorKeyCodes: number[] | Set<number> = this._defaultOptions.separatorKeyCodes;\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /** The input's placeholder text. */\n  @Input() placeholder: string = '';\n\n  /** Unique id for the input. */\n  @Input() id: string = `mat-chip-list-input-${nextUniqueId++}`;\n\n  /** Whether the input is empty. */\n  get empty(): boolean { return !this._inputElement.value; }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(\n    protected _elementRef: ElementRef,\n    @Inject(MAT_CHIPS_DEFAULT_OPTIONS) private _defaultOptions: MatChipsDefaultOptions) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  ngOnChanges() {\n    this._chipList.stateChanges.next();\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this._isSeparatorKey(event.keyCode)) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  /** Focuses the input. */\n  focus(): void {\n    this._inputElement.focus();\n  }\n\n  /** Checks whether a keycode is one of the configured separators. */\n  private _isSeparatorKey(keyCode: number) {\n    const separators = this.separatorKeyCodes;\n    return Array.isArray(separators) ? separators.indexOf(keyCode) > -1 : separators.has(keyCode);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChip, MatChipAvatar, MatChipRemove, MatChipTrailingIcon} from './chip';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipInput} from './chip-input';\nimport {MatChipList} from './chip-list';\n\nconst CHIP_DECLARATIONS = [\n  MatChipList,\n  MatChip,\n  MatChipInput,\n  MatChipRemove,\n  MatChipAvatar,\n  MatChipTrailingIcon,\n];\n\n@NgModule({\n  exports: CHIP_DECLARATIONS,\n  declarations: CHIP_DECLARATIONS,\n  providers: [\n    ErrorStateMatcher,\n    {\n      provide: MAT_CHIPS_DEFAULT_OPTIONS,\n      useValue: {\n        separatorKeyCodes: [ENTER]\n      } as MatChipsDefaultOptions\n    }\n  ]\n})\nexport class MatChipsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction;\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /**\n   * Whether the dialog should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n  restoreFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /** Whether the dialog should close when the user goes backwards/forwards in history. */\n  closeOnNavigation?: boolean = true;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by MatDialog. */\nexport const matDialogAnimations: {\n  readonly slideDialog: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  slideDialog: trigger('slideDialog', [\n    // Note: The `enter` animation doesn't transition to something like `translate3d(0, 0, 0)\n    // scale(1)`, because for some reason specifying the transform explicitly, causes IE both\n    // to blur the dialog content and decimate the animation performance. Leaving it as `none`\n    // solves both issues.\n    state('enter', style({ transform: 'none', opacity: 1 })),\n    state('void', style({ transform: 'translate3d(0, 25%, 0) scale(0.9)', opacity: 0 })),\n    state('exit', style({ transform: 'translate3d(0, 25%, 0)', opacity: 0 })),\n    transition('* => *', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AnimationEvent} from '@angular/animations';\nimport {matDialogAnimations} from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.slideDialog],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    'aria-modal': 'true',\n    '[attr.id]': '_id',\n    '[attr.role]': '_config.role',\n    '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config.ariaLabel',\n    '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n    '[@slideDialog]': '_state',\n    '(@slideDialog.start)': '_onAnimationStart($event)',\n    '(@slideDialog.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null = null;\n\n  /** ID for the container DOM element. */\n  _id: string;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any,\n    /** The dialog configuration. */\n    public _config: MatDialogConfig) {\n\n    super();\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (this._config.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Note that there is no focus method when rendering on the server.\n      if (this._elementRef.nativeElement.focus) {\n        // Move focus onto the dialog immediately in order to prevent the user from accidentally\n        // opening multiple dialogs at the same time. Needs to be async, because the element\n        // may not be focusable immediately.\n        Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n      }\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {GlobalPositionStrategy, OverlayRef} from '@angular/cdk/overlay';\nimport {Location} from '@angular/common';\nimport {Observable, Subject, Subscription, SubscriptionLike} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {DialogPosition} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private readonly _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private readonly _beforeClosed = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  /** Subscription to changes in the user's location. */\n  private _locationChanges: SubscriptionLike = Subscription.EMPTY;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    public _containerInstance: MatDialogContainer,\n    location?: Location,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Pass the id along to the container.\n    _containerInstance._id = id;\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    ).subscribe(() => this._overlayRef.dispose());\n\n    _overlayRef.detachments().subscribe(() => {\n      this._beforeClosed.next(this._result);\n      this._beforeClosed.complete();\n      this._locationChanges.unsubscribe();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n      this._overlayRef.dispose();\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose))\n      .subscribe(() => this.close());\n\n    if (location) {\n      // Close the dialog when the user goes forwards/backwards in history or when the location\n      // hash changes. Note that this usually doesn't include clicking on links (unless the user\n      // is using the `HashLocationStrategy`).\n      this._locationChanges = location.subscribe(() => {\n        if (this._containerInstance._config.closeOnNavigation) {\n          this.close();\n        }\n      });\n    }\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._beforeClosed.next(dialogResult);\n      this._beforeClosed.complete();\n      this._overlayRef.detachBackdrop();\n    });\n\n    this._containerInstance._startExitAnimation();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClosed(): Observable<R | undefined> {\n    return this._beforeClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = '', height: string = ''): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  afterOpen(): Observable<void> {\n    return this.afterOpened();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   * @deprecated Use `beforeClosed` instead.\n   * @breaking-change 8.0.0\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this.beforeClosed();\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayContainer,\n  OverlayRef,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {defer, Observable, of as observableOf, Subject} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay: Overlay): ()  => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private readonly _afterAllClosedAtThisLevel = new Subject<void>();\n  private readonly _afterOpenedAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpened(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when a dialog has been opened.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this.afterOpened;\n  }\n\n  get _afterAllClosed() {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  readonly afterAllClosed: Observable<void> = defer<void>(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined)));\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() private _location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) private _scrollStrategy,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {}\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T, R> {\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef = this._attachDialogContent<T, R>(componentOrTemplateRef,\n                                                      dialogContainer,\n                                                      overlayRef,\n                                                      config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpened.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    let i = this.openDialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      this.openDialogs[i].close();\n    }\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatDialogConfig, config]\n    ]));\n    const containerPortal =\n        new ComponentPortal(MatDialogContainer, config.viewContainerRef, injector);\n    const containerRef = overlay.attach<MatDialogContainer>(containerPortal);\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T, R>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T, R> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef =\n        new MatDialogRef<T, R>(overlayRef, dialogContainer, this._location, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    const injectionTokens = new WeakMap<any, any>([\n      [MatDialogContainer, dialogContainer],\n      [MAT_DIALOG_DATA, config.data],\n      [MatDialogRef, dialogRef]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string = 'Close dialog';\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes._matDialogClose || changes._matDialogCloseResult;\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent {}\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions {}\n\n\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MatDialog} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogActions,\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTextareaAutosize} from '@angular/cdk/text-field';\nimport {Directive, Input} from '@angular/core';\n\n// TODO(devversion): Workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkTextareaAutosize = CdkTextareaAutosize;\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deprecated Use `cdkTextareaAutosize` from `@angular/cdk/text-field` instead.\n * @breaking-change 7.0.0\n */\n@Directive({\n  selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n  exportAs: 'matTextareaAutosize',\n  inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n  host: {\n    'class': 'cdk-textarea-autosize mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n    '(input)': '_noopInputHandler()',\n  },\n})\nexport class MatTextareaAutosize extends _CdkTextareaAutosize {\n  @Input()\n  get matAutosizeMinRows(): number { return this.minRows; }\n  set matAutosizeMinRows(value: number) { this.minRows = value; }\n\n  @Input()\n  get matAutosizeMaxRows(): number { return this.maxRows; }\n  set matAutosizeMaxRows(value: number) { this.maxRows = value; }\n\n  @Input('mat-autosize')\n  get matAutosize(): boolean { return this.enabled; }\n  set matAutosize(value: boolean) { this.enabled = value; }\n\n  @Input()\n  get matTextareaAutosize(): boolean { return this.enabled; }\n  set matTextareaAutosize(value: boolean) { this.enabled = value; }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Self,\n  NgZone,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {CanUpdateErrorState, ErrorStateMatcher, mixinErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs';\nimport {AutofillMonitor} from '@angular/cdk/text-field';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nexport class MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatInputMixinBase = mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput]`,\n  exportAs: 'matInput',\n  host: {\n    /**\n     * @breaking-change 7.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n     */\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[attr.placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[readonly]': 'readonly',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, OnInit, DoCheck, CanUpdateErrorState {\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _inputValueAccessor: {value: any};\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  focused: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly stateChanges: Subject<void> = new Subject<void>();\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  controlType: string = 'mat-input';\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  autofilled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n  protected _disabled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n  protected _id: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input() placeholder: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  protected _required = false;\n\n  /** Input type of the element. */\n  @Input()\n  get type(): string { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      this._elementRef.nativeElement.type = this._type;\n    }\n  }\n  protected _type = 'text';\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): string { return this._inputValueAccessor.value; }\n  set value(value: string) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\n  private _readonly = false;\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(protected _elementRef: ElementRef,\n              protected _platform: Platform,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n              private _autofillMonitor: AutofillMonitor,\n              ngZone: NgZone) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || this._elementRef.nativeElement;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      ngZone.runOutsideAngular(() => {\n        _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n          let el = event.target as HTMLInputElement;\n          if (!el.value && !el.selectionStart && !el.selectionEnd) {\n            // Note: Just setting `0, 0` doesn't fix the issue. Setting\n            // `1, 1` fixes it for the first time that you type text and\n            // then hold delete. Toggling to `1, 1` and then back to\n            // `0, 0` seems to completely fix it.\n            el.setSelectionRange(1, 1);\n            el.setSelectionRange(0, 0);\n          }\n        });\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n  }\n\n  ngOnInit() {\n    this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n      this.autofilled = event.isAutofilled;\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n    this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n  }\n\n  /** Focuses the input. */\n  focus(): void { this._elementRef.nativeElement.focus(); }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && !this.readonly) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. */\n  protected _isTextarea() {\n    return this._elementRef.nativeElement.nodeName.toLowerCase() === 'textarea';\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n        !this.autofilled;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return this.focused || !this.empty; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() { this.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TextFieldModule} from '@angular/cdk/text-field';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\n\n\n@NgModule({\n  declarations: [MatInput, MatTextareaAutosize],\n  imports: [\n    CommonModule,\n    TextFieldModule,\n    MatFormFieldModule,\n  ],\n  exports: [\n    TextFieldModule,\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher],\n})\nexport class MatInputModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel: string = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel: string = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel: string = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel: string = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel: string = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel: string = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel: string = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel: string = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel: string = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n} from '@angular/core';\n\n\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-content',\n  host: {'class': 'mat-card-content'}\n})\nexport class MatCardContent {}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n})\nexport class MatCardTitle {}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n})\nexport class MatCardSubtitle {}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-actions',\n  exportAs: 'matCardActions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n})\nexport class MatCardActions {\n  /** Position of the actions inside the card. */\n  @Input() align: 'start' | 'end' = 'start';\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n})\nexport class MatCardFooter {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-image], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n})\nexport class MatCardImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n})\nexport class MatCardSmImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-md-image], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n})\nexport class MatCardMdImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n})\nexport class MatCardLgImage {}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n})\nexport class MatCardXlImage {}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-avatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n})\nexport class MatCardAvatar {}\n\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card',\n  exportAs: 'matCard',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card'}\n})\nexport class MatCard {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n})\nexport class MatCardHeader {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n})\nexport class MatCardTitleGroup {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatCard,\n  MatCardActions,\n  MatCardAvatar,\n  MatCardContent,\n  MatCardFooter,\n  MatCardHeader,\n  MatCardImage,\n  MatCardLgImage,\n  MatCardMdImage,\n  MatCardSmImage,\n  MatCardSubtitle,\n  MatCardTitle,\n  MatCardTitleGroup,\n  MatCardXlImage,\n} from './card';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatCard,\n    MatCardHeader,\n    MatCardTitleGroup,\n    MatCardContent,\n    MatCardTitle,\n    MatCardSubtitle,\n    MatCardActions,\n    MatCardFooter,\n    MatCardSmImage,\n    MatCardMdImage,\n    MatCardLgImage,\n    MatCardImage,\n    MatCardXlImage,\n    MatCardAvatar,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n    MatCardXlImage, MatCardAvatar,\n  ],\n})\nexport class MatCardModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterViewInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nexport class MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatCheckboxMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewInit, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  private _required: boolean;\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change: EventEmitter<MatCheckboxChange> =\n      new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  _onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Reference to the focused state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _ngZone: NgZone,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value != this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked: boolean = false;\n\n  /**\n   * Whether the checkbox is disabled. This fully overrides the implementation provided by\n   * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n   */\n  @Input()\n  get disabled() { return this._disabled; }\n  set disabled(value: any) {\n    if (value != this.disabled) {\n      this._disabled = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean { return this._indeterminate; }\n  set indeterminate(value: boolean) {\n    const changed = value != this._indeterminate;\n    this._indeterminate = value;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n  private _indeterminate: boolean = false;\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the checkbox changes.\n    // Since the checkbox uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n\n      // Remove the animation class to avoid animation when the checkbox is moved between containers\n      const animationClass = this._currentAnimationClass;\n\n      this._ngZone.runOutsideAngular(() => {\n        setTimeout(() => {\n          element.classList.remove(animationClass);\n        }, 1000);\n      });\n    }\n  }\n\n  private _emitChangeEvent() {\n    let event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this.ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n\n      // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n      // Angular does not expect events to be raised during change detection, so any state change\n      // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n      // See https://github.com/angular/angular/issues/17793. To work around this, we defer telling\n      // the form control it has been touched until the next tick.\n      Promise.resolve().then(() => this._onTouched());\n    }\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    // Don't transition if animations are disabled.\n    if (this._animationMode === 'NoopAnimations') {\n      return '';\n    }\n\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule],\n  declarations: [MatCheckbox, MatCheckboxRequiredValidator],\n})\nexport class MatCheckboxModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nexport class MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatChipMixinBase =\n    mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\n\nconst CHIP_ATTRIBUTE_NAMES = ['mat-basic-chip'];\n\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-avatar, [matChipAvatar]',\n  host: {'class': 'mat-chip-avatar'}\n})\nexport class MatChipAvatar {}\n\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n  host: {'class': 'mat-chip-trailing-icon'}\n})\nexport class MatChipTrailingIcon {}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled', 'disableRipple'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[class.mat-chip-with-avatar]': 'avatar',\n    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[class.mat-chip-disabled]': 'disabled',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n  },\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable, CanDisableRipple, RippleTarget {\n\n  /** Reference to the RippleRenderer for the chip. */\n  private _chipRipple: RippleRenderer;\n\n  /** Whether the ripples are globally disabled through the RippleGlobalOptions */\n  private _ripplesGloballyDisabled = false;\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._ripplesGloballyDisabled;\n  }\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether the chip list is selectable */\n  chipListSelectable: boolean = true;\n\n  /** The chip avatar */\n  @ContentChild(MatChipAvatar) avatar: MatChipAvatar;\n\n  /** The chip's trailing icon. */\n  @ContentChild(MatChipTrailingIcon) trailingIcon: MatChipTrailingIcon;\n\n  /** The chip's remove toggler. */\n  @ContentChild(forwardRef(() => MatChipRemove)) removeIcon: MatChipRemove;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) {\n    this._selected = coerceBooleanProperty(value);\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: value\n    });\n  }\n  protected _selected: boolean = false;\n\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n  @Input()\n  get value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(value: any) { this._value = value; }\n  protected _value: any;\n\n  /**\n   * Whether or not the chip is selectable. When a chip is not selectable,\n   * changes to it's selected state are always ignored. By default a chip is\n   * selectable, and it becomes non-selectable if it's parent chip list is\n   * not selectable.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable && this.chipListSelectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  protected _selectable: boolean = true;\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (removed) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  protected _removable: boolean = true;\n\n  /** Emits when the chip is focused. */\n  readonly _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  readonly _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\n      new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** Emitted when a chip is to be removed. */\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** The ARIA selected applied to the chip. */\n  get ariaSelected(): string | null {\n    return this.selectable ? this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions) {\n    super(_elementRef);\n\n    this._addHostClassName();\n\n    this._chipRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._chipRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    if (globalOptions) {\n      this._ripplesGloballyDisabled = !!globalOptions.disabled;\n      // TODO(paul): Once the speedFactor is removed, we no longer need to copy each single option.\n      this.rippleConfig = {\n        speedFactor: globalOptions.baseSpeedFactor,\n        animation: globalOptions.animation,\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n      };\n    }\n  }\n\n  _addHostClassName() {\n    // Add class for the different chips\n    for (const attr of CHIP_ATTRIBUTE_NAMES) {\n      if (this._elementRef.nativeElement.hasAttribute(attr) ||\n        this._elementRef.nativeElement.tagName.toLowerCase() === attr) {\n        (this._elementRef.nativeElement as HTMLElement).classList.add(attr);\n        return;\n      }\n    }\n    (this._elementRef.nativeElement as HTMLElement).classList.add('mat-standard-chip');\n  }\n\n  ngOnDestroy() {\n    this.destroyed.emit({chip: this});\n    this._chipRipple._removeTriggerEvents();\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    this._selected = true;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: true\n    });\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    this._selected = false;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: false\n    });\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    this._selected = true;\n    // Emit select event when selected changes.\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: true,\n      selected: true\n    });\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    if (!this._hasFocus) {\n      this._elementRef.nativeElement.focus();\n      this._onFocus.next({chip: this});\n    }\n    this._hasFocus = true;\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Ensures events fire properly upon click. */\n  _handleClick(event: Event) {\n    // Check disabled\n    if (this.disabled) {\n      return;\n    }\n\n    event.preventDefault();\n    event.stopPropagation();\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    this._hasFocus = false;\n    this._onBlur.next({chip: this});\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove mat-chip-trailing-icon',\n    '(click)': '_handleClick()',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {\n  }\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(): void {\n    if (this._parentChip.removable) {\n      this._parentChip.remove();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** Default options, for the chips module, that can be overridden. */\nexport interface MatChipsDefaultOptions {\n  /** The list of key codes that will trigger a chipEnd event. */\n  separatorKeyCodes: number[] | Set<number>;\n}\n\n/** Injection token to be used to override the default options for the chips module. */\nexport const MAT_CHIPS_DEFAULT_OPTIONS =\n    new InjectionToken<MatChipsDefaultOptions>('mat-chips-default-options');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n  Input,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n/**\n * List of classes to add to MatButton instances based on host attributes to\n * style as different variants.\n */\nconst BUTTON_HOST_ATTRIBUTES = [\n  'mat-button',\n  'mat-flat-button',\n  'mat-icon-button',\n  'mat-raised-button',\n  'mat-stroked-button',\n  'mat-mini-fab',\n  'mat-fab',\n];\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nexport class MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatButtonMixinBase = mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\n             button[mat-flat-button]`,\n  exportAs: 'matButton',\n  host: {\n    '[disabled]': 'disabled || null',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n\n  /** Whether the button is round. */\n  readonly isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  readonly isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated Platform checks for SSR are no longer needed\n               * @breaking-change 7.0.0\n               */\n              // tslint:disable-next-line:no-unused-variable\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 7.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // For each of the variant selectors that is prevent in the button's host\n    // attributes, add the correct corresponding class.\n    for (const attr of BUTTON_HOST_ATTRIBUTES) {\n      if (this._hasHostAttributes(attr)) {\n        (elementRef.nativeElement as HTMLElement).classList.add(attr);\n      }\n    }\n\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n\n    if (this.isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Raised Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    // Note that we ignore the user-specified tabindex when it's disabled for\n    // consistency with the `mat-button` applied on native buttons where even\n    // though they have an index, they're not tabbable.\n    '[attr.tabindex]': 'disabled ? -1 : (tabIndex || 0)',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n  /** Tabindex of the button. */\n  @Input() tabIndex: number;\n\n  constructor(\n    platform: Platform,\n    focusMonitor: FocusMonitor,\n    elementRef: ElementRef,\n    // @breaking-change 7.0.0 `animationMode` parameter to be made required.\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n    super(elementRef, platform, focusMonitor, animationMode);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatAnchor, MatButton} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  Attribute,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {SelectionModel} from '@angular/cdk/collections';\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n// Boilerplate for applying mixins to MatButtonToggleGroup and MatButtonToggleGroupMultiple\n/** @docs-private */\nexport class MatButtonToggleGroupBase {}\nexport const _MatButtonToggleGroupMixinBase = mixinDisabled(MatButtonToggleGroupBase);\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\n/**\n * @deprecated Use `MatButtonToggleGroup` instead.\n * @breaking-change 7.0.0\n */\nexport class MatButtonToggleGroupMultiple {}\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  constructor(\n    /** The MatButtonToggle that emits the event. */\n    public source: MatButtonToggle,\n\n    /** The value assigned to the MatButtonToggle. */\n    public value: any) {}\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group',\n  providers: [\n    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n    {provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup},\n  ],\n  inputs: ['disabled'],\n  host: {\n    'role': 'group',\n    'class': 'mat-button-toggle-group',\n    '[class.mat-button-toggle-vertical]': 'vertical'\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup extends _MatButtonToggleGroupMixinBase implements\n  ControlValueAccessor, CanDisable, OnInit, AfterContentInit {\n\n  private _vertical = false;\n  private _multiple = false;\n  private _selectionModel: SelectionModel<MatButtonToggle>;\n\n  /**\n   * Reference to the raw value that the consumer tried to assign. The real\n   * value will exaclude any values from this one that don't correspond to a\n   * toggle. Useful for the cases where the value is assigned before the toggles\n   * have been initialized or at the same that they're being swapped out.\n   */\n  private _rawValue: any;\n\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle.name = this._name);\n    }\n  }\n  private _name = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any {\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\n\n    if (this.multiple) {\n      return selected.map(toggle => toggle.value);\n    }\n\n    return selected[0] ? selected[0].value : undefined;\n  }\n  set value(newValue: any) {\n    this._setSelectionByValue(newValue);\n    this.valueChange.emit(this.value);\n  }\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() readonly valueChange = new EventEmitter<any>();\n\n  /** Selected button toggles in the group. */\n  get selected() {\n    const selected = this._selectionModel.selected;\n    return this.multiple ? selected : (selected[0] || null);\n  }\n\n  /** Whether multiple button toggles can be selected. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Event emitted when the group's value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatButtonToggle>(this.multiple, undefined, false);\n  }\n\n  ngAfterContentInit() {\n    this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle._markForCheck());\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    const selected = this.selected;\n    const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n    const event = new MatButtonToggleChange(source!, this.value);\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  /**\n   * Syncs a button toggle's selected state with the model value.\n   * @param toggle Toggle to be synced.\n   * @param select Whether the toggle should be selected.\n   * @param isUserInput Whether the change was a result of a user interaction.\n   */\n  _syncButtonToggle(toggle: MatButtonToggle, select: boolean, isUserInput = false) {\n    // Deselect the currently-selected toggle, if we're in single-selection\n    // mode and the button being toggled isn't selected at the moment.\n    if (!this.multiple && this.selected && !toggle.checked) {\n      (this.selected as MatButtonToggle).checked = false;\n    }\n\n    if (select) {\n      this._selectionModel.select(toggle);\n    } else {\n      this._selectionModel.deselect(toggle);\n    }\n\n    // Only emit the change event for user input.\n    if (isUserInput) {\n      this._emitChangeEvent();\n    }\n\n    // Note: we emit this one no matter whether it was a user interaction, because\n    // it is used by Angular to sync up the two-way data binding.\n    this.valueChange.emit(this.value);\n  }\n\n  /** Checks whether a button toggle is selected. */\n  _isSelected(toggle: MatButtonToggle) {\n    return this._selectionModel.isSelected(toggle);\n  }\n\n  /** Determines whether a button toggle should be checked on init. */\n  _isPrechecked(toggle: MatButtonToggle) {\n    if (typeof this._rawValue === 'undefined') {\n      return false;\n    }\n\n    if (this.multiple && Array.isArray(this._rawValue)) {\n      return this._rawValue.some(value => toggle.value != null && value === toggle.value);\n    }\n\n    return toggle.value === this._rawValue;\n  }\n\n  /** Updates the selection state of the toggles in the group based on a value. */\n  private _setSelectionByValue(value: any|any[]) {\n    this._rawValue = value;\n\n    if (!this._buttonToggles) {\n      return;\n    }\n\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw Error('Value must be an array in multiple-selection mode.');\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n    } else {\n      this._clearSelection();\n      this._selectValue(value);\n    }\n  }\n\n  /** Clears the selected toggles. */\n  private _clearSelection() {\n    this._selectionModel.clear();\n    this._buttonToggles.forEach(toggle => toggle.checked = false);\n  }\n\n  /** Selects a value if there's a toggle that corresponds to it. */\n  private _selectValue(value: any) {\n    const correspondingOption = this._buttonToggles.find(toggle => {\n      return toggle.value != null && toggle.value === value;\n    });\n\n    if (correspondingOption) {\n      correspondingOption.checked = true;\n      this._selectionModel.select(correspondingOption);\n    }\n  }\n}\n\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nexport class MatButtonToggleBase {}\nexport const _MatButtonToggleMixinBase = mixinDisableRipple(MatButtonToggleBase);\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disableRipple'],\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    'class': 'mat-button-toggle',\n    // Clear out the native tabindex here since we forward it to the underlying button\n    '[attr.tabindex]': 'null',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatButtonToggle extends _MatButtonToggleMixinBase implements OnInit,\n  CanDisableRipple, OnDestroy {\n\n  private _isSingleSelector = false;\n  private _checked = false;\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  @ViewChild('button') _buttonElement: ElementRef<HTMLButtonElement>;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** Unique ID for the underlying `button` element. */\n  get buttonId(): string { return `${this.id}-button`; }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input() value: any;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean {\n    return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n  }\n  set checked(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._checked) {\n      this._checked = newValue;\n\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n      }\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n  }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Event emitted when the group value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _elementRef: ElementRef<HTMLElement>,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 8.0.0 `defaultTabIndex` to be made a required parameter.\n              @Attribute('tabindex') defaultTabIndex: string) {\n    super();\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n    this.buttonToggleGroup = toggleGroup;\n  }\n\n  ngOnInit() {\n    this._isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n    this._type = this._isSingleSelector ? 'radio' : 'checkbox';\n    this.id = this.id || `mat-button-toggle-${_uniqueIdCounter++}`;\n\n    if (this._isSingleSelector) {\n      this.name = this.buttonToggleGroup.name;\n    }\n\n    if (this.buttonToggleGroup && this.buttonToggleGroup._isPrechecked(this)) {\n      this.checked = true;\n    }\n\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._buttonElement.nativeElement.focus();\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native button. */\n  _onButtonClick() {\n    const newChecked = this._isSingleSelector ? true : !this._checked;\n\n    if (newChecked !== this._checked) {\n      this._checked = newChecked;\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n        this.buttonToggleGroup._onTouched();\n      }\n    }\n    // Emit a change event when it's the single selector\n    this.change.emit(new MatButtonToggleChange(this, this.value));\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When the group value changes, the button will not be notified.\n    // Use `markForCheck` to explicit update button toggle's status.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatButtonToggle, MatButtonToggleGroup} from './button-toggle';\n\n\n@NgModule({\n  imports: [MatCommonModule, MatRippleModule],\n  exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n  declarations: [MatButtonToggleGroup, MatButtonToggle],\n})\nexport class MatButtonToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  ElementRef,\n  Input,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n  EventEmitter,\n  Output,\n  InjectionToken,\n  Inject,\n} from '@angular/core';\nimport {\n  MatOption,\n  MatOptgroup,\n  MAT_OPTION_PARENT_COMPONENT,\n  mixinDisableRipple,\n  CanDisableRipple,\n} from '@angular/material/core';\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected. */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nexport class MatAutocompleteBase {}\nexport const _MatAutocompleteMixinBase = mixinDisableRipple(MatAutocompleteBase);\n\n/** Default `mat-autocomplete` options that can be overridden. */\nexport interface MatAutocompleteDefaultOptions {\n  /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n  autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nexport const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<MatAutocompleteDefaultOptions>('mat-autocomplete-default-options', {\n      providedIn: 'root',\n      factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY(): MatAutocompleteDefaultOptions {\n  return {autoActiveFirstOption: false};\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel: boolean = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean { return this._isOpen && this.showPanel; }\n  _isOpen: boolean = false;\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /**\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n   */\n  @Input()\n  get autoActiveFirstOption(): boolean { return this._autoActiveFirstOption; }\n  set autoActiveFirstOption(value: boolean) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  private _autoActiveFirstOption: boolean;\n\n  /**\n   * Specify the width of the autocomplete panel.  Can be any CSS sizing value, otherwise it will\n   * match the width of its host.\n   */\n  @Input() panelWidth: string | number;\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /** Event that is emitted when the autocomplete panel is opened. */\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event that is emitted when the autocomplete panel is closed. */\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(value: string) {\n    if (value && value.length) {\n      value.split(' ').forEach(className => this._classList[className.trim()] = true);\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef,\n    @Inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS) defaults: MatAutocompleteDefaultOptions) {\n    super();\n\n    this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibility state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._classList['mat-autocomplete-visible'] = this.showPanel;\n    this._classList['mat-autocomplete-hidden'] = !this.showPanel;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\n\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\n@Directive({\n  selector: '[matAutocompleteOrigin]',\n  exportAs: 'matAutocompleteOrigin',\n})\nexport class MatAutocompleteOrigin {\n  constructor(\n      /** Reference to the element on which the directive is applied. */\n      public elementRef: ElementRef<HTMLElement>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './autocomplete-trigger';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [\n    MatAutocomplete,\n    MatOptionModule,\n    MatAutocompleteTrigger,\n    MatAutocompleteOrigin,\n    MatCommonModule\n  ],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n})\nexport class MatAutocompleteModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AriaDescriber} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOCUMENT} from '@angular/common';\nimport {Directive, ElementRef, Inject, Input, NgZone, OnDestroy, Optional} from '@angular/core';\nimport {ThemePalette} from '@angular/material/core';\n\n\nlet nextId = 0;\n\nexport type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after';\nexport type MatBadgeSize = 'small' | 'medium' | 'large';\n\n/** Directive to display a text badge. */\n@Directive({\n  selector: '[matBadge]',\n  host: {\n    'class': 'mat-badge',\n    '[class.mat-badge-overlap]': 'overlap',\n    '[class.mat-badge-above]': 'isAbove()',\n    '[class.mat-badge-below]': '!isAbove()',\n    '[class.mat-badge-before]': '!isAfter()',\n    '[class.mat-badge-after]': 'isAfter()',\n    '[class.mat-badge-small]': 'size === \"small\"',\n    '[class.mat-badge-medium]': 'size === \"medium\"',\n    '[class.mat-badge-large]': 'size === \"large\"',\n    '[class.mat-badge-hidden]': 'hidden || !_hasContent',\n  },\n})\nexport class MatBadge implements OnDestroy {\n  /** Whether the badge has any content. */\n  _hasContent = false;\n\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n  @Input('matBadgeColor')\n  get color(): ThemePalette { return this._color; }\n  set color(value: ThemePalette) {\n    this._setColor(value);\n    this._color = value;\n  }\n  private _color: ThemePalette = 'primary';\n\n  /** Whether the badge should overlap its contents or not */\n  @Input('matBadgeOverlap')\n  get overlap(): boolean { return this._overlap; }\n  set overlap(val: boolean) {\n    this._overlap = coerceBooleanProperty(val);\n  }\n  private _overlap: boolean = true;\n\n  /**\n   * Position the badge should reside.\n   * Accepts any combination of 'above'|'below' and 'before'|'after'\n   */\n  @Input('matBadgePosition') position: MatBadgePosition = 'above after';\n\n  /** The content for the badge */\n  @Input('matBadge')\n  get content(): string { return this._content; }\n  set content(value: string) {\n    this._content = value;\n    this._hasContent = value != null && `${value}`.trim().length > 0;\n    this._updateTextContent();\n  }\n  private _content: string;\n\n  /** Message used to describe the decorated element via aria-describedby */\n  @Input('matBadgeDescription')\n  get description(): string { return this._description; }\n  set description(newDescription: string) {\n    if (newDescription !== this._description) {\n      this._updateHostAriaDescription(newDescription, this._description);\n      this._description = newDescription;\n    }\n  }\n  private _description: string;\n\n  /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n  @Input('matBadgeSize') size: MatBadgeSize = 'medium';\n\n  /** Whether the badge is hidden. */\n  @Input('matBadgeHidden')\n  get hidden(): boolean { return this._hidden; }\n  set hidden(val: boolean) {\n    this._hidden = coerceBooleanProperty(val);\n  }\n  private _hidden: boolean;\n\n  /** Unique id for the badge */\n  _id: number = nextId++;\n\n  private _badgeElement: HTMLElement;\n\n  constructor(\n      @Optional() @Inject(DOCUMENT) private _document: any,\n      private _ngZone: NgZone,\n      private _elementRef: ElementRef,\n      private _ariaDescriber: AriaDescriber) {}\n\n  /** Whether the badge is above the host or not */\n  isAbove(): boolean {\n    return this.position.indexOf('below') === -1;\n  }\n\n  /** Whether the badge is after the host or not */\n  isAfter(): boolean {\n    return this.position.indexOf('before') === -1;\n  }\n\n  ngOnDestroy() {\n    if (this.description && this._badgeElement) {\n      this._ariaDescriber.removeDescription(this._badgeElement, this.description);\n    }\n  }\n\n  /** Injects a span element into the DOM with the content. */\n  private _updateTextContent(): HTMLSpanElement {\n    if (!this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n    } else {\n      this._badgeElement.textContent = this.content;\n    }\n    return this._badgeElement;\n  }\n\n  /** Creates the badge element */\n  private _createBadgeElement(): HTMLElement {\n    const badgeElement = this._document.createElement('span');\n    const activeClass = 'mat-badge-active';\n\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n    badgeElement.classList.add('mat-badge-content');\n    badgeElement.textContent = this.content;\n\n    if (this.description) {\n      badgeElement.setAttribute('aria-label', this.description);\n    }\n\n    this._elementRef.nativeElement.appendChild(badgeElement);\n\n    // animate in after insertion\n    if (typeof requestAnimationFrame === 'function') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          badgeElement.classList.add(activeClass);\n        });\n      });\n    } else {\n      badgeElement.classList.add(activeClass);\n    }\n\n    return badgeElement;\n  }\n\n  /** Sets the aria-label property on the element */\n  private _updateHostAriaDescription(newDescription: string, oldDescription: string): void {\n    // ensure content available before setting label\n    const content = this._updateTextContent();\n\n    if (oldDescription) {\n      this._ariaDescriber.removeDescription(content, oldDescription);\n    }\n\n    if (newDescription) {\n      this._ariaDescriber.describe(content, newDescription);\n    }\n  }\n\n  /** Adds css theme class given the color to the component host */\n  private _setColor(colorPalette: ThemePalette) {\n    if (colorPalette !== this._color) {\n      if (this._color) {\n        this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\n      }\n      if (colorPalette) {\n        this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatBadge} from './badge';\n\n\n@NgModule({\n  imports: [\n    A11yModule,\n    MatCommonModule\n  ],\n  exports: [MatBadge],\n  declarations: [MatBadge],\n})\nexport class MatBadgeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a bottom sheet. */\nexport const MAT_BOTTOM_SHEET_DATA = new InjectionToken<any>('MatBottomSheetData');\n\n/**\n * Configuration used when opening a bottom sheet.\n */\nexport class MatBottomSheetConfig<D = any> {\n  /** The view container to place the overlay for the bottom sheet into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** Extra CSS classes to be added to the bottom sheet container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the bottom sheet. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Whether the bottom sheet has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop. */\n  backdropClass?: string;\n\n  /** Whether the user can use escape or clicking outside to close the bottom sheet. */\n  disableClose?: boolean = false;\n\n  /** Aria label to assign to the bottom sheet element. */\n  ariaLabel?: string | null = null;\n\n  /** Whether the bottom sheet should close when the user goes backwards/forwards in history. */\n  closeOnNavigation?: boolean = true;\n\n  /** Whether the bottom sheet should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material bottom sheet. */\nexport const matBottomSheetAnimations: {\n  readonly bottomSheetState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a bottom sheet. */\n  bottomSheetState: trigger('state', [\n    state('void, hidden', style({transform: 'translateY(100%)'})),\n    state('visible', style({transform: 'translateY(0%)'})),\n    transition('visible => void, visible => hidden',\n        animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible',\n        animate(`${AnimationDurations.EXITING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  EventEmitter,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {MatBottomSheetConfig} from './bottom-sheet-config';\nimport {matBottomSheetAnimations} from './bottom-sheet-animations';\nimport {Subscription} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\n\n// TODO(crisbeto): consolidate some logic between this, MatDialog and MatSnackBar\n\n/**\n * Internal component that wraps user-provided bottom sheet content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-bottom-sheet-container',\n  templateUrl: 'bottom-sheet-container.html',\n  styleUrls: ['bottom-sheet-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matBottomSheetAnimations.bottomSheetState],\n  host: {\n    'class': 'mat-bottom-sheet-container',\n    'tabindex': '-1',\n    'role': 'dialog',\n    'aria-modal': 'true',\n    '[attr.aria-label]': 'bottomSheetConfig?.ariaLabel',\n    '[@state]': '_animationState',\n    '(@state.start)': '_onAnimationStart($event)',\n    '(@state.done)': '_onAnimationDone($event)'\n  },\n})\nexport class MatBottomSheetContainer extends BasePortalOutlet implements OnDestroy {\n  private _breakpointSubscription: Subscription;\n\n  /** The portal outlet inside of this container into which the content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The state of the bottom sheet animations. */\n  _animationState: 'void' | 'visible' | 'hidden' = 'void';\n\n  /** Emits whenever the state of the animation changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** The class that traps and manages focus within the bottom sheet. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the bottom sheet was opened. */\n  private _elementFocusedBeforeOpened: HTMLElement | null = null;\n\n  /** Server-side rendering-compatible reference to the global document object. */\n  private _document: Document;\n\n  /** Whether the component has been destroyed. */\n  private _destroyed: boolean;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    breakpointObserver: BreakpointObserver,\n    @Optional() @Inject(DOCUMENT) document: any,\n    /** The bottom sheet configuration. */\n    public bottomSheetConfig: MatBottomSheetConfig) {\n    super();\n\n    this._document = document;\n    this._breakpointSubscription = breakpointObserver\n      .observe([Breakpoints.Medium, Breakpoints.Large, Breakpoints.XLarge])\n      .subscribe(() => {\n        this._toggleClass('mat-bottom-sheet-container-medium',\n            breakpointObserver.isMatched(Breakpoints.Medium));\n        this._toggleClass('mat-bottom-sheet-container-large',\n            breakpointObserver.isMatched(Breakpoints.Large));\n        this._toggleClass('mat-bottom-sheet-container-xlarge',\n            breakpointObserver.isMatched(Breakpoints.XLarge));\n      });\n  }\n\n  /** Attach a component portal as content to this bottom sheet container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this bottom sheet container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Begin animation of bottom sheet entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the bottom sheet exiting from view. */\n  exit(): void {\n    if (!this._destroyed) {\n      this._animationState = 'hidden';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._breakpointSubscription.unsubscribe();\n    this._destroyed = true;\n  }\n\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'hidden') {\n      this._restoreFocus();\n    } else if (event.toState === 'visible' && this.bottomSheetConfig.autoFocus) {\n      this._trapFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  private _toggleClass(cssClass: string, add: boolean) {\n    const classList = this._elementRef.nativeElement.classList;\n    add ? classList.add(cssClass) : classList.remove(cssClass);\n  }\n\n  private _validatePortalAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach bottom sheet content after content is already attached');\n    }\n  }\n\n  private _setPanelClass() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClass = this.bottomSheetConfig.panelClass;\n\n    if (Array.isArray(panelClass)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      panelClass.forEach(cssClass => element.classList.add(cssClass));\n    } else if (panelClass) {\n      element.classList.add(panelClass);\n    }\n  }\n\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    this._focusTrap.focusInitialElementWhenReady();\n  }\n\n  /** Restores focus to the element that was focused before the bottom sheet opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the bottom sheet was opened. */\n  private _savePreviouslyFocusedElement() {\n    this._elementFocusedBeforeOpened = this._document.activeElement as HTMLElement;\n\n    // The `focus` method isn't available during server-side rendering.\n    if (this._elementRef.nativeElement.focus) {\n      Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PortalModule,\n  ],\n  exports: [MatBottomSheetContainer, MatCommonModule],\n  declarations: [MatBottomSheetContainer],\n  entryComponents: [MatBottomSheetContainer],\n})\nexport class MatBottomSheetModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Location} from '@angular/common';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {merge, Observable, Subject, SubscriptionLike, Subscription} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n/**\n * Reference to a bottom sheet dispatched from the bottom sheet service.\n */\nexport class MatBottomSheetRef<T = any, R = any> {\n  /** Instance of the component making up the content of the bottom sheet. */\n  instance: T;\n\n  /**\n   * Instance of the component into which the bottom sheet content is projected.\n   * @docs-private\n   */\n  containerInstance: MatBottomSheetContainer;\n\n  /** Subject for notifying the user that the bottom sheet has been dismissed. */\n  private readonly _afterDismissed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the bottom sheet has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Result to be passed down to the `afterDismissed` stream. */\n  private _result: R | undefined;\n\n  /** Subscription to changes in the user's location. */\n  private _locationChanges: SubscriptionLike = Subscription.EMPTY;\n\n  constructor(\n    containerInstance: MatBottomSheetContainer,\n    private _overlayRef: OverlayRef,\n    location?: Location) {\n    this.containerInstance = containerInstance;\n\n    // Emit when opening animation completes\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'visible'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'hidden'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._locationChanges.unsubscribe();\n      this._overlayRef.dispose();\n      this._afterDismissed.next(this._result);\n      this._afterDismissed.complete();\n    });\n\n    if (!containerInstance.bottomSheetConfig.disableClose) {\n      merge(\n        _overlayRef.backdropClick(),\n        _overlayRef.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE))\n      ).subscribe(() => this.dismiss());\n    }\n\n    if (location) {\n      this._locationChanges = location.subscribe(() => {\n        if (containerInstance.bottomSheetConfig.closeOnNavigation) {\n          this.dismiss();\n        }\n      });\n    }\n  }\n\n  /**\n   * Dismisses the bottom sheet.\n   * @param result Data to be passed back to the bottom sheet opener.\n   */\n  dismiss(result?: R): void {\n    if (!this._afterDismissed.closed) {\n      // Transition the backdrop in parallel to the bottom sheet.\n      this.containerInstance._animationStateChanged.pipe(\n        filter(event => event.phaseName === 'start'),\n        take(1)\n      ).subscribe(() => this._overlayRef.detachBackdrop());\n\n      this._result = result;\n      this.containerInstance.exit();\n    }\n  }\n\n  /** Gets an observable that is notified when the bottom sheet is finished closing. */\n  afterDismissed(): Observable<R | undefined> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the bottom sheet has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {ComponentRef, Injectable, Injector, Optional, SkipSelf, TemplateRef} from '@angular/core';\nimport {Location} from '@angular/common';\nimport {of as observableOf} from 'rxjs';\nimport {MAT_BOTTOM_SHEET_DATA, MatBottomSheetConfig} from './bottom-sheet-config';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\nimport {MatBottomSheetModule} from './bottom-sheet-module';\nimport {MatBottomSheetRef} from './bottom-sheet-ref';\n\n\n/**\n * Service to trigger Material Design bottom sheets.\n */\n@Injectable({providedIn: MatBottomSheetModule})\nexport class MatBottomSheet {\n  private _bottomSheetRefAtThisLevel: MatBottomSheetRef<any> | null = null;\n\n  /** Reference to the currently opened bottom sheet. */\n  get _openedBottomSheetRef(): MatBottomSheetRef<any> | null {\n    const parent = this._parentBottomSheet;\n    return parent ? parent._openedBottomSheetRef : this._bottomSheetRefAtThisLevel;\n  }\n\n  set _openedBottomSheetRef(value: MatBottomSheetRef<any> | null) {\n    if (this._parentBottomSheet) {\n      this._parentBottomSheet._openedBottomSheetRef = value;\n    } else {\n      this._bottomSheetRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() @SkipSelf() private _parentBottomSheet: MatBottomSheet,\n      @Optional() private _location?: Location) {}\n\n  open<T, D = any, R = any>(component: ComponentType<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n  open<T, D = any, R = any>(template: TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R> {\n\n    const _config = _applyConfigDefaults(config);\n    const overlayRef = this._createOverlay(_config);\n    const container = this._attachContainer(overlayRef, _config);\n    const ref = new MatBottomSheetRef<T, R>(container, overlayRef, this._location);\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      container.attachTemplatePortal(new TemplatePortal<T>(componentOrTemplateRef, null!, {\n        $implicit: _config.data,\n        bottomSheetRef: ref\n      } as any));\n    } else {\n      const portal = new ComponentPortal(componentOrTemplateRef, undefined,\n            this._createInjector(_config, ref));\n      const contentRef = container.attachComponentPortal(portal);\n      ref.instance = contentRef.instance;\n    }\n\n    // When the bottom sheet is dismissed, clear the reference to it.\n    ref.afterDismissed().subscribe(() => {\n      // Clear the bottom sheet ref if it hasn't already been replaced by a newer one.\n      if (this._openedBottomSheetRef == ref) {\n        this._openedBottomSheetRef = null;\n      }\n    });\n\n    if (this._openedBottomSheetRef) {\n      // If a bottom sheet is already in view, dismiss it and enter the\n      // new bottom sheet after exit animation is complete.\n      this._openedBottomSheetRef.afterDismissed().subscribe(() => ref.containerInstance.enter());\n      this._openedBottomSheetRef.dismiss();\n    } else {\n      // If no bottom sheet is in view, enter the new bottom sheet.\n      ref.containerInstance.enter();\n    }\n\n    this._openedBottomSheetRef = ref;\n\n    return ref;\n  }\n\n  /**\n   * Dismisses the currently-visible bottom sheet.\n   */\n  dismiss(): void {\n    if (this._openedBottomSheetRef) {\n      this._openedBottomSheetRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the bottom sheet container component to the overlay.\n   */\n  private _attachContainer(overlayRef: OverlayRef,\n                           config: MatBottomSheetConfig): MatBottomSheetContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatBottomSheetConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatBottomSheetContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatBottomSheetContainer> = overlayRef.attach(containerPortal);\n    return containerRef.instance;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified bottom sheet config.\n   */\n  private _createOverlay(config: MatBottomSheetConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig({\n      direction: config.direction,\n      hasBackdrop: config.hasBackdrop,\n      maxWidth: '100%',\n      scrollStrategy: this._overlay.scrollStrategies.block(),\n      positionStrategy: this._overlay.position()\n        .global()\n        .centerHorizontally()\n        .bottom('0')\n    });\n\n    if (config.backdropClass) {\n      overlayConfig.backdropClass = config.backdropClass;\n    }\n\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a bottom sheet component.\n   * @param config Config that was used to create the bottom sheet.\n   * @param bottomSheetRef Reference to the bottom sheet.\n   */\n  private _createInjector<T>(config: MatBottomSheetConfig,\n                             bottomSheetRef: MatBottomSheetRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap<any, any>([\n      [MatBottomSheetRef, bottomSheetRef],\n      [MAT_BOTTOM_SHEET_DATA, config.data]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the bottom sheet config.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(config?: MatBottomSheetConfig): MatBottomSheetConfig {\n  return {...new MatBottomSheetConfig(), ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {MatOptgroup} from './optgroup';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT =\n    new InjectionToken<MatOptionParentComponent>('MAT_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  styleUrls: ['option.css'],\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption implements AfterViewChecked, OnDestroy {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _id = `mat-option-${_uniqueIdCounter++}`;\n  private _mostRecentViewValue = '';\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() { return this._parent && this._parent.multiple; }\n\n  /** The unique ID of the option. */\n  get id(): string { return this._id; }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple() { return this._parent && this._parent.disableRipple; }\n\n  /** Event emitted when the option is selected or deselected. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n\n  /** Emits when the state of the option changes and any parents have to be notified. */\n  readonly _stateChanges = new Subject<void>();\n\n  constructor(\n    private _element: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() readonly group: MatOptgroup) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Sets focus onto this option. */\n  focus(): void {\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * `Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.`\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  ngAfterViewChecked() {\n    // Since parent components could be using the option's label to display the selected values\n    // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n    // relatively cheap, however we still limit them only to selected options in order to avoid\n    // hitting the DOM too often.\n    if (this._selected) {\n      const viewValue = this.viewValue;\n\n      if (viewValue !== this._mostRecentViewValue) {\n        this._mostRecentViewValue = viewValue;\n        this._stateChanges.next();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function _countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n  optionGroups: QueryList<MatOptgroup>): number {\n\n  if (optionGroups.length) {\n    let optionsArray = options.toArray();\n    let groups = optionGroups.toArray();\n    let groupCounter = 0;\n\n    for (let i = 0; i < optionIndex + 1; i++) {\n      if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n        groupCounter++;\n      }\n    }\n\n    return groupCounter;\n  }\n\n  return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function _getOptionScrollPosition(optionIndex: number, optionHeight: number,\n    currentScrollPosition: number, panelHeight: number): number {\n  const optionOffset = optionIndex * optionHeight;\n\n  if (optionOffset < currentScrollPosition) {\n    return optionOffset;\n  }\n\n  if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n    return Math.max(0, optionOffset - panelHeight + optionHeight);\n  }\n\n  return currentScrollPosition;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n\n@NgModule({\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup]\n})\nexport class MatOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MAT_LABEL_GLOBAL_OPTIONS =\n  new InjectionToken<LabelOptions>('mat-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n  /**\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n   * Default behavior is assumed to be `auto`.\n   */\n  float?: FloatLabelType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the MatFormField. */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /**\n   * Whether the input is currently in an autofilled state. If property is not present on the\n   * control it is assumed to be false.\n   */\n  readonly autofilled?: boolean;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/**\n * The placeholder text for an `MatFormField`.\n * @deprecated Use `<mat-label>` to specify the label and the `placeholder` attribute to specify the\n *     placeholder.\n * @breaking-change 8.0.0\n */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed the the front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  FloatLabelType,\n  LabelOptions,\n  MAT_LABEL_GLOBAL_OPTIONS,\n  mixinColor,\n} from '@angular/material/core';\nimport {EMPTY, fromEvent, merge} from 'rxjs';\nimport {startWith, take} from 'rxjs/operators';\nimport {MatError} from './error';\nimport {matFormFieldAnimations} from './form-field-animations';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {Platform} from '@angular/cdk/platform';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nlet nextUniqueId = 0;\nconst floatingLabelScale = 0.75;\nconst outlineGapPadding = 5;\n\n\n/**\n * Boilerplate for applying mixins to MatFormField.\n * @docs-private\n */\nexport class MatFormFieldBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/**\n * Base class to which we're applying the form field mixins.\n * @docs-private\n */\nexport const _MatFormFieldMixinBase = mixinColor(MatFormFieldBase, 'primary');\n\n/** Possible appearance styles for the form field. */\nexport type MatFormFieldAppearance = 'legacy' | 'standard' | 'fill' | 'outline';\n\n/**\n * Represents the default options form the form field that can be configured\n * using the `MAT_FORM_FIELD_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatFormFieldDefaultOptions {\n  appearance?: MatFormFieldAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all form field within an app.\n */\nexport const MAT_FORM_FIELD_DEFAULT_OPTIONS =\n    new InjectionToken<MatFormFieldDefaultOptions>('MAT_FORM_FIELD_DEFAULT_OPTIONS');\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here.\n  // The MatInput styles are fairly minimal so it shouldn't be a big deal for people who\n  // aren't using MatInput.\n  styleUrls: [\n    'form-field.css',\n    'form-field-fill.css',\n    'form-field-legacy.css',\n    'form-field-outline.css',\n    'form-field-standard.css',\n    '../input/input.css',\n  ],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-form-field',\n    '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n    '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n    '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n    '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-form-field-autofilled]': '_control.autofilled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n    '[class._mat-animation-noopable]': '!_animationsEnabled',\n  },\n  inputs: ['color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField extends _MatFormFieldMixinBase\n    implements AfterContentInit, AfterContentChecked, AfterViewInit, CanColor {\n  private _labelOptions: LabelOptions;\n\n  /** The form-field appearance style. */\n  @Input()\n  get appearance(): MatFormFieldAppearance {\n    return this._appearance || this._defaultOptions && this._defaultOptions.appearance || 'legacy';\n  }\n  set appearance(value: MatFormFieldAppearance) {\n    const oldValue = this._appearance;\n    this._appearance = value;\n    if (this._appearance === 'outline' && oldValue !== value) {\n      // @breaking-change 7.0.0 Remove this check and else block once _ngZone is required.\n      if (this._ngZone) {\n        this._ngZone!.onStable.pipe(take(1)).subscribe(() => {\n          this._ngZone!.runOutsideAngular(() => this.updateOutlineGap());\n        });\n      } else {\n        Promise.resolve().then(() => this.updateOutlineGap());\n      }\n    }\n  }\n  _appearance: MatFormFieldAppearance;\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker(): boolean { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: boolean) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat(): boolean {\n    return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat(): boolean { return this.floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel(): string { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  // Unique id for the internal form field label.\n  _labelId = `mat-form-field-label-${nextUniqueId++}`;\n\n  /**\n   * Whether the label should always float, never float or float as the user types.\n   *\n   * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n   * way to make the floating label emulate the behavior of a standard input placeholder. However\n   * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n   * appearances the `never` option has been disabled in favor of just using the placeholder.\n   */\n  @Input()\n  get floatLabel(): FloatLabelType {\n    return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n  }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  /** Whether the Angular animations are enabled. */\n  _animationsEnabled: boolean;\n\n  /**\n   * @deprecated\n   * @breaking-change 7.0.0\n   */\n  @ViewChild('underline') underlineRef: ElementRef;\n\n  @ViewChild('connectionContainer') _connectionContainerRef: ElementRef<HTMLElement>;\n  @ViewChild('inputContainer') _inputContainerRef: ElementRef;\n  @ViewChild('label') private _label: ElementRef;\n  @ContentChild(MatFormFieldControl) _control: MatFormFieldControl<any>;\n  @ContentChild(MatPlaceholder) _placeholderChild: MatPlaceholder;\n  @ContentChild(MatLabel) _labelChild: MatLabel;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions,\n      @Optional() private _dir: Directionality,\n      @Optional() @Inject(MAT_FORM_FIELD_DEFAULT_OPTIONS) private _defaultOptions:\n          MatFormFieldDefaultOptions,\n      // @breaking-change 7.0.0 _platform, _ngZone and _animationMode to be made required.\n      private _platform?: Platform,\n      private _ngZone?: NgZone,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) _animationMode?: string) {\n    super(_elementRef);\n\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n    this._animationsEnabled = _animationMode !== 'NoopAnimations';\n  }\n\n  /**\n   * Gets an ElementRef for the element that a overlay attached to the form-field should be\n   * positioned relative to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._connectionContainerRef || this._elementRef;\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n    if (this._control.controlType) {\n      this._elementRef.nativeElement.classList\n          .add(`mat-form-field-type-${this._control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    this._control.stateChanges.pipe(startWith(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Run change detection if the value, prefix, or suffix changes.\n    const valueChanges = this._control.ngControl && this._control.ngControl.valueChanges || EMPTY;\n    merge(valueChanges, this._prefixChildren.changes, this._suffixChildren.changes)\n        .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: string): boolean {\n    const ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && ngControl[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control && this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this.appearance === 'legacy' && !this._hasLabel() ||\n        this._hasLabel() && !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      // If animations are disabled, we shouldn't go in here,\n      // because the `transitionend` will never fire.\n      if (this._animationsEnabled) {\n        this._showAlwaysAnimate = true;\n\n        fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n          this._showAlwaysAnimate = false;\n        });\n      }\n\n      this.floatLabel = 'always';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align === 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align === 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        const startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        const endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n\n  /**\n   * Updates the width and position of the gap in the outline. Only relevant for the outline\n   * appearance.\n   */\n  updateOutlineGap() {\n    if (this.appearance !== 'outline') {\n      return;\n    }\n\n    let startWidth = 0;\n    let gapWidth = 0;\n    const startEls = this._connectionContainerRef.nativeElement.querySelectorAll<HTMLElement>(\n      '.mat-form-field-outline-start');\n    const gapEls = this._connectionContainerRef.nativeElement.querySelectorAll<HTMLElement>(\n        '.mat-form-field-outline-gap');\n    if (this._label && this._label.nativeElement.children.length) {\n      if (this._platform && !this._platform.isBrowser) {\n        // getBoundingClientRect isn't available on the server.\n        return;\n      }\n      if (!document.documentElement.contains(this._elementRef.nativeElement)) {\n        return;\n      }\n\n      const containerStart = this._getStartEnd(\n          this._connectionContainerRef.nativeElement.getBoundingClientRect());\n      const labelStart = this._getStartEnd(\n          this._label.nativeElement.children[0].getBoundingClientRect());\n      let labelWidth = 0;\n      for (const child of this._label.nativeElement.children) {\n        labelWidth += child.offsetWidth;\n      }\n      startWidth = labelStart - containerStart - outlineGapPadding;\n      gapWidth = labelWidth * floatingLabelScale + outlineGapPadding * 2;\n    }\n\n    for (let i = 0; i < startEls.length; i++) {\n      startEls.item(i).style.width = `${startWidth}px`;\n    }\n    for (let i = 0; i < gapEls.length; i++) {\n      gapEls.item(i).style.width = `${gapWidth}px`;\n    }\n  }\n\n  /** Gets the start end of the rect considering the current directionality. */\n  private _getStartEnd(rect: ClientRect): number {\n    return this._dir && this._dir.value === 'rtl' ? rect.right : rect.left;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n  imports: [\n    CommonModule,\n    ObserversModule,\n  ],\n  exports: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n})\nexport class MatFormFieldModule {}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {BidiModule} from '@angular/cdk/bidi';\n\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks', {\n  providedIn: 'root',\n  factory: MATERIAL_SANITY_CHECKS_FACTORY,\n});\n\n/** @docs-private */\nexport function MATERIAL_SANITY_CHECKS_FACTORY(): boolean {\n  return true;\n}\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  /** Whether we've already checked for HammerJs availability. */\n  private _hasCheckedHammer = false;\n\n  /** Reference to the global `document` object. */\n  private _document = typeof document === 'object' && document ? document : null;\n\n  /** Reference to the global 'window' object. */\n  private _window = typeof window === 'object' && window ? window : null;\n\n  constructor(@Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecksEnabled: boolean) {\n    if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n      this._checkDoctypeIsDefined();\n      this._checkThemeIsPresent();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n\n  /** Whether any sanity checks are enabled */\n  private _areChecksEnabled(): boolean {\n    return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n  }\n\n  /** Whether the code is running in tests. */\n  private _isTestEnv() {\n    return this._window && (this._window['__karma__'] || this._window['jasmine']);\n  }\n\n  private _checkDoctypeIsDefined(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n\n  private _checkThemeIsPresent(): void {\n    // We need to assert that the `body` is defined, because these checks run very early\n    // and the `body` won't be defined if the consumer put their scripts in the `head`.\n    if (this._document && this._document.body && typeof getComputedStyle === 'function') {\n      const testElement = this._document.createElement('div');\n\n      testElement.classList.add('mat-theme-loaded-marker');\n      this._document.body.appendChild(testElement);\n\n      const computedStyle = getComputedStyle(testElement);\n\n      // In some situations the computed style of the test element can be null. For example in\n      // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n      // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n      if (computedStyle && computedStyle.display !== 'none') {\n        console.warn(\n          'Could not find Angular Material core theme. Most Material ' +\n          'components may not work as expected. For more info refer ' +\n          'to the theming guide: https://material.angular.io/guide/theming'\n        );\n      }\n\n      this._document.body.removeChild(testElement);\n    }\n  }\n\n  /** Checks whether HammerJS is available. */\n  _checkHammerIsAvailable(): void {\n    if (this._hasCheckedHammer || !this._window) {\n      return;\n    }\n\n    if (this._areChecksEnabled() && !this._window['Hammer']) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material components may not work correctly.');\n    }\n    this._hasCheckedHammer = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  /** Whether the component is disabled. */\n  disabled: boolean;\n}\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): Constructor<CanDisable> & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled() { return this._disabled; }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  /** Theme color palette for the component. */\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values. */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(base: T,\n    defaultColor?: ThemePalette): Constructor<CanColor> & T {\n  return class extends base {\n    private _color: ThemePalette;\n\n    get color(): ThemePalette { return this._color; }\n    set color(value: ThemePalette) {\n      const colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  /** Whether ripples are disabled. */\n  disableRipple: boolean;\n}\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T)\n    : Constructor<CanDisableRipple> & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n/** @docs-private */\nexport interface HasTabIndex {\n  /** Tabindex of the component. */\n  tabIndex: number;\n}\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : Constructor<HasTabIndex> & T {\n  return class extends base {\n    private _tabIndex: number = defaultTabIndex;\n\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs';\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  updateErrorState();\n  readonly stateChanges: Subject<void>;\n  errorState: boolean;\n  errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n  ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n: Constructor<CanUpdateErrorState> & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping\n     * `MatFormField` needs to run change detection.\n     */\n    readonly stateChanges = new Subject<void>();\n\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable, Subscriber} from 'rxjs';\nimport {Constructor} from './constructor';\n\n\n/**\n * Mixin that adds an initialized property to a directive which, when subscribed to, will emit a\n * value once markInitialized has been called, which should be done during the ngOnInit function.\n * If the subscription is made after it has already been marked as initialized, then it will trigger\n * an emit immediately.\n * @docs-private\n */\nexport interface HasInitialized {\n  /** Stream that emits once during the directive/component's ngOnInit. */\n  initialized: Observable<void>;\n\n  /**\n   * Sets the state as initialized and must be called during ngOnInit to notify subscribers that\n   * the directive has been initialized.\n   * @docs-private\n   */\n  _markInitialized: () => void;\n}\n\n/** Mixin to augment a directive with an initialized property that will emits when ngOnInit ends. */\nexport function mixinInitialized<T extends Constructor<{}>>(base: T):\n    Constructor<HasInitialized> & T {\n  return class extends base {\n    /** Whether this directive has been marked as initialized. */\n    _isInitialized = false;\n\n    /**\n     * List of subscribers that subscribed before the directive was initialized. Should be notified\n     * during _markInitialized. Set to null after pending subscribers are notified, and should\n     * not expect to be populated after.\n     */\n    _pendingSubscribers: Subscriber<void>[] | null = [];\n\n    /**\n     * Observable stream that emits when the directive initializes. If already initialized, the\n     * subscriber is stored to be notified once _markInitialized is called.\n     */\n    initialized = new Observable<void>(subscriber => {\n      // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify\n      // when _markInitialized is called.\n      if (this._isInitialized) {\n        this._notifySubscriber(subscriber);\n      } else {\n        this._pendingSubscribers!.push(subscriber);\n      }\n    });\n\n    constructor(...args: any[]) { super(...args); }\n\n    /**\n     * Marks the state as initialized and notifies pending subscribers. Should be called at the end\n     * of ngOnInit.\n     * @docs-private\n     */\n    _markInitialized(): void {\n      if (this._isInitialized) {\n        throw Error('This directive has already been marked as initialized and ' +\n            'should not be called twice.');\n      }\n\n      this._isInitialized = true;\n\n      this._pendingSubscribers!.forEach(this._notifySubscriber);\n      this._pendingSubscribers = null;\n    }\n\n    /** Emits and completes the subscriber stream (should only emit once). */\n    _notifySubscriber(subscriber: Subscriber<void>): void {\n      subscriber.next();\n      subscriber.complete();\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {inject, InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE', {\n  providedIn: 'root',\n  factory: MAT_DATE_LOCALE_FACTORY,\n});\n\n/** @docs-private */\nexport function MAT_DATE_LOCALE_FACTORY(): string {\n  return inject(LOCALE_ID);\n}\n\n/**\n * No longer needed since MAT_DATE_LOCALE has been changed to a scoped injectable.\n * If you are importing and providing this in your code you can simply remove it.\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges = new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n  private readonly _clampDate: boolean;\n\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   *\n   * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\n   * getting the string representation of a Date object from it's utc representation. We're keeping\n   * it here for sometime, just for precaution, in case we decide to revert some of these changes\n   * though.\n   */\n  useUtcForDisplay: boolean = true;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string, platform: Platform) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    this.useUtcForDisplay = !platform.TRIDENT;\n    this._clampDate = platform.TRIDENT || platform.EDGE;\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {month: style, timeZone: 'utc'});\n      return range(12, i =>\n          this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric', timeZone: 'utc'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {weekday: style, timeZone: 'utc'});\n      return range(7, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric', timeZone: 'utc'});\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    if (SUPPORTS_INTL_API) {\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n        date = this.clone(date);\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n      }\n\n      displayFormat = {...displayFormat, timeZone: 'utc'};\n\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    const result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n\n  /**\n   * When converting Date object to string, javascript built-in functions may return wrong\n   * results because it applies its internal DST rules. The DST rules around the world change\n   * very frequently, and the current valid rule is not always valid in previous years though.\n   * We work around this problem building a new Date object which has its internal UTC\n   * representation with the local date and time.\n   * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\n   *    timeZone set to 'utc' to work fine.\n   * @param date Date from which we want to get the string representation according to dtf\n   * @returns A Date object with its UTC representation based on the passed in date info\n   */\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\n    const d = new Date(Date.UTC(\n        date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n        date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n    return dtf.format(d);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, supportsPassiveEventListeners} from '@angular/cdk/platform';\nimport {RippleRef, RippleState} from './ripple-ref';\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  persistent?: boolean;\n  animation?: RippleAnimationConfig;\n  terminateOnPointerUp?: boolean;\n  /**\n   * @deprecated Use the `animation` property instead.\n   * @breaking-change 7.0.0\n   */\n  speedFactor?: number;\n};\n\n/**\n * Interface that describes the configuration for the animation of a ripple.\n * There are two animation phases with different durations for the ripples.\n */\nexport interface RippleAnimationConfig {\n  /** Duration in milliseconds for the enter animation (expansion from point of contact). */\n  enterDuration?: number;\n  /** Duration in milliseconds for the exit animation (fade-out). */\n  exitDuration?: number;\n}\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nexport const defaultRippleAnimationConfig = {\n  enterDuration: 450,\n  exitDuration: 400\n};\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst ignoreMouseEventsTimeout = 800;\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer {\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /** Events to be registered on the trigger element. */\n  private _triggerEvents = new Map<string, any>();\n\n  /** Set of currently active ripple references. */\n  private _activeRipples = new Set<RippleRef>();\n\n  /** Latest non-persistent ripple that was triggered. */\n  private _mostRecentTransientRipple: RippleRef | null;\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /** Options that apply to all the event listeners that are bound by the renderer. */\n  private _eventOptions = supportsPassiveEventListeners() ? ({passive: true} as any) : false;\n\n  /**\n   * Cached dimensions of the ripple container. Set when the first\n   * ripple is shown and cleared once no more ripples are visible.\n   */\n  private _containerRect: ClientRect | null;\n\n  constructor(private _target: RippleTarget,\n              private _ngZone: NgZone,\n              elementRef: ElementRef,\n              platform: Platform) {\n\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents.set('mousedown', this.onMousedown);\n      this._triggerEvents.set('mouseup', this.onPointerUp);\n      this._triggerEvents.set('mouseleave', this.onPointerUp);\n\n      this._triggerEvents.set('touchstart', this.onTouchStart);\n      this._triggerEvents.set('touchend', this.onPointerUp);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = this._containerRect =\n                          this._containerRect || this._containerElement.getBoundingClientRect();\n    const animationConfig = {...defaultRippleAnimationConfig, ...config.animation};\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n    const duration = animationConfig.enterDuration / (config.speedFactor || 1);\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    if (!config.persistent) {\n      this._mostRecentTransientRipple = rippleRef;\n    }\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      const isMostRecentTransientRipple = rippleRef === this._mostRecentTransientRipple;\n\n      rippleRef.state = RippleState.VISIBLE;\n\n      // When the timer runs out while the user has kept their pointer down, we want to\n      // keep only the persistent ripples and the latest transient ripple. We do this,\n      // because we don't want stacked transient ripples to appear after their enter\n      // animation has finished.\n      if (!config.persistent && (!isMostRecentTransientRipple || !this._isPointerDown)) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    const wasActive = this._activeRipples.delete(rippleRef);\n\n    if (rippleRef === this._mostRecentTransientRipple) {\n      this._mostRecentTransientRipple = null;\n    }\n\n    // Clear out the cached bounding rect if we have no more ripples.\n    if (!this._activeRipples.size) {\n      this._containerRect = null;\n    }\n\n    // For ripples that are not active anymore, don't re-un the fade-out animation.\n    if (!wasActive) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n    const animationConfig = {...defaultRippleAnimationConfig, ...rippleRef.config.animation};\n\n    rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n    rippleEl.style.opacity = '0';\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode!.removeChild(rippleEl);\n    }, animationConfig.exitDuration);\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(element: HTMLElement) {\n    if (!element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n\n    this._ngZone.runOutsideAngular(() => {\n      this._triggerEvents.forEach((fn, type) =>\n          element.addEventListener(type, fn, this._eventOptions));\n    });\n\n    this._triggerElement = element;\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private onMousedown = (event: MouseEvent) => {\n    const isSyntheticEvent = this._lastTouchStartEvent &&\n        Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n\n    if (!this._target.rippleDisabled && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private onTouchStart = (event: TouchEvent) => {\n    if (!this._target.rippleDisabled) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      this.fadeInRipple(\n          event.touches[0].clientX, event.touches[0].clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private onPointerUp = () => {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      // By default, only ripples that are completely visible will fade out on pointer release.\n      // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\n      const isVisible = ripple.state === RippleState.VISIBLE ||\n        ripple.config.terminateOnPointerUp && ripple.state === RippleState.FADING_IN;\n\n      if (!ripple.config.persistent && isVisible) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n  private runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => {\n        this._triggerElement!.removeEventListener(type, fn, this._eventOptions);\n      });\n    }\n  }\n}\n\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Converts values into strings. Falsy values become empty strings.\n * @docs-private\n */\nexport function coerceToString(value: string | number): string {\n  return `${value || ''}`;\n}\n\n/**\n * Converts a value that might be a string into a number.\n * @docs-private\n */\nexport function coerceToNumber(value: string | number): number {\n  return typeof value === 'string' ? parseInt(value, 10) : value;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`matMenuTriggerFor: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`xPosition value must be either 'before' or after'.\n      Example: <mat-menu xPosition=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`yPosition value must be either 'above' or below'.\n      Example: <mat-menu yPosition=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {DateAdapter} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n  imports: [PlatformModule],\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n  ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({providedIn: 'root'})\nexport class ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {\n  HammerStatic,\n  HammerInstance,\n  Recognizer,\n  RecognizerStatic,\n  HammerOptions,\n} from './gesture-annotations';\n\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\n\nconst ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES = [\n  'longpress',\n  'slide',\n  'slidestart',\n  'slideend',\n  'slideright',\n  'slideleft'\n];\n\n/**\n * Fake HammerInstance that is used when a Hammer instance is requested when HammerJS has not\n * been loaded on the page.\n */\nconst noopHammerInstance: HammerInstance = {\n  on: () => {},\n  off: () => {},\n};\n\n/** Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class GestureConfig extends HammerGestureConfig {\n  /** List of new event names to add to the gesture support list */\n  events = ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES;\n\n  constructor(\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\n    @Optional() commonModule?: MatCommonModule) {\n    super();\n    if (commonModule) {\n      commonModule._checkHammerIsAvailable();\n    }\n  }\n\n  /**\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://material.io/design/#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * @param element Element to which to assign the new HammerJS gestures.\n   * @returns Newly-created HammerJS instance.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\n\n    if (!hammer) {\n      // If HammerJS is not loaded here, return the noop HammerInstance. This is necessary to\n      // ensure that omitting HammerJS completely will not cause any errors while *also* supporting\n      // the lazy-loading of HammerJS via the HAMMER_LOADER token introduced in Angular 6.1.\n      // Because we can't depend on HAMMER_LOADER's existance until 7.0, we have to always set\n      // `this.events` to the set we support, instead of conditionally setting it to `[]` if\n      // `HAMMER_LOADER` is present (and then throwing an Error here if `window.Hammer` is\n      // undefined).\n      // @breaking-change 7.0.0\n      return noopHammerInstance;\n    }\n\n    const mc = new hammer(element, this._hammerOptions || undefined);\n\n    // Default Hammer Recognizers.\n    const pan = new hammer.Pan();\n    const swipe = new hammer.Swipe();\n    const press = new hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return mc as HammerInstance;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  NgModule,\n  Directive,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport class MatLineSetter {\n  constructor(private _lines: QueryList<MatLine>, private _element: ElementRef) {\n    this._setLineClass(this._lines.length);\n\n    this._lines.changes.subscribe(() => {\n      this._setLineClass(this._lines.length);\n    });\n  }\n\n  private _setLineClass(count: number): void {\n    this._resetClasses();\n    if (count === 2 || count === 3) {\n      this._setClass(`mat-${count}-line`, true);\n    } else if (count > 3) {\n      this._setClass(`mat-multi-line`, true);\n    }\n  }\n\n  private _resetClasses(): void {\n    this._setClass('mat-2-line', false);\n    this._setClass('mat-3-line', false);\n    this._setClass('mat-multi-line', false);\n  }\n\n  private _setClass(className: string, isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add(className);\n    } else {\n      this._element.nativeElement.classList.remove(className);\n    }\n  }\n\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\n\n/** Possible states for a ripple element. */\nexport enum RippleState {\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n\n  /** Current state of the ripple. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: RippleRenderer,\n    /** Reference to the ripple HTML element. */\n    public element: HTMLElement,\n    /** Ripple configuration used for the ripple. */\n    public config: RippleConfig) {\n  }\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {RippleRef} from './ripple-ref';\nimport {RippleAnimationConfig, RippleConfig, RippleRenderer, RippleTarget} from './ripple-renderer';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * Configuration for the animation duration of the ripples. There are two phases with different\n   * durations for the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  animation?: RippleAnimationConfig;\n\n  /**\n   * If set, the default duration of the fade-in animation is divided by this value. For example,\n   * setting it to 0.5 will cause the ripple fade-in animation to take twice as long.\n   * A changed speedFactor will not affect the fade-out duration of the ripples.\n   * @deprecated Use the `animation` global option instead.\n   * @breaking-change 7.0.0\n   */\n  baseSpeedFactor?: number;\n\n  /**\n   * Whether ripples should start fading out immediately after the mouse our touch is released. By\n   * default, ripples will wait for the enter animation to complete and for mouse or touch release.\n   */\n  terminateOnPointerUp?: boolean;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * If set, the normal duration of ripple animations is divided by this value. For example,\n   * setting it to 0.5 will cause the animations to take twice as long.\n   * A changed speedFactor will not modify the fade-out duration of the ripples.\n   * @deprecated Use the [matRippleAnimation] binding instead.\n   * @breaking-change 7.0.0\n   */\n  @Input('matRippleSpeedFactor') speedFactor: number = 1;\n\n  /**\n   * Configuration for the ripple animation. Allows modifying the enter and exit animation\n   * duration of the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  @Input('matRippleAnimation') animation: RippleAnimationConfig;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() { return this._trigger || this._elementRef.nativeElement; }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** Whether ripple directive is initialized and the input bindings are set. */\n  private _isInitialized: boolean = false;\n\n  constructor(private _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n\n    if (animationMode === 'NoopAnimations') {\n      this._globalOptions.animation = {enterDuration: 0, exitDuration: 0};\n    }\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /**\n   * Ripple configuration from the directive's input values.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      radius: this.radius,\n      color: this.color,\n      animation: {...this._globalOptions.animation, ...this.animation},\n      terminateOnPointerUp: this._globalOptions.terminateOnPointerUp,\n      speedFactor: this.speedFactor * (this._globalOptions.baseSpeedFactor || 1),\n    };\n  }\n\n  /**\n   * Whether ripples on pointer-down are disabled or not.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n\n  /**\n   * Launches a manual ripple using the specified ripple configuration.\n   * @param config Configuration for the manual ripple.\n   */\n  launch(config: RippleConfig): RippleRef;\n\n  /**\n   * Launches a manual ripple at the specified coordinates within the element.\n   * @param x Coordinate within the element, along the X axis at which to fade-in the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to fade-in the ripple.\n   * @param config Optional ripple configuration for the manual ripple.\n   */\n  launch(x: number, y: number, config?: RippleConfig): RippleRef;\n\n  /** Launches a manual ripple at the specified coordinated or just by the ripple config. */\n  launch(configOrX: number | RippleConfig, y: number = 0, config?: RippleConfig): RippleRef {\n    if (typeof configOrX === 'number') {\n      return this._rippleRenderer.fadeInRipple(configOrX, y, {...this.rippleConfig, ...config});\n    } else {\n      return this._rippleRenderer.fadeInRipple(0, 0, {...this.rippleConfig, ...configOrX});\n    }\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  Input,\n  ChangeDetectionStrategy,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/**\n * Possible states for a pseudo checkbox.\n * @docs-private\n */\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n\n  constructor(@Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n})\nexport class MatPseudoCheckboxModule { }\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\nimport {mixinDisabled, CanDisable} from '../common-behaviors/disabled';\n\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nexport class MatOptgroupBase { }\nexport const _MatOptgroupMixinBase = mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  styleUrls: ['optgroup.css'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n})\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n"],"names":["decorators","type","Inject","args","DOCUMENT","MatToolbar","propDecorators","NgModule","imports","MatCommonModule","exports","MatToolbarRow","declarations","MatToolbarModule","MatTreeNodeOutlet","viewContainer","this","Directive","selector","ViewContainerRef","_CdkTreeNodeDef","CdkTreeNodeDef","_MatTreeNodeMixinBase","mixinTabIndex","mixinDisabled","CdkTreeNode","_MatNestedTreeNodeMixinBase","CdkNestedTreeNode","MatTreeNode","_elementRef","_tree","tabIndex","_this","_super","call","role","Number","tslib_1.__extends","exportAs","inputs","host","[attr.aria-expanded]","[attr.aria-level]","[attr.role]","class","providers","provide","useExisting","ElementRef","CdkTree","undefined","Attribute","Input","MatTreeNodeDef","data","MatNestedTreeNode","_differs","prototype","ngAfterContentInit","ngOnDestroy","IterableDiffers","node","nodeOutlet","ContentChildren","_CdkTreeNodePadding","CdkTreeNodePadding","MatTreeNodePadding","level","indent","_CdkTree","MatTree","Component","template","styles","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","_CdkTreeNodeToggle","CdkTreeNodeToggle","recursive","MatTreeNodeToggle","(click)","MAT_TREE_DIRECTIVES","CdkTreeModule","CommonModule","MatTreeModule","MatTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","_flattenNode","resultNodes","parentMap","flatNode","push","childrenNodes","Array","isArray","_flattenChildren","pipe","take","subscribe","children","forEach","child","index","childParentMap","slice","length","flattenNodes","structuredData","expandFlattenedNodes","nodes","treeControl","results","currentExpand","expand","i","isExpanded","MatTreeFlatDataSource","treeFlattener","initialData","_flattenedData","BehaviorSubject","_expandedData","_data","Object","defineProperty","value","next","dataNodes","connect","collectionViewer","changes","viewChange","expansionModel","merge","apply","map","disconnect","DataSource","MatTreeNestedDataSource","VERSION","Version","SELECT_PANEL_PADDING_X","NgZone","_MAT_INK_BAR_POSITIONER","MatInkBar","_CdkPortal","CdkPortal","MatTabLabel","MatTabContent","TemplateRef","MatTabBase","_MatTabMixinBase","MatTab","_viewContainerRef","textLabel","_contentPortal","_stateChanges","Subject","position","origin","isActive","ngOnChanges","hasOwnProperty","complete","ngOnInit","TemplatePortal","_explicitContent","_implicitContent","ViewChild","ariaLabel","ariaLabelledby","matTabsAnimations","translateTab","trigger","state","style","transform","minHeight","transition","animate","MatTabBodyPortal","componentFactoryResolver","viewContainerRef","_host","_centeringSub","Subscription","EMPTY","_leavingSub","_beforeCentering","startWith","_isCenterPosition","_position","isCentering","hasAttached","attach","_content","_afterLeavingCenter","detach","unsubscribe","ComponentFactoryResolver","MatTabBody","forwardRef","CdkPortalOutlet","_dir","changeDetectorRef","_dirChangeSubscription","_onCentering","EventEmitter","_onCentered","change","dir","_computePositionAnimationState","markForCheck","_positionIndex","_computePositionFromOrigin","_onTranslateTabStarted","e","toState","emit","nativeElement","clientHeight","_onTranslateTabComplete","fromState","_getLayoutDirection","animations","ChangeDetectorRef","Output","_portalHost","PortalHostDirective","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","MatTabLabelWrapper","elementRef","focus","getOffsetLeft","offsetLeft","getOffsetWidth","offsetWidth","[class.mat-tab-disabled]","[attr.aria-disabled]","MatTabHeaderBase","_MatTabHeaderMixinBase","mixinDisableRipple","MatTabHeader","_changeDetectorRef","_viewportRuler","_scrollDistance","_selectedIndexChanged","_destroyed","_showPaginationControls","_disableScrollAfter","_disableScrollBefore","_selectedIndex","selectFocusedIndex","indexFocused","coerceNumberProperty","_keyManager","updateActiveItemIndex","ngAfterContentChecked","_tabLabelCount","_labelWrappers","_updatePagination","_scrollToLabel","_checkScrollingControls","_alignInkBarToSelectedTab","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","event","keyCode","HOME","setFirstItemActive","preventDefault","END","setLastItemActive","ENTER","SPACE","focusIndex","onKeydown","dirChange","observableOf","resize","realign","FocusKeyManager","withHorizontalOrientation","withWrap","updateActiveItem","requestAnimationFrame","takeUntil","newFocusIndex","_setTabFocus","_onContentChanges","_checkPaginationEnabled","_isValidIndex","setActiveItem","tab","toArray","disabled","containerEl","_tabListContainer","scrollLeft","scrollWidth","scrollDistance","translateX","_tabList","v","Math","max","min","_getMaxScrollDistance","_scrollHeader","scrollDir","viewLength","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","beforeVisiblePos","afterVisiblePos","isEnabled","selectedLabelWrapper","selectedIndex","_inkBar","alignToElement","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","ViewportRuler","Directionality","Optional","nextId","MatTabChangeEvent","MatTabGroupBase","_MatTabGroupMixinBase","mixinColor","MatTabGroup","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","_tabLabelSubscription","_dynamicHeight","headerPosition","selectedIndexChange","focusChange","animationDone","selectedTabChange","_groupId","coerceBooleanProperty","_backgroundColor","classList","remove","backgroundColor","add","indexToSelect","_clampTabIndex","isFirstRun_1","_createChangeEvent","Promise","resolve","then","_tabs","_subscribeToTabLabels","tabs","realignInkBar","_tabHeader","_focusChanged","_getTabLabelId","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","height","offsetHeight","_removeTabBodyWrapperHeight","_handleClick","tabHeader","idx","_getTabIndex","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","dynamicHeight","MatTabNavBase","_MatTabNavMixinBase","MatTabNav","_ngZone","_onDestroy","updateActiveLink","element","_activeLinkChanged","runOutsideAngular","_alignInkBar","activeTab","_tabLinks","find","active","_activeLinkElement","show","hide","MatTabLinkBase","_MatTabLinkMixinBase","_tabNavBar","_focusMonitor","_tabLinkRipple","setupTriggerEvents","parseInt","globalOptions","_ripplesGloballyDisabled","terminateOnPointerUp","speedFactor","baseSpeedFactor","animation","monitor","get","_isActive","enumerable","configurable","stopMonitoring","MatTabLink","[attr.aria-current]","[attr.tabIndex]","[class.mat-tab-label-active]","Platform","MAT_RIPPLE_GLOBAL_OPTIONS","FocusMonitor","PortalModule","MatRippleModule","ObserversModule","A11yModule","MatTabsModule","MatToolbarBase","_MatToolbarMixinBase","_platform","document","_document","ngAfterViewInit","isDevMode","isBrowser","_checkToolbarMixedModes","_toolbarRows","childNodes","filter","contains","nodeType","COMMENT_NODE","some","textContent","trim","throwToolbarMixedModesError","[class.mat-toolbar-multiple-rows]","[class.mat-toolbar-single-row]","allowChildren","query","animateChild","optional","sortButtonLabel","id","Injectable","providedIn","MatSortHeaderIntl","MAT_SORT_HEADER_INTL_PROVIDER","deps","SkipSelf","useFactory","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","MatSortHeaderBase","_MatSortHeaderMixinBase","MatSortHeader","_intl","_sort","_cdkColumnDef","_showIndicatorHint","_arrowDirection","_disableViewStateAnimation","arrowPosition","getSortHeaderNotContainedWithinSortError","_rerenderSubscription","sortChange","_isSorted","_updateArrowDirection","_viewState","_setAnimationTransitionState","_disableClear","name","register","deregister","_setIndicatorHintVisible","visible","_isDisabled","viewState","sort","direction","_getArrowDirectionState","_getArrowViewState","start","_getAriaSortAttribute","(mouseenter)","(longpress)","(mouseleave)","[attr.aria-sort]","[class.mat-sort-header-disabled]","matSortAnimations","indicator","leftPointer","rightPointer","arrowOpacity","MatSort","CdkColumnDef","disableClear","MatSortModule","_CdkStepLabel","CdkStepLabel","MatStepLabel","optionalLabel","MatStepperIntl","MatStepHeader","_element","_intlSubscription","_stringLabel","label","_templateLabel","_getHostElement","_getIconContext","iconOverrides","selected","matStepperAnimations","horizontalStepTransition","visibility","verticalStepTransition","MatStepperIcon","templateRef","_CdkStepper","CdkStepper","MatStep","stepper","_errorStateMatcher","isErrorState","control","form","originalErrorState","customErrorState","invalid","interacted","ErrorStateMatcher","MatStepper","arguments","icons","_icons","override","icon","_iconOverrides","_steps","_stateChanged","MatHorizontalStepper","aria-orientation","MatVerticalStepper","ctorParameters","_CdkStepperNext","CdkStepperNext","_CdkStepperPrevious","CdkStepperPrevious","MatStepperNext","[type]","MatStepperPrevious","MatButtonModule","CdkStepperModule","MatIconModule","MatStepperModule","_CdkTable","CdkTable","stickyCssClass","MatTable","CDK_TABLE_TEMPLATE","_CdkCellDef","CdkCellDef","_CdkHeaderCellDef","CdkHeaderCellDef","_CdkFooterCellDef","CdkFooterCellDef","MatCellDef","MatHeaderCellDef","MatFooterCellDef","MatColumnDef","sticky","stickyEnd","MatHeaderCell","columnDef","cssClassFriendlyName","CdkHeaderCell","MatFooterCell","CdkFooterCell","MatCell","CdkCell","_CdkHeaderRowDef","CdkHeaderRowDef","_CdkFooterRowDef","CdkFooterRowDef","_CdkRowDef","CdkRowDef","MatHeaderRowDef","MatFooterRowDef","MatRowDef","MatHeaderRow","CDK_ROW_TEMPLATE","CdkHeaderRow","CdkFooterRow","MatFooterRow","MatRow","CdkRow","EXPORTED_DECLARATIONS","CdkTableModule","MatTableModule","MAX_SAFE_INTEGER","MatTableDataSource","_renderData","_filter","_renderChangesSubscription","sortingDataAccessor","sortHeaderId","_isNumberValue","numberValue","sortData","a","b","valueA","valueB","comparatorResult","filterPredicate","accumulator","currentTerm","key","dataStr","keys","reduce","toLowerCase","transformedFilter","indexOf","_updateChangeSubscription","_paginator","paginator","initialized","pageChange","page","dataStream","filteredData","combineLatest","_a","_filterData","orderedData","_orderData","paginatedData","_pageData","obj","_updatePaginator","startIndex","pageIndex","pageSize","splice","filteredDataLength","lastPageIndex","ceil","InjectionToken","factory","_MAT_INK_BAR_POSITIONER_FACTORY","_inkBarPositioner","_setStyles","positions","inkBar","left","width","_vertical","MatSlider","displayWith","_roundToDecimal","toFixed","_focusHostElement","blur","_blurHostElement","_clamp","_percent","vertical","invert","percent","_isMinValue","thumbLabel","axis","scale","_invertMouseCoords","_thumbGap","_direction","_tickIntervalPercent","tickSize","backgroundSize","sign","rotate","_invertAxis","detectChanges","_onMouseenter","_sliderDimensions","_getSliderDimensions","_updateTickIntervalPercent","_onClick","oldValue","_isSliding","_updateValueFromPosition","x","clientX","y","clientY","_emitInputEvent","_emitChangeEvent","_onSlide","_onSlideStart","center","_valueOnSlideStart","_onSlideEnd","_onFocus","_onBlur","onTouched","_onKeydown","PAGE_UP","_increment","PAGE_DOWN","LEFT_ARROW","UP_ARROW","RIGHT_ARROW","DOWN_ARROW","_onKeyup","numSteps","step","pos","offset","top","size","posComponent","exactValue","_calculateValue","closestValue","round","_controlValueAccessorChangeFn","valueChange","input","tickInterval","trackSize","pixelsPerStep","stepsPerTick","pixelsPerTick","MatSliderChange","source","_calculatePercentage","percentage","_sliderWrapper","getBoundingClientRect","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","MAT_SLIDER_VALUE_ACCESSOR","(focus)","(blur)","(keydown)","(keyup)","(slide)","(slideend)","(slidestart)","[tabIndex]","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[attr.aria-orientation]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[class.mat-slider-axis-inverted]","[class.mat-slider-sliding]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","[class._mat-animation-noopable]","ANIMATION_MODULE_TYPE","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MatSliderModule","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","dismiss","_onExit","_finishDismiss","closed","exit","clearTimeout","_durationTimeoutId","dismissWithAction","closeWithAction","_dismissAfter","duration","setTimeout","_open","dispose","dismissedByAction","afterDismissed","asObservable","afterOpened","_onEnter","MAT_SNACK_BAR_DATA","MatSnackBarConfig","politeness","announcementMessage","horizontalPosition","verticalPosition","matSnackBarAnimations","contentFade","opacity","AnimationDurations","COMPLEX","AnimationCurves","STANDARD_CURVE","snackBarState","EXITING","ACCELERATION_CURVE","ENTERING","DECELERATION_CURVE","SimpleSnackBar","snackBarRef","action","[@contentFade]","MatSnackBarContainer","snackBarConfig","_animationState","attachComponentPortal","portal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","attachTemplatePortal","onAnimationEnd","startsWith","_completeExit","onEnter_1","run","enter","onMicrotaskEmpty","panelClasses","panelClass","cssClass","Error","[@state]","(@state.done)","OverlayModule","entryComponents","MatSnackBarModule","MAT_SNACK_BAR_DEFAULT_OPTIONS","MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","openFromComponent","component","config","_attach","openFromTemplate","open","message","_config","tslib_1.__assign","_attachSnackBarContainer","overlayRef","userInjector","injector","PortalInjector","WeakMap","containerPortal","ComponentPortal","containerRef","instance","content","userConfig","_createOverlay","container","$implicit","_createInjector","contentRef","observe","Breakpoints","Handset","detachments","matches","overlayElement","_animateSnackBar","announce","overlayConfig","OverlayConfig","positionStrategy","global","isRtl","isLeft","isRight","right","centerHorizontally","bottom","create","Overlay","LiveAnnouncer","Injector","BreakpointObserver","MatSortBase","_MatSortMixinBase","mixinInitialized","sortables","Map","getSortInvalidDirectionError","sortable","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","set","delete","getNextSortDirection","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","_markInitialized","SORT_ANIMATION_TRANSITION","keyframes","openedChange","opened","_doc","_elementFocusedBeforeDrawerWasOpened","_isFocusTrapEnabled","_focusTrap","_trapFocus","_restoreFocus","close","stopPropagation","MatDrawer","onPositionChanged","_modeChanged","mode","focusInitialElementWhenReady","hasMovedFocus","activeEl","activeElement","HTMLElement","focusVia","_openedVia","enabled","destroy","isOpen","openedVia","_opened","_enableAnimations","matDrawerAnimations","transformDrawer","[@transform]","(@transform.start)","(@transform.done)","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","_openedStream","openedStart","_closedStream","closedStart","_animationMode","backdropClick","_doCheckSubject","_autosize","defaultAutosize","MatDrawerContainer","_drawers","drawer","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","_isDrawerOpen","_start","_end","_updateContentMargins","debounceTime","ngDoCheck","_setContainerClass","throwMatDuplicatedDrawerError","_right","_left","_closeModalDrawer","disableClose","_canHaveBackdrop","_isShowingBackdrop","_width","_contentMarginChanges","_contentMargins","[class.mat-drawer-container-explicit-backdrop]","ContentChild","MatDrawerContent","_userContent","autosize","MatSidenavContent","scrollDispatcher","ngZone","[style.margin-left.px]","[style.margin-right.px]","ScrollDispatcher","MatSidenav","_fixedBottomGap","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","fixedInViewport","MatSidenavContainer","MatSidenavModule","ScrollingModule","PlatformModule","MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS","disableToggleValue","disableDragValue","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlideToggle","multi","MatSlideToggleChange","checked","MatSlideToggleBase","_MatSlideToggleMixinBase","defaults","onChange","_","_uniqueId","_required","_checked","_dragging","labelPosition","toggleChange","dragChange","focusOrigin","_onChangeEvent","_inputElement","_onInputClick","toggle","_getDragPercentage","distance","_thumbBarWidth","_previousChecked","_onDragStart","thumbEl","_thumbEl","_thumbBarEl","clientWidth","_onDrag","_dragPercentage","deltaX","dragX","_onDragEnd","newCheckedValue","_onLabelTextChange","[id]","[class.mat-checked]","[class.mat-disabled]","[class.mat-slide-toggle-label-before]","required","MatSlideToggleModule","MatSliderBase","_MatSliderMixinBase","_invert","_max","_min","_step","_thumbLabel","_tickInterval","_value","toString","split","pop","parseFloat","Location","MatProgressBar","MatProgressBarModule","BASE_SIZE","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY","INDETERMINATE_ANIMATION_TEMPLATE","MatProgressSpinner","platform","animationMode","_fallbackAnimation","_noopAnimations","_forceAnimations","_diameter","EDGE","TRIDENT","diameter","strokeWidth","animationClass","diameters","_attachStyleNode","_strokeWidth","newValue","viewBox","_circleRadius","PI","_strokeCircumference","styleTag","createElement","head","appendChild","sheet","insertRule","_getAnimationText","replace","Set","[style.width.px]","[style.height.px]","[attr.mode]","MatSpinner","MatProgressSpinnerModule","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MatRadioGroup","MatRadioChange","MatRadioGroupBase","_MatRadioGroupMixinBase","_changeDetector","_name","_selected","_isInitialized","_labelPosition","_disabled","_updateRadioButtonNames","_markRadiosForCheck","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_touch","_radios","radio","isAlreadySelected","_markForCheck","MatRadioButton","descendants","MatRadioButtonBase","_MatRadioButtonMixinBase","radioGroup","_radioDispatcher","_removeUniqueSelectionListener","listen","newCheckedState","notify","newDisabledState","_onInputFocusChange","_isRippleDisabled","disableRipple","_onInputChange","groupValueChanged","_focusRipple","fadeOut","_ripple","launch","persistent","[class.mat-radio-checked]","[class.mat-radio-disabled]","[attr.id]","UniqueSelectionDispatcher","ariaDescribedby","MatRipple","MatRadioModule","box-shadow","MAT_DRAWER_DEFAULT_AUTOSIZE","MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY","_container","_focusTrapFactory","_mode","_disableClose","_autoFocus","_offsetY","_calculateOverlayOffsetY","selectedOptionOffset","scrollBuffer","maxScroll","_checkOverlayWithinViewport","MatSelect","_calculateOverlayScroll","itemHeight","_getItemHeight","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","_getAriaLabel","placeholder","_getAriaLabelledby","_parentFormField","_labelId","_getAriaActiveDescendant","panelOpen","activeItem","_calculateOverlayOffsetX","offsetX","overlayRect","overlayDir","viewportSize","getViewportSize","_isRtl","paddingWidth","multiple","SELECT_MULTIPLE_PANEL_PADDING_X","_selectionModel","options","first","group","leftOverflow","rightOverflow","updatePosition","optionOffsetFromPanelTop","optionHeightAdjustment","_triggerRect","maxOptionsDisplayed","floor","_disableOptionCentering","_scrollTop","firstDisplayedIndex","_getItemCount","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_transformOrigin","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","optionGroups","_triggerFontSize","setDescribedByIds","ids","_ariaDescribedby","join","onContainerClick","_panelOpen","empty","[attr.tabindex]","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","matSelectAnimations","transformPanel","fadeInContent","MatFormFieldControl","MAT_OPTION_PARENT_COMPONENT","NgForm","FormGroupDirective","MatFormField","NgControl","Self","MAT_SELECT_SCROLL_STRATEGY","CdkConnectedOverlay","MatOption","MatOptgroup","customTrigger","MatSelectTrigger","disableOptionCentering","compareWith","errorStateMatcher","sortComparator","selectionChange","MatOptionModule","MatFormFieldModule","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","MatSelectModule","matTooltipAnimations","tooltipState","SCROLL_THROTTLE_MS","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY","MAT_TOOLTIP_DEFAULT_OPTIONS","MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY","MatTooltip","_scrollDispatcher","_ariaDescriber","_scrollStrategy","_defaultOptions","showDelay","hideDelay","_message","_manualListeners","IOS","nodeName","webkitUserSelect","userSelect","listener","addEventListener","draggable","_updatePosition","_tooltipInstance","removeDescription","_isTooltipVisible","_updateTooltipMessage","describe","_tooltipClass","_setTooltipClass","removeEventListener","clear","delay","_detach","_portal","TooltipComponent","afterHidden","isVisible","ESCAPE","_handleTouchend","touchendHideDelay","strategy","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","scrollableAncestors","getAncestorScrollContainers","withScrollableContainers","positionChanges","scrollableViewProperties","isOverlayClipped","scrollStrategy","getConfig","_getOrigin","overlay","_getOverlayPosition","withPositions","main","fallback","originPosition","isLtr","originX","originY","getMatTooltipInvalidPositionError","_invertPosition","overlayPosition","overlayX","overlayY","tooltipClass","(touchend)","AriaDescriber","_visibility","_closeOnInteraction","_onHide","_isHandset","_hideTimeoutId","_showTimeoutId","_animationStart","_animationDone","_handleBodyInteraction","aria-hidden","MatTooltipModule","itemsPerPageLabel","nextPageLabel","previousPageLabel","firstPageLabel","lastPageLabel","getRangeLabel","MatPaginatorIntl","MAT_PAGINATOR_INTL_PROVIDER","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","PageEvent","MatPaginatorBase","_MatPaginatorBase","MatPaginator","_pageIndex","_length","_pageSizeOptions","_hidePageSize","_showFirstLastButtons","_intlChanges","_pageSize","_updateDisplayedPageSizeOptions","p","_initialized","nextPage","hasNextPage","previousPageIndex","_emitPageEvent","previousPage","hasPreviousPage","firstPage","lastPage","getNumberOfPages","numberOfPages","_changePageSize","pageSizeOptions","_displayedPageSizeOptions","hidePageSize","showFirstLastButtons","MatPaginatorModule","MatProgressBarBase","_MatProgressBarMixinBase","progressbarId","location","_bufferValue","_rectangleFillValue","path","clamp","_primaryTransform","_bufferTransform","bufferValue","aria-valuemin","aria-valuemax","_outlet","DomPortalOutlet","_componentFactoryResolver","_appRef","_template","insertBefore","outletElement","context","_attached","MatMenuContent","isAttached","ApplicationRef","matMenuAnimations","transformMenu","sequence","fadeInItems","MAT_MENU_PANEL","MatMenuItemBase","_MatMenuItemMixinBase","MatMenuItem","_parentMenu","_hovered","_highlighted","_triggersSubmenu","addItem","removeItem","_checkDisabled","_handleMouseEnter","getLabel","textNodeType","TEXT_NODE","output","length_1","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","MAT_MENU_DEFAULT_OPTIONS","MAT_MENU_DEFAULT_OPTIONS_FACTORY","MatMenu","_xPosition","xPosition","_yPosition","yPosition","_items","_itemChanges","_tabSubscription","_classList","_panelAnimationState","backdropClass","_overlapTrigger","overlapTrigger","_hasBackdrop","hasBackdrop","throwMatMenuInvalidPositionX","setPositionClasses","throwMatMenuInvalidPositionY","classes","className","withTypeAhead","tabOut","switchMap","items","item","parentMenu","setFocusOrigin","focusFirstItem","lazyContent","onStable","resetActiveItem","setElevation","depth","newElevation","customElevation","c","_previousElevation","posX","posY","_startAnimation","_resetAnimation","_onAnimationDone","_isAnimating","activeItemIndex","scrollTop","MAT_MENU_SCROLL_STRATEGY","MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_MENU_SCROLL_STRATEGY_FACTORY","MatMenuTrigger","_menuItemInstance","_menuOpen","_closeSubscription","_hoverSubscription","_openedByMouse","menuOpened","onMenuOpen","menuClosed","onMenuClose","triggersSubmenu","menu","_checkMenu","reason","_destroyMenu","_handleHover","_cleanUpSubscriptions","toggleMenu","closeMenu","openMenu","_setPosition","menuData","_menuClosingActions","_initMenu","menuOpen","_resetMenu","_setMenuElevation","_setIsMenuOpen","throwMatMenuMissingError","_getOverlayConfig","_subscribeToPositions","connectionPair","originFallbackX","_b","overlayFallbackY","_c","originFallbackY","_d","overlayFallbackX","offsetY","backdrop","parentClose","hover","_handleMousedown","isFakeMousedownFromScreenReader","asapScheduler","aria-haspopup","(mousedown)","_deprecatedMatMenuTriggerFor","MatMenuModule","minWidth","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinErrorState","_scrollStrategyFactory","_multiple","_compareWith","o1","o2","_uid","_destroy","_onChange","_onTouched","_optionIds","_panelDoneAnimating","_panelDoneAnimatingStream","_positions","_focused","controlType","optionSelectionChanges","defer","option","onSelectionChange","o","valueAccessor","_placeholder","stateChanges","getMatSelectDynamicMultipleError","getMatSelectNonFunctionValueError","_initializeSelection","_id","SelectionModel","distinctUntilChanged","_initKeyManager","added","select","removed","deselect","_resetOptions","updateErrorState","getComputedStyle","_calculateOverlayPosition","_highlightCorrectOption","fontSize","_setSelectionByValue","selectedOptions","viewValue","reverse","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","altKey","manager","A","ctrlKey","hasDeselectedOptions_1","previouslyFocusedIndex","shiftKey","_selectViaInteraction","_onFadeInDone","_onAttached","positionChange","panel","_getPanelTheme","color","isEmpty","getMatSelectNonArrayValueError","currentValue","_selectValue","_sortValues","correspondingOption","error","console","warn","ActiveDescendantKeyManager","withVerticalOrientation","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","isUserInput","_setOptionIds","wasSelected","isSelected","_propagateChanges","options_1","fallbackValue","valueToEmit","activeOptionIndex","labelCount","_countGroupLabelsBeforeOption","_getOptionScrollPosition","_getOptionIndex","result","current","panelHeight","scrollContainerHeight","MAT_SELECTION_LIST_VALUE_ACCESSOR","MatSelectionList","MatListOption","_MatSelectionListMixinBase","MatLineModule","MatPseudoCheckboxModule","MatList","MatNavList","MatListItem","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatListSubheaderCssMatStyler","MatDividerModule","MatListModule","_handleBlur","[class.mat-list-item-avatar]","[class.mat-list-item-with-avatar]","_icon","MatSelectionListBase","MatListOptionBase","_MatListOptionMixinBase","MatSelectionListChange","selectionList","_hasFocus","checkboxPosition","_setSelected","_reportValueChange","MatLineSetter","_lines","_removeOptionFromList","_text","_handleFocus","_setFocusedOption","tabindex","[class.mat-list-item-disabled]","[class.mat-list-item-focus]","[attr.aria-selected]","skipPredicate","_tempValues","_setOptionsFromValues","_modelChanges","_i","optionIndex","setNextItemActive","previousFocusIndex","_toggleFocusedOption","selectAll","deselectAll","_getSelectedOptionValues","values","Boolean","focusedOption","focusedIndex","hasChanged","_MatListMixinBase","_navList","_isNavList","MatGridTile","MatGridTileText","MatGridAvatarCssMatStyler","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","TileCoordinator","numColumns","tiles","columnIndex","rowIndex","tracker","fill","tile","_trackTile","lastRowMax","rowCount","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","rowspan","row","col","TileStyler","_rows","_rowspan","init","gutterSize","cols","_gutterSize","normalizeUnits","_cols","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","_setStyle","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","reset","list","_setListStyle","_tiles","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","FitTileStyler","gutterHeightPerTile","MatGridList","_gutter","coerceToNumber","coerceToString","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","rowHeight","_tileStyler","MatGridListModule","SvgIconConfig","svgElement","url","MatIconRegistry","_httpClient","_sanitizer","_svgIconConfigs","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","iconName","addSvgIconInNamespace","addSvgIconLiteral","literal","addSvgIconLiteralInNamespace","namespace","_addSvgIconConfig","sanitizedLiteral","sanitize","SecurityContext","HTML","getMatIconFailedToSanitizeLiteralError","_createSvgElementForSingleIcon","addSvgIconSet","addSvgIconSetInNamespace","addSvgIconSetLiteral","addSvgIconSetLiteralInNamespace","_addSvgIconSetConfig","_svgElementFromString","registerFontClassAlias","alias","classNameForFontAlias","setDefaultFontSetClass","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","RESOURCE_URL","getMatIconFailedToSanitizeUrlError","cachedIcon","cloneSvg","_loadSvgIconFromConfig","tap","svg","getNamedSvgIcon","iconKey","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","observableThrow","getMatIconNameNotFoundError","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","catchError","err","forkJoin","foundIcon","_extractSvgIconFromSet","_fetchUrl","svgText","responseText","_setSvgAttributes","iconSet","iconSource","querySelector","iconElement","cloneNode","removeAttribute","_toSvgElement","str","div","innerHTML","ELEMENT_NODE","setAttribute","getMatIconNoHttpProviderError","inProgressFetch","req","responseType","finalize","share","configNamespace","HttpClient","DomSanitizer","ICON_REGISTRY_PROVIDER","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","_MatIconMixinBase","MatIcon","_iconRegistry","ariaHidden","_inline","inline","_fontSet","_cleanupFontValue","_fontIcon","_splitIconName","parts","svgIcon","_setSvgElement","log","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","styleTags","querySelectorAll","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","_previousFontSetClass","fontIcon","_previousFontIconClass","[class.mat-icon-inline]","MatListBase","MatListItemBase","_MatListItemMixinBase","MatMultiYearView","MatCalendar","matDatepickerAnimations","fadeInCalendar","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY","MatDatepickerContentBase","_MatDatepickerContentMixinBase","MatDatepickerContent","_calendar","focusActiveCell","[@transformPanel]","[class.mat-datepicker-content-touch]","_dateAdapter","createMissingDateImplError","MatDatepicker","_disabledChange","_inputSubscription","_popupRef","_popupComponentRef","date","sameDate","_selectedChanged","_datepickerInput","_valueChange","_focusedElementBeforeOpen","touchUi","_openAsDialog","_openAsPopup","openedStream","_dialogRef","_calendarPortal","completeClose","closedStream","afterClosed","componentInstance","datepicker","_setColor","_createPopup","keydownEvents","withPush","MatDialog","DateAdapter","calendarHeaderComponent","startAt","yearSelected","monthSelected","MAT_DATEPICKER_VALUE_ACCESSOR","MatDatepickerInput","MAT_DATEPICKER_VALIDATORS","NG_VALIDATORS","MatDatepickerInputEvent","target","targetElement","_dateFormats","_formField","dateChange","dateInput","_cvaOnChange","_validatorOnChange","_datepickerSubscription","_localeSubscription","_parseValidator","_lastValueValid","matDatepickerParse","text","_minValidator","controlValue","_getValidDateOrNull","deserialize","compareDate","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_filterValidator","_dateFilter","matDatepickerFilter","_validator","Validators","compose","localeChanges","_datepicker","_registerInput","isValid","oldDate","_formatValue","registerOnValidatorChange","validate","getPopupConnectionElementRef","getConnectedOverlayOrigin","_onInput","parse","_getThemePalette","format","display","isDateInstance","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","MAT_DATE_FORMATS","matDatepicker","MatDatepickerToggleIcon","MatDatepickerToggle","_watchStateChanges","datepickerDisabled","inputDisabled","datepickerToggled","[class.mat-datepicker-toggle-active]","[class.mat-accent]","[class.mat-warn]","_customIcon","MatDialogModule","MatCalendarBody","MatMonthView","MatYearView","MatCalendarHeader","MatDatepickerIntl","MatDatepickerModule","_inset","MatDivider","[class.mat-divider-vertical]","[class.mat-divider-horizontal]","[class.mat-divider-inset]","_hideToggle","displayMode","MatAccordion","hideToggle","CdkAccordion","matExpansionAnimations","indicatorRotate","expansionHeaderHeight","params","collapsedHeight","expandedHeight","bodyExpansion","MatExpansionPanelContent","_CdkAccordionItem","CdkAccordionItem","uniqueId","MatExpansionPanel","accordion","_uniqueSelectionDispatcher","afterExpand","afterCollapse","_inputChanges","_headerId","_hasSpacing","expanded","_getExpandedState","_lazyContent","_bodyAnimation","phaseName","outputs","[class.mat-expanded]","[class.mat-expansion-panel-spacing]","MatExpansionPanelActionRow","MatExpansionPanelHeader","_parentChangeSubscription","accordionHideToggleChange","_toggle","_isExpanded","_getPanelId","_showToggle","_keydown","[attr.aria-controls]","[@expansionHeight]","MatExpansionPanelDescription","MatExpansionPanelTitle","CdkAccordionModule","MatExpansionModule","_colspan","property","attr.aria-readonly","todayValue","selectedValue","labelMinRequiredCells","numCols","allowDisabledSelection","activeCell","cellAspectRatio","selectedValueChange","selectedChange","_userSelection","activeDateChange","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","_weekdays","concat","_activeDate","today","oldActiveDate","validDate","clampDate","minDate","maxDate","_hasSameMonthAndYear","_init","_selectedDate","_getDateInCurrentMonth","_minDate","_maxDate","_dateSelected","selectedYear","getYear","activeDate","selectedMonth","getMonth","selectedDate","createDate","_handleCalendarBodyKeydown","addCalendarDays","getDate","getNumDaysInMonth","addCalendarYears","addCalendarMonths","dateFilter","_focusActiveCell","_todayDate","_monthLabel","getMonthNames","toLocaleUpperCase","firstOfMonth","_firstWeekOffset","getDayOfWeek","_createWeekCells","_matCalendarBody","daysInMonth","dateNames","getDateNames","_weeks","cell","_shouldEnableDate","dateA11yLabel","MatCalendarCell","d1","d2","_selectedYear","_todayYear","activeYear","activeOffset","_years","year","_createCellForYear","_yearSelected","month","yearsPerPage","_getActiveCell","yearName","getYearName","_shouldEnableYear","firstOfYear","_selectedMonth","_getMonthInCurrentYear","_monthSelected","normalizedDate","_todayMonth","_yearLabel","monthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","_shouldEnableMonth","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","maxYear","maxMonth","minYear","minMonth","calendar","currentView","monthYearLabel","switchToMultiYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","multi-year","prevMultiYearLabel","nextMonthLabel","nextYearLabel","nextMultiYearLabel","currentPeriodClicked","previousClicked","nextClicked","previousEnabled","_isSameView","nextEnabled","date1","date2","_moveFocusOnNextTick","_currentView","startView","firstChange","view","_getCurrentViewComponent","yearView","multiYearView","headerComponent","monthView","chips","chip","MatChipList","MatChipListChange","_blur","_chipInput","focused","_markAsTouched","_resetChips","_dropSubscriptions","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","chipSelectionChanges","chipFocusChanges","chipIndex","chipBlurChanges","_chipRemoveSubscription","chipRemoveChanges","_updateKeyManager","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","[class.mat-chip-list-required]","ariaOrientation","selectable","MatChip","MatChipInput","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","registerInput","_emitChipEnd","addOnBlur","_focus","_isSeparatorKey","separators","[attr.placeholder]","MAT_CHIPS_DEFAULT_OPTIONS","chipList","CHIP_DECLARATIONS","MatChipRemove","MatChipAvatar","MatChipTrailingIcon","ɵ0","useValue","MatChipsModule","MatDialogConfig","maxWidth","ariaDescribedBy","autoFocus","restoreFocus","closeOnNavigation","matDialogAnimations","slideDialog","MatDialogContainer","_elementFocusedBeforeDialogWasOpened","_state","_animationStateChanged","_ariaLabelledBy","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","toFocus","_onAnimationStart","_startExitAnimation","aria-modal","[@slideDialog]","(@slideDialog.start)","(@slideDialog.done)","MatDialogRef","_containerInstance","_afterClosed","_beforeClosed","_locationChanges","_result","dialogResult","detachBackdrop","beforeClosed","_getPositionStrategy","centerVertically","updateSize","afterOpen","beforeClose","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","_location","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenedAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","componentOrTemplateRef","_applyConfigDefaults","getDialogById","dialogContainer","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","dialog","dialogConfig","maxHeight","injectionTokens","previousValue","overlayContainer","getContainerElement","parentElement","siblings","sibling","hasAttribute","getAttribute","OverlayContainer","dialogElementUid","MatDialogClose","_dialog","getClosestDialog","proxiedChange","_matDialogClose","MatDialogTitle","MatDialogContent","MatDialogActions","_CdkTextareaAutosize","CdkTextareaAutosize","MatTextareaAutosize","minRows","maxRows","rows","matAutosizeMinRows","matAutosizeMaxRows","matAutosize","matTextareaAutosize","MAT_INPUT_INVALID_TYPES","MatInputBase","_MatInputMixinBase","MatInput","inputValueAccessor","_autofillMonitor","_isServer","autofilled","_type","_readonly","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","el","selectionStart","selectionEnd","setSelectionRange","_validateType","_isTextarea","isAutofilled","_dirtyCheckNativeValue","isFocused","readonly","getMatInputUnsupportedTypeError","_isNeverEmpty","_isBadInput","validity","badInput","[class.mat-input-server]","[required]","[readonly]","AutofillMonitor","TextFieldModule","MatInputModule","calendarLabel","openCalendarLabel","displayValue","_cellClicked","_isActiveCell","cellNumber","_firstRowOffset","MatCard","MatCardHeader","MatCardTitleGroup","MatCardContent","MatCardTitle","MatCardSubtitle","MatCardActions","MatCardFooter","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardImage","MatCardXlImage","MatCardAvatar","MatCardModule","MAT_CHECKBOX_CLICK_ACTION","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MatCheckbox","MatCheckboxChange","MatCheckboxBase","_MatCheckboxMixinBase","_clickAction","indeterminateChange","_currentAnimationClass","_currentCheckState","TransitionCheckState","Init","_indeterminate","changed","_transitionCheckState","Indeterminate","Checked","Unchecked","_getAriaChecked","indeterminate","newState","oldState","_getAnimationClassForCheckStateTransition","animationClass_1","ripple","_onInteractionEvent","animSuffix","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","MatCheckboxModule","MatChipSelectionChange","MatChipBase","_MatChipMixinBase","CHIP_ATTRIBUTE_NAMES","rippleConfig","chipListSelectable","_selectable","_removable","destroyed","_addHostClassName","_chipRipple","RippleRenderer","CHIP_ATTRIBUTE_NAMES_1","attr","tagName","_removeTriggerEvents","selectViaInteraction","toggleSelected","removable","DELETE","BACKSPACE","[class.mat-chip-selected]","[class.mat-chip-with-avatar]","[class.mat-chip-with-trailing-icon]","[class.mat-chip-disabled]","avatar","trailingIcon","removeIcon","_parentChip","MatChipListBase","_MatChipListMixinBase","_lastDestroyedIndex","_chipSet","_tabOutSubscription","_tabIndex","_userTabIndex","_changeSubscription","_updateTabIndex","_updateFocusForDestroyedChips","inputElement","_focusInput","_isInputEmpty","chipsArray","focusChip","_clearSelection","correspondingChip","skip","MatButton","stopImmediatePropagation","MatAnchor","MatButtonToggleGroupBase","_MatButtonToggleGroupMixinBase","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","MatButtonToggleGroupMultiple","_uniqueIdCounter","MatButtonToggleChange","_buttonToggles","_syncButtonToggle","_isSelected","_isPrechecked","_rawValue","[class.mat-button-toggle-vertical]","MatButtonToggle","MatButtonToggleBase","_MatButtonToggleMixinBase","toggleGroup","defaultTabIndex","_isSingleSelector","parsedTabIndex","buttonToggleGroup","_buttonElement","_onButtonClick","newChecked","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","MatButtonToggleModule","align","[class.mat-card-actions-align-end]","MatAutocomplete","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","autoActiveFirstOption","panelWidth","optionSelected","MatAutocompleteOrigin","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","_zone","_componentDestroyed","_autocompleteDisabled","_manuallyFloatingLabel","_viewportSubscription","_closeKeyEventStream","autocompleteAttribute","_overlayAttached","optionSelections","autocomplete","_destroyPanel","showPanel","openPanel","_attachOverlay","_floatLabel","closePanel","_resetLabel","_isOpen","_closingActionsSubscription","_outsideClickStream","MatOptionSelectionChange","fromEvent","clickTarget","formField","_setTriggerValue","_resetActiveItem","activeOption","prevActiveItem","TAB","_canOpen","_scrollToOption","_handleInput","_previousValue","shouldAnimate","floatLabel","_animateAndLockLabel","newScrollPosition","_getScrollTop","_setScrollTop","_subscribeToClosingActions","firstStable","optionChanges","_positionStrategy","reapplyLastPosition","_setVisibility","panelClosingActions","_setValueAndClose","toDisplay","inputValue","_control","_clearPreviousSelectedOption","_emitSelectEvent","getMatAutocompleteMissingPanelError","_getPanelWidth","wasOpen","_getConnectedElement","connectedTo","_getHostWidth","readOnly","[attr.autocomplete]","[attr.aria-autocomplete]","(focusin)","Host","autocompleteDisabled","MatAutocompleteModule","MatBadge","_hasContent","_color","_overlap","val","_updateTextContent","_description","newDescription","_updateHostAriaDescription","_hidden","isAbove","isAfter","description","_badgeElement","_createBadgeElement","badgeElement","oldDescription","colorPalette","[class.mat-badge-overlap]","[class.mat-badge-above]","[class.mat-badge-below]","[class.mat-badge-before]","[class.mat-badge-after]","[class.mat-badge-small]","[class.mat-badge-medium]","[class.mat-badge-large]","[class.mat-badge-hidden]","overlap","hidden","MatBadgeModule","MAT_BOTTOM_SHEET_DATA","MatBottomSheetConfig","matBottomSheetAnimations","bottomSheetState","MatBottomSheetContainer","breakpointObserver","bottomSheetConfig","_elementFocusedBeforeOpened","_breakpointSubscription","Medium","Large","XLarge","_toggleClass","isMatched","_validatePortalAttached","_setPanelClass","(@state.start)","FocusTrapFactory","MatBottomSheetModule","MatBottomSheetRef","MatBottomSheet","_parentBottomSheet","_bottomSheetRefAtThisLevel","_openedBottomSheetRef","_attachContainer","ref","bottomSheetRef","scrollStrategies","block","DEFAULT_ROUND_BUTTON_COLOR","BUTTON_HOST_ATTRIBUTES","MatButtonBase","_MatButtonMixinBase","isRoundButton","_hasHostAttributes","isIconButton","BUTTON_HOST_ATTRIBUTES_1","attributes","attribute","_parent","_active","_emitSelectionChangeEvent","setActiveStyles","setInactiveStyles","ngAfterViewChecked","_mostRecentViewValue","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]","MAT_LABEL_GLOBAL_OPTIONS","MatError","matFormFieldAnimations","transitionMessages","[class.mat-right]","MatHint","MatLabel","MatPlaceholder","MatPrefix","MatSuffix","MatFormFieldBase","_MatFormFieldMixinBase","MAT_FORM_FIELD_DEFAULT_OPTIONS","labelOptions","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_labelOptions","float","_animationsEnabled","_appearance","appearance","updateOutlineGap","_hideRequiredMarker","_processHints","_connectionContainerRef","_validateControlChild","_validatePlaceholders","_syncDescribedByIds","valueChanges","_prefixChildren","_suffixChildren","_hintChildren","_errorChildren","_shouldForward","prop","_hasPlaceholder","_placeholderChild","_hasLabel","_labelChild","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_hasFloatingLabel","_getDisplayedMessages","errorState","_label","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","hintLabel","getMatFormFieldDuplicatedHintError","startHint","endHint","getMatFormFieldMissingControlError","startWidth","gapWidth","startEls","gapEls","documentElement","containerStart","_getStartEnd","labelStart","labelWidth","outlineGapPadding","rect","[class.mat-form-field-appearance-standard]","[class.mat-form-field-appearance-fill]","[class.mat-form-field-appearance-outline]","[class.mat-form-field-appearance-legacy]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-form-field-autofilled]","[class.mat-focused]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","hideRequiredMarker","underlineRef","_inputContainerRef","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","MatAutocompleteBase","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","_autoActiveFirstOption","__extends","d","__","constructor","extendStatics","MATERIAL_SANITY_CHECKS_FACTORY","base","class_1","defaultColor","_disableRipple","matcher","_pendingSubscribers","Observable","subscriber","_notifySubscriber","MAT_DATE_LOCALE_FACTORY","inject","LOCALE_ID","range","valueFunction","valuesArray","enforceStyleRecalculation","window","getPropertyValue","distanceToFurthestCorner","distX","distY","sqrt","optionsArray","groups","groupCounter","optionOffset","currentScrollPosition","optionHeight","reposition","MAT_DIALOG_SCROLL_STRATEGY_FACTORY","defaultOptions","provider","exp","match","parentRegistry","httpClient","sanitizer","scrollThrottle","parentIntl","sortOrder","setPrototypeOf","__proto__","__assign","assign","s","n","SHARP_CURVE","MATERIAL_SANITY_CHECKS","_sanityChecksEnabled","_hasDoneGlobalChecks","_hasCheckedHammer","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","doctype","body","testElement","computedStyle","_checkHammerIsAvailable","BidiModule","MAT_DATE_LOCALE","MAT_DATE_LOCALE_PROVIDER","_localeChanges","setLocale","locale","second","firstValid","secondValid","SUPPORTS_INTL_API","Intl","DEFAULT_MONTH_NAMES","short","String","DEFAULT_DATE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","NativeDateAdapter","matDateLocale","useUtcForDisplay","_clampDate","getFullYear","getDay","dtf_1","DateTimeFormat","timeZone","_stripDirectionalityCharacters","_format","Date","dtf_2","day","dtf_3","weekday","dtf","_createDateWithOverflow","clone","displayFormat","setFullYear","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","test","isNaN","getTime","NaN","UTC","getHours","getMinutes","getSeconds","getMilliseconds","MAT_NATIVE_DATE_FORMATS","NativeDateModule","MatNativeDateModule","ShowOnDirtyErrorStateMatcher","dirty","submitted","touched","MAT_HAMMER_OPTIONS","ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES","ɵ1","noopHammerInstance","on","off","_hammerOptions","commonModule","events","buildHammer","hammer","Hammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","MatLine","_setLineClass","count","_resetClasses","_setClass","isAdd","RippleRef","_renderer","RippleState","HIDDEN","fadeOutRipple","defaultRippleAnimationConfig","enterDuration","exitDuration","ignoreMouseEventsTimeout","_target","_isPointerDown","_triggerEvents","_activeRipples","_eventOptions","supportsPassiveEventListeners","passive","onMousedown","isSyntheticEvent","_lastTouchStartEvent","now","rippleDisabled","fadeInRipple","onTouchStart","touches","onPointerUp","VISIBLE","FADING_IN","_containerElement","containerRect","_containerRect","animationConfig","centered","radius","transitionDuration","rippleRef","_mostRecentTransientRipple","runTimeoutOutsideZone","isMostRecentTransientRipple","wasActive","rippleEl","FADING_OUT","fadeOutAll","_triggerElement","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","_trigger","configOrX","[class.mat-ripple-unbounded]","unbounded","MatPseudoCheckbox","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter","[class.mat-optgroup-disabled]"],"mappings":"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"}