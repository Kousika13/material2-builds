{"version":3,"file":"material.umd.min.js","sources":["../../src/lib/tooltip/tooltip.ts","../../src/lib/tabs/tab-group.ts","../../src/lib/tabs/tab-label-wrapper.ts","../../src/lib/tabs/tab-header.ts","../../src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/lib/tabs/tabs-module.ts","../../src/lib/toolbar/toolbar.ts","../../src/lib/toolbar/toolbar-module.ts","../../src/lib/tree/outlet.ts","../../src/lib/tree/node.ts","../../src/lib/tree/padding.ts","../../src/lib/tree/tree.ts","../../src/lib/tree/toggle.ts","../../src/lib/tree/tree-module.ts","../../src/lib/tree/data-source/flat-data-source.ts","../../src/lib/tree/data-source/nested-data-source.ts","../../src/lib/version.ts","../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/core/testing/month-constants.ts","../../src/lib/expansion/expansion-animations.ts","../../src/lib/select/select.ts","../../src/lib/stepper/step-header.ts","../../src/lib/stepper/stepper-animations.ts","../../src/lib/stepper/stepper-icon.ts","../../src/lib/stepper/stepper.ts","../../src/lib/stepper/stepper-button.ts","../../src/lib/stepper/stepper-module.ts","../../src/lib/table/table.ts","../../src/lib/table/cell.ts","../../src/lib/table/row.ts","../../src/lib/table/table-module.ts","../../src/lib/table/table-data-source.ts","../../src/lib/tabs/ink-bar.ts","../../src/lib/tabs/tab-label.ts","../../src/lib/tabs/tab-content.ts","../../src/lib/tabs/tab.ts","../../src/lib/tabs/tabs-animations.ts","../../src/lib/tabs/tab-body.ts","../../src/lib/slider/slider.ts","../../src/lib/slider/slider-module.ts","../../src/lib/snack-bar/snack-bar-ref.ts","../../src/lib/snack-bar/snack-bar-config.ts","../../src/lib/snack-bar/snack-bar-animations.ts","../../src/lib/snack-bar/simple-snack-bar.ts","../../src/lib/snack-bar/snack-bar-container.ts","../../src/lib/snack-bar/snack-bar.ts","../../src/lib/snack-bar/snack-bar-module.ts","../../src/lib/sort/sort.ts","../../src/lib/sort/sort-header-intl.ts","../../src/lib/sort/sort-animations.ts","../../src/lib/sort/sort-header.ts","../../src/lib/sort/sort-module.ts","../../src/lib/stepper/step-label.ts","../../src/lib/stepper/stepper-intl.ts","../../src/lib/sidenav/drawer.ts","../../src/lib/sidenav/sidenav.ts","../../src/lib/sidenav/sidenav-module.ts","../../src/lib/slide-toggle/slide-toggle.ts","../../src/lib/slide-toggle/slide-toggle-module.ts","../../src/lib/progress-spinner/progress-spinner.ts","../../src/lib/progress-spinner/progress-spinner-module.ts","../../src/lib/radio/radio.ts","../../src/lib/radio/radio-module.ts","../../src/lib/sidenav/drawer-animations.ts","../../src/lib/select/select-module.ts","../../src/lib/tooltip/tooltip-animations.ts","../../src/lib/tooltip/tooltip-module.ts","../../src/lib/paginator/paginator-intl.ts","../../src/lib/paginator/paginator.ts","../../src/lib/paginator/paginator-module.ts","../../src/lib/progress-bar/progress-bar.ts","../../src/lib/progress-bar/progress-bar-module.ts","../../src/lib/menu/menu-directive.ts","../../src/lib/menu/menu-trigger.ts","../../src/lib/menu/menu-module.ts","../../src/lib/select/select-animations.ts","../../src/lib/list/selection-list.ts","../../src/lib/list/list-module.ts","../../src/lib/menu/menu-animations.ts","../../src/lib/menu/menu-item.ts","../../src/lib/menu/menu-content.ts","../../src/lib/list/list.ts","../../src/lib/icon/icon-registry.ts","../../src/lib/icon/icon.ts","../../src/lib/icon/icon-module.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-module.ts","../../src/lib/divider/divider.ts","../../src/lib/divider/divider-module.ts","../../src/lib/expansion/accordion.ts","../../src/lib/expansion/expansion-panel-content.ts","../../src/lib/expansion/expansion-panel.ts","../../src/lib/expansion/expansion-panel-header.ts","../../src/lib/expansion/expansion-module.ts","../../src/lib/grid-list/grid-tile.ts","../../src/lib/grid-list/tile-coordinator.ts","../../src/lib/grid-list/tile-styler.ts","../../src/lib/grid-list/grid-list.ts","../../src/lib/grid-list/grid-list-module.ts","../../src/lib/datepicker/multi-year-view.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/datepicker/calendar.ts","../../src/lib/datepicker/datepicker-animations.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/dialog/dialog-container.ts","../../src/lib/dialog/dialog-ref.ts","../../src/lib/dialog/dialog.ts","../../src/lib/dialog/dialog-content-directives.ts","../../src/lib/dialog/dialog-module.ts","../../src/lib/input/autofill.ts","../../src/lib/input/autosize.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/input.ts","../../src/lib/input/input-module.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/chips/chip.ts","../../src/lib/chips/chip-list.ts","../../src/lib/chips/chip-input.ts","../../src/lib/chips/chips-module.ts","../../src/lib/dialog/dialog-config.ts","../../src/lib/dialog/dialog-animations.ts","../../src/lib/button/button.ts","../../src/lib/button/button-module.ts","../../src/lib/button-toggle/button-toggle.ts","../../src/lib/button-toggle/button-toggle-module.ts","../../src/lib/card/card.ts","../../src/lib/card/card-module.ts","../../src/lib/checkbox/checkbox-config.ts","../../src/lib/autocomplete/autocomplete-module.ts","../../src/lib/badge/badge.ts","../../src/lib/badge/badge-module.ts","../../src/lib/bottom-sheet/bottom-sheet-animations.ts","../../src/lib/bottom-sheet/bottom-sheet-container.ts","../../src/lib/bottom-sheet/bottom-sheet-config.ts","../../src/lib/bottom-sheet/bottom-sheet-ref.ts","../../src/lib/bottom-sheet/bottom-sheet.ts","../../src/lib/bottom-sheet/bottom-sheet-module.ts","../../src/lib/core/option/option.ts","../../src/lib/core/option/index.ts","../../src/lib/core/label/label-options.ts","../../src/lib/form-field/error.ts","../../src/lib/form-field/form-field-animations.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/label.ts","../../src/lib/form-field/placeholder.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field-module.ts","../../src/lib/autocomplete/autocomplete.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/disable-ripple.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/core/common-behaviors/initialized.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/grid-list/grid-list-measure.ts","../../src/lib/menu/menu-errors.ts","../../src/lib/select/select-errors.ts","../../src/lib/sort/sort-errors.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/datetime/date-formats.ts","../../src/lib/core/datetime/native-date-formats.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/line/line.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/option/optgroup.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {\n  ConnectionPositionPair,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  ScrollDispatcher,\n  OverlayConnectionPosition,\n  OverlayRef,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  VerticalConnectionPos,\n  ConnectedPositionStrategy,\n} from '@angular/cdk/overlay';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take} from 'rxjs/operators/take';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {filter} from 'rxjs/operators/filter';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {matTooltipAnimations} from './tooltip-animations';\nimport {BreakpointObserver, Breakpoints, BreakpointState} from '@angular/cdk/layout';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/** Creates an error to be thrown if the user supplied an invalid tooltip position. */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition({ scrollThrottle: SCROLL_THROTTLE_MS });\n}\n\n/** @docs-private */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY\n};\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options');\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.google.com/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': '_handleTouchend()',\n  },\n})\nexport class MatTooltip implements OnDestroy {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _portal: ComponentPortal<TooltipComponent>;\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      if (this._overlayRef) {\n        // TODO(andrewjs): When the overlay's position can be\n        // dynamically changed, do not destroy the tooltip.\n        this._detach();\n        this._updatePosition();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Input('tooltip-position')\n  get _positionDeprecated(): TooltipPosition { return this._position; }\n  set _positionDeprecated(value: TooltipPosition) { this._position = value; }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay =\n      this._defaultOptions ? this._defaultOptions.showDelay : 0;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay =\n      this._defaultOptions ? this._defaultOptions.hideDelay : 0;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, Function>();\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    private _platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) private _scrollStrategy,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions?: MatTooltipDefaultOptions) {\n\n    // TODO(crisbeto): make the `_defaultOptions` a required param next time we do breaking changes.\n    // @deletion-target 6.0.0\n\n    const element: HTMLElement = _elementRef.nativeElement;\n\n    // The mouse events shouldn't be bound on iOS devices, because\n    // they can prevent the first tap from firing its click event.\n    if (!_platform.IOS) {\n      this._manualListeners.set('mouseenter', () => this.show());\n      this._manualListeners.set('mouseleave', () => this.hide());\n\n      this._manualListeners\n        .forEach((listener, event) => _elementRef.nativeElement.addEventListener(event, listener));\n    } else if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS, because it will prevent users from typing in inputs. If\n      // we're on iOS and the tooltip is attached on an input or textarea, we clear\n      // the `user-select` to avoid these issues.\n      element.style.webkitUserSelect = element.style.userSelect = '';\n    }\n\n    _focusMonitor.monitor(element).pipe(takeUntil(this._destroyed)).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin !== 'program') {\n        _ngZone.run(() => this.show());\n      }\n    });\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._tooltipInstance = null;\n    }\n\n    // Clean up the event listeners set in the constructor\n    if (!this._platform.IOS) {\n      this._manualListeners.forEach((listener, event) =>\n        this._elementRef.nativeElement.removeEventListener(event, listener));\n\n      this._manualListeners.clear();\n    }\n\n    this._destroyed.next();\n    this._destroyed.complete();\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message) { return; }\n\n    const overlayRef = this._createOverlay();\n\n    this._detach();\n    this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    this._tooltipInstance = overlayRef.attach(this._portal).instance;\n    this._tooltipInstance.afterHidden()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(this._position, delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Handles the touchend events on the host element. */\n  _handleTouchend() {\n    this.hide(this._defaultOptions ? this._defaultOptions.touchendHideDelay : 1500);\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    if (this._overlayRef) {\n      return this._overlayRef;\n    }\n\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay\n      .position()\n      .connectedTo(this._elementRef, origin.main, overlay.main)\n      .withFallbackPosition(origin.fallback, overlay.fallback)\n      .withScrollableContainers(\n        this._scrollDispatcher.getAncestorScrollContainers(this._elementRef)\n      );\n\n    strategy.onPositionChange.pipe(\n        filter(() => !!this._tooltipInstance),\n        takeUntil(this._destroyed)\n    ).subscribe(change => {\n      if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance!.isVisible()) {\n        // After position changes occur and the overlay is clipped by\n        // a parent scrollable then close the tooltip.\n        this._ngZone.run(() => this.hide(0));\n      } else {\n        // Otherwise recalculate the origin based on the new position.\n        this._tooltipInstance!._setTransformOrigin(change.connectionPair);\n      }\n    });\n\n    this._overlayRef = this._overlay.create({\n      direction: this._dir ? this._dir.value : 'ltr',\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._overlayRef.detachments()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n\n    return this._overlayRef;\n  }\n\n  /** Detaches the currently-attached tooltip. */\n  private _detach() {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /** Updates the position of the current tooltip. */\n  private _updatePosition() {\n    const position = this._overlayRef!.getConfig().positionStrategy as ConnectedPositionStrategy;\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    position\n      .withPositions([])\n      .withFallbackPosition(origin.main, overlay.main)\n      .withFallbackPosition(origin.fallback, overlay.fallback);\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isDirectionLtr = !this._dir || this._dir.value == 'ltr';\n    let position: OriginConnectionPosition;\n\n    if (this.position == 'above' || this.position == 'below') {\n      position = {originX: 'center', originY: this.position == 'above' ? 'top' : 'bottom'};\n    } else if (this.position == 'left' ||\n               this.position == 'before' && isDirectionLtr ||\n               this.position == 'after' && !isDirectionLtr) {\n      position = {originX: 'start', originY: 'center'};\n    } else if (this.position == 'right' ||\n               this.position == 'after' && isDirectionLtr ||\n               this.position == 'before' && !isDirectionLtr) {\n      position = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(this.position);\n    }\n\n    const {x, y} = this._invertPosition(position.originX, position.originY);\n\n    return {\n      main: position,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    let position: OverlayConnectionPosition;\n\n    if (this.position == 'above') {\n      position = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (this.position == 'below') {\n      position = {overlayX: 'center', overlayY: 'top'};\n    } else if (this.position == 'left' ||\n               this.position == 'before' && isLtr ||\n               this.position == 'after' && !isLtr) {\n      position = {overlayX: 'end', overlayY: 'center'};\n    } else if (this.position == 'right' ||\n               this.position == 'after' && isLtr ||\n               this.position == 'before' && !isLtr) {\n      position = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(this.position);\n    }\n\n    const {x, y} = this._invertPosition(position.overlayX, position.overlayY);\n\n    return {\n      main: position,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(\n        take(1),\n        takeUntil(this._destroyed)\n      ).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** The transform origin used in the animation for showing and hiding the tooltip */\n  _transformOrigin: 'top' | 'bottom' | 'left' | 'right' = 'bottom';\n\n  /** Current position of the tooltip. */\n  private _position: TooltipPosition;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private readonly _onHide: Subject<any> = new Subject();\n\n  /** Stream that emits whether the user has a handset-sized display.  */\n  _isHandset: Observable<BreakpointState> = this._breakpointObserver.observe(Breakpoints.Handset);\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _breakpointObserver: BreakpointObserver) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param position Position of the tooltip.\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(position: TooltipPosition, delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._position = position;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  /** Sets the tooltip transform origin according to the position of the tooltip overlay. */\n  _setTransformOrigin(overlayPosition: ConnectionPositionPair) {\n    const axis = (this._position === 'above' || this._position === 'below') ? 'Y' : 'X';\n    const position = axis == 'X' ? overlayPosition.overlayX : overlayPosition.overlayY;\n\n    if (position === 'top' || position === 'bottom') {\n      this._transformOrigin = position;\n    } else if (position === 'start') {\n      this._transformOrigin = 'left';\n    } else if (position === 'end') {\n      this._transformOrigin = 'right';\n    } else {\n      throw getMatTooltipInvalidPositionError(this._position);\n    }\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      this._closeOnInteraction = true;\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.google.com/components/tooltips.html#tooltips-interaction\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\nimport {merge} from 'rxjs/observable/merge';\nimport {\n  CanColor,\n  CanDisableRipple,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette\n} from '@angular/material/core';\n\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nexport class MatTabGroupBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabGroupMixinBase = mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://www.google.com/design/spec/components/tabs.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\n\n  @ViewChild('tabBodyWrapper') _tabBodyWrapper: ElementRef;\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n  private _dynamicHeight: boolean = false;\n\n  /**\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Input('mat-dynamic-height')\n  get _dynamicHeightDeprecated(): boolean { return this._dynamicHeight; }\n  set _dynamicHeightDeprecated(value: boolean) { this._dynamicHeight = value; }\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() readonly focusChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() readonly selectedTabChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\n\n  /**\n   * Event emitted when the tab selection has changed.\n   * @deprecated Use `selectedTabChange` instead.\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly selectChange: EventEmitter<MatTabChangeEvent> = this.selectedTabChange;\n\n  private _groupId: number;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super(elementRef);\n    this._groupId = nextId++;\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked() {\n    // Clamp the next selected index to the boundsof 0 and the tabs length.\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    let indexToSelect = this._indexToSelect =\n        Math.min(this._tabs.length - 1, Math.max(this._indexToSelect || 0, 0));\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect && this._selectedIndex != null) {\n      const tabChangeEvent = this._createChangeEvent(indexToSelect);\n      this.selectedTabChange.emit(tabChangeEvent);\n      // Emitting this value after change detection has run\n      // since the checked content may contain this variable'\n      Promise.resolve().then(() => this.selectedIndexChange.emit(indexToSelect));\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n      tab.isActive = index === indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  _focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(\n        ...this._tabs.map(tab => tab._disableChange),\n        ...this._tabs.map(tab => tab._labelChange)).subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    this._tabBodyWrapperHeight = this._tabBodyWrapper.nativeElement.clientHeight;\n    this._tabBodyWrapper.nativeElement.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, idx: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = idx;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nexport class MatTabLabelWrapperBase {}\nexport const _MatTabLabelWrapperMixinBase = mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled'\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {ENTER, LEFT_ARROW, RIGHT_ARROW, SPACE, HOME, END} from '@angular/cdk/keycodes';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, mixinDisableRipple} from '@angular/material/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\n\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n// Boilerplate for applying mixins to MatTabHeader.\n/** @docs-private */\nexport class MatTabHeaderBase {}\nexport const _MatTabHeaderMixinBase = mixinDisableRipple(MatTabHeaderBase);\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends _MatTabHeaderMixinBase\n    implements AfterContentChecked, AfterContentInit, OnDestroy, CanDisableRipple {\n\n  @ContentChildren(MatTabLabelWrapper) _labelWrappers: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer') _tabListContainer: ElementRef;\n  @ViewChild('tabList') _tabList: ElementRef;\n\n  /** The tab index that is focused. */\n  private _focusIndex: number = 0;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Combines listeners that will re-align the ink bar whenever they're invoked. */\n  private _realignInkBar = Subscription.EMPTY;\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  private _selectedIndex: number = 0;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number { return this._selectedIndex; }\n  set selectedIndex(value: number) {\n    value = coerceNumberProperty(value);\n    this._selectedIndexChanged = this._selectedIndex != value;\n    this._selectedIndex = value;\n    this._focusIndex = value;\n  }\n\n  /** Event emitted when the option is selected. */\n  @Output() readonly selectFocusedIndex = new EventEmitter();\n\n  /** Event emitted when a label is focused. */\n  @Output() readonly indexFocused = new EventEmitter();\n\n  constructor(private _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() private _dir: Directionality) {\n    super();\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this._updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case RIGHT_ARROW:\n        this._focusNextTab();\n        break;\n      case LEFT_ARROW:\n        this._focusPreviousTab();\n        break;\n      case HOME:\n        this._focusFirstTab();\n        event.preventDefault();\n        break;\n      case END:\n        this._focusLastTab();\n        event.preventDefault();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        event.preventDefault();\n        break;\n    }\n  }\n\n  /**\n   * Aligns the ink bar to the selected tab on load.\n   */\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this._updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n    this._realignInkBar = merge(dirChange, resize).subscribe(realign);\n  }\n\n  ngOnDestroy() {\n    this._realignInkBar.unsubscribe();\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    this._updatePagination();\n    this._alignInkBarToSelectedTab();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Updating the view whether pagination should be enabled or not\n   */\n  _updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this._focusIndex == value) { return; }\n\n    this._focusIndex = value;\n    this.indexFocused.emit(value);\n    this._setTabFocus(value);\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number { return this._focusIndex; }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /**\n   * Moves the focus towards the beginning or the end of the list depending on the offset provided.\n   * Valid offsets are 1 and -1.\n   */\n  _moveFocus(offset: number) {\n    if (this._labelWrappers) {\n      const tabs: MatTabLabelWrapper[] = this._labelWrappers.toArray();\n\n      for (let i = this.focusIndex + offset; i < tabs.length && i >= 0; i += offset) {\n        if (this._isValidIndex(i)) {\n          this.focusIndex = i;\n          return;\n        }\n      }\n    }\n  }\n\n  /** Increment the focus index by 1 until a valid tab is found. */\n  _focusNextTab(): void {\n    this._moveFocus(this._getLayoutDirection() == 'ltr' ? 1 : -1);\n  }\n\n  /** Decrement the focus index by 1 until a valid tab is found. */\n  _focusPreviousTab(): void {\n    this._moveFocus(this._getLayoutDirection() == 'ltr' ? -1 : 1);\n  }\n\n  /** Focuses the first tab. */\n  private _focusFirstTab(): void {\n    for (let i = 0; i < this._labelWrappers.length; i++) {\n      if (this._isValidIndex(i)) {\n        this.focusIndex = i;\n        break;\n      }\n    }\n  }\n\n  /** Focuses the last tab. */\n  private _focusLastTab(): void {\n    for (let i = this._labelWrappers.length - 1; i > -1; i--) {\n      if (this._isValidIndex(i)) {\n        this.focusIndex = i;\n        break;\n      }\n    }\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    const scrollDistance = this.scrollDistance;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    this._tabList.nativeElement.style.transform = `translate3d(${translateX}px, 0, 0)`;\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  get scrollDistance(): number { return this._scrollDistance; }\n  set scrollDistance(v: number) {\n    this._scrollDistance = Math.max(0, Math.min(this._getMaxScrollDistance(), v));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n  }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(scrollDir: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    this.scrollDistance += (scrollDir == 'before' ? -1 : 1) * viewLength / 3;\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    const selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    const isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  private _alignInkBarToSelectedTab(): void {\n    const selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\n        null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex, RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {Subject} from 'rxjs/Subject';\nimport {MatInkBar} from '../ink-bar';\n\n\n// Boilerplate for applying mixins to MatTabNav.\n/** @docs-private */\nexport class MatTabNavBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabNavMixinBase = mixinColor(MatTabNavBase, 'primary');\n\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  exportAs: 'matTabNavBar, matTabNav',\n  inputs: ['color'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTabNav extends _MatTabNavMixinBase implements AfterContentInit, CanColor,\n    OnDestroy {\n\n  /** Subject that emits when the component has been destroyed. */\n  private readonly _onDestroy = new Subject<void>();\n\n  _activeLinkChanged: boolean;\n  _activeLinkElement: ElementRef;\n\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n\n  /** Query list of all tab links of the tab navigation. */\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true})\n  _tabLinks: QueryList<MatTabLink>;\n\n  /** Background color of the tab nav. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Whether ripples should be disabled for all links or not. */\n  @Input()\n  get disableRipple() { return this._disableRipple; }\n  set disableRipple(value: boolean) {\n    this._disableRipple = coerceBooleanProperty(value);\n    this._setLinkDisableRipple();\n  }\n  private _disableRipple: boolean = false;\n\n  constructor(elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler) {\n    super(elementRef);\n  }\n\n  /** Notifies the component that the active link has been changed. */\n  updateActiveLink(element: ElementRef) {\n    this._activeLinkChanged = this._activeLinkElement != element;\n    this._activeLinkElement = element;\n\n    if (this._activeLinkChanged) {\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      const dirChange = this._dir ? this._dir.change : observableOf(null);\n\n      return merge(dirChange, this._viewportRuler.change(10)).pipe(takeUntil(this._onDestroy))\n          .subscribe(() => this._alignInkBar());\n    });\n\n    this._setLinkDisableRipple();\n  }\n\n  /** Checks if the active link has been changed and, if so, will update the ink bar. */\n  ngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Aligns the ink bar to the active link. */\n  _alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    }\n  }\n\n  /** Sets the `disableRipple` property on each link of the navigation bar. */\n  private _setLinkDisableRipple() {\n    if (this._tabLinks) {\n      this._tabLinks.forEach(link => link.disableRipple = this.disableRipple);\n    }\n  }\n}\n\n\n// Boilerplate for applying mixins to MatTabLink.\nexport class MatTabLinkBase {}\nexport const _MatTabLinkMixinBase =\n  mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\n\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n@Directive({\n  selector: '[mat-tab-link], [matTabLink]',\n  exportAs: 'matTabLink',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabIndex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled',\n    '[class.mat-tab-label-active]': 'active',\n    '(click)': '_handleClick($event)'\n  }\n})\nexport class MatTabLink extends _MatTabLinkMixinBase\n    implements OnDestroy, CanDisable, CanDisableRipple, HasTabIndex, RippleTarget {\n\n  /** Whether the tab link is active or not. */\n  private _isActive: boolean = false;\n\n  /** Reference to the RippleRenderer for the tab-link. */\n  private _tabLinkRipple: RippleRenderer;\n\n  /** Whether the link is active. */\n  @Input()\n  get active(): boolean { return this._isActive; }\n  set active(value: boolean) {\n    this._isActive = value;\n    if (value) {\n      this._tabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple;\n  }\n\n  constructor(private _tabNavBar: MatTabNav,\n              private _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Attribute('tabindex') tabIndex: string) {\n    super();\n\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._tabLinkRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    if (globalOptions) {\n      this.rippleConfig = {\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n        speedFactor: globalOptions.baseSpeedFactor,\n        animation: globalOptions.animation,\n      };\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabLinkRipple._removeTriggerEvents();\n  }\n\n  /**\n   * Handles the click event, preventing default navigation if the tab link is disabled.\n   */\n  _handleClick(event: MouseEvent) {\n    if (this.disabled) {\n      event.preventDefault();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {ScrollDispatchModule, VIEWPORT_RULER_PROVIDER} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\nimport {MatTabContent} from './tab-content';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n    ScrollDispatchModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n    MatTabContent,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader,\n    MatTabContent,\n  ],\n  providers: [VIEWPORT_RULER_PROVIDER],\n})\nexport class MatTabsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nexport class MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatToolbarMixinBase = mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': 'this._toolbarRows.length',\n    '[class.mat-toolbar-single-row]': '!this._toolbarRows.length'\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n  private _document: Document;\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(\n    elementRef: ElementRef,\n    private _platform: Platform,\n    @Inject(DOCUMENT) document?: any) {\n    super(elementRef);\n\n    // TODO: make the document a required param when doing breaking changes.\n    this._document = document;\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = [].slice.call(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n      .some(node => node.textContent.trim());\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodeOutlet} from '@angular/cdk/tree';\nimport {\n  Directive,\n  ViewContainerRef,\n} from '@angular/core';\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({\n  selector: '[matTreeNodeOutlet]'\n})\nexport class MatTreeNodeOutlet implements CdkTreeNodeOutlet {\n  constructor(public viewContainer: ViewContainerRef) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Attribute,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Input,\n  QueryList\n} from '@angular/core';\nimport {\n  CdkNestedTreeNode,\n  CdkTree,\n  CdkTreeNodeDef,\n  CdkTreeNode,\n} from '@angular/cdk/tree';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {mixinTabIndex, mixinDisabled, CanDisable, HasTabIndex} from '@angular/material/core';\n\n\nexport const _MatTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkTreeNode));\nexport const _MatNestedTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkNestedTreeNode));\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n  selector: 'mat-tree-node',\n  exportAs: 'matTreeNode',\n  inputs: ['disabled', 'tabIndex'],\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.aria-level]': 'level',\n    '[attr.role]': 'role',\n    'class': 'mat-tree-node'\n  },\n  providers: [{provide: CdkTreeNode, useExisting: MatTreeNode}]\n})\nexport class MatTreeNode<T> extends _MatTreeNodeMixinBase<T> implements HasTabIndex, CanDisable {\n  @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n  constructor(protected _elementRef: ElementRef,\n              protected _tree: CdkTree<T>,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n}\n\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeDef]',\n  inputs: [\n    'when: matTreeNodeDefWhen'\n  ],\n  providers: [{provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef}]\n})\nexport class MatTreeNodeDef<T> extends CdkTreeNodeDef<T> {\n  @Input('matTreeNode') data: T;\n}\n\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\n@Directive({\n  selector: 'mat-nested-tree-node',\n  exportAs: 'matNestedTreeNode',\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.role]': 'role',\n    'class': 'mat-nested-tree-node',\n  },\n  inputs: ['disabled', 'tabIndex'],\n  providers: [\n    {provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CdkTreeNode, useExisting: MatNestedTreeNode}\n  ]\n})\nexport class MatNestedTreeNode<T> extends _MatNestedTreeNodeMixinBase<T>\n    implements HasTabIndex, CanDisable {\n\n  @Input('matNestedTreeNode') node: T;\n\n  @ContentChildren(MatTreeNodeOutlet) nodeOutlet: QueryList<MatTreeNodeOutlet>;\n\n  constructor(protected _elementRef: ElementRef,\n              protected _tree: CdkTree<T>,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodePadding} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodePadding]',\n  providers: [{provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding}]\n})\nexport class MatTreeNodePadding<T> extends CdkTreeNodePadding<T> {\n\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  @Input('matTreeNodePadding') level: number;\n\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n  @Input('matTreeNodePaddingIndent') indent: number;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation} from '@angular/core';\nimport {CdkTree} from '@angular/cdk/tree';\nimport {MatTreeNodeOutlet} from './outlet';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tree',\n  exportAs: 'matTree',\n  template: `<ng-container matTreeNodeOutlet></ng-container>`,\n  host: {\n    'class': 'mat-tree',\n    'role': 'tree',\n  },\n  styleUrls: ['tree.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [{provide: CdkTree, useExisting: MatTree}]\n})\nexport class MatTree<T> extends CdkTree<T> {\n  // Outlets within the tree's template where the dataNodes will be inserted.\n  @ViewChild(MatTreeNodeOutlet) _nodeOutlet: MatTreeNodeOutlet;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\nimport {CdkTreeNodeToggle} from '@angular/cdk/tree';\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeToggle]',\n  host: {\n    '(click)': '_toggle($event)',\n  },\n  providers: [{provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle}]\n})\nexport class MatTreeNodeToggle<T> extends CdkTreeNodeToggle<T> {\n  @Input('matTreeNodeToggleRecursive') recursive: boolean = true;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatNestedTreeNode, MatTreeNodeDef, MatTreeNode} from './node';\nimport {MatTree} from './tree';\nimport {MatTreeNodeToggle} from './toggle';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {MatTreeNodePadding} from './padding';\n\nconst MAT_TREE_DIRECTIVES = [\n  MatNestedTreeNode,\n  MatTreeNodeDef,\n  MatTreeNodePadding,\n  MatTreeNodeToggle,\n  MatTree,\n  MatTreeNode,\n  MatTreeNodeOutlet\n];\n\n@NgModule({\n  imports: [CdkTreeModule, CommonModule, MatCommonModule],\n  exports: MAT_TREE_DIRECTIVES,\n  declarations: MAT_TREE_DIRECTIVES,\n})\nexport class MatTreeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {FlatTreeControl, TreeControl} from '@angular/cdk/tree';\nimport {Observable} from 'rxjs/Observable';\nimport {merge} from 'rxjs/observable/merge';\nimport {map} from 'rxjs/operators/map';\nimport {take} from 'rxjs/operators/take';\nimport {BehaviorSubject} from 'rxjs/BehaviorSubject';\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class MatTreeFlattener<T, F> {\n\n  constructor(public transformFunction: (node: T, level: number) => F,\n              public getLevel: (node: F) => number,\n              public isExpandable: (node: F) => boolean,\n              public getChildren: (node: T) => Observable<T[]>) {}\n\n  _flattenNode(node: T, level: number,\n               resultNodes: F[], parentMap: boolean[]): F[] {\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n\n    if (this.isExpandable(flatNode)) {\n      this.getChildren(node).pipe(take(1)).subscribe(children => {\n        children.forEach((child, index) => {\n          let childParentMap: boolean[] = parentMap.slice();\n          childParentMap.push(index != children.length - 1);\n          this._flattenNode(child, level + 1, resultNodes, childParentMap);\n        });\n      });\n    }\n    return resultNodes;\n  }\n\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   */\n  flattenNodes(structuredData: T[]): F[] {\n    let resultNodes: F[] = [];\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   */\n  expandFlattenedNodes(nodes: F[], treeControl: TreeControl<F>): F[] {\n    let results: F[] = [];\n    let currentExpand: boolean[] = [];\n    currentExpand[0] = true;\n\n    nodes.forEach((node) => {\n      let expand = true;\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n      if (expand) {\n        results.push(node);\n      }\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nexport class MatTreeFlatDataSource<T, F> extends DataSource<F> {\n  _flattenedData = new BehaviorSubject<F[]>([]);\n\n  _expandedData = new BehaviorSubject<F[]>([]);\n\n  _data: BehaviorSubject<T[]>;\n  get data() { return this._data.value; }\n  set data(value: T[]) {\n    this._data.next(value);\n    this._flattenedData.next(this.treeFlattener.flattenNodes(this.data));\n    this.treeControl.dataNodes = this._flattenedData.value;\n  }\n\n  constructor(private treeControl: FlatTreeControl<F>,\n              private treeFlattener: MatTreeFlattener<T, F>,\n              initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n  }\n\n  connect(collectionViewer: CollectionViewer): Observable<F[]> {\n    const changes = [\n      collectionViewer.viewChange,\n      this.treeControl.expansionModel.onChange!,\n      this._flattenedData\n    ];\n    return merge(...changes).pipe(map(() => {\n      this._expandedData.next(\n        this.treeFlattener.expandFlattenedNodes(this._flattenedData.value, this.treeControl));\n      return this._expandedData.value;\n    }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {Observable} from 'rxjs/Observable';\nimport {merge} from 'rxjs/observable/merge';\nimport {map} from 'rxjs/operators/map';\nimport {BehaviorSubject} from 'rxjs/BehaviorSubject';\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nexport class MatTreeNestedDataSource<T> extends DataSource<T> {\n  _data = new BehaviorSubject<T[]>([]);\n\n  /**\n   * Data for the nested treee\n   */\n  get data() { return this._data.value; }\n  set data(value: T[]) { this._data.next(value); }\n\n  connect(collectionViewer: CollectionViewer): Observable<T[]> {\n    return merge(...[collectionViewer.viewChange, this._data])\n      .pipe(map(() => {\n        return this.data;\n      }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('6.0.0-beta.4-4a84a67');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, UP_ARROW, TAB} from '@angular/cdk/keycodes';\nimport {\n  ConnectedPositionStrategy,\n  Overlay,\n  OverlayRef,\n  OverlayConfig,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {switchMap} from 'rxjs/operators/switchMap';\nimport {tap} from 'rxjs/operators/tap';\nimport {delay} from 'rxjs/operators/delay';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  MatOption,\n  MatOptionSelectionChange,\n  _getOptionScrollPosition,\n  _countGroupLabelsBeforeOption,\n} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {DOCUMENT} from '@angular/common';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {defer} from 'rxjs/observable/defer';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatAutocomplete} from './autocomplete';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    'role': 'combobox',\n    'autocomplete': 'off',\n    'aria-autocomplete': 'list',\n    '[attr.aria-activedescendant]': 'activeOption?.id',\n    '[attr.aria-expanded]': 'panelOpen.toString()',\n    '[attr.aria-owns]': 'autocomplete?.id',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  exportAs: 'matAutocompleteTrigger',\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal;\n  private _componentDestroyed = false;\n\n  /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n  private _previousValue: string | number | null;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: ConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Stream of keyboard events that can close the panel. */\n  private readonly _closeKeyEventStream = new Subject<void>();\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when autocomplete has been touched` */\n  _onTouched = () => {};\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  constructor(private _element: ElementRef, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any) {}\n\n  ngOnDestroy() {\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._overlayAttached && this.autocomplete.showPanel;\n  }\n  private _overlayAttached: boolean = false;\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (!this._overlayAttached) {\n      return;\n    }\n\n    if (this.panelOpen) {\n      // Only emit if the panel was visible.\n      this.autocomplete.closed.emit();\n    }\n\n    this.autocomplete._isOpen = this._overlayAttached = false;\n\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n\n    // Note that in some cases this can end up being called after the component is destroyed.\n    // Add a check to ensure that we don't try to run change detection on a destroyed view.\n    if (!this._componentDestroyed) {\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)),\n      this._closeKeyEventStream,\n      this._outsideClickStream,\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n          observableOf()\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  readonly optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .asObservable()\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  });\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private get _outsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return merge(\n      fromEvent(this._document, 'click'),\n      fromEvent(this._document, 'touchend')\n    )\n    .pipe(filter((event: MouseEvent | TouchEvent) => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._overlayAttached &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n    if (keyCode === ESCAPE) {\n      event.preventDefault();\n    }\n\n    // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n    // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n    if (this.panelOpen && (keyCode === ESCAPE || (keyCode === UP_ARROW && event.altKey))) {\n      this._resetActiveItem();\n      this._closeKeyEventStream.next();\n      event.stopPropagation();\n    } else if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    let target = event.target as HTMLInputElement;\n    let value: number | string | null = target.value;\n\n    // Based on `NumberValueAccessor` from forms.\n    if (target.type === 'number') {\n      value = value == '' ? null : parseFloat(value);\n    }\n\n    // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._canOpen() && this._previousValue !== value &&\n      document.activeElement === event.target) {\n      this._previousValue = value;\n      this._onChange(value);\n      this.openPanel();\n    }\n  }\n\n  _handleFocus(): void {\n    if (this._canOpen()) {\n      this._previousValue = this._element.nativeElement.value;\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const index = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(index,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n\n    const newScrollPosition = _getOptionScrollPosition(\n      index + labelCount,\n      AUTOCOMPLETE_OPTION_HEIGHT,\n      this.autocomplete._getScrollTop(),\n      AUTOCOMPLETE_PANEL_HEIGHT\n    );\n\n    this.autocomplete._setScrollTop(newScrollPosition);\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.recalculateLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n      .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n          this._resetActiveItem();\n          this.autocomplete._setVisibility();\n          return this.panelClosingActions;\n        }),\n        // when the first closing event occurs...\n        take(1)\n      )\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      this._overlayRef = this._overlay.create(this._getOverlayConfig());\n    } else {\n      /** Update the panel width, in case the host width has changed */\n      this._overlayRef.updateSize({width: this._getHostWidth()});\n    }\n\n    if (this._overlayRef && !this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    const wasOpen = this.panelOpen;\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._overlayAttached = true;\n\n    // We need to do an extra `panelOpen` check in here, because the\n    // autocomplete won't be shown if there are no options.\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\n      this.autocomplete.opened.emit();\n    }\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getHostWidth(),\n      direction: this._dir ? this._dir.value : 'ltr'\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy = this._overlay.position().connectedTo(\n        this._getConnectedElement(),\n        {originX: 'start', originY: 'bottom'}, {overlayX: 'start', overlayY: 'top'})\n        .withFallbackPosition(\n            {originX: 'start', originY: 'top'}, {overlayX: 'start', overlayY: 'bottom'}\n        );\n    return this._positionStrategy;\n  }\n\n  private _getConnectedElement(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n  }\n\n  /** Determines whether the panel can be opened. */\n  private _canOpen(): boolean {\n    const element: HTMLInputElement = this._element.nativeElement;\n    return !element.readOnly && !element.disabled;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n    OCT = 9, NOV = 10, DEC = 11;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  animateChild,\n  group,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/** Animations used by the Material expansion panel. */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '48px'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '64px'}\n    }),\n    transition('expanded <=> collapsed', group([\n      query('@indicatorRotate', animateChild(), {optional: true}),\n      animate(EXPANSION_PANEL_ANIMATION_TIMING),\n    ])),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  SPACE,\n  UP_ARROW,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  CdkConnectedOverlay,\n  Overlay,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  ViewportRuler,\n} from '@angular/cdk/overlay';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {map} from 'rxjs/operators/map';\nimport {switchMap} from 'rxjs/operators/switchMap';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  ControlValueAccessor,\n  FormGroupDirective,\n  NgControl,\n  NgForm\n} from '@angular/forms';\nimport {\n  CanDisable,\n  ErrorStateMatcher,\n  CanUpdateErrorState,\n  mixinErrorState,\n  HasTabIndex,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinTabIndex,\n  MAT_OPTION_PARENT_COMPONENT,\n  mixinDisableRipple,\n  CanDisableRipple,\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {Observable} from 'rxjs/Observable';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subject} from 'rxjs/Subject';\nimport {defer} from 'rxjs/observable/defer';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 20px.\n */\nexport const SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 20;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nexport class MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatSelectMixinBase = mixinDisableRipple(\n    mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_ariaLabel',\n    '[attr.aria-labelledby]': 'ariaLabelledby',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanel,\n    matSelectAnimations.fadeInContent\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form. */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Whether the panel's animation is done. */\n  _panelDoneAnimating: boolean = false;\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy = this._scrollStrategyFactory();\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the component is disabling centering of the active option over the trigger. */\n  private _disableOptionCentering: boolean = false;\n\n  /** Whether the select is focused. */\n  focused: boolean = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger') trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether to center the active option over the trigger. */\n  @Input()\n  get disableOptionCentering(): boolean { return this._disableOptionCentering; }\n  set disableOptionCentering(value: boolean) {\n    this._disableOptionCentering = coerceBooleanProperty(value);\n  }\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.options) {\n      return merge(...this.options.map(option => option.onSelectionChange));\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  });\n\n   /** Event emitted when the select panel has been toggled. */\n   @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n   /** Event emitted when the select has been opened. */\n   @Output('opened')\n   get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /**\n   * Event emitted when the select has been opened.\n   * @deprecated Use `openedChange` instead.\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly onOpen: Observable<void> = this._openedStream;\n\n  /**\n   * Event emitted when the select has been closed.\n   * @deprecated Use `openedChange` instead.\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly onClose: Observable<void> = this._closedStream;\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectChange> =\n      new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event emitted when the selected value has been changed by the user.\n   * @deprecated Use `selectionChange` instead.\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly change: EventEmitter<MatSelectChange> = this.selectionChange;\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) private _scrollStrategyFactory) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes.disabled) {\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);\n\n    this._panelOpen = true;\n    this._keyManager.withHorizontalOrientation(null);\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n        keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  /**\n   * When the panel element is finished transforming in (though not fading in), it\n   * emits an event and focuses an option if the panel is open.\n   */\n  _onPanelDone(): void {\n    if (this.panelOpen) {\n      this._scrollTop = 0;\n      this.openedChange.emit(true);\n    } else {\n      this.openedChange.emit(false);\n      this._panelDoneAnimating = false;\n      this.overlayDir.offsetX = 0;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * When the panel content is done fading in, the _panelDoneAnimating property is\n   * set so the proper class can be added to the panel.\n   */\n  _onFadeInDone(): void {\n    this._panelDoneAnimating = this.panelOpen;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this.focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this.focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[], isUserInput = false): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      this._clearSelection();\n\n      const correspondingOption = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(correspondingOption);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput = false): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      isUserInput ? correspondingOption._selectViaInteraction() : correspondingOption.select();\n      this._selectionModel.select(correspondingOption);\n      this.stateChanges.next();\n    }\n\n    return correspondingOption;\n  }\n\n\n  /**\n   * Clears the select trigger and deselects every option in the list.\n   * @param skip Option that should not be deselected.\n   */\n  private _clearSelection(skip?: MatOption): void {\n    this._selectionModel.clear();\n    this.options.forEach(option => {\n      if (option !== skip) {\n        option.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\n      .withTypeAhead()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n\n      this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => this.close());\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges\n      .pipe(takeUntil(changedOrDestroyed), filter(event => event.isUserInput))\n      .subscribe(event => {\n        this._onSelect(event.source);\n\n        if (!this.multiple && this._panelOpen) {\n          this.close();\n          this.focus();\n        }\n      });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    // TODO(crisbeto): handle blank/null options inside multi-select.\n    if (this.multiple) {\n      this._selectionModel.toggle(option);\n      this.stateChanges.next();\n      wasSelected ? option.deselect() : option.select();\n      this._keyManager.setActiveItem(option);\n      this._sortValues();\n    } else {\n      this._clearSelection(option.value == null ? undefined : option);\n\n      if (option.value == null) {\n        this._propagateChanges(option.value);\n      } else {\n        this._selectionModel.select(option);\n        this.stateChanges.next();\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.options.forEach(option => {\n        if (option.selected) {\n          this._selectionModel.select(option);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options,\n        this.optionGroups);\n\n    this.panel.nativeElement.scrollTop = _getOptionScrollPosition(\n      activeOptionIndex + labelCount,\n      this._getItemHeight(),\n      this.panel.nativeElement.scrollTop,\n      SELECT_PANEL_MAX_HEIGHT\n    );\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options,\n        this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  get _ariaLabel(): string | null {\n    // If an ariaLabelledby value has been set, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors.\n    this.overlayDir.offsetX = offsetX;\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    // Disable offset if requested by user by returning 0 as value to offset\n    if (this._disableOptionCentering) {\n      return 0;\n    }\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height\n    // difference, multiplied by -1 to ensure that the overlay moves in the correct\n    // direction up the page.\n    return optionOffsetFromPanelTop * -1 - optionHeightAdjustment;\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  TemplateRef,\n} from '@angular/core';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperIntl} from './stepper-intl';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStepHeader implements OnDestroy {\n  private _intlSubscription: Subscription;\n\n  /** State of the given step. */\n  @Input() state: string;\n\n  /** Label of the given step. */\n  @Input() label: MatStepLabel | string;\n\n  /** Overrides for the header icons, passed in via the stepper. */\n  @Input() iconOverrides: {[key: string]: TemplateRef<any>};\n\n  /** Index of the given step. */\n  @Input()\n  get index(): number { return this._index; }\n  set index(value: number) { this._index = coerceNumberProperty(value); }\n  private _index: number;\n\n  /** Whether the given step is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) { this._selected = coerceBooleanProperty(value); }\n  private _selected: boolean;\n\n  /** Whether the given step label is active. */\n  @Input()\n  get active(): boolean { return this._active; }\n  set active(value: boolean) { this._active = coerceBooleanProperty(value); }\n  private _active: boolean;\n\n  /** Whether the given step is optional. */\n  @Input()\n  get optional(): boolean { return this._optional; }\n  set optional(value: boolean) { this._optional = coerceBooleanProperty(value); }\n  private _optional: boolean;\n\n  constructor(\n    public _intl: MatStepperIntl,\n    private _focusMonitor: FocusMonitor,\n    private _element: ElementRef,\n    changeDetectorRef: ChangeDetectorRef) {\n    _focusMonitor.monitor(_element.nativeElement, true);\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n\n  /** Returns string label of given step if it is a text label. */\n  _stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n\n  /** Returns MatStepLabel if the label of given step is a template label. */\n  _templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n\n  /** Returns the host HTML element. */\n  _getHostElement() {\n    return this._element.nativeElement;\n  }\n\n  focus() {\n    this._getHostElement().focus();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material steppers. */\nexport const matStepperAnimations: {\n  readonly horizontalStepTransition: AnimationTriggerMetadata;\n  readonly verticalStepTransition: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions the step along the X axis in a horizontal stepper. */\n  horizontalStepTransition: trigger('stepTransition', [\n    state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n    state('current', style({transform: 'none', visibility: 'visible'})),\n    state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n    transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n  ]),\n\n  /** Animation that transitions the step along the Y axis in a vertical stepper. */\n  verticalStepTransition: trigger('stepTransition', [\n    state('previous', style({height: '0px', visibility: 'hidden'})),\n    state('next', style({height: '0px', visibility: 'hidden'})),\n    state('current', style({height: '*', visibility: 'visible'})),\n    transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, TemplateRef} from '@angular/core';\n\n/**\n * Template to be used to override the icons inside the step header.\n */\n@Directive({\n  selector: 'ng-template[matStepperIcon]',\n})\nexport class MatStepperIcon {\n  /** Name of the icon to be overridden. */\n  @Input('matStepperIcon') name: 'edit' | 'done';\n\n  constructor(public templateRef: TemplateRef<any>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkStep, CdkStepper} from '@angular/cdk/stepper';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  AfterContentInit,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  forwardRef,\n  Inject,\n  QueryList,\n  SkipSelf,\n  ViewChildren,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n  Optional,\n  TemplateRef,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {matStepperAnimations} from './stepper-animations';\nimport {MatStepperIcon} from './stepper-icon';\n\n/** Workaround for https://github.com/angular/angular/issues/17849 */\nexport const _MatStep = CdkStep;\nexport const _MatStepper = CdkStepper;\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: ErrorStateMatcher, useExisting: MatStep}],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matStep',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\n  /** Content for step label given by `<ng-template matStepLabel>`. */\n  @ContentChild(MatStepLabel) stepLabel: MatStepLabel;\n\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher) {\n    super(stepper);\n  }\n\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    const customErrorState = !!(control && control.invalid && this.interacted);\n\n    return originalErrorState || customErrorState;\n  }\n}\n\n\n@Directive({\n  selector: '[matStepper]'\n})\nexport class MatStepper extends CdkStepper implements AfterContentInit {\n  /** The list of step headers of the steps in the stepper. */\n  @ViewChildren(MatStepHeader) _stepHeader: QueryList<MatStepHeader>;\n\n  /** Steps that the stepper holds. */\n  @ContentChildren(MatStep) _steps: QueryList<MatStep>;\n\n  /** Custom icon overrides passed in by the consumer. */\n  @ContentChildren(MatStepperIcon) _icons: QueryList<MatStepperIcon>;\n\n  /** Consumer-specified template-refs to be used to override the header icons. */\n  _iconOverrides: {[key: string]: TemplateRef<any>} = {};\n\n  ngAfterContentInit() {\n    const icons = this._icons.toArray();\n    const editOverride = icons.find(icon => icon.name === 'edit');\n    const doneOverride = icons.find(icon => icon.name === 'done');\n\n    if (editOverride) {\n      this._iconOverrides.edit = editOverride.templateRef;\n    }\n\n    if (doneOverride) {\n      this._iconOverrides.done = doneOverride.templateRef;\n    }\n\n    // Mark the component for change detection whenever the content children query changes\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-horizontal-stepper',\n  exportAs: 'matHorizontalStepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    'aria-orientation': 'horizontal',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.horizontalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatHorizontalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatHorizontalStepper extends MatStepper { }\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-vertical-stepper',\n  exportAs: 'matVerticalStepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'aria-orientation': 'vertical',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.verticalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatVerticalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatVerticalStepper extends MatStepper {\n  constructor(@Optional() dir: Directionality, changeDetectorRef: ChangeDetectorRef) {\n    super(dir, changeDetectorRef);\n    this._orientation = 'vertical';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepper, CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {MatStepper} from './stepper';\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperNext]',\n  host: {\n    '(click)': '_stepper.next()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperNext extends CdkStepperNext {}\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperPrevious]',\n  host: {\n    '(click)': '_stepper.previous()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperPrevious extends CdkStepperPrevious {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatCommonModule, MatRippleModule, ErrorStateMatcher} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nimport {MatStepperIntl} from './stepper-intl';\nimport {MatStepperIcon} from './stepper-icon';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule,\n    A11yModule,\n    MatRippleModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  declarations: [\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  providers: [MatStepperIntl, ErrorStateMatcher],\n})\nexport class MatStepperModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTable<T> extends CdkTable<T> { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends CdkCellDef { }\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends CdkHeaderCellDef { }\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [{provide: CdkColumnDef, useExisting: MatColumnDef}],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Directive, ViewEncapsulation} from '@angular/core';\nimport {\n  CDK_ROW_TEMPLATE,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef,\n} from '@angular/cdk/table';\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef'],\n})\nexport class MatHeaderRowDef extends CdkHeaderRowDef { }\n\n/**\n * Data row definition for the mat-table.\n * Captures the header row's template and other row properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends CdkRowDef<T> {\n}\n\n/** Header template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n})\nexport class MatHeaderRow extends CdkHeaderRow { }\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n})\nexport class MatRow extends CdkRow { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {MatCell, MatCellDef, MatColumnDef, MatHeaderCell, MatHeaderCellDef} from './cell';\nimport {MatHeaderRow, MatHeaderRowDef, MatRow, MatRowDef} from './row';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\n@NgModule({\n  imports: [CdkTableModule, CommonModule, MatCommonModule],\n  exports: [MatTable, MatCellDef, MatHeaderCellDef, MatColumnDef,\n    MatHeaderCell, MatCell, MatHeaderRow, MatRow,\n    MatHeaderRowDef, MatRowDef],\n  declarations: [MatTable, MatCellDef, MatHeaderCellDef, MatColumnDef,\n    MatHeaderCell, MatCell, MatHeaderRow, MatRow,\n    MatHeaderRowDef, MatRowDef],\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DataSource} from '@angular/cdk/table';\nimport {BehaviorSubject} from 'rxjs/BehaviorSubject';\nimport {MatPaginator} from '@angular/material/paginator';\nimport {MatSort} from '@angular/material/sort';\nimport {Subscription} from 'rxjs/Subscription';\nimport {combineLatest} from 'rxjs/operators/combineLatest';\nimport {map} from 'rxjs/operators/map';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {empty} from 'rxjs/observable/empty';\nimport {_isNumberValue} from '@angular/cdk/coercion';\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport class MatTableDataSource<T> extends DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private readonly _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private readonly _filter = new BehaviorSubject<string>('');\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription: Subscription;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() { return this._data.value; }\n  set data(data: T[]) { this._data.next(data); }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter(): string { return this._filter.value; }\n  set filter(filter: string) { this._filter.next(filter); }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort(): MatSort | null { return this._sort; }\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): MatPaginator | null { return this._paginator; }\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting through\n   * the default sortData function.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value: any = data[sortHeaderId];\n    return _isNumberValue(value) ? Number(value) : value;\n  }\n\n  /**\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n   * By default, the function retrieves the active sort and its direction and compares data\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n   * of data ordering.\n   * @param data The array of data that should be sorted.\n   * @param sort The connected MatSort that holds the current sort state.\n   */\n  sortData: ((data: T[], sort: MatSort) => T[]) = (data: T[], sort: MatSort): T[] => {\n    const active = sort.active;\n    const direction = sort.direction;\n    if (!active || direction == '') { return data; }\n\n    return data.sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n      // one value exists while the other doesn't. In this case, existing value should come first.\n      // This avoids inconsistent results when comparing values to undefined/null.\n      // If neither value exists, return 0 (equal).\n      let comparatorResult = 0;\n      if (valueA && valueB) {\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      } else if (valueA) {\n        comparatorResult = 1;\n      } else if (valueB) {\n        comparatorResult = -1;\n      }\n\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const accumulator = (currentTerm, key) => currentTerm + data[key];\n    const dataStr = Object.keys(data).reduce(accumulator, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // Otherwise, use an empty observable stream to take their place.\n    const sortChange = this._sort ? this._sort.sortChange : empty();\n    const pageChange = this._paginator ? this._paginator.page : empty();\n\n    if (this._renderChangesSubscription) {\n      this._renderChangesSubscription.unsubscribe();\n    }\n\n    // Watch for base data or filter changes to provide a filtered set of data.\n    this._renderChangesSubscription = this._data.pipe(\n      combineLatest(this._filter),\n      map(([data]) => this._filterData(data)),\n      // Watch for filtered data or sort changes to provide an ordered set of data.\n      combineLatest(sortChange.pipe(startWith(null!))),\n      map(([data]) => this._orderData(data)),\n      // Watch for ordered data or page changes to provide a paged set of data.\n      combineLatest(pageChange.pipe(startWith(null!))),\n      map(([data]) => this._pageData(data))\n    )\n    // Watched for paged data changes and send the result to the table to render.\n    .subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overridden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) { return data; }\n\n    return this.sortData(data.slice(), this.sort);\n  }\n\n  /**\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice().splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      if (!this.paginator) { return; }\n\n      this.paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (this.paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(this.paginator.length / this.paginator.pageSize) - 1 || 0;\n        this.paginator.pageIndex = Math.min(this.paginator.pageIndex, lastPageIndex);\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, NgZone} from '@angular/core';\n\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone) {}\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n  private _setStyles(element: HTMLElement) {\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\n\n    inkBar.style.left = element ? (element.offsetLeft || 0) + 'px' : '0';\n    inkBar.style.width = element ? (element.offsetWidth || 0) + 'px' : '0';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef, ViewContainerRef} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n})\nexport class MatTabLabel extends CdkPortal {\n  constructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\n    super(templateRef, viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/** Decorates the `ng-template` tags and reads out the template from it. */\n@Directive({selector: '[matTabContent]'})\nexport class MatTabContent {\n  constructor(public template: TemplateRef<any>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs/Subject';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabContent} from './tab-content';\n\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nexport class MatTabBase {}\nexport const _MatTabMixinBase = mixinDisabled(MatTabBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matTab',\n})\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n  @ContentChild(MatTabLabel) templateLabel: MatTabLabel;\n\n  /**\n   * Template provided in the tab content that will be used if present, used to enable lazy-loading\n   */\n  @ContentChild(MatTabContent, {read: TemplateRef}) _explicitContent: TemplateRef<any>;\n\n  /** Template inside the MatTab view that contains an `<ng-content>`. */\n  @ViewChild(TemplateRef) _implicitContent: TemplateRef<any>;\n\n  /** The plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** The portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the label changes. */\n  readonly _labelChange = new Subject<void>();\n\n  /** Emits whenever the disable changes */\n  readonly _disableChange = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel')) {\n      this._labelChange.next();\n    }\n\n    if (changes.hasOwnProperty('disabled')) {\n      this._disableChange.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._disableChange.complete();\n    this._labelChange.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(\n        this._explicitContent || this._implicitContent, this._viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material tabs. */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n    state('left', style({transform: 'translate3d(-100%, 0, 0)'})),\n    state('right', style({transform: 'translate3d(100%, 0, 0)'})),\n    transition('* => left, * => right, left => center, right => center',\n        animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ])\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n  ViewChild,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet, PortalHostDirective} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {Subscription} from 'rxjs/Subscription';\nimport {matTabsAnimations} from './tabs-animations';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]'\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** A subscription to events for when the tab body begins centering. */\n  private _centeringSub: Subscription;\n  /** A subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub: Subscription;\n\n  constructor(\n    _componentFactoryResolver: ComponentFactoryResolver,\n    _viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\n      super(_componentFactoryResolver, _viewContainerRef);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  ngOnInit(): void {\n    if (this._host._isCenterPosition(this._host._position)) {\n      this.attach(this._host._content);\n    }\n    this._centeringSub = this._host._beforeCentering.subscribe((isCentering: boolean) => {\n      if (isCentering && !this.hasAttached()) {\n        this.attach(this._host._content);\n      }\n    });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  /** Clean up centering subscription. */\n  ngOnDestroy(): void {\n    if (this._centeringSub && !this._centeringSub.closed) {\n      this._centeringSub.unsubscribe();\n    }\n\n    if (this._leavingSub && !this._leavingSub.closed) {\n      this._leavingSub.unsubscribe();\n    }\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  },\n})\nexport class MatTabBody implements OnInit {\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() readonly _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() readonly _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n   /** The portal host inside of this container into which the tab body content will be loaded. */\n  @ViewChild(PortalHostDirective) _portalHost: PortalHostDirective;\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal;\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  @Input()\n  set position(position: number) {\n    if (position < 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'left' : 'right';\n    } else if (position > 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n  _position: MatTabBodyPositionState;\n\n  /** The origin position from which this tab should appear when it is centered into view. */\n  @Input()\n  set origin(origin: number) {\n    if (origin == null) { return; }\n\n    const dir = this._getLayoutDirection();\n    if ((dir == 'ltr' && origin <= 0) || (dir == 'rtl' && origin > 0)) {\n      this._origin = 'left';\n    } else {\n      this._origin = 'right';\n    }\n  }\n  _origin: MatTabBodyOriginState;\n\n  constructor(private _elementRef: ElementRef,\n              @Optional() private _dir: Directionality) { }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this._origin) {\n      this._position = this._origin == 'left' ? 'left-origin-center' : 'right-origin-center';\n    }\n  }\n\n  _onTranslateTabStarted(e: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(e.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  _onTranslateTabComplete(e: AnimationEvent): void {\n    // If the transition to the center is complete, emit an event.\n    if (this._isCenterPosition(e.toState) && this._isCenterPosition(this._position)) {\n      this._onCentered.emit();\n    }\n\n    if (this._isCenterPosition(e.fromState) && !this._isCenterPosition(this._position)) {\n      this._afterLeavingCenter.emit();\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  HammerInput,\n  HasTabIndex,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {Subscription} from 'rxjs/Subscription';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nexport class MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSliderMixinBase =\n  mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(click)': '_onClick($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert(): boolean { return this._invert; }\n  set invert(value: boolean) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundLabelTo = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value: boolean) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /**\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Input('thumb-label')\n  get _thumbLabelDeprecated(): boolean { return this._thumbLabel; }\n  set _thumbLabelDeprecated(value) { this._thumbLabel = value; }\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /**\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Input('tick-interval')\n  get _tickIntervalDeprecated() { return this.tickInterval; }\n  set _tickIntervalDeprecated(v) { this.tickInterval = v; }\n\n  /** Value of the slider. */\n  @Input()\n  get value(): number | null {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      this._value = coerceNumberProperty(v);\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /**\n   * Function that will be used to format the value before it is displayed\n   * in the thumb label. Can be used to format very large number in order\n   * for them to fit into the slider thumb.\n   */\n  @Input() displayWith: (value: number | null) => string | number;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() readonly change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() readonly input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    if (this.displayWith) {\n      return this.displayWith(this.value);\n    }\n\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundLabelTo && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundLabelTo);\n    }\n\n    return this.value || 0;\n  }\n\n  /** set focus to the host element */\n  focus() {\n    this._focusHostElement();\n  }\n\n  /** blur the host element */\n  blur() {\n    this._blurHostElement();\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    let sign = this._invertMouseCoords ? '-' : '';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${1 - this.percent})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    let sign = this._invertMouseCoords ? '' : '-';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${this.percent})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._direction == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._direction == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._direction == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundLabelTo: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper') private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  private get _invertMouseCoords() {\n    return (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private get _direction() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef.nativeElement, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onClick(event: MouseEvent) {\n    if (this.disabled) {\n      return;\n    }\n\n    let oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    // Emit a change and input event if the value changed.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value && !this.disabled) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled) { return; }\n\n    let oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._direction == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._direction == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n    if (this._invertMouseCoords) {\n      percent = 1 - percent;\n    }\n    let exactValue = this._calculateValue(percent);\n\n    // This calculation finds the closest step by finding the closest whole number divisible by the\n    // step relative to the min.\n    let closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n    // The value needs to snap to the min and max.\n    this.value = this._clamp(closestValue, this.min, this.max);\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Blurs the native element. */\n  private _blurHostElement() {\n    this._elementRef.nativeElement.blur();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to eb triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {BidiModule} from '@angular/cdk/bidi';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule, BidiModule, A11yModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n  /** Whether the snack bar was dismissed using the action button. */\n  dismissedByAction: boolean;\n}\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has been dismissed. */\n  private readonly _afterDismissed = new Subject<MatSnackBarDismiss>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private readonly _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  /** Whether the snack bar was dismissed using the action button. */\n  private _dismissedByAction = false;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  dismissWithAction(): void {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * @deletion-target 7.0.0\n   */\n  closeWithAction(): void {\n    this.dismissWithAction();\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<MatSnackBarDismiss> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /** Message to be announced by the MatAriaLiveAnnouncer */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** @docs-private */\nexport const SHOW_ANIMATION =\n  `${AnimationDurations.ENTERING} ${AnimationCurves.DECELERATION_CURVE}`;\n\n/** @docs-private */\nexport const HIDE_ANIMATION =\n  `${AnimationDurations.EXITING} ${AnimationCurves.ACCELERATION_CURVE}`;\n\n/** Animations used by the Material snack bar. */\nexport const matSnackBarAnimations: {\n  readonly contentFade: AnimationTriggerMetadata;\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  contentFade: trigger('contentFade', [\n    transition(':enter', [\n      style({opacity: '0'}),\n      animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.STANDARD_CURVE}`)\n    ])\n  ]),\n\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('visible-top, visible-bottom', style({transform: 'translateY(0%)'})),\n    transition('visible-top => hidden-top, visible-bottom => hidden-bottom',\n      animate(HIDE_ANIMATION)),\n    transition('void => visible-top, void => visible-bottom', animate(SHOW_ANIMATION)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\nimport {matSnackBarAnimations} from './snack-bar-animations';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matSnackBarAnimations.contentFade],\n  host: {\n    '[@contentFade]': '',\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: { message: string, action: string };\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.dismissWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  NgZone,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal,\n} from '@angular/cdk/portal';\nimport {take} from 'rxjs/operators/take';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {MatSnackBarConfig} from './snack-bar-config';\nimport {matSnackBarAnimations} from './snack-bar-animations';\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    'role': 'alert',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  readonly _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  readonly _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  /** The snack bar configuration. */\n  snackBarConfig: MatSnackBarConfig;\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState.startsWith('hidden')) {\n      this._completeExit();\n    }\n\n    if (toState.startsWith('visible')) {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = `visible-${this.snackBarConfig.verticalPosition}`;\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    this._animationState = `hidden-${this.snackBarConfig.verticalPosition}`;\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n  private _applySnackBarClasses() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClasses = this.snackBarConfig.panelClass;\n\n    if (panelClasses) {\n      if (Array.isArray(panelClasses)) {\n        // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n        panelClasses.forEach(cssClass => element.classList.add(cssClass));\n      } else {\n        element.classList.add(panelClasses);\n      }\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n  }\n\n  /** Asserts that no content is already attached to the container. */\n  private _assertNotAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, TemplatePortal, ComponentType, PortalInjector} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  EmbeddedViewRef,\n  Inject,\n  Injectable,\n  Injector,\n  InjectionToken,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {take} from 'rxjs/operators/take';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/** Injection token that can be used to specify default snack bar. */\nexport const MAT_SNACK_BAR_DEFAULT_OPTIONS =\n    new InjectionToken<MatSnackBarConfig>('mat-snack-bar-default-options');\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable()\nexport class MatSnackBar {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar,\n      @Inject(MAT_SNACK_BAR_DEFAULT_OPTIONS) private _defaultConfig: MatSnackBarConfig) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig):\n    MatSnackBarRef<T> {\n    return this._attach(component, config) as MatSnackBarRef<T>;\n  }\n\n  /**\n   * Creates and dispatches a snack bar with a custom template for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param template Template to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromTemplate(template: TemplateRef<any>, config?: MatSnackBarConfig):\n    MatSnackBarRef<EmbeddedViewRef<any>> {\n    return this._attach(template, config);\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = {...this._defaultConfig, ...config};\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n    _config.announcementMessage = message;\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n    const containerPortal = new ComponentPortal(MatSnackBarContainer, config.viewContainerRef);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component or a template as the content of the snack bar container.\n   */\n  private _attach<T>(content: ComponentType<T> | TemplateRef<T>, userConfig?: MatSnackBarConfig):\n    MatSnackBarRef<T | EmbeddedViewRef<any>> {\n\n    const config = {...this._defaultConfig, ...userConfig};\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T | EmbeddedViewRef<any>>(container, overlayRef);\n\n    if (content instanceof TemplateRef) {\n      const portal = new TemplatePortal(content, null!, {\n        $implicit: config.data,\n        snackBarRef\n      } as any);\n\n      snackBarRef.instance = container.attachTemplatePortal(portal);\n    } else {\n      const injector = this._createInjector(config, snackBarRef);\n      const portal = new ComponentPortal(content, undefined, injector);\n      const contentRef = container.attachComponentPortal<T>(portal);\n\n      // We can't pass this via the injector, because the injector is created earlier.\n      snackBarRef.instance = contentRef.instance;\n    }\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\n      takeUntil(overlayRef.detachments().pipe(take(1)))\n    ).subscribe(state => {\n      if (state.matches) {\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n      } else {\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n      }\n    });\n\n    this._animateSnackBar(snackBarRef, config);\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /** Animates the old snack bar out and the new one in. */\n  private _animateSnackBar(snackBarRef: MatSnackBarRef<any>, config: MatSnackBarConfig) {\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (config.duration && config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration!));\n    }\n\n    if (config.announcementMessage) {\n      this._live.announce(config.announcementMessage, config.politeness);\n    }\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap();\n\n    injectionTokens.set(MatSnackBarRef, snackBarRef);\n    injectionTokens.set(MAT_SNACK_BAR_DATA, config.data);\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {LIVE_ANNOUNCER_PROVIDER} from '@angular/cdk/a11y';\nimport {LayoutModule} from '@angular/cdk/layout';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatSnackBar, MAT_SNACK_BAR_DEFAULT_OPTIONS} from './snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarConfig} from './snack-bar-config';\nimport {SimpleSnackBar} from './simple-snack-bar';\n\n\n/** @docs-private */\nexport function MAT_SNACK_BAR_DEFAULT_OPTIONS_PROVIDER_FACTORY() {\n  return new MatSnackBarConfig();\n}\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatCommonModule,\n    LayoutModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n  providers: [\n    MatSnackBar,\n    LIVE_ANNOUNCER_PROVIDER,\n    {\n      provide: MAT_SNACK_BAR_DEFAULT_OPTIONS,\n      useFactory: MAT_SNACK_BAR_DEFAULT_OPTIONS_PROVIDER_FACTORY\n    },\n  ]\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  Output,\n  OnChanges,\n  OnDestroy,\n} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortInvalidDirectionError,\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError\n} from './sort-errors';\nimport {Subject} from 'rxjs/Subject';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nexport class MatSortBase {}\nexport const _MatSortMixinBase = mixinDisabled(MatSortBase);\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase implements CanDisable, OnChanges, OnDestroy {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  get direction(): SortDirection { return this._direction; }\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable): void {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable): void {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable): void {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.emit({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\nimport {SortDirection} from './sort-direction';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable()\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n\n  /** A label to describe the current sort (visible only to screenreaders). */\n  sortDescriptionLabel = (id: string, direction: SortDirection) => {\n    return `Sorted by ${id} ${direction == 'asc' ? 'ascending' : 'descending'}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata, query, animateChild,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/** Animations used by MatSort. */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly arrowOpacity: AnimationTriggerMetadata;\n  readonly arrowPosition: AnimationTriggerMetadata;\n  readonly allowChildren: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('active-asc, asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('active-desc, desc', style({transform: 'translateY(10px)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('active-asc, asc', style({transform: 'rotate(-45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('active-asc, asc', style({transform: 'rotate(45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(-45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that controls the arrow opacity. */\n  arrowOpacity: trigger('arrowOpacity', [\n    state('desc-to-active, asc-to-active, active', style({opacity: 1})),\n    state('desc-to-hint, asc-to-hint, hint', style({opacity: .54})),\n    state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc',\n        style({opacity: 0})),\n    // Transition between all states except for immediate transitions\n    transition('* => asc, * => desc, * => active, * => hint', animate('0ms')),\n    transition('* <=> *', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /**\n   * Animation for the translation of the arrow as a whole. States are separated into two\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n   * peek, and active. The other states define a specific animation (source-to-destination)\n   * and are determined as a function of their prev user-perceived state and what the next state\n   * should be.\n   */\n  arrowPosition: trigger('arrowPosition', [\n    // Hidden Above => Hint Center\n    transition('* => desc-to-hint, * => desc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(-25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Below\n    transition('* => hint-to-desc, * => active-to-desc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(25%)'})\n        ]))),\n    // Hidden Below => Hint Center\n    transition('* => asc-to-hint, * => asc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Above\n    transition('* => hint-to-asc, * => active-to-asc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(-25%)'})\n        ]))),\n    state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active',\n        style({transform: 'translateY(0)'})),\n    state('hint-to-desc, active-to-desc, desc',\n        style({transform: 'translateY(-25%)'})),\n    state('hint-to-asc, active-to-asc, asc',\n        style({transform: 'translateY(25%)'})),\n  ]),\n\n  /** Necessary trigger that calls animate on children animations. */\n  allowChildren: trigger('allowChildren', [\n    transition('* <=> *', [\n      query('@*', animateChild(), {optional: true})\n    ])\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkColumnDef} from '@angular/cdk/table';\nimport {Subscription} from 'rxjs/Subscription';\nimport {merge} from 'rxjs/observable/merge';\nimport {MatSort, MatSortable} from './sort';\nimport {SortDirection} from './sort-direction';\nimport {MatSortHeaderIntl} from './sort-header-intl';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {matSortAnimations} from './sort-animations';\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nexport class MatSortHeaderBase {}\nexport const _MatSortHeaderMixinBase = mixinDisabled(MatSortHeaderBase);\n\n/**\n * Valid positions for the arrow to be in for its opacity and translation. If the state is a\n * sort direction, the position of the arrow will be above/below and opacity 0. If the state is\n * hint, the arrow will be in the center with a slight opacity. Active state means the arrow will\n * be fully opaque in the center.\n *\n * @docs-private\n */\nexport type ArrowViewState = SortDirection | 'hint' | 'active';\n\n/**\n * States describing the arrow's animated position (animating fromState to toState).\n * If the fromState is not defined, there will be no animated transition to the toState.\n * @docs-private\n */\nexport interface ArrowViewStateTransition {\n  fromState?: ArrowViewState;\n  toState: ArrowViewState;\n}\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_handleClick()',\n    '(mouseenter)': '_setIndicatorHintVisible(true)',\n    '(longpress)': '_setIndicatorHintVisible(true)',\n    '(mouseleave)': '_setIndicatorHintVisible(false)',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.arrowOpacity,\n    matSortAnimations.arrowPosition,\n    matSortAnimations.allowChildren,\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase implements MatSortable, CanDisable {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n   * provide an affordance that the header is sortable by showing on focus and hover.\n   */\n  _showIndicatorHint: boolean = false;\n\n  /**\n   * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n   * position through the animation. If animations are currently disabled, the fromState is removed\n   * so that there is no animation displayed.\n   */\n  _viewState: ArrowViewStateTransition;\n\n  /** The direction the arrow should be facing according to the current state. */\n  _arrowDirection: SortDirection = '';\n\n  /**\n   * Whether the view state animation should show the transition between the `from` and `to` states.\n   */\n  _disableViewStateAnimation = false;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input() start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Optional() public _cdkColumnDef: CdkColumnDef) {\n\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n        .subscribe(() => {\n          if (this._isSorted()) {\n            this._updateArrowDirection();\n          }\n\n          // If this header was recently active and now no longer sorted, animate away the arrow.\n          if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = false;\n            this._setAnimationTransitionState({fromState: 'active', toState: this._arrowDirection});\n          }\n\n          changeDetectorRef.markForCheck();\n        });\n  }\n\n  ngOnInit() {\n    if (!this.id && this._cdkColumnDef) {\n      this.id = this._cdkColumnDef.name;\n    }\n\n    // Initialize the direction of the arrow and set the view state to be immediately that state.\n    this._updateArrowDirection();\n    this._setAnimationTransitionState(\n        {toState: this._isSorted() ? 'active' : this._arrowDirection});\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /**\n   * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n   * user showing what the active sort will become. If set to false, the arrow will fade away.\n   */\n  _setIndicatorHintVisible(visible: boolean) {\n    // No-op if the sort header is disabled - should not make the hint visible.\n    if (this._isDisabled() && visible) { return; }\n\n    this._showIndicatorHint = visible;\n\n    if (!this._isSorted()) {\n      this._updateArrowDirection();\n      if (this._showIndicatorHint) {\n        this._setAnimationTransitionState({fromState: this._arrowDirection, toState: 'hint'});\n      } else {\n        this._setAnimationTransitionState({fromState: 'hint', toState: this._arrowDirection});\n      }\n    }\n  }\n\n  /**\n   * Sets the animation transition view state for the arrow's position and opacity. If the\n   * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n   * no animation appears.\n   */\n  _setAnimationTransitionState(viewState: ArrowViewStateTransition) {\n    this._viewState = viewState;\n\n    // If the animation for arrow position state (opacity/translation) should be disabled,\n    // remove the fromState so that it jumps right to the toState.\n    if (this._disableViewStateAnimation) {\n      this._viewState = {toState: viewState.toState};\n    }\n  }\n\n  /** Triggers the sort on this sort header and removes the indicator hint. */\n  _handleClick() {\n    if (this._isDisabled()) { return; }\n\n    this._sort.sort(this);\n\n    // Do not show the animation if the header was already shown in the right position.\n    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n      this._disableViewStateAnimation = true;\n    }\n\n    // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n    // the direction it is facing.\n    const viewState: ArrowViewStateTransition = this._isSorted() ?\n        {fromState: this._arrowDirection, toState: 'active'} :\n        {fromState: 'active', toState: this._arrowDirection};\n    this._setAnimationTransitionState(viewState);\n\n    this._showIndicatorHint = false;\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  /** Returns the animation state for the arrow direction (indicator and pointers). */\n  _getArrowDirectionState() {\n    return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n  }\n\n  /** Returns the arrow position state (opacity, translation). */\n  _getArrowViewState() {\n    const fromState = this._viewState.fromState;\n    return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n  }\n\n  /**\n   * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n   * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n   * active sorted direction. The reason this is updated through a function is because the direction\n   * should only be changed at specific times - when deactivated but the hint is displayed and when\n   * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n   * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n   * preserving its direction, even though the next sort direction is actually different and should\n   * only be changed once the arrow displays again (hint or activation).\n   */\n  _updateArrowDirection() {\n    this._arrowDirection = this._isSorted() ?\n        this._sort.direction :\n        (this.start || this._sort.start);\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n\n@Directive({\n  selector: '[matStepLabel]',\n})\nexport class MatStepLabel extends CdkStepLabel {\n  constructor(template: TemplateRef<any>) {\n    super(template);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** Stepper data that is required for internationalization. */\n@Injectable()\nexport class MatStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** Label that is rendered below optional steps. */\n  optionalLabel: string = 'Optional';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusTrap, FocusTrapFactory, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n  InjectionToken,\n  ViewChild,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {merge} from 'rxjs/observable/merge';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {debounceTime} from 'rxjs/operators/debounceTime';\nimport {map} from 'rxjs/operators/map';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {Subject} from 'rxjs/Subject';\nimport {Observable} from 'rxjs/Observable';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {CdkScrollable} from '@angular/cdk/scrolling';\n\n\n/** Throws an exception when two MatDrawer are matching the same position. */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/**\n * Drawer toggle promise result.\n * @deprecated\n * @deletion-target 6.0.0\n */\nexport class MatDrawerToggleResult {\n  constructor(\n    /** Whether the drawer is opened or closed. */\n    public type: 'open' | 'close',\n    /** Whether the drawer animation is finished. */\n    public animationFinished: boolean) {}\n}\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE');\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_margins.left',\n    '[style.margin-right.px]': '_margins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContent implements AfterContentInit {\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _margins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) private _container: MatDrawerContainer) {\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMargins.subscribe(margins => {\n      this._margins = margins;\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value: 'start' | 'end') {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onAlignChanged.emit();\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /**\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Input()\n  get align(): 'start' | 'end' { return this.position; }\n  set align(value: 'start' | 'end') { this.position = value; }\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value: 'over' | 'push' | 'side') {\n    this._mode = value;\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new EventEmitter<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() readonly openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /**\n   * Event emitted when the drawer is fully opened.\n   * @deprecated Use `opened` instead.\n   * @deletion-target 6.0.0\n   */\n  @Output('open') readonly onOpen: Observable<void> = this._openedStream;\n\n  /**\n   * Event emitted when the drawer is fully closed.\n   * @deprecated Use `closed` instead.\n   * @deletion-target 6.0.0\n   */\n  @Output('close') readonly onClose: Observable<void> = this._closedStream;\n\n  /** Event emitted when the drawer's position changes. */\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Output('align-changed') onAlignChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  readonly _modeChanged = new Subject();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              private _ngZone: NgZone,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n\n    /**\n     * Listen to `keydown` events outside the zone so that change detection is not run every\n     * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n     * and we don't have close disabled.\n     */\n    this._ngZone.runOutsideAngular(() => {\n        fromEvent(this._elementRef.nativeElement, 'keydown').pipe(\n            filter((event: KeyboardEvent) => event.keyCode === ESCAPE && !this.disableClose)\n        ).subscribe((event) => this._ngZone.run(() => {\n            this.close();\n            event.stopPropagation();\n        }));\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { this.toggle(coerceBooleanProperty(value)); }\n  private _opened: boolean = false;\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<void> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<void> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<void> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n\n    // TODO(crisbeto): This promise is here for backwards-compatibility.\n    // It should be removed next time we do breaking changes in the drawer.\n    // @deletion-target 6.0.0\n    return new Promise<any>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => {\n        resolve(new MatDrawerToggleResult(open ? 'open' : 'close', true));\n      });\n    });\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStarted.emit(event);\n  }\n\n  _onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n        (toState === 'void' && fromState.indexOf('open') === 0)) {\n      this.openedChange.emit(this._opened);\n    }\n  }\n\n  get _width(): number {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n}\n\n\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContainer implements AfterContentInit, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent) _content: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /**\n   * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n   * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n   * mode as well.\n   */\n  @Input()\n  get hasBackdrop() {\n    if (this._backdropOverride == null) {\n      return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n    }\n\n    return this._backdropOverride;\n  }\n  set hasBackdrop(value: any) {\n    this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n  }\n  _backdropOverride: boolean | null;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() readonly backdropClick: EventEmitter<void> = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private readonly _doCheckSubject = new Subject<void>();\n\n  readonly _contentMargins = new Subject<{left: number|null, right: number|null}>();\n\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n  @ViewChild(CdkScrollable) scrollable: CdkScrollable;\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this._updateContentMargins();\n      });\n    }\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this._updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this._updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      takeUntil(this._drawers.changes),\n      filter((event: AnimationEvent) => event.fromState !== event.toState)\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this._updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this._updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add('mat-drawer-opened');\n    } else {\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (!this._dir || this._dir.value == 'ltr') {\n      this._left = this._start;\n      this._right = this._end;\n    } else {\n      this._left = this._end;\n      this._right = this._start;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer))\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||\n           (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end));\n  }\n\n  private _canHaveBackdrop(drawer: MatDrawer): boolean {\n    return drawer.mode !== 'side' || !!this._backdropOverride;\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): drawer is MatDrawer {\n    return drawer != null && drawer.opened;\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  private _updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        let width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        let width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    // Pull back into the NgZone since in some cases we could be outside.\n    this._ngZone.run(() => this._contentMargins.next({left, right}));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  forwardRef,\n  Inject,\n  Input,\n  ViewEncapsulation,\n  QueryList,\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_margins.left',\n    '[style.margin-right.px]': '_margins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer) {\n    super(changeDetectorRef, container);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers: QueryList<MatSidenav>;\n  @ContentChild(MatSidenavContent) _content: MatSidenavContent;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {ScrollDispatchModule} from '@angular/cdk/scrolling';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\nimport {\n  MatDrawer,\n  MatDrawerContainer,\n  MatDrawerContent,\n  MAT_DRAWER_DEFAULT_AUTOSIZE,\n} from './drawer';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    A11yModule,\n    OverlayModule,\n    ScrollDispatchModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  providers: [\n    {provide: MAT_DRAWER_DEFAULT_AUTOSIZE, useValue: false}\n  ]\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HammerInput,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nexport class MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSlideToggleMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n    ControlValueAccessor, CanDisable, CanColor, HasTabIndex, CanDisableRipple {\n\n  private onChange = (_: any) => {};\n  private onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _slideRenderer: SlideToggleRenderer;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Reference to the focus state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the slide-toggle element is checked or not */\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\n      new EventEmitter<MatSlideToggleChange>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** Reference to the ripple directive on the thumb container. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string) {\n\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._slideRenderer = new SlideToggleRenderer(this._elementRef, this._platform);\n\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back.\n    if (this._slideRenderer.dragging) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      // For keyboard focus show a persistent ripple as focus indicator.\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      this.onTouched();\n\n      // Fade out and clear the focus ripple if one is currently present.\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this.onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  _onDragStart() {\n    if (!this.disabled) {\n      this._slideRenderer.startThumbDrag(this.checked);\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._slideRenderer.dragging) {\n      this._slideRenderer.updateThumbPosition(event.deltaX);\n    }\n  }\n\n  _onDragEnd() {\n    if (this._slideRenderer.dragging) {\n      const newCheckedValue = this._slideRenderer.dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.checked = newCheckedValue;\n        this._emitChangeEvent();\n      }\n\n      // The drag should be stopped outside of the current event handler, because otherwise the\n      // click event will be fired before and will revert the drag change.\n      setTimeout(() => this._slideRenderer.stopThumbDrag());\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the slide-toggle changes.\n    // Since the slide-toggle uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n\n/**\n * Renderer for the Slide Toggle component, which separates DOM modification in its own class\n */\nclass SlideToggleRenderer {\n\n  /** Reference to the thumb HTMLElement. */\n  private _thumbEl: HTMLElement;\n\n  /** Reference to the thumb bar HTMLElement. */\n  private _thumbBarEl: HTMLElement;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  dragPercentage: number;\n\n  /** Whether the thumb is currently being dragged. */\n  dragging: boolean = false;\n\n  constructor(elementRef: ElementRef, platform: Platform) {\n    // We only need to interact with these elements when we're on the browser, so only grab\n    // the reference in that case.\n    if (platform.isBrowser) {\n      this._thumbEl = elementRef.nativeElement.querySelector('.mat-slide-toggle-thumb-container');\n      this._thumbBarEl = elementRef.nativeElement.querySelector('.mat-slide-toggle-bar');\n    }\n  }\n\n  /** Initializes the drag of the slide-toggle. */\n  startThumbDrag(checked: boolean): void {\n    if (this.dragging) { return; }\n\n    this._thumbBarWidth = this._thumbBarEl.clientWidth - this._thumbEl.clientWidth;\n    this._thumbEl.classList.add('mat-dragging');\n\n    this._previousChecked = checked;\n    this.dragging = true;\n  }\n\n  /** Resets the current drag and returns the new checked value. */\n  stopThumbDrag(): boolean {\n    if (!this.dragging) { return false; }\n\n    this.dragging = false;\n    this._thumbEl.classList.remove('mat-dragging');\n\n    // Reset the transform because the component will take care of the thumb position after drag.\n    this._thumbEl.style.transform = '';\n\n    return this.dragPercentage > 50;\n  }\n\n  /** Updates the thumb containers position from the specified distance. */\n  updateThumbPosition(distance: number): void {\n    this.dragPercentage = this._getDragPercentage(distance);\n    // Calculate the moved distance based on the thumb bar width.\n    const dragX = (this.dragPercentage / 100) * this._thumbBarWidth;\n    this._thumbEl.style.transform = `translate3d(${dragX}px, 0, 0)`;\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {\n  GestureConfig,\n  MatCommonModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatSlideToggle} from './slide-toggle';\n\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, PlatformModule, ObserversModule, A11yModule],\n  exports: [MatSlideToggle, MatCommonModule],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  Input,\n  ElementRef,\n  SimpleChanges,\n  OnChanges,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nexport class MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatProgressSpinnerMixinBase = mixinColor(MatProgressSpinnerBase, 'primary');\n\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/material2/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * `<mat-progress-spinner>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[style.width.px]': '_elementSize',\n    '[style.height.px]': '_elementSize',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor,\n  OnChanges {\n\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /** The width and height of the host element. Will grow with stroke width. */\n  _elementSize = BASE_SIZE;\n\n  /** Tracks diameters of existing instances to de-dupe generated styles (default d = 100) */\n  private static diameters = new Set<number>([BASE_SIZE]);\n\n  /**\n   * Used for storing all of the generated keyframe animations.\n   * @dynamic\n   */\n  private static styleTag: HTMLStyleElement|null = null;\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number { return this._diameter; }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    if (!this._fallbackAnimation && !MatProgressSpinner.diameters.has(this._diameter)) {\n      this._attachStyleNode();\n    }\n    this._updateElementSize();\n  }\n  private _diameter = BASE_SIZE;\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n\n    super(_elementRef);\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    _elementRef.nativeElement.classList.add(animationClass);\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.strokeWidth || changes.diameter) {\n      this._updateElementSize();\n    }\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this._elementSize * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    let styleTag = MatProgressSpinner.styleTag;\n\n    if (!styleTag) {\n      styleTag = this._document.createElement('style');\n      this._document.head.appendChild(styleTag);\n      MatProgressSpinner.styleTag = styleTag;\n    }\n\n    if (styleTag && styleTag.sheet) {\n      (styleTag.sheet as CSSStyleSheet).insertRule(this._getAnimationText(), 0);\n    }\n\n    MatProgressSpinner.diameters.add(this.diameter);\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n\n  /** Updates the spinner element size based on its diameter. */\n  private _updateElementSize() {\n    this._elementSize = this._diameter + Math.max(this.strokeWidth - BASE_STROKE_WIDTH, 0);\n  }\n}\n\n\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[style.width.px]': '_elementSize',\n    '[style.height.px]': '_elementSize',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any) {\n    super(elementRef, platform, document);\n    this.mode = 'indeterminate';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  constructor(\n    /** The MatRadioButton that emits the change event. */\n    public source: MatRadioButton,\n    /** The value of the MatRadioButton. */\n    public value: any) {}\n}\n\n\n// Boilerplate for applying mixins to MatRadioGroup.\n/** @docs-private */\nexport class MatRadioGroupBase { }\nexport const _MatRadioGroupMixinBase = mixinDisabled(MatRadioGroupBase);\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n  inputs: ['disabled'],\n})\nexport class MatRadioGroup extends _MatRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n  /**\n   * Selected value for group. Should equal the value of the selected radio button if there *is*\n   * a corresponding radio button with a matching value. If there is *not* such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n  set labelPosition(v) {\n    this._labelPosition = v === 'before' ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /** Value of the radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value != newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /** Whether the radio button is selected. */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected != null && this._selected.value == this._value;\n\n    if (this._radios != null && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value == radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new MatRadioChange(this._selected!, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nexport class MatRadioButtonBase {\n  // Since the disabled property is manually defined for the MatRadioButton and isn't set up in\n  // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n  // defined to properly work.\n  disabled: boolean;\n\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nexport const _MatRadioButtonMixinBase =\n    mixinColor(mixinDisableRipple(mixinTabIndex(MatRadioButtonBase)), 'accent');\n\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['color', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, CanDisableRipple, HasTabIndex {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n\n    if (this._checked != newCheckedState) {\n      this._checked = newCheckedState;\n\n      if (newCheckedState && this.radioGroup && this.radioGroup.value != this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value == this.value) {\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value != value) {\n      this._value = value;\n      if (this.radioGroup != null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value == value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup != null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio. */\n  private _value: any = null;\n\n  /** The child ripple instance. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  /** Reference to the current focus ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Unregister function for _radioDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id != this.id && name == this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    this.change.emit(new MatRadioChange(this, this._value));\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value != this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      if (this.radioGroup) {\n        this.radioGroup._touch();\n      }\n\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {UNIQUE_SELECTION_DISPATCHER_PROVIDER} from '@angular/cdk/collections';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, A11yModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material drawers. */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    state('open, open-instant', style({\n      transform: 'translate3d(0, 0, 0)',\n      visibility: 'visible',\n    })),\n    state('void', style({\n      visibility: 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatSelect, MatSelectTrigger, MAT_SELECT_SCROLL_STRATEGY_PROVIDER} from './select';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {ErrorStateMatcher} from '@angular/material/core';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER, ErrorStateMatcher]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by MatTooltip. */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('150ms cubic-bezier(0.0, 0.0, 0.2, 1)')),\n    transition('* => hidden', animate('150ms cubic-bezier(0.4, 0.0, 1, 1)')),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule, ARIA_DESCRIBER_PROVIDER} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {LayoutModule} from '@angular/cdk/layout';\nimport {\n  MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER,\n  MAT_TOOLTIP_DEFAULT_OPTIONS,\n  MatTooltip,\n  TooltipComponent,\n} from './tooltip';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PlatformModule,\n    A11yModule,\n    LayoutModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [\n    MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER,\n    ARIA_DESCRIBER_PROVIDER,\n    {\n      provide: MAT_TOOLTIP_DEFAULT_OPTIONS,\n      useValue: {\n        showDelay: 0,\n        hideDelay: 0,\n        touchendHideDelay: 1500\n      }\n    }\n  ],\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional } from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable()\nexport class MatPaginatorIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel: string = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel: string = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel: string = 'Previous page';\n\n  /** A label for the button that moves to the first page. */\n  firstPageLabel: string = 'First page';\n\n  /** A label for the button that moves to the last page. */\n  lastPageLabel: string = 'Last page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatPaginatorIntl} from './paginator-intl';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatPaginator implements OnInit, OnDestroy {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(value: number) {\n    this._pageIndex = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  _pageIndex: number = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(value: number) {\n    this._length = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  _length: number = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(value: number) {\n    this._pageSize = coerceNumberProperty(value);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(value: number[]) {\n    this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Whether to hide the page size selection UI from the user. */\n  @Input()\n  get hidePageSize(): boolean { return this._hidePageSize; }\n  set hidePageSize(value: boolean) {\n    this._hidePageSize = coerceBooleanProperty(value);\n  }\n  private _hidePageSize = false;\n\n\n  /** Whether to show the first/last buttons UI to the user. */\n  @Input()\n  get showFirstLastButtons(): boolean { return this._showFirstLastButtons; }\n  set showFirstLastButtons(value: boolean) {\n    this._showFirstLastButtons = coerceBooleanProperty(value);\n  }\n  private _showFirstLastButtons = false;\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() readonly page: EventEmitter<PageEvent> = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage(): void {\n    if (!this.hasNextPage()) { return; }\n    this.pageIndex++;\n    this._emitPageEvent();\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage(): void {\n    if (!this.hasPreviousPage()) { return; }\n    this.pageIndex--;\n    this._emitPageEvent();\n  }\n\n  /** Move to the first page if not already there. */\n  firstPage(): void {\n    // hasPreviousPage being false implies at the start\n    if (!this.hasPreviousPage()) { return; }\n    this.pageIndex = 0;\n    this._emitPageEvent();\n  }\n\n  /** Move to the last page if not already there. */\n  lastPage(): void {\n    // hasNextPage being false implies at the end\n    if (!this.hasNextPage()) { return; }\n    this.pageIndex = this.getNumberOfPages();\n    this._emitPageEvent();\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage(): boolean {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage(): boolean {\n    const numberOfPages = this.getNumberOfPages();\n    return this.pageIndex < numberOfPages && this.pageSize != 0;\n  }\n\n  /** Calculate the number of pages */\n  getNumberOfPages(): number {\n    return Math.ceil(this.length / this.pageSize) - 1;\n  }\n\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n\n    this.pageSize = pageSize;\n    this._emitPageEvent();\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) == -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent() {\n    this.page.emit({\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Input,\n  ViewEncapsulation\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\n\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nexport class MatProgressBarBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\nexport const _MatProgressBarMixinBase = mixinColor(MatProgressBarBase, 'primary');\n\n/** Counter used to generate unique IDs for progress bars. */\nlet progressbarId = 0;\n\n/**\n * `<mat-progress-bar>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n    'class': 'mat-progress-bar',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor {\n\n  constructor(public _elementRef: ElementRef) {\n    super(_elementRef);\n  }\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) { this._value = clamp(v || 0); }\n  private _value: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue(): number { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n  private _bufferValue: number = 0;\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** The id of the progress bar. */\n  progressbarId = `mat-progress-bar-${progressbarId++}`;\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    const scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode === 'buffer') {\n      const scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ESCAPE, LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {switchMap} from 'rxjs/operators/switchMap';\nimport {take} from 'rxjs/operators/take';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n  OnInit,\n} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subscription} from 'rxjs/Subscription';\nimport {matMenuAnimations} from './menu-animations';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MatMenuContent} from './menu-content';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {FocusOrigin} from '@angular/cdk/a11y';\n\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n\n  /** Class to be applied to the menu's backdrop. */\n  backdropClass: string;\n\n  /** Whether the menu has a backdrop. */\n  hasBackdrop: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options');\n\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 2;\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  exportAs: 'matMenu'\n})\nexport class MatMenu implements OnInit, AfterContentInit, MatMenuPanel, OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter' = 'void';\n\n  /** Emits whenever an animation on the menu completes. */\n  _animationDone = new Subject<void>();\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Class to be added to the backdrop element. */\n  @Input() backdropClass: string = this._defaultOptions.backdropClass;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition(): MenuPositionX { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition(): MenuPositionY { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) templateRef: TemplateRef<any>;\n\n  /** List of the items inside of a menu. */\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\n\n  /**\n   * Menu content that will be rendered lazily.\n   * @docs-private\n   */\n  @ContentChild(MatMenuContent) lazyContent: MatMenuContent;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  get overlapTrigger(): boolean { return this._overlapTrigger; }\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /** Whether the menu has a backdrop. */\n  @Input()\n  get hasBackdrop(): boolean { return this._hasBackdrop; }\n  set hasBackdrop(value: boolean) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n  private _hasBackdrop: boolean = this._defaultOptions.hasBackdrop;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    if (classes && classes.length) {\n      this._classList = classes.split(' ').reduce((obj: any, className: string) => {\n        obj[className] = true;\n        return obj;\n      }, {});\n\n      this._elementRef.nativeElement.className = '';\n      this.setPositionClasses();\n    }\n  }\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   * @deletion-target 6.0.0\n   */\n  @Input()\n  get classList(): string { return this.panelClass; }\n  set classList(classes: string) { this.panelClass = classes; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() readonly closed: EventEmitter<void | 'click' | 'keydown' | 'tab'> =\n      new EventEmitter<void | 'click' | 'keydown' | 'tab'>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   * @deletion-target 6.0.0\n   */\n  @Output() close = this.closed;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngOnInit() {\n    this.setPositionClasses();\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatMenuItem>(this.items).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.close.emit('tab'));\n  }\n\n  ngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    if (this.items) {\n      return this.items.changes.pipe(\n        startWith(this.items),\n        switchMap(items => merge(...items.map(item => item._hovered)))\n      );\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this._hovered()));\n  }\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case ESCAPE:\n        this.closed.emit('keydown');\n        event.stopPropagation();\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n    if (this.lazyContent) {\n      this._ngZone.onStable.asObservable()\n        .pipe(take(1))\n        .subscribe(() => this._keyManager.setFocusOrigin(origin).setFirstItemActive());\n    } else {\n      this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n    }\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * It's necessary to set position-based classes to ensure the menu panel animation\n   * folds out from the correct direction.\n   */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    this._classList['mat-menu-before'] = posX === 'before';\n    this._classList['mat-menu-after'] = posX === 'after';\n    this._classList['mat-menu-above'] = posY === 'above';\n    this._classList['mat-menu-below'] = posY === 'below';\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    // @deletion-target 6.0.0 Combine with _resetAnimation.\n    this._panelAnimationState = 'enter';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    // @deletion-target 6.0.0 Combine with _startAnimation.\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone() {\n    this._animationDone.next();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  ConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayRef,\n  OverlayConfig,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatMenu} from './menu-directive';\nimport {throwMatMenuMissingError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_MENU_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_MENU_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closeSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  private _openedByMouse: boolean = false;\n\n  /**\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel {\n    return this.menu;\n  }\n\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor') menu: MatMenuPanel;\n\n  /** Data to be passed along to any lazily-rendered content. */\n  @Input('matMenuTriggerData') menuData: any;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() readonly menuOpened: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly onMenuOpen: EventEmitter<void> = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() readonly menuClosed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly onMenuClose: EventEmitter<void> = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _parentMenu: MatMenu,\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality,\n              // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n              private _focusMonitor?: FocusMonitor) {\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n\n    this.menu.close.subscribe(reason => {\n      this._destroyMenu();\n\n      // If a click closed the menu, we should close the entire chain of nested menus.\n      if ((reason === 'click' || reason === 'tab') && this._parentMenu) {\n        this._parentMenu.closed.emit(reason);\n      }\n    });\n\n    if (this.triggersSubmenu()) {\n      // Subscribe to changes in the hovered item in order to toggle the panel.\n      this._hoverSubscription = this._parentMenu._hovered()\n          .pipe(filter(active => active === this._menuItemInstance))\n          .subscribe(() => {\n            this._openedByMouse = true;\n            this.openMenu();\n          });\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._cleanUpSubscriptions();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (this._menuOpen) {\n      return;\n    }\n\n    this._createOverlay().attach(this._portal);\n\n    if (this.menu.lazyContent) {\n      this.menu.lazyContent.attach(this.menuData);\n    }\n\n    this._closeSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n    this._initMenu();\n\n    if (this.menu instanceof MatMenu) {\n      this.menu._startAnimation();\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n  focus(origin: FocusOrigin = 'program') {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._element.nativeElement, origin);\n    } else {\n      this._element.nativeElement.focus();\n    }\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (!this._overlayRef || !this.menuOpen) {\n      return;\n    }\n\n    const menu = this.menu;\n\n    this._resetMenu();\n    this._closeSubscription.unsubscribe();\n    this._overlayRef.detach();\n\n    if (menu instanceof MatMenu) {\n      menu._resetAnimation();\n\n      if (menu.lazyContent) {\n        // Wait for the exit animation to finish before detaching the content.\n        menu._animationDone\n          .pipe(take(1))\n          .subscribe(() => menu.lazyContent!.detach());\n      }\n    } else if (menu.lazyContent) {\n      menu.lazyContent.detach();\n    }\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n    this.menu.focusFirstItem(this._openedByMouse ? 'mouse' : 'program');\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  /**\n   * This method resets the menu when it's closed, most importantly restoring\n   * focus to the menu trigger if the menu was opened via the keyboard.\n   */\n  private _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (!this._openedByMouse) {\n      // Note that the focus style will show up both for `program` and\n      // `keyboard` so we don't have to specify which one it is.\n      this.focus();\n    } else if (!this.triggersSubmenu()) {\n      this.focus('mouse');\n    }\n\n    this._openedByMouse = false;\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as ConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getPosition(),\n      hasBackdrop: this.menu.hasBackdrop == null ? !this.triggersSubmenu() : this.menu.hasBackdrop,\n      backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n      direction: this.dir,\n      scrollStrategy: this._scrollStrategy()\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: ConnectedPositionStrategy): void {\n    position.onPositionChange.subscribe(change => {\n      const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n      const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n      this.menu.setPositionClasses(posX, posY);\n    });\n  }\n\n  /**\n   * This method builds the position strategy for the overlay, so the menu is properly connected\n   * to the trigger.\n   * @returns ConnectedPositionStrategy\n   */\n  private _getPosition(): ConnectedPositionStrategy {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    return this._overlay.position()\n        .connectedTo(this._element, {originX, originY}, {overlayX, overlayY})\n        .withDirection(this.dir)\n        .withOffsetY(offsetY)\n        .withFallbackPosition(\n            {originX: originFallbackX, originY},\n            {overlayX: overlayFallbackX, overlayY})\n        .withFallbackPosition(\n            {originX, originY: originFallbackY},\n            {overlayX, overlayY: overlayFallbackY},\n            undefined, -offsetY)\n        .withFallbackPosition(\n            {originX: originFallbackX, originY: originFallbackY},\n            {overlayX: overlayFallbackX, overlayY: overlayFallbackY},\n            undefined, -offsetY);\n  }\n\n  /** Cleans up the active subscriptions. */\n  private _cleanUpSubscriptions(): void {\n    this._closeSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMenu ? this._parentMenu.close : observableOf();\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      this._openedByMouse = true;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {MAT_MENU_DEFAULT_OPTIONS, MatMenu} from './menu-directive';\nimport {MatMenuItem} from './menu-item';\nimport {MAT_MENU_SCROLL_STRATEGY_PROVIDER, MatMenuTrigger} from './menu-trigger';\nimport {MatMenuContent} from './menu-content';\n\n\n@NgModule({\n  imports: [\n    A11yModule,\n    CommonModule,\n    MatCommonModule,\n    MatRippleModule,\n    OverlayModule,\n    PortalModule,\n  ],\n  exports: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent, MatCommonModule],\n  declarations: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent],\n  providers: [\n    MAT_MENU_SCROLL_STRATEGY_PROVIDER,\n    {\n      provide: MAT_MENU_DEFAULT_OPTIONS,\n      useValue: {\n        overlapTrigger: true,\n        xPosition: 'after',\n        yPosition: 'below',\n        backdropClass: 'cdk-overlay-transparent-backdrop'\n      },\n    }\n  ],\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  animateChild,\n  group,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n */\nexport const matSelectAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      transform: 'scaleY(0)',\n      minWidth: '100%',\n      opacity: 0\n    })),\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', group([\n      query('@fadeInContent', animateChild()),\n      animate('150ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n    ])),\n    transition('* => void', [\n      animate('250ms 100ms linear', style({opacity: 0}))\n    ])\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {SPACE, ENTER, HOME, END} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  MatLine,\n  MatLineSetter,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Subscription} from 'rxjs/Subscription';\n\n\n/** @docs-private */\nexport class MatSelectionListBase {}\nexport const _MatSelectionListMixinBase = mixinDisableRipple(mixinDisabled(MatSelectionListBase));\n\n/** @docs-private */\nexport class MatListOptionBase {}\nexport const _MatListOptionMixinBase = mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/**\n * Change event object emitted by MatListOption whenever the selected state changes.\n * @deprecated Use the `MatSelectionListChange` event on the selection list instead.\n * @deletion-target 6.0.0\n */\nexport class MatListOptionChange {\n  constructor(\n    /** Reference to the list option that changed. */\n    public source: MatListOption,\n    /** The new selected state of the option. */\n    public selected: boolean) {}\n}\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-focus]': '_hasFocus',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _selected = false;\n  private _disabled = false;\n\n  /** Whether the option has focus. */\n  _hasFocus: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text') _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Value of the option */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  /**\n   * Emits a change event whenever the selected state of an option changes.\n   * @deprecated Use the `selectionChange` event on the `<mat-selection-list>` instead.\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly selectionChange: EventEmitter<MatListOptionChange> =\n    new EventEmitter<MatListOptionChange>();\n\n  constructor(private _element: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */\n              @Inject(forwardRef(() => MatSelectionList)) public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    // List options that are selected at initialization can't be reported properly to the form\n    // control. This is because it takes some time until the selection-list knows about all\n    // available options. Also it can happen that the ControlValueAccessor has an initial value\n    // that should be used instead. Deferring the value change report to the next tick ensures\n    // that the form control value is not being overwritten.\n    const wasSelected = this._selected;\n\n    Promise.resolve().then(() => {\n      if (this._selected || wasSelected) {\n        this.selected = true;\n        this._changeDetector.markForCheck();\n      }\n    });\n  }\n\n  ngAfterContentInit() {\n    // TODO: consider turning the setter into a function, it doesn't do anything as a class.\n    // tslint:disable-next-line:no-unused-expression\n    new MatLineSetter(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => this.selected = false);\n    }\n\n    this.selectionList._removeOptionFromList(this);\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? this._text.nativeElement.textContent : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n\n      // TODO: the `selectionChange` event on the option is deprecated. Remove that in the future.\n      this._emitDeprecatedChangeEvent();\n    }\n  }\n\n  _handleFocus() {\n    this._hasFocus = true;\n    this.selectionList._setFocusedOption(this);\n  }\n\n  _handleBlur() {\n    this._hasFocus = false;\n    this.selectionList._onTouched();\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. */\n  _setSelected(selected: boolean) {\n    if (selected === this._selected) {\n      return;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n  }\n\n  /** Emits a selectionChange event for this option. */\n  _emitDeprecatedChangeEvent() {\n    // TODO: the `selectionChange` event on the option is deprecated. Remove that in the future.\n    this.selectionChange.emit(new MatListOptionChange(this, this.selected));\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list',\n    '(focus)': 'focus()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\n    CanDisable, CanDisableRipple, AfterContentInit, ControlValueAccessor, OnDestroy {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** Tabindex of the selection list. */\n  @Input() tabIndex: number = 0;\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Used for storing the values that were assigned before the options were initialized. */\n  private _tempValues: string[]|null;\n\n  private _modelChanges = Subscription.EMPTY;\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  constructor(private _element: ElementRef, @Attribute('tabindex') tabIndex: string) {\n    super();\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options)\n      .withWrap()\n      .withTypeAhead()\n      // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\n      // screenreader users, that allows reading the different options of the list.\n      .skipPredicate(() => false);\n\n    if (this._tempValues) {\n      this._setOptionsFromValues(this._tempValues);\n      this._tempValues = null;\n    }\n\n    // Sync external changes to the model back to the options.\n    this._modelChanges = this.selectedOptions.onChange!.subscribe(event => {\n      if (event.added) {\n        for (let item of event.added) {\n          item.selected = true;\n        }\n      }\n\n      if (event.removed) {\n        for (let item of event.removed) {\n          item.selected = false;\n        }\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this._modelChanges.unsubscribe();\n  }\n\n  /** Focuses the last active list option. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this.options.forEach(option => option._setSelected(true));\n    this._reportValueChange();\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this.options.forEach(option => option._setSelected(false));\n    this._reportValueChange();\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItemIndex(this._getOptionIndex(option));\n  }\n\n  /** Removes an option from the selection list and updates the active item. */\n  _removeOptionFromList(option: MatListOption) {\n    if (option._hasFocus) {\n      const optionIndex = this._getOptionIndex(option);\n\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.setPreviousItemActive();\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.setNextItemActive();\n      }\n    }\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case SPACE:\n      case ENTER:\n        if (!this.disabled) {\n          this._toggleSelectOnFocusedOption();\n\n          // Always prevent space from scrolling the page since the list has focus\n          event.preventDefault();\n        }\n        break;\n      case HOME:\n      case END:\n        event.keyCode === HOME ? this._keyManager.setFirstItemActive() :\n                                 this._keyManager.setLastItemActive();\n        event.preventDefault();\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    if (this.options) {\n      this._onChange(this._getSelectedOptionValues());\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    } else {\n      this._tempValues = values;\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    if (this.options) {\n      this.options.forEach(option => option.disabled = isDisabled);\n    }\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Returns the option with the specified value. */\n  private _getOptionByValue(value: string): MatListOption | undefined {\n    return this.options.find(option => option.value === value);\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values\n      .map(value => this._getOptionByValue(value))\n      .filter(Boolean)\n      .forEach(option => option!._setSelected(true));\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the selected state of the currently focused option. */\n  private _toggleSelectOnFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n\n        // TODO: the `selectionChange` event on the option is deprecated. Remove that in the future.\n        focusedOption._emitDeprecatedChangeEvent();\n      }\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  query,\n  group,\n  sequence,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: AnimationTriggerMetadata;\n  readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [\n    state('void', style({\n      opacity: 0,\n      // This starts off from 0.01, instead of 0, because there's an issue in the Angular animations\n      // as of 4.2, which causes the animation to be skipped if it starts from 0.\n      transform: 'scale(0.01, 0.01)'\n    })),\n    transition('void => enter', sequence([\n      query('.mat-menu-content', style({opacity: 0})),\n      animate('100ms linear', style({opacity: 1, transform: 'scale(1, 0.5)'})),\n      group([\n        query('.mat-menu-content', animate('400ms cubic-bezier(0.55, 0, 0.55, 0.2)',\n          style({opacity: 1})\n        )),\n        animate('300ms cubic-bezier(0.25, 0.8, 0.25, 1)', style({transform: 'scale(1, 1)'})),\n      ])\n    ])),\n    transition('* => void', animate('150ms 50ms linear', style({opacity: 0})))\n  ]),\n\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n    // TODO(crisbeto): this is inside the `transformMenu`\n    // now. Remove next time we do breaking changes.\n    state('showing', style({opacity: 1})),\n    transition('void => *', [\n      style({opacity: 0}),\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const transformMenu = matMenuAnimations.transformMenu;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {Subject} from 'rxjs/Subject';\nimport {DOCUMENT} from '@angular/common';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nexport class MatMenuItemBase {}\nexport const _MatMenuItemMixinBase = mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    'role': 'menuitem',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n    '(click)': '_checkDisabled($event)',\n    '(mouseenter)': '_emitHoverEvent()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n\n  private _document: Document;\n\n  /** Stream that emits when the menu item is hovered. */\n  readonly _hovered: Subject<MatMenuItem> = new Subject<MatMenuItem>();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(\n    private _elementRef: ElementRef,\n    @Inject(DOCUMENT) document?: any,\n    private _focusMonitor?: FocusMonitor) {\n\n    // @deletion-target 6.0.0 make `_focusMonitor` and `document` required params.\n    super();\n\n    if (_focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      _focusMonitor.monitor(this._getHostElement(), false);\n    }\n\n    this._document = document;\n  }\n\n  /** Focuses the menu item. */\n  focus(origin: FocusOrigin = 'program'): void {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin);\n    } else {\n      this._getHostElement().focus();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._getHostElement());\n    }\n\n    this._hovered.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  _emitHoverEvent() {\n    if (!this.disabled) {\n      this._hovered.next(this);\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === textNodeType) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  TemplateRef,\n  ComponentFactoryResolver,\n  ApplicationRef,\n  Injector,\n  ViewContainerRef,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {TemplatePortal, DomPortalOutlet} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\n\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\n@Directive({\n  selector: 'ng-template[matMenuContent]'\n})\nexport class MatMenuContent implements OnDestroy {\n  private _portal: TemplatePortal<any>;\n  private _outlet: DomPortalOutlet;\n\n  constructor(\n    private _template: TemplateRef<any>,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n    private _injector: Injector,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) private _document: any) {}\n\n  /**\n   * Attaches the content with a particular context.\n   * @docs-private\n   */\n  attach(context: any = {}) {\n    if (!this._portal) {\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n    }\n\n    this.detach();\n\n    if (!this._outlet) {\n      this._outlet = new DomPortalOutlet(this._document.createElement('div'),\n          this._componentFactoryResolver, this._appRef, this._injector);\n    }\n\n    const element: HTMLElement = this._template.elementRef.nativeElement;\n\n    // Because we support opening the same menu from different triggers (which in turn have their\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n    // risk it staying attached to a pane that's no longer in the DOM.\n    element.parentNode!.insertBefore(this._outlet.outletElement, element);\n    this._portal.attach(this._outlet, context);\n  }\n\n  /**\n   * Detaches the content.\n   * @docs-private\n   */\n  detach() {\n    if (this._portal.isAttached) {\n      this._portal.detach();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._outlet) {\n      this._outlet.dispose();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, MatLine, MatLineSetter, mixinDisableRipple} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nexport class MatListBase {}\nexport const _MatListMixinBase = mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nexport class MatListItemBase {}\nexport const _MatListItemMixinBase = mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {'class': 'mat-list'},\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    // @deletion-target 7.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\n    '[class.mat-list-item-avatar]': '_avatar',\n    '[class.mat-list-item-with-avatar]': '_avatar',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple {\n  private _isNavList: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n\n  constructor(private _element: ElementRef,\n              @Optional() private _navList: MatNavList) {\n    super();\n    this._isNavList = !!_navList;\n  }\n\n  ngAfterContentInit() {\n    // TODO: consider turning the setter into a function, it doesn't do anything as a class.\n    // tslint:disable-next-line:no-unused-expression\n    new MatLineSetter(this._lines, this._element);\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isNavList || this.disableRipple || this._navList.disableRipple;\n  }\n\n  _handleFocus() {\n    this._element.nativeElement.classList.add('mat-list-item-focus');\n  }\n\n  _handleBlur() {\n    this._element.nativeElement.classList.remove('mat-list-item-focus');\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {catchError} from 'rxjs/operators/catchError';\nimport {tap} from 'rxjs/operators/tap';\nimport {finalize} from 'rxjs/operators/finalize';\nimport {map} from 'rxjs/operators/map';\nimport {share} from 'rxjs/operators/share';\nimport {\n  Injectable,\n  Inject,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {DomSanitizer, SafeResourceUrl} from '@angular/platform-browser';\nimport {Observable} from 'rxjs/Observable';\nimport {forkJoin} from 'rxjs/observable/forkJoin';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {_throw as observableThrow} from 'rxjs/observable/throw';\nimport {DOCUMENT} from '@angular/common';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  svgElement: SVGElement | null = null;\n  constructor(public url: SafeResourceUrl) { }\n}\n\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable()\nexport class MatIconRegistry {\n  private _document: Document;\n\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document?: any) {\n      // TODO(crisbeto): make _document required next major release.\n      this._document = document;\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    const key = iconKey(namespace, iconName);\n    this._svgIconConfigs.set(key, new SvgIconConfig(url));\n    return this;\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    const config = new SvgIconConfig(url);\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n    return this;\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the `<mat-icon>` element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    let url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeError(safeUrl);\n    }\n\n    let cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg)),\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg)),\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: any): Observable<SVGElement | null> => {\n            let url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the combined Observable won't\n            // necessarily fail.\n            console.log(`Loading icon set URL: ${url} failed: ${err}`);\n            return observableOf(null);\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // If the SVG for this icon set has already been parsed, do nothing.\n    if (config.svgElement) {\n      return observableOf(config.svgElement);\n    }\n\n    return this._fetchUrl(config.url).pipe(map(svgText => {\n      // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n      // only needs to occur if the cache is yet unset.\n      if (!config.svgElement) {\n        config.svgElement = this._svgElementFromString(svgText);\n      }\n\n      return config.svgElement;\n    }));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    const iconSource = iconSet.querySelector('#' + iconName);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.id = '';\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    if (this._document || typeof document !== 'undefined') {\n      const div = (this._document || document).createElement('DIV');\n      div.innerHTML = str;\n      const svg = div.querySelector('svg') as SVGElement;\n      if (!svg) {\n        throw Error('<svg> tag not found');\n      }\n      return svg;\n    }\n\n    throw new Error('MatIconRegistry could not resolve document.');\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    let svg = this._svgElementFromString('<svg></svg>');\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finally` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share(),\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), DOCUMENT as InjectionToken<any>],\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators/take';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nexport class MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatIconMixinBase = mixinColor(MatIconBase);\n\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, CanColor {\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  constructor(\n      elementRef: ElementRef,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   `'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)`\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    if (changes.svgIcon) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    const childCount = layoutElement.childNodes.length;\n\n    // Remove existing child nodes and add the new SVG element. Note that we can't\n    // use innerHTML, because IE will throw if the element has a data binding.\n    for (let i = 0; i < childCount; i++) {\n      layoutElement.removeChild(layoutElement.childNodes[i]);\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\nimport {ICON_REGISTRY_PROVIDER} from './icon-registry';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n  providers: [ICON_REGISTRY_PROVIDER],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements AfterContentInit, ControlValueAccessor, OnDestroy,\n    Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    this.registerDatepicker(value);\n  }\n  _datepicker: MatDatepicker<D>;\n\n  private registerDatepicker(value: MatDatepicker<D>) {\n    if (value) {\n      this._datepicker = value;\n      this._datepicker._registerInput(this);\n    }\n  }\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(value: (date: D | null) => boolean) {\n    this._dateFilter = value;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    let oldDate = this.value;\n    this._value = value;\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n\n    if (newValue) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      this._elementRef.nativeElement.blur();\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D | null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngAfterContentInit() {\n    if (this._datepicker) {\n      this._datepickerSubscription =\n          this._datepicker.selectedChanged.subscribe((selected: D) => {\n            this.value = selected;\n            this._cvaOnChange(selected);\n            this._onTouched();\n            this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n            this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n          });\n    }\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** @docs-private */\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * @deprecated\n   * @deletion-target 7.0.0 Use `getConnectedOverlayOrigin` instead\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this.getConnectedOverlayOrigin();\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (event.altKey && event.keyCode === DOWN_ARROW) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n    this._value = date;\n    this._cvaOnChange(date);\n    this._valueChange.emit(date);\n    this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /** Returns the palette used by the input's form field, if any. */\n  _getThemePalette() {\n    return this._formField ? this._formField.color : undefined;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n  Directive,\n  ContentChild,\n} from '@angular/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class MatDatepickerToggleIcon {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'class': 'mat-datepicker-toggle',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n    '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n    '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon) _customIcon: MatDatepickerToggleIcon;\n\n  constructor(public _intl: MatDatepickerIntl, private _changeDetectorRef: ChangeDetectorRef) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.datepicker) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatCalendar} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {\n  MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER,\n  MatDatepicker,\n  MatDatepickerContent,\n} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    OverlayModule,\n    A11yModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input()\n  get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [\n    MatDivider,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDivider,\n  ],\n})\nexport class MatDividerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * The display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the reset of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  Host,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  SimpleChanges,\n  ViewEncapsulation,\n  ViewContainerRef,\n  AfterContentInit,\n  ContentChild,\n} from '@angular/core';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {Subject} from 'rxjs/Subject';\nimport {take} from 'rxjs/operators/take';\nimport {filter} from 'rxjs/operators/filter';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {MatAccordion} from './accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {matExpansionAnimations} from './expansion-animations';\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MdAccordion directive attached.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  }\n})\nexport class MatExpansionPanel extends CdkAccordionItem\n    implements AfterContentInit, OnChanges, OnDestroy {\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n  private _hideToggle = false;\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordion;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent) _lazyContent: MatExpansionPanelContent;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  constructor(@Optional() @Host() accordion: MatAccordion,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n  }\n\n  /** Whether the expansion indicator should be hidden. */\n  _getHideToggle(): boolean {\n    if (this.accordion) {\n      return this.accordion.hideToggle;\n    }\n    return this.hideToggle;\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._inputChanges.complete();\n  }\n\n  _bodyAnimation(event: AnimationEvent) {\n    const classList = event.element.classList;\n    const cssClass = 'mat-expanded';\n    const {phaseName, toState} = event;\n\n    // Toggle the body's `overflow: hidden` class when closing starts or when expansion ends in\n    // order to prevent the cases where switching too early would cause the animation to jump.\n    // Note that we do it directly on the DOM element to avoid the slight delay that comes\n    // with doing it via change detection.\n    if (phaseName === 'done' && toState === 'expanded') {\n      classList.add(cssClass);\n    } else if (phaseName === 'start' && toState === 'collapsed') {\n      classList.remove(cssClass);\n    }\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {filter} from 'rxjs/operators/filter';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatExpansionPanel} from './expansion-panel';\nimport {matExpansionAnimations} from './expansion-animations';\n\n\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'panel.disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n    @Host() public panel: MatExpansionPanel,\n    private _element: ElementRef,\n    private _focusMonitor: FocusMonitor,\n    private _changeDetectorRef: ChangeDetectorRef) {\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to  subscribe and trigger change detection manually.\n    this._parentChangeSubscription = merge(\n      panel.opened,\n      panel.closed,\n      panel._inputChanges.pipe(filter(changes => !!(changes.hideToggle || changes.disabled)))\n    )\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    _focusMonitor.monitor(_element.nativeElement);\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    this.panel.toggle();\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        event.preventDefault();\n        this._toggle();\n        break;\n      default:\n        return;\n    }\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n}\n\n/**\n * `<mat-panel-description>`\n *\n * This direction is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host : {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * `<mat-panel-title>`\n *\n * This direction is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host : {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {UNIQUE_SELECTION_DISPATCHER_PROVIDER} from '@angular/cdk/collections';\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanel,\n  MatExpansionPanelActionRow\n} from './expansion-panel';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, A11yModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER]\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatLine, MatLineSetter} from '@angular/material/core';\nimport {coerceToNumber} from './grid-list-measure';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(private _element: ElementRef) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value: number) { this._rowspan = coerceToNumber(value); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value: number) { this._colspan = coerceToNumber(value); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    this._element.nativeElement.style[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridTileText implements AfterContentInit {\n  /**\n   *  Helper that watches the number of lines in a text area and sets\n   * a class on the host element that matches the line count.\n   */\n  _lineSetter: MatLineSetter;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef) {}\n\n  ngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {QueryList} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    let lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  constructor(numColumns: number, tiles: QueryList<MatGridTile>) {\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    let gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile.\n    } while (gapEndIndex - gapStartIndex < tileCols);\n\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'rtl' ? 'right' : 'left';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number);\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList);\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height. */\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['paddingBottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('marginTop', null);\n      tile._setStyle('paddingTop', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string { return `calc(${exp})`; }\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return (value.match(/px|em|rem/)) ? value : value + 'px';\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  coerceToString,\n  coerceToNumber,\n} from './grid-list-measure';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridList implements OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef, @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols(): number { return this._cols; }\n  set cols(value: number) { this._cols = coerceToNumber(value); }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize(): string { return this._gutter; }\n  set gutterSize(value: string) { this._gutter = coerceToString(value); }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  set rowHeight(value: string | number) {\n    const newValue = coerceToString(value);\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    const tracker = new TileCoordinator(this.cols, this._tiles);\n    const direction = this._dir ? this._dir.value : 'ltr';\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    this._tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      this._element.nativeElement.style[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new year is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody;\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n    this._focusActiveCell();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\n    let activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n        this._yearSelected(this._dateAdapter.getYear(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  _getActiveCell(): number {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  private _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _shouldEnableYear(year: number) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null ||\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n      return false;\n    }\n\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody;\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n    this._focusActiveCell();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    const normalizedDate =\n          this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    this.monthSelected.emit(normalizedDate);\n\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n        this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  private _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (month === undefined || month === null ||\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Subscription} from 'rxjs/Subscription';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView, yearsPerPage} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, OnDestroy, OnChanges {\n  private _intlChanges: Subscription;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView) multiYearView: MatMultiYearView<D>;\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get _activeDate(): D { return this._clampedActiveDate; }\n  set _activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  _currentView: 'month' | 'year' | 'multi-year';\n\n  /** The label for the current calendar view. */\n  get _periodButtonText(): string {\n    if (this._currentView == 'month') {\n      return this._dateAdapter.format(this._activeDate, this._dateFormats.display.monthYearLabel)\n          .toLocaleUpperCase();\n    }\n    if (this._currentView == 'year') {\n      return this._dateAdapter.getYearName(this._activeDate);\n    }\n    const activeYear = this._dateAdapter.getYear(this._activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n    const lastYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  get _periodButtonLabel(): string {\n    return this._currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the the previous button. */\n  get _prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this._currentView];\n  }\n\n  /** The label for the the next button. */\n  get _nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this._currentView];\n  }\n\n  constructor(private _intl: MatDatepickerIntl,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngAfterContentInit() {\n    this._activeDate = this.startAt || this._dateAdapter.today();\n    this._currentView = this.startView;\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change = changes.minDate || changes.maxDate || changes.dateFilter;\n\n    if (change && !change.firstChange) {\n      const view = this.monthView || this.yearView || this.multiYearView;\n\n      if (view) {\n        view._init();\n      }\n    }\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles year/month selection in the multi-year/year views. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this._activeDate = date;\n    this._currentView = view;\n  }\n\n  /** Handles user clicks on the period label. */\n  _currentPeriodClicked(): void {\n    this._currentView = this._currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  _previousClicked(): void {\n    this._activeDate = this._currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this._activeDate, -1) :\n        this._dateAdapter.addCalendarYears(\n            this._activeDate, this._currentView == 'year' ? -1 : -yearsPerPage);\n  }\n\n  /** Handles user clicks on the next button. */\n  _nextClicked(): void {\n    this._activeDate = this._currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this._activeDate, 1) :\n        this._dateAdapter.addCalendarYears(\n            this._activeDate, this._currentView == 'year' ? 1 : yearsPerPage);\n  }\n\n  /** Whether the previous period button is enabled. */\n  _previousEnabled(): boolean {\n    if (!this.minDate) {\n      return true;\n    }\n    return !this.minDate || !this._isSameView(this._activeDate, this.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  _nextEnabled(): boolean {\n    return !this.maxDate || !this._isSameView(this._activeDate, this.maxDate);\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this._currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this._currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material datepicker. */\nexport const matDatepickerAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n  /** Transforms the height of the datepicker's calendar. */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({opacity: 0, transform: 'scale(1, 0)'})),\n    state('enter', style({opacity: 1, transform: 'scale(1, 1)'})),\n    transition('void => enter', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n    transition('* => void', animate('100ms linear', style({opacity: 0})))\n  ]),\n\n  /** Fades in the content of the calendar. */\n  fadeInCalendar: trigger('fadeInCalendar', [\n    state('void', style({opacity: 0})),\n    state('enter', style({opacity: 1})),\n    transition('void => *', animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  ConnectedPositionStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take} from 'rxjs/operators/take';\nimport {filter} from 'rxjs/operators/filter';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  OnInit,\n} from '@angular/core';\nimport {CanColor, DateAdapter, mixinColor, ThemePalette} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {DOCUMENT} from '@angular/common';\nimport {Subject} from 'rxjs/Subject';\nimport {Subscription} from 'rxjs/Subscription';\nimport {merge} from 'rxjs/observable/merge';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatCalendar} from './calendar';\nimport {matDatepickerAnimations} from './datepicker-animations';\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n// Boilerplate for applying mixins to MatDatepickerContent.\n/** @docs-private */\nexport class MatDatepickerContentBase {\n  constructor(public _elementRef: ElementRef) { }\n}\nexport const _MatDatepickerContentMixinBase = mixinColor(MatDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[@transformPanel]': '\"enter\"',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n    '[class.mat-datepicker-content-above]': '_isAbove',\n  },\n  animations: [\n    matDatepickerAnimations.transformPanel,\n    matDatepickerAnimations.fadeInCalendar,\n  ],\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color'],\n})\nexport class MatDatepickerContent<D> extends _MatDatepickerContentMixinBase\n  implements AfterContentInit, CanColor, OnInit, OnDestroy {\n\n  /** Subscription to changes in the overlay's position. */\n  private _positionChange: Subscription|null;\n\n  /** Reference to the internal calendar component. */\n  @ViewChild(MatCalendar) _calendar: MatCalendar<D>;\n\n  /** Reference to the datepicker that created the overlay. */\n  datepicker: MatDatepicker<D>;\n\n  /** Whether the datepicker is above or below the input. */\n  _isAbove: boolean;\n\n  constructor(\n    elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone) {\n    super(elementRef);\n  }\n\n  ngOnInit() {\n    if (!this.datepicker._popupRef || this._positionChange) {\n      return;\n    }\n\n    const positionStrategy =\n      this.datepicker._popupRef.getConfig().positionStrategy! as ConnectedPositionStrategy;\n\n    this._positionChange = positionStrategy.onPositionChange.subscribe(change => {\n      const isAbove = change.connectionPair.overlayY === 'bottom';\n\n      if (isAbove !== this._isAbove) {\n        this._ngZone.run(() => {\n          this._isAbove = isAbove;\n          this._changeDetectorRef.markForCheck();\n        });\n      }\n    });\n  }\n\n  ngAfterContentInit() {\n    this._focusActiveCell();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  private _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._elementRef.nativeElement.querySelector('.mat-calendar-body-active').focus();\n      });\n    });\n  }\n\n  ngOnDestroy() {\n    if (this._positionChange) {\n      this._positionChange.unsubscribe();\n      this._positionChange = null;\n    }\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDatepicker<D> implements OnDestroy, CanColor {\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' = 'month';\n\n  /** Color palette to use on the datepicker's calendar. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n        (this._datepickerInput ? this._datepickerInput._getThemePalette() : undefined);\n  }\n  set color(value: ThemePalette) {\n    this._color = value;\n  }\n  _color: ThemePalette;\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits new selected date when selected date changes.\n   * @deprecated Switch to the `dateChange` and `dateInput` binding on the input element.\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly selectedChanged: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected year in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected month in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { value ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<MatDatepickerContent<D>> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** Reference to the component instantiated in popup mode. */\n  private _popupComponentRef: ComponentRef<MatDatepickerContent<D>> | null;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  /** Subscription to value changes in the associated input element. */\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n      this._popupComponentRef = null;\n    }\n  }\n\n  /** Selects the given date */\n  _select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this.selectedChanged.emit(date);\n    }\n  }\n\n  /** Emits the selected year in multiyear view */\n  _selectYear(normalizedYear: D): void {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Emits selected month in year view */\n  _selectMonth(normalizedMonth: D): void {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    this._dialogRef = this._dialog.open<MatDatepickerContent<D>>(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n    if (this._dialogRef) {\n      this._dialogRef.afterClosed().subscribe(() => this.close());\n      this._dialogRef.componentInstance.datepicker = this;\n    }\n    this._setColor();\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal<MatDatepickerContent<D>>(MatDatepickerContent,\n                                                                          this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\n      this._popupComponentRef.instance.datepicker = this;\n      this._setColor();\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir ? this._dir.value : 'ltr',\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE))\n    ).subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .connectedTo(this._datepickerInput.getConnectedOverlayOrigin(),\n        {originX: 'start', originY: 'bottom'},\n        {overlayX: 'start', overlayY: 'top'}\n      )\n      .withFallbackPosition(\n        {originX: 'start', originY: 'top'},\n        {overlayX: 'start', overlayY: 'bottom'},\n      )\n      .withFallbackPosition(\n        {originX: 'end', originY: 'bottom'},\n        {overlayX: 'end', overlayY: 'top'}\n      )\n      .withFallbackPosition(\n        {originX: 'end', originY: 'top'},\n        {overlayX: 'end', overlayY: 'bottom'},\n      );\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Passes the current theme color along to the calendar overlay. */\n  private _setColor(): void {\n    const color = this.color;\n    if (this._popupComponentRef) {\n      this._popupComponentRef.instance.color = color;\n    }\n    if (this._dialogRef) {\n      this._dialogRef.componentInstance.color = color;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AnimationEvent} from '@angular/animations';\nimport {matDialogAnimations} from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.slideDialog],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    '[attr.id]': '_id',\n    '[attr.role]': '_config?.role',\n    '[attr.aria-labelledby]': '_config?.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config?.ariaLabel',\n    '[attr.aria-describedby]': '_config?.ariaDescribedBy || null',\n    '[@slideDialog]': '_state',\n    '(@slideDialog.start)': '_onAnimationStart($event)',\n    '(@slideDialog.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** The dialog configuration. */\n  _config: MatDialogConfig;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null = null;\n\n  /** ID for the container DOM element. */\n  _id: string;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any) {\n\n    super();\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Note that there is no focus method when rendering on the server.\n      if (this._elementRef.nativeElement.focus) {\n        // Move focus onto the dialog immediately in order to prevent the user from accidentally\n        // opening multiple dialogs at the same time. Needs to be async, because the element\n        // may not be focusable immediately.\n        Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n      }\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef, GlobalPositionStrategy} from '@angular/cdk/overlay';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Location} from '@angular/common';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {DialogPosition} from './dialog-config';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {Subscription, ISubscription} from 'rxjs/Subscription';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private readonly _afterOpen = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private readonly _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private readonly _beforeClose = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  /** Subscription to changes in the user's location. */\n  private _locationChanges: ISubscription = Subscription.EMPTY;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    public _containerInstance: MatDialogContainer,\n    location?: Location,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Pass the id along to the container.\n    _containerInstance._id = id;\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpen.next();\n      this._afterOpen.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._overlayRef.dispose();\n      this._locationChanges.unsubscribe();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose))\n      .subscribe(() => this.close());\n\n    if (location) {\n      // Close the dialog when the user goes forwards/backwards in history or when the location\n      // hash changes. Note that this usually doesn't include clicking on links (unless the user\n      // is using the `HashLocationStrategy`).\n      this._locationChanges = location.subscribe(() => {\n        if (this._containerInstance._config.closeOnNavigation) {\n          this.close();\n        }\n      });\n    }\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._beforeClose.next(dialogResult);\n      this._beforeClose.complete();\n      this._overlayRef.detachBackdrop();\n    });\n\n    this._containerInstance._startExitAnimation();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpen(): Observable<void> {\n    return this._afterOpen.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this._beforeClose.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = 'auto', height: string = 'auto'): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  ScrollStrategy,\n  OverlayContainer,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  ComponentRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {defer} from 'rxjs/observable/defer';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {Subject} from 'rxjs/Subject';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private readonly _afterAllClosedAtThisLevel = new Subject<void>();\n  private readonly _afterOpenAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpen : this._afterOpenAtThisLevel;\n  }\n\n  get _afterAllClosed() {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  readonly afterAllClosed: Observable<void> = defer<void>(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined)));\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() private _location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) private _scrollStrategy,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {}\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T> {\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef =\n        this._attachDialogContent<T>(componentOrTemplateRef, dialogContainer, overlayRef, config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpen.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    let i = this.openDialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      this.openDialogs[i].close();\n    }\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    let containerPortal = new ComponentPortal(MatDialogContainer, config.viewContainerRef);\n    let containerRef: ComponentRef<MatDialogContainer> = overlay.attach(containerPortal);\n    containerRef.instance._config = config;\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef = new MatDialogRef<T>(overlayRef, dialogContainer, this._location, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap();\n\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    injectionTokens\n      .set(MatDialogContainer, dialogContainer)\n      .set(MAT_DIALOG_DATA, config.data)\n      .set(MatDialogRef, dialogRef);\n\n    if (!userInjector || !userInjector.get(Directionality, null)) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string = 'Close dialog';\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes._matDialogClose || changes._matDialogCloseResult;\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent {}\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions {}\n\n\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatDialog,\n  MAT_DIALOG_SCROLL_STRATEGY_PROVIDER\n} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n  MatDialogActions\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    A11yModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform, supportsPassiveEventListeners} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Injectable,\n  OnDestroy,\n  OnInit,\n  Output\n} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {empty as observableEmpty} from 'rxjs/observable/empty';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** An event that is emitted when the autofill state of an input changes. */\nexport type AutofillEvent = {\n  /** The element whose autofill state changes. */\n  target: Element;\n  /** Whether the element is currently autofilled. */\n  isAutofilled: boolean;\n};\n\n\n/** Used to track info about currently monitored elements. */\ntype MonitoredElementInfo = {\n  subject: Subject<AutofillEvent>;\n  unlisten: () => void;\n};\n\n\n/** Options to pass to the animationstart listener. */\nconst listenerOptions: any = supportsPassiveEventListeners() ? {passive: true} : false;\n\n\n/**\n * An injectable service that can be used to monitor the autofill state of an input.\n * Based on the following blog post:\n * https://medium.com/@brunn/detecting-autofilled-fields-in-javascript-aed598d25da7\n */\n@Injectable()\nexport class AutofillMonitor implements OnDestroy {\n  private _monitoredElements = new Map<Element, MonitoredElementInfo>();\n\n  constructor(private _platform: Platform) {}\n\n  /**\n   * Monitor for changes in the autofill state of the given input element.\n   * @param element The element to monitor.\n   * @return A stream of autofill state changes.\n   */\n  monitor(element: Element): Observable<AutofillEvent> {\n    if (!this._platform.isBrowser) {\n      return observableEmpty();\n    }\n\n    const info = this._monitoredElements.get(element);\n    if (info) {\n      return info.subject.asObservable();\n    }\n\n    const result = new Subject<AutofillEvent>();\n    const listener = (event: AnimationEvent) => {\n      if (event.animationName === 'mat-input-autofill-start') {\n        element.classList.add('mat-input-autofilled');\n        result.next({target: event.target as Element, isAutofilled: true});\n      } else if (event.animationName === 'mat-input-autofill-end') {\n        element.classList.remove('mat-input-autofilled');\n        result.next({target: event.target as Element, isAutofilled: false});\n      }\n    };\n\n    element.addEventListener('animationstart', listener, listenerOptions);\n    element.classList.add('mat-input-autofill-monitored');\n\n    this._monitoredElements.set(element, {\n      subject: result,\n      unlisten: () => {\n        element.removeEventListener('animationstart', listener, listenerOptions);\n      }\n    });\n\n    return result.asObservable();\n  }\n\n  /**\n   * Stop monitoring the autofill state of the given input element.\n   * @param element The element to stop monitoring.\n   */\n  stopMonitoring(element: Element) {\n    const info = this._monitoredElements.get(element);\n\n    if (info) {\n      info.unlisten();\n      info.subject.complete();\n      element.classList.remove('mat-input-autofill-monitored');\n      element.classList.remove('mat-input-autofilled');\n      this._monitoredElements.delete(element);\n    }\n  }\n\n  ngOnDestroy() {\n    this._monitoredElements.forEach((_info, element) => this.stopMonitoring(element));\n  }\n}\n\n\n/** A directive that can be used to monitor the autofill state of an input. */\n@Directive({\n  selector: '[matAutofill]',\n})\nexport class MatAutofill implements OnDestroy, OnInit {\n  @Output() matAutofill: EventEmitter<AutofillEvent> = new EventEmitter<AutofillEvent>();\n\n  constructor(private _elementRef: ElementRef, private _autofillMonitor: AutofillMonitor) {}\n\n  ngOnInit() {\n    this._autofillMonitor\n      .monitor(this._elementRef.nativeElement)\n      .subscribe(event => this.matAutofill.emit(event));\n  }\n\n  ngOnDestroy() {\n    this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  ElementRef,\n  Input,\n  AfterViewInit,\n  DoCheck,\n  OnDestroy,\n  NgZone,\n} from '@angular/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {auditTime} from 'rxjs/operators/auditTime';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {Subject} from 'rxjs/Subject';\n\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n */\n@Directive({\n  selector: `textarea[mat-autosize], textarea[matTextareaAutosize]`,\n  exportAs: 'matTextareaAutosize',\n  host: {\n    'class': 'mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n  },\n})\nexport class MatTextareaAutosize implements AfterViewInit, DoCheck, OnDestroy {\n  /** Keep track of the previous textarea value to avoid resizing when the value hasn't changed. */\n  private _previousValue: string;\n  private readonly _destroyed = new Subject<void>();\n\n  private _minRows: number;\n  private _maxRows: number;\n\n  /** Minimum amount of rows in the textarea. */\n  @Input('matAutosizeMinRows')\n  set minRows(value: number) {\n    this._minRows = value;\n    this._setMinHeight();\n  }\n  get minRows(): number { return this._minRows; }\n\n  /** Maximum amount of rows in the textarea. */\n  @Input('matAutosizeMaxRows')\n  get maxRows(): number { return this._maxRows; }\n  set maxRows(value: number) {\n    this._maxRows = value;\n    this._setMaxHeight();\n  }\n\n  /** Cached height of a textarea with a single row. */\n  private _cachedLineHeight: number;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _platform: Platform,\n    private _ngZone?: NgZone) {}\n\n  // TODO(crisbeto): make the `_ngZone` a required param in the next major version.\n\n  /** Sets the minimum height of the textarea as determined by minRows. */\n  _setMinHeight(): void {\n    const minHeight = this.minRows && this._cachedLineHeight ?\n        `${this.minRows * this._cachedLineHeight}px` : null;\n\n    if (minHeight)  {\n      this._setTextareaStyle('minHeight', minHeight);\n    }\n  }\n\n  /** Sets the maximum height of the textarea as determined by maxRows. */\n  _setMaxHeight(): void {\n    const maxHeight = this.maxRows && this._cachedLineHeight ?\n        `${this.maxRows * this._cachedLineHeight}px` : null;\n\n    if (maxHeight) {\n      this._setTextareaStyle('maxHeight', maxHeight);\n    }\n  }\n\n  ngAfterViewInit() {\n    if (this._platform.isBrowser) {\n      this.resizeToFitContent();\n\n      if (this._ngZone) {\n        this._ngZone.runOutsideAngular(() => {\n          fromEvent(window, 'resize')\n            .pipe(auditTime(16), takeUntil(this._destroyed))\n            .subscribe(() => this.resizeToFitContent(true));\n        });\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Sets a style property on the textarea element. */\n  private _setTextareaStyle(property: string, value: string): void {\n    const textarea = this._elementRef.nativeElement as HTMLTextAreaElement;\n    textarea.style[property] = value;\n  }\n\n  /**\n   * Cache the height of a single-row textarea if it has not already been cached.\n   *\n   * We need to know how large a single \"row\" of a textarea is in order to apply minRows and\n   * maxRows. For the initial version, we will assume that the height of a single line in the\n   * textarea does not ever change.\n   */\n  private _cacheTextareaLineHeight(): void {\n    if (this._cachedLineHeight) {\n      return;\n    }\n\n    let textarea = this._elementRef.nativeElement as HTMLTextAreaElement;\n\n    // Use a clone element because we have to override some styles.\n    let textareaClone = textarea.cloneNode(false) as HTMLTextAreaElement;\n    textareaClone.rows = 1;\n\n    // Use `position: absolute` so that this doesn't cause a browser layout and use\n    // `visibility: hidden` so that nothing is rendered. Clear any other styles that\n    // would affect the height.\n    textareaClone.style.position = 'absolute';\n    textareaClone.style.visibility = 'hidden';\n    textareaClone.style.border = 'none';\n    textareaClone.style.padding = '0';\n    textareaClone.style.height = '';\n    textareaClone.style.minHeight = '';\n    textareaClone.style.maxHeight = '';\n\n    // In Firefox it happens that textarea elements are always bigger than the specified amount\n    // of rows. This is because Firefox tries to add extra space for the horizontal scrollbar.\n    // As a workaround that removes the extra space for the scrollbar, we can just set overflow\n    // to hidden. This ensures that there is no invalid calculation of the line height.\n    // See Firefox bug report: https://bugzilla.mozilla.org/show_bug.cgi?id=33654\n    textareaClone.style.overflow = 'hidden';\n\n    textarea.parentNode!.appendChild(textareaClone);\n    this._cachedLineHeight = textareaClone.clientHeight;\n    textarea.parentNode!.removeChild(textareaClone);\n\n    // Min and max heights have to be re-calculated if the cached line height changes\n    this._setMinHeight();\n    this._setMaxHeight();\n  }\n\n  ngDoCheck() {\n    if (this._platform.isBrowser) {\n      this.resizeToFitContent();\n    }\n  }\n\n  /**\n   * Resize the textarea to fit its content.\n   * @param force Whether to force a height recalculation. By default the height will be\n   *    recalculated only if the value changed since the last call.\n   */\n  resizeToFitContent(force: boolean = false) {\n    this._cacheTextareaLineHeight();\n\n    // If we haven't determined the line-height yet, we know we're still hidden and there's no point\n    // in checking the height of the textarea.\n    if (!this._cachedLineHeight) {\n      return;\n    }\n\n    const textarea = this._elementRef.nativeElement as HTMLTextAreaElement;\n    const value = textarea.value;\n\n    // Only resize of the value changed since these calculations can be expensive.\n    if (value === this._previousValue && !force) {\n      return;\n    }\n\n    const placeholderText = textarea.placeholder;\n\n    // Reset the textarea height to auto in order to shrink back to its default size.\n    // Also temporarily force overflow:hidden, so scroll bars do not interfere with calculations.\n    // Long placeholders that are wider than the textarea width may lead to a bigger scrollHeight\n    // value. To ensure that the scrollHeight is not bigger than the content, the placeholders\n    // need to be removed temporarily.\n    textarea.style.height = 'auto';\n    textarea.style.overflow = 'hidden';\n    textarea.placeholder = '';\n\n    // Use the scrollHeight to know how large the textarea *would* be if fit its entire value.\n    textarea.style.height = `${textarea.scrollHeight}px`;\n    textarea.style.overflow = '';\n    textarea.placeholder = placeholderText;\n\n    this._previousValue = value;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Self,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {CanUpdateErrorState, ErrorStateMatcher, mixinErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs/Subject';\nimport {AutofillMonitor} from './autofill';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nexport class MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatInputMixinBase = mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput]`,\n  exportAs: 'matInput',\n  host: {\n    /**\n     * @deletion-target 7.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n     */\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[readonly]': 'readonly',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, OnInit, DoCheck, CanUpdateErrorState {\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _inputValueAccessor: {value: any};\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  focused: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly stateChanges: Subject<void> = new Subject<void>();\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  controlType: string = 'mat-input';\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  autofilled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n  protected _disabled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n  protected _id: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input() placeholder: string = '';\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  protected _required = false;\n\n  /** Input type of the element. */\n  @Input()\n  get type(): string { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      this._elementRef.nativeElement.type = this._type;\n    }\n  }\n  protected _type = 'text';\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): string { return this._inputValueAccessor.value; }\n  set value(value: string) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\n  private _readonly = false;\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(protected _elementRef: ElementRef,\n              protected _platform: Platform,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n              private _autofillMonitor: AutofillMonitor) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || this._elementRef.nativeElement;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n        let el = event.target as HTMLInputElement;\n        if (!el.value && !el.selectionStart && !el.selectionEnd) {\n          // Note: Just setting `0, 0` doesn't fix the issue. Setting `1, 1` fixes it for the first\n          // time that you type text and then hold delete. Toggling to `1, 1` and then back to\n          // `0, 0` seems to completely fix it.\n          el.setSelectionRange(1, 1);\n          el.setSelectionRange(0, 0);\n        }\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n  }\n\n  ngOnInit() {\n    this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n      this.autofilled = event.isAutofilled;\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n    this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n  }\n\n  /** Focuses the input. */\n  focus(): void { this._elementRef.nativeElement.focus(); }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && !this.readonly) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. If not recognizable it returns false. */\n  protected _isTextarea() {\n    let nativeElement = this._elementRef.nativeElement;\n\n    // In Universal, we don't have access to `nodeName`, but the same can be achieved with `name`.\n    // Note that this shouldn't be necessary once Angular switches to an API that resembles the\n    // DOM closer.\n    let nodeName = this._platform.isBrowser ? nativeElement.nodeName : nativeElement.name;\n    return nodeName ? nodeName.toLowerCase() === 'textarea' : false;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n        !this.autofilled;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return this.focused || !this.empty; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() { this.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {AutofillMonitor, MatAutofill} from './autofill';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\n\n\n@NgModule({\n  declarations: [\n    MatAutofill,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  imports: [\n    CommonModule,\n    MatFormFieldModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatAutofill,\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher, AutofillMonitor],\n})\nexport class MatInputModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable()\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel: string = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel: string = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel: string = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel: string = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel: string = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel: string = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel: string = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel: string = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel: string = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  NgZone,\n} from '@angular/core';\nimport {take} from 'rxjs/operators/take';\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'attr.aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** Whether to allow selection of disabled cells. */\n  @Input() allowDisabledSelection = false;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  constructor(private _elementRef: ElementRef, private _ngZone: NgZone) { }\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (!this.allowDisabledSelection && !cell.enabled) {\n      return;\n    }\n    this.selectedValueChange.emit(cell.value);\n  }\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  get _firstRowOffset(): number {\n    return this.rows && this.rows.length && this.rows[0].length ?\n        this.numCols - this.rows[0].length : 0;\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._elementRef.nativeElement.querySelector('.mat-calendar-body-active').focus();\n      });\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody;\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n    this._focusActiveCell();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n\n    const isRtl = this._isRtl();\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n              this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n          this._dateSelected(this._dateAdapter.getDate(this._activeDate));\n          this._userSelection.emit();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  private _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(\n            this._dateAdapter.getYear(this.activeDate),\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const enabled = this._shouldEnableDate(date);\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));\n    }\n  }\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterViewInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nexport class MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatCheckboxMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://www.google.com/design/spec/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewInit, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  private _required: boolean;\n\n  /**\n   * Whether or not the checkbox should appear before or after the label.\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Input()\n  get align(): 'start' | 'end' {\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\n    // label relative to the checkbox. As such, they are inverted.\n    return this.labelPosition == 'after' ? 'start' : 'end';\n  }\n  set align(value: 'start' | 'end') {\n    this.labelPosition = (value == 'start') ? 'after' : 'before';\n  }\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change: EventEmitter<MatCheckboxChange> =\n      new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  _onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Reference to the focused state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value != this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked: boolean = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean { return this._indeterminate; }\n  set indeterminate(value: boolean) {\n    const changed = value != this._indeterminate;\n    this._indeterminate = value;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n  private _indeterminate: boolean = false;\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the checkbox changes.\n    // Since the checkbox uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n    }\n  }\n\n  private _emitChangeEvent() {\n    let event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this.ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      this._removeFocusRipple();\n      this._onTouched();\n    }\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n\n  /** Fades out the focus state ripple. */\n  private _removeFocusRipple(): void {\n    if (this._focusRipple) {\n      this._focusRipple.fadeOut();\n      this._focusRipple = null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {MatRippleModule, MatCommonModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, ObserversModule, A11yModule],\n  exports: [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule],\n  declarations: [MatCheckbox, MatCheckboxRequiredValidator],\n})\nexport class MatCheckboxModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget\n} from '@angular/material/core';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nexport class MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatChipMixinBase =\n    mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\n\nconst CHIP_ATTRIBUTE_NAMES = ['mat-basic-chip'];\n\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-avatar, [matChipAvatar]',\n  host: {'class': 'mat-chip-avatar'}\n})\nexport class MatChipAvatar {}\n\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n  host: {'class': 'mat-chip-trailing-icon'}\n})\nexport class MatChipTrailingIcon {}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled', 'disableRipple'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[class.mat-chip-with-avatar]': 'avatar',\n    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[class.mat-chip-disabled]': 'disabled',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_hasFocus = true',\n    '(blur)': '_blur()',\n  },\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable, CanDisableRipple, RippleTarget {\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /** Reference to the RippleRenderer for the chip. */\n  private _chipRipple: RippleRenderer;\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple;\n  }\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether the chip list is selectable */\n  chipListSelectable: boolean = true;\n\n  /** The chip avatar */\n  @ContentChild(MatChipAvatar) avatar: MatChipAvatar;\n\n  /** The chip's trailing icon. */\n  @ContentChild(MatChipTrailingIcon) trailingIcon: MatChipTrailingIcon;\n\n  /** The chip's remove toggler. */\n  @ContentChild(forwardRef(() => MatChipRemove)) removeIcon: MatChipRemove;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) {\n    this._selected = coerceBooleanProperty(value);\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: value\n    });\n  }\n  protected _selected: boolean = false;\n\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n  @Input()\n  get value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(value: any) { this._value = value; }\n  protected _value: any;\n\n  /**\n   * Whether or not the chip is selectable. When a chip is not selectable,\n   * changes to it's selected state are always ignored. By default a chip is\n   * selectable, and it becomes non-selectable if it's parent chip list is\n   * not selectable.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable && this.chipListSelectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  protected _selectable: boolean = true;\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (remove) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  protected _removable: boolean = true;\n\n  /** Emits when the chip is focused. */\n  readonly _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  readonly _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\n      new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /**\n   * Emitted when the chip is destroyed.\n   * @deprecated Use 'destroyed' instead.\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly destroy: EventEmitter<MatChipEvent> = this.destroyed;\n\n  /** Emitted when a chip is to be removed. */\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /**\n   * Emitted when a chip is to be removed.\n   * @deprecated Use `removed` instead.\n   * @deletion-target 6.0.0\n   */\n  @Output('remove') onRemove: EventEmitter<MatChipEvent> = this.removed;\n\n  /** The ARIA selected applied to the chip. */\n  get ariaSelected(): string | null {\n    return this.selectable ? this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions) {\n    super(_elementRef);\n\n    this._addHostClassName();\n\n    this._chipRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._chipRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    if (globalOptions) {\n      this.rippleConfig = {\n        speedFactor: globalOptions.baseSpeedFactor,\n        animation: globalOptions.animation,\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n      };\n    }\n  }\n\n  _addHostClassName() {\n    // Add class for the different chips\n    for (const attr of CHIP_ATTRIBUTE_NAMES) {\n      if (this._elementRef.nativeElement.hasAttribute(attr) ||\n        this._elementRef.nativeElement.tagName.toLowerCase() === attr) {\n        (this._elementRef.nativeElement as HTMLElement).classList.add(attr);\n        return;\n      }\n    }\n    (this._elementRef.nativeElement as HTMLElement).classList.add('mat-standard-chip');\n  }\n\n  ngOnDestroy() {\n    this.destroyed.emit({chip: this});\n    this._chipRipple._removeTriggerEvents();\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    this._selected = true;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: true\n    });\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    this._selected = false;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: false\n    });\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    this._selected = true;\n    // Emit select event when selected changes.\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: true,\n      selected: true\n    });\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n    this._onFocus.next({chip: this});\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Ensures events fire properly upon click. */\n  _handleClick(event: Event) {\n    // Check disabled\n    if (this.disabled) {\n      return;\n    }\n\n    event.preventDefault();\n    event.stopPropagation();\n\n    this.focus();\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    this._hasFocus = false;\n    this._onBlur.next({chip: this});\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove mat-chip-trailing-icon',\n    '(click)': '_handleClick()',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {\n  }\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(): void {\n    if (this._parentChip.removable) {\n      this._parentChip.remove();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {CanUpdateErrorState, ErrorStateMatcher, mixinErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Observable} from 'rxjs/Observable';\nimport {merge} from 'rxjs/observable/merge';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipInput} from './chip-input';\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nexport class MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatChipListMixinBase = mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for it's similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': '_tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)',\n    '[id]': '_uid',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n  ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly controlType: string = 'mat-chip-list';\n\n  /** When a chip is destroyed, we track the index so we can focus the appropriate next chip. */\n  protected _lastDestroyedIndex: number|null = null;\n\n  /** Track which chips we're listening to for focus/destruction. */\n  protected _chipSet: WeakMap<MatChip, boolean> = new WeakMap();\n\n  /** Subscription to tabbing out from the chip list. */\n  private _tabOutSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the chip list. */\n  private _changeSubscription: Subscription;\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription | null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription | null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription | null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription | null;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipInput;\n\n  /** Uid of the chip list */\n  _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The ARIA role applied to the chip list. */\n  get role(): string | null { return this.empty ? null : 'listbox'; }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n  private _multiple: boolean = false;\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith(): (o1: any, o2: any) => boolean { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  protected _value: any;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get id(): string {\n    return this._chipInput ? this._chipInput.id : this._uid;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  protected _required: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  protected _placeholder: string;\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return this.chips.some(chip => chip._hasFocus) ||\n      (this._chipInput && this._chipInput.focused);\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  protected _disabled: boolean = false;\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip list is selectable. When a chip list is not selectable,\n   * the selected states for all the chips inside the chip list are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n    if (this.chips) {\n      this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n    }\n  }\n  protected _selectable: boolean = true;\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroy));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipListChange> =\n      new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips)\n      .withWrap()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._tabOutSubscription = this._keyManager.tabOut.subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => this._tabIndex = this._userTabIndex || 0);\n    });\n\n    // When the list changes, re-subscribe\n    this._changeSubscription = this.chips.changes.pipe(startWith(null)).subscribe(() => {\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabOutSubscription.unsubscribe();\n\n    if (this._changeSubscription) {\n      this._changeSubscription.unsubscribe();\n    }\n\n    if (this._chipRemoveSubscription) {\n      this._chipRemoveSubscription.unsubscribe();\n    }\n\n    this._dropSubscriptions();\n    this.stateChanges.complete();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipInput): void {\n    this._chipInput = inputElement;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._elementRef.nativeElement.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() { this.focus(); }\n\n  /**\n   * Focuses the the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(): void {\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput();\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput() {\n    if (this._chipInput) {\n      this._chipInput.focus();\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    const target = event.target as HTMLElement;\n\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n    } else if (target && target.classList.contains('mat-chip')) {\n      this._keyManager.onKeydown(event);\n      this.stateChanges.next();\n    }\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * Update key manager's active item when chip is deleted.\n   * If the deleted chip is the last chip in chip list, focus the new last chip.\n   * Otherwise focus the next chip in the list.\n   * Save `_lastDestroyedIndex` so we can set the correct focus.\n   */\n  protected _updateKeyManager(chip: MatChip) {\n    let chipIndex: number = this.chips.toArray().indexOf(chip);\n    if (this._isValidIndex(chipIndex)) {\n      if (chip._hasFocus) {\n        // Check whether the chip is not the last item\n        if (chipIndex < this.chips.length - 1) {\n          this._keyManager.setActiveItem(chipIndex);\n        } else if (chipIndex - 1 >= 0) {\n          this._keyManager.setActiveItem(chipIndex - 1);\n        }\n      }\n      if (this._keyManager.activeItemIndex === chipIndex) {\n        this._lastDestroyedIndex = chipIndex;\n      }\n    }\n  }\n\n  /**\n   * Checks to see if a focus chip was recently destroyed so that we can refocus the next closest\n   * one.\n   */\n  protected _updateFocusForDestroyedChips() {\n    let chipsArray = this.chips;\n\n    if (this._lastDestroyedIndex != null && chipsArray.length > 0) {\n      // Check whether the destroyed chip was the last item\n      const newFocusIndex = Math.min(this._lastDestroyedIndex, chipsArray.length - 1);\n      this._keyManager.setActiveItem(newFocusIndex);\n      let focusChip = this._keyManager.activeItem;\n      // Focus the chip\n      if (focusChip) {\n        focusChip.focus();\n      }\n    }\n\n    // Reset our destroyed index\n    this._lastDestroyedIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChip);\n        } else {\n          this._keyManager.updateActiveItem(correspondingChip);\n        }\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n      this._updateKeyManager(event.chip);\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {Directive, ElementRef, EventEmitter, Input, Output} from '@angular/core';\nimport {MatChipList} from './chip-list';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n    '[id]': 'id',\n  }\n})\nexport class MatChipInput {\n  /** Whether the control is focused. */\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  // TODO(tinayuangao): Support Set here\n  @Input('matChipInputSeparatorKeyCodes') separatorKeyCodes: number[] = [ENTER];\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /** The input's placeholder text. */\n  @Input() placeholder: string = '';\n\n  /** Unique id for the input. */\n  @Input() id: string = `mat-chip-list-input-${nextUniqueId++}`;\n\n  /** Whether the input is empty. */\n  get empty(): boolean { return !this._inputElement.value; }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(protected _elementRef: ElementRef) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this.separatorKeyCodes.indexOf(event.keyCode) > -1) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  /** Focuses the input. */\n  focus(): void { this._inputElement.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChip, MatChipAvatar, MatChipRemove, MatChipTrailingIcon} from './chip';\nimport {MatChipInput} from './chip-input';\nimport {MatChipList} from './chip-list';\n\nconst CHIP_DECLARATIONS = [\n  MatChipList,\n  MatChip,\n  MatChipInput,\n  MatChipRemove,\n  MatChipAvatar,\n  MatChipTrailingIcon,\n];\n\n@NgModule({\n  imports: [PlatformModule],\n  exports: CHIP_DECLARATIONS,\n  declarations: CHIP_DECLARATIONS,\n  providers: [ErrorStateMatcher]\n})\nexport class MatChipsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking outside to close a modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction;\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /** Whether the dialog should close when the user goes backwards/forwards in history. */\n  closeOnNavigation?: boolean = true;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by MatDialog. */\nexport const matDialogAnimations: {\n  readonly slideDialog: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  slideDialog: trigger('slideDialog', [\n    // Note: The `enter` animation doesn't transition to something like `translate3d(0, 0, 0)\n    // scale(1)`, because for some reason specifying the transform explicitly, causes IE both\n    // to blur the dialog content and decimate the animation performance. Leaving it as `none`\n    // solves both issues.\n    state('enter', style({ transform: 'none', opacity: 1 })),\n    state('void', style({ transform: 'translate3d(0, 25%, 0) scale(0.9)', opacity: 0 })),\n    state('exit', style({ transform: 'translate3d(0, 25%, 0)', opacity: 0 })),\n    transition('* => *', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n/** Default color palette for flat buttons (mat-flat-button) */\nconst DEFAULT_FLAT_BUTTON_COLOR = 'primary';\n\n/**\n * List of classes to add to MatButton instances based on host attributes to\n * style as different variants.\n */\nconst BUTTON_HOST_ATTRIBUTES = [\n  'mat-button',\n  'mat-flat-button',\n  'mat-icon-button',\n  'mat-raised-button',\n  'mat-stroked-button',\n  'mat-mini-fab',\n  'mat-fab',\n];\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nexport class MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatButtonMixinBase = mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\n             button[mat-flat-button]`,\n  exportAs: 'matButton',\n  host: {\n    '[disabled]': 'disabled || null',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n\n  /** Whether the button is round. */\n  _isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  _isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor) {\n    super(elementRef);\n\n    // For each of the variant selectors that is prevent in the button's host\n    // attributes, add the correct corresponding class.\n    for (const attr of BUTTON_HOST_ATTRIBUTES) {\n      if (this._hasHostAttributes(attr)) {\n        (elementRef.nativeElement as HTMLElement).classList.add(attr);\n      }\n    }\n\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n\n    if (this._isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    } else if (this._hasHostAttributes('mat-flat-button')) {\n      this.color = DEFAULT_FLAT_BUTTON_COLOR;\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    // If not on the browser, say that there are none of the attributes present.\n    // Since these only affect how the ripple displays (and ripples only happen on the client),\n    // detecting these attributes isn't necessary when not on the browser.\n    if (!this._platform.isBrowser) {\n      return false;\n    }\n\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Raised Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n  constructor(\n      platform: Platform,\n      focusMonitor: FocusMonitor,\n      elementRef: ElementRef) {\n    super(elementRef, platform, focusMonitor);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {\n  MatAnchor,\n  MatButton,\n} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n    A11yModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n// Boilerplate for applying mixins to MatButtonToggleGroup and MatButtonToggleGroupMultiple\n/** @docs-private */\nexport class MatButtonToggleGroupBase {}\nexport const _MatButtonToggleGroupMixinBase = mixinDisabled(MatButtonToggleGroupBase);\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  /** The MatButtonToggle that emits the event. */\n  source: MatButtonToggle | null;\n  /** The value assigned to the MatButtonToggle. */\n  value: any;\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group:not([multiple])',\n  providers: [MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR],\n  inputs: ['disabled'],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-button-toggle-group',\n    '[class.mat-button-toggle-vertical]': 'vertical'\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup extends _MatButtonToggleGroupMixinBase\n    implements ControlValueAccessor, CanDisable {\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateButtonToggleNames();\n  }\n  private _name: string = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value != value) {\n      this._value = value;\n      this.valueChange.emit(value);\n      this._updateSelectedButtonToggleFromValue();\n    }\n  }\n  private _value: any = null;\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() readonly valueChange = new EventEmitter<any>();\n\n  /** The currently selected button toggle, should match the value. */\n  @Input()\n  get selected(): MatButtonToggle | null { return this._selected; }\n  set selected(selected: MatButtonToggle | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n\n    if (selected && !selected.checked) {\n      selected.checked = true;\n    }\n  }\n  private _selected: MatButtonToggle | null = null;\n\n  /** Event emitted when the group's value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  private _updateButtonToggleNames(): void {\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach((toggle) => {\n        toggle.name = this._name;\n      });\n    }\n  }\n\n  // TODO: Refactor into shared code with radio.\n  private _updateSelectedButtonToggleFromValue(): void {\n    let isAlreadySelected = this._selected != null && this._selected.value == this._value;\n\n    if (this._buttonToggles != null && !isAlreadySelected) {\n      let matchingButtonToggle = this._buttonToggles.filter(\n          buttonToggle => buttonToggle.value == this._value)[0];\n\n      if (matchingButtonToggle) {\n        this.selected = matchingButtonToggle;\n      } else if (this.value == null) {\n        this.selected = null;\n        this._buttonToggles.forEach(buttonToggle => {\n          buttonToggle.checked = false;\n        });\n      }\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    let event = new MatButtonToggleChange();\n    event.source = this._selected;\n    event.value = this._value;\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._markButtonTogglesForCheck();\n  }\n\n  private _markButtonTogglesForCheck() {\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach((toggle) => toggle._markForCheck());\n    }\n  }\n}\n\n/** Multiple selection button-toggle group. `ngModel` is not supported in this mode. */\n@Directive({\n  selector: 'mat-button-toggle-group[multiple]',\n  exportAs: 'matButtonToggleGroup',\n  inputs: ['disabled'],\n  host: {\n    'class': 'mat-button-toggle-group',\n    '[class.mat-button-toggle-vertical]': 'vertical',\n    'role': 'group'\n  }\n})\nexport class MatButtonToggleGroupMultiple extends _MatButtonToggleGroupMixinBase\n    implements CanDisable {\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n}\n\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nexport class MatButtonToggleBase {}\nexport const _MatButtonToggleMixinBase = mixinDisableRipple(MatButtonToggleBase);\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disableRipple'],\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup && !buttonToggleGroupMultiple',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    'class': 'mat-button-toggle',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatButtonToggle extends _MatButtonToggleMixinBase\n    implements OnInit, OnDestroy, CanDisableRipple {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  /** Whether or not the button toggle is a single selection. */\n  private _isSingleSelector: boolean = false;\n\n  /** Unregister function for _buttonToggleDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** The parent button toggle group (multiple selection). Optional. */\n  buttonToggleGroupMultiple: MatButtonToggleGroupMultiple;\n\n  /** Unique ID for the underlying `input` element. */\n  get inputId(): string { return `${this.id}-input`; }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (this._isSingleSelector && value) {\n      // Notify all button toggles with the same name (in the same group) to un-check.\n      this._buttonToggleDispatcher.notify(this.id, this.name);\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._checked = value;\n\n    if (value && this._isSingleSelector && this.buttonToggleGroup.value != this.value) {\n      this.buttonToggleGroup.selected = this;\n    }\n  }\n  private _checked: boolean = false;\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value != value) {\n      if (this.buttonToggleGroup != null && this.checked) {\n        this.buttonToggleGroup.value = value;\n      }\n      this._value = value;\n    }\n  }\n  private _value: any = null;\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup != null && this.buttonToggleGroup.disabled) ||\n        (this.buttonToggleGroupMultiple != null && this.buttonToggleGroupMultiple.disabled);\n  }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Event emitted when the group value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              @Optional() toggleGroupMultiple: MatButtonToggleGroupMultiple,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _buttonToggleDispatcher: UniqueSelectionDispatcher,\n              private _elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor) {\n    super();\n\n    this.buttonToggleGroup = toggleGroup;\n    this.buttonToggleGroupMultiple = toggleGroupMultiple;\n\n    if (this.buttonToggleGroup) {\n      this._removeUniqueSelectionListener =\n        _buttonToggleDispatcher.listen((id: string, name: string) => {\n          if (id != this.id && name == this.name) {\n            this.checked = false;\n            this._changeDetectorRef.markForCheck();\n          }\n        });\n\n      this._type = 'radio';\n      this.name = this.buttonToggleGroup.name;\n      this._isSingleSelector = true;\n    } else {\n      // Even if there is no group at all, treat the button toggle as a checkbox so it can be\n      // toggled on or off.\n      this._type = 'checkbox';\n      this._isSingleSelector = false;\n    }\n  }\n\n  ngOnInit() {\n    if (this.id == null) {\n      this.id = `mat-button-toggle-${_uniqueIdCounter++}`;\n    }\n\n    if (this.buttonToggleGroup && this._value == this.buttonToggleGroup.value) {\n      this._checked = true;\n    }\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._inputElement.nativeElement.focus();\n  }\n\n  /** Toggle the state of the current button toggle. */\n  private _toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native input. */\n  _onInputChange(event: Event) {\n    event.stopPropagation();\n\n    if (this._isSingleSelector) {\n      // Propagate the change one-way via the group, which will in turn mark this\n      // button toggle as checked.\n      let groupValueChanged = this.buttonToggleGroup.selected != this;\n      this.checked = true;\n      this.buttonToggleGroup.selected = this;\n      this.buttonToggleGroup._onTouched();\n      if (groupValueChanged) {\n        this.buttonToggleGroup._emitChangeEvent();\n      }\n    } else {\n      this._toggle();\n    }\n\n    // Emit a change event when the native input does.\n    this._emitChangeEvent();\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    let event = new MatButtonToggleChange();\n    event.source = this;\n    event.value = this._value;\n    this.change.emit(event);\n  }\n\n  // Unregister buttonToggleDispatcherListener on destroy\n  ngOnDestroy() {\n    this._removeUniqueSelectionListener();\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update button toggle's status\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatButtonToggleGroup, MatButtonToggleGroupMultiple, MatButtonToggle} from './button-toggle';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {UNIQUE_SELECTION_DISPATCHER_PROVIDER} from '@angular/cdk/collections';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n\n@NgModule({\n  imports: [MatCommonModule, MatRippleModule, A11yModule],\n  exports: [\n    MatButtonToggleGroup,\n    MatButtonToggleGroupMultiple,\n    MatButtonToggle,\n    MatCommonModule,\n  ],\n  declarations: [MatButtonToggleGroup, MatButtonToggleGroupMultiple, MatButtonToggle],\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER]\n})\nexport class MatButtonToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n} from '@angular/core';\n\n\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-content',\n  host: {'class': 'mat-card-content'}\n})\nexport class MatCardContent {}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n})\nexport class MatCardTitle {}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n})\nexport class MatCardSubtitle {}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-actions',\n  exportAs: 'matCardActions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n})\nexport class MatCardActions {\n  /** Position of the actions inside the card. */\n  @Input() align: 'start' | 'end' = 'start';\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n})\nexport class MatCardFooter {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-image], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n})\nexport class MatCardImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n})\nexport class MatCardSmImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-md-image], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n})\nexport class MatCardMdImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n})\nexport class MatCardLgImage {}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n})\nexport class MatCardXlImage {}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-avatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n})\nexport class MatCardAvatar {}\n\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card',\n  exportAs: 'matCard',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card'}\n})\nexport class MatCard {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n})\nexport class MatCardHeader {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n})\nexport class MatCardTitleGroup {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatCard,\n  MatCardHeader,\n  MatCardTitleGroup,\n  MatCardContent,\n  MatCardTitle,\n  MatCardSubtitle,\n  MatCardActions,\n  MatCardFooter,\n  MatCardSmImage,\n  MatCardMdImage,\n  MatCardLgImage,\n  MatCardImage,\n  MatCardXlImage,\n  MatCardAvatar,\n} from './card';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatCard,\n    MatCardHeader,\n    MatCardTitleGroup,\n    MatCardContent,\n    MatCardTitle,\n    MatCardSubtitle,\n    MatCardActions,\n    MatCardFooter,\n    MatCardSmImage,\n    MatCardMdImage,\n    MatCardLgImage,\n    MatCardImage,\n    MatCardXlImage,\n    MatCardAvatar,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n    MatCardXlImage, MatCardAvatar,\n  ],\n})\nexport class MatCardModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER,\n} from './autocomplete-trigger';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [MatAutocomplete, MatOptionModule, MatAutocompleteTrigger, MatCommonModule],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger],\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER],\n})\nexport class MatAutocompleteModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, ElementRef, Inject, Optional, NgZone, OnDestroy} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ThemePalette} from '@angular/material/core';\nimport {AriaDescriber} from '@angular/cdk/a11y';\nimport {DOCUMENT} from '@angular/common';\n\nlet nextId = 0;\n\nexport type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after';\nexport type MatBadgeSize = 'small' | 'medium' | 'large';\n\n/** Directive to display a text badge. */\n@Directive({\n  selector: '[matBadge]',\n  host: {\n    'class': 'mat-badge',\n    '[class.mat-badge-overlap]': 'overlap',\n    '[class.mat-badge-above]': 'isAbove()',\n    '[class.mat-badge-below]': '!isAbove()',\n    '[class.mat-badge-before]': '!isAfter()',\n    '[class.mat-badge-after]': 'isAfter()',\n    '[class.mat-badge-small]': 'size === \"small\"',\n    '[class.mat-badge-medium]': 'size === \"medium\"',\n    '[class.mat-badge-large]': 'size === \"large\"',\n    '[class.mat-badge-hidden]': 'hidden',\n  },\n})\nexport class MatBadge implements OnDestroy {\n\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n  @Input('matBadgeColor')\n  get color(): ThemePalette { return this._color; }\n  set color(value: ThemePalette) {\n    this._setColor(value);\n    this._color = value;\n  }\n  private _color: ThemePalette = 'primary';\n\n  /** Whether the badge should overlap its contents or not */\n  @Input('matBadgeOverlap')\n  get overlap(): boolean { return this._overlap; }\n  set overlap(val: boolean) {\n    this._overlap = coerceBooleanProperty(val);\n  }\n  private _overlap: boolean = true;\n\n  /**\n   * Position the badge should reside.\n   * Accepts any combination of 'above'|'below' and 'before'|'after'\n   */\n  @Input('matBadgePosition') position: MatBadgePosition = 'above after';\n\n  /** The content for the badge */\n  @Input('matBadge')\n  get content(): string { return this._content; }\n  set content(val: string) {\n    this._content = val;\n    this._updateTextContent();\n  }\n  private _content: string;\n\n  /** Message used to describe the decorated element via aria-describedby */\n  @Input('matBadgeDescription')\n  get description(): string { return this._description; }\n  set description(newDescription: string) {\n    if (newDescription !== this._description) {\n      this._updateHostAriaDescription(newDescription, this._description);\n      this._description = newDescription;\n    }\n  }\n  private _description: string;\n\n  /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n  @Input('matBadgeSize') size: MatBadgeSize = 'medium';\n\n  /** Whether the badge is hidden. */\n  @Input('matBadgeHidden')\n  get hidden(): boolean { return this._hidden; }\n  set hidden(val: boolean) {\n    this._hidden = coerceBooleanProperty(val);\n  }\n  private _hidden: boolean;\n\n  /** Unique id for the badge */\n  _id: number = nextId++;\n\n  private _badgeElement: HTMLElement;\n\n  constructor(\n      @Optional() @Inject(DOCUMENT) private _document: any,\n      private _ngZone: NgZone,\n      private _elementRef: ElementRef,\n      private _ariaDescriber: AriaDescriber) {}\n\n  /** Whether the badge is above the host or not */\n  isAbove(): boolean {\n    return this.position.indexOf('below') === -1;\n  }\n\n  /** Whether the badge is after the host or not */\n  isAfter(): boolean {\n    return this.position.indexOf('before') === -1;\n  }\n\n  ngOnDestroy() {\n    if (this.description && this._badgeElement) {\n      this._ariaDescriber.removeDescription(this._badgeElement, this.description);\n    }\n  }\n\n  /** Injects a span element into the DOM with the content. */\n  private _updateTextContent(): HTMLSpanElement {\n    if (!this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n    } else {\n      this._badgeElement.textContent = this.content;\n    }\n    return this._badgeElement;\n  }\n\n  /** Creates the badge element */\n  private _createBadgeElement(): HTMLElement {\n    const badgeElement = this._document.createElement('span');\n    const activeClass = 'mat-badge-active';\n\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n    badgeElement.classList.add('mat-badge-content');\n    badgeElement.textContent = this.content;\n\n    if (this.description) {\n      badgeElement.setAttribute('aria-label', this.description);\n    }\n\n    this._elementRef.nativeElement.appendChild(badgeElement);\n\n    // animate in after insertion\n    if (typeof requestAnimationFrame === 'function') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          badgeElement.classList.add(activeClass);\n        });\n      });\n    } else {\n      badgeElement.classList.add(activeClass);\n    }\n\n    return badgeElement;\n  }\n\n  /** Sets the aria-label property on the element */\n  private _updateHostAriaDescription(newDescription: string, oldDescription: string): void {\n    // ensure content available before setting label\n    const content = this._updateTextContent();\n\n    if (oldDescription) {\n      this._ariaDescriber.removeDescription(content, oldDescription);\n    }\n\n    if (newDescription) {\n      this._ariaDescriber.describe(content, newDescription);\n    }\n  }\n\n  /** Adds css theme class given the color to the component host */\n  private _setColor(colorPalette: ThemePalette) {\n    if (colorPalette !== this._color) {\n      if (this._color) {\n        this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\n      }\n      if (colorPalette) {\n        this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatBadge} from './badge';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    A11yModule,\n  ],\n  exports: [\n    MatBadge,\n  ],\n  declarations: [\n    MatBadge,\n  ],\n})\nexport class MatBadgeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material bottom sheet. */\nexport const matBottomSheetAnimations: {\n  readonly bottomSheetState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a bottom sheet. */\n  bottomSheetState: trigger('state', [\n    state('void, hidden', style({transform: 'translateY(100%)'})),\n    state('visible', style({transform: 'translateY(0%)'})),\n    transition('visible => void, visible => hidden',\n        animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible',\n        animate(`${AnimationDurations.EXITING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  EventEmitter,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {MatBottomSheetConfig} from './bottom-sheet-config';\nimport {matBottomSheetAnimations} from './bottom-sheet-animations';\nimport {Subscription} from 'rxjs/Subscription';\nimport {DOCUMENT} from '@angular/common';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\n\n// TODO(crisbeto): consolidate some logic between this, MatDialog and MatSnackBar\n\n/**\n * Internal component that wraps user-provided bottom sheet content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-bottom-sheet-container',\n  templateUrl: 'bottom-sheet-container.html',\n  styleUrls: ['bottom-sheet-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matBottomSheetAnimations.bottomSheetState],\n  host: {\n    'class': 'mat-bottom-sheet-container',\n    'tabindex': '-1',\n    'role': 'dialog',\n    '[attr.aria-label]': 'bottomSheetConfig?.ariaLabel',\n    '[@state]': '_animationState',\n    '(@state.start)': '_onAnimationStart($event)',\n    '(@state.done)': '_onAnimationDone($event)'\n  },\n})\nexport class MatBottomSheetContainer extends BasePortalOutlet implements OnDestroy {\n  private _breakpointSubscription: Subscription;\n\n  /** The portal outlet inside of this container into which the content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The state of the bottom sheet animations. */\n  _animationState: 'void' | 'visible' | 'hidden' = 'void';\n\n  /** Emits whenever the state of the animation changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** The bottom sheet configuration. */\n  bottomSheetConfig: MatBottomSheetConfig;\n\n  /** The class that traps and manages focus within the bottom sheet. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the bottom sheet was opened. */\n  private _elementFocusedBeforeOpened: HTMLElement | null = null;\n\n  /** Server-side rendering-compatible reference to the global document object. */\n  private _document: Document;\n\n  /** Whether the component has been destroyed. */\n  private _destroyed: boolean;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    breakpointObserver: BreakpointObserver,\n    @Optional() @Inject(DOCUMENT) document: any) {\n    super();\n\n    this._document = document;\n    this._breakpointSubscription = breakpointObserver\n      .observe([Breakpoints.Medium, Breakpoints.Large, Breakpoints.XLarge])\n      .subscribe(() => {\n        this._toggleClass('mat-bottom-sheet-container-medium',\n            breakpointObserver.isMatched(Breakpoints.Medium));\n        this._toggleClass('mat-bottom-sheet-container-large',\n            breakpointObserver.isMatched(Breakpoints.Large));\n        this._toggleClass('mat-bottom-sheet-container-xlarge',\n            breakpointObserver.isMatched(Breakpoints.XLarge));\n      });\n  }\n\n  /** Attach a component portal as content to this bottom sheet container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this bottom sheet container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Begin animation of bottom sheet entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the bottom sheet exiting from view. */\n  exit(): void {\n    if (!this._destroyed) {\n      this._animationState = 'hidden';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._breakpointSubscription.unsubscribe();\n    this._destroyed = true;\n  }\n\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'visible') {\n      this._trapFocus();\n    } else if (event.toState === 'hidden') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  private _toggleClass(cssClass: string, add: boolean) {\n    const classList = this._elementRef.nativeElement.classList;\n    add ? classList.add(cssClass) : classList.remove(cssClass);\n  }\n\n  private _validatePortalAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach bottom sheet content after content is already attached');\n    }\n  }\n\n  private _setPanelClass() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClass = this.bottomSheetConfig.panelClass;\n\n    if (Array.isArray(panelClass)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      panelClass.forEach(cssClass => element.classList.add(cssClass));\n    } else if (panelClass) {\n      element.classList.add(panelClass);\n    }\n  }\n\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    this._focusTrap.focusInitialElementWhenReady();\n  }\n\n  /** Restores focus to the element that was focused before the bottom sheet opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the bottom sheet was opened. */\n  private _savePreviouslyFocusedElement() {\n    this._elementFocusedBeforeOpened = this._document.activeElement as HTMLElement;\n    Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a bottom sheet. */\nexport const MAT_BOTTOM_SHEET_DATA = new InjectionToken<any>('MatBottomSheetData');\n\n/**\n * Configuration used when opening a bottom sheet.\n */\nexport class MatBottomSheetConfig<D = any> {\n  /** The view container to place the overlay for the bottom sheet into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** Extra CSS classes to be added to the bottom sheet container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the bottom sheet. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Whether the bottom sheet has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop. */\n  backdropClass?: string;\n\n  /** Whether the user can use escape or clicking outside to close the bottom sheet. */\n  disableClose?: boolean = false;\n\n  /** Aria label to assign to the bottom sheet element. */\n  ariaLabel?: string | null = null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {merge} from 'rxjs/observable/merge';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n/**\n * Reference to a bottom sheet dispatched from the bottom sheet service.\n */\nexport class MatBottomSheetRef<T = any, R = any> {\n  /** Instance of the component making up the content of the bottom sheet. */\n  instance: T;\n\n  /**\n   * Instance of the component into which the bottom sheet content is projected.\n   * @docs-private\n   */\n  containerInstance: MatBottomSheetContainer;\n\n  /** Subject for notifying the user that the bottom sheet has been dismissed. */\n  private readonly _afterDismissed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the bottom sheet has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Result to be passed down to the `afterDismissed` stream. */\n  private _result: R | undefined;\n\n  constructor(containerInstance: MatBottomSheetContainer, private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n\n    // Emit when opening animation completes\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'visible'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'hidden'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._overlayRef.dispose();\n      this._afterDismissed.next(this._result);\n      this._afterDismissed.complete();\n    });\n\n    if (!containerInstance.bottomSheetConfig.disableClose) {\n      merge(\n        _overlayRef.backdropClick(),\n        _overlayRef._keydownEvents.pipe(filter(event => event.keyCode === ESCAPE))\n      ).subscribe(() => this.dismiss());\n    }\n  }\n\n  /**\n   * Dismisses the bottom sheet.\n   * @param result Data to be passed back to the bottom sheet opener.\n   */\n  dismiss(result?: R): void {\n    if (!this._afterDismissed.closed) {\n      // Transition the backdrop in parallel to the bottom sheet.\n      this.containerInstance._animationStateChanged.pipe(\n        filter(event => event.phaseName === 'start'),\n        take(1)\n      ).subscribe(() => this._overlayRef.detachBackdrop());\n\n      this._result = result;\n      this.containerInstance.exit();\n    }\n  }\n\n  /** Gets an observable that is notified when the bottom sheet is finished closing. */\n  afterDismissed(): Observable<R | undefined> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the bottom sheet has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, TemplatePortal, ComponentType, PortalInjector} from '@angular/cdk/portal';\nimport {ComponentRef, TemplateRef, Injectable, Injector, Optional, SkipSelf} from '@angular/core';\nimport {MatBottomSheetConfig, MAT_BOTTOM_SHEET_DATA} from './bottom-sheet-config';\nimport {MatBottomSheetRef} from './bottom-sheet-ref';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Directionality} from '@angular/cdk/bidi';\n\n/**\n * Service to trigger Material Design bottom sheets.\n */\n@Injectable()\nexport class MatBottomSheet {\n  private _bottomSheetRefAtThisLevel: MatBottomSheetRef<any> | null = null;\n\n  /** Reference to the currently opened bottom sheet. */\n  get _openedBottomSheetRef(): MatBottomSheetRef<any> | null {\n    const parent = this._parentBottomSheet;\n    return parent ? parent._openedBottomSheetRef : this._bottomSheetRefAtThisLevel;\n  }\n\n  set _openedBottomSheetRef(value: MatBottomSheetRef<any> | null) {\n    if (this._parentBottomSheet) {\n      this._parentBottomSheet._openedBottomSheetRef = value;\n    } else {\n      this._bottomSheetRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() @SkipSelf() private _parentBottomSheet: MatBottomSheet) {}\n\n  open<T, D = any, R = any>(component: ComponentType<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n  open<T, D = any, R = any>(template: TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R> {\n\n    const _config = _applyConfigDefaults(config);\n    const overlayRef = this._createOverlay(_config);\n    const container = this._attachContainer(overlayRef, _config);\n    const ref = new MatBottomSheetRef<T, R>(container, overlayRef);\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      container.attachTemplatePortal(new TemplatePortal<T>(componentOrTemplateRef, null!, {\n        $implicit: _config.data,\n        bottomSheetRef: ref\n      } as any));\n    } else {\n      const portal = new ComponentPortal(componentOrTemplateRef, undefined,\n            this._createInjector(_config, ref));\n      const contentRef = container.attachComponentPortal(portal);\n      ref.instance = contentRef.instance;\n    }\n\n    // When the bottom sheet is dismissed, clear the reference to it.\n    ref.afterDismissed().subscribe(() => {\n      // Clear the bottom sheet ref if it hasn't already been replaced by a newer one.\n      if (this._openedBottomSheetRef == ref) {\n        this._openedBottomSheetRef = null;\n      }\n    });\n\n    if (this._openedBottomSheetRef) {\n      // If a bottom sheet is already in view, dismiss it and enter the\n      // new bottom sheet after exit animation is complete.\n      this._openedBottomSheetRef.afterDismissed().subscribe(() => ref.containerInstance.enter());\n      this._openedBottomSheetRef.dismiss();\n    } else {\n      // If no bottom sheet is in view, enter the new bottom sheet.\n      ref.containerInstance.enter();\n    }\n\n    this._openedBottomSheetRef = ref;\n\n    return ref;\n  }\n\n  /**\n   * Dismisses the currently-visible bottom sheet.\n   */\n  dismiss(): void {\n    if (this._openedBottomSheetRef) {\n      this._openedBottomSheetRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the bottom sheet container component to the overlay.\n   */\n  private _attachContainer(overlayRef: OverlayRef,\n                           config: MatBottomSheetConfig): MatBottomSheetContainer {\n    const containerPortal = new ComponentPortal(MatBottomSheetContainer, config.viewContainerRef);\n    const containerRef: ComponentRef<MatBottomSheetContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.bottomSheetConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified bottom sheet config.\n   */\n  private _createOverlay(config: MatBottomSheetConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig({\n      direction: config.direction,\n      hasBackdrop: config.hasBackdrop,\n      maxWidth: '100%',\n      scrollStrategy: this._overlay.scrollStrategies.block(),\n      positionStrategy: this._overlay.position()\n        .global()\n        .centerHorizontally()\n        .bottom('0')\n    });\n\n    if (config.backdropClass) {\n      overlayConfig.backdropClass = config.backdropClass;\n    }\n\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a bottom sheet component.\n   * @param config Config that was used to create the bottom sheet.\n   * @param bottomSheetRef Reference to the bottom sheet.\n   */\n  private _createInjector<T>(config: MatBottomSheetConfig,\n                             bottomSheetRef: MatBottomSheetRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap();\n\n    injectionTokens.set(MatBottomSheetRef, bottomSheetRef);\n    injectionTokens.set(MAT_BOTTOM_SHEET_DATA, config.data);\n\n    if (!userInjector || !userInjector.get(Directionality, null)) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the bottom sheet config.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(config?: MatBottomSheetConfig): MatBottomSheetConfig {\n  return {...new MatBottomSheetConfig(), ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {LayoutModule} from '@angular/cdk/layout';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\nimport {MatBottomSheet} from './bottom-sheet';\n\n\n@NgModule({\n  imports: [\n    A11yModule,\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PortalModule,\n    LayoutModule,\n  ],\n  exports: [MatBottomSheetContainer, MatCommonModule],\n  declarations: [MatBottomSheetContainer],\n  entryComponents: [MatBottomSheetContainer],\n  providers: [MatBottomSheet],\n})\nexport class MatBottomSheetModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {Subject} from 'rxjs/Subject';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n  AfterViewChecked,\n} from '@angular/core';\nimport {MatOptgroup} from './optgroup';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT =\n    new InjectionToken<MatOptionParentComponent>('MAT_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  styleUrls: ['option.css'],\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption implements AfterViewChecked {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _id = `mat-option-${_uniqueIdCounter++}`;\n  private _mostRecentViewValue = '';\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() { return this._parent && this._parent.multiple; }\n\n  /** The unique ID of the option. */\n  get id(): string { return this._id; }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple() { return this._parent && this._parent.disableRipple; }\n\n  /** Event emitted when the option is selected or deselected. */\n  @Output() readonly onSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n\n  /** Emits when the state of the option changes and any parents have to be notified. */\n  readonly _stateChanges = new Subject<void>();\n\n  constructor(\n    private _element: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() readonly group: MatOptgroup) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    this._selected = true;\n    this._changeDetectorRef.markForCheck();\n    this._emitSelectionChangeEvent();\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    this._selected = false;\n    this._changeDetectorRef.markForCheck();\n    this._emitSelectionChangeEvent();\n  }\n\n  /** Sets focus onto this option. */\n  focus(): void {\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * `Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.`\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  ngAfterViewChecked() {\n    // Since parent components could be using the option's label to display the selected values\n    // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n    // relatively cheap, however we still limit them only to selected options in order to avoid\n    // hitting the DOM too often.\n    if (this._selected) {\n      const viewValue = this.viewValue;\n\n      if (viewValue !== this._mostRecentViewValue) {\n        this._mostRecentViewValue = viewValue;\n        this._stateChanges.next();\n      }\n    }\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function _countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n  optionGroups: QueryList<MatOptgroup>): number {\n\n  if (optionGroups.length) {\n    let optionsArray = options.toArray();\n    let groups = optionGroups.toArray();\n    let groupCounter = 0;\n\n    for (let i = 0; i < optionIndex + 1; i++) {\n      if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n        groupCounter++;\n      }\n    }\n\n    return groupCounter;\n  }\n\n  return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function _getOptionScrollPosition(optionIndex: number, optionHeight: number,\n    currentScrollPosition: number, panelHeight: number): number {\n  const optionOffset = optionIndex * optionHeight;\n\n  if (optionOffset < currentScrollPosition) {\n    return optionOffset;\n  }\n\n  if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n    return Math.max(0, optionOffset - panelHeight + optionHeight);\n  }\n\n  return currentScrollPosition;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n\n@NgModule({\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup]\n})\nexport class MatOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MAT_LABEL_GLOBAL_OPTIONS =\n  new InjectionToken<LabelOptions>('mat-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n  /**\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n   * Default behavior is assumed to be `auto`.\n   */\n  float?: FloatLabelType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the MatFormField. */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs/Observable';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /**\n   * Whether the input is currently in an autofilled state. If property is not present on the\n   * control it is assumed to be false.\n   */\n  readonly autofilled?: boolean;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The placeholder text for an `MatFormField`. */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed the the front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  FloatLabelType,\n  LabelOptions,\n  MAT_LABEL_GLOBAL_OPTIONS,\n  mixinColor,\n  ThemePalette\n} from '@angular/material/core';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {take} from 'rxjs/operators/take';\nimport {MatError} from './error';\nimport {matFormFieldAnimations} from './form-field-animations';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\n\n\nlet nextUniqueId = 0;\nconst floatingLabelScale = 0.75;\nconst outlineGapPadding = 5;\n\n\n// Boilerplate for applying mixins to MatFormField.\n/** @docs-private */\nexport class MatFormFieldBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n\nexport const _MatFormFieldMixinBase = mixinColor(MatFormFieldBase, 'primary');\n\n\nexport type MatFormFieldAppearance = 'legacy' | 'standard' | 'fill' | 'outline';\n\n\nexport interface MatFormFieldDefaultOptions {\n  appearance?: MatFormFieldAppearance;\n}\n\nexport const MAT_FORM_FIELD_DEFAULT_OPTIONS =\n    new InjectionToken<MatFormFieldDefaultOptions>('MAT_FORM_FIELD_DEFAULT_OPTIONS');\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here.\n  // The MatInput styles are fairly minimal so it shouldn't be a big deal for people who\n  // aren't using MatInput.\n  styleUrls: [\n    'form-field.css',\n    'form-field-fill.css',\n    'form-field-legacy.css',\n    'form-field-outline.css',\n    'form-field-standard.css',\n    '../input/input.css',\n  ],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-input-container mat-form-field',\n    '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n    '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n    '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n    '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n    '[class.mat-input-invalid]': '_control.errorState',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-form-field-autofilled]': '_control.autofilled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n  },\n  inputs: ['color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField extends _MatFormFieldMixinBase\n    implements AfterContentInit, AfterContentChecked, AfterViewInit, CanColor {\n  private _labelOptions: LabelOptions;\n\n  /** The form-field appearance style. */\n  @Input()\n  get appearance(): MatFormFieldAppearance {\n    return this._appearance || this._defaultOptions && this._defaultOptions.appearance || 'legacy';\n  }\n  set appearance(value: MatFormFieldAppearance) {\n    this._appearance = value;\n  }\n  _appearance: MatFormFieldAppearance;\n\n  /**\n   * @deprecated Use `color` instead.\n   * @deletion-target 6.0.0\n   */\n  @Input()\n  get dividerColor(): ThemePalette { return this.color; }\n  set dividerColor(value: ThemePalette) { this.color = value; }\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker(): boolean { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: boolean) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat(): boolean {\n    return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat(): boolean { return this.floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel(): string { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  /**\n   * Whether the placeholder should always float, never float or float as the user types.\n   * @deprecated Use floatLabel instead.\n   * @deletion-target 6.0.0\n   */\n  @Input()\n  get floatPlaceholder(): FloatLabelType { return this.floatLabel; }\n  set floatPlaceholder(value: FloatLabelType) { this.floatLabel = value; }\n\n  /**\n   * Whether the label should always float, never float or float as the user types.\n   *\n   * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n   * way to make the floating label emulate the behavior of a standard input placeholder. However\n   * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n   * appearances the `never` option has been disabled in favor of just using the placeholder.\n   */\n  @Input()\n  get floatLabel(): FloatLabelType {\n    return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n  }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  _outlineGapWidth = 0;\n\n  _outlineGapStart = 0;\n\n  /**\n   * @deprecated\n   * @deletion-target 7.0.0\n   */\n  @ViewChild('underline') underlineRef: ElementRef;\n\n  @ViewChild('connectionContainer') _connectionContainerRef: ElementRef;\n  @ViewChild('inputContainer') _inputContainerRef: ElementRef;\n  @ViewChild('label') private _label: ElementRef;\n  @ContentChild(MatFormFieldControl) _control: MatFormFieldControl<any>;\n  @ContentChild(MatPlaceholder) _placeholderChild: MatPlaceholder;\n  @ContentChild(MatLabel) _labelChild: MatLabel;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions,\n      @Optional() private _dir: Directionality,\n      @Optional() @Inject(MAT_FORM_FIELD_DEFAULT_OPTIONS) private _defaultOptions:\n          MatFormFieldDefaultOptions) {\n    super(_elementRef);\n\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n  }\n\n  /**\n   * Gets an ElementRef for the element that a overlay attached to the form-field should be\n   * positioned relative to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._connectionContainerRef || this._elementRef;\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n    if (this._control.controlType) {\n      this._elementRef.nativeElement.classList\n          .add(`mat-form-field-type-${this._control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    this._control.stateChanges.pipe(startWith(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    let ngControl = this._control.ngControl;\n    if (ngControl && ngControl.valueChanges) {\n      ngControl.valueChanges.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    Promise.resolve().then(() => {\n      this.updateOutlineGap();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: string): boolean {\n    let ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && (ngControl as any)[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control && this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this.appearance === 'legacy' && !this._hasLabel() ||\n        this._hasLabel() && !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      this._showAlwaysAnimate = true;\n      this.floatLabel = 'always';\n\n      fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n        this._showAlwaysAnimate = false;\n      });\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align === 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align === 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        let startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        let endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n\n  /**\n   * Updates the width and position of the gap in the outline. Only relevant for the outline\n   * appearance.\n   */\n  updateOutlineGap() {\n    if (this.appearance === 'outline' && this._label && this._label.nativeElement.children.length) {\n      const containerStart = this._getStartEnd(\n          this._connectionContainerRef.nativeElement.getBoundingClientRect());\n      const labelStart = this._getStartEnd(\n          this._label.nativeElement.children[0].getBoundingClientRect());\n      let labelWidth = 0;\n      for (const child of this._label.nativeElement.children) {\n        labelWidth += child.offsetWidth;\n      }\n      this._outlineGapStart = labelStart - containerStart - outlineGapPadding;\n      this._outlineGapWidth = labelWidth * floatingLabelScale + outlineGapPadding * 2;\n    } else {\n      this._outlineGapStart = 0;\n      this._outlineGapWidth = 0;\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Gets the start end of the rect considering the current directionality. */\n  private _getStartEnd(rect: ClientRect): number {\n    return this._dir && this._dir.value === 'rtl' ? rect.right : rect.left;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {MatLabel} from './label';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatHint,\n    MatFormField,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n    MatLabel,\n  ],\n  imports: [\n    CommonModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatError,\n    MatHint,\n    MatFormField,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n    MatLabel,\n  ],\n})\nexport class MatFormFieldModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  ElementRef,\n  Input,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n  EventEmitter,\n  Output,\n  InjectionToken,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {\n  MatOption,\n  MatOptgroup,\n  MAT_OPTION_PARENT_COMPONENT,\n  mixinDisableRipple,\n  CanDisableRipple,\n} from '@angular/material/core';\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected. */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nexport class MatAutocompleteBase {}\nexport const _MatAutocompleteMixinBase = mixinDisableRipple(MatAutocompleteBase);\n\n/** Default `mat-autocomplete` options that can be overridden. */\nexport interface MatAutocompleteDefaultOptions {\n  /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n  autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nexport const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<MatAutocompleteDefaultOptions>('mat-autocomplete-default-options');\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel: boolean = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean { return this._isOpen && this.showPanel; }\n  _isOpen: boolean = false;\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /**\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n   */\n  @Input()\n  get autoActiveFirstOption(): boolean { return this._autoActiveFirstOption; }\n  set autoActiveFirstOption(value: boolean) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  private _autoActiveFirstOption: boolean;\n\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /** Event that is emitted when the autocomplete panel is opened. */\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event that is emitted when the autocomplete panel is closed. */\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(value: string) {\n    if (value && value.length) {\n      value.split(' ').forEach(className => this._classList[className.trim()] = true);\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef,\n\n    // @deletion-target Turn into required param in 6.0.0\n    @Optional() @Inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS)\n        defaults?: MatAutocompleteDefaultOptions) {\n    super();\n\n    this._autoActiveFirstOption = defaults &&\n        typeof defaults.autoActiveFirstOption !== 'undefined' ?\n            defaults.autoActiveFirstOption :\n            false;\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibility state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._classList['mat-autocomplete-visible'] = this.showPanel;\n    this._classList['mat-autocomplete-hidden'] = !this.showPanel;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n}\n\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  /** Whether the component is disabled. */\n  disabled: boolean;\n}\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): Constructor<CanDisable> & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled() { return this._disabled; }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  /** Theme color palette for the component. */\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values. */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(base: T,\n    defaultColor?: ThemePalette): Constructor<CanColor> & T {\n  return class extends base {\n    private _color: ThemePalette;\n\n    get color(): ThemePalette { return this._color; }\n    set color(value: ThemePalette) {\n      const colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  /** Whether ripples are disabled. */\n  disableRipple: boolean;\n}\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T)\n    : Constructor<CanDisableRipple> & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n/** @docs-private */\nexport interface HasTabIndex {\n  /** Tabindex of the component. */\n  tabIndex: number;\n}\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : Constructor<HasTabIndex> & T {\n  return class extends base {\n    private _tabIndex: number = defaultTabIndex;\n\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs/Subject';\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  updateErrorState();\n  readonly stateChanges: Subject<void>;\n  errorState: boolean;\n  errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n  ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n: Constructor<CanUpdateErrorState> & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping\n     * `MatFormField` needs to run change detection.\n     */\n    readonly stateChanges = new Subject<void>();\n\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {Observable} from 'rxjs/Observable';\nimport {Subscriber} from 'rxjs/Subscriber';\n\n/**\n * Mixin that adds an initialized property to a directive which, when subscribed to, will emit a\n * value once markInitialized has been called, which should be done during the ngOnInit function.\n * If the subscription is made after it has already been marked as initialized, then it will trigger\n * an emit immediately.\n * @docs-private\n */\nexport interface HasInitialized {\n  /** Stream that emits once during the directive/component's ngOnInit. */\n  initialized: Observable<void>;\n\n  /**\n   * Sets the state as initialized and must be called during ngOnInit to notify subscribers that\n   * the directive has been initialized.\n   * @docs-private\n   */\n  _markInitialized: () => void;\n}\n\n/** Mixin to augment a directive with an initialized property that will emits when ngOnInit ends. */\nexport function mixinInitialized<T extends Constructor<{}>>(base: T):\n    Constructor<HasInitialized> & T {\n  return class extends base {\n    /** Whether this directive has been marked as initialized. */\n    _isInitialized = false;\n\n    /**\n     * List of subscribers that subscribed before the directive was initialized. Should be notified\n     * during _markInitialized. Set to null after pending subscribers are notified, and should\n     * not expect to be populated after.\n     */\n    _pendingSubscribers: Subscriber<void>[] | null = [];\n\n    /**\n     * Observable stream that emits when the directive initializes. If already initialized, the\n     * subscriber is stored to be notified once _markInitialized is called.\n     */\n    initialized = new Observable<void>(subscriber => {\n      // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify\n      // when _markInitialized is called.\n      if (this._isInitialized) {\n        this._notifySubscriber(subscriber);\n      } else {\n        this._pendingSubscribers!.push(subscriber);\n      }\n    });\n\n    constructor(...args: any[]) { super(...args); }\n\n    /**\n     * Marks the state as initialized and notifies pending subscribers. Should be called at the end\n     * of ngOnInit.\n     * @docs-private\n     */\n    _markInitialized(): void {\n      if (this._isInitialized) {\n        throw Error('This directive has already been marked as initialized and ' +\n            'should not be called twice.');\n      }\n\n      this._isInitialized = true;\n\n      this._pendingSubscribers!.forEach(this._notifySubscriber);\n      this._pendingSubscribers = null;\n    }\n\n    /** Emits and completes the subscriber stream (should only emit once). */\n    _notifySubscriber(subscriber: Subscriber<void>): void {\n      subscriber.next();\n      subscriber.complete();\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n  private readonly _clampDate: boolean;\n\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   *\n   * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\n   * getting the string representation of a Date object from it's utc representation. We're keeping\n   * it here for sometime, just for precaution, in case we decide to revert some of these changes\n   * though.\n   */\n  useUtcForDisplay: boolean = true;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string, platform: Platform) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    this.useUtcForDisplay = !platform.TRIDENT;\n    this._clampDate = platform.TRIDENT || platform.EDGE;\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {month: style, timeZone: 'utc'});\n      return range(12, i =>\n          this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric', timeZone: 'utc'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {weekday: style, timeZone: 'utc'});\n      return range(7, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric', timeZone: 'utc'});\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    if (SUPPORTS_INTL_API) {\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n        date = this.clone(date);\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n      }\n\n      displayFormat = {...displayFormat, timeZone: 'utc'};\n\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    const result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n\n  /**\n   * When converting Date object to string, javascript built-in functions may return wrong\n   * results because it applies its internal DST rules. The DST rules around the world change\n   * very frequently, and the current valid rule is not always valid in previous years though.\n   * We work around this problem building a new Date object which has its internal UTC\n   * representation with the local date and time.\n   * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\n   *    timeZone set to 'utc' to work fine.\n   * @param date Date from which we want to get the string representation according to dtf\n   * @returns A Date object with its UTC representation based on the passed in date info\n   */\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\n    const d = new Date(Date.UTC(\n        date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n        date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n    return dtf.format(d);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, supportsPassiveEventListeners} from '@angular/cdk/platform';\nimport {RippleRef, RippleState} from './ripple-ref';\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  persistent?: boolean;\n  animation?: RippleAnimationConfig;\n  terminateOnPointerUp?: boolean;\n  /**\n   * @deprecated Use the `animation` property instead.\n   * @deletion-target 7.0.0\n   */\n  speedFactor?: number;\n};\n\n/**\n * Interface that describes the configuration for the animation of a ripple.\n * There are two animation phases with different durations for the ripples.\n */\nexport interface RippleAnimationConfig {\n  /** Duration in milliseconds for the enter animation (expansion from point of contact). */\n  enterDuration?: number;\n  /** Duration in milliseconds for the exit animation (fade-out). */\n  exitDuration?: number;\n}\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nexport const defaultRippleAnimationConfig = {\n  enterDuration: 450,\n  exitDuration: 400\n};\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst ignoreMouseEventsTimeout = 800;\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer {\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /** Events to be registered on the trigger element. */\n  private _triggerEvents = new Map<string, any>();\n\n  /** Set of currently active ripple references. */\n  private _activeRipples = new Set<RippleRef>();\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /** Options that apply to all the event listeners that are bound by the renderer. */\n  private _eventOptions = supportsPassiveEventListeners() ? ({passive: true} as any) : false;\n\n  /**\n   * Cached dimensions of the ripple container. Set when the first\n   * ripple is shown and cleared once no more ripples are visible.\n   */\n  private _containerRect: ClientRect | null;\n\n  constructor(private _target: RippleTarget,\n              private _ngZone: NgZone,\n              elementRef: ElementRef,\n              platform: Platform) {\n\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents.set('mousedown', this.onMousedown);\n      this._triggerEvents.set('mouseup', this.onPointerUp);\n      this._triggerEvents.set('mouseleave', this.onPointerUp);\n\n      this._triggerEvents.set('touchstart', this.onTouchStart);\n      this._triggerEvents.set('touchend', this.onPointerUp);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = this._containerRect =\n                          this._containerRect || this._containerElement.getBoundingClientRect();\n    const animationConfig = {...defaultRippleAnimationConfig, ...config.animation};\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n    const duration = animationConfig.enterDuration / (config.speedFactor || 1);\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.VISIBLE;\n\n      if (!config.persistent && !this._isPointerDown) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    const wasActive = this._activeRipples.delete(rippleRef);\n\n    // Clear out the cached bounding rect if we have no more ripples.\n    if (!this._activeRipples.size) {\n      this._containerRect = null;\n    }\n\n    // For ripples that are not active anymore, don't re-un the fade-out animation.\n    if (!wasActive) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n    const animationConfig = {...defaultRippleAnimationConfig, ...rippleRef.config.animation};\n\n    rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n    rippleEl.style.opacity = '0';\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode!.removeChild(rippleEl);\n    }, animationConfig.exitDuration);\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(element: HTMLElement) {\n    if (!element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n\n    this._ngZone.runOutsideAngular(() => {\n      this._triggerEvents.forEach((fn, type) =>\n          element.addEventListener(type, fn, this._eventOptions));\n    });\n\n    this._triggerElement = element;\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private onMousedown = (event: MouseEvent) => {\n    const isSyntheticEvent = this._lastTouchStartEvent &&\n        Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n\n    if (!this._target.rippleDisabled && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private onTouchStart = (event: TouchEvent) => {\n    if (!this._target.rippleDisabled) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      this.fadeInRipple(\n          event.touches[0].clientX, event.touches[0].clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private onPointerUp = () => {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      // By default, only ripples that are completely visible will fade out on pointer release.\n      // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\n      const isVisible = ripple.state === RippleState.VISIBLE ||\n        ripple.config.terminateOnPointerUp && ripple.state === RippleState.FADING_IN;\n\n      if (!ripple.config.persistent && isVisible) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n  private runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => {\n        this._triggerElement!.removeEventListener(type, fn, this._eventOptions);\n      });\n    }\n  }\n}\n\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Converts values into strings. Falsy values become empty strings.\n * @docs-private\n */\nexport function coerceToString(value: string | number): string {\n  return `${value || ''}`;\n}\n\n/**\n * Converts a value that might be a string into a number.\n * @docs-private\n */\nexport function coerceToNumber(value: string | number): number {\n  return typeof value === 'string' ? parseInt(value, 10) : value;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`mat-menu-trigger: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`x-position value must be either 'before' or after'.\n      Example: <mat-menu x-position=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`y-position value must be either 'above' or below'.\n      Example: <mat-menu y-position=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {BidiModule} from '@angular/cdk/bidi';\n\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks');\n\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n  providers: [{\n    provide: MATERIAL_SANITY_CHECKS, useValue: true,\n  }],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  /** Whether we've already checked for HammerJs availability. */\n  private _hasCheckedHammer = false;\n\n  /** Reference to the global `document` object. */\n  private _document = typeof document === 'object' && document ? document : null;\n\n  /** Reference to the global 'window' object. */\n  private _window = typeof window === 'object' && window ? window : null;\n\n  constructor(@Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecksEnabled: boolean) {\n    if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n      this._checkDoctypeIsDefined();\n      this._checkThemeIsPresent();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n\n  /** Whether any sanity checks are enabled */\n  private _areChecksEnabled(): boolean {\n    return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n  }\n\n  /** Whether the code is running in tests. */\n  private _isTestEnv() {\n    return this._window && (this._window['__karma__'] || this._window['jasmine']);\n  }\n\n  private _checkDoctypeIsDefined(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n\n  private _checkThemeIsPresent(): void {\n    if (this._document && typeof getComputedStyle === 'function') {\n      const testElement = this._document.createElement('div');\n\n      testElement.classList.add('mat-theme-loaded-marker');\n      this._document.body.appendChild(testElement);\n\n      const computedStyle = getComputedStyle(testElement);\n\n      // In some situations, the computed style of the test element can be null. For example in\n      // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n      // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n      if (computedStyle && computedStyle.display !== 'none') {\n        console.warn(\n          'Could not find Angular Material core theme. Most Material ' +\n          'components may not work as expected. For more info refer ' +\n          'to the theming guide: https://material.angular.io/guide/theming'\n        );\n      }\n\n      this._document.body.removeChild(testElement);\n    }\n  }\n\n  /** Checks whether HammerJS is available. */\n  _checkHammerIsAvailable(): void {\n    if (this._hasCheckedHammer || !this._window) {\n      return;\n    }\n\n    if (this._areChecksEnabled() && !this._window['Hammer']) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material components may not work correctly.');\n    }\n    this._hasCheckedHammer = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE');\n\n/** Provider for MAT_DATE_LOCALE injection token. */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges = new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE_PROVIDER} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n  imports: [PlatformModule],\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n    MAT_DATE_LOCALE_PROVIDER\n  ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable()\nexport class ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {\n  HammerStatic,\n  HammerInstance,\n  Recognizer,\n  RecognizerStatic,\n  HammerOptions,\n} from './gesture-annotations';\n\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\n\n/** Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class GestureConfig extends HammerGestureConfig {\n  private _hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\n\n  /** List of new event names to add to the gesture support list */\n  events: string[] = this._hammer ? [\n    'longpress',\n    'slide',\n    'slidestart',\n    'slideend',\n    'slideright',\n    'slideleft'\n  ] : [];\n\n  constructor(\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\n    @Optional() commonModule?: MatCommonModule) {\n    super();\n    if (commonModule) {\n      commonModule._checkHammerIsAvailable();\n    }\n  }\n\n  /**\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://www.google.com/design/spec/patterns/gestures.html#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * @param element Element to which to assign the new HammerJS gestures.\n   * @returns Newly-created HammerJS instance.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const mc = new this._hammer(element, this._hammerOptions || undefined);\n\n    // Default Hammer Recognizers.\n    const pan = new this._hammer.Pan();\n    const swipe = new this._hammer.Swipe();\n    const press = new this._hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return mc as HammerInstance;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  NgModule,\n  Directive,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport class MatLineSetter {\n  constructor(private _lines: QueryList<MatLine>, private _element: ElementRef) {\n    this._setLineClass(this._lines.length);\n\n    this._lines.changes.subscribe(() => {\n      this._setLineClass(this._lines.length);\n    });\n  }\n\n  private _setLineClass(count: number): void {\n    this._resetClasses();\n    if (count === 2 || count === 3) {\n      this._setClass(`mat-${count}-line`, true);\n    } else if (count > 3) {\n      this._setClass(`mat-multi-line`, true);\n    }\n  }\n\n  private _resetClasses(): void {\n    this._setClass('mat-2-line', false);\n    this._setClass('mat-3-line', false);\n    this._setClass('mat-multi-line', false);\n  }\n\n  private _setClass(className: string, isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add(className);\n    } else {\n      this._element.nativeElement.classList.remove(className);\n    }\n  }\n\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\n\n/** Possible states for a ripple element. */\nexport enum RippleState {\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n\n  /** Current state of the ripple reference. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: RippleRenderer,\n    public element: HTMLElement,\n    public config: RippleConfig) {\n  }\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {RippleRef} from './ripple-ref';\nimport {RippleAnimationConfig, RippleConfig, RippleRenderer, RippleTarget} from './ripple-renderer';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * Configuration for the animation duration of the ripples.\n   * There are two phases with different durations for the ripples.\n   */\n  animation?: RippleAnimationConfig;\n\n  /**\n   * If set, the default duration of the fade-in animation is divided by this value. For example,\n   * setting it to 0.5 will cause the ripple fade-in animation to take twice as long.\n   * A changed speedFactor will not affect the fade-out duration of the ripples.\n   * @deprecated Use the `animation` global option instead.\n   * @deletion-target 7.0.0\n   */\n  baseSpeedFactor?: number;\n\n  /**\n   * Whether ripples should start fading out immediately after the mouse our touch is released. By\n   * default, ripples will wait for the enter animation to complete and for mouse or touch release.\n   */\n  terminateOnPointerUp?: boolean;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * If set, the normal duration of ripple animations is divided by this value. For example,\n   * setting it to 0.5 will cause the animations to take twice as long.\n   * A changed speedFactor will not modify the fade-out duration of the ripples.\n   * @deprecated Use the [matRippleAnimation] binding instead.\n   * @deletion-target 7.0.0\n   */\n  @Input('matRippleSpeedFactor') speedFactor: number = 1;\n\n  /**\n   * Configuration for the ripple animation. Allows modifying the enter and exit animation\n   * duration of the ripples.\n   */\n  @Input('matRippleAnimation') animation: RippleAnimationConfig;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() { return this._trigger || this._elementRef.nativeElement; }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** Whether ripple directive is initialized and the input bindings are set. */\n  private _isInitialized: boolean = false;\n\n  constructor(private _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions) {\n\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /** Ripple configuration from the directive's input values. */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      radius: this.radius,\n      color: this.color,\n      animation: {...this._globalOptions.animation, ...this.animation},\n      terminateOnPointerUp: this._globalOptions.terminateOnPointerUp,\n      speedFactor: this.speedFactor * (this._globalOptions.baseSpeedFactor || 1),\n    };\n  }\n\n  /** Whether ripples on pointer-down are disabled or not. */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n\n  /**\n   * Launches a manual ripple using the specified ripple configuration.\n   * @param config Configuration for the manual ripple.\n   */\n  launch(config: RippleConfig): RippleRef;\n\n  /**\n   * Launches a manual ripple at the specified coordinates within the element.\n   * @param x Coordinate within the element, along the X axis at which to fade-in the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to fade-in the ripple.\n   * @param config Optional ripple configuration for the manual ripple.\n   */\n  launch(x: number, y: number, config?: RippleConfig): RippleRef;\n\n  /** Launches a manual ripple at the specified coordinated or just by the ripple config. */\n  launch(configOrX: number | RippleConfig, y: number = 0, config?: RippleConfig): RippleRef {\n    if (typeof configOrX === 'number') {\n      return this._rippleRenderer.fadeInRipple(configOrX, y, {...this.rippleConfig, ...config});\n    } else {\n      return this._rippleRenderer.fadeInRipple(0, 0, {...this.rippleConfig, ...configOrX});\n    }\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\n\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n})\nexport class MatPseudoCheckboxModule { }\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\nimport {mixinDisabled, CanDisable} from '../common-behaviors/disabled';\n\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nexport class MatOptgroupBase { }\nexport const _MatOptgroupMixinBase = mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  styleUrls: ['optgroup.css'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n})\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n"],"names":["type","Output","selectChange","MatTabGroup","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","mixinDisabled","MatTabLabelWrapper","elementRef","_this","_super","call","this","tslib_1.__extends","prototype","focus","nativeElement","getOffsetLeft","offsetLeft","getOffsetWidth","offsetWidth","Directive","args","selector","inputs","host","[class.mat-tab-disabled]","ElementRef","MatTabHeaderBase","_MatTabHeaderMixinBase","mixinDisableRipple","MatTabHeader","_elementRef","_changeDetectorRef","_viewportRuler","_dir","_focusIndex","_scrollDistance","_selectedIndexChanged","_realignInkBar","Subscription","EMPTY","_showPaginationControls","_disableScrollAfter","_disableScrollBefore","_selectedIndex","selectFocusedIndex","EventEmitter","indexFocused","Object","defineProperty","value","coerceNumberProperty","ngAfterContentChecked","_tabLabelCount","_labelWrappers","length","_updatePagination","markForCheck","_scrollToLabel","_checkScrollingControls","_alignInkBarToSelectedTab","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","event","keyCode","RIGHT_ARROW","_focusNextTab","LEFT_ARROW","_focusPreviousTab","HOME","_focusFirstTab","preventDefault","END","_focusLastTab","ENTER","SPACE","emit","focusIndex","ngAfterContentInit","dirChange","change","observableOf","resize","realign","requestAnimationFrame","merge","subscribe","ngOnDestroy","unsubscribe","_onContentChanges","_checkPaginationEnabled","_isValidIndex","_setTabFocus","index","tab","toArray","disabled","tabIndex","containerEl","_tabListContainer","dir","_getLayoutDirection","scrollLeft","scrollWidth","_moveFocus","offset","tabs","i","scrollDistance","translateX","_tabList","style","transform","v","Math","max","min","_getMaxScrollDistance","_scrollHeader","scrollDir","viewLength","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","beforeVisiblePos","afterVisiblePos","isEnabled","selectedLabelWrapper","selectedIndex","_inkBar","alignToElement","Component","template","styles","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","class","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","ViewportRuler","Directionality","decorators","Optional","propDecorators","ViewChild","Input","MatTabNavBase","_MatTabNavMixinBase","mixinColor","MatTabNav","_ngZone","_onDestroy","Subject","_disableRipple","_backgroundColor","classList","remove","backgroundColor","add","coerceBooleanProperty","_setLinkDisableRipple","updateActiveLink","element","_activeLinkChanged","_activeLinkElement","runOutsideAngular","pipe","takeUntil","_alignInkBar","next","complete","_tabLinks","forEach","link","disableRipple","exportAs","NgZone","ChangeDetectorRef","MatTabLinkBase","_MatTabLinkMixinBase","mixinTabIndex","_tabNavBar","_tabLinkRipple","setupTriggerEvents","parseInt","globalOptions","rippleConfig","terminateOnPointerUp","speedFactor","baseSpeedFactor","animation","get","enumerable","configurable","MatTabLink","[attr.aria-disabled]","[attr.tabIndex]","[class.mat-tab-label-active]","(click)","Platform","undefined","Inject","MAT_RIPPLE_GLOBAL_OPTIONS","Attribute","NgModule","imports","CommonModule","MatCommonModule","PortalModule","MatRippleModule","ObserversModule","ScrollDispatchModule","exports","MatTabLabel","MatTab","MatTabContent","declarations","MatInkBar","MatTabBody","MatTabBodyPortal","providers","VIEWPORT_RULER_PROVIDER","MatTabsModule","MatToolbarBase","_MatToolbarMixinBase","MatToolbarRow","MatToolbar","_platform","document","_document","ngAfterViewInit","isDevMode","isBrowser","_checkToolbarMixedModes","_toolbarRows","changes","slice","childNodes","filter","node","contains","nodeType","COMMENT_NODE","some","textContent","trim","throwToolbarMixedModesError","[class.mat-toolbar-multiple-rows]","[class.mat-toolbar-single-row]","DOCUMENT","PlatformModule","MatToolbarModule","MatTreeNodeOutlet","viewContainer","ViewContainerRef","_MatTreeNodeMixinBase","CdkTreeNode","_MatNestedTreeNodeMixinBase","CdkNestedTreeNode","MatTreeNode","_tree","role","Number","[attr.aria-expanded]","[attr.aria-level]","[attr.role]","provide","useExisting","CdkTree","MatTreeNodeDef","CdkTreeNodeDef","data","MatNestedTreeNode","nodeOutlet","ContentChildren","MatTreeNodePadding","CdkTreeNodePadding","level","indent","MatTree","recursive","MatTreeNodeToggle","CdkTreeNodeToggle","MAT_TREE_DIRECTIVES","CdkTreeModule","MatTreeModule","MatTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","_flattenNode","resultNodes","parentMap","flatNode","push","take","children","child","childParentMap","flattenNodes","structuredData","expandFlattenedNodes","nodes","treeControl","results","currentExpand","expand","isExpanded","MatTreeFlatDataSource","treeFlattener","initialData","_flattenedData","BehaviorSubject","_expandedData","_data","dataNodes","connect","collectionViewer","viewChange","expansionModel","apply","map","disconnect","DataSource","MatTreeNestedDataSource","VERSION","Version","SELECT_PANEL_PADDING_X","MatStepHeader","iconOverrides","selected","active","optional","matStepperAnimations","horizontalStepTransition","trigger","state","visibility","transition","animate","verticalStepTransition","height","MatStepperIcon","templateRef","TemplateRef","name","_MatStep","CdkStep","_MatStepper","CdkStepper","MatStep","stepper","_errorStateMatcher","isErrorState","control","form","originalErrorState","customErrorState","invalid","interacted","ErrorStateMatcher","MatStepper","arguments","icons","_icons","editOverride","find","icon","doneOverride","_iconOverrides","_steps","_destroyed","_stateChanged","MatHorizontalStepper","aria-orientation","animations","ctorParameters","MatVerticalStepper","MatStepperNext","[type]","CdkStepperNext","MatStepperPrevious","CdkStepperPrevious","MatButtonModule","CdkStepperModule","MatIconModule","A11yModule","MatStepLabel","MatStepperIntl","MatStepperModule","MatTable","CDK_TABLE_TEMPLATE","MatCellDef","CdkCellDef","MatHeaderCellDef","CdkHeaderCellDef","MatColumnDef","CdkColumnDef","MatHeaderCell","columnDef","cssClassFriendlyName","CdkHeaderCell","MatCell","CdkCell","MatHeaderRowDef","CdkHeaderRowDef","MatRowDef","CdkRowDef","MatHeaderRow","CDK_ROW_TEMPLATE","MatRow","CdkTableModule","MatTableModule","MatTableDataSource","_renderData","_filter","sortingDataAccessor","sortHeaderId","_isNumberValue","sortData","sort","direction","a","b","valueA","valueB","comparatorResult","filterPredicate","accumulator","currentTerm","key","dataStr","keys","reduce","toLowerCase","transformedFilter","indexOf","_updateChangeSubscription","_sort","_paginator","paginator","sortChange","empty","pageChange","page","_renderChangesSubscription","combineLatest","_a","_filterData","startWith","_orderData","_pageData","filteredData","obj","_updatePaginator","startIndex","pageIndex","pageSize","splice","filteredDataLength","Promise","resolve","then","lastPageIndex","ceil","show","_setStyles","hide","inkBar","left","width","viewContainerRef","CdkPortal","MatTabBase","_MatTabMixinBase","_viewContainerRef","textLabel","_contentPortal","_labelChange","_disableChange","position","origin","isActive","ngOnChanges","hasOwnProperty","ngOnInit","TemplatePortal","_explicitContent","_implicitContent","matTabsAnimations","translateTab","_componentFactoryResolver","_host","_isCenterPosition","_position","attach","_content","_centeringSub","_beforeCentering","isCentering","hasAttached","_leavingSub","_afterLeavingCenter","detach","closed","ComponentFactoryResolver","forwardRef","CdkPortalOutlet","_onCentering","_onCentered","_origin","_onTranslateTabStarted","e","toState","clientHeight","_onTranslateTabComplete","fromState","_portalHost","PortalHostDirective","nextId","MatTabChangeEvent","MatTabGroupBase","_MatTabGroupMixinBase","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","_tabLabelSubscription","_dynamicHeight","headerPosition","selectedIndexChange","focusChange","animationDone","selectedTabChange","_groupId","indexToSelect","_tabs","tabChangeEvent","_createChangeEvent","_subscribeToTabLabels","_focusChanged","concat","_getTabLabelId","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","offsetHeight","_removeTabBodyWrapperHeight","_handleClick","tabHeader","idx","_getTabIndex","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","dynamicHeight","_dynamicHeightDeprecated","MatSlider","step","thumbLabel","_thumbLabelDeprecated","tickInterval","_tickIntervalDeprecated","displayWith","vertical","input","_sliderWrapper","BidiModule","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MatSliderModule","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","dismiss","_onExit","_finishDismiss","exit","clearTimeout","_durationTimeoutId","dismissWithAction","closeWithAction","_dismissAfter","duration","setTimeout","_open","dispose","dismissedByAction","afterDismissed","asObservable","afterOpened","_onEnter","MAT_SNACK_BAR_DATA","InjectionToken","MatSnackBarConfig","politeness","announcementMessage","horizontalPosition","verticalPosition","SHOW_ANIMATION","AnimationDurations","ENTERING","AnimationCurves","DECELERATION_CURVE","HIDE_ANIMATION","EXITING","ACCELERATION_CURVE","matSnackBarAnimations","contentFade","opacity","COMPLEX","STANDARD_CURVE","snackBarState","SimpleSnackBar","snackBarRef","action","[@contentFade]","MatSnackBarContainer","_animationState","attachComponentPortal","portal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","attachTemplatePortal","onAnimationEnd","startsWith","_completeExit","onEnter_1","run","enter","snackBarConfig","detectChanges","onMicrotaskEmpty","panelClasses","panelClass","Array","isArray","cssClass","Error","[@state]","(@state.done)","MAT_SNACK_BAR_DEFAULT_OPTIONS","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","openFromComponent","component","config","_attach","openFromTemplate","open","message","_config","tslib_1.__assign","_attachSnackBarContainer","overlayRef","containerPortal","ComponentPortal","containerRef","instance","content","userConfig","_createOverlay","container","$implicit","injector","_createInjector","contentRef","observe","Breakpoints","Handset","detachments","matches","overlayElement","_animateSnackBar","announce","overlayConfig","OverlayConfig","positionStrategy","global","isRtl","isLeft","isRight","right","centerHorizontally","top","bottom","create","userInjector","injectionTokens","WeakMap","set","PortalInjector","Injectable","Overlay","LiveAnnouncer","Injector","BreakpointObserver","SkipSelf","OverlayModule","LayoutModule","entryComponents","LIVE_ANNOUNCER_PROVIDER","useFactory","MAT_SNACK_BAR_DEFAULT_OPTIONS_PROVIDER_FACTORY","MatSnackBarModule","MatSortBase","_MatSortMixinBase","sortables","Map","_stateChanges","start","_direction","MatSort","getSortInvalidDirectionError","_disableClear","register","sortable","id","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","deregister","delete","getNextSortDirection","disableClear","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","sortButtonLabel","sortDescriptionLabel","MatSortHeaderIntl","MAT_SORT_HEADER_INTL_PROVIDER","deps","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","SORT_ANIMATION_TRANSITION","matSortAnimations","indicator","leftPointer","rightPointer","arrowOpacity","arrowPosition","keyframes","allowChildren","query","animateChild","MatSortHeaderBase","_MatSortHeaderMixinBase","MatSortHeader","_intl","changeDetectorRef","_cdkColumnDef","_showIndicatorHint","_arrowDirection","_disableViewStateAnimation","getSortHeaderNotContainedWithinSortError","_rerenderSubscription","_isSorted","_updateArrowDirection","_viewState","_setAnimationTransitionState","_setIndicatorHintVisible","visible","_isDisabled","viewState","_getArrowDirectionState","_getArrowViewState","(mouseenter)","(longpress)","(mouseleave)","[class.mat-sort-header-disabled]","MatSortModule","CdkStepLabel","optionalLabel","_focusMonitor","_element","monitor","_intlSubscription","_index","_selected","_active","_optional","stopMonitoring","_stringLabel","label","_templateLabel","_getHostElement","MatDrawerContainer","MatSidenavContent","[style.margin-left.px]","[style.margin-right.px]","MatSidenav","_fixedBottomGap","matDrawerAnimations","transformDrawer","[@transform]","(@transform.start)","(@transform.done)","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","MatDrawer","MatSidenavContainer","[class.mat-drawer-container-explicit-backdrop]","_drawers","ContentChild","MatDrawerContent","MAT_DRAWER_DEFAULT_AUTOSIZE","useValue","MatSidenavModule","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlideToggle","multi","MatSlideToggleChange","source","checked","MatSlideToggleBase","_MatSlideToggleMixinBase","onChange","_","onTouched","_uniqueId","_required","_checked","labelPosition","ariaLabel","ariaLabelledby","_slideRenderer","SlideToggleRenderer","_inputElement","focusOrigin","_onInputFocusChange","_onChangeEvent","stopPropagation","dragging","_emitChangeEvent","_onInputClick","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","focusVia","toggle","_focusRipple","fadeOut","_ripple","launch","persistent","_onDragStart","startThumbDrag","_onDrag","updateThumbPosition","deltaX","_onDragEnd","newCheckedValue","dragPercentage","stopThumbDrag","_onLabelTextChange","[id]","[class.mat-checked]","[class.mat-disabled]","[class.mat-slide-toggle-label-before]","FocusMonitor","required","MatRipple","_thumbBarEl","querySelector","_thumbBarWidth","clientWidth","_thumbEl","_previousChecked","dragX","percentage","MatSlideToggleModule","MAT_SLIDER_VALUE_ACCESSOR","MatSliderChange","MatSliderBase","_MatSliderMixinBase","_invert","_max","_min","_step","_thumbLabel","_tickInterval","_value","_vertical","_percent","_isSliding","_isActive","_tickIntervalPercent","_sliderDimensions","_controlValueAccessorChangeFn","_dirChangeSubscription","_calculatePercentage","_roundLabelTo","toString","split","pop","toFixed","_focusHostElement","blur","_blurHostElement","_clamp","invert","percent","_isMinValue","axis","_invertMouseCoords","_thumbGap","tickSize","backgroundSize","sign","rotate","_invertAxis","_onMouseenter","_getSliderDimensions","_updateTickIntervalPercent","_onClick","oldValue","_updateValueFromPosition","x","clientX","y","clientY","_emitInputEvent","_onSlide","_onSlideStart","center","_valueOnSlideStart","_onSlideEnd","_onFocus","_onBlur","_onKeydown","PAGE_UP","_increment","PAGE_DOWN","UP_ARROW","DOWN_ARROW","_onKeyup","numSteps","pos","size","posComponent","exactValue","_calculateValue","closestValue","round","trackSize","pixelsPerStep","stepsPerTick","pixelsPerTick","getBoundingClientRect","(focus)","(blur)","(keydown)","(keyup)","(slide)","(slideend)","(slidestart)","[tabIndex]","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[attr.aria-orientation]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[class.mat-slider-axis-inverted]","[class.mat-slider-sliding]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","MatProgressSpinner","mode","platform","[style.width.px]","[style.height.px]","MatSpinner","MatProgressSpinnerModule","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MatRadioGroup","MatRadioChange","MatRadioGroupBase","_MatRadioGroupMixinBase","_changeDetector","_name","_isInitialized","_labelPosition","_disabled","_updateRadioButtonNames","_markRadiosForCheck","newValue","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_touch","_radios","radio","isAlreadySelected","_markForCheck","MatRadioButton","descendants","MatRadioButtonBase","_MatRadioButtonMixinBase","radioGroup","_radioDispatcher","_removeUniqueSelectionListener","listen","newCheckedState","notify","_isRippleDisabled","_onInputChange","groupValueChanged","[class.mat-radio-checked]","[class.mat-radio-disabled]","[attr.id]","UniqueSelectionDispatcher","ariaDescribedby","UNIQUE_SELECTION_DISPATCHER_PROVIDER","MatRadioModule","MatDrawerToggleResult","animationFinished","_container","_margins","_contentMargins","margins","_focusTrapFactory","_doc","_elementFocusedBeforeDrawerWasOpened","_mode","_disableClose","openedChange","opened","_isFocusTrapEnabled","_focusTrap","_trapFocus","_restoreFocus","close","onAlignChanged","onPositionChanged","_modeChanged","HTMLElement","_openedVia","enabled","destroy","isOpen","openedVia","_opened","_enableAnimations","align","_openedStream","openedStart","_closedStream","closedStart","onOpen","onClose","backdropClick","_doCheckSubject","_autosize","defaultAutosize","drawer","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","_isDrawerOpen","_start","_end","_updateContentMargins","debounceTime","ngDoCheck","_setContainerClass","throwMatDuplicatedDrawerError","_right","_left","_closeModalDrawer","disableClose","_canHaveBackdrop","_isShowingBackdrop","_width","autosize","hasBackdrop","disableOptionCentering","compareWith","errorStateMatcher","selectionChange","valueChange","MatSelect","MatSelectModule","MatOptionModule","MatFormFieldModule","MatSelectTrigger","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","matTooltipAnimations","tooltipState","SCROLL_THROTTLE_MS","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER","MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY","MAT_TOOLTIP_DEFAULT_OPTIONS","MatTooltip","_scrollDispatcher","_ariaDescriber","_scrollStrategy","_defaultOptions","showDelay","hideDelay","_message","_manualListeners","IOS","nodeName","webkitUserSelect","userSelect","listener","addEventListener","_detach","_updatePosition","removeDescription","_isTooltipVisible","_updateTooltipMessage","describe","_tooltipClass","_tooltipInstance","_setTooltipClass","removeEventListener","clear","delay","_portal","TooltipComponent","afterHidden","isVisible","ESCAPE","_handleTouchend","touchendHideDelay","_getOrigin","overlay","_getOverlayPosition","strategy","connectedTo","main","withFallbackPosition","fallback","withScrollableContainers","getAncestorScrollContainers","onPositionChange","scrollableViewProperties","isOverlayClipped","_setTransformOrigin","connectionPair","scrollStrategy","getConfig","withPositions","isDirectionLtr","originX","originY","getMatTooltipInvalidPositionError","_invertPosition","isLtr","overlayX","overlayY","updatePosition","tooltipClass","(touchend)","ScrollDispatcher","AriaDescriber","_positionDeprecated","_visibility","_closeOnInteraction","_transformOrigin","_onHide","_isHandset","_hideTimeoutId","_showTimeoutId","overlayPosition","_animationStart","_animationDone","_handleBodyInteraction","aria-hidden","ɵ0","ARIA_DESCRIBER_PROVIDER","MatTooltipModule","itemsPerPageLabel","nextPageLabel","previousPageLabel","firstPageLabel","lastPageLabel","getRangeLabel","MatPaginatorIntl","MAT_PAGINATOR_INTL_PROVIDER","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","PageEvent","MatPaginator","_pageIndex","_length","_pageSizeOptions","_hidePageSize","_showFirstLastButtons","_intlChanges","_pageSize","_updateDisplayedPageSizeOptions","p","_initialized","nextPage","hasNextPage","_emitPageEvent","previousPage","hasPreviousPage","firstPage","lastPage","getNumberOfPages","numberOfPages","_changePageSize","floor","pageSizeOptions","_displayedPageSizeOptions","hidePageSize","showFirstLastButtons","MatPaginatorModule","MatProgressBarBase","_MatProgressBarMixinBase","progressbarId","MatProgressBar","_bufferValue","clamp","_primaryTransform","_bufferTransform","bufferValue","aria-valuemin","aria-valuemax","[attr.mode]","MatProgressBarModule","BASE_SIZE","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","INDETERMINATE_ANIMATION_TEMPLATE","_fallbackAnimation","_elementSize","_diameter","EDGE","TRIDENT","animationClass","diameters","_attachStyleNode","_updateElementSize","_strokeWidth","diameter","viewBox","_circleRadius","strokeWidth","PI","_strokeCircumference","styleTag","createElement","head","appendChild","sheet","insertRule","_getAnimationText","replace","Set","_previousElevation","newElevation","MatMenu","_startAnimation","_panelAnimationState","_resetAnimation","_onAnimationDone","matMenuAnimations","transformMenu","fadeInItems","MAT_MENU_DEFAULT_OPTIONS","yPosition","items","MatMenuItem","lazyContent","MatMenuContent","overlapTrigger","MAT_MENU_SCROLL_STRATEGY","MAT_MENU_SCROLL_STRATEGY_PROVIDER","MAT_MENU_SCROLL_STRATEGY_PROVIDER_FACTORY","MatMenuTrigger","_parentMenu","_menuItemInstance","_menuOpen","_closeSubscription","_hoverSubscription","_openedByMouse","menuOpened","onMenuOpen","menuClosed","onMenuClose","_triggersSubmenu","triggersSubmenu","menu","_checkMenu","reason","_destroyMenu","_hovered","openMenu","_cleanUpSubscriptions","toggleMenu","closeMenu","menuData","_menuClosingActions","_initMenu","menuOpen","_resetMenu","parentMenu","_setMenuElevation","_setIsMenuOpen","focusFirstItem","setElevation","depth","_highlighted","throwMatMenuMissingError","_getOverlayConfig","_subscribeToPositions","_getPosition","backdropClass","posX","posY","setPositionClasses","xPosition","originFallbackX","_b","overlayFallbackY","_c","originFallbackY","_d","overlayFallbackX","offsetY","withDirection","withOffsetY","backdrop","parentClose","hover","_handleMousedown","isFakeMousedownFromScreenReader","aria-haspopup","(mousedown)","Self","_deprecatedMatMenuTriggerFor","MatMenuModule","matSelectAnimations","transformPanel","minWidth","group","fadeInContent","MAT_SELECT_SCROLL_STRATEGY","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinErrorState","_parentFormField","_scrollStrategyFactory","_panelOpen","_scrollTop","_multiple","_compareWith","o1","o2","_uid","_destroy","_triggerFontSize","_onChange","_onTouched","_optionIds","_panelDoneAnimating","_offsetY","_positions","_disableOptionCentering","focused","controlType","optionSelectionChanges","defer","options","option","onSelectionChange","onStable","switchMap","valueAccessor","_placeholder","stateChanges","_selectionModel","getMatSelectDynamicMultipleError","getMatSelectNonFunctionValueError","_initializeSelection","_id","o","SelectionModel","multiple","_initKeyManager","_resetOptions","updateErrorState","panelOpen","_triggerRect","getComputedStyle","_keyManager","withHorizontalOrientation","_calculateOverlayPosition","_highlightCorrectOption","overlayDir","fontSize","_isRtl","_setSelectionByValue","selectedOptions","viewValue","reverse","join","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","altKey","onKeydown","manager","setFirstItemActive","setLastItemActive","activeItem","previouslyFocusedIndex","activeItemIndex","shiftKey","_selectViaInteraction","_onPanelDone","offsetX","_onFadeInDone","_onAttached","positionChange","_calculateOverlayOffsetX","panel","scrollTop","_getPanelTheme","color","isEmpty","isUserInput","getMatSelectNonArrayValueError","_clearSelection","currentValue","_selectValue","_sortValues","correspondingOption","setActiveItem","error","console","warn","select","skip","deselect","ActiveDescendantKeyManager","withTypeAhead","withVerticalOrientation","tabOut","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","_setOptionIds","wasSelected","isSelected","_propagateChanges","fallbackValue","valueToEmit","activeOptionIndex","labelCount","_countGroupLabelsBeforeOption","optionGroups","_getOptionScrollPosition","_getItemHeight","_getOptionIndex","result","current","itemHeight","_getItemCount","panelHeight","scrollContainerHeight","maxScroll","selectedOptionOffset","scrollBuffer","_calculateOverlayScroll","_calculateOverlayOffsetY","_checkOverlayWithinViewport","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","placeholder","_getAriaActiveDescendant","overlayRect","viewportSize","getViewportSize","paddingWidth","SELECT_MULTIPLE_PANEL_PADDING_X","first","leftOverflow","rightOverflow","optionOffsetFromPanelTop","optionHeightAdjustment","maxOptionsDisplayed","firstDisplayedIndex","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","setDescribedByIds","ids","_ariaDescribedby","onContainerClick","[attr.tabindex]","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","MatFormFieldControl","MAT_OPTION_PARENT_COMPONENT","NgForm","FormGroupDirective","MatFormField","NgControl","CdkConnectedOverlay","MatOption","MatOptgroup","customTrigger","focusedOption","focusedIndex","_emitDeprecatedChangeEvent","MatSelectionList","MAT_SELECTION_LIST_VALUE_ACCESSOR","MatListOption","_MatSelectionListMixinBase","MatLineModule","MatPseudoCheckboxModule","MatList","MatNavList","MatListItem","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatListSubheaderCssMatStyler","MatDividerModule","MatListModule","sequence","MatMenuItemBase","_MatMenuItemMixinBase","_checkDisabled","_emitHoverEvent","getLabel","textNodeType","TEXT_NODE","output","length_1","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","_template","_appRef","context","_outlet","DomPortalOutlet","insertBefore","outletElement","isAttached","ApplicationRef","_xPosition","_yPosition","_tabSubscription","_classList","_overlapTrigger","_hasBackdrop","throwMatMenuInvalidPositionX","throwMatMenuInvalidPositionY","classes","className","FocusKeyManager","withWrap","item","setFocusOrigin","resetActiveItem","customElevation","c","_navList","_isNavList","_handleFocus","_handleBlur","[class.mat-list-item-avatar]","[class.mat-list-item-with-avatar]","MatSelectionListBase","MatListOptionBase","_MatListOptionMixinBase","MatListOptionChange","MatSelectionListChange","selectionList","_hasFocus","checkboxPosition","_setSelected","_reportValueChange","MatLineSetter","_lines","_removeOptionFromList","_text","_setFocusedOption","tabindex","[class.mat-list-item-disabled]","[class.mat-list-item-focus]","[attr.aria-selected]","skipPredicate","_tempValues","_setOptionsFromValues","_modelChanges","_i","added","removed","optionIndex","setNextItemActive","_toggleSelectOnFocusedOption","_getSelectedOptionValues","values","_getOptionByValue","Boolean","MatIconRegistry","getNamedSvgIcon","namespace","iconKey","_svgIconConfigs","_getSvgFromConfig","iconSetConfigs","_iconSetConfigs","_getSvgFromIconSetConfigs","observableThrow","getMatIconNameNotFoundError","svgElement","cloneSvg","_loadSvgIconFromConfig","tap","svg","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","catchError","err","url","_sanitizer","sanitize","SecurityContext","RESOURCE_URL","log","forkJoin","foundIcon","iconName","_extractSvgIconFromSet","_fetchUrl","svgText","_createSvgElementForSingleIcon","_svgElementFromString","responseText","_setSvgAttributes","iconSet","iconSource","iconElement","cloneNode","_toSvgElement","str","div","innerHTML","ELEMENT_NODE","setAttribute","safeUrl","_httpClient","getMatIconNoHttpProviderError","getMatIconFailedToSanitizeError","inProgressFetch","_inProgressUrlFetches","req","responseType","finalize","share","HttpClient","DomSanitizer","ICON_REGISTRY_PROVIDER","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","_MatIconMixinBase","MatIcon","_iconRegistry","ariaHidden","_fontSet","_cleanupFontValue","_fontIcon","_splitIconName","parts","svgIcon","_setSvgElement","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","classNameForFontAlias","getDefaultFontSetClass","_previousFontSetClass","fontIcon","_previousFontIconClass","MatListBase","_MatListMixinBase","MatListItemBase","_MatListItemMixinBase","controlValue","_getValidDateOrNull","_dateAdapter","deserialize","_dateFilter","matDatepickerFilter","_validator","Validators","compose","_parseValidator","_minValidator","_maxValidator","_filterValidator","_lastValueValid","createMissingDateImplError","_dateFormats","_localeSubscription","localeChanges","MatDatepickerInput","registerDatepicker","_datepicker","_registerInput","_validatorOnChange","isValid","oldDate","format","display","dateInput","sameDate","_valueChange","_disabledChange","_datepickerSubscription","selectedChanged","_cvaOnChange","MatDatepickerInputEvent","dateChange","registerOnValidatorChange","validate","getPopupConnectionElementRef","getConnectedOverlayOrigin","_formField","_onInput","date","parse","_getThemePalette","isDateInstance","MAT_DATEPICKER_VALUE_ACCESSOR","MAT_DATEPICKER_VALIDATORS","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","DateAdapter","MAT_DATE_FORMATS","matDatepicker","MatDatepickerToggleIcon","MatDatepickerToggle","datepicker","_watchStateChanges","datepickerDisabled","inputDisabled","_datepickerInput","datepickerToggled","openedStream","closedStream","[class.mat-datepicker-toggle-active]","[class.mat-accent]","[class.mat-warn]","_customIcon","MatDialogModule","MatCalendar","MatCalendarBody","MatDatepicker","MatDatepickerContent","MatMonthView","MatYearView","MatMultiYearView","MatDatepickerIntl","MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER","MatDatepickerModule","_inset","MatDivider","[class.mat-divider-vertical]","[class.mat-divider-inset]","_hideToggle","displayMode","MatAccordion","hideToggle","CdkAccordion","MatExpansionPanelContent","matExpansionAnimations","indicatorRotate","expansionHeaderHeight","params","collapsedHeight","expandedHeight","bodyExpansion","uniqueId","MatExpansionPanel","accordion","_uniqueSelectionDispatcher","_inputChanges","_headerId","_getHideToggle","_hasSpacing","expanded","_getExpandedState","_lazyContent","_bodyAnimation","phaseName","outputs","[class.mat-expanded]","[class.mat-expansion-panel-spacing]","MatExpansionPanelActionRow","MatExpansionPanelHeader","_parentChangeSubscription","_toggle","_isExpanded","_getPanelId","_showToggle","_keydown","[attr.aria-controls]","[@expansionHeight]","CdkAccordionModule","MatExpansionPanelTitle","MatExpansionPanelDescription","MatExpansionModule","MatGridTile","_rowspan","_colspan","coerceToNumber","_setStyle","property","MatGridTileText","MatGridAvatarCssMatStyler","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","TileCoordinator","numColumns","tiles","columnIndex","rowIndex","tracker","fill","positions","tile","_trackTile","lastRowMax","rowCount","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","rowspan","row","col","TileStyler","_rows","init","gutterSize","cols","_gutterSize","normalizeUnits","_cols","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","reset","list","_setListStyle","_tiles","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","parseFloat","FitTileStyler","gutterHeightPerTile","MatGridList","_gutter","coerceToString","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","rowHeight","_tileStyler","MatGridListModule","SvgIconConfig","_cachedIconsByUrl","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","addSvgIconInNamespace","addSvgIconSet","addSvgIconSetInNamespace","configNamespace","registerFontClassAlias","alias","setDefaultFontSetClass","getSvgIconFromUrl","cachedIcon","selectedChange","yearSelected","_activeDate","today","oldActiveDate","validDate","clampDate","minDate","maxDate","getYear","_init","_selectedYear","_minDate","_maxDate","_focusActiveCell","_todayYear","activeYear","activeOffset","_years","year","_createCellForYear","_yearSelected","createDate","month","getMonth","activeDate","daysInMonth","getNumDaysInMonth","getDate","_handleCalendarBodyKeydown","addCalendarYears","yearsPerPage","_getActiveCell","_matCalendarBody","yearName","getYearName","MatCalendarCell","_shouldEnableYear","dateFilter","firstOfYear","addCalendarDays","monthSelected","_selectedMonth","_getMonthInCurrentYear","_monthSelected","normalizedDate","addCalendarMonths","_todayMonth","_yearLabel","monthNames","getMonthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","toLocaleUpperCase","_shouldEnableMonth","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","firstOfMonth","maxYear","maxMonth","minYear","minMonth","startView","_userSelection","_startAt","_clampedActiveDate","_currentView","monthYearLabel","switchToMultiYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","multi-year","prevMultiYearLabel","nextMonthLabel","nextYearLabel","nextMultiYearLabel","startAt","firstChange","view","monthView","yearView","multiYearView","_dateSelected","_yearSelectedInMultiYearView","normalizedYear","_monthSelectedInYearView","normalizedMonth","_userSelected","_goToDateInView","_currentPeriodClicked","_previousClicked","_nextClicked","_previousEnabled","_isSameView","_nextEnabled","date1","date2","matDatepickerAnimations","fadeInCalendar","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY","MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY","MatDatepickerContentBase","_MatDatepickerContentMixinBase","_popupRef","_positionChange","isAbove","_isAbove","[@transformPanel]","[class.mat-datepicker-content-touch]","[class.mat-datepicker-content-above]","_inputSubscription","_popupComponentRef","_focusedElementBeforeOpen","activeElement","touchUi","_openAsDialog","_openAsPopup","_dialogRef","_calendarPortal","completeClose","afterClosed","componentInstance","_setColor","_createPopup","keydownEvents","MatDialog","NG_VALIDATORS","target","targetElement","matDatepickerParse","text","compareDate","matDatepickerMin","actual","matDatepickerMax","[@slideDialog]","(@slideDialog.start)","(@slideDialog.done)","MatDialogContainer","MatDialogRef","_containerInstance","location","_afterOpen","_afterClosed","_beforeClose","_locationChanges","_animationStateChanged","_result","closeOnNavigation","dialogResult","detachBackdrop","_startExitAnimation","afterOpen","beforeClose","_getPositionStrategy","centerVertically","updateSize","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","_location","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","componentOrTemplateRef","_applyConfigDefaults","MatDialogConfig","getDialogById","dialogContainer","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","dialog","dialogConfig","minHeight","maxWidth","maxHeight","previousValue","removeAttribute","overlayContainer","getContainerElement","parentElement","siblings","sibling","hasAttribute","getAttribute","Location","OverlayContainer","dialogElementUid","MatDialogClose","_dialog","getClosestDialog","proxiedChange","_matDialogClose","MatDialogTitle","_ariaLabelledBy","MatDialogContent","MatDialogActions","listenerOptions","supportsPassiveEventListeners","passive","AutofillMonitor","_monitoredElements","observableEmpty","info","subject","animationName","isAutofilled","unlisten","_info","MatAutofill","_autofillMonitor","matAutofill","MatTextareaAutosize","_minRows","_setMinHeight","_maxRows","_setMaxHeight","minRows","_cachedLineHeight","_setTextareaStyle","maxRows","resizeToFitContent","fromEvent","window","auditTime","_cacheTextareaLineHeight","textarea","textareaClone","rows","border","padding","overflow","force","_previousValue","placeholderText","scrollHeight","MAT_INPUT_INVALID_TYPES","MatInputBase","_MatInputMixinBase","MatInput","inputValueAccessor","_isServer","autofilled","_type","_readonly","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","el","selectionStart","selectionEnd","setSelectionRange","_validateType","_isTextarea","_dirtyCheckNativeValue","isFocused","readonly","getMatInputUnsupportedTypeError","_isNeverEmpty","_isBadInput","validity","badInput","[class.mat-input-server]","[placeholder]","[required]","[readonly]","MatInputModule","calendarLabel","openCalendarLabel","displayValue","numCols","allowDisabledSelection","activeCell","cellAspectRatio","selectedValueChange","_cellClicked","cell","_isActiveCell","cellNumber","_firstRowOffset","attr.aria-readonly","todayValue","selectedValue","labelMinRequiredCells","activeDateChange","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","_weekdays","_hasSameMonthAndYear","_selectedDate","_getDateInCurrentMonth","selectedYear","selectedMonth","selectedDate","_todayDate","_monthLabel","_firstWeekOffset","getDayOfWeek","_createWeekCells","dateNames","getDateNames","_weeks","_shouldEnableDate","dateA11yLabel","d1","d2","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MAT_CHECKBOX_CLICK_ACTION","MatCheckbox","indeterminateChange","ripple","indeterminate","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","MatCheckboxModule","MatChipSelectionChange","MatChipBase","_MatChipMixinBase","CHIP_ATTRIBUTE_NAMES","MatChipAvatar","MatChipTrailingIcon","MatChip","ngZone","chipListSelectable","_selectable","_removable","destroyed","onRemove","_addHostClassName","_chipRipple","RippleRenderer","selectable","CHIP_ATTRIBUTE_NAMES_1","attr","tagName","chip","_removeTriggerEvents","selectViaInteraction","toggleSelected","removable","DELETE","BACKSPACE","_blur","[class.mat-chip-selected]","[class.mat-chip-with-avatar]","[class.mat-chip-with-trailing-icon]","[class.mat-chip-disabled]","avatar","trailingIcon","removeIcon","MatChipRemove","_parentChip","MatChipListBase","_MatChipListMixinBase","MatChipListChange","MatChipList","_lastDestroyedIndex","_chipSet","_tabOutSubscription","_tabIndex","_userTabIndex","ariaOrientation","_chipInput","chips","_changeSubscription","_resetChips","_updateTabIndex","_updateFocusForDestroyedChips","_chipRemoveSubscription","_dropSubscriptions","registerInput","inputElement","_focusInput","_isInputEmpty","_updateKeyManager","chipIndex","chipsArray","newFocusIndex","focusChip","correspondingChip","updateActiveItem","_markAsTouched","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","chipSelectionChanges","chipFocusChanges","updateActiveItemIndex","chipBlurChanges","chipRemoveChanges","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","[class.mat-chip-list-required]","MatChipInput","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","_emitChipEnd","addOnBlur","_focus","chipList","CHIP_DECLARATIONS","MatChipsModule","ariaDescribedBy","autoFocus","matDialogAnimations","slideDialog","_elementFocusedBeforeDialogWasOpened","_state","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","focusInitialElementWhenReady","toFocus","_onAnimationStart","MatAnchor","MatButton","MatButtonToggleGroupBase","_MatButtonToggleGroupMixinBase","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","_uniqueIdCounter","MatButtonToggleChange","_updateButtonToggleNames","_updateSelectedButtonToggleFromValue","_buttonToggles","matchingButtonToggle","buttonToggle","_markButtonTogglesForCheck","[class.mat-button-toggle-vertical]","MatButtonToggle","MatButtonToggleGroupMultiple","MatButtonToggleBase","_MatButtonToggleMixinBase","toggleGroup","toggleGroupMultiple","_buttonToggleDispatcher","_isSingleSelector","buttonToggleGroup","buttonToggleGroupMultiple","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","MatButtonToggleModule","MatCardContent","MatCardTitle","MatCardSubtitle","[class.mat-card-actions-align-end]","MatCardActions","MatCardFooter","MatCardImage","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardXlImage","MatCardAvatar","MatCardHeader","MatCardTitleGroup","MatCard","MatCardModule","MatCheckboxChange","MatCheckboxBase","_MatCheckboxMixinBase","_clickAction","_currentAnimationClass","_currentCheckState","TransitionCheckState","Init","_indeterminate","changed","_transitionCheckState","Indeterminate","Checked","Unchecked","_getAriaChecked","newState","oldState","_getAnimationClassForCheckStateTransition","_removeFocusRipple","_onInteractionEvent","animSuffix","autocomplete","_isOpen","_overlayAttached","_closingActionsSubscription","_componentDestroyed","MatAutocompleteTrigger","optionSelections","_closeKeyEventStream","_outsideClickStream","clickTarget","formField","_setTriggerValue","_resetActiveItem","activeOption","prevActiveItem","TAB","_canOpen","openPanel","_scrollToOption","_handleInput","_attachOverlay","_floatLabel","shouldAnimate","floatLabel","_animateAndLockLabel","_manuallyFloatingLabel","_resetLabel","newScrollPosition","_getScrollTop","_setScrollTop","_subscribeToClosingActions","firstStable","_zone","optionChanges","_positionStrategy","recalculateLastPosition","_setVisibility","panelClosingActions","_setValueAndClose","_destroyPanel","closePanel","toDisplay","inputValue","_control","_clearPreviousSelectedOption","_emitSelectEvent","getMatAutocompleteMissingPanelError","_getHostWidth","wasOpen","_getConnectedElement","autoActiveFirstOption","readOnly","aria-autocomplete","(focusin)","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","Host","MatAutocomplete","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER","MatAutocompleteModule","MatBadge","_color","_overlap","val","_updateTextContent","_description","newDescription","_updateHostAriaDescription","_hidden","isAfter","description","_badgeElement","_createBadgeElement","badgeElement","oldDescription","colorPalette","[class.mat-badge-overlap]","[class.mat-badge-above]","[class.mat-badge-below]","[class.mat-badge-before]","[class.mat-badge-after]","[class.mat-badge-small]","[class.mat-badge-medium]","[class.mat-badge-large]","[class.mat-badge-hidden]","overlap","hidden","MatBadgeModule","matBottomSheetAnimations","bottomSheetState","MatBottomSheetContainer","breakpointObserver","_elementFocusedBeforeOpened","_breakpointSubscription","Medium","Large","XLarge","_toggleClass","isMatched","_validatePortalAttached","_setPanelClass","bottomSheetConfig","(@state.start)","FocusTrapFactory","MAT_BOTTOM_SHEET_DATA","MatBottomSheetConfig","MatBottomSheetRef","_keydownEvents","MatBottomSheet","_parentBottomSheet","_bottomSheetRefAtThisLevel","_openedBottomSheetRef","_attachContainer","ref","bottomSheetRef","scrollStrategies","block","MatBottomSheetModule","DEFAULT_ROUND_BUTTON_COLOR","DEFAULT_FLAT_BUTTON_COLOR","BUTTON_HOST_ATTRIBUTES","MatButtonBase","_MatButtonMixinBase","_isRoundButton","_hasHostAttributes","_isIconButton","BUTTON_HOST_ATTRIBUTES_1","attributes","attribute","focusMonitor","stopImmediatePropagation","_parent","_emitSelectionChangeEvent","setActiveStyles","setInactiveStyles","ngAfterViewChecked","_mostRecentViewValue","MatOptionSelectionChange","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]","MAT_LABEL_GLOBAL_OPTIONS","MatError","matFormFieldAnimations","transitionMessages","[class.mat-right]","MatHint","MatLabel","MatPlaceholder","MatPrefix","MatSuffix","MatFormFieldBase","_MatFormFieldMixinBase","MAT_FORM_FIELD_DEFAULT_OPTIONS","labelOptions","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_outlineGapWidth","_outlineGapStart","_labelOptions","float","_appearance","appearance","_hideRequiredMarker","_processHints","_connectionContainerRef","_validateControlChild","_validatePlaceholders","_syncDescribedByIds","valueChanges","_hintChildren","_errorChildren","updateOutlineGap","_shouldForward","prop","_hasPlaceholder","_placeholderChild","_hasLabel","_labelChild","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_hasFloatingLabel","_getDisplayedMessages","errorState","_label","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","hintLabel","getMatFormFieldDuplicatedHintError","startHint","endHint","getMatFormFieldMissingControlError","containerStart","_getStartEnd","labelStart","labelWidth","outlineGapPadding","rect","[class.mat-form-field-appearance-standard]","[class.mat-form-field-appearance-fill]","[class.mat-form-field-appearance-outline]","[class.mat-form-field-appearance-legacy]","[class.mat-input-invalid]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-form-field-autofilled]","[class.mat-focused]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","hideRequiredMarker","floatPlaceholder","underlineRef","_prefixChildren","_suffixChildren","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","MatAutocompleteBase","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","defaults","showPanel","optionSelected","_autoActiveFirstOption","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY","__extends","d","__","constructor","extendStatics","base","class_1","defaultColor","defaultTabIndex","matcher","mixinInitialized","_pendingSubscribers","initialized","Observable","subscriber","_notifySubscriber","_markInitialized","range","valueFunction","valuesArray","enforceStyleRecalculation","getPropertyValue","distanceToFurthestCorner","distX","distY","sqrt","optionsArray","groups","groupCounter","optionOffset","currentScrollPosition","optionHeight","reposition","defaultOptions","provider","exp","match","parentRegistry","httpClient","sanitizer","scrollThrottle","parentIntl","sortOrder","setPrototypeOf","__proto__","__assign","assign","s","n","SHARP_CURVE","MATERIAL_SANITY_CHECKS","_sanityChecksEnabled","_hasDoneGlobalChecks","_hasCheckedHammer","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","doctype","testElement","body","computedStyle","_checkHammerIsAvailable","MAT_DATE_LOCALE","MAT_DATE_LOCALE_PROVIDER","LOCALE_ID","_localeChanges","setLocale","locale","second","firstValid","secondValid","SUPPORTS_INTL_API","Intl","DEFAULT_MONTH_NAMES","short","String","DEFAULT_DATE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","NativeDateAdapter","matDateLocale","useUtcForDisplay","_clampDate","getFullYear","getDay","dtf_1","DateTimeFormat","timeZone","_stripDirectionalityCharacters","_format","Date","dtf_2","day","dtf_3","weekday","dtf","_createDateWithOverflow","clone","displayFormat","setFullYear","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","test","isNaN","getTime","NaN","UTC","getHours","getMinutes","getSeconds","getMilliseconds","MAT_NATIVE_DATE_FORMATS","NativeDateModule","MatNativeDateModule","ShowOnDirtyErrorStateMatcher","dirty","submitted","touched","MAT_HAMMER_OPTIONS","_hammerOptions","commonModule","_hammer","Hammer","events","buildHammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","MatLine","_setLineClass","count","_resetClasses","_setClass","isAdd","RippleRef","_renderer","RippleState","HIDDEN","fadeOutRipple","defaultRippleAnimationConfig","enterDuration","exitDuration","ignoreMouseEventsTimeout","_target","_isPointerDown","_triggerEvents","_activeRipples","_eventOptions","onMousedown","isSyntheticEvent","_lastTouchStartEvent","now","rippleDisabled","fadeInRipple","onTouchStart","touches","onPointerUp","VISIBLE","FADING_IN","_containerElement","containerRect","_containerRect","animationConfig","centered","radius","transitionDuration","rippleRef","runTimeoutOutsideZone","wasActive","rippleEl","FADING_OUT","fadeOutAll","_triggerElement","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","_trigger","configOrX","[class.mat-ripple-unbounded]","unbounded","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatPseudoCheckbox","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter","_labelId","[class.mat-optgroup-disabled]"],"mappings":"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"}