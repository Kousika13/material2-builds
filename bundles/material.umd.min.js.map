{"version":3,"file":"material.umd.min.js","sources":["../../src/lib/tabs/tab-group.ts","../../src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/lib/tabs/tabs-module.ts","../../src/lib/toolbar/toolbar.ts","../../src/lib/toolbar/toolbar-module.ts","../../src/lib/tree/outlet.ts","../../src/lib/tree/node.ts","../../src/lib/tree/padding.ts","../../src/lib/tree/tree.ts","../../src/lib/tree/toggle.ts","../../src/lib/tree/tree-module.ts","../../src/lib/tree/data-source/flat-data-source.ts","../../src/lib/tree/data-source/nested-data-source.ts","../../src/lib/version.ts","../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/core/testing/month-constants.ts","../../src/lib/expansion/expansion-animations.ts","../../src/lib/select/select.ts","../../src/lib/tooltip/tooltip.ts","../../src/lib/stepper/stepper.ts","../../src/lib/stepper/stepper-button.ts","../../src/lib/stepper/stepper-module.ts","../../src/lib/table/table.ts","../../src/lib/table/cell.ts","../../src/lib/table/row.ts","../../src/lib/table/table-module.ts","../../src/lib/table/table-data-source.ts","../../src/lib/tabs/ink-bar.ts","../../src/lib/tabs/tab-label.ts","../../src/lib/tabs/tab-content.ts","../../src/lib/tabs/tab.ts","../../src/lib/tabs/tabs-animations.ts","../../src/lib/tabs/tab-body.ts","../../src/lib/tabs/tab-label-wrapper.ts","../../src/lib/tabs/tab-header.ts","../../src/lib/snack-bar/snack-bar-ref.ts","../../src/lib/snack-bar/snack-bar-config.ts","../../src/lib/snack-bar/snack-bar-animations.ts","../../src/lib/snack-bar/simple-snack-bar.ts","../../src/lib/snack-bar/snack-bar-container.ts","../../src/lib/snack-bar/snack-bar.ts","../../src/lib/snack-bar/snack-bar-module.ts","../../src/lib/sort/sort.ts","../../src/lib/sort/sort-animations.ts","../../src/lib/sort/sort-header-intl.ts","../../src/lib/sort/sort-header.ts","../../src/lib/sort/sort-module.ts","../../src/lib/stepper/step-label.ts","../../src/lib/stepper/stepper-intl.ts","../../src/lib/stepper/step-header.ts","../../src/lib/stepper/stepper-animations.ts","../../src/lib/stepper/stepper-icon.ts","../../src/lib/sidenav/sidenav.ts","../../src/lib/sidenav/sidenav-module.ts","../../src/lib/slide-toggle/slide-toggle.ts","../../src/lib/slide-toggle/slide-toggle-module.ts","../../src/lib/slider/slider.ts","../../src/lib/slider/slider-module.ts","../../src/lib/progress-spinner/progress-spinner.ts","../../src/lib/progress-spinner/progress-spinner-module.ts","../../src/lib/radio/radio.ts","../../src/lib/radio/radio-module.ts","../../src/lib/sidenav/drawer-animations.ts","../../src/lib/sidenav/drawer.ts","../../src/lib/select/select-module.ts","../../src/lib/tooltip/tooltip-animations.ts","../../src/lib/tooltip/tooltip-module.ts","../../src/lib/paginator/paginator-intl.ts","../../src/lib/paginator/paginator.ts","../../src/lib/paginator/paginator-module.ts","../../src/lib/progress-bar/progress-bar.ts","../../src/lib/progress-bar/progress-bar-module.ts","../../src/lib/menu/menu-directive.ts","../../src/lib/menu/menu-trigger.ts","../../src/lib/menu/menu-module.ts","../../src/lib/select/select-animations.ts","../../src/lib/list/selection-list.ts","../../src/lib/list/list-module.ts","../../src/lib/menu/menu-content.ts","../../src/lib/menu/menu-animations.ts","../../src/lib/menu/menu-item.ts","../../src/lib/list/list.ts","../../src/lib/icon/icon-registry.ts","../../src/lib/icon/icon.ts","../../src/lib/icon/icon-module.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-module.ts","../../src/lib/divider/divider.ts","../../src/lib/divider/divider-module.ts","../../src/lib/expansion/accordion.ts","../../src/lib/expansion/expansion-panel-content.ts","../../src/lib/expansion/expansion-panel.ts","../../src/lib/expansion/expansion-panel-header.ts","../../src/lib/expansion/expansion-module.ts","../../src/lib/grid-list/grid-tile.ts","../../src/lib/grid-list/tile-coordinator.ts","../../src/lib/grid-list/tile-styler.ts","../../src/lib/grid-list/grid-list.ts","../../src/lib/grid-list/grid-list-module.ts","../../src/lib/datepicker/multi-year-view.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/datepicker/calendar.ts","../../src/lib/datepicker/datepicker-animations.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/dialog/dialog-container.ts","../../src/lib/dialog/dialog-ref.ts","../../src/lib/dialog/dialog.ts","../../src/lib/dialog/dialog-content-directives.ts","../../src/lib/dialog/dialog-module.ts","../../src/lib/input/autosize.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/input.ts","../../src/lib/input/input-module.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/chips/chip.ts","../../src/lib/chips/chip-default-options.ts","../../src/lib/chips/chip-list.ts","../../src/lib/chips/chip-input.ts","../../src/lib/chips/chips-module.ts","../../src/lib/dialog/dialog-config.ts","../../src/lib/dialog/dialog-animations.ts","../../src/lib/button/button.ts","../../src/lib/button/button-module.ts","../../src/lib/button-toggle/button-toggle.ts","../../src/lib/button-toggle/button-toggle-module.ts","../../src/lib/card/card.ts","../../src/lib/card/card-module.ts","../../src/lib/checkbox/checkbox-config.ts","../../src/lib/autocomplete/autocomplete-module.ts","../../src/lib/badge/badge.ts","../../src/lib/badge/badge-module.ts","../../src/lib/bottom-sheet/bottom-sheet-config.ts","../../src/lib/bottom-sheet/bottom-sheet-ref.ts","../../src/lib/bottom-sheet/bottom-sheet-animations.ts","../../src/lib/bottom-sheet/bottom-sheet-container.ts","../../src/lib/bottom-sheet/bottom-sheet.ts","../../src/lib/bottom-sheet/bottom-sheet-module.ts","../../src/lib/core/option/option.ts","../../src/lib/core/option/index.ts","../../src/lib/core/label/label-options.ts","../../src/lib/form-field/error.ts","../../src/lib/form-field/form-field-animations.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/label.ts","../../src/lib/form-field/placeholder.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field-module.ts","../../src/lib/autocomplete/autocomplete.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/disable-ripple.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/core/common-behaviors/initialized.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/grid-list/grid-list-measure.ts","../../src/lib/menu/menu-errors.ts","../../src/lib/select/select-errors.ts","../../src/lib/sort/sort-errors.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/datetime/date-formats.ts","../../src/lib/core/datetime/native-date-formats.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/line/line.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/option/optgroup.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisableRipple,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette\n} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\n\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nexport class MatTabGroupBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabGroupMixinBase = mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://www.google.com/design/spec/components/tabs.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\n\n  @ViewChild('tabBodyWrapper') _tabBodyWrapper: ElementRef;\n\n  @ViewChild('tabHeader') _tabHeader: MatTabHeader;\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n  private _dynamicHeight: boolean = false;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() readonly focusChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() readonly selectedTabChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\n\n  private _groupId: number;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super(elementRef);\n    this._groupId = nextId++;\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked() {\n    // Clamp the next selected index to the boundsof 0 and the tabs length.\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    let indexToSelect = this._indexToSelect =\n        Math.min(this._tabs.length - 1, Math.max(this._indexToSelect || 0, 0));\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect && this._selectedIndex != null) {\n      const tabChangeEvent = this._createChangeEvent(indexToSelect);\n      this.selectedTabChange.emit(tabChangeEvent);\n      // Emitting this value after change detection has run\n      // since the checked content may contain this variable'\n      Promise.resolve().then(() => this.selectedIndexChange.emit(indexToSelect));\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n      tab.isActive = index === indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  /** Re-aligns the ink bar to the selected tab element. */\n  realignInkBar() {\n    if (this._tabHeader) {\n      this._tabHeader._alignInkBarToSelectedTab();\n    }\n  }\n\n  _focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(\n        ...this._tabs.map(tab => tab._disableChange),\n        ...this._tabs.map(tab => tab._labelChange)).subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    this._tabBodyWrapperHeight = this._tabBodyWrapper.nativeElement.clientHeight;\n    this._tabBodyWrapper.nativeElement.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, idx: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = idx;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex, RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from '../ink-bar';\n\n\n// Boilerplate for applying mixins to MatTabNav.\n/** @docs-private */\nexport class MatTabNavBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabNavMixinBase = mixinColor(MatTabNavBase, 'primary');\n\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  exportAs: 'matTabNavBar, matTabNav',\n  inputs: ['color'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTabNav extends _MatTabNavMixinBase implements AfterContentInit, CanColor,\n    OnDestroy {\n\n  /** Subject that emits when the component has been destroyed. */\n  private readonly _onDestroy = new Subject<void>();\n\n  private _activeLinkChanged: boolean;\n  private _activeLinkElement: ElementRef | null;\n\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n\n  /** Query list of all tab links of the tab navigation. */\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true})\n  _tabLinks: QueryList<MatTabLink>;\n\n  /** Background color of the tab nav. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Whether ripples should be disabled for all links or not. */\n  @Input()\n  get disableRipple() { return this._disableRipple; }\n  set disableRipple(value: boolean) {\n    this._disableRipple = coerceBooleanProperty(value);\n    this._setLinkDisableRipple();\n  }\n  private _disableRipple: boolean = false;\n\n  constructor(elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler) {\n    super(elementRef);\n  }\n\n  /**\n   * Notifies the component that the active link has been changed.\n   * @deletion-target 7.0.0 `element` parameter to be removed.\n   */\n  updateActiveLink(element: ElementRef) {\n    // Note: keeping the `element` for backwards-compat, but isn't being used for anything.\n    this._activeLinkChanged = !!element;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  ngAfterContentInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      const dirChange = this._dir ? this._dir.change : observableOf(null);\n\n      return merge(dirChange, this._viewportRuler.change(10))\n          .pipe(takeUntil(this._onDestroy))\n          .subscribe(() => this._alignInkBar());\n    });\n\n    this._setLinkDisableRipple();\n  }\n\n  /** Checks if the active link has been changed and, if so, will update the ink bar. */\n  ngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      const activeTab = this._tabLinks.find(tab => tab.active);\n\n      this._activeLinkElement = activeTab ? activeTab._elementRef : null;\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Aligns the ink bar to the active link. */\n  _alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.show();\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    } else {\n      this._inkBar.hide();\n    }\n  }\n\n  /** Sets the `disableRipple` property on each link of the navigation bar. */\n  private _setLinkDisableRipple() {\n    if (this._tabLinks) {\n      this._tabLinks.forEach(link => link.disableRipple = this.disableRipple);\n    }\n  }\n}\n\n\n// Boilerplate for applying mixins to MatTabLink.\nexport class MatTabLinkBase {}\nexport const _MatTabLinkMixinBase =\n  mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\n\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n@Directive({\n  selector: '[mat-tab-link], [matTabLink]',\n  exportAs: 'matTabLink',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabIndex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled',\n    '[class.mat-tab-label-active]': 'active',\n    '(click)': '_handleClick($event)'\n  }\n})\nexport class MatTabLink extends _MatTabLinkMixinBase\n    implements OnDestroy, CanDisable, CanDisableRipple, HasTabIndex, RippleTarget {\n\n  /** Whether the tab link is active or not. */\n  private _isActive: boolean = false;\n\n  /** Reference to the RippleRenderer for the tab-link. */\n  private _tabLinkRipple: RippleRenderer;\n\n  /** Whether the link is active. */\n  @Input()\n  get active(): boolean { return this._isActive; }\n  set active(value: boolean) {\n    if (value !== this._isActive) {\n      this._isActive = value;\n      this._tabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple;\n  }\n\n  constructor(private _tabNavBar: MatTabNav,\n              public _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Attribute('tabindex') tabIndex: string) {\n    super();\n\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._tabLinkRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    if (globalOptions) {\n      this.rippleConfig = {\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n        speedFactor: globalOptions.baseSpeedFactor,\n        animation: globalOptions.animation,\n      };\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabLinkRipple._removeTriggerEvents();\n  }\n\n  /**\n   * Handles the click event, preventing default navigation if the tab link is disabled.\n   */\n  _handleClick(event: MouseEvent) {\n    if (this.disabled) {\n      event.preventDefault();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabContent} from './tab-content';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n    MatTabContent,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader,\n    MatTabContent,\n  ],\n})\nexport class MatTabsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nexport class MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatToolbarMixinBase = mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': 'this._toolbarRows.length',\n    '[class.mat-toolbar-single-row]': '!this._toolbarRows.length'\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n  private _document: Document;\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(\n    elementRef: ElementRef,\n    private _platform: Platform,\n    @Inject(DOCUMENT) document?: any) {\n    super(elementRef);\n\n    // TODO: make the document a required param when doing breaking changes.\n    this._document = document;\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = [].slice.call(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n      .some(node => node.textContent.trim());\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodeOutlet} from '@angular/cdk/tree';\nimport {\n  Directive,\n  ViewContainerRef,\n} from '@angular/core';\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({\n  selector: '[matTreeNodeOutlet]'\n})\nexport class MatTreeNodeOutlet implements CdkTreeNodeOutlet {\n  constructor(public viewContainer: ViewContainerRef) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Attribute,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Input,\n  IterableDiffers,\n  QueryList\n} from '@angular/core';\nimport {\n  CdkNestedTreeNode,\n  CdkTree,\n  CdkTreeNodeDef,\n  CdkTreeNode,\n} from '@angular/cdk/tree';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {mixinTabIndex, mixinDisabled, CanDisable, HasTabIndex} from '@angular/material/core';\n\n\nexport const _MatTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkTreeNode));\nexport const _MatNestedTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkNestedTreeNode));\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n  selector: 'mat-tree-node',\n  exportAs: 'matTreeNode',\n  inputs: ['disabled', 'tabIndex'],\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.aria-level]': 'level',\n    '[attr.role]': 'role',\n    'class': 'mat-tree-node'\n  },\n  providers: [{provide: CdkTreeNode, useExisting: MatTreeNode}]\n})\nexport class MatTreeNode<T> extends _MatTreeNodeMixinBase<T> implements HasTabIndex, CanDisable {\n  @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n  constructor(protected _elementRef: ElementRef,\n              protected _tree: CdkTree<T>,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n}\n\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeDef]',\n  inputs: [\n    'when: matTreeNodeDefWhen'\n  ],\n  providers: [{provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef}]\n})\nexport class MatTreeNodeDef<T> extends CdkTreeNodeDef<T> {\n  @Input('matTreeNode') data: T;\n}\n\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\n@Directive({\n  selector: 'mat-nested-tree-node',\n  exportAs: 'matNestedTreeNode',\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.role]': 'role',\n    'class': 'mat-nested-tree-node',\n  },\n  inputs: ['disabled', 'tabIndex'],\n  providers: [\n    {provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CdkTreeNode, useExisting: MatNestedTreeNode}\n  ]\n})\nexport class MatNestedTreeNode<T> extends _MatNestedTreeNodeMixinBase<T>\n    implements HasTabIndex, CanDisable {\n\n  @Input('matNestedTreeNode') node: T;\n\n  @ContentChildren(MatTreeNodeOutlet) nodeOutlet: QueryList<MatTreeNodeOutlet>;\n\n  constructor(protected _elementRef: ElementRef,\n              protected _tree: CdkTree<T>,\n              protected _differs: IterableDiffers,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree, _differs);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n\n  // This is a workaround for https://github.com/angular/angular/issues/23091\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  // TODO(tinayuangao): Remove when the angular issue #23091 is fixed\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodePadding} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodePadding]',\n  providers: [{provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding}]\n})\nexport class MatTreeNodePadding<T> extends CdkTreeNodePadding<T> {\n\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  @Input('matTreeNodePadding') level: number;\n\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n  @Input('matTreeNodePaddingIndent') indent: number;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation} from '@angular/core';\nimport {CdkTree} from '@angular/cdk/tree';\nimport {MatTreeNodeOutlet} from './outlet';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tree',\n  exportAs: 'matTree',\n  template: `<ng-container matTreeNodeOutlet></ng-container>`,\n  host: {\n    'class': 'mat-tree',\n    'role': 'tree',\n  },\n  styleUrls: ['tree.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [{provide: CdkTree, useExisting: MatTree}]\n})\nexport class MatTree<T> extends CdkTree<T> {\n  // Outlets within the tree's template where the dataNodes will be inserted.\n  @ViewChild(MatTreeNodeOutlet) _nodeOutlet: MatTreeNodeOutlet;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\nimport {CdkTreeNodeToggle} from '@angular/cdk/tree';\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeToggle]',\n  host: {\n    '(click)': '_toggle($event)',\n  },\n  providers: [{provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle}]\n})\nexport class MatTreeNodeToggle<T> extends CdkTreeNodeToggle<T> {\n  @Input('matTreeNodeToggleRecursive') recursive: boolean = true;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatNestedTreeNode, MatTreeNodeDef, MatTreeNode} from './node';\nimport {MatTree} from './tree';\nimport {MatTreeNodeToggle} from './toggle';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {MatTreeNodePadding} from './padding';\n\nconst MAT_TREE_DIRECTIVES = [\n  MatNestedTreeNode,\n  MatTreeNodeDef,\n  MatTreeNodePadding,\n  MatTreeNodeToggle,\n  MatTree,\n  MatTreeNode,\n  MatTreeNodeOutlet\n];\n\n@NgModule({\n  imports: [CdkTreeModule, CommonModule, MatCommonModule],\n  exports: MAT_TREE_DIRECTIVES,\n  declarations: MAT_TREE_DIRECTIVES,\n})\nexport class MatTreeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {FlatTreeControl, TreeControl} from '@angular/cdk/tree';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map, take} from 'rxjs/operators';\n\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class MatTreeFlattener<T, F> {\n\n  constructor(public transformFunction: (node: T, level: number) => F,\n              public getLevel: (node: F) => number,\n              public isExpandable: (node: F) => boolean,\n              public getChildren: (node: T) => Observable<T[]>) {}\n\n  _flattenNode(node: T, level: number,\n               resultNodes: F[], parentMap: boolean[]): F[] {\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n\n    if (this.isExpandable(flatNode)) {\n      this.getChildren(node).pipe(take(1)).subscribe(children => {\n        children.forEach((child, index) => {\n          let childParentMap: boolean[] = parentMap.slice();\n          childParentMap.push(index != children.length - 1);\n          this._flattenNode(child, level + 1, resultNodes, childParentMap);\n        });\n      });\n    }\n    return resultNodes;\n  }\n\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   */\n  flattenNodes(structuredData: T[]): F[] {\n    let resultNodes: F[] = [];\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   */\n  expandFlattenedNodes(nodes: F[], treeControl: TreeControl<F>): F[] {\n    let results: F[] = [];\n    let currentExpand: boolean[] = [];\n    currentExpand[0] = true;\n\n    nodes.forEach((node) => {\n      let expand = true;\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n      if (expand) {\n        results.push(node);\n      }\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nexport class MatTreeFlatDataSource<T, F> extends DataSource<F> {\n  _flattenedData = new BehaviorSubject<F[]>([]);\n\n  _expandedData = new BehaviorSubject<F[]>([]);\n\n  _data: BehaviorSubject<T[]>;\n  get data() { return this._data.value; }\n  set data(value: T[]) {\n    this._data.next(value);\n    this._flattenedData.next(this.treeFlattener.flattenNodes(this.data));\n    this.treeControl.dataNodes = this._flattenedData.value;\n  }\n\n  constructor(private treeControl: FlatTreeControl<F>,\n              private treeFlattener: MatTreeFlattener<T, F>,\n              initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n  }\n\n  connect(collectionViewer: CollectionViewer): Observable<F[]> {\n    const changes = [\n      collectionViewer.viewChange,\n      this.treeControl.expansionModel.onChange!,\n      this._flattenedData\n    ];\n    return merge(...changes).pipe(map(() => {\n      this._expandedData.next(\n        this.treeFlattener.expandFlattenedNodes(this._flattenedData.value, this.treeControl));\n      return this._expandedData.value;\n    }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nexport class MatTreeNestedDataSource<T> extends DataSource<T> {\n  _data = new BehaviorSubject<T[]>([]);\n\n  /**\n   * Data for the nested treee\n   */\n  get data() { return this._data.value; }\n  set data(value: T[]) { this._data.next(value); }\n\n  connect(collectionViewer: CollectionViewer): Observable<T[]> {\n    return merge(...[collectionViewer.viewChange, this._data])\n      .pipe(map(() => {\n        return this.data;\n      }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('6.0.0-rc.11-b057391');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n  ViewportRuler,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {filter, take, switchMap, delay, tap} from 'rxjs/operators';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  MatOption,\n  MatOptionSelectionChange,\n} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {Subscription, defer, fromEvent, merge, of as observableOf, Subject, Observable} from 'rxjs';\nimport {MatAutocomplete} from './autocomplete';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy', {\n      providedIn: 'root',\n      factory: () => {\n        const overlay = inject(Overlay);\n        return () => overlay.scrollStrategies.reposition();\n      }\n    });\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    'role': 'combobox',\n    'autocomplete': 'off',\n    'aria-autocomplete': 'list',\n    '[attr.aria-activedescendant]': 'activeOption?.id',\n    '[attr.aria-expanded]': 'panelOpen.toString()',\n    '[attr.aria-owns]': 'autocomplete?.id',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  exportAs: 'matAutocompleteTrigger',\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal;\n  private _componentDestroyed = false;\n\n  /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n  private _previousValue: string | number | null;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Subscription to viewport size changes. */\n  private _viewportSubscription = Subscription.EMPTY;\n\n  /** Stream of keyboard events that can close the panel. */\n  private readonly _closeKeyEventStream = new Subject<void>();\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when autocomplete has been touched` */\n  _onTouched = () => {};\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  constructor(private _element: ElementRef, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @deletion-target 7.0.0 Make `_viewportRuler` required.\n              private _viewportRuler?: ViewportRuler) {}\n\n  ngOnDestroy() {\n    this._viewportSubscription.unsubscribe();\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._overlayAttached && this.autocomplete.showPanel;\n  }\n  private _overlayAttached: boolean = false;\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (!this._overlayAttached) {\n      return;\n    }\n\n    if (this.panelOpen) {\n      // Only emit if the panel was visible.\n      this.autocomplete.closed.emit();\n    }\n\n    this.autocomplete._isOpen = this._overlayAttached = false;\n\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n\n    // Note that in some cases this can end up being called after the component is destroyed.\n    // Add a check to ensure that we don't try to run change detection on a destroyed view.\n    if (!this._componentDestroyed) {\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)),\n      this._closeKeyEventStream,\n      this._outsideClickStream,\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n          observableOf()\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  readonly optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .asObservable()\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  });\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private get _outsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return merge(\n      fromEvent(this._document, 'click'),\n      fromEvent(this._document, 'touchend')\n    )\n    .pipe(filter((event: MouseEvent | TouchEvent) => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._overlayAttached &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n    if (keyCode === ESCAPE) {\n      event.preventDefault();\n    }\n\n    // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n    // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n    if (this.panelOpen && (keyCode === ESCAPE || (keyCode === UP_ARROW && event.altKey))) {\n      this._resetActiveItem();\n      this._closeKeyEventStream.next();\n      event.stopPropagation();\n    } else if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    let target = event.target as HTMLInputElement;\n    let value: number | string | null = target.value;\n\n    // Based on `NumberValueAccessor` from forms.\n    if (target.type === 'number') {\n      value = value == '' ? null : parseFloat(value);\n    }\n\n    // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._canOpen() && this._previousValue !== value &&\n      document.activeElement === event.target) {\n      this._previousValue = value;\n      this._onChange(value);\n      this.openPanel();\n    }\n  }\n\n  _handleFocus(): void {\n    if (this._canOpen()) {\n      this._previousValue = this._element.nativeElement.value;\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const index = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(index,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n\n    const newScrollPosition = _getOptionScrollPosition(\n      index + labelCount,\n      AUTOCOMPLETE_OPTION_HEIGHT,\n      this.autocomplete._getScrollTop(),\n      AUTOCOMPLETE_PANEL_HEIGHT\n    );\n\n    this.autocomplete._setScrollTop(newScrollPosition);\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.reapplyLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n      .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n          this._resetActiveItem();\n          this.autocomplete._setVisibility();\n          return this.panelClosingActions;\n        }),\n        // when the first closing event occurs...\n        take(1)\n      )\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      this._overlayRef = this._overlay.create(this._getOverlayConfig());\n\n      if (this._viewportRuler) {\n        this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n          if (this.panelOpen && this._overlayRef) {\n            this._overlayRef.updateSize({width: this._getHostWidth()});\n          }\n        });\n      }\n    } else {\n      /** Update the panel width, in case the host width has changed */\n      this._overlayRef.updateSize({width: this._getHostWidth()});\n    }\n\n    if (this._overlayRef && !this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    const wasOpen = this.panelOpen;\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._overlayAttached = true;\n\n    // We need to do an extra `panelOpen` check in here, because the\n    // autocomplete won't be shown if there are no options.\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\n      this.autocomplete.opened.emit();\n    }\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getHostWidth(),\n      direction: this._dir ? this._dir.value : 'ltr'\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy = this._overlay.position()\n      .flexibleConnectedTo(this._getConnectedElement())\n      .withFlexibleDimensions(false)\n      .withPush(false)\n      .withPositions([\n        {originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top'},\n        {originX: 'start', originY: 'top', overlayX: 'start', overlayY: 'bottom'}\n      ]);\n\n    return this._positionStrategy;\n  }\n\n  private _getConnectedElement(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n  }\n\n  /** Determines whether the panel can be opened. */\n  private _canOpen(): boolean {\n    const element: HTMLInputElement = this._element.nativeElement;\n    return !element.readOnly && !element.disabled;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n    OCT = 9, NOV = 10, DEC = 11;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  animateChild,\n  group,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/** Animations used by the Material expansion panel. */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '48px'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '64px'}\n    }),\n    transition('expanded <=> collapsed', group([\n      query('@indicatorRotate', animateChild(), {optional: true}),\n      animate(EXPANSION_PANEL_ANIMATION_TIMING),\n    ])),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  SPACE,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  CdkConnectedOverlay,\n  Overlay,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  ViewportRuler,\n} from '@angular/cdk/overlay';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  CanDisable,\n  CanDisableRipple,\n  CanUpdateErrorState,\n  ErrorStateMatcher,\n  HasTabIndex,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinErrorState,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {defer, merge, Observable, Subject} from 'rxjs';\nimport {filter, map, startWith, switchMap, take, takeUntil} from 'rxjs/operators';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 20px.\n */\nexport const SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 20;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nexport class MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatSelectMixinBase = mixinDisableRipple(\n    mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_ariaLabel',\n    '[attr.aria-labelledby]': 'ariaLabelledby',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanel,\n    matSelectAnimations.fadeInContent\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form. */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Whether the panel's animation is done. */\n  _panelDoneAnimating: boolean = false;\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy = this._scrollStrategyFactory();\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the component is disabling centering of the active option over the trigger. */\n  private _disableOptionCentering: boolean = false;\n\n  /** Whether the select is focused. */\n  focused: boolean = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger') trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether to center the active option over the trigger. */\n  @Input()\n  get disableOptionCentering(): boolean { return this._disableOptionCentering; }\n  set disableOptionCentering(value: boolean) {\n    this._disableOptionCentering = coerceBooleanProperty(value);\n  }\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.options) {\n      return merge(...this.options.map(option => option.onSelectionChange));\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  });\n\n   /** Event emitted when the select panel has been toggled. */\n   @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the select has been opened. */\n  @Output('opened') readonly _openedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => o), map(() => {}));\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed') readonly _closedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => !o), map(() => {}));\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectChange> =\n      new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) private _scrollStrategyFactory) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes.disabled) {\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);\n\n    this._panelOpen = true;\n    this._keyManager.withHorizontalOrientation(null);\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n        keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  /**\n   * When the panel element is finished transforming in (though not fading in), it\n   * emits an event and focuses an option if the panel is open.\n   */\n  _onPanelDone(): void {\n    if (this.panelOpen) {\n      this._scrollTop = 0;\n      this.openedChange.emit(true);\n    } else {\n      this.openedChange.emit(false);\n      this._panelDoneAnimating = false;\n      this.overlayDir.offsetX = 0;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * When the panel content is done fading in, the _panelDoneAnimating property is\n   * set so the proper class can be added to the panel.\n   */\n  _onFadeInDone(): void {\n    this._panelDoneAnimating = this.panelOpen;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this.focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this.focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[], isUserInput = false): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      this._clearSelection();\n\n      const correspondingOption = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(correspondingOption);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput = false): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      isUserInput ? correspondingOption._selectViaInteraction() : correspondingOption.select();\n      this._selectionModel.select(correspondingOption);\n      this.stateChanges.next();\n    }\n\n    return correspondingOption;\n  }\n\n\n  /**\n   * Clears the select trigger and deselects every option in the list.\n   * @param skip Option that should not be deselected.\n   */\n  private _clearSelection(skip?: MatOption): void {\n    this._selectionModel.clear();\n    this.options.forEach(option => {\n      if (option !== skip) {\n        option.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\n      .withTypeAhead()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n\n      this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => this.close());\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges\n      .pipe(takeUntil(changedOrDestroyed), filter(event => event.isUserInput))\n      .subscribe(event => {\n        this._onSelect(event.source);\n\n        if (!this.multiple && this._panelOpen) {\n          this.close();\n          this.focus();\n        }\n      });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    // TODO(crisbeto): handle blank/null options inside multi-select.\n    if (this.multiple) {\n      this._selectionModel.toggle(option);\n      this.stateChanges.next();\n      wasSelected ? option.deselect() : option.select();\n      this._keyManager.setActiveItem(option);\n      this._sortValues();\n    } else {\n      this._clearSelection(option.value == null ? undefined : option);\n\n      if (option.value == null) {\n        this._propagateChanges(option.value);\n      } else {\n        this._selectionModel.select(option);\n        this.stateChanges.next();\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.options.forEach(option => {\n        if (option.selected) {\n          this._selectionModel.select(option);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options,\n        this.optionGroups);\n\n    this.panel.nativeElement.scrollTop = _getOptionScrollPosition(\n      activeOptionIndex + labelCount,\n      this._getItemHeight(),\n      this.panel.nativeElement.scrollTop,\n      SELECT_PANEL_MAX_HEIGHT\n    );\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options,\n        this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  get _ariaLabel(): string | null {\n    // If an ariaLabelledby value has been set, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors.\n    this.overlayDir.offsetX = offsetX;\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    // Disable offset if requested by user by returning 0 as value to offset\n    if (this._disableOptionCentering) {\n      return 0;\n    }\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height\n    // difference, multiplied by -1 to ensure that the overlay moves in the correct\n    // direction up the page.\n    return optionOffsetFromPanelTop * -1 - optionHeightAdjustment;\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {BreakpointObserver, Breakpoints, BreakpointState} from '@angular/cdk/layout';\nimport {\n  ConnectionPositionPair,\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConnectionPosition,\n  OverlayRef,\n  ScrollDispatcher,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject, Observable} from 'rxjs';\nimport {matTooltipAnimations} from './tooltip-animations';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/** Creates an error to be thrown if the user supplied an invalid tooltip position. */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy', {\n      providedIn: 'root',\n      factory: () => {\n        const overlay = inject(Overlay);\n        return () => overlay.scrollStrategies.reposition({scrollThrottle: SCROLL_THROTTLE_MS});\n      }\n    });\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options', {\n      providedIn: 'root',\n      factory: () => ({\n        showDelay: 0,\n        hideDelay: 0,\n        touchendHideDelay: 1500,\n      })\n    });\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.google.com/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': '_handleTouchend()',\n  },\n})\nexport class MatTooltip implements OnDestroy {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _portal: ComponentPortal<TooltipComponent>;\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      if (this._overlayRef) {\n        this._updatePosition();\n\n        if (this._tooltipInstance) {\n          this._tooltipInstance!.show(value, 0);\n        }\n\n        this._overlayRef.updatePosition();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay = this._defaultOptions.showDelay;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay = this._defaultOptions.hideDelay;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, Function>();\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    private _platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) private _scrollStrategy,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions: MatTooltipDefaultOptions) {\n\n    const element: HTMLElement = _elementRef.nativeElement;\n\n    // The mouse events shouldn't be bound on iOS devices, because\n    // they can prevent the first tap from firing its click event.\n    if (!_platform.IOS) {\n      this._manualListeners.set('mouseenter', () => this.show());\n      this._manualListeners.set('mouseleave', () => this.hide());\n\n      this._manualListeners\n        .forEach((listener, event) => _elementRef.nativeElement.addEventListener(event, listener));\n    } else if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS, because it will prevent users from typing in inputs. If\n      // we're on iOS and the tooltip is attached on an input or textarea, we clear\n      // the `user-select` to avoid these issues.\n      element.style.webkitUserSelect = element.style.userSelect = '';\n    }\n\n    _focusMonitor.monitor(element).pipe(takeUntil(this._destroyed)).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin !== 'program') {\n        _ngZone.run(() => this.show());\n      }\n    });\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._tooltipInstance = null;\n    }\n\n    // Clean up the event listeners set in the constructor\n    if (!this._platform.IOS) {\n      this._manualListeners.forEach((listener, event) =>\n        this._elementRef.nativeElement.removeEventListener(event, listener));\n\n      this._manualListeners.clear();\n    }\n\n    this._destroyed.next();\n    this._destroyed.complete();\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message) { return; }\n\n    const overlayRef = this._createOverlay();\n\n    this._detach();\n    this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    this._tooltipInstance = overlayRef.attach(this._portal).instance;\n    this._tooltipInstance.afterHidden()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(this._position, delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Handles the touchend events on the host element. */\n  _handleTouchend() {\n    this.hide(this._defaultOptions.touchendHideDelay);\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    if (this._overlayRef) {\n      return this._overlayRef;\n    }\n\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n    const direction = this._dir ? this._dir.value : 'ltr';\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay.position()\n      .flexibleConnectedTo(this._elementRef)\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8)\n      .withPositions([\n        {...origin.main, ...overlay.main},\n        {...origin.fallback, ...overlay.fallback}\n      ]);\n\n    const scrollableAncestors = this._scrollDispatcher\n      .getAncestorScrollContainers(this._elementRef);\n\n    strategy.withScrollableContainers(scrollableAncestors);\n\n    strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        } else {\n          // Otherwise recalculate the origin based on the new position.\n          this._tooltipInstance._setTransformOrigin(change.connectionPair, direction);\n        }\n      }\n    });\n\n    this._overlayRef = this._overlay.create({\n      direction,\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._overlayRef.detachments()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n\n    return this._overlayRef;\n  }\n\n  /** Detaches the currently-attached tooltip. */\n  private _detach() {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /** Updates the position of the current tooltip. */\n  private _updatePosition() {\n    const position =\n        this._overlayRef!.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    position\n      .withPositions([\n        {...origin.main, ...overlay.main},\n        {...origin.fallback, ...overlay.fallback}\n      ]);\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let originPosition: OriginConnectionPosition;\n\n    if (position == 'above' || position == 'below') {\n      originPosition = {originX: 'center', originY: position == 'above' ? 'top' : 'bottom'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      originPosition = {originX: 'start', originY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      originPosition = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(originPosition.originX, originPosition.originY);\n\n    return {\n      main: originPosition,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let overlayPosition: OverlayConnectionPosition;\n\n    if (position == 'above') {\n      overlayPosition = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (position == 'below') {\n      overlayPosition = {overlayX: 'center', overlayY: 'top'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      overlayPosition = {overlayX: 'end', overlayY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      overlayPosition = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n    return {\n      main: overlayPosition,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(\n        take(1),\n        takeUntil(this._destroyed)\n      ).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** The transform origin used in the animation for showing and hiding the tooltip */\n  _transformOrigin: 'top' | 'bottom' | 'left' | 'right' = 'bottom';\n\n  /** Current position of the tooltip. */\n  private _position: TooltipPosition;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private readonly _onHide: Subject<any> = new Subject();\n\n  /** Stream that emits whether the user has a handset-sized display.  */\n  _isHandset: Observable<BreakpointState> = this._breakpointObserver.observe(Breakpoints.Handset);\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _breakpointObserver: BreakpointObserver) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param position Position of the tooltip.\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(position: TooltipPosition, delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._position = position;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  /** Sets the tooltip transform origin according to the position of the tooltip overlay. */\n  _setTransformOrigin(overlayPosition: ConnectionPositionPair, direction: Direction) {\n    const axis = (this._position === 'above' || this._position === 'below') ? 'Y' : 'X';\n    const position = axis == 'X' ? overlayPosition.overlayX : overlayPosition.overlayY;\n\n    if (position === 'top' || position === 'bottom') {\n      this._transformOrigin = position;\n    } else if (position === 'start') {\n      this._transformOrigin = direction === 'ltr' ? 'left' : 'right';\n    } else if (position === 'end') {\n      this._transformOrigin = direction === 'ltr' ? 'right' : 'left';\n    } else {\n      throw getMatTooltipInvalidPositionError(this._position);\n    }\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      this._closeOnInteraction = true;\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.google.com/components/tooltips.html#tooltips-interaction\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {CdkStep, CdkStepper, StepContentPositionState} from '@angular/cdk/stepper';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Optional,\n  Output,\n  QueryList,\n  SkipSelf,\n  TemplateRef,\n  ViewChildren,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {takeUntil} from 'rxjs/operators';\nimport {matStepperAnimations} from './stepper-animations';\nimport {MatStepperIcon, MatStepperIconContext} from './stepper-icon';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: ErrorStateMatcher, useExisting: MatStep}],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matStep',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\n  /** Content for step label given by `<ng-template matStepLabel>`. */\n  @ContentChild(MatStepLabel) stepLabel: MatStepLabel;\n\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher) {\n    super(stepper);\n  }\n\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    const customErrorState = !!(control && control.invalid && this.interacted);\n\n    return originalErrorState || customErrorState;\n  }\n}\n\n\n@Directive({\n  selector: '[matStepper]'\n})\nexport class MatStepper extends CdkStepper implements AfterContentInit {\n  /** The list of step headers of the steps in the stepper. */\n  @ViewChildren(MatStepHeader) _stepHeader: QueryList<MatStepHeader>;\n\n  /** Steps that the stepper holds. */\n  @ContentChildren(MatStep) _steps: QueryList<MatStep>;\n\n  /** Custom icon overrides passed in by the consumer. */\n  @ContentChildren(MatStepperIcon) _icons: QueryList<MatStepperIcon>;\n\n  /** Event emitted when the current step is done transitioning in. */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Consumer-specified template-refs to be used to override the header icons. */\n  _iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>} = {};\n\n  ngAfterContentInit() {\n    const icons = this._icons.toArray();\n\n    ['edit', 'done', 'number'].forEach(name => {\n      const override = icons.find(icon => icon.name === name);\n\n      if (override) {\n        this._iconOverrides[name] = override.templateRef;\n      }\n    });\n\n    // Mark the component for change detection whenever the content children query changes\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\n  }\n\n  _animationDone(event: AnimationEvent) {\n    if ((event.toState as StepContentPositionState) === 'current') {\n      this.animationDone.emit();\n    }\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-horizontal-stepper',\n  exportAs: 'matHorizontalStepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    'aria-orientation': 'horizontal',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.horizontalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatHorizontalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatHorizontalStepper extends MatStepper { }\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-vertical-stepper',\n  exportAs: 'matVerticalStepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'aria-orientation': 'vertical',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.verticalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatVerticalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatVerticalStepper extends MatStepper {\n  constructor(@Optional() dir: Directionality, changeDetectorRef: ChangeDetectorRef) {\n    super(dir, changeDetectorRef);\n    this._orientation = 'vertical';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepper, CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {MatStepper} from './stepper';\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperNext]',\n  host: {\n    '(click)': '_stepper.next()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperNext extends CdkStepperNext {}\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperPrevious]',\n  host: {\n    '(click)': '_stepper.previous()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperPrevious extends CdkStepperPrevious {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {ErrorStateMatcher, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nimport {MatStepperIcon} from './stepper-icon';\nimport {MatStepperIntl} from './stepper-intl';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule,\n    MatRippleModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  declarations: [\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  providers: [MatStepperIntl, ErrorStateMatcher],\n})\nexport class MatStepperModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table, table[mat-table]',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTable<T> extends CdkTable<T> { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends CdkCellDef { }\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends CdkHeaderCellDef { }\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [{provide: CdkColumnDef, useExisting: MatColumnDef}],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell, th[mat-header-cell]',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell, td[mat-cell]',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Directive, ViewEncapsulation} from '@angular/core';\nimport {\n  CDK_ROW_TEMPLATE,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef,\n} from '@angular/cdk/table';\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef'],\n})\nexport class MatHeaderRowDef extends CdkHeaderRowDef { }\n\n/**\n * Data row definition for the mat-table.\n * Captures the header row's template and other row properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends CdkRowDef<T> {\n}\n\n/** Header template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row, tr[mat-header-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n})\nexport class MatHeaderRow extends CdkHeaderRow { }\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row, tr[mat-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n})\nexport class MatRow extends CdkRow { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {MatCell, MatCellDef, MatColumnDef, MatHeaderCell, MatHeaderCellDef} from './cell';\nimport {MatHeaderRow, MatHeaderRowDef, MatRow, MatRowDef} from './row';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\nconst EXPORTED_DECLARATIONS = [\n  // Table\n  MatTable,\n\n  // Template defs\n  MatCellDef,\n  MatHeaderCellDef,\n  MatColumnDef,\n  MatHeaderRowDef,\n  MatRowDef,\n\n  // Cell directives\n  MatHeaderCell,\n  MatCell,\n\n  // Row directions\n  MatHeaderRow,\n  MatRow,\n];\n\n@NgModule({\n  imports: [CdkTableModule, CommonModule, MatCommonModule],\n  exports: EXPORTED_DECLARATIONS,\n  declarations: EXPORTED_DECLARATIONS,\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {_isNumberValue} from '@angular/cdk/coercion';\nimport {DataSource} from '@angular/cdk/table';\nimport {MatPaginator, PageEvent} from '@angular/material/paginator';\nimport {MatSort, Sort} from '@angular/material/sort';\nimport {BehaviorSubject, combineLatest, empty, Observable, Subscription} from 'rxjs';\nimport {map, startWith} from 'rxjs/operators';\n\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport class MatTableDataSource<T> extends DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private readonly _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private readonly _filter = new BehaviorSubject<string>('');\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription: Subscription;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() { return this._data.value; }\n  set data(data: T[]) { this._data.next(data); }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter(): string { return this._filter.value; }\n  set filter(filter: string) { this._filter.next(filter); }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort(): MatSort | null { return this._sort; }\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): MatPaginator | null { return this._paginator; }\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting through\n   * the default sortData function.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value: any = data[sortHeaderId];\n    return _isNumberValue(value) ? Number(value) : value;\n  }\n\n  /**\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n   * By default, the function retrieves the active sort and its direction and compares data\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n   * of data ordering.\n   * @param data The array of data that should be sorted.\n   * @param sort The connected MatSort that holds the current sort state.\n   */\n  sortData: ((data: T[], sort: MatSort) => T[]) = (data: T[], sort: MatSort): T[] => {\n    const active = sort.active;\n    const direction = sort.direction;\n    if (!active || direction == '') { return data; }\n\n    return data.sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n      // one value exists while the other doesn't. In this case, existing value should come first.\n      // This avoids inconsistent results when comparing values to undefined/null.\n      // If neither value exists, return 0 (equal).\n      let comparatorResult = 0;\n      if (valueA != null && valueB != null) {\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      } else if (valueA != null) {\n        comparatorResult = 1;\n      } else if (valueB != null) {\n        comparatorResult = -1;\n      }\n\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const accumulator = (currentTerm, key) => currentTerm + data[key];\n    const dataStr = Object.keys(data).reduce(accumulator, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // Otherwise, use an empty observable stream to take their place.\n    const sortChange: Observable<Sort> = this._sort ? this._sort.sortChange : empty();\n    const pageChange: Observable<PageEvent> = this._paginator ? this._paginator.page : empty();\n\n    if (this._renderChangesSubscription) {\n      this._renderChangesSubscription.unsubscribe();\n    }\n\n    const dataStream = this._data;\n    // Watch for base data or filter changes to provide a filtered set of data.\n    const filteredData = combineLatest(dataStream, this._filter)\n      .pipe(map(([data]) => this._filterData(data)));\n    // Watch for filtered data or sort changes to provide an ordered set of data.\n    const orderedData = combineLatest(filteredData, sortChange.pipe(startWith(null!)))\n      .pipe(map(([data]) => this._orderData(data)));\n    // Watch for ordered data or page changes to provide a paged set of data.\n    const paginatedData = combineLatest(orderedData, pageChange.pipe(startWith(null!)))\n      .pipe(map(([data]) => this._pageData(data)));\n    // Watched for paged data changes and send the result to the table to render.\n    paginatedData.subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overridden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) { return data; }\n\n    return this.sortData(data.slice(), this.sort);\n  }\n\n  /**\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice().splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      if (!this.paginator) { return; }\n\n      this.paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (this.paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(this.paginator.length / this.paginator.pageSize) - 1 || 0;\n        this.paginator.pageIndex = Math.min(this.paginator.pageIndex, lastPageIndex);\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Inject, InjectionToken, NgZone} from '@angular/core';\n\n\n/**\n * Interface for a a MatInkBar positioner method, defining the positioning and width of the ink\n * bar in a set of tabs.\n */\n// tslint:disable-next-line class-name Using leading underscore to denote internal interface.\nexport interface _MatInkBarPositioner {\n  (element: HTMLElement): { left: string, width: string };\n}\n\n/** Injection token for the MatInkBar's Positioner. */\nexport const _MAT_INK_BAR_POSITIONER =\n  new InjectionToken<_MatInkBarPositioner>('MatInkBarPositioner', {\n    providedIn: 'root',\n    factory: () => _matInkBarPositioner\n  });\n\n/**\n * The default positioner function for the MatInkBar.\n */\nexport const _matInkBarPositioner: _MatInkBarPositioner = (element: HTMLElement) => {\n  return {\n    left: element ? (element.offsetLeft || 0) + 'px' : '0',\n    width: element ? (element.offsetWidth || 0) + 'px' : '0',\n  };\n};\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone,\n    @Inject(_MAT_INK_BAR_POSITIONER) private _inkBarPositioner: _MatInkBarPositioner) { }\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n  private _setStyles(element: HTMLElement) {\n    const positions = this._inkBarPositioner(element);\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\n\n    inkBar.style.left = positions.left;\n    inkBar.style.width = positions.width;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef, ViewContainerRef} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n})\nexport class MatTabLabel extends CdkPortal {\n  constructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\n    super(templateRef, viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/** Decorates the `ng-template` tags and reads out the template from it. */\n@Directive({selector: '[matTabContent]'})\nexport class MatTabContent {\n  constructor(public template: TemplateRef<any>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabContent} from './tab-content';\n\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nexport class MatTabBase {}\nexport const _MatTabMixinBase = mixinDisabled(MatTabBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matTab',\n})\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n  @ContentChild(MatTabLabel) templateLabel: MatTabLabel;\n\n  /**\n   * Template provided in the tab content that will be used if present, used to enable lazy-loading\n   */\n  @ContentChild(MatTabContent, {read: TemplateRef}) _explicitContent: TemplateRef<any>;\n\n  /** Template inside the MatTab view that contains an `<ng-content>`. */\n  @ViewChild(TemplateRef) _implicitContent: TemplateRef<any>;\n\n  /** The plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** The portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the label changes. */\n  readonly _labelChange = new Subject<void>();\n\n  /** Emits whenever the disable changes */\n  readonly _disableChange = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel')) {\n      this._labelChange.next();\n    }\n\n    if (changes.hasOwnProperty('disabled')) {\n      this._disableChange.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._disableChange.complete();\n    this._labelChange.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(\n        this._explicitContent || this._implicitContent, this._viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material tabs. */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n    state('left', style({transform: 'translate3d(-100%, 0, 0)'})),\n    state('right', style({transform: 'translate3d(100%, 0, 0)'})),\n    transition('* => left, * => right, left => center, right => center',\n        animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ])\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n  ViewChild,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet, PortalHostDirective} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {Subscription} from 'rxjs';\nimport {matTabsAnimations} from './tabs-animations';\nimport {startWith} from 'rxjs/operators';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]'\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** Subscription to events for when the tab body begins centering. */\n  private _centeringSub = Subscription.EMPTY;\n  /** Subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub = Subscription.EMPTY;\n\n  constructor(\n    componentFactoryResolver: ComponentFactoryResolver,\n    viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\n      super(componentFactoryResolver, viewContainerRef);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    this._centeringSub = this._host._beforeCentering\n      .pipe(startWith(this._host._isCenterPosition(this._host._position)))\n      .subscribe((isCentering: boolean) => {\n        if (isCentering && !this.hasAttached()) {\n          this.attach(this._host._content);\n        }\n      });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  /** Clean up centering subscription. */\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this._centeringSub.unsubscribe();\n    this._leavingSub.unsubscribe();\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  },\n})\nexport class MatTabBody implements OnInit {\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() readonly _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() readonly _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n   /** The portal host inside of this container into which the tab body content will be loaded. */\n  @ViewChild(PortalHostDirective) _portalHost: PortalHostDirective;\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal;\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  @Input()\n  set position(position: number) {\n    if (position < 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'left' : 'right';\n    } else if (position > 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n  _position: MatTabBodyPositionState;\n\n  /** The origin position from which this tab should appear when it is centered into view. */\n  @Input()\n  set origin(origin: number) {\n    if (origin == null) { return; }\n\n    const dir = this._getLayoutDirection();\n    if ((dir == 'ltr' && origin <= 0) || (dir == 'rtl' && origin > 0)) {\n      this._origin = 'left';\n    } else {\n      this._origin = 'right';\n    }\n  }\n  _origin: MatTabBodyOriginState;\n\n  constructor(private _elementRef: ElementRef,\n              @Optional() private _dir: Directionality) { }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this._origin) {\n      this._position = this._origin == 'left' ? 'left-origin-center' : 'right-origin-center';\n    }\n  }\n\n  _onTranslateTabStarted(e: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(e.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  _onTranslateTabComplete(e: AnimationEvent): void {\n    // If the transition to the center is complete, emit an event.\n    if (this._isCenterPosition(e.toState) && this._isCenterPosition(this._position)) {\n      this._onCentered.emit();\n    }\n\n    if (this._isCenterPosition(e.fromState) && !this._isCenterPosition(this._position)) {\n      this._afterLeavingCenter.emit();\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nexport class MatTabLabelWrapperBase {}\nexport const _MatTabLabelWrapperMixinBase = mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled'\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {END, ENTER, HOME, LEFT_ARROW, RIGHT_ARROW, SPACE} from '@angular/cdk/keycodes';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, mixinDisableRipple} from '@angular/material/core';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\n\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n// Boilerplate for applying mixins to MatTabHeader.\n/** @docs-private */\nexport class MatTabHeaderBase {}\nexport const _MatTabHeaderMixinBase = mixinDisableRipple(MatTabHeaderBase);\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends _MatTabHeaderMixinBase\n    implements AfterContentChecked, AfterContentInit, OnDestroy, CanDisableRipple {\n\n  @ContentChildren(MatTabLabelWrapper) _labelWrappers: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer') _tabListContainer: ElementRef;\n  @ViewChild('tabList') _tabList: ElementRef;\n\n  /** The tab index that is focused. */\n  private _focusIndex: number = 0;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Combines listeners that will re-align the ink bar whenever they're invoked. */\n  private _realignInkBar = Subscription.EMPTY;\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  private _selectedIndex: number = 0;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number { return this._selectedIndex; }\n  set selectedIndex(value: number) {\n    value = coerceNumberProperty(value);\n    this._selectedIndexChanged = this._selectedIndex != value;\n    this._selectedIndex = value;\n    this._focusIndex = value;\n  }\n\n  /** Event emitted when the option is selected. */\n  @Output() readonly selectFocusedIndex = new EventEmitter();\n\n  /** Event emitted when a label is focused. */\n  @Output() readonly indexFocused = new EventEmitter();\n\n  constructor(private _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() private _dir: Directionality) {\n    super();\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this._updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case RIGHT_ARROW:\n        this._focusNextTab();\n        break;\n      case LEFT_ARROW:\n        this._focusPreviousTab();\n        break;\n      case HOME:\n        this._focusFirstTab();\n        event.preventDefault();\n        break;\n      case END:\n        this._focusLastTab();\n        event.preventDefault();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        event.preventDefault();\n        break;\n    }\n  }\n\n  /**\n   * Aligns the ink bar to the selected tab on load.\n   */\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this._updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n    this._realignInkBar = merge(dirChange, resize).subscribe(realign);\n  }\n\n  ngOnDestroy() {\n    this._realignInkBar.unsubscribe();\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    this._updatePagination();\n    this._alignInkBarToSelectedTab();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Updating the view whether pagination should be enabled or not\n   */\n  _updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this._focusIndex == value) { return; }\n\n    this._focusIndex = value;\n    this.indexFocused.emit(value);\n    this._setTabFocus(value);\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number { return this._focusIndex; }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /**\n   * Moves the focus towards the beginning or the end of the list depending on the offset provided.\n   * Valid offsets are 1 and -1.\n   */\n  _moveFocus(offset: number) {\n    if (this._labelWrappers) {\n      const tabs: MatTabLabelWrapper[] = this._labelWrappers.toArray();\n\n      for (let i = this.focusIndex + offset; i < tabs.length && i >= 0; i += offset) {\n        if (this._isValidIndex(i)) {\n          this.focusIndex = i;\n          return;\n        }\n      }\n    }\n  }\n\n  /** Increment the focus index by 1 until a valid tab is found. */\n  _focusNextTab(): void {\n    this._moveFocus(this._getLayoutDirection() == 'ltr' ? 1 : -1);\n  }\n\n  /** Decrement the focus index by 1 until a valid tab is found. */\n  _focusPreviousTab(): void {\n    this._moveFocus(this._getLayoutDirection() == 'ltr' ? -1 : 1);\n  }\n\n  /** Focuses the first tab. */\n  private _focusFirstTab(): void {\n    for (let i = 0; i < this._labelWrappers.length; i++) {\n      if (this._isValidIndex(i)) {\n        this.focusIndex = i;\n        break;\n      }\n    }\n  }\n\n  /** Focuses the last tab. */\n  private _focusLastTab(): void {\n    for (let i = this._labelWrappers.length - 1; i > -1; i--) {\n      if (this._isValidIndex(i)) {\n        this.focusIndex = i;\n        break;\n      }\n    }\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    const scrollDistance = this.scrollDistance;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    this._tabList.nativeElement.style.transform = `translate3d(${translateX}px, 0, 0)`;\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  get scrollDistance(): number { return this._scrollDistance; }\n  set scrollDistance(v: number) {\n    this._scrollDistance = Math.max(0, Math.min(this._getMaxScrollDistance(), v));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n  }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(scrollDir: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    this.scrollDistance += (scrollDir == 'before' ? -1 : 1) * viewLength / 3;\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    const selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    const isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  _alignInkBarToSelectedTab(): void {\n    const selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\n        null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable, Subject} from 'rxjs';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n  /** Whether the snack bar was dismissed using the action button. */\n  dismissedByAction: boolean;\n}\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has been dismissed. */\n  private readonly _afterDismissed = new Subject<MatSnackBarDismiss>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private readonly _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  /** Whether the snack bar was dismissed using the action button. */\n  private _dismissedByAction = false;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  dismissWithAction(): void {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * @deletion-target 7.0.0\n   */\n  closeWithAction(): void {\n    this.dismissWithAction();\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<MatSnackBarDismiss> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /** Message to be announced by the MatAriaLiveAnnouncer */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material snack bar. */\nexport const matSnackBarAnimations: {\n  readonly contentFade: AnimationTriggerMetadata;\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  contentFade: trigger('contentFade', [\n    transition(':enter', [\n      style({opacity: '0'}),\n      animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.STANDARD_CURVE}`)\n    ])\n  ]),\n\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('visible-top, visible-bottom', style({transform: 'translateY(0%)'})),\n    transition('visible-top => hidden-top, visible-bottom => hidden-bottom',\n      animate(`${AnimationDurations.EXITING} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible-top, void => visible-bottom',\n      animate(`${AnimationDurations.ENTERING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\nimport {matSnackBarAnimations} from './snack-bar-animations';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matSnackBarAnimations.contentFade],\n  host: {\n    '[@contentFade]': '',\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: { message: string, action: string };\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.dismissWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  CdkPortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  NgZone,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\nimport {matSnackBarAnimations} from './snack-bar-animations';\nimport {MatSnackBarConfig} from './snack-bar-config';\n\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    'role': 'alert',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  readonly _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  readonly _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  /** The snack bar configuration. */\n  snackBarConfig: MatSnackBarConfig;\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState.startsWith('hidden')) {\n      this._completeExit();\n    }\n\n    if (toState.startsWith('visible')) {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = `visible-${this.snackBarConfig.verticalPosition}`;\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    this._animationState = `hidden-${this.snackBarConfig.verticalPosition}`;\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n  private _applySnackBarClasses() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClasses = this.snackBarConfig.panelClass;\n\n    if (panelClasses) {\n      if (Array.isArray(panelClasses)) {\n        // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n        panelClasses.forEach(cssClass => element.classList.add(cssClass));\n      } else {\n        element.classList.add(panelClasses);\n      }\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n  }\n\n  /** Asserts that no content is already attached to the container. */\n  private _assertNotAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  EmbeddedViewRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/** Injection token that can be used to specify default snack bar. */\nexport const MAT_SNACK_BAR_DEFAULT_OPTIONS =\n    new InjectionToken<MatSnackBarConfig>('mat-snack-bar-default-options', {\n      providedIn: 'root',\n      factory: () => new MatSnackBarConfig(),\n    });\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable()\nexport class MatSnackBar {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar,\n      @Inject(MAT_SNACK_BAR_DEFAULT_OPTIONS) private _defaultConfig: MatSnackBarConfig) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig):\n    MatSnackBarRef<T> {\n    return this._attach(component, config) as MatSnackBarRef<T>;\n  }\n\n  /**\n   * Creates and dispatches a snack bar with a custom template for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param template Template to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromTemplate(template: TemplateRef<any>, config?: MatSnackBarConfig):\n    MatSnackBarRef<EmbeddedViewRef<any>> {\n    return this._attach(template, config);\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = {...this._defaultConfig, ...config};\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n    _config.announcementMessage = message;\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n    const containerPortal = new ComponentPortal(MatSnackBarContainer, config.viewContainerRef);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component or a template as the content of the snack bar container.\n   */\n  private _attach<T>(content: ComponentType<T> | TemplateRef<T>, userConfig?: MatSnackBarConfig):\n    MatSnackBarRef<T | EmbeddedViewRef<any>> {\n\n    const config = {...this._defaultConfig, ...userConfig};\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T | EmbeddedViewRef<any>>(container, overlayRef);\n\n    if (content instanceof TemplateRef) {\n      const portal = new TemplatePortal(content, null!, {\n        $implicit: config.data,\n        snackBarRef\n      } as any);\n\n      snackBarRef.instance = container.attachTemplatePortal(portal);\n    } else {\n      const injector = this._createInjector(config, snackBarRef);\n      const portal = new ComponentPortal(content, undefined, injector);\n      const contentRef = container.attachComponentPortal<T>(portal);\n\n      // We can't pass this via the injector, because the injector is created earlier.\n      snackBarRef.instance = contentRef.instance;\n    }\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\n      takeUntil(overlayRef.detachments().pipe(take(1)))\n    ).subscribe(state => {\n      if (state.matches) {\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n      } else {\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n      }\n    });\n\n    this._animateSnackBar(snackBarRef, config);\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /** Animates the old snack bar out and the new one in. */\n  private _animateSnackBar(snackBarRef: MatSnackBarRef<any>, config: MatSnackBarConfig) {\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (config.duration && config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration!));\n    }\n\n    if (config.announcementMessage) {\n      this._live.announce(config.announcementMessage, config.politeness);\n    }\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap();\n\n    injectionTokens.set(MatSnackBarRef, snackBarRef);\n    injectionTokens.set(MAT_SNACK_BAR_DATA, config.data);\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MatSnackBar} from './snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatButtonModule,\n    MatCommonModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n  providers: [MatSnackBar]\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  Output,\n  OnChanges,\n  OnDestroy,\n} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortInvalidDirectionError,\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError\n} from './sort-errors';\nimport {Subject} from 'rxjs';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nexport class MatSortBase {}\nexport const _MatSortMixinBase = mixinDisabled(MatSortBase);\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase implements CanDisable, OnChanges, OnDestroy {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  get direction(): SortDirection { return this._direction; }\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable): void {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable): void {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable): void {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.emit({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata, query, animateChild,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/** Animations used by MatSort. */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly arrowOpacity: AnimationTriggerMetadata;\n  readonly arrowPosition: AnimationTriggerMetadata;\n  readonly allowChildren: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('active-asc, asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('active-desc, desc', style({transform: 'translateY(10px)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('active-asc, asc', style({transform: 'rotate(-45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('active-asc, asc', style({transform: 'rotate(45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(-45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that controls the arrow opacity. */\n  arrowOpacity: trigger('arrowOpacity', [\n    state('desc-to-active, asc-to-active, active', style({opacity: 1})),\n    state('desc-to-hint, asc-to-hint, hint', style({opacity: .54})),\n    state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc',\n        style({opacity: 0})),\n    // Transition between all states except for immediate transitions\n    transition('* => asc, * => desc, * => active, * => hint', animate('0ms')),\n    transition('* <=> *', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /**\n   * Animation for the translation of the arrow as a whole. States are separated into two\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n   * peek, and active. The other states define a specific animation (source-to-destination)\n   * and are determined as a function of their prev user-perceived state and what the next state\n   * should be.\n   */\n  arrowPosition: trigger('arrowPosition', [\n    // Hidden Above => Hint Center\n    transition('* => desc-to-hint, * => desc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(-25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Below\n    transition('* => hint-to-desc, * => active-to-desc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(25%)'})\n        ]))),\n    // Hidden Below => Hint Center\n    transition('* => asc-to-hint, * => asc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Above\n    transition('* => hint-to-asc, * => active-to-asc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(-25%)'})\n        ]))),\n    state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active',\n        style({transform: 'translateY(0)'})),\n    state('hint-to-desc, active-to-desc, desc',\n        style({transform: 'translateY(-25%)'})),\n    state('hint-to-asc, active-to-asc, asc',\n        style({transform: 'translateY(25%)'})),\n  ]),\n\n  /** Necessary trigger that calls animate on children animations. */\n  allowChildren: trigger('allowChildren', [\n    transition('* <=> *', [\n      query('@*', animateChild(), {optional: true})\n    ])\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable({providedIn: 'root'})\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkColumnDef} from '@angular/cdk/table';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatSort, MatSortable} from './sort';\nimport {matSortAnimations} from './sort-animations';\nimport {SortDirection} from './sort-direction';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {MatSortHeaderIntl} from './sort-header-intl';\n\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nexport class MatSortHeaderBase {}\nexport const _MatSortHeaderMixinBase = mixinDisabled(MatSortHeaderBase);\n\n/**\n * Valid positions for the arrow to be in for its opacity and translation. If the state is a\n * sort direction, the position of the arrow will be above/below and opacity 0. If the state is\n * hint, the arrow will be in the center with a slight opacity. Active state means the arrow will\n * be fully opaque in the center.\n *\n * @docs-private\n */\nexport type ArrowViewState = SortDirection | 'hint' | 'active';\n\n/**\n * States describing the arrow's animated position (animating fromState to toState).\n * If the fromState is not defined, there will be no animated transition to the toState.\n * @docs-private\n */\nexport interface ArrowViewStateTransition {\n  fromState?: ArrowViewState;\n  toState: ArrowViewState;\n}\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_handleClick()',\n    '(mouseenter)': '_setIndicatorHintVisible(true)',\n    '(longpress)': '_setIndicatorHintVisible(true)',\n    '(mouseleave)': '_setIndicatorHintVisible(false)',\n    '[attr.aria-sort]': '_getAriaSortAttribute()',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.arrowOpacity,\n    matSortAnimations.arrowPosition,\n    matSortAnimations.allowChildren,\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase implements MatSortable, CanDisable {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n   * provide an affordance that the header is sortable by showing on focus and hover.\n   */\n  _showIndicatorHint: boolean = false;\n\n  /**\n   * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n   * position through the animation. If animations are currently disabled, the fromState is removed\n   * so that there is no animation displayed.\n   */\n  _viewState: ArrowViewStateTransition;\n\n  /** The direction the arrow should be facing according to the current state. */\n  _arrowDirection: SortDirection = '';\n\n  /**\n   * Whether the view state animation should show the transition between the `from` and `to` states.\n   */\n  _disableViewStateAnimation = false;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input() start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Optional() public _cdkColumnDef: CdkColumnDef) {\n\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n        .subscribe(() => {\n          if (this._isSorted()) {\n            this._updateArrowDirection();\n          }\n\n          // If this header was recently active and now no longer sorted, animate away the arrow.\n          if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = false;\n            this._setAnimationTransitionState({fromState: 'active', toState: this._arrowDirection});\n          }\n\n          changeDetectorRef.markForCheck();\n        });\n  }\n\n  ngOnInit() {\n    if (!this.id && this._cdkColumnDef) {\n      this.id = this._cdkColumnDef.name;\n    }\n\n    // Initialize the direction of the arrow and set the view state to be immediately that state.\n    this._updateArrowDirection();\n    this._setAnimationTransitionState(\n        {toState: this._isSorted() ? 'active' : this._arrowDirection});\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /**\n   * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n   * user showing what the active sort will become. If set to false, the arrow will fade away.\n   */\n  _setIndicatorHintVisible(visible: boolean) {\n    // No-op if the sort header is disabled - should not make the hint visible.\n    if (this._isDisabled() && visible) { return; }\n\n    this._showIndicatorHint = visible;\n\n    if (!this._isSorted()) {\n      this._updateArrowDirection();\n      if (this._showIndicatorHint) {\n        this._setAnimationTransitionState({fromState: this._arrowDirection, toState: 'hint'});\n      } else {\n        this._setAnimationTransitionState({fromState: 'hint', toState: this._arrowDirection});\n      }\n    }\n  }\n\n  /**\n   * Sets the animation transition view state for the arrow's position and opacity. If the\n   * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n   * no animation appears.\n   */\n  _setAnimationTransitionState(viewState: ArrowViewStateTransition) {\n    this._viewState = viewState;\n\n    // If the animation for arrow position state (opacity/translation) should be disabled,\n    // remove the fromState so that it jumps right to the toState.\n    if (this._disableViewStateAnimation) {\n      this._viewState = {toState: viewState.toState};\n    }\n  }\n\n  /** Triggers the sort on this sort header and removes the indicator hint. */\n  _handleClick() {\n    if (this._isDisabled()) { return; }\n\n    this._sort.sort(this);\n\n    // Do not show the animation if the header was already shown in the right position.\n    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n      this._disableViewStateAnimation = true;\n    }\n\n    // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n    // the direction it is facing.\n    const viewState: ArrowViewStateTransition = this._isSorted() ?\n        {fromState: this._arrowDirection, toState: 'active'} :\n        {fromState: 'active', toState: this._arrowDirection};\n    this._setAnimationTransitionState(viewState);\n\n    this._showIndicatorHint = false;\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  /** Returns the animation state for the arrow direction (indicator and pointers). */\n  _getArrowDirectionState() {\n    return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n  }\n\n  /** Returns the arrow position state (opacity, translation). */\n  _getArrowViewState() {\n    const fromState = this._viewState.fromState;\n    return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n  }\n\n  /**\n   * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n   * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n   * active sorted direction. The reason this is updated through a function is because the direction\n   * should only be changed at specific times - when deactivated but the hint is displayed and when\n   * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n   * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n   * preserving its direction, even though the next sort direction is actually different and should\n   * only be changed once the arrow displays again (hint or activation).\n   */\n  _updateArrowDirection() {\n    this._arrowDirection = this._isSorted() ?\n        this._sort.direction :\n        (this.start || this._sort.start);\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n\n  /**\n   * Gets the aria-sort attribute that should be applied to this sort header. If this header\n   * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n   * says that the aria-sort property should only be present on one header at a time, so removing\n   * ensures this is true.\n   */\n  _getAriaSortAttribute() {\n    if (!this._isSorted()) { return null; }\n\n    return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n\n@Directive({\n  selector: '[matStepLabel]',\n})\nexport class MatStepLabel extends CdkStepLabel {\n  constructor(template: TemplateRef<any>) {\n    super(template);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Stepper data that is required for internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** Label that is rendered below optional steps. */\n  optionalLabel: string = 'Optional';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  TemplateRef,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperIntl} from './stepper-intl';\nimport {MatStepperIconContext} from './stepper-icon';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStepHeader implements OnDestroy {\n  private _intlSubscription: Subscription;\n\n  /** State of the given step. */\n  @Input() state: string;\n\n  /** Label of the given step. */\n  @Input() label: MatStepLabel | string;\n\n  /** Overrides for the header icons, passed in via the stepper. */\n  @Input() iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>};\n\n  /** Index of the given step. */\n  @Input() index: number;\n\n  /** Whether the given step is selected. */\n  @Input() selected: boolean;\n\n  /** Whether the given step label is active. */\n  @Input() active: boolean;\n\n  /** Whether the given step is optional. */\n  @Input() optional: boolean;\n\n  constructor(\n    public _intl: MatStepperIntl,\n    private _focusMonitor: FocusMonitor,\n    private _element: ElementRef,\n    changeDetectorRef: ChangeDetectorRef) {\n    _focusMonitor.monitor(_element.nativeElement, true);\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n\n  /** Returns string label of given step if it is a text label. */\n  _stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n\n  /** Returns MatStepLabel if the label of given step is a template label. */\n  _templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n\n  /** Returns the host HTML element. */\n  _getHostElement() {\n    return this._element.nativeElement;\n  }\n\n  /** Template context variables that are exposed to the `matStepperIcon` instances. */\n  _getIconContext(): MatStepperIconContext {\n    return {\n      index: this.index,\n      active: this.active,\n      optional: this.optional\n    };\n  }\n\n  focus() {\n    this._getHostElement().focus();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material steppers. */\nexport const matStepperAnimations: {\n  readonly horizontalStepTransition: AnimationTriggerMetadata;\n  readonly verticalStepTransition: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions the step along the X axis in a horizontal stepper. */\n  horizontalStepTransition: trigger('stepTransition', [\n    state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n    state('current', style({transform: 'none', visibility: 'visible'})),\n    state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n    transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n  ]),\n\n  /** Animation that transitions the step along the Y axis in a vertical stepper. */\n  verticalStepTransition: trigger('stepTransition', [\n    state('previous', style({height: '0px', visibility: 'hidden'})),\n    state('next', style({height: '0px', visibility: 'hidden'})),\n    state('current', style({height: '*', visibility: 'visible'})),\n    transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, TemplateRef} from '@angular/core';\n\n/** Template context available to an attached `matStepperIcon`. */\nexport interface MatStepperIconContext {\n  /** Index of the step. */\n  index: number;\n  /** Whether the step is currently active. */\n  active: boolean;\n  /** Whether the step is optional. */\n  optional: boolean;\n}\n\n/**\n * Template to be used to override the icons inside the step header.\n */\n@Directive({\n  selector: 'ng-template[matStepperIcon]',\n})\nexport class MatStepperIcon {\n  /** Name of the icon to be overridden. */\n  @Input('matStepperIcon') name: 'edit' | 'done' | 'number';\n\n  constructor(public templateRef: TemplateRef<MatStepperIconContext>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  forwardRef,\n  Inject,\n  Input,\n  ViewEncapsulation,\n  QueryList,\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_margins.left',\n    '[style.margin-right.px]': '_margins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer) {\n    super(changeDetectorRef, container);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers: QueryList<MatSidenav>;\n  @ContentChild(MatSidenavContent) _content: MatSidenavContent;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {ScrollDispatchModule} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    ScrollDispatchModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HammerInput,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nexport class MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSlideToggleMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n    ControlValueAccessor, CanDisable, CanColor, HasTabIndex, CanDisableRipple {\n\n  private onChange = (_: any) => {};\n  private onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _slideRenderer: SlideToggleRenderer;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Reference to the focus state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the slide-toggle element is checked or not */\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\n      new EventEmitter<MatSlideToggleChange>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** Reference to the ripple directive on the thumb container. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string,\n              private _ngZone: NgZone) {\n\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._slideRenderer = new SlideToggleRenderer(this._elementRef, this._platform);\n\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back.\n    if (this._slideRenderer.dragging) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      // For keyboard focus show a persistent ripple as focus indicator.\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      this.onTouched();\n\n      // Fade out and clear the focus ripple if one is currently present.\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this.onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  _onDragStart() {\n    if (!this.disabled) {\n      this._slideRenderer.startThumbDrag(this.checked);\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._slideRenderer.dragging) {\n      this._slideRenderer.updateThumbPosition(event.deltaX);\n    }\n  }\n\n  _onDragEnd() {\n    if (this._slideRenderer.dragging) {\n      const newCheckedValue = this._slideRenderer.dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.checked = newCheckedValue;\n        this._emitChangeEvent();\n      }\n\n      // The drag should be stopped outside of the current event handler, otherwise the\n      // click event will be fired before it and will revert the drag change.\n      this._ngZone.runOutsideAngular(() => {\n        setTimeout(() => this._slideRenderer.stopThumbDrag());\n      });\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the slide-toggle changes.\n    // Since the slide-toggle uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n\n/**\n * Renderer for the Slide Toggle component, which separates DOM modification in its own class\n */\nclass SlideToggleRenderer {\n\n  /** Reference to the thumb HTMLElement. */\n  private _thumbEl: HTMLElement;\n\n  /** Reference to the thumb bar HTMLElement. */\n  private _thumbBarEl: HTMLElement;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  dragPercentage: number;\n\n  /** Whether the thumb is currently being dragged. */\n  dragging: boolean = false;\n\n  constructor(elementRef: ElementRef, platform: Platform) {\n    // We only need to interact with these elements when we're on the browser, so only grab\n    // the reference in that case.\n    if (platform.isBrowser) {\n      this._thumbEl = elementRef.nativeElement.querySelector('.mat-slide-toggle-thumb-container');\n      this._thumbBarEl = elementRef.nativeElement.querySelector('.mat-slide-toggle-bar');\n    }\n  }\n\n  /** Initializes the drag of the slide-toggle. */\n  startThumbDrag(checked: boolean): void {\n    if (this.dragging) { return; }\n\n    this._thumbBarWidth = this._thumbBarEl.clientWidth - this._thumbEl.clientWidth;\n    this._thumbEl.classList.add('mat-dragging');\n\n    this._previousChecked = checked;\n    this.dragging = true;\n  }\n\n  /** Resets the current drag and returns the new checked value. */\n  stopThumbDrag(): boolean {\n    if (!this.dragging) { return false; }\n\n    this.dragging = false;\n    this._thumbEl.classList.remove('mat-dragging');\n\n    // Reset the transform because the component will take care of the thumb position after drag.\n    this._thumbEl.style.transform = '';\n\n    return this.dragPercentage > 50;\n  }\n\n  /** Updates the thumb containers position from the specified distance. */\n  updateThumbPosition(distance: number): void {\n    this.dragPercentage = this._getDragPercentage(distance);\n    // Calculate the moved distance based on the thumb bar width.\n    const dragX = (this.dragPercentage / 100) * this._thumbBarWidth;\n    this._thumbEl.style.transform = `translate3d(${dragX}px, 0, 0)`;\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlideToggle} from './slide-toggle';\n\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatSlideToggle, MatCommonModule],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  HammerInput,\n  HasTabIndex,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {Subscription} from 'rxjs';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nexport class MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSliderMixinBase =\n  mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(click)': '_onClick($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert(): boolean { return this._invert; }\n  set invert(value: boolean) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundLabelTo = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value: boolean) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /** Value of the slider. */\n  @Input()\n  get value(): number | null {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      this._value = coerceNumberProperty(v);\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /**\n   * Function that will be used to format the value before it is displayed\n   * in the thumb label. Can be used to format very large number in order\n   * for them to fit into the slider thumb.\n   */\n  @Input() displayWith: (value: number | null) => string | number;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() readonly change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() readonly input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    if (this.displayWith) {\n      return this.displayWith(this.value);\n    }\n\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundLabelTo && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundLabelTo);\n    }\n\n    return this.value || 0;\n  }\n\n  /** set focus to the host element */\n  focus() {\n    this._focusHostElement();\n  }\n\n  /** blur the host element */\n  blur() {\n    this._blurHostElement();\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    let sign = this._invertMouseCoords ? '-' : '';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${1 - this.percent})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    let sign = this._invertMouseCoords ? '' : '-';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${this.percent})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._direction == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._direction == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._direction == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundLabelTo: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper') private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  private get _invertMouseCoords() {\n    return (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private get _direction() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef.nativeElement, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onClick(event: MouseEvent) {\n    if (this.disabled) {\n      return;\n    }\n\n    let oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    // Emit a change and input event if the value changed.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value && !this.disabled) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled) { return; }\n\n    let oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._direction == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._direction == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n\n    if (this._invertMouseCoords) {\n      percent = 1 - percent;\n    }\n\n    // Since the steps may not divide cleanly into the max value, if the user\n    // slid to 0 or 100 percent, we jump to the min/max value. This approach\n    // is slightly more intuitive than using `Math.ceil` below, because it\n    // follows the user's pointer closer.\n    if (percent === 0) {\n      this.value = this.min;\n    } else if (percent === 1) {\n      this.value = this.max;\n    } else {\n      let exactValue = this._calculateValue(percent);\n\n      // This calculation finds the closest step by finding the closest\n      // whole number divisible by the step relative to the min.\n      let closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n\n      // The value needs to snap to the min and max.\n      this.value = this._clamp(closestValue, this.min, this.max);\n    }\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Blurs the native element. */\n  private _blurHostElement() {\n    this._elementRef.nativeElement.blur();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to eb triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  Input,\n  ElementRef,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nexport class MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatProgressSpinnerMixinBase = mixinColor(MatProgressSpinnerBase, 'primary');\n\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/material2/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * `<mat-progress-spinner>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor {\n\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /** Tracks diameters of existing instances to de-dupe generated styles (default d = 100) */\n  private static diameters = new Set<number>([BASE_SIZE]);\n\n  /**\n   * Used for storing all of the generated keyframe animations.\n   * @dynamic\n   */\n  private static styleTag: HTMLStyleElement|null = null;\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number { return this._diameter; }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    if (!this._fallbackAnimation && !MatProgressSpinner.diameters.has(this._diameter)) {\n      this._attachStyleNode();\n    }\n  }\n  private _diameter = BASE_SIZE;\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n\n    super(_elementRef);\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    _elementRef.nativeElement.classList.add(animationClass);\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this.diameter * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    let styleTag = MatProgressSpinner.styleTag;\n\n    if (!styleTag) {\n      styleTag = this._document.createElement('style');\n      this._document.head.appendChild(styleTag);\n      MatProgressSpinner.styleTag = styleTag;\n    }\n\n    if (styleTag && styleTag.sheet) {\n      (styleTag.sheet as CSSStyleSheet).insertRule(this._getAnimationText(), 0);\n    }\n\n    MatProgressSpinner.diameters.add(this.diameter);\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n}\n\n\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any) {\n    super(elementRef, platform, document);\n    this.mode = 'indeterminate';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  constructor(\n    /** The MatRadioButton that emits the change event. */\n    public source: MatRadioButton,\n    /** The value of the MatRadioButton. */\n    public value: any) {}\n}\n\n\n// Boilerplate for applying mixins to MatRadioGroup.\n/** @docs-private */\nexport class MatRadioGroupBase { }\nexport const _MatRadioGroupMixinBase = mixinDisabled(MatRadioGroupBase);\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n  inputs: ['disabled'],\n})\nexport class MatRadioGroup extends _MatRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n  /**\n   * Selected value for group. Should equal the value of the selected radio button if there *is*\n   * a corresponding radio button with a matching value. If there is *not* such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n  set labelPosition(v) {\n    this._labelPosition = v === 'before' ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /** Value of the radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value != newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /** Whether the radio button is selected. */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected != null && this._selected.value == this._value;\n\n    if (this._radios != null && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value == radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new MatRadioChange(this._selected!, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nexport class MatRadioButtonBase {\n  // Since the disabled property is manually defined for the MatRadioButton and isn't set up in\n  // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n  // defined to properly work.\n  disabled: boolean;\n\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nexport const _MatRadioButtonMixinBase =\n    mixinColor(mixinDisableRipple(mixinTabIndex(MatRadioButtonBase)), 'accent');\n\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['color', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, CanDisableRipple, HasTabIndex {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n\n    if (this._checked != newCheckedState) {\n      this._checked = newCheckedState;\n\n      if (newCheckedState && this.radioGroup && this.radioGroup.value != this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value == this.value) {\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value != value) {\n      this._value = value;\n      if (this.radioGroup != null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value == value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup != null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio. */\n  private _value: any = null;\n\n  /** The child ripple instance. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  /** Reference to the current focus ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Unregister function for _radioDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id != this.id && name == this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    this.change.emit(new MatRadioChange(this, this._value));\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value != this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      if (this.radioGroup) {\n        this.radioGroup._touch();\n      }\n\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material drawers. */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    state('open, open-instant', style({\n      transform: 'translate3d(0, 0, 0)',\n      visibility: 'visible',\n    })),\n    state('void', style({\n      visibility: 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusMonitor, FocusOrigin, FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {CdkScrollable} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {filter, take, startWith, takeUntil, map, debounceTime} from 'rxjs/operators';\nimport {merge, fromEvent, Observable, Subject} from 'rxjs';\nimport {matDrawerAnimations} from './drawer-animations';\n\n\n/** Throws an exception when two MatDrawer are matching the same position. */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/** Result of the toggle promise that indicates the state of the drawer. */\nexport type MatDrawerToggleResult = 'open' | 'close';\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n      providedIn: 'root',\n      factory: () => false,\n    });\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_margins.left',\n    '[style.margin-right.px]': '_margins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContent implements AfterContentInit {\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _margins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) private _container: MatDrawerContainer) {\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMargins.subscribe(margins => {\n      this._margins = margins;\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value: 'start' | 'end') {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value: 'over' | 'push' | 'side') {\n    this._mode = value;\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new EventEmitter<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() readonly openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer's position changes. */\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  readonly _modeChanged = new Subject();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              private _ngZone: NgZone,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n\n    /**\n     * Listen to `keydown` events outside the zone so that change detection is not run every\n     * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n     * and we don't have close disabled.\n     */\n    this._ngZone.runOutsideAngular(() => {\n        fromEvent(this._elementRef.nativeElement, 'keydown').pipe(\n            filter((event: KeyboardEvent) => event.keyCode === ESCAPE && !this.disableClose)\n        ).subscribe((event) => this._ngZone.run(() => {\n            this.close();\n            event.stopPropagation();\n        }));\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { this.toggle(coerceBooleanProperty(value)); }\n  private _opened: boolean = false;\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<MatDrawerToggleResult> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<MatDrawerToggleResult> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<MatDrawerToggleResult> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n\n    return new Promise<MatDrawerToggleResult>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n    });\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStarted.emit(event);\n  }\n\n  _onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n        (toState === 'void' && fromState.indexOf('open') === 0)) {\n      this.openedChange.emit(this._opened);\n    }\n  }\n\n  get _width(): number {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n}\n\n\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContainer implements AfterContentInit, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent) _content: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /**\n   * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n   * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n   * mode as well.\n   */\n  @Input()\n  get hasBackdrop() {\n    if (this._backdropOverride == null) {\n      return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n    }\n\n    return this._backdropOverride;\n  }\n  set hasBackdrop(value: any) {\n    this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n  }\n  _backdropOverride: boolean | null;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() readonly backdropClick: EventEmitter<void> = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private readonly _doCheckSubject = new Subject<void>();\n\n  readonly _contentMargins = new Subject<{left: number|null, right: number|null}>();\n\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n  @ViewChild(CdkScrollable) scrollable: CdkScrollable;\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this._updateContentMargins();\n      });\n    }\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this._updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this._updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      takeUntil(this._drawers.changes),\n      filter((event: AnimationEvent) => event.fromState !== event.toState)\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this._updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this._updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add('mat-drawer-opened');\n    } else {\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (!this._dir || this._dir.value == 'ltr') {\n      this._left = this._start;\n      this._right = this._end;\n    } else {\n      this._left = this._end;\n      this._right = this._start;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer))\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||\n           (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end));\n  }\n\n  private _canHaveBackdrop(drawer: MatDrawer): boolean {\n    return drawer.mode !== 'side' || !!this._backdropOverride;\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): drawer is MatDrawer {\n    return drawer != null && drawer.opened;\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  private _updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        let width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        let width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    // Pull back into the NgZone since in some cases we could be outside.\n    this._ngZone.run(() => this._contentMargins.next({left, right}));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelect, MatSelectTrigger} from './select';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by MatTooltip. */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('150ms cubic-bezier(0.0, 0.0, 0.2, 1)')),\n    transition('* => hidden', animate('150ms cubic-bezier(0.4, 0.0, 1, 1)')),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatTooltip, TooltipComponent} from './tooltip';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable({providedIn: 'root'})\nexport class MatPaginatorIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel: string = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel: string = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel: string = 'Previous page';\n\n  /** A label for the button that moves to the first page. */\n  firstPageLabel: string = 'First page';\n\n  /** A label for the button that moves to the last page. */\n  lastPageLabel: string = 'Last page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatPaginatorIntl} from './paginator-intl';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatPaginator implements OnInit, OnDestroy {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(value: number) {\n    this._pageIndex = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  _pageIndex: number = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(value: number) {\n    this._length = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  _length: number = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(value: number) {\n    this._pageSize = coerceNumberProperty(value);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(value: number[]) {\n    this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Whether to hide the page size selection UI from the user. */\n  @Input()\n  get hidePageSize(): boolean { return this._hidePageSize; }\n  set hidePageSize(value: boolean) {\n    this._hidePageSize = coerceBooleanProperty(value);\n  }\n  private _hidePageSize = false;\n\n\n  /** Whether to show the first/last buttons UI to the user. */\n  @Input()\n  get showFirstLastButtons(): boolean { return this._showFirstLastButtons; }\n  set showFirstLastButtons(value: boolean) {\n    this._showFirstLastButtons = coerceBooleanProperty(value);\n  }\n  private _showFirstLastButtons = false;\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() readonly page: EventEmitter<PageEvent> = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage(): void {\n    if (!this.hasNextPage()) { return; }\n    this.pageIndex++;\n    this._emitPageEvent();\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage(): void {\n    if (!this.hasPreviousPage()) { return; }\n    this.pageIndex--;\n    this._emitPageEvent();\n  }\n\n  /** Move to the first page if not already there. */\n  firstPage(): void {\n    // hasPreviousPage being false implies at the start\n    if (!this.hasPreviousPage()) { return; }\n    this.pageIndex = 0;\n    this._emitPageEvent();\n  }\n\n  /** Move to the last page if not already there. */\n  lastPage(): void {\n    // hasNextPage being false implies at the end\n    if (!this.hasNextPage()) { return; }\n    this.pageIndex = this.getNumberOfPages();\n    this._emitPageEvent();\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage(): boolean {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage(): boolean {\n    const numberOfPages = this.getNumberOfPages();\n    return this.pageIndex < numberOfPages && this.pageSize != 0;\n  }\n\n  /** Calculate the number of pages */\n  getNumberOfPages(): number {\n    return Math.ceil(this.length / this.pageSize) - 1;\n  }\n\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n\n    this.pageSize = pageSize;\n    this._emitPageEvent();\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) == -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent() {\n    this.page.emit({\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Input,\n  ViewEncapsulation\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\n\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nexport class MatProgressBarBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\nexport const _MatProgressBarMixinBase = mixinColor(MatProgressBarBase, 'primary');\n\n/** Counter used to generate unique IDs for progress bars. */\nlet progressbarId = 0;\n\n/**\n * `<mat-progress-bar>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n    'class': 'mat-progress-bar',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor {\n\n  constructor(public _elementRef: ElementRef) {\n    super(_elementRef);\n  }\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) { this._value = clamp(v || 0); }\n  private _value: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue(): number { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n  private _bufferValue: number = 0;\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** The id of the progress bar. */\n  progressbarId = `mat-progress-bar-${progressbarId++}`;\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    const scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode === 'buffer') {\n      const scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager, FocusOrigin} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, switchMap, take} from 'rxjs/operators';\nimport {matMenuAnimations} from './menu-animations';\nimport {MatMenuContent} from './menu-content';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n\n  /** Class to be applied to the menu's backdrop. */\n  backdropClass: string;\n\n  /** Whether the menu has a backdrop. */\n  hasBackdrop?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options', {\n      providedIn: 'root',\n      factory: () => ({\n        overlapTrigger: true,\n        xPosition: 'after',\n        yPosition: 'below',\n        backdropClass: 'cdk-overlay-transparent-backdrop',\n      })\n    });\n\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 2;\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  exportAs: 'matMenu'\n})\nexport class MatMenu implements OnInit, AfterContentInit, MatMenuPanel, OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter' = 'void';\n\n  /** Emits whenever an animation on the menu completes. */\n  _animationDone = new Subject<void>();\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Class to be added to the backdrop element. */\n  @Input() backdropClass: string = this._defaultOptions.backdropClass;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition(): MenuPositionX { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition(): MenuPositionY { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) templateRef: TemplateRef<any>;\n\n  /** List of the items inside of a menu. */\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\n\n  /**\n   * Menu content that will be rendered lazily.\n   * @docs-private\n   */\n  @ContentChild(MatMenuContent) lazyContent: MatMenuContent;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  get overlapTrigger(): boolean { return this._overlapTrigger; }\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /** Whether the menu has a backdrop. */\n  @Input()\n  get hasBackdrop(): boolean | undefined { return this._hasBackdrop; }\n  set hasBackdrop(value: boolean | undefined) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n  private _hasBackdrop: boolean | undefined = this._defaultOptions.hasBackdrop;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    if (classes && classes.length) {\n      this._classList = classes.split(' ').reduce((obj: any, className: string) => {\n        obj[className] = true;\n        return obj;\n      }, {});\n\n      this._elementRef.nativeElement.className = '';\n      this.setPositionClasses();\n    }\n  }\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   * @deletion-target 7.0.0\n   */\n  @Input()\n  get classList(): string { return this.panelClass; }\n  set classList(classes: string) { this.panelClass = classes; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() readonly closed: EventEmitter<void | 'click' | 'keydown' | 'tab'> =\n      new EventEmitter<void | 'click' | 'keydown' | 'tab'>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   * @deletion-target 7.0.0\n   */\n  @Output() close = this.closed;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngOnInit() {\n    this.setPositionClasses();\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatMenuItem>(this.items).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.close.emit('tab'));\n  }\n\n  ngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    if (this.items) {\n      return this.items.changes.pipe(\n        startWith(this.items),\n        switchMap(items => merge(...items.map(item => item._hovered)))\n      );\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this._hovered()));\n  }\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case ESCAPE:\n        this.closed.emit('keydown');\n        event.stopPropagation();\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n    if (this.lazyContent) {\n      this._ngZone.onStable.asObservable()\n        .pipe(take(1))\n        .subscribe(() => this._keyManager.setFocusOrigin(origin).setFirstItemActive());\n    } else {\n      this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n    }\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * It's necessary to set position-based classes to ensure the menu panel animation\n   * folds out from the correct direction.\n   */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    this._classList['mat-menu-before'] = posX === 'before';\n    this._classList['mat-menu-after'] = posX === 'after';\n    this._classList['mat-menu-above'] = posY === 'above';\n    this._classList['mat-menu-below'] = posY === 'below';\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    // @deletion-target 7.0.0 Combine with _resetAnimation.\n    this._panelAnimationState = 'enter';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    // @deletion-target 7.0.0 Combine with _startAnimation.\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone() {\n    this._animationDone.next();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin, isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {filter, take} from 'rxjs/operators';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {Subscription, merge, of as observableOf} from 'rxjs';\nimport {MatMenu} from './menu-directive';\nimport {throwMatMenuMissingError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy', {\n      providedIn: 'root',\n      factory: () => {\n        const overlay = inject(Overlay);\n        return () => overlay.scrollStrategies.reposition();\n      }\n    });\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closeSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  private _openedByMouse: boolean = false;\n\n  /**\n   * @deprecated\n   * @deletion-target 7.0.0\n   */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel {\n    return this.menu;\n  }\n\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor') menu: MatMenuPanel;\n\n  /** Data to be passed along to any lazily-rendered content. */\n  @Input('matMenuTriggerData') menuData: any;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() readonly menuOpened: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   * @deletion-target 7.0.0\n   */\n  @Output() readonly onMenuOpen: EventEmitter<void> = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() readonly menuClosed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   * @deletion-target 7.0.0\n   */\n  @Output() readonly onMenuClose: EventEmitter<void> = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _parentMenu: MatMenu,\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality,\n              // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n              // @deletion-target 7.0.0\n              private _focusMonitor?: FocusMonitor) {\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n\n    this.menu.close.subscribe(reason => {\n      this._destroyMenu();\n\n      // If a click closed the menu, we should close the entire chain of nested menus.\n      if ((reason === 'click' || reason === 'tab') && this._parentMenu) {\n        this._parentMenu.closed.emit(reason);\n      }\n    });\n\n    if (this.triggersSubmenu()) {\n      // Subscribe to changes in the hovered item in order to toggle the panel.\n      this._hoverSubscription = this._parentMenu._hovered()\n          .pipe(filter(active => active === this._menuItemInstance))\n          .subscribe(() => {\n            this._openedByMouse = true;\n            this.openMenu();\n          });\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._cleanUpSubscriptions();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (this._menuOpen) {\n      return;\n    }\n\n    this._createOverlay().attach(this._portal);\n\n    if (this.menu.lazyContent) {\n      this.menu.lazyContent.attach(this.menuData);\n    }\n\n    this._closeSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n    this._initMenu();\n\n    if (this.menu instanceof MatMenu) {\n      this.menu._startAnimation();\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n  focus(origin: FocusOrigin = 'program') {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._element.nativeElement, origin);\n    } else {\n      this._element.nativeElement.focus();\n    }\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (!this._overlayRef || !this.menuOpen) {\n      return;\n    }\n\n    const menu = this.menu;\n\n    this._resetMenu();\n    this._closeSubscription.unsubscribe();\n    this._overlayRef.detach();\n\n    if (menu instanceof MatMenu) {\n      menu._resetAnimation();\n\n      if (menu.lazyContent) {\n        // Wait for the exit animation to finish before detaching the content.\n        menu._animationDone\n          .pipe(take(1))\n          .subscribe(() => menu.lazyContent!.detach());\n      }\n    } else if (menu.lazyContent) {\n      menu.lazyContent.detach();\n    }\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n    this.menu.focusFirstItem(this._openedByMouse ? 'mouse' : 'program');\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  /**\n   * This method resets the menu when it's closed, most importantly restoring\n   * focus to the menu trigger if the menu was opened via the keyboard.\n   */\n  private _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (!this._openedByMouse) {\n      // Note that the focus style will show up both for `program` and\n      // `keyboard` so we don't have to specify which one it is.\n      this.focus();\n    } else if (!this.triggersSubmenu()) {\n      this.focus('mouse');\n    }\n\n    this._openedByMouse = false;\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as FlexibleConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getPosition(),\n      hasBackdrop: this.menu.hasBackdrop == null ? !this.triggersSubmenu() : this.menu.hasBackdrop,\n      backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n      direction: this.dir,\n      scrollStrategy: this._scrollStrategy()\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: FlexibleConnectedPositionStrategy): void {\n    position.positionChanges.subscribe(change => {\n      const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n      const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n      this.menu.setPositionClasses(posX, posY);\n    });\n  }\n\n  /**\n   * This method builds the position strategy for the overlay, so the menu is properly connected\n   * to the trigger.\n   * @returns ConnectedPositionStrategy\n   */\n  private _getPosition(): FlexibleConnectedPositionStrategy {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    return this._overlay.position()\n        .flexibleConnectedTo(this._element)\n        .withPositions([\n          {originX, originY, overlayX, overlayY, offsetY},\n          {originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY},\n          {\n            originX,\n            originY: originFallbackY,\n            overlayX,\n            overlayY: overlayFallbackY,\n            offsetY: -offsetY\n          },\n          {\n            originX: originFallbackX,\n            originY: originFallbackY,\n            overlayX: overlayFallbackX,\n            overlayY: overlayFallbackY,\n            offsetY: -offsetY\n          }\n        ]);\n  }\n\n  /** Cleans up the active subscriptions. */\n  private _cleanUpSubscriptions(): void {\n    this._closeSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMenu ? this._parentMenu.close : observableOf();\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      this._openedByMouse = true;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatMenuContent} from './menu-content';\nimport {MatMenu} from './menu-directive';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuTrigger} from './menu-trigger';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    MatRippleModule,\n    OverlayModule,\n  ],\n  exports: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent, MatCommonModule],\n  declarations: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent],\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  animateChild,\n  group,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n */\nexport const matSelectAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      transform: 'scaleY(0)',\n      minWidth: '100%',\n      opacity: 0\n    })),\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', group([\n      query('@fadeInContent', animateChild()),\n      animate('150ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n    ])),\n    transition('* => void', [\n      animate('250ms 100ms linear', style({opacity: 0}))\n    ])\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {SPACE, ENTER, HOME, END} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  MatLine,\n  MatLineSetter,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Subscription} from 'rxjs';\n\n\n/** @docs-private */\nexport class MatSelectionListBase {}\nexport const _MatSelectionListMixinBase = mixinDisableRipple(mixinDisabled(MatSelectionListBase));\n\n/** @docs-private */\nexport class MatListOptionBase {}\nexport const _MatListOptionMixinBase = mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-focus]': '_hasFocus',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _selected = false;\n  private _disabled = false;\n\n  /** Whether the option has focus. */\n  _hasFocus: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text') _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Value of the option */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  constructor(private _element: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */\n              @Inject(forwardRef(() => MatSelectionList)) public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    // List options that are selected at initialization can't be reported properly to the form\n    // control. This is because it takes some time until the selection-list knows about all\n    // available options. Also it can happen that the ControlValueAccessor has an initial value\n    // that should be used instead. Deferring the value change report to the next tick ensures\n    // that the form control value is not being overwritten.\n    const wasSelected = this._selected;\n\n    Promise.resolve().then(() => {\n      if (this._selected || wasSelected) {\n        this.selected = true;\n        this._changeDetector.markForCheck();\n      }\n    });\n  }\n\n  ngAfterContentInit() {\n    // TODO: consider turning the setter into a function, it doesn't do anything as a class.\n    // tslint:disable-next-line:no-unused-expression\n    new MatLineSetter(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => this.selected = false);\n    }\n\n    this.selectionList._removeOptionFromList(this);\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? this._text.nativeElement.textContent : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n    }\n  }\n\n  _handleFocus() {\n    this._hasFocus = true;\n    this.selectionList._setFocusedOption(this);\n  }\n\n  _handleBlur() {\n    this._hasFocus = false;\n    this.selectionList._onTouched();\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. */\n  _setSelected(selected: boolean) {\n    if (selected === this._selected) {\n      return;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list',\n    '(focus)': 'focus()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\n    CanDisable, CanDisableRipple, AfterContentInit, ControlValueAccessor, OnDestroy {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** Tabindex of the selection list. */\n  @Input() tabIndex: number = 0;\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Used for storing the values that were assigned before the options were initialized. */\n  private _tempValues: string[]|null;\n\n  private _modelChanges = Subscription.EMPTY;\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  constructor(private _element: ElementRef, @Attribute('tabindex') tabIndex: string) {\n    super();\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options)\n      .withWrap()\n      .withTypeAhead()\n      // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\n      // screenreader users, that allows reading the different options of the list.\n      .skipPredicate(() => false);\n\n    if (this._tempValues) {\n      this._setOptionsFromValues(this._tempValues);\n      this._tempValues = null;\n    }\n\n    // Sync external changes to the model back to the options.\n    this._modelChanges = this.selectedOptions.onChange!.subscribe(event => {\n      if (event.added) {\n        for (let item of event.added) {\n          item.selected = true;\n        }\n      }\n\n      if (event.removed) {\n        for (let item of event.removed) {\n          item.selected = false;\n        }\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this._modelChanges.unsubscribe();\n  }\n\n  /** Focuses the last active list option. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this.options.forEach(option => option._setSelected(true));\n    this._reportValueChange();\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this.options.forEach(option => option._setSelected(false));\n    this._reportValueChange();\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItemIndex(this._getOptionIndex(option));\n  }\n\n  /** Removes an option from the selection list and updates the active item. */\n  _removeOptionFromList(option: MatListOption) {\n    if (option._hasFocus) {\n      const optionIndex = this._getOptionIndex(option);\n\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.setPreviousItemActive();\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.setNextItemActive();\n      }\n    }\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case SPACE:\n      case ENTER:\n        if (!this.disabled) {\n          this._toggleSelectOnFocusedOption();\n\n          // Always prevent space from scrolling the page since the list has focus\n          event.preventDefault();\n        }\n        break;\n      case HOME:\n      case END:\n        event.keyCode === HOME ? this._keyManager.setFirstItemActive() :\n                                 this._keyManager.setLastItemActive();\n        event.preventDefault();\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    if (this.options) {\n      this._onChange(this._getSelectedOptionValues());\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    } else {\n      this._tempValues = values;\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    if (this.options) {\n      this.options.forEach(option => option.disabled = isDisabled);\n    }\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Returns the option with the specified value. */\n  private _getOptionByValue(value: string): MatListOption | undefined {\n    return this.options.find(option => option.value === value);\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values\n      .map(value => this._getOptionByValue(value))\n      .filter(Boolean)\n      .forEach(option => option!._setSelected(true));\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the selected state of the currently focused option. */\n  private _toggleSelectOnFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n      }\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  TemplateRef,\n  ComponentFactoryResolver,\n  ApplicationRef,\n  Injector,\n  ViewContainerRef,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {TemplatePortal, DomPortalOutlet} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\n\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\n@Directive({\n  selector: 'ng-template[matMenuContent]'\n})\nexport class MatMenuContent implements OnDestroy {\n  private _portal: TemplatePortal<any>;\n  private _outlet: DomPortalOutlet;\n\n  constructor(\n    private _template: TemplateRef<any>,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n    private _injector: Injector,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) private _document: any) {}\n\n  /**\n   * Attaches the content with a particular context.\n   * @docs-private\n   */\n  attach(context: any = {}) {\n    if (!this._portal) {\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n    }\n\n    this.detach();\n\n    if (!this._outlet) {\n      this._outlet = new DomPortalOutlet(this._document.createElement('div'),\n          this._componentFactoryResolver, this._appRef, this._injector);\n    }\n\n    const element: HTMLElement = this._template.elementRef.nativeElement;\n\n    // Because we support opening the same menu from different triggers (which in turn have their\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n    // risk it staying attached to a pane that's no longer in the DOM.\n    element.parentNode!.insertBefore(this._outlet.outletElement, element);\n    this._portal.attach(this._outlet, context);\n  }\n\n  /**\n   * Detaches the content.\n   * @docs-private\n   */\n  detach() {\n    if (this._portal.isAttached) {\n      this._portal.detach();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._outlet) {\n      this._outlet.dispose();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  query,\n  group,\n  sequence,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: AnimationTriggerMetadata;\n  readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [\n    state('void', style({\n      opacity: 0,\n      // This starts off from 0.01, instead of 0, because there's an issue in the Angular animations\n      // as of 4.2, which causes the animation to be skipped if it starts from 0.\n      transform: 'scale(0.01, 0.01)'\n    })),\n    transition('void => enter', sequence([\n      query('.mat-menu-content', style({opacity: 0})),\n      animate('100ms linear', style({opacity: 1, transform: 'scale(1, 0.5)'})),\n      group([\n        query('.mat-menu-content', animate('400ms cubic-bezier(0.55, 0, 0.55, 0.2)',\n          style({opacity: 1})\n        )),\n        animate('300ms cubic-bezier(0.25, 0.8, 0.25, 1)', style({transform: 'scale(1, 1)'})),\n      ])\n    ])),\n    transition('* => void', animate('150ms 50ms linear', style({opacity: 0})))\n  ]),\n\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n    // TODO(crisbeto): this is inside the `transformMenu`\n    // now. Remove next time we do breaking changes.\n    state('showing', style({opacity: 1})),\n    transition('void => *', [\n      style({opacity: 0}),\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const transformMenu = matMenuAnimations.transformMenu;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nexport class MatMenuItemBase {}\nexport const _MatMenuItemMixinBase = mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    'role': 'menuitem',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n    '(click)': '_checkDisabled($event)',\n    '(mouseenter)': '_emitHoverEvent()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n\n  private _document: Document;\n\n  /** Stream that emits when the menu item is hovered. */\n  readonly _hovered: Subject<MatMenuItem> = new Subject<MatMenuItem>();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(\n    private _elementRef: ElementRef,\n    @Inject(DOCUMENT) document?: any,\n    private _focusMonitor?: FocusMonitor) {\n\n    // @deletion-target 7.0.0 make `_focusMonitor` and `document` required params.\n    super();\n\n    if (_focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      _focusMonitor.monitor(this._getHostElement(), false);\n    }\n\n    this._document = document;\n  }\n\n  /** Focuses the menu item. */\n  focus(origin: FocusOrigin = 'program'): void {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin);\n    } else {\n      this._getHostElement().focus();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._getHostElement());\n    }\n\n    this._hovered.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  _emitHoverEvent() {\n    if (!this.disabled) {\n      this._hovered.next(this);\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === textNodeType) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, MatLine, MatLineSetter, mixinDisableRipple} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nexport class MatListBase {}\nexport const _MatListMixinBase = mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nexport class MatListItemBase {}\nexport const _MatListItemMixinBase = mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {'class': 'mat-list'},\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    // @deletion-target 7.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\n    '[class.mat-list-item-avatar]': '_avatar',\n    '[class.mat-list-item-with-avatar]': '_avatar',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple {\n  private _isNavList: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n\n  constructor(private _element: ElementRef,\n              @Optional() private _navList: MatNavList) {\n    super();\n    this._isNavList = !!_navList;\n  }\n\n  ngAfterContentInit() {\n    // TODO: consider turning the setter into a function, it doesn't do anything as a class.\n    // tslint:disable-next-line:no-unused-expression\n    new MatLineSetter(this._lines, this._element);\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isNavList || this.disableRipple || this._navList.disableRipple;\n  }\n\n  _handleFocus() {\n    this._element.nativeElement.classList.add('mat-list-item-focus');\n  }\n\n  _handleBlur() {\n    this._element.nativeElement.classList.remove('mat-list-item-focus');\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {HttpClient} from '@angular/common/http';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n} from '@angular/core';\nimport {DomSanitizer, SafeResourceUrl, SafeHtml} from '@angular/platform-browser';\nimport {forkJoin, Observable, of as observableOf, throwError as observableThrow} from 'rxjs';\nimport {catchError, finalize, map, share, tap} from 'rxjs/operators';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeUrlError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeLiteralError(literal: SafeHtml): Error {\n  return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n               `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  url: SafeResourceUrl | null;\n  svgElement: SVGElement | null;\n\n  constructor(url: SafeResourceUrl);\n  constructor(svgElement: SVGElement);\n  constructor(data: SafeResourceUrl | SVGElement) {\n    // Note that we can't use `instanceof SVGElement` here,\n    // because it'll break during server-side rendering.\n    if (!!(data as any).nodeName) {\n      this.svgElement = data as SVGElement;\n    } else {\n      this.url = data as SafeResourceUrl;\n    }\n  }\n}\n\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable({providedIn: 'root'})\nexport class MatIconRegistry {\n  private _document: Document;\n\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document: any) {\n      this._document = document;\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n\n  /**\n   * Registers an icon using an HTML string in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteral(iconName: string, literal: SafeHtml): this {\n    return this.addSvgIconLiteralInNamespace('', iconName, literal);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon using an HTML string in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteralInNamespace(namespace: string, iconName: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._createSvgElementForSingleIcon(sanitizedLiteral);\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the default namespace.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteral(literal: SafeHtml): this {\n    return this.addSvgIconSetLiteralInNamespace('', literal);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteralInNamespace(namespace: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._svgElementFromString(sanitizedLiteral);\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the `<mat-icon>` element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    const cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg)),\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg)),\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: any): Observable<SVGElement | null> => {\n            let url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the combined Observable won't\n            // necessarily fail.\n            console.log(`Loading icon set URL: ${url} failed: ${err}`);\n            return observableOf(null);\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // If the SVG for this icon set has already been parsed, do nothing.\n    if (config.svgElement) {\n      return observableOf(config.svgElement);\n    }\n\n    return this._fetchUrl(config.url).pipe(map(svgText => {\n      // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n      // only needs to occur if the cache is yet unset.\n      if (!config.svgElement) {\n        config.svgElement = this._svgElementFromString(svgText);\n      }\n\n      return config.svgElement;\n    }));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    const iconSource = iconSet.querySelector('#' + iconName);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.id = '';\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    const div = this._document.createElement('DIV');\n    div.innerHTML = str;\n    const svg = div.querySelector('svg') as SVGElement;\n\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n\n    return svg;\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    let svg = this._svgElementFromString('<svg></svg>');\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl | null): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    if (safeUrl == null) {\n      throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finalize` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share(),\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n\n  /**\n   * Registers an icon config by name in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param iconName Name under which to register the config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconConfig(namespace: string, iconName: string, config: SvgIconConfig): this {\n    this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n    return this;\n  }\n\n  /**\n   * Registers an icon set config in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconSetConfig(namespace: string, config: SvgIconConfig): this {\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n\n    return this;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), DOCUMENT as InjectionToken<any>],\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nexport class MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatIconMixinBase = mixinColor(MatIconBase);\n\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon',\n    '[class.mat-icon-inline]': 'inline',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, CanColor {\n\n  /**\n   * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n   * the element the icon is contained in.\n   */\n  @Input()\n  get inline(): boolean {\n    return this._inline;\n  }\n  set inline(inline: boolean) {\n    this._inline = coerceBooleanProperty(inline);\n  }\n  private _inline: boolean = false;\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  constructor(\n      elementRef: ElementRef,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   `'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)`\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    if (changes.svgIcon) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    const childCount = layoutElement.childNodes.length;\n\n    // Remove existing child nodes and add the new SVG element. Note that we can't\n    // use innerHTML, because IE will throw if the element has a data binding.\n    for (let i = 0; i < childCount; i++) {\n      layoutElement.removeChild(layoutElement.childNodes[i]);\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\nimport {ICON_REGISTRY_PROVIDER} from './icon-registry';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n  providers: [ICON_REGISTRY_PROVIDER],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onBlur()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements AfterContentInit, ControlValueAccessor, OnDestroy,\n    Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    this.registerDatepicker(value);\n  }\n  _datepicker: MatDatepicker<D>;\n\n  private registerDatepicker(value: MatDatepicker<D>) {\n    if (value) {\n      this._datepicker = value;\n      this._datepicker._registerInput(this);\n    }\n  }\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(value: (date: D | null) => boolean) {\n    this._dateFilter = value;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    const oldDate = this.value;\n    this._value = value;\n    this._formatValue(value);\n\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    const element = this._elementRef.nativeElement;\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n\n    // We need to null check the `blur` method, because it's undefined during SSR.\n    if (newValue && element.blur) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      element.blur();\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D | null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngAfterContentInit() {\n    if (this._datepicker) {\n      this._datepickerSubscription = this._datepicker._selectedChanged.subscribe((selected: D) => {\n        this.value = selected;\n        this._cvaOnChange(selected);\n        this._onTouched();\n        this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n        this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** @docs-private */\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * @deprecated\n   * @deletion-target 7.0.0 Use `getConnectedOverlayOrigin` instead\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this.getConnectedOverlayOrigin();\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (event.altKey && event.keyCode === DOWN_ARROW) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n    this._value = date;\n    this._cvaOnChange(date);\n    this._valueChange.emit(date);\n    this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /** Returns the palette used by the input's form field, if any. */\n  _getThemePalette() {\n    return this._formField ? this._formField.color : undefined;\n  }\n\n  /** Handles blur events on the input. */\n  _onBlur() {\n    // Reformat the input only if we have a valid value.\n    if (this.value) {\n      this._formatValue(this.value);\n    }\n\n    this._onTouched();\n  }\n\n  /** Formats a value and sets it on the input element. */\n  private _formatValue(value: D | null) {\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class MatDatepickerToggleIcon {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'class': 'mat-datepicker-toggle',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n    '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n    '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon) _customIcon: MatDatepickerToggleIcon;\n\n  constructor(public _intl: MatDatepickerIntl, private _changeDetectorRef: ChangeDetectorRef) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.datepicker) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatCalendar, MatCalendarHeader} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {MatDatepicker, MatDatepickerContent} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    OverlayModule,\n    A11yModule,\n    PortalModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  providers: [\n    MatDatepickerIntl,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n    MatCalendarHeader,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input()\n  get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [MatDivider, MatCommonModule],\n  declarations: [MatDivider],\n})\nexport class MatDividerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * The display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the reset of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Host,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  SimpleChanges,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {filter, startWith, take} from 'rxjs/operators';\nimport {MatAccordion} from './accordion';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\n\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  }\n})\nexport class MatExpansionPanel extends CdkAccordionItem\n    implements AfterContentInit, OnChanges, OnDestroy {\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n  private _hideToggle = false;\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordion;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent) _lazyContent: MatExpansionPanelContent;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  constructor(@Optional() @Host() accordion: MatAccordion,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n  }\n\n  /** Whether the expansion indicator should be hidden. */\n  _getHideToggle(): boolean {\n    if (this.accordion) {\n      return this.accordion.hideToggle;\n    }\n    return this.hideToggle;\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._inputChanges.complete();\n  }\n\n  _bodyAnimation(event: AnimationEvent) {\n    const classList = event.element.classList;\n    const cssClass = 'mat-expanded';\n    const {phaseName, toState} = event;\n\n    // Toggle the body's `overflow: hidden` class when closing starts or when expansion ends in\n    // order to prevent the cases where switching too early would cause the animation to jump.\n    // Note that we do it directly on the DOM element to avoid the slight delay that comes\n    // with doing it via change detection.\n    if (phaseName === 'done' && toState === 'expanded') {\n      classList.add(cssClass);\n    } else if (phaseName === 'start' && toState === 'collapsed') {\n      classList.remove(cssClass);\n    }\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, Subscription} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanel} from './expansion-panel';\n\n\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'panel.disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n    @Host() public panel: MatExpansionPanel,\n    private _element: ElementRef,\n    private _focusMonitor: FocusMonitor,\n    private _changeDetectorRef: ChangeDetectorRef) {\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to  subscribe and trigger change detection manually.\n    this._parentChangeSubscription = merge(\n      panel.opened,\n      panel.closed,\n      panel._inputChanges.pipe(filter(changes => !!(changes.hideToggle || changes.disabled)))\n    )\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    _focusMonitor.monitor(_element.nativeElement);\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    this.panel.toggle();\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        event.preventDefault();\n        this._toggle();\n        break;\n      default:\n        return;\n    }\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n}\n\n/**\n * `<mat-panel-description>`\n *\n * This direction is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host : {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * `<mat-panel-title>`\n *\n * This direction is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host : {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanel, MatExpansionPanelActionRow} from './expansion-panel';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatLine, MatLineSetter} from '@angular/material/core';\nimport {coerceToNumber} from './grid-list-measure';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(private _element: ElementRef) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value: number) { this._rowspan = coerceToNumber(value); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value: number) { this._colspan = coerceToNumber(value); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    this._element.nativeElement.style[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridTileText implements AfterContentInit {\n  /**\n   *  Helper that watches the number of lines in a text area and sets\n   * a class on the host element that matches the line count.\n   */\n  _lineSetter: MatLineSetter;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef) {}\n\n  ngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {QueryList} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    let lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  constructor(numColumns: number, tiles: QueryList<MatGridTile>) {\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    let gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile.\n    } while (gapEndIndex - gapStartIndex < tileCols);\n\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'rtl' ? 'right' : 'left';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number);\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList);\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height. */\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['paddingBottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('marginTop', null);\n      tile._setStyle('paddingTop', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string { return `calc(${exp})`; }\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return (value.match(/px|em|rem/)) ? value : value + 'px';\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  coerceToString,\n  coerceToNumber,\n} from './grid-list-measure';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridList implements OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef, @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols(): number { return this._cols; }\n  set cols(value: number) { this._cols = coerceToNumber(value); }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize(): string { return this._gutter; }\n  set gutterSize(value: string) { this._gutter = coerceToString(value); }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  set rowHeight(value: string | number) {\n    const newValue = coerceToString(value);\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    const tracker = new TileCoordinator(this.cols, this._tiles);\n    const direction = this._dir ? this._dir.value : 'ltr';\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    this._tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      this._element.nativeElement.style[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new year is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody;\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n    this._focusActiveCell();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\n    let activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n        this._yearSelected(this._dateAdapter.getYear(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  _getActiveCell(): number {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  private _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _shouldEnableYear(year: number) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null ||\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n      return false;\n    }\n\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody;\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n    this._focusActiveCell();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    const normalizedDate =\n          this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    this.monthSelected.emit(normalizedDate);\n\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n        this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  private _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (month === undefined || month === null ||\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentPortal, ComponentType, Portal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  forwardRef,\n  Host,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {takeUntil} from 'rxjs/operators';\nimport {Observable, Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView, yearsPerPage} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n/** Default header for MatCalendar */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar-header',\n  templateUrl: 'calendar-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarHeader<D> implements OnDestroy {\n  /** Subject that emits when the component has been destroyed. */\n  private _destroyed = new Subject<void>();\n\n  constructor(private _intl: MatDatepickerIntl,\n              @Host() @Inject(forwardRef(() => MatCalendar)) public calendar: MatCalendar<D>,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n    this.calendar.stateChanges.pipe(takeUntil(this._destroyed))\n        .subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  /** The label for the current calendar view. */\n  get periodButtonText(): string {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter\n          .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\n              .toLocaleUpperCase();\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYearName(this.calendar.activeDate);\n    }\n    const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n    const lastYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  get periodButtonLabel(): string {\n    return this.calendar.currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the the previous button. */\n  get prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** The label for the the next button. */\n  get nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** Handles user clicks on the period label. */\n  currentPeriodClicked(): void {\n    this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  previousClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage\n            );\n  }\n\n  /** Handles user clicks on the next button. */\n  nextClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate,\n                    this.calendar.currentView == 'year' ? 1 : yearsPerPage\n            );\n  }\n\n  /** Whether the previous period button is enabled. */\n  previousEnabled(): boolean {\n    if (!this.calendar.minDate) {\n      return true;\n    }\n    return !this.calendar.minDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  nextEnabled(): boolean {\n    return !this.calendar.maxDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n}\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, OnDestroy, OnChanges {\n  /** An input indicating the type of the header component, if set. */\n  @Input() headerComponent: ComponentType<any>;\n\n  /** A portal containing the header component type for this calendar. */\n  _calendarHeaderPortal: Portal<any>;\n\n  private _intlChanges: Subscription;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView) multiYearView: MatMultiYearView<D>;\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get activeDate(): D { return this._clampedActiveDate; }\n  set activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n    this._stateChanges.next();\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  currentView: 'month' | 'year' | 'multi-year';\n\n  /**\n   * An observable that emits whenever there is a state change that the header may need to respond\n   * to.\n   */\n  get stateChanges(): Observable<void> {\n    return this._stateChanges.asObservable();\n  }\n  private _stateChanges = new Subject<void>();\n\n  constructor(_intl: MatDatepickerIntl,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => {\n      changeDetectorRef.markForCheck();\n      this._stateChanges.next();\n    });\n  }\n\n  ngAfterContentInit() {\n    this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || MatCalendarHeader);\n\n    this.activeDate = this.startAt || this._dateAdapter.today();\n    this.currentView = this.startView;\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change = changes.minDate || changes.maxDate || changes.dateFilter;\n\n    if (change && !change.firstChange) {\n      const view = this.monthView || this.yearView || this.multiYearView;\n\n      if (view) {\n        view._init();\n      }\n    }\n\n    this._stateChanges.next();\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles year/month selection in the multi-year/year views. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this.activeDate = date;\n    this.currentView = view;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n  group,\n  query,\n  animateChild,\n} from '@angular/animations';\n\n/** Animations used by the Material datepicker. */\nexport const matDatepickerAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n  /** Transforms the height of the datepicker's calendar. */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({opacity: 0, transform: 'scale(1, 0)'})),\n    state('enter', style({opacity: 1, transform: 'scale(1, 1)'})),\n    transition('void => enter', group([\n      query('@fadeInCalendar', animateChild()),\n      animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n    ])),\n    transition('* => void', animate('100ms linear', style({opacity: 0})))\n  ]),\n\n  /** Fades in the content of the calendar. */\n  fadeInCalendar: trigger('fadeInCalendar', [\n    state('void', style({opacity: 0})),\n    state('enter', style({opacity: 1})),\n    transition('void => *', animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {take, filter} from 'rxjs/operators';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, DateAdapter, mixinColor, ThemePalette} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {merge, Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatCalendar} from './calendar';\nimport {matDatepickerAnimations} from './datepicker-animations';\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy', {\n      providedIn: 'root',\n      factory: () => {\n        const overlay = inject(Overlay);\n        return () => overlay.scrollStrategies.reposition();\n      }\n    });\n\n// Boilerplate for applying mixins to MatDatepickerContent.\n/** @docs-private */\nexport class MatDatepickerContentBase {\n  constructor(public _elementRef: ElementRef) { }\n}\nexport const _MatDatepickerContentMixinBase = mixinColor(MatDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[@transformPanel]': '\"enter\"',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n    '[class.mat-datepicker-content-above]': '_isAbove',\n  },\n  animations: [\n    matDatepickerAnimations.transformPanel,\n    matDatepickerAnimations.fadeInCalendar,\n  ],\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color'],\n})\nexport class MatDatepickerContent<D> extends _MatDatepickerContentMixinBase\n  implements AfterContentInit, CanColor, OnInit, OnDestroy {\n\n  /** Subscription to changes in the overlay's position. */\n  private _positionChange: Subscription|null;\n\n  /** Reference to the internal calendar component. */\n  @ViewChild(MatCalendar) _calendar: MatCalendar<D>;\n\n  /** Reference to the datepicker that created the overlay. */\n  datepicker: MatDatepicker<D>;\n\n  /** Whether the datepicker is above or below the input. */\n  _isAbove: boolean;\n\n  constructor(\n    elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone) {\n    super(elementRef);\n  }\n\n  ngOnInit() {\n    if (!this.datepicker._popupRef || this._positionChange) {\n      return;\n    }\n\n    const positionStrategy =\n      this.datepicker._popupRef.getConfig().positionStrategy! as FlexibleConnectedPositionStrategy;\n\n    this._positionChange = positionStrategy.positionChanges.subscribe(change => {\n      const isAbove = change.connectionPair.overlayY === 'bottom';\n\n      if (isAbove !== this._isAbove) {\n        this._ngZone.run(() => {\n          this._isAbove = isAbove;\n          this._changeDetectorRef.markForCheck();\n        });\n      }\n    });\n  }\n\n  ngAfterContentInit() {\n    this._focusActiveCell();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  private _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._elementRef.nativeElement.querySelector('.mat-calendar-body-active').focus();\n      });\n    });\n  }\n\n  ngOnDestroy() {\n    if (this._positionChange) {\n      this._positionChange.unsubscribe();\n      this._positionChange = null;\n    }\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDatepicker<D> implements OnDestroy, CanColor {\n  /** An input indicating the type of the custom header component for the calendar, if set. */\n  @Input() calendarHeaderComponent: ComponentType<any>;\n\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' = 'month';\n\n  /** Color palette to use on the datepicker's calendar. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n        (this._datepickerInput ? this._datepickerInput._getThemePalette() : undefined);\n  }\n  set color(value: ThemePalette) {\n    this._color = value;\n  }\n  _color: ThemePalette;\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits selected year in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected month in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { value ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<MatDatepickerContent<D>> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** Reference to the component instantiated in popup mode. */\n  private _popupComponentRef: ComponentRef<MatDatepickerContent<D>> | null;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  /** Subscription to value changes in the associated input element. */\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  /** Emits new selected date when selected date changes. */\n  readonly _selectedChanged = new Subject<D>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n      this._popupComponentRef = null;\n    }\n  }\n\n  /** Selects the given date */\n  _select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this._selectedChanged.next(date);\n    }\n  }\n\n  /** Emits the selected year in multiyear view */\n  _selectYear(normalizedYear: D): void {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Emits selected month in year view */\n  _selectMonth(normalizedMonth: D): void {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    this._dialogRef = this._dialog.open<MatDatepickerContent<D>>(MatDatepickerContent, {\n      direction: this._getDirection(),\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n    this._setColor();\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal<MatDatepickerContent<D>>(MatDatepickerContent,\n                                                                          this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      this._popupRef.setDirection(this._getDirection());\n      this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\n      this._popupComponentRef.instance.datepicker = this;\n      this._setColor();\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._getDirection(),\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => {\n        // Closing on alt + up is only valid when there's an input associated with the datepicker.\n        return event.keyCode === ESCAPE ||\n               (this._datepickerInput && event.altKey && event.keyCode === UP_ARROW);\n      }))\n    ).subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .flexibleConnectedTo(this._datepickerInput.getPopupConnectionElementRef())\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8)\n      .withPush(false)\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom'\n        },\n        {\n          originX: 'end',\n          originY: 'bottom',\n          overlayX: 'end',\n          overlayY: 'top'\n        },\n        {\n          originX: 'end',\n          originY: 'top',\n          overlayX: 'end',\n          overlayY: 'bottom'\n        }\n      ]);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Passes the current theme color along to the calendar overlay. */\n  private _setColor(): void {\n    const color = this.color;\n    if (this._popupComponentRef) {\n      this._popupComponentRef.instance.color = color;\n    }\n    if (this._dialogRef) {\n      this._dialogRef.componentInstance.color = color;\n    }\n  }\n\n  /** Returns the layout direction of the datepicker. */\n  private _getDirection() {\n    return this._dir ? this._dir.value : 'ltr';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AnimationEvent} from '@angular/animations';\nimport {matDialogAnimations} from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.slideDialog],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    '[attr.id]': '_id',\n    '[attr.role]': '_config?.role',\n    '[attr.aria-labelledby]': '_config?.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config?.ariaLabel',\n    '[attr.aria-describedby]': '_config?.ariaDescribedBy || null',\n    '[@slideDialog]': '_state',\n    '(@slideDialog.start)': '_onAnimationStart($event)',\n    '(@slideDialog.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** The dialog configuration. */\n  _config: MatDialogConfig;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null = null;\n\n  /** ID for the container DOM element. */\n  _id: string;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any) {\n\n    super();\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Note that there is no focus method when rendering on the server.\n      if (this._elementRef.nativeElement.focus) {\n        // Move focus onto the dialog immediately in order to prevent the user from accidentally\n        // opening multiple dialogs at the same time. Needs to be async, because the element\n        // may not be focusable immediately.\n        Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n      }\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {GlobalPositionStrategy, OverlayRef} from '@angular/cdk/overlay';\nimport {Location} from '@angular/common';\nimport {Observable, Subject, Subscription, SubscriptionLike} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {DialogPosition} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private readonly _afterOpen = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private readonly _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private readonly _beforeClose = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  /** Subscription to changes in the user's location. */\n  private _locationChanges: SubscriptionLike = Subscription.EMPTY;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    public _containerInstance: MatDialogContainer,\n    location?: Location,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Pass the id along to the container.\n    _containerInstance._id = id;\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpen.next();\n      this._afterOpen.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._overlayRef.dispose();\n      this._locationChanges.unsubscribe();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose))\n      .subscribe(() => this.close());\n\n    if (location) {\n      // Close the dialog when the user goes forwards/backwards in history or when the location\n      // hash changes. Note that this usually doesn't include clicking on links (unless the user\n      // is using the `HashLocationStrategy`).\n      this._locationChanges = location.subscribe(() => {\n        if (this._containerInstance._config.closeOnNavigation) {\n          this.close();\n        }\n      });\n    }\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._beforeClose.next(dialogResult);\n      this._beforeClose.complete();\n      this._overlayRef.detachBackdrop();\n    });\n\n    this._containerInstance._startExitAnimation();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpen(): Observable<void> {\n    return this._afterOpen.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this._beforeClose.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = 'auto', height: string = 'auto'): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayContainer,\n  OverlayRef,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  ComponentRef,\n  Inject,\n  inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {defer, Observable, of as observableOf, Subject} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy', {\n      providedIn: 'root',\n      factory: () => {\n        const overlay = inject(Overlay);\n        return () => overlay.scrollStrategies.block();\n      }\n    });\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private readonly _afterAllClosedAtThisLevel = new Subject<void>();\n  private readonly _afterOpenAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpen : this._afterOpenAtThisLevel;\n  }\n\n  get _afterAllClosed() {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  readonly afterAllClosed: Observable<void> = defer<void>(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined)));\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() private _location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) private _scrollStrategy,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {}\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T> {\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef =\n        this._attachDialogContent<T>(componentOrTemplateRef, dialogContainer, overlayRef, config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpen.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    let i = this.openDialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      this.openDialogs[i].close();\n    }\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    let containerPortal = new ComponentPortal(MatDialogContainer, config.viewContainerRef);\n    let containerRef: ComponentRef<MatDialogContainer> = overlay.attach(containerPortal);\n    containerRef.instance._config = config;\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef = new MatDialogRef<T>(overlayRef, dialogContainer, this._location, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap();\n\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    injectionTokens\n      .set(MatDialogContainer, dialogContainer)\n      .set(MAT_DIALOG_DATA, config.data)\n      .set(MatDialogRef, dialogRef);\n\n    if (!userInjector || !userInjector.get(Directionality, null)) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string = 'Close dialog';\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes._matDialogClose || changes._matDialogCloseResult;\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent {}\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions {}\n\n\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MatDialog} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogActions,\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTextareaAutosize} from '@angular/cdk/text-field';\nimport {Directive, Input} from '@angular/core';\n\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deletion-target 7.0.0 deprecate in favor of `cdkTextareaAutosize`.\n */\n@Directive({\n  selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n  exportAs: 'matTextareaAutosize',\n  inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n  host: {\n    'class': 'cdk-textarea-autosize mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n    '(input)': '_noopInputHandler()',\n  },\n})\nexport class MatTextareaAutosize extends CdkTextareaAutosize {\n  @Input()\n  get matAutosizeMinRows(): number { return this.minRows; }\n  set matAutosizeMinRows(value: number) { this.minRows = value; }\n\n  @Input()\n  get matAutosizeMaxRows(): number { return this.maxRows; }\n  set matAutosizeMaxRows(value: number) { this.maxRows = value; }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Self,\n  NgZone,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {CanUpdateErrorState, ErrorStateMatcher, mixinErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs';\nimport {AutofillMonitor} from '@angular/cdk/text-field';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nexport class MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatInputMixinBase = mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput]`,\n  exportAs: 'matInput',\n  host: {\n    /**\n     * @deletion-target 7.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n     */\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[attr.placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[readonly]': 'readonly',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, OnInit, DoCheck, CanUpdateErrorState {\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _inputValueAccessor: {value: any};\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  focused: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly stateChanges: Subject<void> = new Subject<void>();\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  controlType: string = 'mat-input';\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  autofilled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n  protected _disabled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n  protected _id: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input() placeholder: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  protected _required = false;\n\n  /** Input type of the element. */\n  @Input()\n  get type(): string { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      this._elementRef.nativeElement.type = this._type;\n    }\n  }\n  protected _type = 'text';\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): string { return this._inputValueAccessor.value; }\n  set value(value: string) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\n  private _readonly = false;\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(protected _elementRef: ElementRef,\n              protected _platform: Platform,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n              private _autofillMonitor: AutofillMonitor,\n              ngZone: NgZone) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || this._elementRef.nativeElement;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      ngZone.runOutsideAngular(() => {\n        _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n          let el = event.target as HTMLInputElement;\n          if (!el.value && !el.selectionStart && !el.selectionEnd) {\n            // Note: Just setting `0, 0` doesn't fix the issue. Setting\n            // `1, 1` fixes it for the first time that you type text and\n            // then hold delete. Toggling to `1, 1` and then back to\n            // `0, 0` seems to completely fix it.\n            el.setSelectionRange(1, 1);\n            el.setSelectionRange(0, 0);\n          }\n        });\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n  }\n\n  ngOnInit() {\n    this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n      this.autofilled = event.isAutofilled;\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n    this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n  }\n\n  /** Focuses the input. */\n  focus(): void { this._elementRef.nativeElement.focus(); }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && !this.readonly) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. */\n  protected _isTextarea() {\n    return this._elementRef.nativeElement.nodeName.toLowerCase() === 'textarea';\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n        !this.autofilled;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return this.focused || !this.empty; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() { this.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TextFieldModule} from '@angular/cdk/text-field';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\n\n\n@NgModule({\n  declarations: [MatInput, MatTextareaAutosize],\n  imports: [\n    CommonModule,\n    TextFieldModule,\n    MatFormFieldModule,\n  ],\n  exports: [\n    TextFieldModule,\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher],\n})\nexport class MatInputModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel: string = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel: string = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel: string = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel: string = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel: string = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel: string = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel: string = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel: string = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel: string = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  NgZone,\n} from '@angular/core';\nimport {take} from 'rxjs/operators';\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'attr.aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** Whether to allow selection of disabled cells. */\n  @Input() allowDisabledSelection = false;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  constructor(private _elementRef: ElementRef, private _ngZone: NgZone) { }\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (!this.allowDisabledSelection && !cell.enabled) {\n      return;\n    }\n    this.selectedValueChange.emit(cell.value);\n  }\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  get _firstRowOffset(): number {\n    return this.rows && this.rows.length && this.rows[0].length ?\n        this.numCols - this.rows[0].length : 0;\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._elementRef.nativeElement.querySelector('.mat-calendar-body-active').focus();\n      });\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody;\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n    this._focusActiveCell();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n\n    const isRtl = this._isRtl();\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n              this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n          this._dateSelected(this._dateAdapter.getDate(this._activeDate));\n          this._userSelection.emit();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  private _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(\n            this._dateAdapter.getYear(this.activeDate),\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const enabled = this._shouldEnableDate(date);\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));\n    }\n  }\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterViewInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nexport class MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatCheckboxMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://www.google.com/design/spec/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewInit, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  private _required: boolean;\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change: EventEmitter<MatCheckboxChange> =\n      new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  _onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Reference to the focused state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value != this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked: boolean = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean { return this._indeterminate; }\n  set indeterminate(value: boolean) {\n    const changed = value != this._indeterminate;\n    this._indeterminate = value;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n  private _indeterminate: boolean = false;\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the checkbox changes.\n    // Since the checkbox uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n    }\n  }\n\n  private _emitChangeEvent() {\n    let event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this.ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      this._removeFocusRipple();\n      this._onTouched();\n    }\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n\n  /** Fades out the focus state ripple. */\n  private _removeFocusRipple(): void {\n    if (this._focusRipple) {\n      this._focusRipple.fadeOut();\n      this._focusRipple = null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule],\n  declarations: [MatCheckbox, MatCheckboxRequiredValidator],\n})\nexport class MatCheckboxModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nexport class MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatChipMixinBase =\n    mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\n\nconst CHIP_ATTRIBUTE_NAMES = ['mat-basic-chip'];\n\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-avatar, [matChipAvatar]',\n  host: {'class': 'mat-chip-avatar'}\n})\nexport class MatChipAvatar {}\n\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n  host: {'class': 'mat-chip-trailing-icon'}\n})\nexport class MatChipTrailingIcon {}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled', 'disableRipple'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[class.mat-chip-with-avatar]': 'avatar',\n    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[class.mat-chip-disabled]': 'disabled',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n  },\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable, CanDisableRipple, RippleTarget {\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /** Reference to the RippleRenderer for the chip. */\n  private _chipRipple: RippleRenderer;\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple;\n  }\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether the chip list is selectable */\n  chipListSelectable: boolean = true;\n\n  /** The chip avatar */\n  @ContentChild(MatChipAvatar) avatar: MatChipAvatar;\n\n  /** The chip's trailing icon. */\n  @ContentChild(MatChipTrailingIcon) trailingIcon: MatChipTrailingIcon;\n\n  /** The chip's remove toggler. */\n  @ContentChild(forwardRef(() => MatChipRemove)) removeIcon: MatChipRemove;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) {\n    this._selected = coerceBooleanProperty(value);\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: value\n    });\n  }\n  protected _selected: boolean = false;\n\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n  @Input()\n  get value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(value: any) { this._value = value; }\n  protected _value: any;\n\n  /**\n   * Whether or not the chip is selectable. When a chip is not selectable,\n   * changes to it's selected state are always ignored. By default a chip is\n   * selectable, and it becomes non-selectable if it's parent chip list is\n   * not selectable.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable && this.chipListSelectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  protected _selectable: boolean = true;\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (removed) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  protected _removable: boolean = true;\n\n  /** Emits when the chip is focused. */\n  readonly _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  readonly _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\n      new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** Emitted when a chip is to be removed. */\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** The ARIA selected applied to the chip. */\n  get ariaSelected(): string | null {\n    return this.selectable ? this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions) {\n    super(_elementRef);\n\n    this._addHostClassName();\n\n    this._chipRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._chipRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    if (globalOptions) {\n      this.rippleConfig = {\n        speedFactor: globalOptions.baseSpeedFactor,\n        animation: globalOptions.animation,\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n      };\n    }\n  }\n\n  _addHostClassName() {\n    // Add class for the different chips\n    for (const attr of CHIP_ATTRIBUTE_NAMES) {\n      if (this._elementRef.nativeElement.hasAttribute(attr) ||\n        this._elementRef.nativeElement.tagName.toLowerCase() === attr) {\n        (this._elementRef.nativeElement as HTMLElement).classList.add(attr);\n        return;\n      }\n    }\n    (this._elementRef.nativeElement as HTMLElement).classList.add('mat-standard-chip');\n  }\n\n  ngOnDestroy() {\n    this.destroyed.emit({chip: this});\n    this._chipRipple._removeTriggerEvents();\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    this._selected = true;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: true\n    });\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    this._selected = false;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: false\n    });\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    this._selected = true;\n    // Emit select event when selected changes.\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: true,\n      selected: true\n    });\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    if (!this._hasFocus) {\n      this._elementRef.nativeElement.focus();\n      this._onFocus.next({chip: this});\n    }\n    this._hasFocus = true;\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Ensures events fire properly upon click. */\n  _handleClick(event: Event) {\n    // Check disabled\n    if (this.disabled) {\n      return;\n    }\n\n    event.preventDefault();\n    event.stopPropagation();\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    this._hasFocus = false;\n    this._onBlur.next({chip: this});\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove mat-chip-trailing-icon',\n    '(click)': '_handleClick()',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {\n  }\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(): void {\n    if (this._parentChip.removable) {\n      this._parentChip.remove();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** Default options, for the chips module, that can be overridden. */\nexport interface MatChipsDefaultOptions {\n  /** The list of key codes that will trigger a chipEnd event. */\n  separatorKeyCodes: number[];\n}\n\n/** Injection token to be used to override the default options for the chips module. */\nexport const MAT_CHIPS_DEFAULT_OPTIONS =\n    new InjectionToken<MatChipsDefaultOptions>('mat-chips-default-options');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {CanUpdateErrorState, ErrorStateMatcher, mixinErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {merge, Observable, Subscription} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipInput} from './chip-input';\n\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nexport class MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatChipListMixinBase = mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for it's similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': '_tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)',\n    '[id]': '_uid',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n  ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly controlType: string = 'mat-chip-list';\n\n  /** When a chip is destroyed, we track the index so we can focus the appropriate next chip. */\n  protected _lastDestroyedIndex: number|null = null;\n\n  /** Track which chips we're listening to for focus/destruction. */\n  protected _chipSet: WeakMap<MatChip, boolean> = new WeakMap();\n\n  /** Subscription to tabbing out from the chip list. */\n  private _tabOutSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the chip list. */\n  private _changeSubscription: Subscription;\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription | null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription | null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription | null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription | null;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipInput;\n\n  /** Uid of the chip list */\n  _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The ARIA role applied to the chip list. */\n  get role(): string | null { return this.empty ? null : 'listbox'; }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n  private _multiple: boolean = false;\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith(): (o1: any, o2: any) => boolean { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  protected _value: any;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get id(): string {\n    return this._chipInput ? this._chipInput.id : this._uid;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  protected _required: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  protected _placeholder: string;\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return this.chips.some(chip => chip._hasFocus) ||\n      (this._chipInput && this._chipInput.focused);\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  protected _disabled: boolean = false;\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip list is selectable. When a chip list is not selectable,\n   * the selected states for all the chips inside the chip list are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n    if (this.chips) {\n      this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n    }\n  }\n  protected _selectable: boolean = true;\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroyed));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipListChange> =\n      new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips)\n      .withWrap()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._tabOutSubscription = this._keyManager.tabOut.subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => this._tabIndex = this._userTabIndex || 0);\n    });\n\n    // When the list changes, re-subscribe\n    this._changeSubscription = this.chips.changes.pipe(startWith(null)).subscribe(() => {\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabOutSubscription.unsubscribe();\n\n    if (this._changeSubscription) {\n      this._changeSubscription.unsubscribe();\n    }\n\n    if (this._chipRemoveSubscription) {\n      this._chipRemoveSubscription.unsubscribe();\n    }\n\n    this._dropSubscriptions();\n    this.stateChanges.complete();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipInput): void {\n    this._chipInput = inputElement;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._elementRef.nativeElement.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() { this.focus(); }\n\n  /**\n   * Focuses the the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(): void {\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput();\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput() {\n    if (this._chipInput) {\n      this._chipInput.focus();\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    const target = event.target as HTMLElement;\n\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n    } else if (target && target.classList.contains('mat-chip')) {\n      this._keyManager.onKeydown(event);\n      this.stateChanges.next();\n    }\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * Update key manager's active item when chip is deleted.\n   * If the deleted chip is the last chip in chip list, focus the new last chip.\n   * Otherwise focus the next chip in the list.\n   * Save `_lastDestroyedIndex` so we can set the correct focus.\n   */\n  protected _updateKeyManager(chip: MatChip) {\n    let chipIndex: number = this.chips.toArray().indexOf(chip);\n    if (this._isValidIndex(chipIndex)) {\n      if (chip._hasFocus) {\n        // Check whether the chip is not the last item\n        if (chipIndex < this.chips.length - 1) {\n          this._keyManager.setActiveItem(chipIndex);\n        } else if (chipIndex - 1 >= 0) {\n          this._keyManager.setActiveItem(chipIndex - 1);\n        }\n      }\n      if (this._keyManager.activeItemIndex === chipIndex) {\n        this._lastDestroyedIndex = chipIndex;\n      }\n    }\n  }\n\n  /**\n   * Checks to see if a focus chip was recently destroyed so that we can refocus the next closest\n   * one.\n   */\n  protected _updateFocusForDestroyedChips() {\n    let chipsArray = this.chips;\n\n    if (this._lastDestroyedIndex != null && chipsArray.length > 0 && this.focused) {\n      // Check whether the destroyed chip was the last item\n      const newFocusIndex = Math.min(this._lastDestroyedIndex, chipsArray.length - 1);\n      this._keyManager.setActiveItem(newFocusIndex);\n      let focusChip = this._keyManager.activeItem;\n      // Focus the chip\n      if (focusChip) {\n        focusChip.focus();\n      }\n    }\n\n    // Reset our destroyed index\n    this._lastDestroyedIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChip);\n        }\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    this._keyManager.setActiveItem(-1);\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n      this._updateKeyManager(event.chip);\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Directive, ElementRef, EventEmitter, Input, Output, Inject} from '@angular/core';\nimport {MatChipList} from './chip-list';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n    '[id]': 'id',\n  }\n})\nexport class MatChipInput {\n  /** Whether the control is focused. */\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  // TODO(tinayuangao): Support Set here\n  @Input('matChipInputSeparatorKeyCodes')\n  separatorKeyCodes: number[] = this._defaultOptions.separatorKeyCodes;\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /** The input's placeholder text. */\n  @Input() placeholder: string = '';\n\n  /** Unique id for the input. */\n  @Input() id: string = `mat-chip-list-input-${nextUniqueId++}`;\n\n  /** Whether the input is empty. */\n  get empty(): boolean { return !this._inputElement.value; }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(\n    protected _elementRef: ElementRef,\n    @Inject(MAT_CHIPS_DEFAULT_OPTIONS) private _defaultOptions: MatChipsDefaultOptions) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this.separatorKeyCodes.indexOf(event.keyCode) > -1) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  /** Focuses the input. */\n  focus(): void { this._inputElement.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChip, MatChipAvatar, MatChipRemove, MatChipTrailingIcon} from './chip';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipInput} from './chip-input';\nimport {MatChipList} from './chip-list';\n\nconst CHIP_DECLARATIONS = [\n  MatChipList,\n  MatChip,\n  MatChipInput,\n  MatChipRemove,\n  MatChipAvatar,\n  MatChipTrailingIcon,\n];\n\n@NgModule({\n  exports: CHIP_DECLARATIONS,\n  declarations: CHIP_DECLARATIONS,\n  providers: [\n    ErrorStateMatcher,\n    {\n      provide: MAT_CHIPS_DEFAULT_OPTIONS,\n      useValue: {\n        separatorKeyCodes: [ENTER]\n      } as MatChipsDefaultOptions\n    }\n  ]\n})\nexport class MatChipsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking outside to close a modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction;\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /** Whether the dialog should close when the user goes backwards/forwards in history. */\n  closeOnNavigation?: boolean = true;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by MatDialog. */\nexport const matDialogAnimations: {\n  readonly slideDialog: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  slideDialog: trigger('slideDialog', [\n    // Note: The `enter` animation doesn't transition to something like `translate3d(0, 0, 0)\n    // scale(1)`, because for some reason specifying the transform explicitly, causes IE both\n    // to blur the dialog content and decimate the animation performance. Leaving it as `none`\n    // solves both issues.\n    state('enter', style({ transform: 'none', opacity: 1 })),\n    state('void', style({ transform: 'translate3d(0, 25%, 0) scale(0.9)', opacity: 0 })),\n    state('exit', style({ transform: 'translate3d(0, 25%, 0)', opacity: 0 })),\n    transition('* => *', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n/** Default color palette for flat buttons (mat-flat-button) */\nconst DEFAULT_FLAT_BUTTON_COLOR = 'primary';\n\n/**\n * List of classes to add to MatButton instances based on host attributes to\n * style as different variants.\n */\nconst BUTTON_HOST_ATTRIBUTES = [\n  'mat-button',\n  'mat-flat-button',\n  'mat-icon-button',\n  'mat-raised-button',\n  'mat-stroked-button',\n  'mat-mini-fab',\n  'mat-fab',\n];\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nexport class MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatButtonMixinBase = mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\n             button[mat-flat-button]`,\n  exportAs: 'matButton',\n  host: {\n    '[disabled]': 'disabled || null',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n\n  /** Whether the button is round. */\n  _isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  _isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated Platform checks for SSR are no longer needed\n               * @deletion-target 7.0.0\n               */\n              // tslint:disable-next-line:no-unused-variable\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor) {\n    super(elementRef);\n\n    // For each of the variant selectors that is prevent in the button's host\n    // attributes, add the correct corresponding class.\n    for (const attr of BUTTON_HOST_ATTRIBUTES) {\n      if (this._hasHostAttributes(attr)) {\n        (elementRef.nativeElement as HTMLElement).classList.add(attr);\n      }\n    }\n\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n\n    if (this._isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    } else if (this._hasHostAttributes('mat-flat-button')) {\n      this.color = DEFAULT_FLAT_BUTTON_COLOR;\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Raised Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n\n  constructor(platform: Platform, focusMonitor: FocusMonitor, elementRef: ElementRef) {\n    super(elementRef, platform, focusMonitor);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatAnchor, MatButton} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {SelectionModel} from '@angular/cdk/collections';\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n// Boilerplate for applying mixins to MatButtonToggleGroup and MatButtonToggleGroupMultiple\n/** @docs-private */\nexport class MatButtonToggleGroupBase {}\nexport const _MatButtonToggleGroupMixinBase = mixinDisabled(MatButtonToggleGroupBase);\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\n/**\n * @deprecated Use `MatButtonToggleGroup` instead.\n * @deletion-target 7.0.0\n */\nexport class MatButtonToggleGroupMultiple {}\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  constructor(\n    /** The MatButtonToggle that emits the event. */\n    public source: MatButtonToggle,\n\n    /** The value assigned to the MatButtonToggle. */\n    public value: any) {}\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group',\n  providers: [\n    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n    {provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup},\n  ],\n  inputs: ['disabled'],\n  host: {\n    '[attr.role]': 'multiple ? \"group\" : \"radiogroup\"',\n    'class': 'mat-button-toggle-group',\n    '[class.mat-button-toggle-vertical]': 'vertical'\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup extends _MatButtonToggleGroupMixinBase implements\n  ControlValueAccessor, CanDisable, OnInit, AfterContentInit {\n\n  private _vertical = false;\n  private _multiple = false;\n  private _selectionModel: SelectionModel<MatButtonToggle>;\n\n  /**\n   * Reference to the raw value that the consumer tried to assign. The real\n   * value will exaclude any values from this one that don't correspond to a\n   * toggle. Useful for the cases where the value is assigned before the toggles\n   * have been initialized or at the same that they're being swapped out.\n   */\n  private _rawValue: any;\n\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle.name = this._name);\n    }\n  }\n  private _name = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any {\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\n\n    if (this.multiple) {\n      return selected.map(toggle => toggle.value);\n    }\n\n    return selected[0] ? selected[0].value : undefined;\n  }\n  set value(newValue: any) {\n    this._setSelectionByValue(newValue);\n    this.valueChange.emit(this.value);\n  }\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() readonly valueChange = new EventEmitter<any>();\n\n  /** Selected button toggles in the group. */\n  get selected() {\n    const selected = this._selectionModel.selected;\n    return this.multiple ? selected : (selected[0] || null);\n  }\n\n  /** Whether multiple button toggles can be selected. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Event emitted when the group's value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatButtonToggle>(this.multiple, undefined, false);\n  }\n\n  ngAfterContentInit() {\n    this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle._markForCheck());\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    const selected = this.selected;\n    const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n    const event = new MatButtonToggleChange(source!, this.value);\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  /**\n   * Syncs a button toggle's selected state with the model value.\n   * @param toggle Toggle to be synced.\n   * @param select Whether the toggle should be selected.\n   * @param isUserInput Whether the change was a result of a user interaction.\n   */\n  _syncButtonToggle(toggle: MatButtonToggle, select: boolean, isUserInput = false) {\n    // Deselect the currently-selected toggle, if we're in single-selection\n    // mode and the button being toggled isn't selected at the moment.\n    if (!this.multiple && this.selected && !toggle.checked) {\n      (this.selected as MatButtonToggle).checked = false;\n    }\n\n    if (select) {\n      this._selectionModel.select(toggle);\n    } else {\n      this._selectionModel.deselect(toggle);\n    }\n\n    // Only emit the change event for user input.\n    if (isUserInput) {\n      this._emitChangeEvent();\n    }\n\n    // Note: we emit this one no matter whether it was a user interaction, because\n    // it is used by Angular to sync up the two-way data binding.\n    this.valueChange.emit(this.value);\n  }\n\n  /** Checks whether a button toggle is selected. */\n  _isSelected(toggle: MatButtonToggle) {\n    return this._selectionModel.isSelected(toggle);\n  }\n\n  /** Determines whether a button toggle should be checked on init. */\n  _isPrechecked(toggle: MatButtonToggle) {\n    if (typeof this._rawValue === 'undefined') {\n      return false;\n    }\n\n    if (this.multiple && Array.isArray(this._rawValue)) {\n      return !!this._rawValue.find(value => toggle.value != null && value === toggle.value);\n    }\n\n    return toggle.value === this._rawValue;\n  }\n\n  /** Updates the selection state of the toggles in the group based on a value. */\n  private _setSelectionByValue(value: any|any[]) {\n    this._rawValue = value;\n\n    if (!this._buttonToggles) {\n      return;\n    }\n\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw Error('Value must be an array in multiple-selection mode.');\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n    } else {\n      this._clearSelection();\n      this._selectValue(value);\n    }\n  }\n\n  /** Clears the selected toggles. */\n  private _clearSelection() {\n    this._selectionModel.clear();\n    this._buttonToggles.forEach(toggle => toggle.checked = false);\n  }\n\n  /** Selects a value if there's a toggle that corresponds to it. */\n  private _selectValue(value: any) {\n    const correspondingOption = this._buttonToggles.find(toggle => {\n      return toggle.value != null && toggle.value === value;\n    });\n\n    if (correspondingOption) {\n      correspondingOption.checked = true;\n      this._selectionModel.select(correspondingOption);\n    }\n  }\n}\n\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nexport class MatButtonToggleBase {}\nexport const _MatButtonToggleMixinBase = mixinDisableRipple(MatButtonToggleBase);\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disableRipple'],\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    'class': 'mat-button-toggle',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatButtonToggle extends _MatButtonToggleMixinBase implements OnInit,\n  CanDisableRipple, OnDestroy {\n\n  private _isSingleSelector = false;\n  private _checked = false;\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** Unique ID for the underlying `input` element. */\n  get inputId(): string { return `${this.id}-input`; }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input() value: any;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean {\n    return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n  }\n  set checked(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._checked) {\n      this._checked = newValue;\n\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n      }\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n  }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Event emitted when the group value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _elementRef: ElementRef<HTMLElement>,\n              private _focusMonitor: FocusMonitor) {\n    super();\n\n    this.buttonToggleGroup = toggleGroup;\n  }\n\n  ngOnInit() {\n    this._isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n    this._type = this._isSingleSelector ? 'radio' : 'checkbox';\n    this.id = this.id || `mat-button-toggle-${_uniqueIdCounter++}`;\n\n    if (this._isSingleSelector) {\n      this.name = this.buttonToggleGroup.name;\n    }\n\n    if (this.buttonToggleGroup && this.buttonToggleGroup._isPrechecked(this)) {\n      this.checked = true;\n    }\n\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._inputElement.nativeElement.focus();\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native input. */\n  _onInputChange(event: Event) {\n    event.stopPropagation();\n\n    this._checked = this._isSingleSelector ? true : !this._checked;\n\n    if (this.buttonToggleGroup) {\n      this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n      this.buttonToggleGroup._onTouched();\n    }\n\n    // Emit a change event when the native input does.\n    this.change.emit(new MatButtonToggleChange(this, this.value));\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When the group value changes, the button will not be notified.\n    // Use `markForCheck` to explicit update button toggle's status.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatButtonToggle, MatButtonToggleGroup} from './button-toggle';\n\n\n@NgModule({\n  imports: [MatCommonModule, MatRippleModule],\n  exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n  declarations: [MatButtonToggleGroup, MatButtonToggle],\n})\nexport class MatButtonToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n} from '@angular/core';\n\n\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-content',\n  host: {'class': 'mat-card-content'}\n})\nexport class MatCardContent {}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n})\nexport class MatCardTitle {}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n})\nexport class MatCardSubtitle {}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-actions',\n  exportAs: 'matCardActions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n})\nexport class MatCardActions {\n  /** Position of the actions inside the card. */\n  @Input() align: 'start' | 'end' = 'start';\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n})\nexport class MatCardFooter {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-image], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n})\nexport class MatCardImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n})\nexport class MatCardSmImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-md-image], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n})\nexport class MatCardMdImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n})\nexport class MatCardLgImage {}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n})\nexport class MatCardXlImage {}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-avatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n})\nexport class MatCardAvatar {}\n\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card',\n  exportAs: 'matCard',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card'}\n})\nexport class MatCard {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n})\nexport class MatCardHeader {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n})\nexport class MatCardTitleGroup {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatCard,\n  MatCardActions,\n  MatCardAvatar,\n  MatCardContent,\n  MatCardFooter,\n  MatCardHeader,\n  MatCardImage,\n  MatCardLgImage,\n  MatCardMdImage,\n  MatCardSmImage,\n  MatCardSubtitle,\n  MatCardTitle,\n  MatCardTitleGroup,\n  MatCardXlImage,\n} from './card';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatCard,\n    MatCardHeader,\n    MatCardTitleGroup,\n    MatCardContent,\n    MatCardTitle,\n    MatCardSubtitle,\n    MatCardActions,\n    MatCardFooter,\n    MatCardSmImage,\n    MatCardMdImage,\n    MatCardLgImage,\n    MatCardImage,\n    MatCardXlImage,\n    MatCardAvatar,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n    MatCardXlImage, MatCardAvatar,\n  ],\n})\nexport class MatCardModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n} from './autocomplete-trigger';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [MatAutocomplete, MatOptionModule, MatAutocompleteTrigger, MatCommonModule],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger],\n})\nexport class MatAutocompleteModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AriaDescriber} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOCUMENT} from '@angular/common';\nimport {Directive, ElementRef, Inject, Input, NgZone, OnDestroy, Optional} from '@angular/core';\nimport {ThemePalette} from '@angular/material/core';\n\n\nlet nextId = 0;\n\nexport type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after';\nexport type MatBadgeSize = 'small' | 'medium' | 'large';\n\n/** Directive to display a text badge. */\n@Directive({\n  selector: '[matBadge]',\n  host: {\n    'class': 'mat-badge',\n    '[class.mat-badge-overlap]': 'overlap',\n    '[class.mat-badge-above]': 'isAbove()',\n    '[class.mat-badge-below]': '!isAbove()',\n    '[class.mat-badge-before]': '!isAfter()',\n    '[class.mat-badge-after]': 'isAfter()',\n    '[class.mat-badge-small]': 'size === \"small\"',\n    '[class.mat-badge-medium]': 'size === \"medium\"',\n    '[class.mat-badge-large]': 'size === \"large\"',\n    '[class.mat-badge-hidden]': 'hidden',\n  },\n})\nexport class MatBadge implements OnDestroy {\n\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n  @Input('matBadgeColor')\n  get color(): ThemePalette { return this._color; }\n  set color(value: ThemePalette) {\n    this._setColor(value);\n    this._color = value;\n  }\n  private _color: ThemePalette = 'primary';\n\n  /** Whether the badge should overlap its contents or not */\n  @Input('matBadgeOverlap')\n  get overlap(): boolean { return this._overlap; }\n  set overlap(val: boolean) {\n    this._overlap = coerceBooleanProperty(val);\n  }\n  private _overlap: boolean = true;\n\n  /**\n   * Position the badge should reside.\n   * Accepts any combination of 'above'|'below' and 'before'|'after'\n   */\n  @Input('matBadgePosition') position: MatBadgePosition = 'above after';\n\n  /** The content for the badge */\n  @Input('matBadge')\n  get content(): string { return this._content; }\n  set content(val: string) {\n    this._content = val;\n    this._updateTextContent();\n  }\n  private _content: string;\n\n  /** Message used to describe the decorated element via aria-describedby */\n  @Input('matBadgeDescription')\n  get description(): string { return this._description; }\n  set description(newDescription: string) {\n    if (newDescription !== this._description) {\n      this._updateHostAriaDescription(newDescription, this._description);\n      this._description = newDescription;\n    }\n  }\n  private _description: string;\n\n  /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n  @Input('matBadgeSize') size: MatBadgeSize = 'medium';\n\n  /** Whether the badge is hidden. */\n  @Input('matBadgeHidden')\n  get hidden(): boolean { return this._hidden; }\n  set hidden(val: boolean) {\n    this._hidden = coerceBooleanProperty(val);\n  }\n  private _hidden: boolean;\n\n  /** Unique id for the badge */\n  _id: number = nextId++;\n\n  private _badgeElement: HTMLElement;\n\n  constructor(\n      @Optional() @Inject(DOCUMENT) private _document: any,\n      private _ngZone: NgZone,\n      private _elementRef: ElementRef,\n      private _ariaDescriber: AriaDescriber) {}\n\n  /** Whether the badge is above the host or not */\n  isAbove(): boolean {\n    return this.position.indexOf('below') === -1;\n  }\n\n  /** Whether the badge is after the host or not */\n  isAfter(): boolean {\n    return this.position.indexOf('before') === -1;\n  }\n\n  ngOnDestroy() {\n    if (this.description && this._badgeElement) {\n      this._ariaDescriber.removeDescription(this._badgeElement, this.description);\n    }\n  }\n\n  /** Injects a span element into the DOM with the content. */\n  private _updateTextContent(): HTMLSpanElement {\n    if (!this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n    } else {\n      this._badgeElement.textContent = this.content;\n    }\n    return this._badgeElement;\n  }\n\n  /** Creates the badge element */\n  private _createBadgeElement(): HTMLElement {\n    const badgeElement = this._document.createElement('span');\n    const activeClass = 'mat-badge-active';\n\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n    badgeElement.classList.add('mat-badge-content');\n    badgeElement.textContent = this.content;\n\n    if (this.description) {\n      badgeElement.setAttribute('aria-label', this.description);\n    }\n\n    this._elementRef.nativeElement.appendChild(badgeElement);\n\n    // animate in after insertion\n    if (typeof requestAnimationFrame === 'function') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          badgeElement.classList.add(activeClass);\n        });\n      });\n    } else {\n      badgeElement.classList.add(activeClass);\n    }\n\n    return badgeElement;\n  }\n\n  /** Sets the aria-label property on the element */\n  private _updateHostAriaDescription(newDescription: string, oldDescription: string): void {\n    // ensure content available before setting label\n    const content = this._updateTextContent();\n\n    if (oldDescription) {\n      this._ariaDescriber.removeDescription(content, oldDescription);\n    }\n\n    if (newDescription) {\n      this._ariaDescriber.describe(content, newDescription);\n    }\n  }\n\n  /** Adds css theme class given the color to the component host */\n  private _setColor(colorPalette: ThemePalette) {\n    if (colorPalette !== this._color) {\n      if (this._color) {\n        this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\n      }\n      if (colorPalette) {\n        this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatBadge} from './badge';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatBadge],\n  declarations: [MatBadge],\n})\nexport class MatBadgeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a bottom sheet. */\nexport const MAT_BOTTOM_SHEET_DATA = new InjectionToken<any>('MatBottomSheetData');\n\n/**\n * Configuration used when opening a bottom sheet.\n */\nexport class MatBottomSheetConfig<D = any> {\n  /** The view container to place the overlay for the bottom sheet into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** Extra CSS classes to be added to the bottom sheet container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the bottom sheet. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Whether the bottom sheet has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop. */\n  backdropClass?: string;\n\n  /** Whether the user can use escape or clicking outside to close the bottom sheet. */\n  disableClose?: boolean = false;\n\n  /** Aria label to assign to the bottom sheet element. */\n  ariaLabel?: string | null = null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {merge, Observable, Subject} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n/**\n * Reference to a bottom sheet dispatched from the bottom sheet service.\n */\nexport class MatBottomSheetRef<T = any, R = any> {\n  /** Instance of the component making up the content of the bottom sheet. */\n  instance: T;\n\n  /**\n   * Instance of the component into which the bottom sheet content is projected.\n   * @docs-private\n   */\n  containerInstance: MatBottomSheetContainer;\n\n  /** Subject for notifying the user that the bottom sheet has been dismissed. */\n  private readonly _afterDismissed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the bottom sheet has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Result to be passed down to the `afterDismissed` stream. */\n  private _result: R | undefined;\n\n  constructor(containerInstance: MatBottomSheetContainer, private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n\n    // Emit when opening animation completes\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'visible'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'hidden'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._overlayRef.dispose();\n      this._afterDismissed.next(this._result);\n      this._afterDismissed.complete();\n    });\n\n    if (!containerInstance.bottomSheetConfig.disableClose) {\n      merge(\n        _overlayRef.backdropClick(),\n        _overlayRef._keydownEvents.pipe(filter(event => event.keyCode === ESCAPE))\n      ).subscribe(() => this.dismiss());\n    }\n  }\n\n  /**\n   * Dismisses the bottom sheet.\n   * @param result Data to be passed back to the bottom sheet opener.\n   */\n  dismiss(result?: R): void {\n    if (!this._afterDismissed.closed) {\n      // Transition the backdrop in parallel to the bottom sheet.\n      this.containerInstance._animationStateChanged.pipe(\n        filter(event => event.phaseName === 'start'),\n        take(1)\n      ).subscribe(() => this._overlayRef.detachBackdrop());\n\n      this._result = result;\n      this.containerInstance.exit();\n    }\n  }\n\n  /** Gets an observable that is notified when the bottom sheet is finished closing. */\n  afterDismissed(): Observable<R | undefined> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the bottom sheet has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material bottom sheet. */\nexport const matBottomSheetAnimations: {\n  readonly bottomSheetState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a bottom sheet. */\n  bottomSheetState: trigger('state', [\n    state('void, hidden', style({transform: 'translateY(100%)'})),\n    state('visible', style({transform: 'translateY(0%)'})),\n    transition('visible => void, visible => hidden',\n        animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible',\n        animate(`${AnimationDurations.EXITING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  EventEmitter,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {MatBottomSheetConfig} from './bottom-sheet-config';\nimport {matBottomSheetAnimations} from './bottom-sheet-animations';\nimport {Subscription} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\n\n// TODO(crisbeto): consolidate some logic between this, MatDialog and MatSnackBar\n\n/**\n * Internal component that wraps user-provided bottom sheet content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-bottom-sheet-container',\n  templateUrl: 'bottom-sheet-container.html',\n  styleUrls: ['bottom-sheet-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matBottomSheetAnimations.bottomSheetState],\n  host: {\n    'class': 'mat-bottom-sheet-container',\n    'tabindex': '-1',\n    'role': 'dialog',\n    '[attr.aria-label]': 'bottomSheetConfig?.ariaLabel',\n    '[@state]': '_animationState',\n    '(@state.start)': '_onAnimationStart($event)',\n    '(@state.done)': '_onAnimationDone($event)'\n  },\n})\nexport class MatBottomSheetContainer extends BasePortalOutlet implements OnDestroy {\n  private _breakpointSubscription: Subscription;\n\n  /** The portal outlet inside of this container into which the content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The state of the bottom sheet animations. */\n  _animationState: 'void' | 'visible' | 'hidden' = 'void';\n\n  /** Emits whenever the state of the animation changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** The bottom sheet configuration. */\n  bottomSheetConfig: MatBottomSheetConfig;\n\n  /** The class that traps and manages focus within the bottom sheet. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the bottom sheet was opened. */\n  private _elementFocusedBeforeOpened: HTMLElement | null = null;\n\n  /** Server-side rendering-compatible reference to the global document object. */\n  private _document: Document;\n\n  /** Whether the component has been destroyed. */\n  private _destroyed: boolean;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    breakpointObserver: BreakpointObserver,\n    @Optional() @Inject(DOCUMENT) document: any) {\n    super();\n\n    this._document = document;\n    this._breakpointSubscription = breakpointObserver\n      .observe([Breakpoints.Medium, Breakpoints.Large, Breakpoints.XLarge])\n      .subscribe(() => {\n        this._toggleClass('mat-bottom-sheet-container-medium',\n            breakpointObserver.isMatched(Breakpoints.Medium));\n        this._toggleClass('mat-bottom-sheet-container-large',\n            breakpointObserver.isMatched(Breakpoints.Large));\n        this._toggleClass('mat-bottom-sheet-container-xlarge',\n            breakpointObserver.isMatched(Breakpoints.XLarge));\n      });\n  }\n\n  /** Attach a component portal as content to this bottom sheet container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this bottom sheet container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Begin animation of bottom sheet entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the bottom sheet exiting from view. */\n  exit(): void {\n    if (!this._destroyed) {\n      this._animationState = 'hidden';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._breakpointSubscription.unsubscribe();\n    this._destroyed = true;\n  }\n\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'visible') {\n      this._trapFocus();\n    } else if (event.toState === 'hidden') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  private _toggleClass(cssClass: string, add: boolean) {\n    const classList = this._elementRef.nativeElement.classList;\n    add ? classList.add(cssClass) : classList.remove(cssClass);\n  }\n\n  private _validatePortalAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach bottom sheet content after content is already attached');\n    }\n  }\n\n  private _setPanelClass() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClass = this.bottomSheetConfig.panelClass;\n\n    if (Array.isArray(panelClass)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      panelClass.forEach(cssClass => element.classList.add(cssClass));\n    } else if (panelClass) {\n      element.classList.add(panelClass);\n    }\n  }\n\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    this._focusTrap.focusInitialElementWhenReady();\n  }\n\n  /** Restores focus to the element that was focused before the bottom sheet opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the bottom sheet was opened. */\n  private _savePreviouslyFocusedElement() {\n    this._elementFocusedBeforeOpened = this._document.activeElement as HTMLElement;\n    Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, TemplatePortal, ComponentType, PortalInjector} from '@angular/cdk/portal';\nimport {ComponentRef, TemplateRef, Injectable, Injector, Optional, SkipSelf} from '@angular/core';\nimport {MatBottomSheetConfig, MAT_BOTTOM_SHEET_DATA} from './bottom-sheet-config';\nimport {MatBottomSheetRef} from './bottom-sheet-ref';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\nimport {of as observableOf} from 'rxjs';\nimport {Directionality} from '@angular/cdk/bidi';\n\n/**\n * Service to trigger Material Design bottom sheets.\n */\n@Injectable()\nexport class MatBottomSheet {\n  private _bottomSheetRefAtThisLevel: MatBottomSheetRef<any> | null = null;\n\n  /** Reference to the currently opened bottom sheet. */\n  get _openedBottomSheetRef(): MatBottomSheetRef<any> | null {\n    const parent = this._parentBottomSheet;\n    return parent ? parent._openedBottomSheetRef : this._bottomSheetRefAtThisLevel;\n  }\n\n  set _openedBottomSheetRef(value: MatBottomSheetRef<any> | null) {\n    if (this._parentBottomSheet) {\n      this._parentBottomSheet._openedBottomSheetRef = value;\n    } else {\n      this._bottomSheetRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() @SkipSelf() private _parentBottomSheet: MatBottomSheet) {}\n\n  open<T, D = any, R = any>(component: ComponentType<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n  open<T, D = any, R = any>(template: TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R> {\n\n    const _config = _applyConfigDefaults(config);\n    const overlayRef = this._createOverlay(_config);\n    const container = this._attachContainer(overlayRef, _config);\n    const ref = new MatBottomSheetRef<T, R>(container, overlayRef);\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      container.attachTemplatePortal(new TemplatePortal<T>(componentOrTemplateRef, null!, {\n        $implicit: _config.data,\n        bottomSheetRef: ref\n      } as any));\n    } else {\n      const portal = new ComponentPortal(componentOrTemplateRef, undefined,\n            this._createInjector(_config, ref));\n      const contentRef = container.attachComponentPortal(portal);\n      ref.instance = contentRef.instance;\n    }\n\n    // When the bottom sheet is dismissed, clear the reference to it.\n    ref.afterDismissed().subscribe(() => {\n      // Clear the bottom sheet ref if it hasn't already been replaced by a newer one.\n      if (this._openedBottomSheetRef == ref) {\n        this._openedBottomSheetRef = null;\n      }\n    });\n\n    if (this._openedBottomSheetRef) {\n      // If a bottom sheet is already in view, dismiss it and enter the\n      // new bottom sheet after exit animation is complete.\n      this._openedBottomSheetRef.afterDismissed().subscribe(() => ref.containerInstance.enter());\n      this._openedBottomSheetRef.dismiss();\n    } else {\n      // If no bottom sheet is in view, enter the new bottom sheet.\n      ref.containerInstance.enter();\n    }\n\n    this._openedBottomSheetRef = ref;\n\n    return ref;\n  }\n\n  /**\n   * Dismisses the currently-visible bottom sheet.\n   */\n  dismiss(): void {\n    if (this._openedBottomSheetRef) {\n      this._openedBottomSheetRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the bottom sheet container component to the overlay.\n   */\n  private _attachContainer(overlayRef: OverlayRef,\n                           config: MatBottomSheetConfig): MatBottomSheetContainer {\n    const containerPortal = new ComponentPortal(MatBottomSheetContainer, config.viewContainerRef);\n    const containerRef: ComponentRef<MatBottomSheetContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.bottomSheetConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified bottom sheet config.\n   */\n  private _createOverlay(config: MatBottomSheetConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig({\n      direction: config.direction,\n      hasBackdrop: config.hasBackdrop,\n      maxWidth: '100%',\n      scrollStrategy: this._overlay.scrollStrategies.block(),\n      positionStrategy: this._overlay.position()\n        .global()\n        .centerHorizontally()\n        .bottom('0')\n    });\n\n    if (config.backdropClass) {\n      overlayConfig.backdropClass = config.backdropClass;\n    }\n\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a bottom sheet component.\n   * @param config Config that was used to create the bottom sheet.\n   * @param bottomSheetRef Reference to the bottom sheet.\n   */\n  private _createInjector<T>(config: MatBottomSheetConfig,\n                             bottomSheetRef: MatBottomSheetRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap();\n\n    injectionTokens.set(MatBottomSheetRef, bottomSheetRef);\n    injectionTokens.set(MAT_BOTTOM_SHEET_DATA, config.data);\n\n    if (!userInjector || !userInjector.get(Directionality, null)) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the bottom sheet config.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(config?: MatBottomSheetConfig): MatBottomSheetConfig {\n  return {...new MatBottomSheetConfig(), ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatBottomSheet} from './bottom-sheet';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PortalModule,\n  ],\n  exports: [MatBottomSheetContainer, MatCommonModule],\n  declarations: [MatBottomSheetContainer],\n  entryComponents: [MatBottomSheetContainer],\n  providers: [MatBottomSheet],\n})\nexport class MatBottomSheetModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {Subject} from 'rxjs';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n  AfterViewChecked,\n  OnDestroy,\n} from '@angular/core';\nimport {MatOptgroup} from './optgroup';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT =\n    new InjectionToken<MatOptionParentComponent>('MAT_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  styleUrls: ['option.css'],\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption implements AfterViewChecked, OnDestroy {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _id = `mat-option-${_uniqueIdCounter++}`;\n  private _mostRecentViewValue = '';\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() { return this._parent && this._parent.multiple; }\n\n  /** The unique ID of the option. */\n  get id(): string { return this._id; }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple() { return this._parent && this._parent.disableRipple; }\n\n  /** Event emitted when the option is selected or deselected. */\n  @Output() readonly onSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n\n  /** Emits when the state of the option changes and any parents have to be notified. */\n  readonly _stateChanges = new Subject<void>();\n\n  constructor(\n    private _element: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() readonly group: MatOptgroup) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    this._selected = true;\n    this._changeDetectorRef.markForCheck();\n    this._emitSelectionChangeEvent();\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    this._selected = false;\n    this._changeDetectorRef.markForCheck();\n    this._emitSelectionChangeEvent();\n  }\n\n  /** Sets focus onto this option. */\n  focus(): void {\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * `Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.`\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  ngAfterViewChecked() {\n    // Since parent components could be using the option's label to display the selected values\n    // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n    // relatively cheap, however we still limit them only to selected options in order to avoid\n    // hitting the DOM too often.\n    if (this._selected) {\n      const viewValue = this.viewValue;\n\n      if (viewValue !== this._mostRecentViewValue) {\n        this._mostRecentViewValue = viewValue;\n        this._stateChanges.next();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function _countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n  optionGroups: QueryList<MatOptgroup>): number {\n\n  if (optionGroups.length) {\n    let optionsArray = options.toArray();\n    let groups = optionGroups.toArray();\n    let groupCounter = 0;\n\n    for (let i = 0; i < optionIndex + 1; i++) {\n      if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n        groupCounter++;\n      }\n    }\n\n    return groupCounter;\n  }\n\n  return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function _getOptionScrollPosition(optionIndex: number, optionHeight: number,\n    currentScrollPosition: number, panelHeight: number): number {\n  const optionOffset = optionIndex * optionHeight;\n\n  if (optionOffset < currentScrollPosition) {\n    return optionOffset;\n  }\n\n  if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n    return Math.max(0, optionOffset - panelHeight + optionHeight);\n  }\n\n  return currentScrollPosition;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n\n@NgModule({\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup]\n})\nexport class MatOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MAT_LABEL_GLOBAL_OPTIONS =\n  new InjectionToken<LabelOptions>('mat-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n  /**\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n   * Default behavior is assumed to be `auto`.\n   */\n  float?: FloatLabelType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the MatFormField. */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /**\n   * Whether the input is currently in an autofilled state. If property is not present on the\n   * control it is assumed to be false.\n   */\n  readonly autofilled?: boolean;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The placeholder text for an `MatFormField`. */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed the the front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  FloatLabelType,\n  LabelOptions,\n  MAT_LABEL_GLOBAL_OPTIONS,\n  mixinColor,\n} from '@angular/material/core';\nimport {EMPTY, fromEvent, merge} from 'rxjs';\nimport {startWith, take} from 'rxjs/operators';\nimport {MatError} from './error';\nimport {matFormFieldAnimations} from './form-field-animations';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {Platform} from '@angular/cdk/platform';\n\n\nlet nextUniqueId = 0;\nconst floatingLabelScale = 0.75;\nconst outlineGapPadding = 5;\n\n\n// Boilerplate for applying mixins to MatFormField.\n/** @docs-private */\nexport class MatFormFieldBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n\nexport const _MatFormFieldMixinBase = mixinColor(MatFormFieldBase, 'primary');\n\n\nexport type MatFormFieldAppearance = 'legacy' | 'standard' | 'fill' | 'outline';\n\n\nexport interface MatFormFieldDefaultOptions {\n  appearance?: MatFormFieldAppearance;\n}\n\nexport const MAT_FORM_FIELD_DEFAULT_OPTIONS =\n    new InjectionToken<MatFormFieldDefaultOptions>('MAT_FORM_FIELD_DEFAULT_OPTIONS');\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here.\n  // The MatInput styles are fairly minimal so it shouldn't be a big deal for people who\n  // aren't using MatInput.\n  styleUrls: [\n    'form-field.css',\n    'form-field-fill.css',\n    'form-field-legacy.css',\n    'form-field-outline.css',\n    'form-field-standard.css',\n    '../input/input.css',\n  ],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-form-field',\n    '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n    '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n    '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n    '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-form-field-autofilled]': '_control.autofilled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n  },\n  inputs: ['color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField extends _MatFormFieldMixinBase\n    implements AfterContentInit, AfterContentChecked, AfterViewInit, CanColor {\n  private _labelOptions: LabelOptions;\n\n  /** The form-field appearance style. */\n  @Input()\n  get appearance(): MatFormFieldAppearance {\n    return this._appearance || this._defaultOptions && this._defaultOptions.appearance || 'legacy';\n  }\n  set appearance(value: MatFormFieldAppearance) {\n    this._appearance = value;\n  }\n  _appearance: MatFormFieldAppearance;\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker(): boolean { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: boolean) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat(): boolean {\n    return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat(): boolean { return this.floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel(): string { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  /**\n   * Whether the label should always float, never float or float as the user types.\n   *\n   * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n   * way to make the floating label emulate the behavior of a standard input placeholder. However\n   * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n   * appearances the `never` option has been disabled in favor of just using the placeholder.\n   */\n  @Input()\n  get floatLabel(): FloatLabelType {\n    return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n  }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  _outlineGapWidth = 0;\n\n  _outlineGapStart = 0;\n\n  /**\n   * @deprecated\n   * @deletion-target 7.0.0\n   */\n  @ViewChild('underline') underlineRef: ElementRef;\n\n  @ViewChild('connectionContainer') _connectionContainerRef: ElementRef;\n  @ViewChild('inputContainer') _inputContainerRef: ElementRef;\n  @ViewChild('label') private _label: ElementRef;\n  @ContentChild(MatFormFieldControl) _control: MatFormFieldControl<any>;\n  @ContentChild(MatPlaceholder) _placeholderChild: MatPlaceholder;\n  @ContentChild(MatLabel) _labelChild: MatLabel;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions,\n      @Optional() private _dir: Directionality,\n      @Optional() @Inject(MAT_FORM_FIELD_DEFAULT_OPTIONS) private _defaultOptions:\n          MatFormFieldDefaultOptions,\n      // @deletion-target 7.0.0 _platform to be made required.\n      private _platform?: Platform) {\n    super(_elementRef);\n\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n  }\n\n  /**\n   * Gets an ElementRef for the element that a overlay attached to the form-field should be\n   * positioned relative to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._connectionContainerRef || this._elementRef;\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n    if (this._control.controlType) {\n      this._elementRef.nativeElement.classList\n          .add(`mat-form-field-type-${this._control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    this._control.stateChanges.pipe(startWith(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Run change detection if the value, prefix, or suffix changes.\n    const valueChanges = this._control.ngControl && this._control.ngControl.valueChanges || EMPTY;\n    merge(valueChanges, this._prefixChildren.changes, this._suffixChildren.changes)\n        .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    Promise.resolve().then(() => {\n      this.updateOutlineGap();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: string): boolean {\n    let ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && (ngControl as any)[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control && this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this.appearance === 'legacy' && !this._hasLabel() ||\n        this._hasLabel() && !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      this._showAlwaysAnimate = true;\n      this.floatLabel = 'always';\n\n      fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n        this._showAlwaysAnimate = false;\n      });\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align === 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align === 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        let startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        let endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n\n  /**\n   * Updates the width and position of the gap in the outline. Only relevant for the outline\n   * appearance.\n   */\n  updateOutlineGap() {\n    if (this.appearance === 'outline' && this._label && this._label.nativeElement.children.length) {\n      if (this._platform && !this._platform.isBrowser) {\n        // getBoundingClientRect isn't available on the server.\n        return;\n      }\n\n      const containerStart = this._getStartEnd(\n          this._connectionContainerRef.nativeElement.getBoundingClientRect());\n      const labelStart = this._getStartEnd(\n          this._label.nativeElement.children[0].getBoundingClientRect());\n      let labelWidth = 0;\n      for (const child of this._label.nativeElement.children) {\n        labelWidth += child.offsetWidth;\n      }\n      this._outlineGapStart = labelStart - containerStart - outlineGapPadding;\n      this._outlineGapWidth = labelWidth * floatingLabelScale + outlineGapPadding * 2;\n    } else {\n      this._outlineGapStart = 0;\n      this._outlineGapWidth = 0;\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Gets the start end of the rect considering the current directionality. */\n  private _getStartEnd(rect: ClientRect): number {\n    return this._dir && this._dir.value === 'rtl' ? rect.right : rect.left;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n  imports: [CommonModule],\n  exports: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n})\nexport class MatFormFieldModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  ElementRef,\n  Input,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n  EventEmitter,\n  Output,\n  InjectionToken,\n  Inject,\n} from '@angular/core';\nimport {\n  MatOption,\n  MatOptgroup,\n  MAT_OPTION_PARENT_COMPONENT,\n  mixinDisableRipple,\n  CanDisableRipple,\n} from '@angular/material/core';\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected. */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nexport class MatAutocompleteBase {}\nexport const _MatAutocompleteMixinBase = mixinDisableRipple(MatAutocompleteBase);\n\n/** Default `mat-autocomplete` options that can be overridden. */\nexport interface MatAutocompleteDefaultOptions {\n  /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n  autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nexport const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<MatAutocompleteDefaultOptions>('mat-autocomplete-default-options', {\n      providedIn: 'root',\n      factory: () => ({autoActiveFirstOption: false}),\n    });\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel: boolean = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean { return this._isOpen && this.showPanel; }\n  _isOpen: boolean = false;\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /**\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n   */\n  @Input()\n  get autoActiveFirstOption(): boolean { return this._autoActiveFirstOption; }\n  set autoActiveFirstOption(value: boolean) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  private _autoActiveFirstOption: boolean;\n\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /** Event that is emitted when the autocomplete panel is opened. */\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event that is emitted when the autocomplete panel is closed. */\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(value: string) {\n    if (value && value.length) {\n      value.split(' ').forEach(className => this._classList[className.trim()] = true);\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef,\n    @Inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS) defaults: MatAutocompleteDefaultOptions) {\n    super();\n\n    this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibility state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._classList['mat-autocomplete-visible'] = this.showPanel;\n    this._classList['mat-autocomplete-hidden'] = !this.showPanel;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n}\n\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  /** Whether the component is disabled. */\n  disabled: boolean;\n}\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): Constructor<CanDisable> & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled() { return this._disabled; }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  /** Theme color palette for the component. */\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values. */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(base: T,\n    defaultColor?: ThemePalette): Constructor<CanColor> & T {\n  return class extends base {\n    private _color: ThemePalette;\n\n    get color(): ThemePalette { return this._color; }\n    set color(value: ThemePalette) {\n      const colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  /** Whether ripples are disabled. */\n  disableRipple: boolean;\n}\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T)\n    : Constructor<CanDisableRipple> & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n/** @docs-private */\nexport interface HasTabIndex {\n  /** Tabindex of the component. */\n  tabIndex: number;\n}\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : Constructor<HasTabIndex> & T {\n  return class extends base {\n    private _tabIndex: number = defaultTabIndex;\n\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs';\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  updateErrorState();\n  readonly stateChanges: Subject<void>;\n  errorState: boolean;\n  errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n  ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n: Constructor<CanUpdateErrorState> & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping\n     * `MatFormField` needs to run change detection.\n     */\n    readonly stateChanges = new Subject<void>();\n\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable, Subscriber} from 'rxjs';\nimport {Constructor} from './constructor';\n\n\n/**\n * Mixin that adds an initialized property to a directive which, when subscribed to, will emit a\n * value once markInitialized has been called, which should be done during the ngOnInit function.\n * If the subscription is made after it has already been marked as initialized, then it will trigger\n * an emit immediately.\n * @docs-private\n */\nexport interface HasInitialized {\n  /** Stream that emits once during the directive/component's ngOnInit. */\n  initialized: Observable<void>;\n\n  /**\n   * Sets the state as initialized and must be called during ngOnInit to notify subscribers that\n   * the directive has been initialized.\n   * @docs-private\n   */\n  _markInitialized: () => void;\n}\n\n/** Mixin to augment a directive with an initialized property that will emits when ngOnInit ends. */\nexport function mixinInitialized<T extends Constructor<{}>>(base: T):\n    Constructor<HasInitialized> & T {\n  return class extends base {\n    /** Whether this directive has been marked as initialized. */\n    _isInitialized = false;\n\n    /**\n     * List of subscribers that subscribed before the directive was initialized. Should be notified\n     * during _markInitialized. Set to null after pending subscribers are notified, and should\n     * not expect to be populated after.\n     */\n    _pendingSubscribers: Subscriber<void>[] | null = [];\n\n    /**\n     * Observable stream that emits when the directive initializes. If already initialized, the\n     * subscriber is stored to be notified once _markInitialized is called.\n     */\n    initialized = new Observable<void>(subscriber => {\n      // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify\n      // when _markInitialized is called.\n      if (this._isInitialized) {\n        this._notifySubscriber(subscriber);\n      } else {\n        this._pendingSubscribers!.push(subscriber);\n      }\n    });\n\n    constructor(...args: any[]) { super(...args); }\n\n    /**\n     * Marks the state as initialized and notifies pending subscribers. Should be called at the end\n     * of ngOnInit.\n     * @docs-private\n     */\n    _markInitialized(): void {\n      if (this._isInitialized) {\n        throw Error('This directive has already been marked as initialized and ' +\n            'should not be called twice.');\n      }\n\n      this._isInitialized = true;\n\n      this._pendingSubscribers!.forEach(this._notifySubscriber);\n      this._pendingSubscribers = null;\n    }\n\n    /** Emits and completes the subscriber stream (should only emit once). */\n    _notifySubscriber(subscriber: Subscriber<void>): void {\n      subscriber.next();\n      subscriber.complete();\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n  private readonly _clampDate: boolean;\n\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   *\n   * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\n   * getting the string representation of a Date object from it's utc representation. We're keeping\n   * it here for sometime, just for precaution, in case we decide to revert some of these changes\n   * though.\n   */\n  useUtcForDisplay: boolean = true;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string, platform: Platform) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    this.useUtcForDisplay = !platform.TRIDENT;\n    this._clampDate = platform.TRIDENT || platform.EDGE;\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {month: style, timeZone: 'utc'});\n      return range(12, i =>\n          this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric', timeZone: 'utc'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {weekday: style, timeZone: 'utc'});\n      return range(7, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric', timeZone: 'utc'});\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    if (SUPPORTS_INTL_API) {\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n        date = this.clone(date);\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n      }\n\n      displayFormat = {...displayFormat, timeZone: 'utc'};\n\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    const result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n\n  /**\n   * When converting Date object to string, javascript built-in functions may return wrong\n   * results because it applies its internal DST rules. The DST rules around the world change\n   * very frequently, and the current valid rule is not always valid in previous years though.\n   * We work around this problem building a new Date object which has its internal UTC\n   * representation with the local date and time.\n   * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\n   *    timeZone set to 'utc' to work fine.\n   * @param date Date from which we want to get the string representation according to dtf\n   * @returns A Date object with its UTC representation based on the passed in date info\n   */\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\n    const d = new Date(Date.UTC(\n        date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n        date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n    return dtf.format(d);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, supportsPassiveEventListeners} from '@angular/cdk/platform';\nimport {RippleRef, RippleState} from './ripple-ref';\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  persistent?: boolean;\n  animation?: RippleAnimationConfig;\n  terminateOnPointerUp?: boolean;\n  /**\n   * @deprecated Use the `animation` property instead.\n   * @deletion-target 7.0.0\n   */\n  speedFactor?: number;\n};\n\n/**\n * Interface that describes the configuration for the animation of a ripple.\n * There are two animation phases with different durations for the ripples.\n */\nexport interface RippleAnimationConfig {\n  /** Duration in milliseconds for the enter animation (expansion from point of contact). */\n  enterDuration?: number;\n  /** Duration in milliseconds for the exit animation (fade-out). */\n  exitDuration?: number;\n}\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nexport const defaultRippleAnimationConfig = {\n  enterDuration: 450,\n  exitDuration: 400\n};\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst ignoreMouseEventsTimeout = 800;\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer {\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /** Events to be registered on the trigger element. */\n  private _triggerEvents = new Map<string, any>();\n\n  /** Set of currently active ripple references. */\n  private _activeRipples = new Set<RippleRef>();\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /** Options that apply to all the event listeners that are bound by the renderer. */\n  private _eventOptions = supportsPassiveEventListeners() ? ({passive: true} as any) : false;\n\n  /**\n   * Cached dimensions of the ripple container. Set when the first\n   * ripple is shown and cleared once no more ripples are visible.\n   */\n  private _containerRect: ClientRect | null;\n\n  constructor(private _target: RippleTarget,\n              private _ngZone: NgZone,\n              elementRef: ElementRef,\n              platform: Platform) {\n\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents.set('mousedown', this.onMousedown);\n      this._triggerEvents.set('mouseup', this.onPointerUp);\n      this._triggerEvents.set('mouseleave', this.onPointerUp);\n\n      this._triggerEvents.set('touchstart', this.onTouchStart);\n      this._triggerEvents.set('touchend', this.onPointerUp);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = this._containerRect =\n                          this._containerRect || this._containerElement.getBoundingClientRect();\n    const animationConfig = {...defaultRippleAnimationConfig, ...config.animation};\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n    const duration = animationConfig.enterDuration / (config.speedFactor || 1);\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.VISIBLE;\n\n      if (!config.persistent && !this._isPointerDown) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    const wasActive = this._activeRipples.delete(rippleRef);\n\n    // Clear out the cached bounding rect if we have no more ripples.\n    if (!this._activeRipples.size) {\n      this._containerRect = null;\n    }\n\n    // For ripples that are not active anymore, don't re-un the fade-out animation.\n    if (!wasActive) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n    const animationConfig = {...defaultRippleAnimationConfig, ...rippleRef.config.animation};\n\n    rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n    rippleEl.style.opacity = '0';\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode!.removeChild(rippleEl);\n    }, animationConfig.exitDuration);\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(element: HTMLElement) {\n    if (!element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n\n    this._ngZone.runOutsideAngular(() => {\n      this._triggerEvents.forEach((fn, type) =>\n          element.addEventListener(type, fn, this._eventOptions));\n    });\n\n    this._triggerElement = element;\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private onMousedown = (event: MouseEvent) => {\n    const isSyntheticEvent = this._lastTouchStartEvent &&\n        Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n\n    if (!this._target.rippleDisabled && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private onTouchStart = (event: TouchEvent) => {\n    if (!this._target.rippleDisabled) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      this.fadeInRipple(\n          event.touches[0].clientX, event.touches[0].clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private onPointerUp = () => {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      // By default, only ripples that are completely visible will fade out on pointer release.\n      // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\n      const isVisible = ripple.state === RippleState.VISIBLE ||\n        ripple.config.terminateOnPointerUp && ripple.state === RippleState.FADING_IN;\n\n      if (!ripple.config.persistent && isVisible) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n  private runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => {\n        this._triggerElement!.removeEventListener(type, fn, this._eventOptions);\n      });\n    }\n  }\n}\n\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Converts values into strings. Falsy values become empty strings.\n * @docs-private\n */\nexport function coerceToString(value: string | number): string {\n  return `${value || ''}`;\n}\n\n/**\n * Converts a value that might be a string into a number.\n * @docs-private\n */\nexport function coerceToNumber(value: string | number): number {\n  return typeof value === 'string' ? parseInt(value, 10) : value;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`mat-menu-trigger: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`x-position value must be either 'before' or after'.\n      Example: <mat-menu x-position=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`y-position value must be either 'above' or below'.\n      Example: <mat-menu y-position=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {BidiModule} from '@angular/cdk/bidi';\n\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks', {\n  providedIn: 'root',\n  factory: () => true,\n});\n\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  /** Whether we've already checked for HammerJs availability. */\n  private _hasCheckedHammer = false;\n\n  /** Reference to the global `document` object. */\n  private _document = typeof document === 'object' && document ? document : null;\n\n  /** Reference to the global 'window' object. */\n  private _window = typeof window === 'object' && window ? window : null;\n\n  constructor(@Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecksEnabled: boolean) {\n    if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n      this._checkDoctypeIsDefined();\n      this._checkThemeIsPresent();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n\n  /** Whether any sanity checks are enabled */\n  private _areChecksEnabled(): boolean {\n    return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n  }\n\n  /** Whether the code is running in tests. */\n  private _isTestEnv() {\n    return this._window && (this._window['__karma__'] || this._window['jasmine']);\n  }\n\n  private _checkDoctypeIsDefined(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n\n  private _checkThemeIsPresent(): void {\n    if (this._document && typeof getComputedStyle === 'function') {\n      const testElement = this._document.createElement('div');\n\n      testElement.classList.add('mat-theme-loaded-marker');\n      this._document.body.appendChild(testElement);\n\n      const computedStyle = getComputedStyle(testElement);\n\n      // In some situations, the computed style of the test element can be null. For example in\n      // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n      // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n      if (computedStyle && computedStyle.display !== 'none') {\n        console.warn(\n          'Could not find Angular Material core theme. Most Material ' +\n          'components may not work as expected. For more info refer ' +\n          'to the theming guide: https://material.angular.io/guide/theming'\n        );\n      }\n\n      this._document.body.removeChild(testElement);\n    }\n  }\n\n  /** Checks whether HammerJS is available. */\n  _checkHammerIsAvailable(): void {\n    if (this._hasCheckedHammer || !this._window) {\n      return;\n    }\n\n    if (this._areChecksEnabled() && !this._window['Hammer']) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material components may not work correctly.');\n    }\n    this._hasCheckedHammer = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {inject, InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE', {\n  providedIn: 'root',\n  factory: () => inject(LOCALE_ID)\n});\n\n/**\n * No longer needed since MAT_DATE_LOCALE has been changed to a scoped injectable.\n * If you are importing and providing this in your code you can simply remove it.\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges = new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {DateAdapter} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n  imports: [PlatformModule],\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n  ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({providedIn: 'root'})\nexport class ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {\n  HammerStatic,\n  HammerInstance,\n  Recognizer,\n  RecognizerStatic,\n  HammerOptions,\n} from './gesture-annotations';\n\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\n\n/** Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class GestureConfig extends HammerGestureConfig {\n  private _hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\n\n  /** List of new event names to add to the gesture support list */\n  events: string[] = this._hammer ? [\n    'longpress',\n    'slide',\n    'slidestart',\n    'slideend',\n    'slideright',\n    'slideleft'\n  ] : [];\n\n  constructor(\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\n    @Optional() commonModule?: MatCommonModule) {\n    super();\n    if (commonModule) {\n      commonModule._checkHammerIsAvailable();\n    }\n  }\n\n  /**\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://www.google.com/design/spec/patterns/gestures.html#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * @param element Element to which to assign the new HammerJS gestures.\n   * @returns Newly-created HammerJS instance.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const mc = new this._hammer(element, this._hammerOptions || undefined);\n\n    // Default Hammer Recognizers.\n    const pan = new this._hammer.Pan();\n    const swipe = new this._hammer.Swipe();\n    const press = new this._hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return mc as HammerInstance;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  NgModule,\n  Directive,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport class MatLineSetter {\n  constructor(private _lines: QueryList<MatLine>, private _element: ElementRef) {\n    this._setLineClass(this._lines.length);\n\n    this._lines.changes.subscribe(() => {\n      this._setLineClass(this._lines.length);\n    });\n  }\n\n  private _setLineClass(count: number): void {\n    this._resetClasses();\n    if (count === 2 || count === 3) {\n      this._setClass(`mat-${count}-line`, true);\n    } else if (count > 3) {\n      this._setClass(`mat-multi-line`, true);\n    }\n  }\n\n  private _resetClasses(): void {\n    this._setClass('mat-2-line', false);\n    this._setClass('mat-3-line', false);\n    this._setClass('mat-multi-line', false);\n  }\n\n  private _setClass(className: string, isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add(className);\n    } else {\n      this._element.nativeElement.classList.remove(className);\n    }\n  }\n\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\n\n/** Possible states for a ripple element. */\nexport enum RippleState {\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n\n  /** Current state of the ripple reference. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: RippleRenderer,\n    public element: HTMLElement,\n    public config: RippleConfig) {\n  }\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {RippleRef} from './ripple-ref';\nimport {RippleAnimationConfig, RippleConfig, RippleRenderer, RippleTarget} from './ripple-renderer';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * Configuration for the animation duration of the ripples.\n   * There are two phases with different durations for the ripples.\n   */\n  animation?: RippleAnimationConfig;\n\n  /**\n   * If set, the default duration of the fade-in animation is divided by this value. For example,\n   * setting it to 0.5 will cause the ripple fade-in animation to take twice as long.\n   * A changed speedFactor will not affect the fade-out duration of the ripples.\n   * @deprecated Use the `animation` global option instead.\n   * @deletion-target 7.0.0\n   */\n  baseSpeedFactor?: number;\n\n  /**\n   * Whether ripples should start fading out immediately after the mouse our touch is released. By\n   * default, ripples will wait for the enter animation to complete and for mouse or touch release.\n   */\n  terminateOnPointerUp?: boolean;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * If set, the normal duration of ripple animations is divided by this value. For example,\n   * setting it to 0.5 will cause the animations to take twice as long.\n   * A changed speedFactor will not modify the fade-out duration of the ripples.\n   * @deprecated Use the [matRippleAnimation] binding instead.\n   * @deletion-target 7.0.0\n   */\n  @Input('matRippleSpeedFactor') speedFactor: number = 1;\n\n  /**\n   * Configuration for the ripple animation. Allows modifying the enter and exit animation\n   * duration of the ripples.\n   */\n  @Input('matRippleAnimation') animation: RippleAnimationConfig;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() { return this._trigger || this._elementRef.nativeElement; }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** Whether ripple directive is initialized and the input bindings are set. */\n  private _isInitialized: boolean = false;\n\n  constructor(private _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions) {\n\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /** Ripple configuration from the directive's input values. */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      radius: this.radius,\n      color: this.color,\n      animation: {...this._globalOptions.animation, ...this.animation},\n      terminateOnPointerUp: this._globalOptions.terminateOnPointerUp,\n      speedFactor: this.speedFactor * (this._globalOptions.baseSpeedFactor || 1),\n    };\n  }\n\n  /** Whether ripples on pointer-down are disabled or not. */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n\n  /**\n   * Launches a manual ripple using the specified ripple configuration.\n   * @param config Configuration for the manual ripple.\n   */\n  launch(config: RippleConfig): RippleRef;\n\n  /**\n   * Launches a manual ripple at the specified coordinates within the element.\n   * @param x Coordinate within the element, along the X axis at which to fade-in the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to fade-in the ripple.\n   * @param config Optional ripple configuration for the manual ripple.\n   */\n  launch(x: number, y: number, config?: RippleConfig): RippleRef;\n\n  /** Launches a manual ripple at the specified coordinated or just by the ripple config. */\n  launch(configOrX: number | RippleConfig, y: number = 0, config?: RippleConfig): RippleRef {\n    if (typeof configOrX === 'number') {\n      return this._rippleRenderer.fadeInRipple(configOrX, y, {...this.rippleConfig, ...config});\n    } else {\n      return this._rippleRenderer.fadeInRipple(0, 0, {...this.rippleConfig, ...configOrX});\n    }\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\n\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n})\nexport class MatPseudoCheckboxModule { }\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\nimport {mixinDisabled, CanDisable} from '../common-behaviors/disabled';\n\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nexport class MatOptgroupBase { }\nexport const _MatOptgroupMixinBase = mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  styleUrls: ['optgroup.css'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n})\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n"],"names":["[class.mat-tab-group-inverted-header]","MatTabGroup","propDecorators","_tabHeader","type","ViewChild","args","dynamicHeight","Input","selectedIndex","headerPosition","backgroundColor","selectedIndexChange","Output","focusChange","animationDone","selectedTabChange","MatTabNavBase","_elementRef","this","_MatTabNavMixinBase","mixinColor","MatTabNav","elementRef","_dir","_ngZone","_changeDetectorRef","_viewportRuler","_this","_super","call","_onDestroy","Subject","_disableRipple","tslib_1.__extends","Object","defineProperty","prototype","_backgroundColor","value","nativeElement","classList","remove","add","coerceBooleanProperty","_setLinkDisableRipple","updateActiveLink","element","_activeLinkChanged","markForCheck","ngAfterContentInit","runOutsideAngular","dirChange","change","observableOf","merge","pipe","takeUntil","subscribe","_alignInkBar","ngAfterContentChecked","activeTab","_tabLinks","find","tab","active","_activeLinkElement","ngOnDestroy","next","complete","_inkBar","show","alignToElement","hide","forEach","link","disableRipple","Component","selector","exportAs","inputs","template","styles","host","class","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","NgZone","ChangeDetectorRef","ViewportRuler","MatTabLinkBase","_MatTabLinkMixinBase","mixinTabIndex","mixinDisableRipple","mixinDisabled","_tabNavBar","_tabLinkRipple","setupTriggerEvents","tabIndex","parseInt","globalOptions","rippleConfig","terminateOnPointerUp","speedFactor","baseSpeedFactor","animation","get","_isActive","enumerable","configurable","event","preventDefault","MatTabLink","decorators","Directive","[attr.aria-disabled]","[attr.tabIndex]","[class.mat-tab-disabled]","[class.mat-tab-label-active]","(click)","Platform","undefined","Optional","Inject","MAT_RIPPLE_GLOBAL_OPTIONS","Attribute","NgModule","imports","CommonModule","MatCommonModule","PortalModule","MatRippleModule","ObserversModule","exports","MatTabLabel","MatTab","MatTabContent","declarations","MatInkBar","MatTabLabelWrapper","MatTabBody","MatTabBodyPortal","MatTabHeader","MatTabsModule","MatToolbarBase","_MatToolbarMixinBase","MatToolbarRow","MatToolbar","_platform","document","_document","ngAfterViewInit","isDevMode","isBrowser","_checkToolbarMixedModes","_toolbarRows","changes","length","slice","childNodes","filter","node","contains","nodeType","COMMENT_NODE","some","textContent","trim","throwToolbarMixedModesError","[class.mat-toolbar-multiple-rows]","[class.mat-toolbar-single-row]","DOCUMENT","MatToolbarModule","MatTreeNodeOutlet","viewContainer","ViewContainerRef","_MatTreeNodeMixinBase","CdkTreeNode","_MatNestedTreeNodeMixinBase","CdkNestedTreeNode","MatTreeNode","_tree","role","Number","[attr.aria-expanded]","[attr.aria-level]","[attr.role]","providers","provide","useExisting","ElementRef","CdkTree","MatTreeNodeDef","CdkTreeNodeDef","data","MatNestedTreeNode","_differs","IterableDiffers","nodeOutlet","ContentChildren","MatTreeNodePadding","CdkTreeNodePadding","level","indent","MatTree","recursive","MatTreeNodeToggle","CdkTreeNodeToggle","MAT_TREE_DIRECTIVES","CdkTreeModule","MatTreeModule","MatTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","_flattenNode","resultNodes","parentMap","flatNode","push","take","children","child","index","childParentMap","flattenNodes","structuredData","expandFlattenedNodes","nodes","treeControl","results","currentExpand","expand","i","isExpanded","MatTreeFlatDataSource","treeFlattener","initialData","_flattenedData","BehaviorSubject","_expandedData","_data","dataNodes","connect","collectionViewer","viewChange","expansionModel","apply","map","disconnect","DataSource","MatTreeNestedDataSource","VERSION","Version","SELECT_PANEL_PADDING_X","animations","matStepperAnimations","verticalStepTransition","MatStepper","MatVerticalStepper","ctorParameters","Directionality","MatStepperNext","[type]","CdkStepper","CdkStepperNext","MatStepperPrevious","CdkStepperPrevious","MatButtonModule","CdkStepperModule","MatIconModule","MatHorizontalStepper","MatStep","MatStepLabel","MatStepHeader","MatStepperIcon","MatStepperIntl","ErrorStateMatcher","MatStepperModule","MatTable","CDK_TABLE_TEMPLATE","MatCellDef","CdkCellDef","MatHeaderCellDef","CdkHeaderCellDef","MatColumnDef","CdkColumnDef","name","MatHeaderCell","columnDef","cssClassFriendlyName","CdkHeaderCell","MatCell","CdkCell","MatHeaderRowDef","CdkHeaderRowDef","MatRowDef","CdkRowDef","MatHeaderRow","CDK_ROW_TEMPLATE","arguments","MatRow","CdkRow","EXPORTED_DECLARATIONS","CdkTableModule","MatTableModule","MatTableDataSource","_renderData","_filter","sortingDataAccessor","sortHeaderId","_isNumberValue","sortData","sort","direction","a","b","valueA","valueB","comparatorResult","filterPredicate","accumulator","currentTerm","key","dataStr","keys","reduce","toLowerCase","transformedFilter","indexOf","_updateChangeSubscription","_sort","_paginator","paginator","sortChange","empty","pageChange","page","_renderChangesSubscription","unsubscribe","dataStream","filteredData","combineLatest","_a","_filterData","orderedData","startWith","_orderData","_pageData","obj","_updatePaginator","startIndex","pageIndex","pageSize","splice","filteredDataLength","Promise","resolve","then","lastPageIndex","Math","ceil","min","_MAT_INK_BAR_POSITIONER","InjectionToken","providedIn","factory","_matInkBarPositioner","left","offsetLeft","width","offsetWidth","_inkBarPositioner","requestAnimationFrame","_setStyles","style","visibility","positions","inkBar","templateRef","viewContainerRef","TemplateRef","CdkPortal","MatTabBase","_MatTabMixinBase","_viewContainerRef","textLabel","_contentPortal","_labelChange","_disableChange","position","origin","isActive","ngOnChanges","hasOwnProperty","ngOnInit","TemplatePortal","_explicitContent","_implicitContent","matTabsAnimations","translateTab","trigger","state","transform","transition","animate","componentFactoryResolver","_host","_centeringSub","Subscription","EMPTY","_leavingSub","_beforeCentering","_isCenterPosition","_position","isCentering","hasAttached","attach","_content","_afterLeavingCenter","detach","ComponentFactoryResolver","forwardRef","CdkPortalOutlet","_onCentering","EventEmitter","_onCentered","_getLayoutDirection","dir","_origin","_onTranslateTabStarted","e","toState","emit","clientHeight","_onTranslateTabComplete","fromState","_portalHost","PortalHostDirective","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","focus","getOffsetLeft","getOffsetWidth","MatTabHeaderBase","_MatTabHeaderMixinBase","_focusIndex","_scrollDistance","_selectedIndexChanged","_realignInkBar","_showPaginationControls","_disableScrollAfter","_disableScrollBefore","_selectedIndex","selectFocusedIndex","indexFocused","coerceNumberProperty","_tabLabelCount","_labelWrappers","_updatePagination","_scrollToLabel","_checkScrollingControls","_alignInkBarToSelectedTab","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","keyCode","RIGHT_ARROW","_focusNextTab","LEFT_ARROW","_focusPreviousTab","HOME","_focusFirstTab","END","_focusLastTab","ENTER","SPACE","focusIndex","resize","realign","_onContentChanges","_checkPaginationEnabled","_isValidIndex","_setTabFocus","toArray","disabled","containerEl","_tabListContainer","scrollLeft","scrollWidth","_moveFocus","offset","tabs","scrollDistance","translateX","_tabList","v","max","_getMaxScrollDistance","_scrollHeader","scrollDir","viewLength","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","beforeVisiblePos","afterVisiblePos","isEnabled","selectedLabelWrapper","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","nextId","MatTabChangeEvent","MatTabGroupBase","_MatTabGroupMixinBase","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","_tabLabelSubscription","_dynamicHeight","_groupId","indexToSelect","_tabs","tabChangeEvent","_createChangeEvent","_subscribeToTabLabels","realignInkBar","_focusChanged","concat","_getTabLabelId","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","height","offsetHeight","_removeTabBodyWrapperHeight","_handleClick","tabHeader","idx","_getTabIndex","[class.mat-tab-group-dynamic-height]","_afterDismissed","asObservable","MatSnackBarRef","afterOpened","containerInstance","_onEnter","onAction","_onAction","MAT_SNACK_BAR_DATA","MatSnackBarConfig","politeness","announcementMessage","duration","horizontalPosition","verticalPosition","matSnackBarAnimations","contentFade","opacity","AnimationDurations","COMPLEX","AnimationCurves","STANDARD_CURVE","snackBarState","EXITING","ACCELERATION_CURVE","ENTERING","DECELERATION_CURVE","SimpleSnackBar","snackBarRef","action","dismissWithAction","[@contentFade]","MatSnackBarContainer","_destroyed","_onExit","_animationState","attachComponentPortal","portal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","attachTemplatePortal","onAnimationEnd","startsWith","_completeExit","onEnter_1","run","enter","snackBarConfig","detectChanges","exit","onMicrotaskEmpty","panelClasses","panelClass","Array","isArray","cssClass","Error","[@state]","(@state.done)","MAT_SNACK_BAR_DEFAULT_OPTIONS","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","openFromComponent","component","config","_attach","openFromTemplate","open","message","_config","tslib_1.__assign","dismiss","_attachSnackBarContainer","overlayRef","containerPortal","ComponentPortal","containerRef","instance","content","userConfig","_createOverlay","container","$implicit","injector","_createInjector","contentRef","observe","Breakpoints","Handset","detachments","matches","overlayElement","_animateSnackBar","afterDismissed","_dismissAfter","announce","overlayConfig","OverlayConfig","positionStrategy","global","isRtl","isLeft","isRight","right","centerHorizontally","top","bottom","create","userInjector","injectionTokens","WeakMap","set","PortalInjector","Injectable","Overlay","LiveAnnouncer","Injector","BreakpointObserver","SkipSelf","OverlayModule","entryComponents","MatSnackBarModule","MatSortBase","_MatSortMixinBase","sortables","Map","_stateChanges","start","_direction","MatSort","getSortInvalidDirectionError","_disableClear","register","sortable","id","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","deregister","delete","getNextSortDirection","disableClear","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","SORT_ANIMATION_TRANSITION","matSortAnimations","indicator","leftPointer","rightPointer","arrowOpacity","arrowPosition","keyframes","allowChildren","query","animateChild","optional","sortButtonLabel","MatSortHeaderIntl","MAT_SORT_HEADER_INTL_PROVIDER","deps","useFactory","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","MatSortHeaderBase","_MatSortHeaderMixinBase","MatSortHeader","_intl","changeDetectorRef","_cdkColumnDef","_showIndicatorHint","_arrowDirection","_disableViewStateAnimation","getSortHeaderNotContainedWithinSortError","_rerenderSubscription","_isSorted","_updateArrowDirection","_viewState","_setAnimationTransitionState","_setIndicatorHintVisible","visible","_isDisabled","viewState","_getArrowDirectionState","_getArrowViewState","_getAriaSortAttribute","(mouseenter)","(longpress)","(mouseleave)","[attr.aria-sort]","[class.mat-sort-header-disabled]","MatSortModule","CdkStepLabel","optionalLabel","_focusMonitor","_element","monitor","_intlSubscription","stopMonitoring","_stringLabel","label","_templateLabel","_getHostElement","_getIconContext","iconOverrides","selected","horizontalStepTransition","stepper","_errorStateMatcher","isErrorState","control","form","originalErrorState","customErrorState","invalid","interacted","icons","_icons","override","icon","_iconOverrides","_steps","_stateChanged","aria-orientation","[class.mat-drawer-container-explicit-backdrop]","MatSidenavContainer","_drawers","MatSidenav","ContentChild","MatSidenavContent","MatSidenavModule","ScrollDispatchModule","PlatformModule","MatDrawer","MatDrawerContainer","MatDrawerContent","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlideToggle","multi","MatSlideToggleChange","source","checked","MatSlideToggleBase","_MatSlideToggleMixinBase","onChange","_","onTouched","_uniqueId","_required","_checked","labelPosition","ariaLabel","ariaLabelledby","_slideRenderer","SlideToggleRenderer","_inputElement","focusOrigin","_onInputFocusChange","_onChangeEvent","stopPropagation","dragging","_emitChangeEvent","_onInputClick","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","focusVia","toggle","_focusRipple","fadeOut","_ripple","launch","persistent","_onDragStart","startThumbDrag","_onDrag","updateThumbPosition","deltaX","_onDragEnd","newCheckedValue","dragPercentage","setTimeout","stopThumbDrag","_onLabelTextChange","[id]","[class.mat-checked]","[class.mat-disabled]","[class.mat-slide-toggle-label-before]","FocusMonitor","required","MatRipple","_thumbBarEl","querySelector","_thumbBarWidth","clientWidth","_thumbEl","_previousChecked","dragX","percentage","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MatSlideToggleModule","MAT_SLIDER_VALUE_ACCESSOR","MatSlider","MatSliderChange","MatSliderBase","_MatSliderMixinBase","_invert","_max","_min","_step","_thumbLabel","_tickInterval","_value","_vertical","input","_percent","_isSliding","_tickIntervalPercent","_sliderDimensions","_controlValueAccessorChangeFn","_dirChangeSubscription","_calculatePercentage","_roundLabelTo","toString","split","pop","displayWith","toFixed","_focusHostElement","blur","_blurHostElement","_clamp","vertical","invert","percent","_isMinValue","thumbLabel","axis","_invertMouseCoords","_thumbGap","tickSize","backgroundSize","sign","rotate","_invertAxis","_onMouseenter","_getSliderDimensions","_updateTickIntervalPercent","_onClick","oldValue","_updateValueFromPosition","x","clientX","y","clientY","_emitInputEvent","_onSlide","_onSlideStart","center","_valueOnSlideStart","_onSlideEnd","_onFocus","_onBlur","_onKeydown","PAGE_UP","_increment","PAGE_DOWN","UP_ARROW","DOWN_ARROW","_onKeyup","numSteps","step","pos","size","posComponent","exactValue","_calculateValue","closestValue","round","tickInterval","trackSize","pixelsPerStep","stepsPerTick","pixelsPerTick","_sliderWrapper","getBoundingClientRect","(focus)","(blur)","(keydown)","(keyup)","(slide)","(slideend)","(slidestart)","[tabIndex]","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[attr.aria-orientation]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[class.mat-slider-axis-inverted]","[class.mat-slider-sliding]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","MatSliderModule","_overlayRef","_afterOpened","_dismissedByAction","_finishDismiss","closed","clearTimeout","_durationTimeoutId","closeWithAction","_open","dispose","dismissedByAction","MatProgressSpinner","mode","platform","[style.width.px]","[style.height.px]","MatSpinner","MatProgressSpinnerModule","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MatRadioGroup","MatRadioChange","MatRadioGroupBase","_MatRadioGroupMixinBase","_changeDetector","_name","_selected","_isInitialized","_labelPosition","_disabled","_updateRadioButtonNames","_markRadiosForCheck","newValue","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_touch","_radios","radio","isAlreadySelected","_markForCheck","MatRadioButton","descendants","MatRadioButtonBase","_MatRadioButtonMixinBase","radioGroup","_radioDispatcher","_removeUniqueSelectionListener","listen","newCheckedState","notify","_isRippleDisabled","_onInputChange","groupValueChanged","[class.mat-radio-checked]","[class.mat-radio-disabled]","[attr.id]","UniqueSelectionDispatcher","ariaDescribedby","MatRadioModule","matDrawerAnimations","transformDrawer","MAT_DRAWER_DEFAULT_AUTOSIZE","_container","_margins","_contentMargins","margins","[style.margin-left.px]","[style.margin-right.px]","_focusTrapFactory","_doc","_elementFocusedBeforeDrawerWasOpened","_mode","_disableClose","openedChange","opened","_isFocusTrapEnabled","_focusTrap","_trapFocus","_restoreFocus","close","onPositionChanged","_modeChanged","HTMLElement","_openedVia","enabled","destroy","isOpen","openedVia","_opened","_enableAnimations","[@transform]","(@transform.start)","(@transform.done)","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","_openedStream","openedStart","_closedStream","closedStart","backdropClick","_doCheckSubject","_autosize","defaultAutosize","drawer","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","_isDrawerOpen","_start","_end","_updateContentMargins","debounceTime","ngDoCheck","_setContainerClass","throwMatDuplicatedDrawerError","_right","_left","_closeModalDrawer","disableClose","_canHaveBackdrop","_isShowingBackdrop","_width","autosize","hasBackdrop","_fixedBottomGap","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","fixedInViewport","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","MatSelectModule","matTooltipAnimations","tooltipState","MAT_TOOLTIP_SCROLL_STRATEGY","overlay","inject","scrollStrategies","reposition","scrollThrottle","MAT_TOOLTIP_DEFAULT_OPTIONS","showDelay","hideDelay","touchendHideDelay","MatTooltip","_scrollDispatcher","_ariaDescriber","_scrollStrategy","_defaultOptions","_message","_manualListeners","IOS","nodeName","webkitUserSelect","userSelect","listener","addEventListener","_updatePosition","_tooltipInstance","updatePosition","removeDescription","_isTooltipVisible","_updateTooltipMessage","describe","_tooltipClass","_setTooltipClass","removeEventListener","clear","delay","_detach","_portal","TooltipComponent","afterHidden","isVisible","ESCAPE","_handleTouchend","_getOrigin","_getOverlayPosition","strategy","flexibleConnectedTo","withFlexibleDimensions","withViewportMargin","withPositions","main","fallback","scrollableAncestors","getAncestorScrollContainers","withScrollableContainers","positionChanges","scrollableViewProperties","isOverlayClipped","_setTransformOrigin","connectionPair","scrollStrategy","getConfig","originPosition","isLtr","originX","originY","getMatTooltipInvalidPositionError","_invertPosition","overlayPosition","overlayX","overlayY","tooltipClass","(touchend)","ScrollDispatcher","AriaDescriber","_visibility","_closeOnInteraction","_transformOrigin","_onHide","_isHandset","_hideTimeoutId","_showTimeoutId","_animationStart","_animationDone","_handleBodyInteraction","aria-hidden","MatTooltipModule","itemsPerPageLabel","nextPageLabel","previousPageLabel","firstPageLabel","lastPageLabel","getRangeLabel","MatPaginatorIntl","MAT_PAGINATOR_INTL_PROVIDER","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","PageEvent","MatPaginator","_pageIndex","_length","_pageSizeOptions","_hidePageSize","_showFirstLastButtons","_intlChanges","_pageSize","_updateDisplayedPageSizeOptions","p","_initialized","nextPage","hasNextPage","_emitPageEvent","previousPage","hasPreviousPage","firstPage","lastPage","getNumberOfPages","numberOfPages","_changePageSize","floor","pageSizeOptions","_displayedPageSizeOptions","hidePageSize","showFirstLastButtons","MatPaginatorModule","MatProgressBarBase","_MatProgressBarMixinBase","progressbarId","MatProgressBar","_bufferValue","clamp","_primaryTransform","_bufferTransform","bufferValue","aria-valuemin","aria-valuemax","[attr.mode]","MatProgressBarModule","BASE_SIZE","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","INDETERMINATE_ANIMATION_TEMPLATE","_fallbackAnimation","_diameter","EDGE","TRIDENT","animationClass","diameters","_attachStyleNode","_strokeWidth","diameter","viewBox","_circleRadius","strokeWidth","PI","_strokeCircumference","styleTag","createElement","head","appendChild","sheet","insertRule","_getAnimationText","replace","Set","matMenuAnimations","transformMenu","fadeInItems","MAT_MENU_DEFAULT_OPTIONS","MatMenu","yPosition","items","MatMenuItem","lazyContent","MatMenuContent","overlapTrigger","MAT_MENU_SCROLL_STRATEGY","MatMenuTrigger","_parentMenu","_menuItemInstance","_menuOpen","_closeSubscription","_hoverSubscription","_openedByMouse","menuOpened","onMenuOpen","menuClosed","onMenuClose","_triggersSubmenu","triggersSubmenu","menu","_checkMenu","reason","_destroyMenu","_hovered","openMenu","_cleanUpSubscriptions","toggleMenu","closeMenu","menuData","_menuClosingActions","_initMenu","_startAnimation","menuOpen","_resetMenu","_resetAnimation","parentMenu","_setMenuElevation","_setIsMenuOpen","focusFirstItem","setElevation","depth","_highlighted","throwMatMenuMissingError","_getOverlayConfig","_subscribeToPositions","_getPosition","backdropClass","posX","posY","setPositionClasses","xPosition","originFallbackX","_b","overlayFallbackY","_c","originFallbackY","_d","overlayFallbackX","offsetY","backdrop","parentClose","hover","_handleMousedown","isFakeMousedownFromScreenReader","aria-haspopup","(mousedown)","Self","_deprecatedMatMenuTriggerFor","MatMenuModule","matSelectAnimations","transformPanel","minWidth","group","fadeInContent","MAT_SELECT_SCROLL_STRATEGY","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinErrorState","MatSelectTrigger","MatSelect","_parentFormField","_scrollStrategyFactory","_panelOpen","_scrollTop","_multiple","_compareWith","o1","o2","_uid","_destroy","_triggerFontSize","_onChange","_onTouched","_optionIds","_panelDoneAnimating","_offsetY","_positions","_disableOptionCentering","focused","controlType","optionSelectionChanges","defer","options","option","onSelectionChange","onStable","switchMap","o","selectionChange","valueChange","valueAccessor","_placeholder","stateChanges","_selectionModel","getMatSelectDynamicMultipleError","getMatSelectNonFunctionValueError","_initializeSelection","_id","SelectionModel","multiple","_initKeyManager","_resetOptions","updateErrorState","panelOpen","_triggerRect","getComputedStyle","_keyManager","withHorizontalOrientation","_calculateOverlayPosition","_highlightCorrectOption","overlayDir","fontSize","_isRtl","_setSelectionByValue","selectedOptions","viewValue","reverse","join","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","altKey","onKeydown","manager","setFirstItemActive","setLastItemActive","activeItem","previouslyFocusedIndex","activeItemIndex","shiftKey","_selectViaInteraction","_onPanelDone","offsetX","_onFadeInDone","_onAttached","positionChange","_calculateOverlayOffsetX","panel","scrollTop","_getPanelTheme","color","isEmpty","isUserInput","getMatSelectNonArrayValueError","_clearSelection","currentValue","_selectValue","_sortValues","correspondingOption","setActiveItem","error","console","warn","select","skip","deselect","ActiveDescendantKeyManager","withTypeAhead","withVerticalOrientation","tabOut","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","_setOptionIds","wasSelected","isSelected","_propagateChanges","fallbackValue","valueToEmit","activeOptionIndex","labelCount","_countGroupLabelsBeforeOption","optionGroups","_getOptionScrollPosition","_getItemHeight","_getOptionIndex","result","current","itemHeight","_getItemCount","panelHeight","scrollContainerHeight","maxScroll","selectedOptionOffset","scrollBuffer","_calculateOverlayScroll","_calculateOverlayOffsetY","_checkOverlayWithinViewport","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","placeholder","_getAriaActiveDescendant","overlayRect","viewportSize","getViewportSize","paddingWidth","SELECT_MULTIPLE_PANEL_PADDING_X","first","leftOverflow","rightOverflow","optionOffsetFromPanelTop","optionHeightAdjustment","maxOptionsDisplayed","firstDisplayedIndex","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","setDescribedByIds","ids","_ariaDescribedby","onContainerClick","[attr.tabindex]","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","MatFormFieldControl","MAT_OPTION_PARENT_COMPONENT","NgForm","FormGroupDirective","MatFormField","NgControl","CdkConnectedOverlay","MatOption","MatOptgroup","customTrigger","disableOptionCentering","compareWith","errorStateMatcher","MatOptionModule","MatFormFieldModule","MAT_SELECTION_LIST_VALUE_ACCESSOR","MatSelectionList","MatListOption","_MatSelectionListMixinBase","MatLineModule","MatPseudoCheckboxModule","MatList","MatNavList","MatListItem","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatListSubheaderCssMatStyler","MatDividerModule","MatListModule","_template","_componentFactoryResolver","_appRef","context","_outlet","DomPortalOutlet","insertBefore","outletElement","isAttached","ApplicationRef","sequence","MatMenuItemBase","_MatMenuItemMixinBase","_checkDisabled","_emitHoverEvent","getLabel","textNodeType","TEXT_NODE","output","length_1","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","_xPosition","_yPosition","_tabSubscription","_classList","_panelAnimationState","_overlapTrigger","_hasBackdrop","throwMatMenuInvalidPositionX","throwMatMenuInvalidPositionY","classes","className","FocusKeyManager","withWrap","item","setFocusOrigin","resetActiveItem","newElevation","customElevation","c","_previousElevation","_onAnimationDone","_MatListMixinBase","_navList","_isNavList","_handleFocus","_handleBlur","[class.mat-list-item-avatar]","[class.mat-list-item-with-avatar]","MatSelectionListBase","MatListOptionBase","_MatListOptionMixinBase","MatSelectionListChange","selectionList","_hasFocus","checkboxPosition","_setSelected","_reportValueChange","MatLineSetter","_lines","_removeOptionFromList","_text","_setFocusedOption","tabindex","[class.mat-list-item-disabled]","[class.mat-list-item-focus]","[attr.aria-selected]","skipPredicate","_tempValues","_setOptionsFromValues","_modelChanges","_i","added","removed","optionIndex","setNextItemActive","_toggleSelectOnFocusedOption","_getSelectedOptionValues","values","_getOptionByValue","Boolean","focusedOption","focusedIndex","svgElement","_fetchUrl","url","svgText","_svgElementFromString","MatIconRegistry","_createSvgElementForSingleIcon","responseText","svg","_setSvgAttributes","_extractSvgIconFromSet","iconSet","iconName","iconSource","iconElement","cloneNode","_toSvgElement","str","div","innerHTML","ELEMENT_NODE","setAttribute","safeUrl","_httpClient","getMatIconNoHttpProviderError","_sanitizer","sanitize","SecurityContext","RESOURCE_URL","getMatIconFailedToSanitizeUrlError","inProgressFetch","_inProgressUrlFetches","req","responseType","finalize","share","_addSvgIconConfig","namespace","_svgIconConfigs","iconKey","_addSvgIconSetConfig","configNamespace","_iconSetConfigs","HttpClient","DomSanitizer","ICON_REGISTRY_PROVIDER","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","_MatIconMixinBase","MatIcon","_iconRegistry","ariaHidden","_inline","inline","_fontSet","_cleanupFontValue","_fontIcon","_splitIconName","parts","svgIcon","getNamedSvgIcon","_setSvgElement","err","log","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","classNameForFontAlias","getDefaultFontSetClass","_previousFontSetClass","fontIcon","_previousFontIconClass","[class.mat-icon-inline]","MatListBase","MatListItemBase","_MatListItemMixinBase","_getValidDateOrNull","_dateAdapter","deserialize","_validatorOnChange","MatDatepickerInput","_disabledChange","_datepicker","_datepickerSubscription","_selectedChanged","_cvaOnChange","dateInput","MatDatepickerInputEvent","dateChange","_localeSubscription","_valueChange","registerOnValidatorChange","validate","_validator","getPopupConnectionElementRef","getConnectedOverlayOrigin","_formField","_onInput","date","parse","_dateFormats","_lastValueValid","isValid","_getThemePalette","_formatValue","format","display","isDateInstance","MAT_DATEPICKER_VALUE_ACCESSOR","MAT_DATEPICKER_VALIDATORS","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","DateAdapter","MAT_DATE_FORMATS","matDatepicker","matDatepickerFilter","MatDatepickerToggleIcon","MatDatepickerToggle","datepicker","_watchStateChanges","datepickerDisabled","inputDisabled","_datepickerInput","datepickerToggled","openedStream","closedStream","[class.mat-datepicker-toggle-active]","[class.mat-accent]","[class.mat-warn]","_customIcon","MatDialogModule","A11yModule","MatCalendar","MatCalendarBody","MatDatepicker","MatDatepickerContent","MatMonthView","MatYearView","MatMultiYearView","MatCalendarHeader","MatDatepickerIntl","MatDatepickerModule","_inset","MatDivider","[class.mat-divider-vertical]","[class.mat-divider-inset]","_hideToggle","displayMode","MatAccordion","hideToggle","CdkAccordion","matExpansionAnimations","indicatorRotate","expansionHeaderHeight","params","collapsedHeight","expandedHeight","bodyExpansion","MatExpansionPanelContent","uniqueId","MatExpansionPanel","accordion","_uniqueSelectionDispatcher","_inputChanges","_headerId","_getHideToggle","_hasSpacing","expanded","_getExpandedState","_lazyContent","_bodyAnimation","phaseName","outputs","[class.mat-expanded]","[class.mat-expansion-panel-spacing]","MatExpansionPanelActionRow","MatExpansionPanelHeader","_parentChangeSubscription","_toggle","_isExpanded","_getPanelId","_showToggle","_keydown","[attr.aria-controls]","[@expansionHeight]","MatExpansionPanelDescription","MatExpansionPanelTitle","CdkAccordionModule","MatExpansionModule","MatGridTile","_rowspan","_colspan","coerceToNumber","_setStyle","property","MatGridTileText","MatGridAvatarCssMatStyler","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","TileCoordinator","numColumns","tiles","columnIndex","rowIndex","tracker","fill","tile","_trackTile","lastRowMax","rowCount","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","rowspan","row","col","TileStyler","_rows","init","gutterSize","cols","_gutterSize","normalizeUnits","_cols","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","reset","list","_setListStyle","_tiles","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","parseFloat","FitTileStyler","gutterHeightPerTile","MatGridList","_gutter","coerceToString","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","rowHeight","_tileStyler","MatGridListModule","SvgIconConfig","_cachedIconsByUrl","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","addSvgIconInNamespace","addSvgIconLiteral","literal","addSvgIconLiteralInNamespace","sanitizedLiteral","HTML","getMatIconFailedToSanitizeLiteralError","addSvgIconSet","addSvgIconSetInNamespace","addSvgIconSetLiteral","addSvgIconSetLiteralInNamespace","registerFontClassAlias","alias","setDefaultFontSetClass","getSvgIconFromUrl","cachedIcon","cloneSvg","_loadSvgIconFromConfig","tap","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","observableThrow","getMatIconNameNotFoundError","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","catchError","forkJoin","foundIcon","_createCellForYear","year","yearName","getYearName","createDate","MatCalendarCell","_shouldEnableYear","maxDate","getYear","minDate","dateFilter","firstOfYear","addCalendarDays","selectedChange","yearSelected","_matCalendarBody","monthSelected","createMissingDateImplError","_activeDate","today","oldActiveDate","validDate","clampDate","_init","_selectedMonth","_getMonthInCurrentYear","_minDate","_maxDate","_focusActiveCell","_monthSelected","month","normalizedDate","activeDate","daysInMonth","getNumDaysInMonth","getDate","_handleCalendarBodyKeydown","addCalendarMonths","getMonth","addCalendarYears","_todayMonth","_yearLabel","monthNames","getMonthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","toLocaleUpperCase","_shouldEnableMonth","activeYear","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","firstOfMonth","maxYear","maxMonth","minYear","minMonth","calendar","currentView","monthYearLabel","switchToMultiYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","multi-year","prevMultiYearLabel","nextMonthLabel","nextYearLabel","nextMultiYearLabel","currentPeriodClicked","previousClicked","nextClicked","previousEnabled","_isSameView","nextEnabled","date1","date2","startAt","startView","firstChange","view","monthView","yearView","multiYearView","headerComponent","_userSelection","matDatepickerAnimations","fadeInCalendar","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY","MatDatepickerContentBase","_MatDatepickerContentMixinBase","_popupRef","_positionChange","isAbove","_isAbove","[@transformPanel]","[class.mat-datepicker-content-touch]","[class.mat-datepicker-content-above]","_inputSubscription","_popupComponentRef","sameDate","_focusedElementBeforeOpen","activeElement","touchUi","_openAsDialog","_openAsPopup","_dialogRef","_calendarPortal","completeClose","afterClosed","componentInstance","_setColor","_createPopup","setDirection","_getDirection","keydownEvents","withPush","MatDialog","calendarHeaderComponent","NG_VALIDATORS","target","targetElement","_parseValidator","matDatepickerParse","text","_minValidator","controlValue","compareDate","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_filterValidator","_dateFilter","Validators","compose","localeChanges","registerDatepicker","_registerInput","oldDate","[@slideDialog]","(@slideDialog.start)","(@slideDialog.done)","MatDialogContainer","MatDialogRef","_containerInstance","location","_afterOpen","_afterClosed","_beforeClose","_locationChanges","_animationStateChanged","_result","closeOnNavigation","dialogResult","detachBackdrop","_startExitAnimation","afterOpen","beforeClose","_getPositionStrategy","centerVertically","updateSize","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","block","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","_location","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","componentOrTemplateRef","_applyConfigDefaults","MatDialogConfig","getDialogById","dialogContainer","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","dialog","dialogConfig","minHeight","maxWidth","maxHeight","previousValue","removeAttribute","overlayContainer","getContainerElement","parentElement","siblings","sibling","hasAttribute","getAttribute","Location","OverlayContainer","dialogElementUid","MatDialogClose","_dialog","getClosestDialog","proxiedChange","_matDialogClose","MatDialogTitle","_ariaLabelledBy","MatDialogContent","MatDialogActions","MatTextareaAutosize","minRows","maxRows","rows","matAutosizeMinRows","matAutosizeMaxRows","CdkTextareaAutosize","MAT_INPUT_INVALID_TYPES","MatInputBase","_MatInputMixinBase","MatInput","inputValueAccessor","_autofillMonitor","ngZone","_isServer","autofilled","_type","_readonly","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","el","selectionStart","selectionEnd","setSelectionRange","_validateType","_isTextarea","isAutofilled","_dirtyCheckNativeValue","isFocused","readonly","getMatInputUnsupportedTypeError","_isNeverEmpty","_isBadInput","validity","badInput","[class.mat-input-server]","[attr.placeholder]","[required]","[readonly]","AutofillMonitor","TextFieldModule","MatInputModule","calendarLabel","openCalendarLabel","displayValue","numCols","allowDisabledSelection","activeCell","cellAspectRatio","selectedValueChange","_cellClicked","cell","_isActiveCell","cellNumber","_firstRowOffset","attr.aria-readonly","todayValue","selectedValue","labelMinRequiredCells","activeDateChange","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","_weekdays","_hasSameMonthAndYear","_selectedDate","_getDateInCurrentMonth","_dateSelected","selectedYear","selectedMonth","selectedDate","_todayDate","_monthLabel","_firstWeekOffset","getDayOfWeek","_createWeekCells","dateNames","getDateNames","_weeks","_shouldEnableDate","dateA11yLabel","d1","d2","_selectedYear","_todayYear","activeOffset","_years","_yearSelected","yearsPerPage","_getActiveCell","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MAT_CHECKBOX_CLICK_ACTION","MatCheckbox","indeterminateChange","ripple","indeterminate","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","MatCheckboxModule","MatChipSelectionChange","MatChipBase","_MatChipMixinBase","CHIP_ATTRIBUTE_NAMES","MatChipAvatar","MatChipTrailingIcon","MatChip","chipListSelectable","_selectable","_removable","destroyed","_addHostClassName","_chipRipple","RippleRenderer","selectable","CHIP_ATTRIBUTE_NAMES_1","attr","tagName","chip","_removeTriggerEvents","selectViaInteraction","toggleSelected","removable","DELETE","BACKSPACE","_blur","[class.mat-chip-selected]","[class.mat-chip-with-avatar]","[class.mat-chip-with-trailing-icon]","[class.mat-chip-disabled]","avatar","trailingIcon","removeIcon","MatChipRemove","_parentChip","MAT_CHIPS_DEFAULT_OPTIONS","MatChipListBase","_MatChipListMixinBase","MatChipListChange","MatChipList","_lastDestroyedIndex","_chipSet","_tabOutSubscription","_tabIndex","_userTabIndex","ariaOrientation","_chipInput","chips","_changeSubscription","_resetChips","_updateTabIndex","_updateFocusForDestroyedChips","_chipRemoveSubscription","_dropSubscriptions","registerInput","inputElement","_focusInput","_isInputEmpty","_updateKeyManager","chipIndex","chipsArray","newFocusIndex","focusChip","correspondingChip","_markAsTouched","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","chipSelectionChanges","chipFocusChanges","updateActiveItemIndex","chipBlurChanges","chipRemoveChanges","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","[class.mat-chip-list-required]","MatChipInput","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","_emitChipEnd","addOnBlur","_focus","chipList","CHIP_DECLARATIONS","ɵ0","useValue","MatChipsModule","ariaDescribedBy","autoFocus","matDialogAnimations","slideDialog","_elementFocusedBeforeDialogWasOpened","_state","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","focusInitialElementWhenReady","toFocus","_onAnimationStart","MatAnchor","MatButton","MatButtonToggleGroupBase","_MatButtonToggleGroupMixinBase","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","MatButtonToggleGroupMultiple","_uniqueIdCounter","MatButtonToggleChange","_buttonToggles","_syncButtonToggle","_isSelected","_isPrechecked","_rawValue","[class.mat-button-toggle-vertical]","MatButtonToggle","MatButtonToggleBase","_MatButtonToggleMixinBase","toggleGroup","_isSingleSelector","buttonToggleGroup","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","MatButtonToggleModule","MatCardContent","MatCardTitle","MatCardSubtitle","align","[class.mat-card-actions-align-end]","MatCardActions","MatCardFooter","MatCardImage","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardXlImage","MatCardAvatar","MatCard","MatCardHeader","MatCardTitleGroup","MatCardModule","MatCheckboxChange","MatCheckboxBase","_MatCheckboxMixinBase","_clickAction","_currentAnimationClass","_currentCheckState","TransitionCheckState","Init","_indeterminate","changed","_transitionCheckState","Indeterminate","Checked","Unchecked","_getAriaChecked","newState","oldState","_getAnimationClassForCheckStateTransition","_removeFocusRipple","_onInteractionEvent","animSuffix","_canOpen","_previousValue","_attachOverlay","_floatLabel","MatAutocompleteTrigger","shouldAnimate","floatLabel","_animateAndLockLabel","_manuallyFloatingLabel","_resetLabel","_scrollToOption","autocomplete","newScrollPosition","_getScrollTop","_setScrollTop","_subscribeToClosingActions","firstStable","_zone","optionChanges","_positionStrategy","reapplyLastPosition","_resetActiveItem","_setVisibility","panelClosingActions","_setValueAndClose","_destroyPanel","closePanel","_setTriggerValue","toDisplay","inputValue","_control","_clearPreviousSelectedOption","_emitSelectEvent","getMatAutocompleteMissingPanelError","_getHostWidth","_viewportSubscription","_closingActionsSubscription","wasOpen","_isOpen","_overlayAttached","_getConnectedElement","autoActiveFirstOption","readOnly","aria-autocomplete","(focusin)","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","Host","MatAutocomplete","MatAutocompleteModule","MatBadge","_color","_overlap","val","_updateTextContent","_description","newDescription","_updateHostAriaDescription","_hidden","isAfter","description","_badgeElement","_createBadgeElement","badgeElement","oldDescription","colorPalette","[class.mat-badge-overlap]","[class.mat-badge-above]","[class.mat-badge-below]","[class.mat-badge-before]","[class.mat-badge-after]","[class.mat-badge-small]","[class.mat-badge-medium]","[class.mat-badge-large]","[class.mat-badge-hidden]","overlap","hidden","MatBadgeModule","MAT_BOTTOM_SHEET_DATA","MatBottomSheetConfig","MatBottomSheetRef","bottomSheetConfig","_keydownEvents","matBottomSheetAnimations","bottomSheetState","MatBottomSheetContainer","breakpointObserver","_elementFocusedBeforeOpened","_breakpointSubscription","Medium","Large","XLarge","_toggleClass","isMatched","_validatePortalAttached","_setPanelClass","(@state.start)","FocusTrapFactory","MatBottomSheet","_parentBottomSheet","_bottomSheetRefAtThisLevel","_openedBottomSheetRef","_attachContainer","ref","bottomSheetRef","MatBottomSheetModule","DEFAULT_ROUND_BUTTON_COLOR","DEFAULT_FLAT_BUTTON_COLOR","BUTTON_HOST_ATTRIBUTES","MatButtonBase","_MatButtonMixinBase","_isRoundButton","_hasHostAttributes","_isIconButton","BUTTON_HOST_ATTRIBUTES_1","attributes","attribute","focusMonitor","stopImmediatePropagation","MatOptionSelectionChange","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]","MAT_LABEL_GLOBAL_OPTIONS","MatError","matFormFieldAnimations","transitionMessages","[class.mat-right]","MatHint","MatLabel","MatPlaceholder","MatPrefix","MatSuffix","MatFormFieldBase","_MatFormFieldMixinBase","MAT_FORM_FIELD_DEFAULT_OPTIONS","labelOptions","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_outlineGapWidth","_outlineGapStart","_labelOptions","float","_appearance","appearance","_hideRequiredMarker","_processHints","_connectionContainerRef","_validateControlChild","_validatePlaceholders","_syncDescribedByIds","valueChanges","_prefixChildren","_suffixChildren","_hintChildren","_errorChildren","updateOutlineGap","_shouldForward","prop","_hasPlaceholder","_placeholderChild","_hasLabel","_labelChild","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_hasFloatingLabel","_getDisplayedMessages","errorState","fromEvent","_label","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","hintLabel","getMatFormFieldDuplicatedHintError","startHint","endHint","getMatFormFieldMissingControlError","containerStart","_getStartEnd","labelStart","labelWidth","outlineGapPadding","rect","[class.mat-form-field-appearance-standard]","[class.mat-form-field-appearance-fill]","[class.mat-form-field-appearance-outline]","[class.mat-form-field-appearance-legacy]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-form-field-autofilled]","[class.mat-focused]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","hideRequiredMarker","underlineRef","_inputContainerRef","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","MatAutocompleteBase","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","defaults","showPanel","optionSelected","_autoActiveFirstOption","_componentDestroyed","_closeKeyEventStream","optionSelections","openPanel","_outsideClickStream","clickTarget","formField","activeOption","prevActiveItem","TAB","_handleInput","__extends","d","__","constructor","extendStatics","base","class_1","defaultColor","defaultTabIndex","matcher","mixinInitialized","_pendingSubscribers","initialized","Observable","subscriber","_notifySubscriber","_markInitialized","range","valueFunction","valuesArray","enforceStyleRecalculation","window","getPropertyValue","distanceToFurthestCorner","distX","distY","sqrt","optionsArray","groups","groupCounter","optionOffset","currentScrollPosition","optionHeight","defaultOptions","provider","exp","match","parentRegistry","httpClient","sanitizer","parentIntl","sortOrder","setPrototypeOf","__proto__","__assign","assign","s","n","SHARP_CURVE","MATERIAL_SANITY_CHECKS","_sanityChecksEnabled","_hasDoneGlobalChecks","_hasCheckedHammer","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","doctype","testElement","body","computedStyle","_checkHammerIsAvailable","BidiModule","MAT_DATE_LOCALE","LOCALE_ID","MAT_DATE_LOCALE_PROVIDER","_localeChanges","setLocale","locale","second","firstValid","secondValid","SUPPORTS_INTL_API","Intl","DEFAULT_MONTH_NAMES","short","String","DEFAULT_DATE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","NativeDateAdapter","matDateLocale","useUtcForDisplay","_clampDate","getFullYear","getDay","dtf_1","DateTimeFormat","timeZone","_stripDirectionalityCharacters","_format","Date","dtf_2","day","dtf_3","weekday","dtf","_createDateWithOverflow","clone","displayFormat","setFullYear","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","test","isNaN","getTime","NaN","UTC","getHours","getMinutes","getSeconds","getMilliseconds","MAT_NATIVE_DATE_FORMATS","NativeDateModule","MatNativeDateModule","ShowOnDirtyErrorStateMatcher","dirty","submitted","touched","MAT_HAMMER_OPTIONS","_hammerOptions","commonModule","_hammer","Hammer","events","buildHammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","MatLine","_setLineClass","count","_resetClasses","_setClass","isAdd","RippleRef","_renderer","RippleState","HIDDEN","fadeOutRipple","defaultRippleAnimationConfig","enterDuration","exitDuration","ignoreMouseEventsTimeout","_target","_isPointerDown","_triggerEvents","_activeRipples","_eventOptions","supportsPassiveEventListeners","passive","onMousedown","isSyntheticEvent","_lastTouchStartEvent","now","rippleDisabled","fadeInRipple","onTouchStart","touches","onPointerUp","VISIBLE","FADING_IN","_containerElement","containerRect","_containerRect","animationConfig","centered","radius","transitionDuration","rippleRef","runTimeoutOutsideZone","wasActive","rippleEl","FADING_OUT","fadeOutAll","_triggerElement","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","_trigger","configOrX","[class.mat-ripple-unbounded]","unbounded","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatPseudoCheckbox","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter","_labelId","[class.mat-optgroup-disabled]","_parent","_active","_mostRecentViewValue","_emitSelectionChangeEvent","setActiveStyles","setInactiveStyles","ngAfterViewChecked"],"mappings":"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"}