{"version":3,"file":"material.umd.min.js","sources":["../../src/lib/core/testing/month-constants.ts","../../src/lib/expansion/expansion-animations.ts","../../src/lib/select/select.ts","../../src/lib/tooltip/tooltip.ts","../../src/lib/tabs/tab.ts","../../src/lib/tabs/tabs-animations.ts","../../src/lib/tabs/tab-body.ts","../../src/lib/tabs/tab-group.ts","../../src/lib/tabs/tab-label-wrapper.ts","../../src/lib/tabs/tab-header.ts","../../src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/lib/tabs/tabs-module.ts","../../src/lib/toolbar/toolbar.ts","../../src/lib/toolbar/toolbar-module.ts","../../src/lib/version.ts","../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/snack-bar/snack-bar.ts","../../src/lib/snack-bar/snack-bar-module.ts","../../src/lib/sort/sort.ts","../../src/lib/sort/sort-header-intl.ts","../../src/lib/sort/sort-animations.ts","../../src/lib/sort/sort-header.ts","../../src/lib/sort/sort-module.ts","../../src/lib/stepper/step-label.ts","../../src/lib/stepper/stepper-intl.ts","../../src/lib/stepper/step-header.ts","../../src/lib/stepper/stepper-animations.ts","../../src/lib/stepper/stepper.ts","../../src/lib/stepper/stepper-button.ts","../../src/lib/stepper/stepper-module.ts","../../src/lib/table/table.ts","../../src/lib/table/cell.ts","../../src/lib/table/row.ts","../../src/lib/table/table-module.ts","../../src/lib/table/table-data-source.ts","../../src/lib/tabs/ink-bar.ts","../../src/lib/tabs/tab-label.ts","../../src/lib/slide-toggle/slide-toggle.ts","../../src/lib/slide-toggle/slide-toggle-module.ts","../../src/lib/slider/slider.ts","../../src/lib/slider/slider-module.ts","../../src/lib/snack-bar/snack-bar-ref.ts","../../src/lib/snack-bar/snack-bar-config.ts","../../src/lib/snack-bar/snack-bar-animations.ts","../../src/lib/snack-bar/simple-snack-bar.ts","../../src/lib/snack-bar/snack-bar-container.ts","../../src/lib/radio/radio.ts","../../src/lib/radio/radio-module.ts","../../src/lib/sidenav/drawer-animations.ts","../../src/lib/sidenav/drawer.ts","../../src/lib/sidenav/sidenav.ts","../../src/lib/sidenav/sidenav-module.ts","../../src/lib/tooltip/tooltip-module.ts","../../src/lib/paginator/paginator-intl.ts","../../src/lib/paginator/paginator.ts","../../src/lib/paginator/paginator-module.ts","../../src/lib/progress-bar/progress-bar.ts","../../src/lib/progress-bar/progress-bar-module.ts","../../src/lib/progress-spinner/progress-spinner.ts","../../src/lib/progress-spinner/progress-spinner-module.ts","../../src/lib/menu/menu-trigger.ts","../../src/lib/menu/menu-module.ts","../../src/lib/select/select-animations.ts","../../src/lib/select/select-module.ts","../../src/lib/tooltip/tooltip-animations.ts","../../src/lib/list/selection-list.ts","../../src/lib/list/list-module.ts","../../src/lib/menu/menu-animations.ts","../../src/lib/menu/menu-item.ts","../../src/lib/menu/menu-content.ts","../../src/lib/menu/menu-directive.ts","../../src/lib/list/list.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-module.ts","../../src/lib/divider/divider.ts","../../src/lib/divider/divider-module.ts","../../src/lib/expansion/accordion.ts","../../src/lib/expansion/expansion-panel-content.ts","../../src/lib/expansion/expansion-panel.ts","../../src/lib/expansion/expansion-panel-header.ts","../../src/lib/expansion/expansion-module.ts","../../src/lib/grid-list/grid-tile.ts","../../src/lib/grid-list/tile-coordinator.ts","../../src/lib/grid-list/tile-styler.ts","../../src/lib/grid-list/grid-list.ts","../../src/lib/grid-list/grid-list-module.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/datepicker/multi-year-view.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/datepicker/calendar.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/dialog/dialog-container.ts","../../src/lib/dialog/dialog-ref.ts","../../src/lib/dialog/dialog.ts","../../src/lib/dialog/dialog-content-directives.ts","../../src/lib/dialog/dialog-module.ts","../../src/lib/icon/icon-registry.ts","../../src/lib/icon/icon.ts","../../src/lib/icon/icon-module.ts","../../src/lib/input/autosize.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/input.ts","../../src/lib/input/input-module.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/chips/chip.ts","../../src/lib/chips/chip-list.ts","../../src/lib/chips/chip-input.ts","../../src/lib/chips/chips-module.ts","../../src/lib/dialog/dialog-config.ts","../../src/lib/dialog/dialog-animations.ts","../../src/lib/button/button.ts","../../src/lib/button/button-module.ts","../../src/lib/button-toggle/button-toggle.ts","../../src/lib/button-toggle/button-toggle-module.ts","../../src/lib/card/card.ts","../../src/lib/card/card-module.ts","../../src/lib/checkbox/checkbox-config.ts","../../src/lib/core/option/option.ts","../../src/lib/core/option/index.ts","../../src/lib/core/label/label-options.ts","../../src/lib/form-field/error.ts","../../src/lib/form-field/form-field-animations.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/label.ts","../../src/lib/form-field/placeholder.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field-module.ts","../../src/lib/autocomplete/autocomplete.ts","../../src/lib/autocomplete/autocomplete-module.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/disable-ripple.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/grid-list/grid-list-measure.ts","../../src/lib/menu/menu-errors.ts","../../src/lib/select/select-errors.ts","../../src/lib/sort/sort-errors.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/datetime/date-formats.ts","../../src/lib/core/datetime/native-date-formats.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/line/line.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/option/optgroup.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n    OCT = 9, NOV = 10, DEC = 11;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/** Animations used by the Material expansion panel. */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '48px'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '64px'}\n    }),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  SPACE,\n  UP_ARROW,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  CdkConnectedOverlay,\n  Overlay,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  ViewportRuler,\n} from '@angular/cdk/overlay';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {map} from 'rxjs/operators/map';\nimport {switchMap} from 'rxjs/operators/switchMap';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  ControlValueAccessor,\n  FormGroupDirective,\n  NgControl,\n  NgForm\n} from '@angular/forms';\nimport {\n  CanDisable,\n  ErrorStateMatcher,\n  CanUpdateErrorState,\n  mixinErrorState,\n  HasTabIndex,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinTabIndex,\n  MAT_OPTION_PARENT_COMPONENT,\n  mixinDisableRipple,\n  CanDisableRipple,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {Observable} from 'rxjs/Observable';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subject} from 'rxjs/Subject';\nimport {defer} from 'rxjs/observable/defer';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 20px.\n */\nexport const SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 20;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nexport class MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatSelectMixinBase = mixinDisableRipple(\n    mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_ariaLabel',\n    '[attr.aria-labelledby]': 'ariaLabelledby',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanel,\n    matSelectAnimations.fadeInContent\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form. */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Whether the panel's animation is done. */\n  _panelDoneAnimating: boolean = false;\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy = this._scrollStrategyFactory();\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the select is focused. */\n  focused: boolean = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger') trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.options) {\n      return merge(...this.options.map(option => option.onSelectionChange));\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  });\n\n   /** Event emitted when the select has been opened. */\n   @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n   /** Event emitted when the select has been opened. */\n   @Output('opened')\n   get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /**\n   * Event emitted when the select has been opened.\n   * @deprecated Use `openedChange` instead.\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly onOpen: Observable<void> = this._openedStream;\n\n  /**\n   * Event emitted when the select has been closed.\n   * @deprecated Use `openedChange` instead.\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly onClose: Observable<void> = this._closedStream;\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectChange> =\n      new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event emitted when the selected value has been changed by the user.\n   * @deprecated Use `selectionChange` instead.\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly change: EventEmitter<MatSelectChange> = this.selectionChange;\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) private _scrollStrategyFactory) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes.disabled) {\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);\n\n    this._panelOpen = true;\n    this._keyManager.withHorizontalOrientation(null);\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n        keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  /**\n   * When the panel element is finished transforming in (though not fading in), it\n   * emits an event and focuses an option if the panel is open.\n   */\n  _onPanelDone(): void {\n    if (this.panelOpen) {\n      this._scrollTop = 0;\n      this.openedChange.emit(true);\n    } else {\n      this.openedChange.emit(false);\n      this._panelDoneAnimating = false;\n      this.overlayDir.offsetX = 0;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * When the panel content is done fading in, the _panelDoneAnimating property is\n   * set so the proper class can be added to the panel.\n   */\n  _onFadeInDone(): void {\n    this._panelDoneAnimating = this.panelOpen;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this.focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this.focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[], isUserInput = false): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      this._clearSelection();\n\n      const correspondingOption = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(this.options.toArray().indexOf(correspondingOption));\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput = false): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      isUserInput ? correspondingOption._selectViaInteraction() : correspondingOption.select();\n      this._selectionModel.select(correspondingOption);\n      this.stateChanges.next();\n    }\n\n    return correspondingOption;\n  }\n\n\n  /**\n   * Clears the select trigger and deselects every option in the list.\n   * @param skip Option that should not be deselected.\n   */\n  private _clearSelection(skip?: MatOption): void {\n    this._selectionModel.clear();\n    this.options.forEach(option => {\n      if (option !== skip) {\n        option.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\n      .withTypeAhead()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n\n      this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => this.close());\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges\n      .pipe(takeUntil(changedOrDestroyed), filter(event => event.isUserInput))\n      .subscribe(event => {\n        this._onSelect(event.source);\n\n        if (!this.multiple && this._panelOpen) {\n          this.close();\n          this.focus();\n        }\n      });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    // TODO(crisbeto): handle blank/null options inside multi-select.\n    if (this.multiple) {\n      this._selectionModel.toggle(option);\n      this.stateChanges.next();\n      wasSelected ? option.deselect() : option.select();\n      this._keyManager.setActiveItem(this._getOptionIndex(option)!);\n      this._sortValues();\n    } else {\n      this._clearSelection(option.value == null ? undefined : option);\n\n      if (option.value == null) {\n        this._propagateChanges(option.value);\n      } else {\n        this._selectionModel.select(option);\n        this.stateChanges.next();\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.options.forEach(option => {\n        if (option.selected) {\n          this._selectionModel.select(option);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._getOptionIndex(this._selectionModel.selected[0])!);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const itemHeight = this._getItemHeight();\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = MatOption.countGroupLabelsBeforeOption(activeOptionIndex,\n        this.options, this.optionGroups);\n    const scrollOffset = (activeOptionIndex + labelCount) * itemHeight;\n    const panelTop = this.panel.nativeElement.scrollTop;\n\n    if (scrollOffset < panelTop) {\n      this.panel.nativeElement.scrollTop = scrollOffset;\n    } else if (scrollOffset + itemHeight > panelTop + SELECT_PANEL_MAX_HEIGHT) {\n      this.panel.nativeElement.scrollTop =\n          Math.max(0, scrollOffset - SELECT_PANEL_MAX_HEIGHT + itemHeight);\n    }\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += MatOption.countGroupLabelsBeforeOption(selectedOptionOffset,\n        this.options, this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  get _ariaLabel(): string | null {\n    // If an ariaLabelledby value has been set, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors.\n    this.overlayDir.offsetX = offsetX;\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height\n    // difference, multiplied by -1 to ensure that the overlay moves in the correct\n    // direction up the page.\n    return optionOffsetFromPanelTop * -1 - optionHeightAdjustment;\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldPlaceholderFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {\n  ConnectionPositionPair,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConfig,\n  OverlayConnectionPosition,\n  OverlayRef,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take} from 'rxjs/operators/take';\nimport {merge} from 'rxjs/observable/merge';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {matTooltipAnimations} from './tooltip-animations';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/** Creates an error to be thrown if the user supplied an invalid tooltip position. */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition({ scrollThrottle: SCROLL_THROTTLE_MS });\n}\n\n/** @docs-private */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY\n};\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options');\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.google.com/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': '_handleTouchend()',\n  },\n})\nexport class MatTooltip implements OnDestroy {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      // TODO(andrewjs): When the overlay's position can be dynamically changed, do not destroy\n      // the tooltip.\n      if (this._tooltipInstance) {\n        this._disposeTooltip();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Input('tooltip-position')\n  get _positionDeprecated(): TooltipPosition { return this._position; }\n  set _positionDeprecated(value: TooltipPosition) { this._position = value; }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay =\n      this._defaultOptions ? this._defaultOptions.showDelay : 0;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay =\n      this._defaultOptions ? this._defaultOptions.hideDelay : 0;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, Function>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    private _platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) private _scrollStrategy,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions?: MatTooltipDefaultOptions) {\n\n    // TODO(crisbeto): make the `_defaultOptions` a required param next time we do breaking changes.\n    // @deletion-target 6.0.0\n\n    const element: HTMLElement = _elementRef.nativeElement;\n\n    // The mouse events shouldn't be bound on iOS devices, because\n    // they can prevent the first tap from firing its click event.\n    if (!_platform.IOS) {\n      this._manualListeners.set('mouseenter', () => this.show());\n      this._manualListeners.set('mouseleave', () => this.hide());\n\n      this._manualListeners\n        .forEach((listener, event) => _elementRef.nativeElement.addEventListener(event, listener));\n    } else if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS, because it will prevent users from typing in inputs. If\n      // we're on iOS and the tooltip is attached on an input or textarea, we clear\n      // the `user-select` to avoid these issues.\n      element.style.webkitUserSelect = element.style.userSelect = '';\n    }\n\n    _focusMonitor.monitor(element).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin !== 'program') {\n        _ngZone.run(() => this.show());\n      }\n    });\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._tooltipInstance) {\n      this._disposeTooltip();\n    }\n\n    // Clean up the event listeners set in the constructor\n    if (!this._platform.IOS) {\n      this._manualListeners.forEach((listener, event) => {\n        this._elementRef.nativeElement.removeEventListener(event, listener);\n      });\n\n      this._manualListeners.clear();\n    }\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message) { return; }\n\n    if (!this._tooltipInstance) {\n      this._createTooltip();\n    }\n\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(this._position, delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Handles the touchend events on the host element. */\n  _handleTouchend() {\n    this.hide(this._defaultOptions ? this._defaultOptions.touchendHideDelay : 1500);\n  }\n\n  /** Create the tooltip to display */\n  private _createTooltip(): void {\n    const overlayRef = this._createOverlay();\n    const portal = new ComponentPortal(TooltipComponent, this._viewContainerRef);\n\n    this._tooltipInstance = overlayRef.attach(portal).instance;\n\n    // Dispose of the tooltip when the overlay is detached.\n    merge(this._tooltipInstance!.afterHidden(), overlayRef.detachments()).subscribe(() => {\n      // Check first if the tooltip has already been removed through this components destroy.\n      if (this._tooltipInstance) {\n        this._disposeTooltip();\n      }\n    });\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay\n      .position()\n      .connectedTo(this._elementRef, origin.main, overlay.main)\n      .withFallbackPosition(origin.fallback, overlay.fallback);\n\n    const scrollableAncestors = this._scrollDispatcher\n      .getAncestorScrollContainers(this._elementRef);\n\n    strategy.withScrollableContainers(scrollableAncestors);\n\n    strategy.onPositionChange.subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        } else {\n          // Otherwise recalculate the origin based on the new position.\n          this._tooltipInstance._setTransformOrigin(change.connectionPair);\n        }\n      }\n    });\n\n    const config = new OverlayConfig({\n      direction: this._dir ? this._dir.value : 'ltr',\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._overlayRef = this._overlay.create(config);\n\n    return this._overlayRef;\n  }\n\n  /** Disposes the current tooltip and the overlay it is attached to */\n  private _disposeTooltip(): void {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isDirectionLtr = !this._dir || this._dir.value == 'ltr';\n    let position: OriginConnectionPosition;\n\n    if (this.position == 'above' || this.position == 'below') {\n      position = {originX: 'center', originY: this.position == 'above' ? 'top' : 'bottom'};\n    } else if (this.position == 'left' ||\n               this.position == 'before' && isDirectionLtr ||\n               this.position == 'after' && !isDirectionLtr) {\n      position = {originX: 'start', originY: 'center'};\n    } else if (this.position == 'right' ||\n               this.position == 'after' && isDirectionLtr ||\n               this.position == 'before' && !isDirectionLtr) {\n      position = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(this.position);\n    }\n\n    const {x, y} = this._invertPosition(position.originX, position.originY);\n\n    return {\n      main: position,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    let position: OverlayConnectionPosition;\n\n    if (this.position == 'above') {\n      position = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (this.position == 'below') {\n      position = {overlayX: 'center', overlayY: 'top'};\n    } else if (this.position == 'left' ||\n               this.position == 'before' && isLtr ||\n               this.position == 'after' && !isLtr) {\n      position = {overlayX: 'end', overlayY: 'center'};\n    } else if (this.position == 'right' ||\n               this.position == 'after' && isLtr ||\n               this.position == 'before' && !isLtr) {\n      position = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(this.position);\n    }\n\n    const {x, y} = this._invertPosition(position.overlayX, position.overlayY);\n\n    return {\n      main: position,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** The transform origin used in the animation for showing and hiding the tooltip */\n  _transformOrigin: 'top' | 'bottom' | 'left' | 'right' = 'bottom';\n\n  /** Current position of the tooltip. */\n  private _position: TooltipPosition;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private readonly _onHide: Subject<any> = new Subject();\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param position Position of the tooltip.\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(position: TooltipPosition, delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._position = position;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  /** Sets the tooltip transform origin according to the position of the tooltip overlay. */\n  _setTransformOrigin(overlayPosition: ConnectionPositionPair) {\n    const axis = (this._position === 'above' || this._position === 'below') ? 'Y' : 'X';\n    const position = axis == 'X' ? overlayPosition.overlayX : overlayPosition.overlayY;\n\n    if (position === 'top' || position === 'bottom') {\n      this._transformOrigin = position;\n    } else if (position === 'start') {\n      this._transformOrigin = 'left';\n    } else if (position === 'end') {\n      this._transformOrigin = 'right';\n    } else {\n      throw getMatTooltipInvalidPositionError(this._position);\n    }\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      this._closeOnInteraction = true;\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.google.com/components/tooltips.html#tooltips-interaction\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs/Subject';\nimport {MatTabLabel} from './tab-label';\n\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nexport class MatTabBase {}\nexport const _MatTabMixinBase = mixinDisabled(MatTabBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  exportAs: 'matTab',\n})\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n  @ContentChild(MatTabLabel) templateLabel: MatTabLabel;\n\n  /** Template inside the MatTab view that contains an `<ng-content>`. */\n  @ViewChild(TemplateRef) _content: TemplateRef<any>;\n\n  /** The plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** The portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the label changes. */\n  readonly _labelChange = new Subject<void>();\n\n  /** Emits whenever the disable changes */\n  readonly _disableChange = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel')) {\n      this._labelChange.next();\n    }\n\n    if (changes.hasOwnProperty('disabled')) {\n      this._disableChange.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._disableChange.complete();\n    this._labelChange.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(this._content, this._viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material tabs. */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n    state('left', style({transform: 'translate3d(-100%, 0, 0)'})),\n    state('right', style({transform: 'translate3d(100%, 0, 0)'})),\n    transition('* => left, * => right, left => center, right => center',\n        animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ])\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {Subscription} from 'rxjs/Subscription';\nimport {matTabsAnimations} from './tabs-animations';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]'\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** A subscription to events for when the tab body begins centering. */\n  private _centeringSub: Subscription;\n  /** A subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub: Subscription;\n\n  constructor(\n    _componentFactoryResolver: ComponentFactoryResolver,\n    _viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\n      super(_componentFactoryResolver, _viewContainerRef);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  ngOnInit(): void {\n    if (this._host._isCenterPosition(this._host._position)) {\n      this.attach(this._host._content);\n    }\n    this._centeringSub = this._host._beforeCentering.subscribe((isCentering: boolean) => {\n      if (isCentering) {\n        if (!this.hasAttached()) {\n          this.attach(this._host._content);\n        }\n      }\n    });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  /** Clean up centering subscription. */\n  ngOnDestroy(): void {\n    if (this._centeringSub && !this._centeringSub.closed) {\n      this._centeringSub.unsubscribe();\n    }\n\n    if (this._leavingSub && !this._leavingSub.closed) {\n      this._leavingSub.unsubscribe();\n    }\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  },\n})\nexport class MatTabBody implements OnInit {\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() readonly _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() readonly _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal;\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  @Input()\n  set position(position: number) {\n    if (position < 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'left' : 'right';\n    } else if (position > 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n  _position: MatTabBodyPositionState;\n\n  /** The origin position from which this tab should appear when it is centered into view. */\n  @Input()\n  set origin(origin: number) {\n    if (origin == null) { return; }\n\n    const dir = this._getLayoutDirection();\n    if ((dir == 'ltr' && origin <= 0) || (dir == 'rtl' && origin > 0)) {\n      this._origin = 'left';\n    } else {\n      this._origin = 'right';\n    }\n  }\n  _origin: MatTabBodyOriginState;\n\n  constructor(private _elementRef: ElementRef,\n              @Optional() private _dir: Directionality) { }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this._origin) {\n      this._position = this._origin == 'left' ? 'left-origin-center' : 'right-origin-center';\n    }\n  }\n\n  _onTranslateTabStarted(e: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(e.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  _onTranslateTabComplete(e: AnimationEvent): void {\n    // If the transition to the center is complete, emit an event.\n    if (this._isCenterPosition(e.toState) && this._isCenterPosition(this._position)) {\n      this._onCentered.emit();\n    }\n\n    if (this._isCenterPosition(e.fromState) && !this._isCenterPosition(this._position)) {\n      this._afterLeavingCenter.emit();\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\nimport {merge} from 'rxjs/observable/merge';\nimport {\n  CanColor,\n  CanDisableRipple,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette\n} from '@angular/material/core';\n\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nexport class MatTabGroupBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabGroupMixinBase = mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://www.google.com/design/spec/components/tabs.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\n\n  @ViewChild('tabBodyWrapper') _tabBodyWrapper: ElementRef;\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n  private _dynamicHeight: boolean = false;\n\n  /**\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Input('mat-dynamic-height')\n  get _dynamicHeightDeprecated(): boolean { return this._dynamicHeight; }\n  set _dynamicHeightDeprecated(value: boolean) { this._dynamicHeight = value; }\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() readonly focusChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() readonly selectedTabChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\n\n  /**\n   * Event emitted when the tab selection has changed.\n   * @deprecated Use `selectedTabChange` instead.\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly selectChange: EventEmitter<MatTabChangeEvent> = this.selectedTabChange;\n\n  private _groupId: number;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super(elementRef);\n    this._groupId = nextId++;\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked(): void {\n    // Clamp the next selected index to the boundsof 0 and the tabs length.\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    let indexToSelect = this._indexToSelect =\n        Math.min(this._tabs.length - 1, Math.max(this._indexToSelect || 0, 0));\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect && this._selectedIndex != null) {\n      const tabChangeEvent = this._createChangeEvent(indexToSelect);\n      this.selectedTabChange.emit(tabChangeEvent);\n      // Emitting this value after change detection has run\n      // since the checked content may contain this variable'\n      Promise.resolve().then(() => this.selectedIndexChange.emit(indexToSelect));\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n      tab.isActive = index === indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  _focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(\n        ...this._tabs.map(tab => tab._disableChange),\n        ...this._tabs.map(tab => tab._labelChange)).subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    this._tabBodyWrapperHeight = this._tabBodyWrapper.nativeElement.clientHeight;\n    this._tabBodyWrapper.nativeElement.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, idx: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = idx;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nexport class MatTabLabelWrapperBase {}\nexport const _MatTabLabelWrapperMixinBase = mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled'\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {ENTER, LEFT_ARROW, RIGHT_ARROW, SPACE, HOME, END} from '@angular/cdk/keycodes';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, mixinDisableRipple} from '@angular/material/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\n\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n// Boilerplate for applying mixins to MatTabHeader.\n/** @docs-private */\nexport class MatTabHeaderBase {}\nexport const _MatTabHeaderMixinBase = mixinDisableRipple(MatTabHeaderBase);\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends _MatTabHeaderMixinBase\n    implements AfterContentChecked, AfterContentInit, OnDestroy, CanDisableRipple {\n\n  @ContentChildren(MatTabLabelWrapper) _labelWrappers: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer') _tabListContainer: ElementRef;\n  @ViewChild('tabList') _tabList: ElementRef;\n\n  /** The tab index that is focused. */\n  private _focusIndex: number = 0;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Combines listeners that will re-align the ink bar whenever they're invoked. */\n  private _realignInkBar = Subscription.EMPTY;\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  private _selectedIndex: number = 0;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number { return this._selectedIndex; }\n  set selectedIndex(value: number) {\n    value = coerceNumberProperty(value);\n    this._selectedIndexChanged = this._selectedIndex != value;\n    this._selectedIndex = value;\n    this._focusIndex = value;\n  }\n\n  /** Event emitted when the option is selected. */\n  @Output() readonly selectFocusedIndex = new EventEmitter();\n\n  /** Event emitted when a label is focused. */\n  @Output() readonly indexFocused = new EventEmitter();\n\n  constructor(private _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() private _dir: Directionality) {\n    super();\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this._updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case RIGHT_ARROW:\n        this._focusNextTab();\n        break;\n      case LEFT_ARROW:\n        this._focusPreviousTab();\n        break;\n      case HOME:\n        this._focusFirstTab();\n        event.preventDefault();\n        break;\n      case END:\n        this._focusLastTab();\n        event.preventDefault();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        event.preventDefault();\n        break;\n    }\n  }\n\n  /**\n   * Aligns the ink bar to the selected tab on load.\n   */\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this._updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n    this._realignInkBar = merge(dirChange, resize).subscribe(realign);\n  }\n\n  ngOnDestroy() {\n    this._realignInkBar.unsubscribe();\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    this._updatePagination();\n    this._alignInkBarToSelectedTab();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Updating the view whether pagination should be enabled or not\n   */\n  _updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this._focusIndex == value) { return; }\n\n    this._focusIndex = value;\n    this.indexFocused.emit(value);\n    this._setTabFocus(value);\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number { return this._focusIndex; }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /**\n   * Moves the focus towards the beginning or the end of the list depending on the offset provided.\n   * Valid offsets are 1 and -1.\n   */\n  _moveFocus(offset: number) {\n    if (this._labelWrappers) {\n      const tabs: MatTabLabelWrapper[] = this._labelWrappers.toArray();\n\n      for (let i = this.focusIndex + offset; i < tabs.length && i >= 0; i += offset) {\n        if (this._isValidIndex(i)) {\n          this.focusIndex = i;\n          return;\n        }\n      }\n    }\n  }\n\n  /** Increment the focus index by 1 until a valid tab is found. */\n  _focusNextTab(): void {\n    this._moveFocus(this._getLayoutDirection() == 'ltr' ? 1 : -1);\n  }\n\n  /** Decrement the focus index by 1 until a valid tab is found. */\n  _focusPreviousTab(): void {\n    this._moveFocus(this._getLayoutDirection() == 'ltr' ? -1 : 1);\n  }\n\n  /** Focuses the first tab. */\n  private _focusFirstTab(): void {\n    for (let i = 0; i < this._labelWrappers.length; i++) {\n      if (this._isValidIndex(i)) {\n        this.focusIndex = i;\n        break;\n      }\n    }\n  }\n\n  /** Focuses the last tab. */\n  private _focusLastTab(): void {\n    for (let i = this._labelWrappers.length - 1; i > -1; i--) {\n      if (this._isValidIndex(i)) {\n        this.focusIndex = i;\n        break;\n      }\n    }\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    const scrollDistance = this.scrollDistance;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    this._tabList.nativeElement.style.transform = `translate3d(${translateX}px, 0, 0)`;\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  get scrollDistance(): number { return this._scrollDistance; }\n  set scrollDistance(v: number) {\n    this._scrollDistance = Math.max(0, Math.min(this._getMaxScrollDistance(), v));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n  }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(scrollDir: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    this.scrollDistance += (scrollDir == 'before' ? -1 : 1) * viewLength / 3;\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    const selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    const isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  private _alignInkBarToSelectedTab(): void {\n    const selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\n        null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex, RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {Subject} from 'rxjs/Subject';\nimport {MatInkBar} from '../ink-bar';\n\n\n// Boilerplate for applying mixins to MatTabNav.\n/** @docs-private */\nexport class MatTabNavBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabNavMixinBase = mixinColor(MatTabNavBase, 'primary');\n\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  exportAs: 'matTabNavBar, matTabNav',\n  inputs: ['color'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTabNav extends _MatTabNavMixinBase implements AfterContentInit, CanColor,\n    OnDestroy {\n\n  /** Subject that emits when the component has been destroyed. */\n  private readonly _onDestroy = new Subject<void>();\n\n  _activeLinkChanged: boolean;\n  _activeLinkElement: ElementRef;\n\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n\n  /** Query list of all tab links of the tab navigation. */\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true})\n  _tabLinks: QueryList<MatTabLink>;\n\n  /** Background color of the tab nav. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Whether ripples should be disabled for all links or not. */\n  @Input()\n  get disableRipple() { return this._disableRipple; }\n  set disableRipple(value: boolean) {\n    this._disableRipple = coerceBooleanProperty(value);\n    this._setLinkDisableRipple();\n  }\n  private _disableRipple: boolean = false;\n\n  constructor(elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler) {\n    super(elementRef);\n  }\n\n  /** Notifies the component that the active link has been changed. */\n  updateActiveLink(element: ElementRef) {\n    this._activeLinkChanged = this._activeLinkElement != element;\n    this._activeLinkElement = element;\n\n    if (this._activeLinkChanged) {\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      const dirChange = this._dir ? this._dir.change : observableOf(null);\n\n      return merge(dirChange, this._viewportRuler.change(10)).pipe(takeUntil(this._onDestroy))\n          .subscribe(() => this._alignInkBar());\n    });\n\n    this._setLinkDisableRipple();\n  }\n\n  /** Checks if the active link has been changed and, if so, will update the ink bar. */\n  ngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Aligns the ink bar to the active link. */\n  _alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    }\n  }\n\n  /** Sets the `disableRipple` property on each link of the navigation bar. */\n  private _setLinkDisableRipple() {\n    if (this._tabLinks) {\n      this._tabLinks.forEach(link => link.disableRipple = this.disableRipple);\n    }\n  }\n}\n\n\n// Boilerplate for applying mixins to MatTabLink.\nexport class MatTabLinkBase {}\nexport const _MatTabLinkMixinBase =\n  mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\n\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n@Directive({\n  selector: '[mat-tab-link], [matTabLink]',\n  exportAs: 'matTabLink',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabIndex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled',\n    '[class.mat-tab-label-active]': 'active',\n    '(click)': '_handleClick($event)'\n  }\n})\nexport class MatTabLink extends _MatTabLinkMixinBase\n    implements OnDestroy, CanDisable, CanDisableRipple, HasTabIndex, RippleTarget {\n\n  /** Whether the tab link is active or not. */\n  private _isActive: boolean = false;\n\n  /** Reference to the RippleRenderer for the tab-link. */\n  private _tabLinkRipple: RippleRenderer;\n\n  /** Whether the link is active. */\n  @Input()\n  get active(): boolean { return this._isActive; }\n  set active(value: boolean) {\n    this._isActive = value;\n    if (value) {\n      this._tabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple;\n  }\n\n  constructor(private _tabNavBar: MatTabNav,\n              private _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Attribute('tabindex') tabIndex: string) {\n    super();\n\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._tabLinkRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    if (globalOptions) {\n      this.rippleConfig = {\n        speedFactor: globalOptions.baseSpeedFactor,\n        animation: globalOptions.animation,\n      };\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabLinkRipple._removeTriggerEvents();\n  }\n\n  /**\n   * Handles the click event, preventing default navigation if the tab link is disabled.\n   */\n  _handleClick(event: MouseEvent) {\n    if (this.disabled) {\n      event.preventDefault();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {ScrollDispatchModule, VIEWPORT_RULER_PROVIDER} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n    ScrollDispatchModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader\n  ],\n  providers: [VIEWPORT_RULER_PROVIDER],\n})\nexport class MatTabsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nexport class MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatToolbarMixinBase = mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': 'this._toolbarRows.length',\n    '[class.mat-toolbar-single-row]': '!this._toolbarRows.length'\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n  private _document: Document;\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(\n    elementRef: ElementRef,\n    private _platform: Platform,\n    @Inject(DOCUMENT) document?: any) {\n    super(elementRef);\n\n    // TODO: make the document a required param when doing breaking changes.\n    this._document = document;\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = [].slice.call(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n      .some(node => node.textContent.trim());\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('5.1.0-e6e4c3c');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, UP_ARROW, TAB} from '@angular/cdk/keycodes';\nimport {\n  ConnectedPositionStrategy,\n  Overlay,\n  OverlayRef,\n  OverlayConfig,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {switchMap} from 'rxjs/operators/switchMap';\nimport {tap} from 'rxjs/operators/tap';\nimport {delay} from 'rxjs/operators/delay';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {MatOption, MatOptionSelectionChange} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {DOCUMENT} from '@angular/common';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {defer} from 'rxjs/observable/defer';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatAutocomplete} from './autocomplete';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    'role': 'combobox',\n    'autocomplete': 'off',\n    'aria-autocomplete': 'list',\n    '[attr.aria-activedescendant]': 'activeOption?.id',\n    '[attr.aria-expanded]': 'panelOpen.toString()',\n    '[attr.aria-owns]': 'autocomplete?.id',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal;\n  private _panelOpen: boolean = false;\n  private _componentDestroyed = false;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: ConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Stream of keyboard events that can close the panel. */\n  private readonly _closeKeyEventStream = new Subject<void>();\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when autocomplete has been touched` */\n  _onTouched = () => {};\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  constructor(private _element: ElementRef, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any) {}\n\n  ngOnDestroy() {\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen && this.autocomplete.showPanel;\n  }\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (this._panelOpen) {\n      this.autocomplete._isOpen = this._panelOpen = false;\n\n      if (this._overlayRef && this._overlayRef.hasAttached()) {\n        this._overlayRef.detach();\n        this._closingActionsSubscription.unsubscribe();\n      }\n\n      // Note that in some cases this can end up being called after the component is destroyed.\n      // Add a check to ensure that we don't try to run change detection on a destroyed view.\n      if (!this._componentDestroyed) {\n        // We need to trigger change detection manually, because\n        // `fromEvent` doesn't seem to do it at the proper time.\n        // This ensures that the label is reset when the\n        // user clicks outside.\n        this._changeDetectorRef.detectChanges();\n      }\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._panelOpen)),\n      this._closeKeyEventStream,\n      this._outsideClickStream,\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._panelOpen)) :\n          observableOf()\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  readonly optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .asObservable()\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  });\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private get _outsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return merge(\n      fromEvent(this._document, 'click'),\n      fromEvent(this._document, 'touchend')\n    )\n    .pipe(filter((event: MouseEvent | TouchEvent) => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._panelOpen &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  /**\n   * Sets the autocomplete's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  /**\n   * Saves a callback function to be invoked when the autocomplete's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the autocomplete is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the input. Implemented as a part of `ControlValueAccessor`.\n   * @param isDisabled Whether the component should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n    // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n    if (this.panelOpen && (keyCode === ESCAPE || (keyCode === UP_ARROW && event.altKey))) {\n      this._resetActiveItem();\n      this._closeKeyEventStream.next();\n      event.stopPropagation();\n    } else if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    // We need to ensure that the input is focused, because IE will fire the `input`\n    // event on focus/blur/load if the input has a placeholder. See:\n    // https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._canOpen() && document.activeElement === event.target) {\n      this._onChange((event.target as HTMLInputElement).value);\n      this.openPanel();\n    }\n  }\n\n  _handleFocus(): void {\n    if (this._canOpen()) {\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const activeOptionIndex = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = MatOption.countGroupLabelsBeforeOption(activeOptionIndex,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n    const optionOffset = (activeOptionIndex + labelCount) * AUTOCOMPLETE_OPTION_HEIGHT;\n    const panelTop = this.autocomplete._getScrollTop();\n\n    if (optionOffset < panelTop) {\n      // Scroll up to reveal selected option scrolled above the panel top\n      this.autocomplete._setScrollTop(optionOffset);\n    } else if (optionOffset + AUTOCOMPLETE_OPTION_HEIGHT > panelTop + AUTOCOMPLETE_PANEL_HEIGHT) {\n      // Scroll down to reveal selected option scrolled below the panel bottom\n      const newScrollTop = optionOffset - AUTOCOMPLETE_PANEL_HEIGHT + AUTOCOMPLETE_OPTION_HEIGHT;\n      this.autocomplete._setScrollTop(Math.max(0, newScrollTop));\n    }\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.recalculateLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n      .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n          this._resetActiveItem();\n          this.autocomplete._setVisibility();\n          return this.panelClosingActions;\n        }),\n        // when the first closing event occurs...\n        take(1)\n      )\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      this._overlayRef = this._overlay.create(this._getOverlayConfig());\n    } else {\n      /** Update the panel width, in case the host width has changed */\n      this._overlayRef.updateSize({width: this._getHostWidth()});\n    }\n\n    if (this._overlayRef && !this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._panelOpen = true;\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getHostWidth(),\n      direction: this._dir ? this._dir.value : 'ltr'\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy = this._overlay.position().connectedTo(\n        this._getConnectedElement(),\n        {originX: 'start', originY: 'bottom'}, {overlayX: 'start', overlayY: 'top'})\n        .withFallbackPosition(\n            {originX: 'start', originY: 'top'}, {overlayX: 'start', overlayY: 'bottom'}\n        );\n    return this._positionStrategy;\n  }\n\n  private _getConnectedElement(): ElementRef {\n    return this._formField ? this._formField._connectionContainerRef : this._element;\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n  }\n\n  /** Determines whether the panel can be opened. */\n  private _canOpen(): boolean {\n    const element: HTMLInputElement = this._element.nativeElement;\n    return !element.readOnly && !element.disabled;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector} from '@angular/cdk/portal';\nimport {ComponentRef, Injectable, Injector, Optional, SkipSelf} from '@angular/core';\nimport {take} from 'rxjs/operators/take';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable()\nexport class MatSnackBar {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig): MatSnackBarRef<T> {\n    const _config = _applyConfigDefaults(config);\n    const snackBarRef = this._attach(component, _config);\n\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (_config.duration && _config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(_config!.duration!));\n    }\n\n    if (_config.announcementMessage) {\n      this._live.announce(_config.announcementMessage, _config.politeness);\n    }\n\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = _applyConfigDefaults(config);\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n    _config.announcementMessage = message;\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n    const containerPortal = new ComponentPortal(MatSnackBarContainer, config.viewContainerRef);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component as the content of the snack bar container.\n   */\n  private _attach<T>(component: ComponentType<T>, config: MatSnackBarConfig): MatSnackBarRef<T> {\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T>(container, overlayRef);\n    const injector = this._createInjector(config, snackBarRef);\n    const portal = new ComponentPortal(component, undefined, injector);\n    const contentRef = container.attachComponentPortal(portal);\n\n    // We can't pass this via the injector, because the injector is created earlier.\n    snackBarRef.instance = contentRef.instance;\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\n      takeUntil(overlayRef.detachments().pipe(take(1)))\n    ).subscribe(state => {\n      if (state.matches) {\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n      } else {\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n      }\n    });\n\n    return snackBarRef;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap();\n\n    injectionTokens.set(MatSnackBarRef, snackBarRef);\n    injectionTokens.set(MAT_SNACK_BAR_DATA, config.data);\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the snackbar config.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(config?: MatSnackBarConfig): MatSnackBarConfig {\n  return {...new MatSnackBarConfig(), ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {LIVE_ANNOUNCER_PROVIDER} from '@angular/cdk/a11y';\nimport {LayoutModule} from '@angular/cdk/layout';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatSnackBar} from './snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {SimpleSnackBar} from './simple-snack-bar';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatCommonModule,\n    LayoutModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n  providers: [MatSnackBar, LIVE_ANNOUNCER_PROVIDER]\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  Output,\n  OnChanges,\n  OnDestroy,\n} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortInvalidDirectionError,\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError\n} from './sort-errors';\nimport {Subject} from 'rxjs/Subject';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nexport class MatSortBase {}\nexport const _MatSortMixinBase = mixinDisabled(MatSortBase);\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase implements CanDisable, OnChanges, OnDestroy {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  get direction(): SortDirection { return this._direction; }\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable): void {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable): void {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable): void {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.emit({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\nimport {SortDirection} from './sort-direction';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable()\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n\n  /** A label to describe the current sort (visible only to screenreaders). */\n  sortDescriptionLabel = (id: string, direction: SortDirection) => {\n    return `Sorted by ${id} ${direction == 'asc' ? 'ascending' : 'descending'}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/** Animations used by MatSort. */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly indicatorToggle: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('desc', style({transform: 'translateY(10px)'})),\n    transition('asc <=> desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('asc', style({transform: 'rotate(-45deg)'})),\n    state('desc', style({transform: 'rotate(45deg)'})),\n    transition('asc <=> desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('asc', style({transform: 'rotate(45deg)'})),\n    state('desc', style({transform: 'rotate(-45deg)'})),\n    transition('asc <=> desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that moves the indicator in and out of view when sorting is enabled/disabled. */\n  indicatorToggle: trigger('indicatorToggle', [\n    transition('void => asc', animate(SORT_ANIMATION_TRANSITION, keyframes([\n      style({transform: 'translateY(25%)', opacity: 0}),\n      style({transform: 'none', opacity: 1})\n    ]))),\n    transition('asc => void', animate(SORT_ANIMATION_TRANSITION, keyframes([\n      style({transform: 'none', opacity: 1}),\n      style({transform: 'translateY(-25%)', opacity: 0})\n    ]))),\n    transition('void => desc', animate(SORT_ANIMATION_TRANSITION, keyframes([\n      style({transform: 'translateY(-25%)', opacity: 0}),\n      style({transform: 'none', opacity: 1})\n    ]))),\n    transition('desc => void', animate(SORT_ANIMATION_TRANSITION, keyframes([\n      style({transform: 'none', opacity: 1}),\n      style({transform: 'translateY(25%)', opacity: 0})\n    ]))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkColumnDef} from '@angular/cdk/table';\nimport {Subscription} from 'rxjs/Subscription';\nimport {merge} from 'rxjs/observable/merge';\nimport {MatSort, MatSortable} from './sort';\nimport {MatSortHeaderIntl} from './sort-header-intl';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {matSortAnimations} from './sort-animations';\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nexport class MatSortHeaderBase {}\nexport const _MatSortHeaderMixinBase = mixinDisabled(MatSortHeaderBase);\n\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_handleClick()',\n    '[class.mat-sort-header-sorted]': '_isSorted()',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.indicatorToggle\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase implements MatSortable, CanDisable {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input() start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Optional() public _cdkColumnDef: CdkColumnDef) {\n\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n      .subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    if (!this.id && this._cdkColumnDef) {\n      this.id = this._cdkColumnDef.name;\n    }\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /** Handles click events on the header. */\n  _handleClick() {\n    if (!this._isDisabled()) {\n      this._sort.sort(this);\n    }\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n\n@Directive({\n  selector: '[matStepLabel]',\n})\nexport class MatStepLabel extends CdkStepLabel {\n  constructor(template: TemplateRef<any>) {\n    super(template);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** Stepper data that is required for internationalization. */\n@Injectable()\nexport class MatStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** Label that is rendered below optional steps. */\n  optionalLabel: string = 'Optional';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperIntl} from './stepper-intl';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStepHeader implements OnDestroy {\n  private _intlSubscription: Subscription;\n\n  /** Icon for the given step. */\n  @Input() icon: string;\n\n  /** Label of the given step. */\n  @Input() label: MatStepLabel | string;\n\n  /** Index of the given step. */\n  @Input()\n  get index(): number { return this._index; }\n  set index(value: number) { this._index = coerceNumberProperty(value); }\n  private _index: number;\n\n  /** Whether the given step is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) { this._selected = coerceBooleanProperty(value); }\n  private _selected: boolean;\n\n  /** Whether the given step label is active. */\n  @Input()\n  get active(): boolean { return this._active; }\n  set active(value: boolean) { this._active = coerceBooleanProperty(value); }\n  private _active: boolean;\n\n  /** Whether the given step is optional. */\n  @Input()\n  get optional(): boolean { return this._optional; }\n  set optional(value: boolean) { this._optional = coerceBooleanProperty(value); }\n  private _optional: boolean;\n\n  constructor(\n    public _intl: MatStepperIntl,\n    private _focusMonitor: FocusMonitor,\n    private _element: ElementRef,\n    changeDetectorRef: ChangeDetectorRef) {\n    _focusMonitor.monitor(_element.nativeElement, true);\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n\n  /** Returns string label of given step if it is a text label. */\n  _stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n\n  /** Returns MatStepLabel if the label of given step is a template label. */\n  _templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n\n  /** Returns the host HTML element. */\n  _getHostElement() {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material steppers. */\nexport const matStepperAnimations: {\n  readonly horizontalStepTransition: AnimationTriggerMetadata;\n  readonly verticalStepTransition: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions the step along the X axis in a horizontal stepper. */\n  horizontalStepTransition: trigger('stepTransition', [\n    state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n    state('current', style({transform: 'none', visibility: 'visible'})),\n    state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n    transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n  ]),\n\n  /** Animation that transitions the step along the Y axis in a vertical stepper. */\n  verticalStepTransition: trigger('stepTransition', [\n    state('previous', style({height: '0px', visibility: 'hidden'})),\n    state('next', style({height: '0px', visibility: 'hidden'})),\n    state('current', style({height: '*', visibility: 'visible'})),\n    transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkStep, CdkStepper} from '@angular/cdk/stepper';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  AfterContentInit,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  QueryList,\n  SkipSelf,\n  ViewChildren,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n  Optional,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {matStepperAnimations} from './stepper-animations';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: ErrorStateMatcher, useExisting: MatStep}],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matStep',\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\n  /** Content for step label given by `<ng-template matStepLabel>`. */\n  @ContentChild(MatStepLabel) stepLabel: MatStepLabel;\n\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher) {\n    super(stepper);\n  }\n\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    const customErrorState = !!(control && control.invalid && this.interacted);\n\n    return originalErrorState || customErrorState;\n  }\n}\n\n@Directive({\n  selector: '[matStepper]'\n})\nexport class MatStepper extends CdkStepper implements AfterContentInit {\n  /** The list of step headers of the steps in the stepper. */\n  @ViewChildren(MatStepHeader, {read: ElementRef}) _stepHeader: QueryList<ElementRef>;\n\n  /** Steps that the stepper holds. */\n  @ContentChildren(MatStep) _steps: QueryList<MatStep>;\n\n  ngAfterContentInit() {\n    // Mark the component for change detection whenever the content children query changes\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-horizontal-stepper',\n  exportAs: 'matHorizontalStepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    'aria-orientation': 'horizontal',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.horizontalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatHorizontalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatHorizontalStepper extends MatStepper { }\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-vertical-stepper',\n  exportAs: 'matVerticalStepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'aria-orientation': 'vertical',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.verticalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatVerticalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatVerticalStepper extends MatStepper {\n  constructor(@Optional() dir: Directionality, changeDetectorRef: ChangeDetectorRef) {\n    super(dir, changeDetectorRef);\n    this._orientation = 'vertical';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepper, CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {MatStepper} from './stepper';\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperNext]',\n  host: {\n    '(click)': '_stepper.next()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperNext extends CdkStepperNext {}\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperPrevious]',\n  host: {\n    '(click)': '_stepper.previous()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperPrevious extends CdkStepperPrevious {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatCommonModule, MatRippleModule, ErrorStateMatcher} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nimport {MatStepperIntl} from './stepper-intl';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule,\n    A11yModule,\n    MatRippleModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader\n  ],\n  declarations: [MatHorizontalStepper, MatVerticalStepper, MatStep, MatStepLabel, MatStepper,\n    MatStepperNext, MatStepperPrevious, MatStepHeader],\n  providers: [MatStepperIntl, ErrorStateMatcher],\n})\nexport class MatStepperModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTable<T> extends CdkTable<T> { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends CdkCellDef { }\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends CdkHeaderCellDef { }\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [{provide: CdkColumnDef, useExisting: MatColumnDef}],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Directive, ViewEncapsulation} from '@angular/core';\nimport {\n  CDK_ROW_TEMPLATE,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef,\n} from '@angular/cdk/table';\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef'],\n})\nexport class MatHeaderRowDef extends CdkHeaderRowDef { }\n\n/**\n * Data row definition for the mat-table.\n * Captures the header row's template and other row properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends CdkRowDef<T> {\n}\n\n/** Header template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n  preserveWhitespaces: false,\n})\nexport class MatHeaderRow extends CdkHeaderRow { }\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n  preserveWhitespaces: false,\n})\nexport class MatRow extends CdkRow { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {MatCell, MatCellDef, MatColumnDef, MatHeaderCell, MatHeaderCellDef} from './cell';\nimport {MatHeaderRow, MatHeaderRowDef, MatRow, MatRowDef} from './row';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\n@NgModule({\n  imports: [CdkTableModule, CommonModule, MatCommonModule],\n  exports: [MatTable, MatCellDef, MatHeaderCellDef, MatColumnDef,\n    MatHeaderCell, MatCell, MatHeaderRow, MatRow,\n    MatHeaderRowDef, MatRowDef],\n  declarations: [MatTable, MatCellDef, MatHeaderCellDef, MatColumnDef,\n    MatHeaderCell, MatCell, MatHeaderRow, MatRow,\n    MatHeaderRowDef, MatRowDef],\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DataSource} from '@angular/cdk/table';\nimport {BehaviorSubject} from 'rxjs/BehaviorSubject';\nimport {MatPaginator} from '@angular/material/paginator';\nimport {MatSort} from '@angular/material/sort';\nimport {Subscription} from 'rxjs/Subscription';\nimport {combineLatest} from 'rxjs/operators/combineLatest';\nimport {map} from 'rxjs/operators/map';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {empty} from 'rxjs/observable/empty';\nimport {_isNumberValue} from '@angular/cdk/coercion';\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport class MatTableDataSource<T> implements DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private readonly _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private readonly _filter = new BehaviorSubject<string>('');\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription: Subscription;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() { return this._data.value; }\n  set data(data: T[]) { this._data.next(data); }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter(): string { return this._filter.value; }\n  set filter(filter: string) { this._filter.next(filter); }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort(): MatSort | null { return this._sort; }\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): MatPaginator | null { return this._paginator; }\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting through\n   * the default sortData function.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value: any = data[sortHeaderId];\n    return _isNumberValue(value) ? Number(value) : value;\n  }\n\n  /**\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n   * By default, the function retrieves the active sort and its direction and compares data\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n   * of data ordering.\n   * @param data The array of data that should be sorted.\n   * @param sort The connected MatSort that holds the current sort state.\n   */\n  sortData: ((data: T[], sort: MatSort) => T[]) = (data: T[], sort: MatSort): T[] => {\n    const active = sort.active;\n    const direction = sort.direction;\n    if (!active || direction == '') { return data; }\n\n    return data.sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n      // one value exists while the other doesn't. In this case, existing value should come first.\n      // This avoids inconsistent results when comparing values to undefined/null.\n      // If neither value exists, return 0 (equal).\n      let comparatorResult = 0;\n      if (valueA && valueB) {\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      } else if (valueA) {\n        comparatorResult = 1;\n      } else if (valueB) {\n        comparatorResult = -1;\n      }\n\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const accumulator = (currentTerm, key) => currentTerm + data[key];\n    const dataStr = Object.keys(data).reduce(accumulator, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // Otherwise, use an empty observable stream to take their place.\n    const sortChange = this._sort ? this._sort.sortChange : empty();\n    const pageChange = this._paginator ? this._paginator.page : empty();\n\n    if (this._renderChangesSubscription) {\n      this._renderChangesSubscription.unsubscribe();\n    }\n\n    // Watch for base data or filter changes to provide a filtered set of data.\n    this._renderChangesSubscription = this._data.pipe(\n      combineLatest(this._filter),\n      map(([data]) => this._filterData(data)),\n      // Watch for filtered data or sort changes to provide an ordered set of data.\n      combineLatest(sortChange.pipe(startWith(null!))),\n      map(([data]) => this._orderData(data)),\n      // Watch for ordered data or page changes to provide a paged set of data.\n      combineLatest(pageChange.pipe(startWith(null!))),\n      map(([data]) => this._pageData(data))\n    )\n    // Watched for paged data changes and send the result to the table to render.\n    .subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overridden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) { return data; }\n\n    return this.sortData(data.slice(), this.sort);\n  }\n\n  /**\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice().splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      if (!this.paginator) { return; }\n\n      this.paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (this.paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(this.paginator.length / this.paginator.pageSize) - 1 || 0;\n        this.paginator.pageIndex = Math.min(this.paginator.pageIndex, lastPageIndex);\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, NgZone} from '@angular/core';\n\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone) {}\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n  private _setStyles(element: HTMLElement) {\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\n\n    inkBar.style.left = element ? (element.offsetLeft || 0) + 'px' : '0';\n    inkBar.style.width = element ? (element.offsetWidth || 0) + 'px' : '0';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef, ViewContainerRef} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n})\nexport class MatTabLabel extends CdkPortal {\n  constructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\n    super(templateRef, viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HammerInput,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nexport class MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSlideToggleMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n    ControlValueAccessor, CanDisable, CanColor, HasTabIndex, CanDisableRipple {\n\n  private onChange = (_: any) => {};\n  private onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _slideRenderer: SlideToggleRenderer;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Reference to the focus state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the slide-toggle element is checked or not */\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\n      new EventEmitter<MatSlideToggleChange>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** Reference to the ripple directive on the thumb container. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string) {\n\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._slideRenderer = new SlideToggleRenderer(this._elementRef, this._platform);\n\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back.\n    if (this._slideRenderer.dragging) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      // For keyboard focus show a persistent ripple as focus indicator.\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      this.onTouched();\n\n      // Fade out and clear the focus ripple if one is currently present.\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this.onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  _onDragStart() {\n    if (!this.disabled) {\n      this._slideRenderer.startThumbDrag(this.checked);\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._slideRenderer.dragging) {\n      this._slideRenderer.updateThumbPosition(event.deltaX);\n    }\n  }\n\n  _onDragEnd() {\n    if (this._slideRenderer.dragging) {\n      const newCheckedValue = this._slideRenderer.dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.checked = newCheckedValue;\n        this._emitChangeEvent();\n      }\n\n      // The drag should be stopped outside of the current event handler, because otherwise the\n      // click event will be fired before and will revert the drag change.\n      setTimeout(() => this._slideRenderer.stopThumbDrag());\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the slide-toggle changes.\n    // Since the slide-toggle uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n\n/**\n * Renderer for the Slide Toggle component, which separates DOM modification in its own class\n */\nclass SlideToggleRenderer {\n\n  /** Reference to the thumb HTMLElement. */\n  private _thumbEl: HTMLElement;\n\n  /** Reference to the thumb bar HTMLElement. */\n  private _thumbBarEl: HTMLElement;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  dragPercentage: number;\n\n  /** Whether the thumb is currently being dragged. */\n  dragging: boolean = false;\n\n  constructor(elementRef: ElementRef, platform: Platform) {\n    // We only need to interact with these elements when we're on the browser, so only grab\n    // the reference in that case.\n    if (platform.isBrowser) {\n      this._thumbEl = elementRef.nativeElement.querySelector('.mat-slide-toggle-thumb-container');\n      this._thumbBarEl = elementRef.nativeElement.querySelector('.mat-slide-toggle-bar');\n    }\n  }\n\n  /** Initializes the drag of the slide-toggle. */\n  startThumbDrag(checked: boolean): void {\n    if (this.dragging) { return; }\n\n    this._thumbBarWidth = this._thumbBarEl.clientWidth - this._thumbEl.clientWidth;\n    this._thumbEl.classList.add('mat-dragging');\n\n    this._previousChecked = checked;\n    this.dragging = true;\n  }\n\n  /** Resets the current drag and returns the new checked value. */\n  stopThumbDrag(): boolean {\n    if (!this.dragging) { return false; }\n\n    this.dragging = false;\n    this._thumbEl.classList.remove('mat-dragging');\n\n    // Reset the transform because the component will take care of the thumb position after drag.\n    this._thumbEl.style.transform = '';\n\n    return this.dragPercentage > 50;\n  }\n\n  /** Updates the thumb containers position from the specified distance. */\n  updateThumbPosition(distance: number): void {\n    this.dragPercentage = this._getDragPercentage(distance);\n    // Calculate the moved distance based on the thumb bar width.\n    const dragX = (this.dragPercentage / 100) * this._thumbBarWidth;\n    this._thumbEl.style.transform = `translate3d(${dragX}px, 0, 0)`;\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {\n  GestureConfig,\n  MatCommonModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatSlideToggle} from './slide-toggle';\n\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, PlatformModule, ObserversModule, A11yModule],\n  exports: [MatSlideToggle, MatCommonModule],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  HammerInput,\n  HasTabIndex,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {Subscription} from 'rxjs/Subscription';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nexport class MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSliderMixinBase =\n  mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(click)': '_onClick($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert(): boolean { return this._invert; }\n  set invert(value: boolean) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundLabelTo = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value: boolean) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /**\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Input('thumb-label')\n  get _thumbLabelDeprecated(): boolean { return this._thumbLabel; }\n  set _thumbLabelDeprecated(value) { this._thumbLabel = value; }\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /**\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Input('tick-interval')\n  get _tickIntervalDeprecated() { return this.tickInterval; }\n  set _tickIntervalDeprecated(v) { this.tickInterval = v; }\n\n  /** Value of the slider. */\n  @Input()\n  get value(): number | null {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      this._value = coerceNumberProperty(v, this._value || 0);\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() readonly change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() readonly input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundLabelTo && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundLabelTo);\n    }\n\n    return this.value || 0;\n  }\n\n  /** set focus to the host element */\n  focus() {\n    this._focusHostElement();\n  }\n\n  /** blur the host element */\n  blur() {\n    this._blurHostElement();\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    let sign = this._invertMouseCoords ? '-' : '';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${1 - this.percent})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    let sign = this._invertMouseCoords ? '' : '-';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${this.percent})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._direction == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._direction == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._direction == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundLabelTo: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper') private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  private get _invertMouseCoords() {\n    return (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private get _direction() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef.nativeElement, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onClick(event: MouseEvent) {\n    if (this.disabled) {\n      return;\n    }\n\n    let oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    // Emit a change and input event if the value changed.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value && !this.disabled) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled) { return; }\n\n    let oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._direction == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._direction == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n    if (this._invertMouseCoords) {\n      percent = 1 - percent;\n    }\n    let exactValue = this._calculateValue(percent);\n\n    // This calculation finds the closest step by finding the closest whole number divisible by the\n    // step relative to the min.\n    let closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n    // The value needs to snap to the min and max.\n    this.value = this._clamp(closestValue, this.min, this.max);\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Blurs the native element. */\n  private _blurHostElement() {\n    this._elementRef.nativeElement.blur();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to eb triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {BidiModule} from '@angular/cdk/bidi';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule, BidiModule, A11yModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n  /** Whether the snack bar was dismissed using the action button. */\n  dismissedByAction: boolean;\n}\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has been dismissed. */\n  private readonly _afterDismissed = new Subject<MatSnackBarDismiss>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private readonly _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  /** Whether the snack bar was dismissed using the action button. */\n  private _dismissedByAction = false;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  dismissWithAction(): void {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   */\n  closeWithAction(): void {\n    this.dismissWithAction();\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<MatSnackBarDismiss> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /** Message to be announced by the MatAriaLiveAnnouncer */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /**\n   * Extra CSS classes to be added to the snack bar container.\n   * @deprecated Use `panelClass` instead.\n   * @deletion-target 6.0.0\n   */\n  extraClasses?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction = 'ltr';\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** @docs-private */\nexport const SHOW_ANIMATION =\n  `${AnimationDurations.ENTERING} ${AnimationCurves.DECELERATION_CURVE}`;\n\n/** @docs-private */\nexport const HIDE_ANIMATION =\n  `${AnimationDurations.EXITING} ${AnimationCurves.ACCELERATION_CURVE}`;\n\n/** Animations used by the Material snack bar. */\nexport const matSnackBarAnimations: {\n  readonly contentFade: AnimationTriggerMetadata;\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  contentFade: trigger('contentFade', [\n    transition(':enter', [\n      style({opacity: '0'}),\n      animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.STANDARD_CURVE}`)\n    ])\n  ]),\n\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('visible-top, visible-bottom', style({transform: 'translateY(0%)'})),\n    transition('visible-top => hidden-top, visible-bottom => hidden-bottom',\n      animate(HIDE_ANIMATION)),\n    transition('void => visible-top, void => visible-bottom', animate(SHOW_ANIMATION)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\nimport {matSnackBarAnimations} from './snack-bar-animations';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matSnackBarAnimations.contentFade],\n  host: {\n    '[@contentFade]': '',\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: { message: string, action: string };\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.dismissWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  NgZone,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {take} from 'rxjs/operators/take';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {MatSnackBarConfig} from './snack-bar-config';\nimport {matSnackBarAnimations} from './snack-bar-animations';\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    'role': 'alert',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  readonly _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  readonly _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  /** The snack bar configuration. */\n  snackBarConfig: MatSnackBarConfig;\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n\n    const element: HTMLElement = this._elementRef.nativeElement;\n\n    if (this.snackBarConfig.panelClass || this.snackBarConfig.extraClasses) {\n      this._setCssClasses(this.snackBarConfig.panelClass);\n      this._setCssClasses(this.snackBarConfig.extraClasses);\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal(): EmbeddedViewRef<any> {\n    throw Error('Not yet implemented');\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState.startsWith('hidden')) {\n      this._completeExit();\n    }\n\n    if (toState.startsWith('visible')) {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = `visible-${this.snackBarConfig.verticalPosition}`;\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    this._animationState = `hidden-${this.snackBarConfig.verticalPosition}`;\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the user-specified list of CSS classes to the element. */\n  private _setCssClasses(classList: undefined|string|string[]) {\n    if (!classList) {\n      return;\n    }\n\n    const element = this._elementRef.nativeElement;\n\n    if (Array.isArray(classList)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      classList.forEach(cssClass => element.classList.add(cssClass));\n    } else {\n      element.classList.add(classList);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  constructor(\n    /** The MatRadioButton that emits the change event. */\n    public source: MatRadioButton,\n    /** The value of the MatRadioButton. */\n    public value: any) {}\n}\n\n\n// Boilerplate for applying mixins to MatRadioGroup.\n/** @docs-private */\nexport class MatRadioGroupBase { }\nexport const _MatRadioGroupMixinBase = mixinDisabled(MatRadioGroupBase);\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n  inputs: ['disabled'],\n})\nexport class MatRadioGroup extends _MatRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n  /**\n   * Selected value for group. Should equal the value of the selected radio button if there *is*\n   * a corresponding radio button with a matching value. If there is *not* such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /**\n   * Alignment of the radio-buttons relative to their labels. Can be 'before' or 'after'.\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Input()\n  get align(): 'start' | 'end' {\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\n    // label relative to the checkbox. As such, they are inverted.\n    return this.labelPosition == 'after' ? 'start' : 'end';\n  }\n  set align(v) {\n    this.labelPosition = (v == 'start') ? 'after' : 'before';\n  }\n\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n  set labelPosition(v) {\n    this._labelPosition = (v == 'before') ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /** Value of the radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value != newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /** Whether the radio button is selected. */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected != null && this._selected.value == this._value;\n\n    if (this._radios != null && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value == radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new MatRadioChange(this._selected!, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nexport class MatRadioButtonBase {\n  // Since the disabled property is manually defined for the MatRadioButton and isn't set up in\n  // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n  // defined to properly work.\n  disabled: boolean;\n\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nexport const _MatRadioButtonMixinBase =\n    mixinColor(mixinDisableRipple(mixinTabIndex(MatRadioButtonBase)), 'accent');\n\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['color', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, CanDisableRipple, HasTabIndex {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n\n    if (this._checked != newCheckedState) {\n      this._checked = newCheckedState;\n\n      if (newCheckedState && this.radioGroup && this.radioGroup.value != this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value == this.value) {\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value != value) {\n      this._value = value;\n      if (this.radioGroup != null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value == value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /**\n   * Whether or not the radio-button should appear before or after the label.\n   * @deprecated\n   * @deletion-target\n   */\n  @Input()\n  get align(): 'start' | 'end' {\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\n    // label relative to the checkbox. As such, they are inverted.\n    return this.labelPosition == 'after' ? 'start' : 'end';\n  }\n  set align(v) {\n    this.labelPosition = (v == 'start') ? 'after' : 'before';\n  }\n\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup != null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio. */\n  private _value: any = null;\n\n  /** The child ripple instance. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  /** Reference to the current focus ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Unregister function for _radioDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id != this.id && name == this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    this.change.emit(new MatRadioChange(this, this._value));\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value != this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      if (this.radioGroup) {\n        this.radioGroup._touch();\n      }\n\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {UNIQUE_SELECTION_DISPATCHER_PROVIDER} from '@angular/cdk/collections';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, A11yModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material drawers. */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    state('open, open-instant', style({\n      transform: 'translate3d(0, 0, 0)',\n      visibility: 'visible',\n    })),\n    state('void', style({\n      visibility: 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusTrap, FocusTrapFactory, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n  InjectionToken,\n  ViewChild,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {merge} from 'rxjs/observable/merge';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {debounceTime} from 'rxjs/operators/debounceTime';\nimport {map} from 'rxjs/operators/map';\nimport {Subject} from 'rxjs/Subject';\nimport {Observable} from 'rxjs/Observable';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {CdkScrollable} from '@angular/cdk/scrolling';\n\n\n/** Throws an exception when two MatDrawer are matching the same position. */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/**\n * Drawer toggle promise result.\n * @deprecated\n * @deletion-target 6.0.0\n */\nexport class MatDrawerToggleResult {\n  constructor(\n    /** Whether the drawer is opened or closed. */\n    public type: 'open' | 'close',\n    /** Whether the drawer animation is finished. */\n    public animationFinished: boolean) {}\n}\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE');\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_margins.left',\n    '[style.margin-right.px]': '_margins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatDrawerContent implements AfterContentInit {\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _margins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) private _container: MatDrawerContainer) {\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMargins.subscribe(margins => {\n      this._margins = margins;\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    '(keydown)': 'handleKeydown($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value: 'start' | 'end') {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onAlignChanged.emit();\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /**\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Input()\n  get align(): 'start' | 'end' { return this.position; }\n  set align(value: 'start' | 'end') { this.position = value; }\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value: 'over' | 'push' | 'side') {\n    this._mode = value;\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** Whether the drawer is opened. */\n  private _opened: boolean = false;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new EventEmitter<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() readonly openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /**\n   * Event emitted when the drawer is fully opened.\n   * @deprecated Use `opened` instead.\n   * @deletion-target 6.0.0\n   */\n  @Output('open') readonly onOpen: Observable<void> = this._openedStream;\n\n  /**\n   * Event emitted when the drawer is fully closed.\n   * @deprecated Use `closed` instead.\n   * @deletion-target 6.0.0\n   */\n  @Output('close') readonly onClose: Observable<void> = this._closedStream;\n\n  /** Event emitted when the drawer's position changes. */\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Output('align-changed') onAlignChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  readonly _modeChanged = new Subject();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(v: boolean) { this.toggle(coerceBooleanProperty(v)); }\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<void> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<void> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<void> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n\n    // TODO(crisbeto): This promise is here for backwards-compatibility.\n    // It should be removed next time we do breaking changes in the drawer.\n    // @deletion-target 6.0.0\n    return new Promise<any>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => {\n        resolve(new MatDrawerToggleResult(open ? 'open' : 'close', true));\n      });\n    });\n  }\n\n  /**\n   * Handles the keyboard events.\n   * @docs-private\n   */\n  handleKeydown(event: KeyboardEvent) {\n    if (event.keyCode === ESCAPE && !this.disableClose) {\n      this.close();\n      event.stopPropagation();\n    }\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStarted.emit(event);\n  }\n\n  _onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n        (toState === 'void' && fromState.indexOf('open') === 0)) {\n      this.openedChange.emit(this._opened);\n    }\n  }\n\n  get _width() {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n}\n\n\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatDrawerContainer implements AfterContentInit, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent) _content: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() readonly backdropClick = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private readonly _doCheckSubject = new Subject<void>();\n\n  readonly _contentMargins = new Subject<{left: number|null, right: number|null}>();\n\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n  @ViewChild(CdkScrollable) scrollable: CdkScrollable;\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this._updateContentMargins();\n      });\n    }\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this._updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this._updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      takeUntil(this._drawers.changes),\n      filter((event: AnimationEvent) => event.fromState !== event.toState)\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this._updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this._updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add('mat-drawer-opened');\n    } else {\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (!this._dir || this._dir.value == 'ltr') {\n      this._left = this._start;\n      this._right = this._end;\n    } else {\n      this._left = this._end;\n      this._right = this._start;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start!.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end!.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && drawer.mode !== 'side')\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._start!.mode != 'side')\n        || (this._isDrawerOpen(this._end) && this._end!.mode != 'side');\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): boolean {\n    return drawer != null && drawer.opened;\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  private _updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        let width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        let width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    // Pull back into the NgZone since in some cases we could be outside.\n    this._ngZone.run(() => this._contentMargins.next({left, right}));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  forwardRef,\n  Inject,\n  Input,\n  ViewEncapsulation,\n  QueryList,\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_margins.left',\n    '[style.margin-right.px]': '_margins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer) {\n    super(changeDetectorRef, container);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    '(keydown)': 'handleKeydown($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers: QueryList<MatSidenav>;\n  @ContentChild(MatSidenavContent) _content: MatSidenavContent;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {ScrollDispatchModule} from '@angular/cdk/scrolling';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\nimport {\n  MatDrawer,\n  MatDrawerContainer,\n  MatDrawerContent,\n  MAT_DRAWER_DEFAULT_AUTOSIZE,\n} from './drawer';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    A11yModule,\n    OverlayModule,\n    ScrollDispatchModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  providers: [\n    {provide: MAT_DRAWER_DEFAULT_AUTOSIZE, useValue: false}\n  ]\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule, ARIA_DESCRIBER_PROVIDER} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER,\n  MAT_TOOLTIP_DEFAULT_OPTIONS,\n  MatTooltip,\n  TooltipComponent,\n} from './tooltip';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PlatformModule,\n    A11yModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [\n    MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER,\n    ARIA_DESCRIBER_PROVIDER,\n    {\n      provide: MAT_TOOLTIP_DEFAULT_OPTIONS,\n      useValue: {\n        showDelay: 0,\n        hideDelay: 0,\n        touchendHideDelay: 1500\n      }\n    }\n  ],\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional } from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable()\nexport class MatPaginatorIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel: string = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel: string = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel: string = 'Previous page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatPaginatorIntl} from './paginator-intl';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatPaginator implements OnInit, OnDestroy {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(pageIndex: number) {\n    this._pageIndex = coerceNumberProperty(pageIndex);\n    this._changeDetectorRef.markForCheck();\n  }\n  _pageIndex: number = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(length: number) {\n    this._length = coerceNumberProperty(length);\n    this._changeDetectorRef.markForCheck();\n  }\n  _length: number = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(pageSize: number) {\n    this._pageSize = coerceNumberProperty(pageSize);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(pageSizeOptions: number[]) {\n    this._pageSizeOptions = (pageSizeOptions || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Whether to hide the page size selection UI from the user. */\n  @Input() hidePageSize = false;\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() readonly page = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage(): void {\n    if (!this.hasNextPage()) { return; }\n    this.pageIndex++;\n    this._emitPageEvent();\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage(): void {\n    if (!this.hasPreviousPage()) { return; }\n    this.pageIndex--;\n    this._emitPageEvent();\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage(): boolean {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage(): boolean {\n    const numberOfPages = Math.ceil(this.length / this.pageSize) - 1;\n    return this.pageIndex < numberOfPages && this.pageSize != 0;\n  }\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n\n    this.pageSize = pageSize;\n    this._emitPageEvent();\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) == -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent() {\n    this.page.emit({\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Input,\n  ViewEncapsulation\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\n\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nexport class MatProgressBarBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\nexport const _MatProgressBarMixinBase = mixinColor(MatProgressBarBase, 'primary');\n\n/** Counter used to generate unique IDs for progress bars. */\nlet progressbarId = 0;\n\n/**\n * `<mat-progress-bar>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n    'class': 'mat-progress-bar',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor {\n\n  constructor(public _elementRef: ElementRef) {\n    super(_elementRef);\n  }\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) { this._value = clamp(v || 0); }\n  private _value: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue(): number { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n  private _bufferValue: number = 0;\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** The id of the progress bar. */\n  progressbarId = `mat-progress-bar-${progressbarId++}`;\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    const scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode === 'buffer') {\n      const scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  Input,\n  ElementRef,\n  SimpleChanges,\n  OnChanges,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nexport class MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatProgressSpinnerMixinBase = mixinColor(MatProgressSpinnerBase, 'primary');\n\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.51%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.1%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.51%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.01%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.51%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.01%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.51%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * `<mat-progress-spinner>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[style.width.px]': '_elementSize',\n    '[style.height.px]': '_elementSize',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor,\n  OnChanges {\n\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /** The width and height of the host element. Will grow with stroke width. */\n  _elementSize = BASE_SIZE;\n\n  /** Tracks diameters of existing instances to de-dupe generated styles (default d = 100) */\n  private static diameters = new Set<number>([BASE_SIZE]);\n\n  /**\n   * Used for storing all of the generated keyframe animations.\n   * @dynamic\n   */\n  private static styleTag: HTMLStyleElement|null = null;\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number { return this._diameter; }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    if (!this._fallbackAnimation && !MatProgressSpinner.diameters.has(this._diameter)) {\n      this._attachStyleNode();\n    }\n    this._updateElementSize();\n  }\n  private _diameter = BASE_SIZE;\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n\n    super(_elementRef);\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    _elementRef.nativeElement.classList.add(animationClass);\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.strokeWidth || changes.diameter) {\n      this._updateElementSize();\n    }\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this._elementSize * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    let styleTag = MatProgressSpinner.styleTag;\n\n    if (!styleTag) {\n      styleTag = this._document.createElement('style');\n      this._document.head.appendChild(styleTag);\n      MatProgressSpinner.styleTag = styleTag;\n    }\n\n    if (styleTag && styleTag.sheet) {\n      (styleTag.sheet as CSSStyleSheet).insertRule(this._getAnimationText(), 0);\n    }\n\n    MatProgressSpinner.diameters.add(this.diameter);\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n\n  /** Updates the spinner element size based on its diameter. */\n  private _updateElementSize() {\n    this._elementSize = this._diameter + Math.max(this.strokeWidth - BASE_STROKE_WIDTH, 0);\n  }\n}\n\n\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[style.width.px]': '_elementSize',\n    '[style.height.px]': '_elementSize',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any) {\n    super(elementRef, platform, document);\n    this.mode = 'indeterminate';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  ConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayRef,\n  OverlayConfig,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {filter} from 'rxjs/operators/filter';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatMenu} from './menu-directive';\nimport {throwMatMenuMissingError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_MENU_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_MENU_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closeSubscription = Subscription.EMPTY;\n  private _positionSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  private _openedByMouse: boolean = false;\n\n  /**\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel {\n    return this.menu;\n  }\n\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor') menu: MatMenuPanel;\n\n  /** Data to be passed along to any lazily-rendered content. */\n  @Input('matMenuTriggerData') menuData: any;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() readonly menuOpened: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly onMenuOpen: EventEmitter<void> = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() readonly menuClosed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly onMenuClose: EventEmitter<void> = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _parentMenu: MatMenu,\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality,\n              // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n              private _focusMonitor?: FocusMonitor) {\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n\n    this.menu.close.subscribe(reason => {\n      this._destroyMenu();\n\n      // If a click closed the menu, we should close the entire chain of nested menus.\n      if (reason === 'click' && this._parentMenu) {\n        this._parentMenu.closed.emit(reason);\n      }\n    });\n\n    if (this.triggersSubmenu()) {\n      // Subscribe to changes in the hovered item in order to toggle the panel.\n      this._hoverSubscription = this._parentMenu._hovered()\n          .pipe(filter(active => active === this._menuItemInstance))\n          .subscribe(() => {\n            this._openedByMouse = true;\n            this.openMenu();\n          });\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._cleanUpSubscriptions();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (this._menuOpen) {\n      return;\n    }\n\n    this._createOverlay().attach(this._portal);\n\n    if (this.menu.lazyContent) {\n      this.menu.lazyContent.attach(this.menuData);\n    }\n\n    this._closeSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n    this._initMenu();\n\n    if (this.menu instanceof MatMenu) {\n      this.menu._startAnimation();\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n  focus(origin: FocusOrigin = 'program') {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._element.nativeElement, origin);\n    } else {\n      this._element.nativeElement.focus();\n    }\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (this._overlayRef && this.menuOpen) {\n      this._resetMenu();\n      this._closeSubscription.unsubscribe();\n      this._overlayRef.detach();\n\n      if (this.menu instanceof MatMenu) {\n        this.menu._resetAnimation();\n      }\n    }\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n    this.menu.focusFirstItem(this._openedByMouse ? 'mouse' : 'program');\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  /**\n   * This method resets the menu when it's closed, most importantly restoring\n   * focus to the menu trigger if the menu was opened via the keyboard.\n   */\n  private _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (!this._openedByMouse) {\n      // Note that the focus style will show up both for `program` and\n      // `keyboard` so we don't have to specify which one it is.\n      this.focus();\n    } else if (!this.triggersSubmenu()) {\n      this.focus('mouse');\n    }\n\n    this._openedByMouse = false;\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as ConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getPosition(),\n      hasBackdrop: !this.triggersSubmenu(),\n      backdropClass: 'cdk-overlay-transparent-backdrop',\n      direction: this.dir,\n      scrollStrategy: this._scrollStrategy()\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: ConnectedPositionStrategy): void {\n    this._positionSubscription = position.onPositionChange.subscribe(change => {\n      const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n      const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n      this.menu.setPositionClasses(posX, posY);\n    });\n  }\n\n  /**\n   * This method builds the position strategy for the overlay, so the menu is properly connected\n   * to the trigger.\n   * @returns ConnectedPositionStrategy\n   */\n  private _getPosition(): ConnectedPositionStrategy {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    return this._overlay.position()\n        .connectedTo(this._element, {originX, originY}, {overlayX, overlayY})\n        .withDirection(this.dir)\n        .withOffsetY(offsetY)\n        .withFallbackPosition(\n            {originX: originFallbackX, originY},\n            {overlayX: overlayFallbackX, overlayY})\n        .withFallbackPosition(\n            {originX, originY: originFallbackY},\n            {overlayX, overlayY: overlayFallbackY},\n            undefined, -offsetY)\n        .withFallbackPosition(\n            {originX: originFallbackX, originY: originFallbackY},\n            {overlayX: overlayFallbackX, overlayY: overlayFallbackY},\n            undefined, -offsetY);\n  }\n\n  /** Cleans up the active subscriptions. */\n  private _cleanUpSubscriptions(): void {\n    this._closeSubscription.unsubscribe();\n    this._positionSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMenu ? this._parentMenu.close : observableOf();\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      this._openedByMouse = true;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {MAT_MENU_DEFAULT_OPTIONS, MatMenu} from './menu-directive';\nimport {MatMenuItem} from './menu-item';\nimport {MAT_MENU_SCROLL_STRATEGY_PROVIDER, MatMenuTrigger} from './menu-trigger';\nimport {MatMenuContent} from './menu-content';\n\n\n@NgModule({\n  imports: [\n    A11yModule,\n    CommonModule,\n    MatCommonModule,\n    MatRippleModule,\n    OverlayModule,\n    PortalModule,\n  ],\n  exports: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent, MatCommonModule],\n  declarations: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent],\n  providers: [\n    MAT_MENU_SCROLL_STRATEGY_PROVIDER,\n    {\n      provide: MAT_MENU_DEFAULT_OPTIONS,\n      useValue: {\n        overlapTrigger: true,\n        xPosition: 'after',\n        yPosition: 'below',\n      },\n    }\n  ],\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n */\nexport const matSelectAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', [\n      style({\n        opacity: 0,\n        minWidth: '100%',\n        transform: 'scaleY(0)'\n      }),\n      animate('150ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n    ]),\n    transition('* => void', [\n      animate('250ms 100ms linear', style({opacity: 0}))\n    ])\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatSelect, MatSelectTrigger, MAT_SELECT_SCROLL_STRATEGY_PROVIDER} from './select';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {ErrorStateMatcher} from '@angular/material/core';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER, ErrorStateMatcher]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by MatTooltip. */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('150ms cubic-bezier(0.0, 0.0, 0.2, 1)')),\n    transition('* => hidden', animate('150ms cubic-bezier(0.4, 0.0, 1, 1)')),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {SPACE, ENTER, HOME, END} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatLine,\n  MatLineSetter,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\n\n\n/** @docs-private */\nexport class MatSelectionListBase {}\nexport const _MatSelectionListMixinBase =\n  mixinTabIndex(mixinDisableRipple(mixinDisabled(MatSelectionListBase)));\n\n/** @docs-private */\nexport class MatListOptionBase {}\nexport const _MatListOptionMixinBase = mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/**\n * Change event object emitted by MatListOption whenever the selected state changes.\n * @deprecated Use the `MatSelectionListChange` event on the selection list instead.\n * @deletion-target 6.0.0\n */\nexport class MatListOptionChange {\n  constructor(\n    /** Reference to the list option that changed. */\n    public source: MatListOption,\n    /** The new selected state of the option. */\n    public selected: boolean) {}\n}\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-focus]': '_hasFocus',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _lineSetter: MatLineSetter;\n  private _selected: boolean = false;\n  private _disabled: boolean = false;\n\n  /** Whether the option has focus. */\n  _hasFocus: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text') _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Value of the option */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  /**\n   * Emits a change event whenever the selected state of an option changes.\n   * @deprecated Use the `selectionChange` event on the `<mat-selection-list>` instead.\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly selectionChange: EventEmitter<MatListOptionChange> =\n    new EventEmitter<MatListOptionChange>();\n\n  constructor(private _element: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */ @Optional() @Inject(forwardRef(() => MatSelectionList))\n              public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    if (this._selected) {\n      // List options that are selected at initialization can't be reported properly to the form\n      // control. This is because it takes some time until the selection-list knows about all\n      // available options. Also it can happen that the ControlValueAccessor has an initial value\n      // that should be used instead. Deferring the value change report to the next tick ensures\n      // that the form control value is not being overwritten.\n      Promise.resolve().then(() => this.selected = true);\n    }\n  }\n\n  ngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => this.selected = false);\n    }\n\n    this.selectionList._removeOptionFromList(this);\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? this._text.nativeElement.textContent : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n\n      // TODO: the `selectionChange` event on the option is deprecated. Remove that in the future.\n      this._emitDeprecatedChangeEvent();\n    }\n  }\n\n  _handleFocus() {\n    this._hasFocus = true;\n    this.selectionList._setFocusedOption(this);\n  }\n\n  _handleBlur() {\n    this._hasFocus = false;\n    this.selectionList._onTouched();\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. */\n  _setSelected(selected: boolean) {\n    if (selected === this._selected) {\n      return;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n  }\n\n  /** Emits a selectionChange event for this option. */\n  _emitDeprecatedChangeEvent() {\n    // TODO: the `selectionChange` event on the option is deprecated. Remove that in the future.\n    this.selectionChange.emit(new MatListOptionChange(this, this.selected));\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list',\n    '(focus)': 'focus()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    '[attr.aria-disabled]': 'disabled.toString()'},\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\n    CanDisable, CanDisableRipple, HasTabIndex, AfterContentInit, ControlValueAccessor {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Used for storing the values that were assigned before the options were initialized. */\n  private _tempValues: string[]|null;\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  constructor(private _element: ElementRef, @Attribute('tabindex') tabIndex: string) {\n    super();\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options).withWrap().withTypeAhead();\n\n    if (this._tempValues) {\n      this._setOptionsFromValues(this._tempValues);\n      this._tempValues = null;\n    }\n  }\n\n  /** Focus the selection-list. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this.options.forEach(option => option._setSelected(true));\n    this._reportValueChange();\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this.options.forEach(option => option._setSelected(false));\n    this._reportValueChange();\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItemIndex(this._getOptionIndex(option));\n  }\n\n  /** Removes an option from the selection list and updates the active item. */\n  _removeOptionFromList(option: MatListOption) {\n    if (option._hasFocus) {\n      const optionIndex = this._getOptionIndex(option);\n\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.setPreviousItemActive();\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.setNextItemActive();\n      }\n    }\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case SPACE:\n      case ENTER:\n        this._toggleSelectOnFocusedOption();\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n      case HOME:\n      case END:\n        event.keyCode === HOME ? this._keyManager.setFirstItemActive() :\n                                 this._keyManager.setLastItemActive();\n        event.preventDefault();\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    if (this.options) {\n      this._onChange(this._getSelectedOptionValues());\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    } else {\n      this._tempValues = values;\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    if (this.options) {\n      this.options.forEach(option => option.disabled = isDisabled);\n    }\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Returns the option with the specified value. */\n  private _getOptionByValue(value: string): MatListOption | undefined {\n    return this.options.find(option => option.value === value);\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values\n      .map(value => this._getOptionByValue(value))\n      .filter(Boolean)\n      .forEach(option => option!._setSelected(true));\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the selected state of the currently focused option. */\n  private _toggleSelectOnFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n\n        // TODO: the `selectionChange` event on the option is deprecated. Remove that in the future.\n        focusedOption._emitDeprecatedChangeEvent();\n      }\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: AnimationTriggerMetadata;\n  readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [\n    // TODO(kara): switch to :enter and :leave once Mobile Safari is sorted out.\n    state('void', style({\n      opacity: 0,\n      // This starts off from 0.01, instead of 0, because there's an issue in the Angular animations\n      // as of 4.2, which causes the animation to be skipped if it starts from 0.\n      transform: 'scale(0.01, 0.01)'\n    })),\n    state('enter-start', style({\n      opacity: 1,\n      transform: 'scale(1, 0.5)'\n    })),\n    state('enter', style({\n      transform: 'scale(1, 1)'\n    })),\n    transition('void => enter-start', animate('100ms linear')),\n    transition('enter-start => enter', animate('300ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n    transition('* => void', animate('150ms 50ms linear', style({opacity: 0})))\n  ]),\n\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n    state('showing', style({opacity: 1})),\n    transition('void => *', [\n      style({opacity: 0}),\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const transformMenu = matMenuAnimations.transformMenu;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {Subject} from 'rxjs/Subject';\nimport {DOCUMENT} from '@angular/common';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nexport class MatMenuItemBase {}\nexport const _MatMenuItemMixinBase = mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    'role': 'menuitem',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n    '(click)': '_checkDisabled($event)',\n    '(mouseenter)': '_emitHoverEvent()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n\n  private _document: Document;\n\n  /** Stream that emits when the menu item is hovered. */\n  readonly _hovered: Subject<MatMenuItem> = new Subject<MatMenuItem>();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(\n    private _elementRef: ElementRef,\n    @Inject(DOCUMENT) document?: any,\n    private _focusMonitor?: FocusMonitor) {\n\n    // @deletion-target 6.0.0 make `_focusMonitor` and `document` required params.\n    super();\n\n    if (_focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      _focusMonitor.monitor(this._getHostElement(), false);\n    }\n\n    this._document = document;\n  }\n\n  /** Focuses the menu item. */\n  focus(origin: FocusOrigin = 'program'): void {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin);\n    } else {\n      this._getHostElement().focus();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._getHostElement());\n    }\n\n    this._hovered.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  _emitHoverEvent() {\n    if (!this.disabled) {\n      this._hovered.next(this);\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === textNodeType) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  TemplateRef,\n  ComponentFactoryResolver,\n  ApplicationRef,\n  Injector,\n  ViewContainerRef,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {TemplatePortal, DomPortalOutlet} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\n\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\n@Directive({\n  selector: 'ng-template[matMenuContent]'\n})\nexport class MatMenuContent implements OnDestroy {\n  private _portal: TemplatePortal<any>;\n  private _outlet: DomPortalOutlet;\n\n  constructor(\n    private _template: TemplateRef<any>,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n    private _injector: Injector,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) private _document: any) {}\n\n  /**\n   * Attaches the content with a particular context.\n   * @docs-private\n   */\n  attach(context: any = {}) {\n    if (!this._portal) {\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n    } else if (this._portal.isAttached) {\n      this._portal.detach();\n    }\n\n    if (!this._outlet) {\n      this._outlet = new DomPortalOutlet(this._document.createElement('div'),\n          this._componentFactoryResolver, this._appRef, this._injector);\n    }\n\n    const element: HTMLElement = this._template.elementRef.nativeElement;\n\n    // Because we support opening the same menu from different triggers (which in turn have their\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n    // risk it staying attached to a pane that's no longer in the DOM.\n    element.parentNode!.insertBefore(this._outlet.outletElement, element);\n    this._portal.attach(this._outlet, context);\n  }\n\n  ngOnDestroy() {\n    if (this._outlet) {\n      this._outlet.dispose();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ESCAPE, LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {switchMap} from 'rxjs/operators/switchMap';\nimport {take} from 'rxjs/operators/take';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subscription} from 'rxjs/Subscription';\nimport {matMenuAnimations} from './menu-animations';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MatMenuContent} from './menu-content';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {FocusOrigin} from '@angular/cdk/a11y';\n\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options');\n\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 2;\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  exportAs: 'matMenu'\n})\nexport class MatMenu implements AfterContentInit, MatMenuPanel, OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter-start' | 'enter' = 'void';\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition(): MenuPositionX { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition(): MenuPositionY { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) templateRef: TemplateRef<any>;\n\n  /** List of the items inside of a menu. */\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\n\n  /**\n   * Menu content that will be rendered lazily.\n   * @docs-private\n   */\n  @ContentChild(MatMenuContent) lazyContent: MatMenuContent;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  get overlapTrigger(): boolean { return this._overlapTrigger; }\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    if (classes && classes.length) {\n      this._classList = classes.split(' ').reduce((obj: any, className: string) => {\n        obj[className] = true;\n        return obj;\n      }, {});\n\n      this._elementRef.nativeElement.className = '';\n      this.setPositionClasses();\n    }\n  }\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   * @deletion-target 6.0.0\n   */\n  @Input()\n  get classList(): string { return this.panelClass; }\n  set classList(classes: string) { this.panelClass = classes; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() readonly closed: EventEmitter<void | 'click' | 'keydown'> =\n      new EventEmitter<void | 'click' | 'keydown'>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   * @deletion-target 6.0.0\n   */\n  @Output() close = this.closed;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatMenuItem>(this.items).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.close.emit('keydown'));\n  }\n\n  ngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    if (this.items) {\n      return this.items.changes.pipe(\n        startWith(this.items),\n        switchMap(items => merge(...items.map(item => item._hovered)))\n      );\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this._hovered()));\n  }\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case ESCAPE:\n        this.closed.emit('keydown');\n        event.stopPropagation();\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n    if (this.lazyContent) {\n      this._ngZone.onStable.asObservable()\n        .pipe(take(1))\n        .subscribe(() => this._keyManager.setFocusOrigin(origin).setFirstItemActive());\n    } else {\n      this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n    }\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * It's necessary to set position-based classes to ensure the menu panel animation\n   * folds out from the correct direction.\n   */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    this._classList['mat-menu-before'] = posX === 'before';\n    this._classList['mat-menu-after'] = posX === 'after';\n    this._classList['mat-menu-above'] = posY === 'above';\n    this._classList['mat-menu-below'] = posY === 'below';\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    this._panelAnimationState = 'enter-start';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    // After the initial expansion is done, trigger the second phase of the enter animation.\n    if (event.toState === 'enter-start') {\n      this._panelAnimationState = 'enter';\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, MatLine, MatLineSetter, mixinDisableRipple} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nexport class MatListBase {}\nexport const _MatListMixinBase = mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nexport class MatListItemBase {}\nexport const _MatListItemMixinBase = mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {'class': 'mat-list'},\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple {\n  private _lineSetter: MatLineSetter;\n  private _isNavList: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  @ContentChild(MatListAvatarCssMatStyler)\n  set _hasAvatar(avatar: MatListAvatarCssMatStyler) {\n    if (avatar != null) {\n      this._element.nativeElement.classList.add('mat-list-item-avatar');\n    } else {\n      this._element.nativeElement.classList.remove('mat-list-item-avatar');\n    }\n  }\n\n  constructor(private _element: ElementRef,\n              @Optional() private _navList: MatNavList) {\n    super();\n    this._isNavList = !!_navList;\n  }\n\n  ngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._element);\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isNavList || this.disableRipple || this._navList.disableRipple;\n  }\n\n  _handleFocus() {\n    this._element.nativeElement.classList.add('mat-list-item-focus');\n  }\n\n  _handleBlur() {\n    this._element.nativeElement.classList.remove('mat-list-item-focus');\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements AfterContentInit, ControlValueAccessor, OnDestroy,\n    Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    this.registerDatepicker(value);\n  }\n  _datepicker: MatDatepicker<D>;\n\n  private registerDatepicker(value: MatDatepicker<D>) {\n    if (value) {\n      this._datepicker = value;\n      this._datepicker._registerInput(this);\n    }\n  }\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(filter: (date: D | null) => boolean) {\n    this._dateFilter = filter;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    let oldDate = this.value;\n    this._value = value;\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D|null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngAfterContentInit() {\n    if (this._datepicker) {\n      this._datepickerSubscription =\n          this._datepicker.selectedChanged.subscribe((selected: D) => {\n            this.value = selected;\n            this._cvaOnChange(selected);\n            this._onTouched();\n            this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n            this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n          });\n    }\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this._formField ? this._formField.underlineRef : this._elementRef;\n  }\n\n  /**\n   * Determines the offset to be used when the calendar goes into a fallback position.\n   * Primarily used to prevent the calendar from overlapping the input.\n   */\n  _getPopupFallbackOffset(): number {\n    return this._formField ? -this._formField._inputContainerRef.nativeElement.clientHeight : 0;\n  }\n\n  // Implemented as part of ControlValueAccessor\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor\n  setDisabledState(disabled: boolean): void {\n    this.disabled = disabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (event.altKey && event.keyCode === DOWN_ARROW) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n    this._value = date;\n    this._cvaOnChange(date);\n    this._valueChange.emit(date);\n    this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n  Directive,\n  ContentChild,\n} from '@angular/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class MatDatepickerToggleIcon {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  host: {\n    'class': 'mat-datepicker-toggle',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon) _customIcon: MatDatepickerToggleIcon;\n\n  constructor(public _intl: MatDatepickerIntl, private _changeDetectorRef: ChangeDetectorRef) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.datepicker) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatCalendar} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {\n  MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER,\n  MatDatepicker,\n  MatDatepickerContent,\n} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    MatIconModule,\n    OverlayModule,\n    A11yModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  preserveWhitespaces: false,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input()\n  get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [\n    MatDivider,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDivider,\n  ],\n})\nexport class MatDividerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * The display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *   default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the reset of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  Host,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  SimpleChanges,\n  ViewEncapsulation,\n  ViewContainerRef,\n  AfterContentInit,\n  ContentChild,\n} from '@angular/core';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {Subject} from 'rxjs/Subject';\nimport {take} from 'rxjs/operators/take';\nimport {filter} from 'rxjs/operators/filter';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {MatAccordion} from './accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {matExpansionAnimations} from './expansion-animations';\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MdAccordion directive attached.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  }\n})\nexport class MatExpansionPanel extends CdkAccordionItem\n    implements AfterContentInit, OnChanges, OnDestroy {\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n  private _hideToggle = false;\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordion;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent) _lazyContent: MatExpansionPanelContent;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  constructor(@Optional() @Host() accordion: MatAccordion,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n  }\n\n  /** Whether the expansion indicator should be hidden. */\n  _getHideToggle(): boolean {\n    if (this.accordion) {\n      return this.accordion.hideToggle;\n    }\n    return this.hideToggle;\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._inputChanges.complete();\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {filter} from 'rxjs/operators/filter';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatExpansionPanel} from './expansion-panel';\nimport {matExpansionAnimations} from './expansion-animations';\n\n\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'panel.disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n    @Host() public panel: MatExpansionPanel,\n    private _element: ElementRef,\n    private _focusMonitor: FocusMonitor,\n    private _changeDetectorRef: ChangeDetectorRef) {\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to  subscribe and trigger change detection manually.\n    this._parentChangeSubscription = merge(\n      panel.opened,\n      panel.closed,\n      panel._inputChanges.pipe(filter(changes => !!(changes.hideToggle || changes.disabled)))\n    )\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    _focusMonitor.monitor(_element.nativeElement);\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    this.panel.toggle();\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        event.preventDefault();\n        this._toggle();\n        break;\n      default:\n        return;\n    }\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n}\n\n/**\n * `<mat-panel-description>`\n *\n * This direction is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host : {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * `<mat-panel-title>`\n *\n * This direction is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host : {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {UNIQUE_SELECTION_DISPATCHER_PROVIDER} from '@angular/cdk/collections';\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanel,\n  MatExpansionPanelActionRow\n} from './expansion-panel';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, A11yModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER]\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatLine, MatLineSetter} from '@angular/material/core';\nimport {coerceToNumber} from './grid-list-measure';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(private _element: ElementRef) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value: number) { this._rowspan = coerceToNumber(value); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value: number) { this._colspan = coerceToNumber(value); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    this._element.nativeElement.style[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatGridTileText implements AfterContentInit {\n  /**\n   *  Helper that watches the number of lines in a text area and sets\n   * a class on the host element that matches the line count.\n   */\n  _lineSetter: MatLineSetter;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef) {}\n\n  ngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {QueryList} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    let lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  constructor(numColumns: number, tiles: QueryList<MatGridTile>) {\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    let gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile.\n    } while (gapEndIndex - gapStartIndex < tileCols);\n\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'ltr' ? 'left' : 'right';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number);\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList);\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height. */\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('margin-top', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('padding-top', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'padding-bottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['padding-bottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('margin-top', null);\n      tile._setStyle('padding-top', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string { return `calc(${exp})`; }\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return (value.match(/px|em|rem/)) ? value : value + 'px';\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  coerceToString,\n  coerceToNumber,\n} from './grid-list-measure';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatGridList implements OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef, @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols(): number { return this._cols; }\n  set cols(value: number) { this._cols = coerceToNumber(value); }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize(): string { return this._gutter; }\n  set gutterSize(value: string) { this._gutter = coerceToString(value); }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  set rowHeight(value: string | number) {\n    const newValue = coerceToString(value);\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    const tracker = new TileCoordinator(this.cols, this._tiles);\n    const direction = this._dir ? this._dir.value : 'ltr';\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    this._tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      this._element.nativeElement.style[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    this._activeDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection = new EventEmitter<void>();\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(@Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit(): void {\n    this._init();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    let daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    let dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      let date = this._dateAdapter.createDate(\n          this._dateAdapter.getYear(this.activeDate),\n          this._dateAdapter.getMonth(this.activeDate), i + 1);\n      let enabled = !this.dateFilter ||\n          this.dateFilter(date);\n      let ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));\n    }\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    this._activeDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange = new EventEmitter<D>();\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(@Optional() public _dateAdapter: DateAdapter<D>,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\n    let activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  _getActiveCell(): number {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, this._isYearEnabled(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _isYearEnabled(year: number) {\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    this._activeDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    if (this._dateAdapter.getYear(oldActiveDate) != this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange = new EventEmitter<D>();\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(@Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    let daysInMonth = this._dateAdapter.getNumDaysInMonth(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._isMonthEnabled(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _isMonthEnabled(month: number) {\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    let firstOfMonth = this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {take} from 'rxjs/operators/take';\nimport {Subscription} from 'rxjs/Subscription';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView, yearsPerPage, yearsPerRow} from './multi-year-view';\nimport {MatYearView} from './year-view';\nimport {Directionality} from '@angular/cdk/bidi';\n\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, OnDestroy, OnChanges {\n  private _intlChanges: Subscription;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView) multiYearView: MatMultiYearView<D>;\n\n  /** Date filter for the month, year, and multi-year views. */\n  _dateFilterForViews = (date: D) => {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get _activeDate(): D { return this._clampedActiveDate; }\n  set _activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  _currentView: 'month' | 'year' | 'multi-year';\n\n  /** The label for the current calendar view. */\n  get _periodButtonText(): string {\n    if (this._currentView == 'month') {\n      return this._dateAdapter.format(this._activeDate, this._dateFormats.display.monthYearLabel)\n          .toLocaleUpperCase();\n    }\n    if (this._currentView == 'year') {\n      return this._dateAdapter.getYearName(this._activeDate);\n    }\n    const activeYear = this._dateAdapter.getYear(this._activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n    const lastYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  get _periodButtonLabel(): string {\n    return this._currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the the previous button. */\n  get _prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this._currentView];\n  }\n\n  /** The label for the the next button. */\n  get _nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this._currentView];\n  }\n\n  constructor(private _elementRef: ElementRef,\n              private _intl: MatDatepickerIntl,\n              private _ngZone: NgZone,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir?: Directionality) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngAfterContentInit() {\n    this._activeDate = this.startAt || this._dateAdapter.today();\n    this._focusActiveCell();\n    this._currentView = this.startView;\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change = changes.minDate || changes.maxDate || changes.dateFilter;\n\n    if (change && !change.firstChange) {\n      const view = this.monthView || this.yearView || this.multiYearView;\n\n      if (view) {\n        view._init();\n      }\n    }\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles month selection in the multi-year view. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this._activeDate = date;\n    this._currentView = view;\n  }\n\n  /** Handles user clicks on the period label. */\n  _currentPeriodClicked(): void {\n    this._currentView = this._currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  _previousClicked(): void {\n    this._activeDate = this._currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this._activeDate, -1) :\n        this._dateAdapter.addCalendarYears(\n            this._activeDate, this._currentView == 'year' ? -1 : -yearsPerPage);\n  }\n\n  /** Handles user clicks on the next button. */\n  _nextClicked(): void {\n    this._activeDate = this._currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this._activeDate, 1) :\n        this._dateAdapter.addCalendarYears(\n            this._activeDate, this._currentView == 'year' ? 1 : yearsPerPage);\n  }\n\n  /** Whether the previous period button is enabled. */\n  _previousEnabled(): boolean {\n    if (!this.minDate) {\n      return true;\n    }\n    return !this.minDate || !this._isSameView(this._activeDate, this.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  _nextEnabled(): boolean {\n    return !this.maxDate || !this._isSameView(this._activeDate, this.maxDate);\n  }\n\n  /** Handles keydown events on the calendar body. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n    if (this._currentView == 'month') {\n      this._handleCalendarBodyKeydownInMonthView(event);\n    } else if (this._currentView == 'year') {\n      this._handleCalendarBodyKeydownInYearView(event);\n    } else {\n      this._handleCalendarBodyKeydownInMultiYearView(event);\n    }\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._elementRef.nativeElement.querySelector('.mat-calendar-body-active').focus();\n      });\n    });\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this._currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this._currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  private _handleCalendarBodyKeydownInMonthView(event: KeyboardEvent): void {\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n             this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this._activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this._activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n        if (this._dateFilterForViews(this._activeDate)) {\n          this._dateSelected(this._activeDate);\n          this._userSelected();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  private _handleCalendarBodyKeydownInYearView(event: KeyboardEvent): void {\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this._activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this._activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n        this._goToDateInView(this._activeDate, 'month');\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  private _handleCalendarBodyKeydownInMultiYearView(event: KeyboardEvent): void {\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -1);\n        break;\n      case RIGHT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate, 1);\n        break;\n      case UP_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this._activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this._activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n        this._goToDateInView(this._activeDate, 'year');\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take} from 'rxjs/operators/take';\nimport {filter} from 'rxjs/operators/filter';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {DOCUMENT} from '@angular/common';\nimport {Subject} from 'rxjs/Subject';\nimport {Subscription} from 'rxjs/Subscription';\nimport {merge} from 'rxjs/observable/merge';\nimport {MatCalendar} from './calendar';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\n\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n  },\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerContent<D> implements AfterContentInit {\n  datepicker: MatDatepicker<D>;\n\n  @ViewChild(MatCalendar) _calendar: MatCalendar<D>;\n\n  ngAfterContentInit() {\n    this._calendar._focusActiveCell();\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatDatepicker<D> implements OnDestroy {\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(date: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(date));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' = 'month';\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits new selected date when selected date changes.\n   * @deprecated Switch to the `dateChange` and `dateInput` binding on the input element.\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly selectedChanged: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(shouldOpen: boolean) { shouldOpen ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  private _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<any> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n    }\n  }\n\n  /** Selects the given date */\n  _select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this.selectedChanged.emit(date);\n    }\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    this._dialogRef = this._dialog.open(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal(MatDatepickerContent, this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      let componentRef: ComponentRef<MatDatepickerContent<D>> =\n          this._popupRef.attach(this._calendarPortal);\n      componentRef.instance.datepicker = this;\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir ? this._dir.value : 'ltr',\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE))\n    ).subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    const fallbackOffset = this._datepickerInput._getPopupFallbackOffset();\n\n    return this._overlay.position()\n      .connectedTo(this._datepickerInput.getPopupConnectionElementRef(),\n        {originX: 'start', originY: 'bottom'},\n        {overlayX: 'start', overlayY: 'top'}\n      )\n      .withFallbackPosition(\n        {originX: 'start', originY: 'top'},\n        {overlayX: 'start', overlayY: 'bottom'},\n        undefined,\n        fallbackOffset\n      )\n      .withFallbackPosition(\n        {originX: 'end', originY: 'bottom'},\n        {overlayX: 'end', overlayY: 'top'}\n      )\n      .withFallbackPosition(\n        {originX: 'end', originY: 'top'},\n        {overlayX: 'end', overlayY: 'bottom'},\n        undefined,\n        fallbackOffset\n      );\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AnimationEvent} from '@angular/animations';\nimport {matDialogAnimations} from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.slideDialog],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    '[attr.id]': '_id',\n    '[attr.role]': '_config?.role',\n    '[attr.aria-labelledby]': '_config?.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config?.ariaLabel',\n    '[attr.aria-describedby]': '_config?.ariaDescribedBy || null',\n    '[@slideDialog]': '_state',\n    '(@slideDialog.start)': '_onAnimationStart($event)',\n    '(@slideDialog.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** The dialog configuration. */\n  _config: MatDialogConfig;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null = null;\n\n  /** ID for the container DOM element. */\n  _id: string;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any) {\n\n    super();\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Move focus onto the dialog immediately in order to prevent the user from accidentally\n      // opening multiple dialogs at the same time. Needs to be async, because the element\n      // may not be focusable immediately.\n      Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef, GlobalPositionStrategy} from '@angular/cdk/overlay';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Location} from '@angular/common';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {DialogPosition} from './dialog-config';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {Subscription, ISubscription} from 'rxjs/Subscription';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private readonly _afterOpen = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private readonly _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private readonly _beforeClose = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  /** Subscription to changes in the user's location. */\n  private _locationChanges: ISubscription = Subscription.EMPTY;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    public _containerInstance: MatDialogContainer,\n    location?: Location,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Pass the id along to the container.\n    _containerInstance._id = id;\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpen.next();\n      this._afterOpen.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._overlayRef.dispose();\n      this._locationChanges.unsubscribe();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose))\n      .subscribe(() => this.close());\n\n    if (location) {\n      // Close the dialog when the user goes forwards/backwards in history or when the location\n      // hash changes. Note that this usually doesn't include clicking on links (unless the user\n      // is using the `HashLocationStrategy`).\n      this._locationChanges = location.subscribe(() => {\n        if (this._containerInstance._config.closeOnNavigation) {\n          this.close();\n        }\n      });\n    }\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._beforeClose.next(dialogResult);\n      this._beforeClose.complete();\n      this._overlayRef.detachBackdrop();\n    });\n\n    this._containerInstance._startExitAnimation();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpen(): Observable<void> {\n    return this._afterOpen.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this._beforeClose.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<void> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = 'auto', height: string = 'auto'): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  ScrollStrategy,\n  OverlayContainer,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  ComponentRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {defer} from 'rxjs/observable/defer';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {Subject} from 'rxjs/Subject';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private readonly _afterAllClosedAtThisLevel = new Subject<void>();\n  private readonly _afterOpenAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpen : this._afterOpenAtThisLevel;\n  }\n\n  get _afterAllClosed() {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  readonly afterAllClosed: Observable<void> = defer<void>(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined)));\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() private _location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) private _scrollStrategy,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {}\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T> {\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef =\n        this._attachDialogContent<T>(componentOrTemplateRef, dialogContainer, overlayRef, config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpen.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    let i = this.openDialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      this.openDialogs[i].close();\n    }\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    let containerPortal = new ComponentPortal(MatDialogContainer, config.viewContainerRef);\n    let containerRef: ComponentRef<MatDialogContainer> = overlay.attach(containerPortal);\n    containerRef.instance._config = config;\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef = new MatDialogRef<T>(overlayRef, dialogContainer, this._location, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap();\n\n    injectionTokens.set(MatDialogRef, dialogRef);\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes.  To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    injectionTokens.set(MatDialogContainer, dialogContainer);\n    injectionTokens.set(MAT_DIALOG_DATA, config.data);\n    injectionTokens.set(Directionality, {\n      value: config.direction,\n      change: observableOf()\n    });\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string = 'Close dialog';\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes._matDialogClose || changes._matDialogCloseResult;\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent {}\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions {}\n\n\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatDialog,\n  MAT_DIALOG_SCROLL_STRATEGY_PROVIDER\n} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n  MatDialogActions\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    A11yModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {catchError} from 'rxjs/operators/catchError';\nimport {tap} from 'rxjs/operators/tap';\nimport {finalize} from 'rxjs/operators/finalize';\nimport {map} from 'rxjs/operators/map';\nimport {share} from 'rxjs/operators/share';\nimport {\n  Injectable,\n  Inject,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {DomSanitizer, SafeResourceUrl} from '@angular/platform-browser';\nimport {Observable} from 'rxjs/Observable';\nimport {forkJoin} from 'rxjs/observable/forkJoin';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {_throw as observableThrow} from 'rxjs/observable/throw';\nimport {DOCUMENT} from '@angular/common';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  svgElement: SVGElement | null = null;\n  constructor(public url: SafeResourceUrl) { }\n}\n\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable()\nexport class MatIconRegistry {\n  private _document: Document;\n\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document?: any) {\n      // TODO(crisbeto): make _document required next major release.\n      this._document = document;\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    const key = iconKey(namespace, iconName);\n    this._svgIconConfigs.set(key, new SvgIconConfig(url));\n    return this;\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    const config = new SvgIconConfig(url);\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n    return this;\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the `<mat-icon>` element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    let url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeError(safeUrl);\n    }\n\n    let cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg)),\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg)),\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: any): Observable<SVGElement | null> => {\n            let url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the combined Observable won't\n            // necessarily fail.\n            console.log(`Loading icon set URL: ${url} failed: ${err}`);\n            return observableOf(null);\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // If the SVG for this icon set has already been parsed, do nothing.\n    if (config.svgElement) {\n      return observableOf(config.svgElement);\n    }\n\n    return this._fetchUrl(config.url).pipe(map(svgText => {\n      // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n      // only needs to occur if the cache is yet unset.\n      if (!config.svgElement) {\n        config.svgElement = this._svgElementFromString(svgText);\n      }\n\n      return config.svgElement;\n    }));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    const iconSource = iconSet.querySelector('#' + iconName);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.id = '';\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    if (this._document || typeof document !== 'undefined') {\n      const div = (this._document || document).createElement('DIV');\n      div.innerHTML = str;\n      const svg = div.querySelector('svg') as SVGElement;\n      if (!svg) {\n        throw Error('<svg> tag not found');\n      }\n      return svg;\n    }\n\n    throw new Error('MatIconRegistry could not resolve document.');\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    let svg = this._svgElementFromString('<svg></svg>');\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\n    if (!svg.getAttribute('xmlns')) {\n      svg.setAttribute('xmlns', 'http://www.w3.org/2000/svg');\n    }\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finally` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share(),\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), DOCUMENT as InjectionToken<any>],\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators/take';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nexport class MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatIconMixinBase = mixinColor(MatIconBase);\n\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, CanColor {\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  constructor(\n      elementRef: ElementRef,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   `'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)`\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    if (changes.svgIcon) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    const childCount = layoutElement.childNodes.length;\n\n    // Remove existing child nodes and add the new SVG element. Note that we can't\n    // use innerHTML, because IE will throw if the element has a data binding.\n    for (let i = 0; i < childCount; i++) {\n      layoutElement.removeChild(layoutElement.childNodes[i]);\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\nimport {ICON_REGISTRY_PROVIDER} from './icon-registry';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n  providers: [ICON_REGISTRY_PROVIDER],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  ElementRef,\n  Input,\n  AfterViewInit,\n  DoCheck,\n  OnDestroy,\n  NgZone,\n} from '@angular/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {auditTime} from 'rxjs/operators/auditTime';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {Subject} from 'rxjs/Subject';\n\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n */\n@Directive({\n  selector: `textarea[mat-autosize], textarea[matTextareaAutosize]`,\n  exportAs: 'matTextareaAutosize',\n  host: {\n    'class': 'mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n  },\n})\nexport class MatTextareaAutosize implements AfterViewInit, DoCheck, OnDestroy {\n  /** Keep track of the previous textarea value to avoid resizing when the value hasn't changed. */\n  private _previousValue: string;\n  private readonly _destroyed = new Subject<void>();\n\n  private _minRows: number;\n  private _maxRows: number;\n\n  /** Minimum amount of rows in the textarea. */\n  @Input('matAutosizeMinRows')\n  set minRows(value: number) {\n    this._minRows = value;\n    this._setMinHeight();\n  }\n  get minRows(): number { return this._minRows; }\n\n  /** Maximum amount of rows in the textarea. */\n  @Input('matAutosizeMaxRows')\n  get maxRows(): number { return this._maxRows; }\n  set maxRows(value: number) {\n    this._maxRows = value;\n    this._setMaxHeight();\n  }\n\n  /** Cached height of a textarea with a single row. */\n  private _cachedLineHeight: number;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _platform: Platform,\n    private _ngZone?: NgZone) {}\n\n  // TODO(crisbeto): make the `_ngZone` a required param in the next major version.\n\n  /** Sets the minimum height of the textarea as determined by minRows. */\n  _setMinHeight(): void {\n    const minHeight = this.minRows && this._cachedLineHeight ?\n        `${this.minRows * this._cachedLineHeight}px` : null;\n\n    if (minHeight)  {\n      this._setTextareaStyle('minHeight', minHeight);\n    }\n  }\n\n  /** Sets the maximum height of the textarea as determined by maxRows. */\n  _setMaxHeight(): void {\n    const maxHeight = this.maxRows && this._cachedLineHeight ?\n        `${this.maxRows * this._cachedLineHeight}px` : null;\n\n    if (maxHeight) {\n      this._setTextareaStyle('maxHeight', maxHeight);\n    }\n  }\n\n  ngAfterViewInit() {\n    if (this._platform.isBrowser) {\n      this.resizeToFitContent();\n\n      if (this._ngZone) {\n        this._ngZone.runOutsideAngular(() => {\n          fromEvent(window, 'resize')\n            .pipe(auditTime(16), takeUntil(this._destroyed))\n            .subscribe(() => this.resizeToFitContent(true));\n        });\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Sets a style property on the textarea element. */\n  private _setTextareaStyle(property: string, value: string): void {\n    const textarea = this._elementRef.nativeElement as HTMLTextAreaElement;\n    textarea.style[property] = value;\n  }\n\n  /**\n   * Cache the height of a single-row textarea if it has not already been cached.\n   *\n   * We need to know how large a single \"row\" of a textarea is in order to apply minRows and\n   * maxRows. For the initial version, we will assume that the height of a single line in the\n   * textarea does not ever change.\n   */\n  private _cacheTextareaLineHeight(): void {\n    if (this._cachedLineHeight) {\n      return;\n    }\n\n    let textarea = this._elementRef.nativeElement as HTMLTextAreaElement;\n\n    // Use a clone element because we have to override some styles.\n    let textareaClone = textarea.cloneNode(false) as HTMLTextAreaElement;\n    textareaClone.rows = 1;\n\n    // Use `position: absolute` so that this doesn't cause a browser layout and use\n    // `visibility: hidden` so that nothing is rendered. Clear any other styles that\n    // would affect the height.\n    textareaClone.style.position = 'absolute';\n    textareaClone.style.visibility = 'hidden';\n    textareaClone.style.border = 'none';\n    textareaClone.style.padding = '0';\n    textareaClone.style.height = '';\n    textareaClone.style.minHeight = '';\n    textareaClone.style.maxHeight = '';\n\n    // In Firefox it happens that textarea elements are always bigger than the specified amount\n    // of rows. This is because Firefox tries to add extra space for the horizontal scrollbar.\n    // As a workaround that removes the extra space for the scrollbar, we can just set overflow\n    // to hidden. This ensures that there is no invalid calculation of the line height.\n    // See Firefox bug report: https://bugzilla.mozilla.org/show_bug.cgi?id=33654\n    textareaClone.style.overflow = 'hidden';\n\n    textarea.parentNode!.appendChild(textareaClone);\n    this._cachedLineHeight = textareaClone.clientHeight;\n    textarea.parentNode!.removeChild(textareaClone);\n\n    // Min and max heights have to be re-calculated if the cached line height changes\n    this._setMinHeight();\n    this._setMaxHeight();\n  }\n\n  ngDoCheck() {\n    if (this._platform.isBrowser) {\n      this.resizeToFitContent();\n    }\n  }\n\n  /**\n   * Resize the textarea to fit its content.\n   * @param force Whether to force a height recalculation. By default the height will be\n   *    recalculated only if the value changed since the last call.\n   */\n  resizeToFitContent(force: boolean = false) {\n    this._cacheTextareaLineHeight();\n\n    // If we haven't determined the line-height yet, we know we're still hidden and there's no point\n    // in checking the height of the textarea.\n    if (!this._cachedLineHeight) {\n      return;\n    }\n\n    const textarea = this._elementRef.nativeElement as HTMLTextAreaElement;\n    const value = textarea.value;\n\n    // Only resize of the value changed since these calculations can be expensive.\n    if (value === this._previousValue && !force) {\n      return;\n    }\n\n    const placeholderText = textarea.placeholder;\n\n    // Reset the textarea height to auto in order to shrink back to its default size.\n    // Also temporarily force overflow:hidden, so scroll bars do not interfere with calculations.\n    // Long placeholders that are wider than the textarea width may lead to a bigger scrollHeight\n    // value. To ensure that the scrollHeight is not bigger than the content, the placeholders\n    // need to be removed temporarily.\n    textarea.style.height = 'auto';\n    textarea.style.overflow = 'hidden';\n    textarea.placeholder = '';\n\n    // Use the scrollHeight to know how large the textarea *would* be if fit its entire value.\n    textarea.style.height = `${textarea.scrollHeight}px`;\n    textarea.style.overflow = '';\n    textarea.placeholder = placeholderText;\n\n    this._previousValue = value;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Self,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {ErrorStateMatcher, mixinErrorState, CanUpdateErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs/Subject';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nexport class MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatInputMixinBase = mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput]`,\n  exportAs: 'matInput',\n  host: {\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[readonly]': 'readonly',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, DoCheck, CanUpdateErrorState {\n  /** Variables used as cache for getters and setters. */\n  protected _type = 'text';\n  protected _disabled = false;\n  protected _required = false;\n  protected _id: string;\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _readonly = false;\n  private _inputValueAccessor: {value: any};\n\n  /** Whether the input is focused. */\n  focused = false;\n\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /**\n   * Stream that emits whenever the state of the input changes such that the wrapping `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges = new Subject<void>();\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-input';\n\n  /** Whether the element is disabled. */\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n\n  /** Placeholder attribute of the element. */\n  @Input() placeholder: string = '';\n\n  /** Whether the element is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n\n  /** Input type of the element. */\n  @Input()\n  get type(): string { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      this._elementRef.nativeElement.type = this._type;\n    }\n  }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** The input element's value. */\n  @Input()\n  get value(): string { return this._inputValueAccessor.value; }\n  set value(value: string) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(protected _elementRef: ElementRef,\n              protected _platform: Platform,\n              @Optional() @Self() public ngControl: NgControl,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || this._elementRef.nativeElement;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n        let el = event.target as HTMLInputElement;\n        if (!el.value && !el.selectionStart && !el.selectionEnd) {\n          // Note: Just setting `0, 0` doesn't fix the issue. Setting `1, 1` fixes it for the first\n          // time that you type text and then hold delete. Toggling to `1, 1` and then back to\n          // `0, 0` seems to completely fix it.\n          el.setSelectionRange(1, 1);\n          el.setSelectionRange(0, 0);\n        }\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n  }\n\n  focus() { this._elementRef.nativeElement.focus(); }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && !this.readonly) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. If not recognizable it returns false. */\n  protected _isTextarea() {\n    let nativeElement = this._elementRef.nativeElement;\n\n    // In Universal, we don't have access to `nodeName`, but the same can be achieved with `name`.\n    // Note that this shouldn't be necessary once Angular switches to an API that resembles the\n    // DOM closer.\n    let nodeName = this._platform.isBrowser ? nativeElement.nodeName : nativeElement.name;\n    return nodeName ? nodeName.toLowerCase() === 'textarea' : false;\n  }\n\n  // Implemented as part of MatFormFieldControl.\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return this.focused || !this.empty; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() { this.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\nimport {ErrorStateMatcher} from '@angular/material/core';\n\n\n@NgModule({\n  declarations: [\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  imports: [\n    CommonModule,\n    MatFormFieldModule,\n    PlatformModule,\n  ],\n  exports: [\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher],\n})\nexport class MatInputModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable()\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation\n} from '@angular/core';\n\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'attr.aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** Whether to allow selection of disabled cells. */\n  @Input() allowDisabledSelection = false;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange = new EventEmitter<number>();\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (!this.allowDisabledSelection && !cell.enabled) {\n      return;\n    }\n    this.selectedValueChange.emit(cell.value);\n  }\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  get _firstRowOffset(): number {\n    return this.rows && this.rows.length && this.rows[0].length ?\n        this.numCols - this.rows[0].length : 0;\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterViewInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nexport class MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatCheckboxMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://www.google.com/design/spec/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewInit, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  private _required: boolean;\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /**\n   * Whether or not the checkbox should appear before or after the label.\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Input()\n  get align(): 'start' | 'end' {\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\n    // label relative to the checkbox. As such, they are inverted.\n    return this.labelPosition == 'after' ? 'start' : 'end';\n  }\n  set align(v) {\n    this.labelPosition = (v == 'start') ? 'after' : 'before';\n  }\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change: EventEmitter<MatCheckboxChange> =\n      new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _checked: boolean = false;\n\n  private _indeterminate: boolean = false;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Reference to the focused state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked() { return this._checked; }\n  set checked(checked: boolean) {\n    if (checked != this.checked) {\n      this._checked = checked;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate() { return this._indeterminate; }\n  set indeterminate(indeterminate: boolean) {\n    let changed =  indeterminate != this._indeterminate;\n    this._indeterminate = indeterminate;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the checkbox changes.\n    // Since the checkbox uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  /**\n   * Registers a callback to be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Function to be called on change.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control has been touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be triggered when the checkbox is touched.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the checkbox's disabled state. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the checkbox should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n    }\n  }\n\n  private _emitChangeEvent() {\n    let event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this.ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      this._removeFocusRipple();\n      this.onTouched();\n    }\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n\n  /** Fades out the focus state ripple. */\n  private _removeFocusRipple(): void {\n    if (this._focusRipple) {\n      this._focusRipple.fadeOut();\n      this._focusRipple = null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {MatRippleModule, MatCommonModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, ObserversModule, A11yModule],\n  exports: [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule],\n  declarations: [MatCheckbox, MatCheckboxRequiredValidator],\n})\nexport class MatCheckboxModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n} from '@angular/core';\nimport {CanColor, CanDisable, mixinColor, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nexport class MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatChipMixinBase = mixinColor(mixinDisabled(MatChipBase), 'primary');\n\n\n/**\n * Dummy directive to add CSS class to basic chips.\n * @docs-private\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip]`,\n  host: {'class': 'mat-basic-chip'},\n})\nexport class MatBasicChip {\n}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_hasFocus = true',\n    '(blur)': '_blur()',\n  },\n\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable {\n\n  protected _value: any;\n\n  protected _selected: boolean = false;\n\n  protected _selectable: boolean = true;\n\n  protected _removable: boolean = true;\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) {\n    this._selected = coerceBooleanProperty(value);\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: value\n    });\n  }\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n  @Input()\n  get value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(newValue: any) {\n    this._value = newValue;\n  }\n\n  /**\n   * Whether or not the chips are selectable. When a chip is not selectable,\n   * changes to it's selected state are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (remove) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n\n  /** Emits when the chip is focused. */\n  readonly _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  readonly _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\n      new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() readonly destroyed = new EventEmitter<MatChipEvent>();\n\n  /**\n   * Emitted when the chip is destroyed.\n   * @deprecated Use 'destroyed' instead.\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly destroy: EventEmitter<MatChipEvent> = this.destroyed;\n\n  /** Emitted when a chip is to be removed. */\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /**\n   * Emitted when a chip is to be removed.\n   * @deprecated Use `removed` instead.\n   * @deletion-target 6.0.0\n   */\n  @Output('remove') onRemove: EventEmitter<MatChipEvent> = this.removed;\n\n  get ariaSelected(): string | null {\n    return this.selectable ? this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef) {\n    super(_elementRef);\n  }\n\n  ngOnDestroy(): void {\n    this.destroyed.emit({chip: this});\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    this._selected = true;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: true\n    });\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    this._selected = false;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: false\n    });\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    this._selected = true;\n    // Emit select event when selected changes.\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: true,\n      selected: true\n    });\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n    this._onFocus.next({chip: this});\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Ensures events fire properly upon click. */\n  _handleClick(event: Event) {\n    // Check disabled\n    if (this.disabled) {\n      return;\n    }\n\n    event.preventDefault();\n    event.stopPropagation();\n\n    this.focus();\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    this._hasFocus = false;\n    this._onBlur.next({chip: this});\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove',\n    '(click)': '_handleClick()',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {\n  }\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(): void {\n    if (this._parentChip.removable) {\n      this._parentChip.remove();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE} from '@angular/cdk/keycodes';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  ControlValueAccessor,\n  FormGroupDirective,\n  NgControl,\n  NgForm\n} from '@angular/forms';\nimport {ErrorStateMatcher, mixinErrorState, CanUpdateErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Observable} from 'rxjs/Observable';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipInput} from './chip-input';\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nexport class MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatChipListMixinBase = mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for it's similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': '_tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)'\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n    ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  readonly controlType = 'mat-chip-list';\n\n  /** When a chip is destroyed, we track the index so we can focus the appropriate next chip. */\n  protected _lastDestroyedIndex: number|null = null;\n\n  /** Track which chips we're listening to for focus/destruction. */\n  protected _chipSet: WeakMap<MatChip, boolean> = new WeakMap();\n\n  /** Subscription to tabbing out from the chip list. */\n  private _tabOutSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the chip list. */\n  private _changeSubscription: Subscription;\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription|null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription|null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription|null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription|null;\n\n  /** Whether or not the chip is selectable. */\n  protected _selectable: boolean = true;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipInput;\n\n  /** Id of the chip list */\n  protected _id: string;\n\n  /** Uid of the chip list */\n  protected _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** Whether this is required */\n  protected _required: boolean = false;\n\n  /** Whether this is disabled */\n  protected _disabled: boolean = false;\n\n  protected _value: any;\n\n  /** Placeholder for the chip list. Alternatively, placeholder can be set on MatChipInput */\n  protected _placeholder: string;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  get role(): string|null {\n    return this.empty ? null : 'listbox';\n  }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Required for FormFieldControl */\n  @Input()\n  get value() { return this._value; }\n  set value(newValue: any) {\n    this.writeValue(newValue);\n    this._value = newValue;\n  }\n\n  /** Required for FormFieldControl. The ID of the chip list */\n  @Input()\n  get id(): string { return this._id || this._uid; }\n  set id(value: string) {\n    this._id = value;\n    this.stateChanges.next();\n  }\n\n  /** Required for FormFieldControl. Whether the chip list is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** For FormFieldControl. Use chip input's placholder if there's a chip input */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return this.chips.some(chip => chip._hasFocus) ||\n      (this._chipInput && this._chipInput.focused);\n  }\n\n  /** Whether this chip-list contains no chips and no matChipInput. */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  /** @docs-private */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /** Whether this chip-list is disabled. */\n  @Input()\n  get disabled() { return this.ngControl ? this.ngControl.disabled : this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip is selectable. When a chip is not selectable,\n   * its selected state is always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) { this._selectable = coerceBooleanProperty(value); }\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroy));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipListChange> =\n      new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips)\n      .withWrap()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._tabOutSubscription = this._keyManager.tabOut.subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => this._tabIndex = this._userTabIndex || 0);\n    });\n\n    // When the list changes, re-subscribe\n    this._changeSubscription = this.chips.changes.pipe(startWith(null)).subscribe(() => {\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._tabOutSubscription.unsubscribe();\n\n    if (this._changeSubscription) {\n      this._changeSubscription.unsubscribe();\n    }\n    this._dropSubscriptions();\n    this.stateChanges.complete();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipInput) {\n    this._chipInput = inputElement;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor\n  setDisabledState(disabled: boolean): void {\n    this.disabled = disabled;\n    this._elementRef.nativeElement.disabled = disabled;\n    this.stateChanges.next();\n  }\n\n  /** @docs-private */\n  onContainerClick() {\n    this.focus();\n  }\n\n  /**\n   * Focuses the the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(): void {\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput();\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput() {\n    if (this._chipInput) {\n      this._chipInput.focus();\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    const target = event.target as HTMLElement;\n\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n    } else {\n      this._keyManager.onKeydown(event);\n      this.stateChanges.next();\n    }\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * Update key manager's active item when chip is deleted.\n   * If the deleted chip is the last chip in chip list, focus the new last chip.\n   * Otherwise focus the next chip in the list.\n   * Save `_lastDestroyedIndex` so we can set the correct focus.\n   */\n  protected _updateKeyManager(chip: MatChip) {\n    let chipIndex: number = this.chips.toArray().indexOf(chip);\n    if (this._isValidIndex(chipIndex)) {\n      if (chip._hasFocus) {\n        // Check whether the chip is not the last item\n        if (chipIndex < this.chips.length - 1) {\n          this._keyManager.setActiveItem(chipIndex);\n        } else if (chipIndex - 1 >= 0) {\n          this._keyManager.setActiveItem(chipIndex - 1);\n        }\n      }\n      if (this._keyManager.activeItemIndex === chipIndex) {\n        this._lastDestroyedIndex = chipIndex;\n      }\n    }\n  }\n\n  /**\n   * Checks to see if a focus chip was recently destroyed so that we can refocus the next closest\n   * one.\n   */\n  protected _updateFocusForDestroyedChips() {\n    let chipsArray = this.chips;\n\n    if (this._lastDestroyedIndex != null && chipsArray.length > 0) {\n      // Check whether the destroyed chip was the last item\n      const newFocusIndex = Math.min(this._lastDestroyedIndex, chipsArray.length - 1);\n      this._keyManager.setActiveItem(newFocusIndex);\n      let focusChip = this._keyManager.activeItem;\n      // Focus the chip\n      if (focusChip) {\n        focusChip.focus();\n      }\n    }\n\n    // Reset our destroyed index\n    this._lastDestroyedIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        const correspondingChipIndex = this.chips.toArray().indexOf(correspondingChip);\n\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChipIndex);\n        } else {\n          this._keyManager.updateActiveItemIndex(correspondingChipIndex);\n        }\n\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(_ => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe((event) => {\n      this._updateKeyManager(event.chip);\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {Directive, ElementRef, EventEmitter, Input, Output} from '@angular/core';\nimport {MatChipList} from './chip-list';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n  }\n})\nexport class MatChipInput {\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  // TODO(tinayuangao): Support Set here\n  @Input('matChipInputSeparatorKeyCodes') separatorKeyCodes: number[] = [ENTER];\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /** The input's placeholder text. */\n  @Input() placeholder: string = '';\n\n  /** Whether the input is empty. */\n  get empty(): boolean {\n    let value: string | null = this._inputElement.value;\n    return (value == null || value === '');\n  }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(protected _elementRef: ElementRef) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this.separatorKeyCodes.indexOf(event.keyCode) > -1) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  focus(): void { this._inputElement.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChipList} from './chip-list';\nimport {MatBasicChip, MatChip, MatChipRemove} from './chip';\nimport {MatChipInput} from './chip-input';\n\n\n@NgModule({\n  imports: [],\n  exports: [MatChipList, MatChip, MatChipInput, MatChipRemove, MatChipRemove, MatBasicChip],\n  declarations: [MatChipList, MatChip, MatChipInput, MatChipRemove,  MatChipRemove, MatBasicChip],\n  providers: [ErrorStateMatcher]\n})\nexport class MatChipsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking outside to close a modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction = 'ltr';\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /** Whether the dialog should close when the user goes backwards/forwards in history. */\n  closeOnNavigation?: boolean = true;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by MatDialog. */\nexport const matDialogAnimations: {\n  readonly slideDialog: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  slideDialog: trigger('slideDialog', [\n    // Note: The `enter` animation doesn't transition to something like `translate3d(0, 0, 0)\n    // scale(1)`, because for some reason specifying the transform explicitly, causes IE both\n    // to blur the dialog content and decimate the animation performance. Leaving it as `none`\n    // solves both issues.\n    state('enter', style({ transform: 'none', opacity: 1 })),\n    state('void', style({ transform: 'translate3d(0, 25%, 0) scale(0.9)', opacity: 0 })),\n    state('exit', style({ transform: 'translate3d(0, 25%, 0)', opacity: 0 })),\n    transition('* => *', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  ElementRef,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\n\n\n// TODO(kara): Convert attribute selectors to classes when attr maps become available\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'button[mat-button], a[mat-button]',\n  host: {'class': 'mat-button'}\n})\nexport class MatButtonCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'button[mat-raised-button], a[mat-raised-button]',\n  host: {'class': 'mat-raised-button'}\n})\nexport class MatRaisedButtonCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'button[mat-icon-button], a[mat-icon-button]',\n  host: {'class': 'mat-icon-button'}\n})\nexport class MatIconButtonCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'button[mat-fab], a[mat-fab]',\n  host: {'class': 'mat-fab'}\n})\nexport class MatFab {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'button[mat-mini-fab], a[mat-mini-fab]',\n  host: {'class': 'mat-mini-fab'}\n})\nexport class MatMiniFab {}\n\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nexport class MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatButtonMixinBase = mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab]`,\n  exportAs: 'matButton',\n  host: {\n    '[disabled]': 'disabled || null',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n\n  /** Whether the button is round. */\n  _isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  _isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor) {\n    super(elementRef);\n\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n\n    if (this._isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    // If not on the browser, say that there are none of the attributes present.\n    // Since these only affect how the ripple displays (and ripples only happen on the client),\n    // detecting these attributes isn't necessary when not on the browser.\n    if (!this._platform.isBrowser) {\n      return false;\n    }\n\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Raised Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab], a[mat-mini-fab]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n  constructor(\n      platform: Platform,\n      focusMonitor: FocusMonitor,\n      elementRef: ElementRef) {\n    super(elementRef, platform, focusMonitor);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {\n  MatAnchor,\n  MatButton,\n  MatMiniFab,\n  MatButtonCssMatStyler,\n  MatFab,\n  MatIconButtonCssMatStyler,\n  MatRaisedButtonCssMatStyler\n} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n    A11yModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatMiniFab,\n    MatFab,\n    MatCommonModule,\n    MatButtonCssMatStyler,\n    MatRaisedButtonCssMatStyler,\n    MatIconButtonCssMatStyler,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n    MatMiniFab,\n    MatFab,\n    MatButtonCssMatStyler,\n    MatRaisedButtonCssMatStyler,\n    MatIconButtonCssMatStyler,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n// Boilerplate for applying mixins to MatButtonToggleGroup and MatButtonToggleGroupMultiple\n/** @docs-private */\nexport class MatButtonToggleGroupBase {}\nexport const _MatButtonToggleGroupMixinBase = mixinDisabled(MatButtonToggleGroupBase);\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  /** The MatButtonToggle that emits the event. */\n  source: MatButtonToggle | null;\n  /** The value assigned to the MatButtonToggle. */\n  value: any;\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group:not([multiple])',\n  providers: [MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR],\n  inputs: ['disabled'],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-button-toggle-group',\n    '[class.mat-button-toggle-vertical]': 'vertical'\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup extends _MatButtonToggleGroupMixinBase\n    implements ControlValueAccessor, CanDisable {\n\n  /** The value for the button toggle group. Should match currently selected button toggle. */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to toggles in this group. */\n  private _name: string = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the button toggle group should be vertical. */\n  private _vertical: boolean = false;\n\n  /** The currently selected button toggle, should match the value. */\n  private _selected: MatButtonToggle | null = null;\n\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateButtonToggleNames();\n  }\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value != newValue) {\n      this._value = newValue;\n      this.valueChange.emit(newValue);\n      this._updateSelectedButtonToggleFromValue();\n    }\n  }\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() readonly valueChange = new EventEmitter<any>();\n\n  /** Whether the toggle group is selected. */\n  @Input()\n  get selected(): MatButtonToggle | null { return this._selected; }\n  set selected(selected: MatButtonToggle | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n\n    if (selected && !selected.checked) {\n      selected.checked = true;\n    }\n  }\n\n  /** Event emitted when the group's value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  private _updateButtonToggleNames(): void {\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach((toggle) => {\n        toggle.name = this._name;\n      });\n    }\n  }\n\n  // TODO: Refactor into shared code with radio.\n  private _updateSelectedButtonToggleFromValue(): void {\n    let isAlreadySelected = this._selected != null && this._selected.value == this._value;\n\n    if (this._buttonToggles != null && !isAlreadySelected) {\n      let matchingButtonToggle = this._buttonToggles.filter(\n          buttonToggle => buttonToggle.value == this._value)[0];\n\n      if (matchingButtonToggle) {\n        this.selected = matchingButtonToggle;\n      } else if (this.value == null) {\n        this.selected = null;\n        this._buttonToggles.forEach(buttonToggle => {\n          buttonToggle.checked = false;\n        });\n      }\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    let event = new MatButtonToggleChange();\n    event.source = this._selected;\n    event.value = this._value;\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback that will be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn On change callback function.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback that will be triggered when the control has been touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn On touch callback function.\n   */\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Toggles the disabled state of the component. Implemented as part of ControlValueAccessor.\n   * @param isDisabled Whether the component should be disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._markButtonTogglesForCheck();\n  }\n\n  private _markButtonTogglesForCheck() {\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach((toggle) => toggle._markForCheck());\n    }\n  }\n}\n\n/** Multiple selection button-toggle group. `ngModel` is not supported in this mode. */\n@Directive({\n  selector: 'mat-button-toggle-group[multiple]',\n  exportAs: 'matButtonToggleGroup',\n  inputs: ['disabled'],\n  host: {\n    'class': 'mat-button-toggle-group',\n    '[class.mat-button-toggle-vertical]': 'vertical',\n    'role': 'group'\n  }\n})\nexport class MatButtonToggleGroupMultiple extends _MatButtonToggleGroupMixinBase\n    implements CanDisable {\n\n  /** Whether the button toggle group should be vertical. */\n  private _vertical: boolean = false;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n}\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup && !buttonToggleGroupMultiple',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    'class': 'mat-button-toggle',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatButtonToggle implements OnInit, OnDestroy {\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether or not this button toggle is checked. */\n  private _checked: boolean = false;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  /** Whether or not this button toggle is disabled. */\n  private _disabled: boolean = false;\n\n  /** Value assigned to this button toggle. */\n  private _value: any = null;\n\n  /** Whether or not the button toggle is a single selection. */\n  private _isSingleSelector: boolean = false;\n\n  /** Unregister function for _buttonToggleDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** The parent button toggle group (multiple selection). Optional. */\n  buttonToggleGroupMultiple: MatButtonToggleGroupMultiple;\n\n  /** Unique ID for the underlying `input` element. */\n  get inputId(): string { return `${this.id}-input`; }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(newCheckedState: boolean) {\n    if (this._isSingleSelector && newCheckedState) {\n      // Notify all button toggles with the same name (in the same group) to un-check.\n      this._buttonToggleDispatcher.notify(this.id, this.name);\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._checked = newCheckedState;\n\n    if (newCheckedState && this._isSingleSelector && this.buttonToggleGroup.value != this.value) {\n      this.buttonToggleGroup.selected = this;\n    }\n  }\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value != value) {\n      if (this.buttonToggleGroup != null && this.checked) {\n        this.buttonToggleGroup.value = value;\n      }\n      this._value = value;\n    }\n  }\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup != null && this.buttonToggleGroup.disabled) ||\n        (this.buttonToggleGroupMultiple != null && this.buttonToggleGroupMultiple.disabled);\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n\n  /** Event emitted when the group value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              @Optional() toggleGroupMultiple: MatButtonToggleGroupMultiple,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _buttonToggleDispatcher: UniqueSelectionDispatcher,\n              private _elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor) {\n\n    this.buttonToggleGroup = toggleGroup;\n    this.buttonToggleGroupMultiple = toggleGroupMultiple;\n\n    if (this.buttonToggleGroup) {\n      this._removeUniqueSelectionListener =\n        _buttonToggleDispatcher.listen((id: string, name: string) => {\n          if (id != this.id && name == this.name) {\n            this.checked = false;\n            this._changeDetectorRef.markForCheck();\n          }\n        });\n\n      this._type = 'radio';\n      this.name = this.buttonToggleGroup.name;\n      this._isSingleSelector = true;\n    } else {\n      // Even if there is no group at all, treat the button toggle as a checkbox so it can be\n      // toggled on or off.\n      this._type = 'checkbox';\n      this._isSingleSelector = false;\n    }\n  }\n\n  ngOnInit() {\n    if (this.id == null) {\n      this.id = `mat-button-toggle-${_uniqueIdCounter++}`;\n    }\n\n    if (this.buttonToggleGroup && this._value == this.buttonToggleGroup.value) {\n      this._checked = true;\n    }\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n  }\n\n  /** Focuses the button. */\n  focus() {\n    this._inputElement.nativeElement.focus();\n  }\n\n  /** Toggle the state of the current button toggle. */\n  private _toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native input. */\n  _onInputChange(event: Event) {\n    event.stopPropagation();\n\n    if (this._isSingleSelector) {\n      // Propagate the change one-way via the group, which will in turn mark this\n      // button toggle as checked.\n      let groupValueChanged = this.buttonToggleGroup.selected != this;\n      this.checked = true;\n      this.buttonToggleGroup.selected = this;\n      this.buttonToggleGroup._onTouched();\n      if (groupValueChanged) {\n        this.buttonToggleGroup._emitChangeEvent();\n      }\n    } else {\n      this._toggle();\n    }\n\n    // Emit a change event when the native input does.\n    this._emitChangeEvent();\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    let event = new MatButtonToggleChange();\n    event.source = this;\n    event.value = this._value;\n    this.change.emit(event);\n  }\n\n  // Unregister buttonToggleDispatcherListener on destroy\n  ngOnDestroy(): void {\n    this._removeUniqueSelectionListener();\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update button toggle's status\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatButtonToggleGroup, MatButtonToggleGroupMultiple, MatButtonToggle} from './button-toggle';\nimport {MatCommonModule} from '@angular/material/core';\nimport {UNIQUE_SELECTION_DISPATCHER_PROVIDER} from '@angular/cdk/collections';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n\n@NgModule({\n  imports: [MatCommonModule, A11yModule],\n  exports: [\n    MatButtonToggleGroup,\n    MatButtonToggleGroupMultiple,\n    MatButtonToggle,\n    MatCommonModule,\n  ],\n  declarations: [MatButtonToggleGroup, MatButtonToggleGroupMultiple, MatButtonToggle],\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER]\n})\nexport class MatButtonToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n} from '@angular/core';\n\n\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-content',\n  host: {'class': 'mat-card-content'}\n})\nexport class MatCardContent {}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n})\nexport class MatCardTitle {}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n})\nexport class MatCardSubtitle {}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-actions',\n  exportAs: 'matCardActions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n})\nexport class MatCardActions {\n  /** Position of the actions inside the card. */\n  @Input() align: 'start' | 'end' = 'start';\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n})\nexport class MatCardFooter {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-image], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n})\nexport class MatCardImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n})\nexport class MatCardSmImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-md-image], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n})\nexport class MatCardMdImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n})\nexport class MatCardLgImage {}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n})\nexport class MatCardXlImage {}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-avatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n})\nexport class MatCardAvatar {}\n\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card',\n  exportAs: 'matCard',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card'}\n})\nexport class MatCard {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n})\nexport class MatCardHeader {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n})\nexport class MatCardTitleGroup {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatCard,\n  MatCardHeader,\n  MatCardTitleGroup,\n  MatCardContent,\n  MatCardTitle,\n  MatCardSubtitle,\n  MatCardActions,\n  MatCardFooter,\n  MatCardSmImage,\n  MatCardMdImage,\n  MatCardLgImage,\n  MatCardImage,\n  MatCardXlImage,\n  MatCardAvatar,\n} from './card';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatCard,\n    MatCardHeader,\n    MatCardTitleGroup,\n    MatCardContent,\n    MatCardTitle,\n    MatCardSubtitle,\n    MatCardActions,\n    MatCardFooter,\n    MatCardSmImage,\n    MatCardMdImage,\n    MatCardLgImage,\n    MatCardImage,\n    MatCardXlImage,\n    MatCardAvatar,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n    MatCardXlImage, MatCardAvatar,\n  ],\n})\nexport class MatCardModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {Subject} from 'rxjs/Subject';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n  AfterViewChecked,\n} from '@angular/core';\nimport {MatOptgroup} from './optgroup';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT =\n    new InjectionToken<MatOptionParentComponent>('MAT_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  styleUrls: ['option.css'],\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption implements AfterViewChecked {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _id = `mat-option-${_uniqueIdCounter++}`;\n  private _mostRecentViewValue = '';\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() { return this._parent && this._parent.multiple; }\n\n  /** The unique ID of the option. */\n  get id(): string { return this._id; }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple() { return this._parent && this._parent.disableRipple; }\n\n  /** Event emitted when the option is selected or deselected. */\n  @Output() readonly onSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n\n  /** Emits when the state of the option changes and any parents have to be notified. */\n  readonly _stateChanges = new Subject<void>();\n\n  constructor(\n    private _element: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() readonly group: MatOptgroup) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    this._selected = true;\n    this._changeDetectorRef.markForCheck();\n    this._emitSelectionChangeEvent();\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    this._selected = false;\n    this._changeDetectorRef.markForCheck();\n    this._emitSelectionChangeEvent();\n  }\n\n  /** Sets focus onto this option. */\n  focus(): void {\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * `Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.`\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  ngAfterViewChecked() {\n    // Since parent components could be using the option's label to display the selected values\n    // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n    // relatively cheap, however we still limit them only to selected options in order to avoid\n    // hitting the DOM too often.\n    if (this._selected) {\n      const viewValue = this.viewValue;\n\n      if (viewValue !== this._mostRecentViewValue) {\n        this._mostRecentViewValue = viewValue;\n        this._stateChanges.next();\n      }\n    }\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n\n  /**\n   * Counts the amount of option group labels that precede the specified option.\n   * @param optionIndex Index of the option at which to start counting.\n   * @param options Flat list of all of the options.\n   * @param optionGroups Flat list of all of the option groups.\n   */\n  static countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n    optionGroups: QueryList<MatOptgroup>): number {\n\n    if (optionGroups.length) {\n      let optionsArray = options.toArray();\n      let groups = optionGroups.toArray();\n      let groupCounter = 0;\n\n      for (let i = 0; i < optionIndex + 1; i++) {\n        if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n          groupCounter++;\n        }\n      }\n\n      return groupCounter;\n    }\n\n    return 0;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n\n@NgModule({\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup]\n})\nexport class MatOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MAT_LABEL_GLOBAL_OPTIONS =\n  new InjectionToken<LabelOptions>('mat-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n  /**\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n   * Default behavior is assumed to be `auto`.\n   */\n  float?: FloatLabelType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the MatFormField. */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs/Observable';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat?: boolean;\n\n  /**\n   * Whether the `MatFormField` placeholder should try to float.\n   * @deprecated Use `shouldLabelFloat` instead.\n   * @deletion-target 6.0.0\n   */\n  readonly shouldPlaceholderFloat?: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The placeholder text for an `MatFormField`. */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed the the front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  Input,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  FloatLabelType,\n  LabelOptions,\n  MAT_LABEL_GLOBAL_OPTIONS,\n  mixinColor,\n  ThemePalette\n} from '@angular/material/core';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {take} from 'rxjs/operators/take';\nimport {MatError} from './error';\nimport {matFormFieldAnimations} from './form-field-animations';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\n\n\n// Boilerplate for applying mixins to MatFormField.\n/** @docs-private */\nexport class MatFormFieldBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\nexport const _MatFormFieldMixinBase = mixinColor(MatFormFieldBase, 'primary');\n\n\nlet nextUniqueId = 0;\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  // TODO(mmalerba): the input-container selectors and classes are deprecated and will be removed.\n  selector: 'mat-input-container, mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here.\n  // The MatInput styles are fairly minimal so it shouldn't be a big deal for people who\n  // aren't using MatInput.\n  styleUrls: ['form-field.css', '../input/input.css'],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-input-container mat-form-field',\n    '[class.mat-input-invalid]': '_control.errorState',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n  },\n  inputs: ['color'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField extends _MatFormFieldMixinBase\n    implements AfterContentInit, AfterContentChecked, AfterViewInit, CanColor {\n  private _labelOptions: LabelOptions;\n\n  /**\n   * @deprecated Use `color` instead.\n   * @deletion-target 6.0.0\n   */\n  @Input()\n  get dividerColor(): ThemePalette { return this.color; }\n  set dividerColor(value: ThemePalette) { this.color = value; }\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker(): boolean { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: boolean) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat() {\n    return this._floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat() { return this._floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel(): string { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  /**\n   * Whether the placeholder should always float, never float or float as the user types.\n   * @deprecated Use floatLabel instead.\n   * @deletion-target 6.0.0\n   */\n  @Input()\n  get floatPlaceholder(): FloatLabelType { return this._floatLabel; }\n  set floatPlaceholder(value: FloatLabelType) { this.floatLabel = value; }\n\n  /** Whether the label should always float, never float or float as the user types. */\n  @Input()\n  get floatLabel(): FloatLabelType { return this._floatLabel; }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  /** Reference to the form field's underline element. */\n  @ViewChild('underline') underlineRef: ElementRef;\n  @ViewChild('connectionContainer') _connectionContainerRef: ElementRef;\n  @ViewChild('inputContainer') _inputContainerRef: ElementRef;\n  @ViewChild('label') private _label: ElementRef;\n  @ContentChild(MatFormFieldControl) _control: MatFormFieldControl<any>;\n  @ContentChild(MatPlaceholder) _placeholderChild: MatPlaceholder;\n  @ContentChild(MatLabel) _labelChild: MatLabel;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions) {\n    super(_elementRef);\n\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n    if (this._control.controlType) {\n      this._elementRef.nativeElement.classList\n          .add(`mat-form-field-type-${this._control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    this._control.stateChanges.pipe(startWith(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    let ngControl = this._control.ngControl;\n    if (ngControl && ngControl.valueChanges) {\n      ngControl.valueChanges.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: string): boolean {\n    let ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && (ngControl as any)[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat ||\n        this._control.shouldPlaceholderFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    return !this._hasLabel() || !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    return this._hasLabel() || this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      this._showAlwaysAnimate = true;\n      this._floatLabel = 'always';\n\n      fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n        this._showAlwaysAnimate = false;\n      });\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align === 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align === 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        let startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        let endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {MatLabel} from './label';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatHint,\n    MatFormField,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n    MatLabel,\n  ],\n  imports: [\n    CommonModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatError,\n    MatHint,\n    MatFormField,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n    MatLabel,\n  ],\n})\nexport class MatFormFieldModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  ElementRef,\n  Input,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n  EventEmitter,\n  Output,\n  InjectionToken,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {\n  MatOption,\n  MatOptgroup,\n  MAT_OPTION_PARENT_COMPONENT,\n  mixinDisableRipple,\n  CanDisableRipple,\n} from '@angular/material/core';\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected. */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nexport class MatAutocompleteBase {}\nexport const _MatAutocompleteMixinBase = mixinDisableRipple(MatAutocompleteBase);\n\n/** Default `mat-autocomplete` options that can be overridden. */\nexport interface MatAutocompleteDefaultOptions {\n  /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n  autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nexport const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<MatAutocompleteDefaultOptions>('mat-autocomplete-default-options');\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean {\n    return this._isOpen && this.showPanel;\n  }\n  _isOpen: boolean = false;\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /**\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n   */\n  @Input()\n  get autoActiveFirstOption(): boolean { return this._autoActiveFirstOption; }\n  set autoActiveFirstOption(value: boolean) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  private _autoActiveFirstOption: boolean;\n\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(classList: string) {\n    if (classList && classList.length) {\n      classList.split(' ').forEach(className => this._classList[className.trim()] = true);\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef,\n\n    // @deletion-target Turn into required param in 6.0.0\n    @Optional() @Inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS)\n        defaults?: MatAutocompleteDefaultOptions) {\n    super();\n\n    this._autoActiveFirstOption = defaults &&\n        typeof defaults.autoActiveFirstOption !== 'undefined' ?\n            defaults.autoActiveFirstOption :\n            false;\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibiity state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._classList['mat-autocomplete-visible'] = this.showPanel;\n    this._classList['mat-autocomplete-hidden'] = !this.showPanel;\n    this._changeDetectorRef.markForCheck();\n}\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER,\n} from './autocomplete-trigger';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [MatAutocomplete, MatOptionModule, MatAutocompleteTrigger, MatCommonModule],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger],\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER],\n})\nexport class MatAutocompleteModule {}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  /** Whether the component is disabled. */\n  disabled: boolean;\n}\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): Constructor<CanDisable> & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled() { return this._disabled; }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  /** Theme color palette for the component. */\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values. */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(base: T,\n    defaultColor?: ThemePalette): Constructor<CanColor> & T {\n  return class extends base {\n    private _color: ThemePalette;\n\n    get color(): ThemePalette { return this._color; }\n    set color(value: ThemePalette) {\n      const colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  /** Whether ripples are disabled. */\n  disableRipple: boolean;\n}\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T)\n    : Constructor<CanDisableRipple> & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n/** @docs-private */\nexport interface HasTabIndex {\n  /** Tabindex of the component. */\n  tabIndex: number;\n}\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : Constructor<HasTabIndex> & T {\n  return class extends base {\n    private _tabIndex: number = defaultTabIndex;\n\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs/Subject';\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  updateErrorState();\n  readonly stateChanges: Subject<void>;\n  errorState: boolean;\n  errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n  ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n: Constructor<CanUpdateErrorState> & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping\n     * `MatFormField` needs to run change detection.\n     */\n    readonly stateChanges = new Subject<void>();\n\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n  private readonly _clampDate: boolean;\n\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   */\n  useUtcForDisplay: boolean;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    // TODO(mmalerba): replace with checks from PLATFORM, logic currently duplicated to avoid\n    // breaking change from injecting the Platform.\n    const isBrowser = typeof document === 'object' && !!document;\n    const isIE = isBrowser && /(msie|trident)/i.test(navigator.userAgent);\n\n    this.useUtcForDisplay = !isIE;\n    this._clampDate = isIE || (isBrowser && /(edge)/i.test(navigator.userAgent));\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      let dtf = new Intl.DateTimeFormat(this.locale, {month: style});\n      return range(12, i => this._stripDirectionalityCharacters(dtf.format(new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      let dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          dtf.format(new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      let dtf = new Intl.DateTimeFormat(this.locale, {weekday: style});\n      return range(7, i => this._stripDirectionalityCharacters(\n          dtf.format(new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      let dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric'});\n      return this._stripDirectionalityCharacters(dtf.format(date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    if (SUPPORTS_INTL_API) {\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n        date = this.clone(date);\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n      }\n\n      if (this.useUtcForDisplay) {\n        date = new Date(Date.UTC(\n            date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n            date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n        displayFormat = {...displayFormat, timeZone: 'utc'};\n      }\n\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(dtf.format(date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    let result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, supportsPassiveEventListeners} from '@angular/cdk/platform';\nimport {RippleRef, RippleState} from './ripple-ref';\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  persistent?: boolean;\n  animation?: RippleAnimationConfig;\n  /** @deprecated Use the animation property instead. */\n  speedFactor?: number;\n};\n\n/**\n * Interface that describes the configuration for the animation of a ripple.\n * There are two animation phases with different durations for the ripples.\n */\nexport interface RippleAnimationConfig {\n  /** Duration in milliseconds for the enter animation (expansion from point of contact). */\n  enterDuration?: number;\n  /** Duration in milliseconds for the exit animation (fade-out). */\n  exitDuration?: number;\n}\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nexport const defaultRippleAnimationConfig = {\n  enterDuration: 450,\n  exitDuration: 400\n};\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst ignoreMouseEventsTimeout = 800;\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer {\n\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /** Events to be registered on the trigger element. */\n  private _triggerEvents = new Map<string, any>();\n\n  /** Set of currently active ripple references. */\n  private _activeRipples = new Set<RippleRef>();\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /** Options that apply to all the event listeners that are bound by the renderer. */\n  private _eventOptions = supportsPassiveEventListeners() ? ({passive: true} as any) : false;\n\n  constructor(private _target: RippleTarget,\n              private _ngZone: NgZone,\n              elementRef: ElementRef,\n              platform: Platform) {\n\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents.set('mousedown', this.onMousedown);\n      this._triggerEvents.set('mouseup', this.onPointerUp);\n      this._triggerEvents.set('mouseleave', this.onPointerUp);\n\n      this._triggerEvents.set('touchstart', this.onTouchStart);\n      this._triggerEvents.set('touchend', this.onPointerUp);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = this._containerElement.getBoundingClientRect();\n    const animationConfig = {...defaultRippleAnimationConfig, ...config.animation};\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n    const duration = animationConfig.enterDuration / (config.speedFactor || 1);\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.VISIBLE;\n\n      if (!config.persistent && !this._isPointerDown) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    // For ripples that are not active anymore, don't re-un the fade-out animation.\n    if (!this._activeRipples.delete(rippleRef)) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n    const animationConfig = {...defaultRippleAnimationConfig, ...rippleRef.config.animation};\n\n    rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n    rippleEl.style.opacity = '0';\n\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode!.removeChild(rippleEl);\n    }, animationConfig.exitDuration);\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(element: HTMLElement) {\n    if (!element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n\n    this._ngZone.runOutsideAngular(() => {\n      this._triggerEvents.forEach((fn, type) =>\n          element.addEventListener(type, fn, this._eventOptions));\n    });\n\n    this._triggerElement = element;\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private onMousedown = (event: MouseEvent) => {\n    const isSyntheticEvent = this._lastTouchStartEvent &&\n        Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n\n    if (!this._target.rippleDisabled && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private onTouchStart = (event: TouchEvent) => {\n    if (!this._target.rippleDisabled) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      this.fadeInRipple(\n          event.touches[0].clientX, event.touches[0].clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private onPointerUp = () => {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are completely visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      if (!ripple.config.persistent && ripple.state === RippleState.VISIBLE) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n  private runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => {\n        this._triggerElement!.removeEventListener(type, fn, this._eventOptions);\n      });\n    }\n  }\n}\n\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Converts values into strings. Falsy values become empty strings.\n * @docs-private\n */\nexport function coerceToString(value: string | number): string {\n  return `${value || ''}`;\n}\n\n/**\n * Converts a value that might be a string into a number.\n * @docs-private\n */\nexport function coerceToNumber(value: string | number): number {\n  return typeof value === 'string' ? parseInt(value, 10) : value;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`mat-menu-trigger: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`x-position value must be either 'before' or after'.\n      Example: <mat-menu x-position=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`y-position value must be either 'above' or below'.\n      Example: <mat-menu y-position=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {BidiModule} from '@angular/cdk/bidi';\n\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks');\n\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n  providers: [{\n    provide: MATERIAL_SANITY_CHECKS, useValue: true,\n  }],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  /** Whether we've already checked for HammerJs availability. */\n  private _hasCheckedHammer = false;\n\n  /** Reference to the global `document` object. */\n  private _document = typeof document === 'object' && document ? document : null;\n\n  /** Reference to the global 'window' object. */\n  private _window = typeof window === 'object' && window ? window : null;\n\n  constructor(@Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecksEnabled: boolean) {\n    if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n      this._checkDoctypeIsDefined();\n      this._checkThemeIsPresent();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n\n  /** Whether any sanity checks are enabled */\n  private _areChecksEnabled(): boolean {\n    return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n  }\n\n  /** Whether the code is running in tests. */\n  private _isTestEnv() {\n    return this._window && (this._window['__karma__'] || this._window['jasmine']);\n  }\n\n  private _checkDoctypeIsDefined(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n\n  private _checkThemeIsPresent(): void {\n    if (this._document && typeof getComputedStyle === 'function') {\n      const testElement = this._document.createElement('div');\n\n      testElement.classList.add('mat-theme-loaded-marker');\n      this._document.body.appendChild(testElement);\n\n      const computedStyle = getComputedStyle(testElement);\n\n      // In some situations, the computed style of the test element can be null. For example in\n      // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n      // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n      if (computedStyle && computedStyle.display !== 'none') {\n        console.warn(\n          'Could not find Angular Material core theme. Most Material ' +\n          'components may not work as expected. For more info refer ' +\n          'to the theming guide: https://material.angular.io/guide/theming'\n        );\n      }\n\n      this._document.body.removeChild(testElement);\n    }\n  }\n\n  /** Checks whether HammerJS is available. */\n  _checkHammerIsAvailable(): void {\n    if (this._hasCheckedHammer || !this._window) {\n      return;\n    }\n\n    if (this._areChecksEnabled() && !this._window['Hammer']) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material components may not work correctly.');\n    }\n    this._hasCheckedHammer = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE');\n\n/** Provider for MAT_DATE_LOCALE injection token. */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges= new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE_PROVIDER} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n    MAT_DATE_LOCALE_PROVIDER\n  ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable()\nexport class ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {\n  HammerStatic,\n  HammerInstance,\n  Recognizer,\n  RecognizerStatic,\n  HammerOptions,\n} from './gesture-annotations';\n\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\n\n/** Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class GestureConfig extends HammerGestureConfig {\n  private _hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\n\n  /** List of new event names to add to the gesture support list */\n  events: string[] = this._hammer ? [\n    'longpress',\n    'slide',\n    'slidestart',\n    'slideend',\n    'slideright',\n    'slideleft'\n  ] : [];\n\n  constructor(\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\n    @Optional() commonModule?: MatCommonModule) {\n    super();\n    if (commonModule) {\n      commonModule._checkHammerIsAvailable();\n    }\n  }\n\n  /**\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://www.google.com/design/spec/patterns/gestures.html#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * @param element Element to which to assign the new HammerJS gestures.\n   * @returns Newly-created HammerJS instance.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const mc = new this._hammer(element, this._hammerOptions || undefined);\n\n    // Default Hammer Recognizers.\n    const pan = new this._hammer.Pan();\n    const swipe = new this._hammer.Swipe();\n    const press = new this._hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return mc as HammerInstance;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  NgModule,\n  Directive,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport class MatLineSetter {\n  constructor(private _lines: QueryList<MatLine>, private _element: ElementRef) {\n    this._setLineClass(this._lines.length);\n\n    this._lines.changes.subscribe(() => {\n      this._setLineClass(this._lines.length);\n    });\n  }\n\n  private _setLineClass(count: number): void {\n    this._resetClasses();\n    if (count === 2 || count === 3) {\n      this._setClass(`mat-${count}-line`, true);\n    } else if (count > 3) {\n      this._setClass(`mat-multi-line`, true);\n    }\n  }\n\n  private _resetClasses(): void {\n    this._setClass('mat-2-line', false);\n    this._setClass('mat-3-line', false);\n    this._setClass('mat-multi-line', false);\n  }\n\n  private _setClass(className: string, isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add(className);\n    } else {\n      this._element.nativeElement.classList.remove(className);\n    }\n  }\n\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\n\n/** Possible states for a ripple element. */\nexport enum RippleState {\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n\n  /** Current state of the ripple reference. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: RippleRenderer,\n    public element: HTMLElement,\n    public config: RippleConfig) {\n  }\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {RippleRef} from './ripple-ref';\nimport {RippleAnimationConfig, RippleConfig, RippleRenderer, RippleTarget} from './ripple-renderer';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * Configuration for the animation duration of the ripples.\n   * There are two phases with different durations for the ripples.\n   */\n  animation?: RippleAnimationConfig;\n\n  /**\n   * If set, the default duration of the fade-in animation is divided by this value. For example,\n   * setting it to 0.5 will cause the ripple fade-in animation to take twice as long.\n   * A changed speedFactor will not affect the fade-out duration of the ripples.\n   * @deprecated Use the `animation` global option instead.\n   */\n  baseSpeedFactor?: number;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * If set, the normal duration of ripple animations is divided by this value. For example,\n   * setting it to 0.5 will cause the animations to take twice as long.\n   * A changed speedFactor will not modify the fade-out duration of the ripples.\n   * @deprecated Use the [matRippleAnimation] binding instead.\n   */\n  @Input('matRippleSpeedFactor') speedFactor: number = 1;\n\n  /**\n   * Configuration for the ripple animation. Allows modifying the enter and exit animation\n   * duration of the ripples.\n   */\n  @Input('matRippleAnimation') animation: RippleAnimationConfig;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() { return this._trigger || this._elementRef.nativeElement; }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** Whether ripple directive is initialized and the input bindings are set. */\n  private _isInitialized: boolean = false;\n\n  constructor(private _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions) {\n\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Launches a manual ripple at the specified position. */\n  launch(x: number, y: number, config?: RippleConfig): RippleRef {\n    return this._rippleRenderer.fadeInRipple(x, y, {...this.rippleConfig, ...config});\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /** Ripple configuration from the directive's input values. */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      radius: this.radius,\n      color: this.color,\n      animation: {...this._globalOptions.animation, ...this.animation},\n      speedFactor: this.speedFactor * (this._globalOptions.baseSpeedFactor || 1),\n    };\n  }\n\n  /** Whether ripples on pointer-down are disabled or not. */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\n\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n})\nexport class MatPseudoCheckboxModule { }\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\nimport {mixinDisabled, CanDisable} from '../common-behaviors/disabled';\n\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nexport class MatOptgroupBase { }\nexport const _MatOptgroupMixinBase = mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  styleUrls: ['optgroup.css'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n})\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n"],"names":["SELECT_PANEL_PADDING_X","MatTab","prototype","ngOnInit","this","_contentPortal","TemplatePortal","_content","_viewContainerRef","type","Component","args","selector","template","inputs","changeDetection","ChangeDetectionStrategy","OnPush","encapsulation","ViewEncapsulation","None","preserveWhitespaces","exportAs","propDecorators","textLabel","Input","_MatTabMixinBase","matTabsAnimations","translateTab","trigger","state","style","transform","transition","animate","MatTabBodyPortal","_componentFactoryResolver","_host","_this","_super","call","tslib_1.__extends","_isCenterPosition","_position","attach","_centeringSub","_beforeCentering","subscribe","isCentering","hasAttached","_leavingSub","_afterLeavingCenter","detach","ngOnDestroy","closed","unsubscribe","Directive","ComponentFactoryResolver","ViewContainerRef","MatTabBody","decorators","Inject","forwardRef","CdkPortalOutlet","_elementRef","_dir","_onCentering","EventEmitter","_onCentered","Object","defineProperty","position","_getLayoutDirection","origin","dir","_origin","_onTranslateTabStarted","e","toState","emit","nativeElement","clientHeight","_onTranslateTabComplete","fromState","value","styles","animations","host","class","Output","nextId","MatTabChangeEvent","MatTabGroupBase","_MatTabGroupMixinBase","mixinColor","mixinDisableRipple","MatTabGroup","elementRef","_changeDetectorRef","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","Subscription","EMPTY","_tabLabelSubscription","_dynamicHeight","_selectedIndex","headerPosition","selectedIndexChange","focusChange","animationDone","selectedTabChange","selectChange","_groupId","coerceBooleanProperty","coerceNumberProperty","_backgroundColor","classList","remove","backgroundColor","add","ngAfterContentChecked","indexToSelect","Math","min","_tabs","length","max","tabChangeEvent","_createChangeEvent","Promise","resolve","then","forEach","tab","index","isActive","markForCheck","ngAfterContentInit","_subscribeToTabLabels","changes","_focusChanged","event","toArray","merge","apply","map","_disableChange","concat","_labelChange","_getTabLabelId","i","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","height","offsetHeight","_removeTabBodyWrapperHeight","_handleClick","tabHeader","idx","disabled","selectedIndex","focusIndex","_getTabIndex","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","dynamicHeight","_dynamicHeightDeprecated","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","mixinDisabled","MatTabLabelWrapper","focus","getOffsetLeft","offsetLeft","getOffsetWidth","offsetWidth","[class.mat-tab-disabled]","ElementRef","MatTabHeaderBase","_MatTabHeaderMixinBase","MatTabHeader","_viewportRuler","_focusIndex","_scrollDistance","_selectedIndexChanged","_realignInkBar","_showPaginationControls","_disableScrollAfter","_disableScrollBefore","selectFocusedIndex","indexFocused","_tabLabelCount","_labelWrappers","_updatePagination","_scrollToLabel","_checkScrollingControls","_alignInkBarToSelectedTab","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","keyCode","RIGHT_ARROW","_focusNextTab","LEFT_ARROW","_focusPreviousTab","HOME","_focusFirstTab","preventDefault","END","_focusLastTab","ENTER","SPACE","dirChange","change","observableOf","resize","realign","requestAnimationFrame","_onContentChanges","_checkPaginationEnabled","_isValidIndex","_setTabFocus","tabIndex","containerEl","_tabListContainer","scrollLeft","scrollWidth","_moveFocus","offset","tabs","scrollDistance","translateX","_tabList","v","_getMaxScrollDistance","_scrollHeader","scrollDir","viewLength","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","beforeVisiblePos","afterVisiblePos","isEnabled","selectedLabelWrapper","_inkBar","alignToElement","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","ViewportRuler","Directionality","Optional","ViewChild","MatTabNavBase","_MatTabNavMixinBase","MatTabNav","_ngZone","_onDestroy","Subject","_disableRipple","_setLinkDisableRipple","updateActiveLink","element","_activeLinkChanged","_activeLinkElement","runOutsideAngular","pipe","takeUntil","_alignInkBar","next","complete","_tabLinks","link","disableRipple","NgZone","ChangeDetectorRef","MatTabLinkBase","_MatTabLinkMixinBase","mixinTabIndex","_tabNavBar","_tabLinkRipple","setupTriggerEvents","parseInt","globalOptions","rippleConfig","speedFactor","baseSpeedFactor","animation","get","enumerable","configurable","MatTabLink","[attr.aria-disabled]","[attr.tabIndex]","[class.mat-tab-label-active]","(click)","Platform","undefined","MAT_RIPPLE_GLOBAL_OPTIONS","Attribute","MatTabsModule","NgModule","imports","CommonModule","MatCommonModule","PortalModule","MatRippleModule","ObserversModule","ScrollDispatchModule","exports","MatTabLabel","declarations","MatInkBar","providers","VIEWPORT_RULER_PROVIDER","MatToolbarBase","_MatToolbarMixinBase","MatToolbarRow","MatToolbar","_platform","document","_document","ngAfterViewInit","isDevMode","isBrowser","_checkToolbarMixedModes","_toolbarRows","slice","childNodes","filter","node","contains","nodeType","COMMENT_NODE","some","textContent","trim","throwToolbarMixedModesError","[class.mat-toolbar-multiple-rows]","[class.mat-toolbar-single-row]","DOCUMENT","MatToolbarModule","PlatformModule","VERSION","Version","_config","_applyConfigDefaults","config","snackBarRef","_attach","component","afterDismissed","_openedSnackBarRef","containerInstance","enter","dismiss","duration","afterOpened","_dismissAfter","announcementMessage","_live","announce","politeness","MatSnackBar","open","message","action","data","openFromComponent","SimpleSnackBar","_attachSnackBarContainer","overlayRef","containerPortal","ComponentPortal","MatSnackBarContainer","viewContainerRef","containerRef","instance","snackBarConfig","_createOverlay","container","MatSnackBarRef","injector","_createInjector","portal","contentRef","attachComponentPortal","_breakpointObserver","observe","Breakpoints","Handset","detachments","take","matches","overlayElement","overlayConfig","OverlayConfig","direction","positionStrategy","_overlay","global","isRtl","isLeft","horizontalPosition","isRight","left","right","centerHorizontally","verticalPosition","top","bottom","create","userInjector","injectionTokens","WeakMap","set","MAT_SNACK_BAR_DATA","PortalInjector","_injector","Injectable","Overlay","LiveAnnouncer","Injector","BreakpointObserver","SkipSelf","MatSnackBarModule","OverlayModule","LayoutModule","entryComponents","LIVE_ANNOUNCER_PROVIDER","MatSortBase","_MatSortMixinBase","sortables","Map","_stateChanges","start","_direction","sortChange","MatSort","getSortInvalidDirectionError","_disableClear","register","sortable","id","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","deregister","delete","sort","active","getNextSortDirection","disableClear","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","indexOf","ngOnChanges","sortButtonLabel","sortDescriptionLabel","MatSortHeaderIntl","MAT_SORT_HEADER_INTL_PROVIDER","provide","deps","useFactory","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","SORT_ANIMATION_TRANSITION","AnimationDurations","ENTERING","AnimationCurves","STANDARD_CURVE","matSortAnimations","indicator","leftPointer","rightPointer","indicatorToggle","keyframes","opacity","MatSortHeaderBase","_MatSortHeaderMixinBase","MatSortHeader","_intl","changeDetectorRef","_sort","_cdkColumnDef","arrowPosition","getSortHeaderNotContainedWithinSortError","_rerenderSubscription","name","_isDisabled","_isSorted","[class.mat-sort-header-sorted]","[class.mat-sort-header-disabled]","CdkColumnDef","MatSortModule","MatStepLabel","TemplateRef","CdkStepLabel","optionalLabel","MatStepperIntl","MatStepHeader","_focusMonitor","_element","monitor","_intlSubscription","_index","_selected","_active","_optional","stopMonitoring","_stringLabel","label","_templateLabel","_getHostElement","role","selected","optional","matStepperAnimations","horizontalStepTransition","visibility","verticalStepTransition","MatStep","stepper","_errorStateMatcher","isErrorState","control","form","originalErrorState","customErrorState","invalid","interacted","ErrorStateMatcher","useExisting","MatStepper","arguments","_steps","_destroyed","_stateChanged","MatHorizontalStepper","aria-orientation","ctorParameters","MatVerticalStepper","MatStepperNext","[type]","CdkStepper","CdkStepperNext","MatStepperPrevious","CdkStepperPrevious","MatStepperModule","MatButtonModule","CdkStepperModule","MatIconModule","A11yModule","MatTable","CDK_TABLE_TEMPLATE","CdkTable","MatCellDef","CdkCellDef","MatHeaderCellDef","CdkHeaderCellDef","MatColumnDef","MatHeaderCell","columnDef","cssClassFriendlyName","CdkHeaderCell","MatCell","CdkCell","MatHeaderRowDef","CdkHeaderRowDef","MatRowDef","CdkRowDef","MatHeaderRow","CDK_ROW_TEMPLATE","MatRow","MatTableModule","CdkTableModule","MatTableDataSource","initialData","_renderData","BehaviorSubject","_filter","sortingDataAccessor","sortHeaderId","_isNumberValue","Number","sortData","a","b","valueA","valueB","comparatorResult","filterPredicate","accumulator","currentTerm","key","dataStr","keys","reduce","toLowerCase","transformedFilter","_data","_updateChangeSubscription","_paginator","paginator","empty","pageChange","page","_renderChangesSubscription","combineLatest","_a","_filterData","startWith","_orderData","_pageData","filteredData","obj","_updatePaginator","startIndex","pageIndex","pageSize","splice","filteredDataLength","lastPageIndex","ceil","connect","disconnect","show","_setStyles","hide","inkBar","width","templateRef","CdkPortal","MatTabBase","hasOwnProperty","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","FocusMonitor","MatSlideToggle","labelPosition","ariaLabel","ariaLabelledby","required","checked","_inputElement","_ripple","MatRipple","_thumbBarEl","querySelector","_thumbBarWidth","clientWidth","_thumbEl","_previousChecked","dragging","dragX","dragPercentage","percentage","SlideToggleRenderer","MatSlideToggleModule","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MAT_SLIDER_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlider","multi","MatSliderChange","MatSliderBase","_MatSliderMixinBase","_invert","_max","_min","_step","_thumbLabel","_tickInterval","_value","_vertical","input","onTouched","_percent","_isSliding","_isActive","_tickIntervalPercent","_sliderDimensions","_controlValueAccessorChangeFn","_dirChangeSubscription","_calculatePercentage","_roundLabelTo","toString","split","pop","tickInterval","toFixed","_focusHostElement","blur","_blurHostElement","_clamp","vertical","invert","percent","_isMinValue","thumbLabel","axis","_invertMouseCoords","_thumbGap","tickSize","backgroundSize","sign","rotate","_invertAxis","detectChanges","_onMouseenter","_getSliderDimensions","_updateTickIntervalPercent","_onClick","oldValue","_updateValueFromPosition","x","clientX","y","clientY","_emitInputEvent","_emitChangeEvent","_onSlide","_onSlideStart","center","_valueOnSlideStart","_onSlideEnd","_onFocus","_onBlur","_onKeydown","PAGE_UP","_increment","PAGE_DOWN","UP_ARROW","DOWN_ARROW","_onKeyup","numSteps","step","pos","size","posComponent","exactValue","_calculateValue","closestValue","round","trackSize","pixelsPerStep","stepsPerTick","pixelsPerTick","source","_sliderWrapper","getBoundingClientRect","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","(focus)","(blur)","(keydown)","(keyup)","(mouseenter)","(slide)","(slideend)","(slidestart)","[tabIndex]","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[attr.aria-orientation]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[class.mat-slider-axis-inverted]","[class.mat-slider-sliding]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","_thumbLabelDeprecated","_tickIntervalDeprecated","MatSliderModule","BidiModule","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","_onExit","_finishDismiss","exit","clearTimeout","_durationTimeoutId","dismissWithAction","closeWithAction","setTimeout","_open","dispose","dismissedByAction","asObservable","_onEnter","InjectionToken","MatSnackBarConfig","SHOW_ANIMATION","DECELERATION_CURVE","HIDE_ANIMATION","EXITING","ACCELERATION_CURVE","matSnackBarAnimations","contentFade","COMPLEX","snackBarState","[@contentFade]","_animationState","_portalOutlet","Error","panelClass","extraClasses","_setCssClasses","attachTemplatePortal","onAnimationEnd","startsWith","_completeExit","onEnter_1","run","onMicrotaskEmpty","Array","isArray","cssClass","[@state]","(@state.done)","BasePortalOutlet","_parentSnackBar","_snackBarRefAtThisLevel","parent","_markRadiosForCheck","MatRadioGroup","_required","_isInitialized","_touch","_updateRadioButtonNames","_radios","radio","_updateSelectedRadioFromValue","isAlreadySelected","MatRadioChange","_markForCheck","_changeDetector","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","ContentChildren","MatRadioButton","descendants","align","_MatRadioGroupMixinBase","MatRadioButtonBase","_MatRadioButtonMixinBase","radioGroup","_radioDispatcher","_uniqueId","nextUniqueId","_checked","_removeUniqueSelectionListener","listen","newCheckedState","notify","_labelPosition","_disabled","focusVia","focusOrigin","_onInputFocusChange","_isRippleDisabled","_onInputClick","stopPropagation","_onInputChange","groupValueChanged","_focusRipple","fadeOut","launch","persistent","[class.mat-radio-checked]","[class.mat-radio-disabled]","[attr.id]","UniqueSelectionDispatcher","MatRadioModule","UNIQUE_SELECTION_DISPATCHER_PROVIDER","matDrawerAnimations","transformDrawer","MatDrawerToggleResult","animationFinished","MAT_DRAWER_DEFAULT_AUTOSIZE","MatDrawerContent","_container","_margins","_contentMargins","margins","[style.margin-left.px]","[style.margin-right.px]","_focusTrapFactory","_doc","_elementFocusedBeforeDrawerWasOpened","_mode","_disableClose","opened","_isFocusTrapEnabled","_focusTrap","_trapFocus","_restoreFocus","MatDrawer","onAlignChanged","onPositionChanged","_modeChanged","mode","HTMLElement","_openedVia","enabled","destroy","isOpen","openedVia","_opened","_enableAnimations","close","openedChange","[@transform]","(@transform.start)","(@transform.done)","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","_openedStream","openedStart","_closedStream","closedStart","onOpen","onClose","backdropClick","_doCheckSubject","_autosize","defaultAutosize","MatDrawerContainer","_drawers","drawer","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","_isDrawerOpen","_start","_end","_updateContentMargins","debounceTime","ngDoCheck","_setContainerClass","throwMatDuplicatedDrawerError","_right","_left","_closeModalDrawer","_isShowingBackdrop","_width","ContentChild","autosize","MatSidenavContent","MatSidenav","_fixedBottomGap","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","MatSidenavContainer","MatSidenavModule","useValue","MatSlideToggleChange","MatSlideToggleBase","_MatSlideToggleMixinBase","onChange","_","_slideRenderer","_onChangeEvent","toggle","_onDragStart","startThumbDrag","_onDrag","updateThumbPosition","deltaX","_onDragEnd","newCheckedValue","stopThumbDrag","_onLabelTextChange","[id]","[class.mat-checked]","[class.mat-disabled]","[class.mat-slide-toggle-label-before]","MatTooltip","_getOrigin","overlay","_getOverlayPosition","strategy","connectedTo","main","withFallbackPosition","fallback","scrollableAncestors","_scrollDispatcher","getAncestorScrollContainers","withScrollableContainers","onPositionChange","_tooltipInstance","scrollableViewProperties","isOverlayClipped","isVisible","_setTransformOrigin","connectionPair","scrollStrategy","_scrollStrategy","_disposeTooltip","isDirectionLtr","originX","originY","getMatTooltipInvalidPositionError","_invertPosition","isLtr","overlayX","overlayY","_updateTooltipMessage","updatePosition","_setTooltipClass","tooltipClass","(longpress)","(touchend)","ScrollDispatcher","AriaDescriber","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_DEFAULT_OPTIONS","_positionDeprecated","showDelay","hideDelay","TooltipComponent","_visibility","_closeOnInteraction","_transformOrigin","_onHide","delay","_hideTimeoutId","_showTimeoutId","afterHidden","overlayPosition","_animationStart","_animationDone","_handleBodyInteraction","matTooltipAnimations","tooltipState","aria-hidden","ɵ0","touchendHideDelay","MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER","ARIA_DESCRIBER_PROVIDER","MatTooltipModule","itemsPerPageLabel","nextPageLabel","previousPageLabel","getRangeLabel","MatPaginatorIntl","MAT_PAGINATOR_INTL_PROVIDER","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","PageEvent","MatPaginator","_pageIndex","_length","_pageSizeOptions","hidePageSize","_intlChanges","_pageSize","_updateDisplayedPageSizeOptions","pageSizeOptions","p","_initialized","nextPage","hasNextPage","_emitPageEvent","previousPage","hasPreviousPage","numberOfPages","_changePageSize","floor","_displayedPageSizeOptions","push","MatPaginatorModule","MatSelectModule","MatProgressBarBase","_MatProgressBarMixinBase","progressbarId","MatProgressBar","_bufferValue","clamp","_primaryTransform","_bufferTransform","bufferValue","aria-valuemin","aria-valuemax","[attr.mode]","MatProgressBarModule","BASE_SIZE","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","INDETERMINATE_ANIMATION_TEMPLATE","MatProgressSpinner","platform","_fallbackAnimation","_elementSize","_diameter","EDGE","TRIDENT","animationClass","diameters","_attachStyleNode","_updateElementSize","_strokeWidth","diameter","newValue","viewBox","_circleRadius","strokeWidth","PI","_strokeCircumference","styleTag","createElement","head","appendChild","sheet","insertRule","_getAnimationText","replace","Set","[style.width.px]","[style.height.px]","MatSpinner","MatProgressSpinnerModule","MatRadioGroupBase","_name","_checkSelectedRadioButton","menu","MatMenuTrigger","_checkMenu","reason","_destroyMenu","_parentMenu","triggersSubmenu","_hoverSubscription","_hovered","_menuItemInstance","_openedByMouse","openMenu","_cleanUpSubscriptions","_menuOpen","toggleMenu","closeMenu","_portal","lazyContent","menuData","_closeSubscription","_menuClosingActions","_initMenu","MatMenu","_startAnimation","menuOpen","_resetMenu","_resetAnimation","parentMenu","_setMenuElevation","_setIsMenuOpen","focusFirstItem","setElevation","depth","menuOpened","menuClosed","_highlighted","throwMatMenuMissingError","_getOverlayConfig","_subscribeToPositions","_getPosition","hasBackdrop","backdropClass","_positionSubscription","posX","posY","setPositionClasses","xPosition","originFallbackX","_b","yPosition","overlayFallbackY","_c","originFallbackY","_d","overlayFallbackX","offsetY","overlapTrigger","withDirection","withOffsetY","backdrop","parentClose","hover","_handleMousedown","isFakeMousedownFromScreenReader","aria-haspopup","(mousedown)","MAT_MENU_SCROLL_STRATEGY","MatMenuItem","Self","_deprecatedMatMenuTriggerFor","onMenuOpen","onMenuClose","MatMenuContent","MAT_MENU_SCROLL_STRATEGY_PROVIDER","MAT_MENU_DEFAULT_OPTIONS","MatMenuModule","matSelectAnimations","transformPanel","minWidth","fadeInContent","MAT_SELECT_SCROLL_STRATEGY","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinErrorState","MatSelectTrigger","MatSelect","_parentFormField","_scrollStrategyFactory","_panelOpen","_scrollTop","_multiple","_compareWith","o1","o2","_uid","_destroy","_triggerFontSize","_onChange","_onTouched","_optionIds","_panelDoneAnimating","_offsetY","_positions","focused","controlType","optionSelectionChanges","defer","options","option","onSelectionChange","onStable","switchMap","selectionChange","valueChange","valueAccessor","_placeholder","stateChanges","_selectionModel","getMatSelectDynamicMultipleError","getMatSelectNonFunctionValueError","_initializeSelection","_id","o","SelectionModel","multiple","_initKeyManager","_resetOptions","updateErrorState","panelOpen","_triggerRect","getComputedStyle","_keyManager","withHorizontalOrientation","_calculateOverlayPosition","_highlightCorrectOption","overlayDir","fontSize","_isRtl","_setSelectionByValue","selectedOptions","viewValue","reverse","join","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","altKey","onKeydown","manager","setFirstItemActive","setLastItemActive","activeItem","previouslyFocusedIndex","activeItemIndex","shiftKey","_selectViaInteraction","_onPanelDone","offsetX","_onFadeInDone","_onAttached","positionChange","_calculateOverlayOffsetX","panel","scrollTop","_getPanelTheme","color","isEmpty","isUserInput","getMatSelectNonArrayValueError","_clearSelection","currentValue","_selectValue","_sortValues","correspondingOption","setActiveItem","find","error","console","warn","select","skip","clear","deselect","ActiveDescendantKeyManager","withTypeAhead","withVerticalOrientation","tabOut","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","_setOptionIds","wasSelected","isSelected","_getOptionIndex","_propagateChanges","fallbackValue","valueToEmit","itemHeight","_getItemHeight","activeOptionIndex","labelCount","MatOption","countGroupLabelsBeforeOption","optionGroups","scrollOffset","panelTop","result","current","items","_getItemCount","panelHeight","scrollContainerHeight","maxScroll","selectedOptionOffset","scrollBuffer","_calculateOverlayScroll","_calculateOverlayOffsetY","_checkOverlayWithinViewport","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","placeholder","_getAriaActiveDescendant","overlayRect","viewportSize","getViewportSize","paddingWidth","SELECT_MULTIPLE_PANEL_PADDING_X","first","group","leftOverflow","rightOverflow","optionOffsetFromPanelTop","optionHeightAdjustment","maxOptionsDisplayed","firstDisplayedIndex","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","setDescribedByIds","ids","_ariaDescribedby","onContainerClick","[attr.tabindex]","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","MatFormFieldControl","MAT_OPTION_PARENT_COMPONENT","NgForm","FormGroupDirective","MatFormField","NgControl","CdkConnectedOverlay","MatOptgroup","customTrigger","compareWith","errorStateMatcher","MatOptionModule","MatFormFieldModule","SCROLL_THROTTLE_MS","MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY","_ariaDescriber","_defaultOptions","_message","_manualListeners","IOS","nodeName","webkitUserSelect","userSelect","listener","addEventListener","removeDescription","_isTooltipVisible","describe","_tooltipClass","removeEventListener","_createTooltip","ESCAPE","_handleTouchend","MAT_SELECTION_LIST_VALUE_ACCESSOR","MatSelectionList","MatListOption","_MatSelectionListMixinBase","MatListModule","MatLineModule","MatPseudoCheckboxModule","MatList","MatNavList","MatListItem","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatListSubheaderCssMatStyler","MatDividerModule","matMenuAnimations","transformMenu","fadeInItems","MatMenuItemBase","_MatMenuItemMixinBase","_triggersSubmenu","_checkDisabled","_emitHoverEvent","getLabel","textNodeType","TEXT_NODE","output","length_1","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","_template","_appRef","context","isAttached","_outlet","DomPortalOutlet","insertBefore","outletElement","ApplicationRef","_xPosition","_yPosition","_tabSubscription","_classList","_panelAnimationState","_overlapTrigger","throwMatMenuInvalidPositionX","throwMatMenuInvalidPositionY","classes","className","FocusKeyManager","withWrap","item","setFocusOrigin","resetActiveItem","newElevation","customElevation","c","_previousElevation","_onAnimationDone","MAT_MENU_SCROLL_STRATEGY_PROVIDER_FACTORY","_navList","_isNavList","_lineSetter","MatLineSetter","_lines","_handleFocus","_handleBlur","_MatListItemMixinBase","MatSelectionListBase","MatListOptionBase","_MatListOptionMixinBase","MatListOptionChange","MatSelectionListChange","selectionList","_hasFocus","checkboxPosition","_setSelected","_reportValueChange","_removeOptionFromList","_text","_emitDeprecatedChangeEvent","_setFocusedOption","tabindex","[class.mat-list-item-disabled]","[class.mat-list-item-focus]","[attr.aria-selected]","_tempValues","_setOptionsFromValues","optionIndex","setNextItemActive","_toggleSelectOnFocusedOption","_getSelectedOptionValues","values","_getOptionByValue","Boolean","focusedOption","focusedIndex","_dateFilter","controlValue","matDatepickerFilter","_validator","Validators","compose","_parseValidator","_minValidator","_maxValidator","_filterValidator","_lastValueValid","_dateAdapter","createMissingDateImplError","_dateFormats","_localeSubscription","localeChanges","MatDatepickerInput","registerDatepicker","_datepicker","_registerInput","_validatorOnChange","deserialize","isValid","_getValidDateOrNull","oldDate","format","display","dateInput","sameDate","_valueChange","_disabledChange","_datepickerSubscription","selectedChanged","_cvaOnChange","MatDatepickerInputEvent","dateChange","registerOnValidatorChange","validate","getPopupConnectionElementRef","_formField","underlineRef","_getPopupFallbackOffset","_inputContainerRef","_onInput","date","parse","isDateInstance","MAT_DATEPICKER_VALUE_ACCESSOR","MAT_DATEPICKER_VALIDATORS","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","DateAdapter","MAT_DATE_FORMATS","matDatepicker","MatDatepickerToggleIcon","MatDatepickerToggle","datepicker","_watchStateChanges","datepickerDisabled","inputDisabled","_datepickerInput","datepickerToggled","openedStream","closedStream","[class.mat-datepicker-toggle-active]","_customIcon","MatDatepickerModule","MatDialogModule","MatCalendar","MatCalendarBody","MatDatepicker","MatDatepickerContent","MatMonthView","MatYearView","MatMultiYearView","MatDatepickerIntl","MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER","MatDivider","_inset","[class.mat-divider-vertical]","[class.mat-divider-inset]","_hideToggle","displayMode","MatAccordion","hideToggle","CdkAccordion","MatExpansionPanelContent","matExpansionAnimations","indicatorRotate","expansionHeaderHeight","params","collapsedHeight","expandedHeight","bodyExpansion","uniqueId","MatExpansionPanel","accordion","_uniqueSelectionDispatcher","_inputChanges","_headerId","_getHideToggle","_hasSpacing","expanded","_getExpandedState","_lazyContent","outputs","[class.mat-expanded]","[class.mat-expansion-panel-spacing]","MatExpansionPanelActionRow","MatExpansionPanelHeader","_parentChangeSubscription","_toggle","_isExpanded","_getPanelId","_showToggle","_keydown","[attr.aria-controls]","[attr.aria-expanded]","[@expansionHeight]","MatExpansionModule","CdkAccordionModule","MatExpansionPanelTitle","MatExpansionPanelDescription","MatGridTile","_rowspan","_colspan","coerceToNumber","_setStyle","property","MatGridTileText","MatGridAvatarCssMatStyler","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","TileCoordinator","numColumns","tiles","columnIndex","rowIndex","tracker","fill","positions","tile","_trackTile","lastRowMax","rowCount","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","rowspan","row","col","TileStyler","_rows","init","gutterSize","cols","_gutterSize","normalizeUnits","_cols","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","reset","list","_setListStyle","_tiles","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","parseFloat","FitTileStyler","gutterHeightPerTile","MatGridList","_gutter","coerceToString","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","rowHeight","_tileStyler","MatGridListModule","MatListBase","_MatListMixinBase","MatListItemBase","_selectedDate","_getDateInCurrentMonth","_init","_dateSelected","selectedYear","getYear","activeDate","selectedMonth","getMonth","selectedDate","createDate","selectedChange","_userSelection","_todayDate","today","_monthLabel","getMonthNames","toLocaleUpperCase","firstOfMonth","_firstWeekOffset","getDayOfWeek","getFirstDayOfWeek","_createWeekCells","daysInMonth","getNumDaysInMonth","dateNames","getDateNames","_weeks","cell","dateFilter","dateA11yLabel","MatCalendarCell","_hasSameMonthAndYear","getDate","d1","d2","_activeDate","oldActiveDate","_selectedYear","_todayYear","activeYear","activeOffset","_years","year","_createCellForYear","_yearSelected","month","_getActiveCell","yearName","getYearName","_isYearEnabled","firstOfYear","addCalendarDays","_selectedMonth","_getMonthInCurrentYear","_monthSelected","_todayMonth","_yearLabel","monthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","_isMonthEnabled","startView","_dateFilterForViews","minDate","compareDate","maxDate","_startAt","_minDate","_maxDate","_clampedActiveDate","clampDate","_currentView","monthYearLabel","switchToMultiYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","multi-year","prevMultiYearLabel","nextMonthLabel","nextYearLabel","nextMultiYearLabel","startAt","_focusActiveCell","firstChange","view","monthView","yearView","multiYearView","_userSelected","_goToDateInView","_currentPeriodClicked","_previousClicked","addCalendarMonths","addCalendarYears","_nextClicked","_previousEnabled","_isSameView","_nextEnabled","_handleCalendarBodyKeydown","_handleCalendarBodyKeydownInMonthView","_handleCalendarBodyKeydownInYearView","_handleCalendarBodyKeydownInMultiYearView","date1","date2","yearsPerPage","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY","MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY","_calendar","[class.mat-datepicker-content-touch]","_inputSubscription","_popupRef","_focusedElementBeforeOpen","activeElement","touchUi","_openAsDialog","_openAsPopup","_dialogRef","_calendarPortal","completeClose","afterClosed","componentInstance","_createPopup","keydownEvents","fallbackOffset","MatDialog","NG_VALIDATORS","target","targetElement","matDatepickerParse","text","matDatepickerMin","actual","matDatepickerMax","[attr.role]","[@slideDialog]","(@slideDialog.start)","(@slideDialog.done)","MatDialogContainer","MatDialogRef","_containerInstance","location","disableClose","_afterOpen","_afterClosed","_beforeClose","_locationChanges","_animationStateChanged","phaseName","_result","closeOnNavigation","dialogResult","detachBackdrop","_startExitAnimation","afterOpen","beforeClose","_getPositionStrategy","centerVertically","updateSize","getConfig","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","_location","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","componentOrTemplateRef","MatDialogConfig","getDialogById","dialogContainer","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","dialog","dialogConfig","minHeight","maxWidth","maxHeight","$implicit","previousValue","setAttribute","removeAttribute","overlayContainer","getContainerElement","parentElement","siblings","children","sibling","hasAttribute","getAttribute","Location","OverlayContainer","dialogElementUid","MatDialogClose","_dialog","getClosestDialog","proxiedChange","_matDialogClose","MatDialogTitle","_ariaLabelledBy","MatDialogContent","MatDialogActions","SvgIconConfig","url","svgElement","MatIconRegistry","_httpClient","_sanitizer","_svgIconConfigs","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","iconName","addSvgIconInNamespace","namespace","iconKey","addSvgIconSet","addSvgIconSetInNamespace","configNamespace","registerFontClassAlias","alias","classNameForFontAlias","setDefaultFontSetClass","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","sanitize","SecurityContext","RESOURCE_URL","getMatIconFailedToSanitizeError","cachedIcon","cloneSvg","_loadSvgIconFromConfig","tap","svg","getNamedSvgIcon","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","observableThrow","getMatIconNameNotFoundError","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","catchError","err","log","forkJoin","foundIcon","_extractSvgIconFromSet","_fetchUrl","svgText","_createSvgElementForSingleIcon","_svgElementFromString","responseText","_setSvgAttributes","iconSet","iconSource","iconElement","cloneNode","_toSvgElement","str","div","innerHTML","ELEMENT_NODE","getMatIconNoHttpProviderError","inProgressFetch","req","responseType","finalize","share","HttpClient","DomSanitizer","ICON_REGISTRY_PROVIDER","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","_MatIconMixinBase","MatIcon","_iconRegistry","ariaHidden","_fontSet","_cleanupFontValue","_fontIcon","_splitIconName","parts","svgIcon","_setSvgElement","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","_previousFontSetClass","fontIcon","_previousFontIconClass","MatTextareaAutosize","_minRows","_setMinHeight","_maxRows","_setMaxHeight","minRows","_cachedLineHeight","_setTextareaStyle","maxRows","resizeToFitContent","fromEvent","window","auditTime","_cacheTextareaLineHeight","textarea","textareaClone","rows","border","padding","overflow","force","_previousValue","placeholderText","scrollHeight","MAT_INPUT_INVALID_TYPES","MatInputBase","_MatInputMixinBase","MatInput","inputValueAccessor","_type","_readonly","_isServer","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","el","selectionStart","selectionEnd","setSelectionRange","_validateType","_isTextarea","_dirtyCheckNativeValue","isFocused","readonly","getMatInputUnsupportedTypeError","_isNeverEmpty","_isBadInput","validity","badInput","[class.mat-input-server]","[placeholder]","[required]","[readonly]","MatInputModule","calendarLabel","openCalendarLabel","displayValue","numCols","allowDisabledSelection","activeCell","cellAspectRatio","selectedValueChange","_cellClicked","_isActiveCell","cellNumber","_firstRowOffset","attr.aria-readonly","todayValue","selectedValue","labelMinRequiredCells","firstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","_weekdays","TransitionCheckState","Unchecked","animSuffix","newState","Checked","Indeterminate","MatCheckbox","_removeFocusRipple","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MAT_CHECKBOX_CLICK_ACTION","indeterminateChange","ripple","indeterminate","_MatCheckboxMixinBase","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","MatCheckboxModule","MatChipSelectionChange","MatChipBase","_MatChipMixinBase","MatBasicChip","MatChip","_selectable","_removable","destroyed","removed","onRemove","selectable","chip","selectViaInteraction","toggleSelected","removable","DELETE","BACKSPACE","_blur","[class.mat-chip-selected]","MatChipRemove","_parentChip","MatChipListBase","_MatChipListMixinBase","MatChipListChange","MatChipList","_lastDestroyedIndex","_chipSet","_tabOutSubscription","_tabIndex","_userTabIndex","ariaOrientation","_chipInput","chips","_changeSubscription","_resetChips","_updateTabIndex","_updateFocusForDestroyedChips","_dropSubscriptions","registerInput","inputElement","_focusInput","_isInputEmpty","_updateKeyManager","chipIndex","chipsArray","newFocusIndex","focusChip","correspondingChip","correspondingChipIndex","updateActiveItemIndex","_markAsTouched","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","chipSelectionChanges","chipFocusChanges","chipBlurChanges","_chipRemoveSubscription","chipRemoveChanges","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","[class.mat-chip-list-required]","MatChipInput","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","_emitChipEnd","addOnBlur","_focus","chipList","MatChipsModule","ariaDescribedBy","autoFocus","matDialogAnimations","slideDialog","_elementFocusedBeforeDialogWasOpened","_state","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","focusInitialElementWhenReady","toFocus","_onAnimationStart","_isRoundButton","DEFAULT_ROUND_BUTTON_COLOR","MatButton","_hasHostAttributes","attributes","_i","attribute","focusMonitor","stopImmediatePropagation","MatAnchor","MatMiniFab","MatFab","MatButtonCssMatStyler","MatRaisedButtonCssMatStyler","MatIconButtonCssMatStyler","MatButtonToggleGroupBase","_MatButtonToggleGroupMixinBase","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","_uniqueIdCounter","MatButtonToggleChange","_updateButtonToggleNames","_updateSelectedButtonToggleFromValue","_buttonToggles","matchingButtonToggle","buttonToggle","_markButtonTogglesForCheck","[class.mat-button-toggle-vertical]","MatButtonToggle","MatButtonToggleGroupMultiple","toggleGroup","toggleGroupMultiple","_buttonToggleDispatcher","_isSingleSelector","buttonToggleGroup","buttonToggleGroupMultiple","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","MatButtonToggleModule","MatCardContent","MatCardTitle","MatCardSubtitle","[class.mat-card-actions-align-end]","MatCardActions","MatCardFooter","MatCardImage","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardXlImage","MatCardAvatar","MatCardHeader","MatCardTitleGroup","MatCardModule","MatCard","MatCheckboxChange","MatCheckboxBase","_clickAction","_currentAnimationClass","_currentCheckState","Init","_indeterminate","changed","_transitionCheckState","_getAriaChecked","oldState","_getAnimationClassForCheckStateTransition","_onInteractionEvent","_emitSelectionChangeEvent","ngAfterViewChecked","_mostRecentViewValue","MatOptionSelectionChange","optionsArray","groups","groupCounter","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]","MAT_LABEL_GLOBAL_OPTIONS","MatError","matFormFieldAnimations","transitionMessages","[class.mat-right]","MatHint","MatLabel","MatPlaceholder","MatPrefix","MatSuffix","MatFormFieldBase","_MatFormFieldMixinBase","labelOptions","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_labelOptions","floatLabel","float","_hideRequiredMarker","_floatLabel","_processHints","_validateControlChild","_control","_validatePlaceholders","_syncDescribedByIds","valueChanges","_hintChildren","_errorChildren","_shouldForward","prop","_hasPlaceholder","_placeholderChild","_hasLabel","_labelChild","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","shouldPlaceholderFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_hasFloatingLabel","_getDisplayedMessages","errorState","_animateAndLockLabel","_label","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","hintLabel","getMatFormFieldDuplicatedHintError","startHint","endHint","getMatFormFieldMissingControlError","[class.mat-input-invalid]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-focused]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","floatPlaceholder","_connectionContainerRef","_prefixChildren","_suffixChildren","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","MatAutocompleteBase","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","MatAutocomplete","defaults","showPanel","_isOpen","displayWith","optionSelected","_autoActiveFirstOption","autoActiveFirstOption","_setVisibility","_setScrollTop","_getScrollTop","_emitSelectEvent","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","_zone","_componentDestroyed","_manuallyFloatingLabel","_closeKeyEventStream","optionSelections","autocomplete","_destroyPanel","openPanel","_attachOverlay","closePanel","_resetLabel","_closingActionsSubscription","_outsideClickStream","clickTarget","formField","_setTriggerValue","_resetActiveItem","activeOption","prevActiveItem","TAB","_canOpen","_scrollToOption","_handleInput","shouldAnimate","optionOffset","newScrollTop","_subscribeToClosingActions","firstStable","optionChanges","_positionStrategy","recalculateLastPosition","panelClosingActions","_setValueAndClose","toDisplay","inputValue","_clearPreviousSelectedOption","getMatAutocompleteMissingPanelError","_getHostWidth","_getConnectedElement","readOnly","aria-autocomplete","(focusin)","Host","MatAutocompleteModule","MatButtonBase","_MatButtonMixinBase","_isIconButton","__extends","d","__","constructor","extendStatics","base","class_1","defaultColor","_color","colorPalette","defaultTabIndex","matcher","range","valueFunction","valuesArray","enforceStyleRecalculation","getPropertyValue","distanceToFurthestCorner","rect","distX","distY","sqrt","scrollStrategies","reposition","block","defaultOptions","tslib_1.__assign","parentRegistry","httpClient","sanitizer","provider","exp","match","scrollThrottle","parentIntl","sortOrder","setPrototypeOf","__proto__","__assign","assign","s","n","SHARP_CURVE","MATERIAL_SANITY_CHECKS","_sanityChecksEnabled","_hasDoneGlobalChecks","_hasCheckedHammer","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","doctype","testElement","body","computedStyle","_checkHammerIsAvailable","MAT_DATE_LOCALE","MAT_DATE_LOCALE_PROVIDER","LOCALE_ID","_localeChanges","setLocale","locale","second","firstValid","secondValid","SUPPORTS_INTL_API","Intl","DEFAULT_MONTH_NAMES","short","String","DEFAULT_DATE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","NativeDateAdapter","matDateLocale","isIE","test","navigator","userAgent","useUtcForDisplay","_clampDate","getFullYear","getDay","dtf_1","DateTimeFormat","_stripDirectionalityCharacters","Date","dtf_2","day","dtf_3","weekday","dtf","_createDateWithOverflow","clone","displayFormat","setFullYear","UTC","getHours","getMinutes","getSeconds","getMilliseconds","timeZone","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","isNaN","getTime","NaN","MAT_NATIVE_DATE_FORMATS","NativeDateModule","MatNativeDateModule","ShowOnDirtyErrorStateMatcher","dirty","submitted","touched","MAT_HAMMER_OPTIONS","_hammerOptions","commonModule","_hammer","Hammer","events","buildHammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","MatLine","_setLineClass","count","_resetClasses","_setClass","isAdd","RippleRef","_renderer","RippleState","HIDDEN","fadeOutRipple","defaultRippleAnimationConfig","enterDuration","exitDuration","ignoreMouseEventsTimeout","RippleRenderer","_target","_isPointerDown","_triggerEvents","_activeRipples","_eventOptions","supportsPassiveEventListeners","passive","onMousedown","isSyntheticEvent","_lastTouchStartEvent","now","rippleDisabled","fadeInRipple","onTouchStart","touches","onPointerUp","VISIBLE","_containerElement","containerRect","animationConfig","centered","radius","transitionDuration","rippleRef","FADING_IN","runTimeoutOutsideZone","rippleEl","FADING_OUT","fadeOutAll","_triggerElement","_removeTriggerEvents","ngZone","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","_trigger","[class.mat-ripple-unbounded]","unbounded","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatPseudoCheckbox","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter","_labelId","[class.mat-optgroup-disabled]","_parent","setActiveStyles","setInactiveStyles"],"mappings":"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"}