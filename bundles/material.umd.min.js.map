{"version":3,"file":"material.umd.min.js","sources":["../../src/lib/toolbar/toolbar-module.ts","../../src/lib/tree/outlet.ts","../../src/lib/tree/node.ts","../../src/lib/tree/padding.ts","../../src/lib/tree/tree.ts","../../src/lib/tree/toggle.ts","../../src/lib/tree/tree-module.ts","../../src/lib/tree/data-source/flat-data-source.ts","../../src/lib/tree/data-source/nested-data-source.ts","../../src/lib/version.ts","../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/core/testing/month-constants.ts","../../src/lib/expansion/expansion-animations.ts","../../src/lib/select/select.ts","../../src/lib/tooltip/tooltip.ts","../../src/lib/tabs/tab-label.ts","../../src/lib/tabs/tab-content.ts","../../src/lib/tabs/tab.ts","../../src/lib/tabs/tabs-animations.ts","../../src/lib/tabs/tab-body.ts","../../src/lib/tabs/tab-label-wrapper.ts","../../src/lib/tabs/tab-header.ts","../../src/lib/tabs/tab-group.ts","../../src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/lib/tabs/tabs-module.ts","../../src/lib/toolbar/toolbar.ts","../../src/lib/sort/sort-header-intl.ts","../../src/lib/sort/sort-header.ts","../../src/lib/sort/sort-module.ts","../../src/lib/stepper/step-label.ts","../../src/lib/stepper/stepper-intl.ts","../../src/lib/stepper/step-header.ts","../../src/lib/stepper/stepper-animations.ts","../../src/lib/stepper/stepper-icon.ts","../../src/lib/stepper/stepper.ts","../../src/lib/stepper/stepper-button.ts","../../src/lib/stepper/stepper-module.ts","../../src/lib/table/table.ts","../../src/lib/table/cell.ts","../../src/lib/table/row.ts","../../src/lib/table/table-module.ts","../../src/lib/table/table-data-source.ts","../../src/lib/tabs/ink-bar.ts","../../src/lib/slider/slider.ts","../../src/lib/slider/slider-module.ts","../../src/lib/snack-bar/snack-bar-ref.ts","../../src/lib/snack-bar/snack-bar-config.ts","../../src/lib/snack-bar/snack-bar-animations.ts","../../src/lib/snack-bar/simple-snack-bar.ts","../../src/lib/snack-bar/snack-bar-container.ts","../../src/lib/snack-bar/snack-bar-module.ts","../../src/lib/snack-bar/snack-bar.ts","../../src/lib/sort/sort.ts","../../src/lib/sort/sort-animations.ts","../../src/lib/sidenav/drawer.ts","../../src/lib/sidenav/sidenav.ts","../../src/lib/sidenav/sidenav-module.ts","../../src/lib/slide-toggle/slide-toggle-config.ts","../../src/lib/slide-toggle/slide-toggle.ts","../../src/lib/slide-toggle/slide-toggle-module.ts","../../src/lib/progress-bar/progress-bar.ts","../../src/lib/progress-bar/progress-bar-module.ts","../../src/lib/progress-spinner/progress-spinner.ts","../../src/lib/progress-spinner/progress-spinner-module.ts","../../src/lib/radio/radio.ts","../../src/lib/radio/radio-module.ts","../../src/lib/sidenav/drawer-animations.ts","../../src/lib/select/select-module.ts","../../src/lib/tooltip/tooltip-animations.ts","../../src/lib/tooltip/tooltip-module.ts","../../src/lib/paginator/paginator-intl.ts","../../src/lib/paginator/paginator.ts","../../src/lib/paginator/paginator-module.ts","../../src/lib/menu/menu-content.ts","../../src/lib/menu/menu-animations.ts","../../src/lib/menu/menu-panel.ts","../../src/lib/menu/menu-item.ts","../../src/lib/menu/menu-directive.ts","../../src/lib/menu/menu-trigger.ts","../../src/lib/menu/menu-module.ts","../../src/lib/select/select-animations.ts","../../src/lib/list/selection-list.ts","../../src/lib/list/list-module.ts","../../src/lib/list/list.ts","../../src/lib/grid-list/grid-tile.ts","../../src/lib/grid-list/tile-coordinator.ts","../../src/lib/grid-list/tile-styler.ts","../../src/lib/grid-list/grid-list.ts","../../src/lib/grid-list/grid-list-module.ts","../../src/lib/icon/icon-registry.ts","../../src/lib/icon/icon.ts","../../src/lib/icon/icon-module.ts","../../src/lib/datepicker/datepicker-animations.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-module.ts","../../src/lib/divider/divider.ts","../../src/lib/divider/divider-module.ts","../../src/lib/expansion/accordion-base.ts","../../src/lib/expansion/expansion-panel-content.ts","../../src/lib/expansion/expansion-panel.ts","../../src/lib/expansion/expansion-panel-header.ts","../../src/lib/expansion/accordion.ts","../../src/lib/expansion/expansion-module.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/datepicker/multi-year-view.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/datepicker/calendar.ts","../../src/lib/chips/chip-list.ts","../../src/lib/chips/chip-input.ts","../../src/lib/chips/chips-module.ts","../../src/lib/dialog/dialog-config.ts","../../src/lib/dialog/dialog-animations.ts","../../src/lib/dialog/dialog-container.ts","../../src/lib/dialog/dialog-ref.ts","../../src/lib/dialog/dialog.ts","../../src/lib/dialog/dialog-content-directives.ts","../../src/lib/dialog/dialog-module.ts","../../src/lib/input/autosize.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/input.ts","../../src/lib/input/input-module.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/card/card.ts","../../src/lib/card/card-module.ts","../../src/lib/checkbox/checkbox-config.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/chips/chip.ts","../../src/lib/chips/chip-default-options.ts","../../src/lib/button/button.ts","../../src/lib/button/button-module.ts","../../src/lib/button-toggle/button-toggle.ts","../../src/lib/button-toggle/button-toggle-module.ts","../../src/lib/autocomplete/autocomplete.ts","../../src/lib/autocomplete/autocomplete-origin.ts","../../src/lib/autocomplete/autocomplete-module.ts","../../src/lib/badge/badge.ts","../../src/lib/badge/badge-module.ts","../../src/lib/bottom-sheet/bottom-sheet-config.ts","../../src/lib/bottom-sheet/bottom-sheet-animations.ts","../../src/lib/bottom-sheet/bottom-sheet-container.ts","../../src/lib/bottom-sheet/bottom-sheet-module.ts","../../src/lib/bottom-sheet/bottom-sheet-ref.ts","../../src/lib/bottom-sheet/bottom-sheet.ts","../../src/lib/core/option/optgroup.ts","../../src/lib/core/option/option.ts","../../src/lib/core/option/index.ts","../../src/lib/core/label/label-options.ts","../../src/lib/form-field/error.ts","../../src/lib/form-field/form-field-animations.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/label.ts","../../src/lib/form-field/placeholder.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field-module.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/disable-ripple.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/core/common-behaviors/initialized.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/menu/menu-errors.ts","../../src/lib/select/select-errors.ts","../../src/lib/sort/sort-errors.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/datetime/date-formats.ts","../../src/lib/core/datetime/native-date-formats.ts","../../src/lib/core/datetime/date-selection.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/line/line.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodeOutlet} from '@angular/cdk/tree';\nimport {\n  Directive,\n  ViewContainerRef,\n} from '@angular/core';\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({\n  selector: '[matTreeNodeOutlet]'\n})\nexport class MatTreeNodeOutlet implements CdkTreeNodeOutlet {\n  constructor(public viewContainer: ViewContainerRef) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkNestedTreeNode, CdkTree, CdkTreeNode, CdkTreeNodeDef} from '@angular/cdk/tree';\nimport {\n  AfterContentInit,\n  Attribute,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Input,\n  IterableDiffers,\n  OnDestroy,\n  QueryList,\n} from '@angular/core';\nimport {CanDisable, HasTabIndex, mixinDisabled, mixinTabIndex} from '@angular/material/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkTreeNodeDef = CdkTreeNodeDef;\n\nexport const _MatTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkTreeNode));\nexport const _MatNestedTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkNestedTreeNode));\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n  selector: 'mat-tree-node',\n  exportAs: 'matTreeNode',\n  inputs: ['disabled', 'tabIndex'],\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n    '[attr.role]': 'role',\n    'class': 'mat-tree-node'\n  },\n  providers: [{provide: CdkTreeNode, useExisting: MatTreeNode}]\n})\nexport class MatTreeNode<T> extends _MatTreeNodeMixinBase<T>\n    implements CanDisable, HasTabIndex {\n  @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n}\n\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeDef]',\n  inputs: [\n    'when: matTreeNodeDefWhen'\n  ],\n  providers: [{provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef}]\n})\nexport class MatTreeNodeDef<T> extends _CdkTreeNodeDef<T> {\n  @Input('matTreeNode') data: T;\n}\n\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\n@Directive({\n  selector: 'mat-nested-tree-node',\n  exportAs: 'matNestedTreeNode',\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.role]': 'role',\n    'class': 'mat-nested-tree-node',\n  },\n  inputs: ['disabled', 'tabIndex'],\n  providers: [\n    {provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CdkTreeNode, useExisting: MatNestedTreeNode}\n  ]\n})\nexport class MatNestedTreeNode<T> extends _MatNestedTreeNodeMixinBase<T>\n    implements AfterContentInit, CanDisable, HasTabIndex, OnDestroy {\n\n  @Input('matNestedTreeNode') node: T;\n\n  @ContentChildren(MatTreeNodeOutlet) nodeOutlet: QueryList<MatTreeNodeOutlet>;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              protected _differs: IterableDiffers,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree, _differs);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n\n  // This is a workaround for https://github.com/angular/angular/issues/23091\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  // TODO(tinayuangao): Remove when the angular issue #23091 is fixed\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodePadding} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkTreeNodePadding = CdkTreeNodePadding;\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodePadding]',\n  providers: [{provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding}]\n})\nexport class MatTreeNodePadding<T> extends _CdkTreeNodePadding<T> {\n\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  @Input('matTreeNodePadding') level: number;\n\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n  @Input('matTreeNodePaddingIndent') indent: number;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTree} from '@angular/cdk/tree';\nimport {ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation} from '@angular/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkTree = CdkTree;\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tree',\n  exportAs: 'matTree',\n  template: `<ng-container matTreeNodeOutlet></ng-container>`,\n  host: {\n    'class': 'mat-tree',\n    'role': 'tree',\n  },\n  styleUrls: ['tree.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [{provide: CdkTree, useExisting: MatTree}]\n})\nexport class MatTree<T> extends _CdkTree<T> {\n  // Outlets within the tree's template where the dataNodes will be inserted.\n  @ViewChild(MatTreeNodeOutlet) _nodeOutlet: MatTreeNodeOutlet;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTreeNodeToggle} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkTreeNodeToggle = CdkTreeNodeToggle;\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeToggle]',\n  host: {\n    '(click)': '_toggle($event)',\n  },\n  providers: [{provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle}]\n})\nexport class MatTreeNodeToggle<T> extends _CdkTreeNodeToggle<T> {\n  @Input('matTreeNodeToggleRecursive') recursive: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatNestedTreeNode, MatTreeNodeDef, MatTreeNode} from './node';\nimport {MatTree} from './tree';\nimport {MatTreeNodeToggle} from './toggle';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {MatTreeNodePadding} from './padding';\n\nconst MAT_TREE_DIRECTIVES = [\n  MatNestedTreeNode,\n  MatTreeNodeDef,\n  MatTreeNodePadding,\n  MatTreeNodeToggle,\n  MatTree,\n  MatTreeNode,\n  MatTreeNodeOutlet\n];\n\n@NgModule({\n  imports: [CdkTreeModule, CommonModule, MatCommonModule],\n  exports: MAT_TREE_DIRECTIVES,\n  declarations: MAT_TREE_DIRECTIVES,\n})\nexport class MatTreeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {FlatTreeControl, TreeControl} from '@angular/cdk/tree';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map, take} from 'rxjs/operators';\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class MatTreeFlattener<T, F> {\n\n  constructor(public transformFunction: (node: T, level: number) => F,\n              public getLevel: (node: F) => number,\n              public isExpandable: (node: F) => boolean,\n              public getChildren: (node: T) => Observable<T[]> | T[]) {}\n\n  _flattenNode(node: T, level: number,\n               resultNodes: F[], parentMap: boolean[]): F[] {\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n\n    if (this.isExpandable(flatNode)) {\n      const childrenNodes = this.getChildren(node);\n      if (Array.isArray(childrenNodes)) {\n        this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n      } else {\n        childrenNodes.pipe(take(1)).subscribe(children => {\n          this._flattenChildren(children, level, resultNodes, parentMap);\n        });\n      }\n    }\n    return resultNodes;\n  }\n\n  _flattenChildren(children: T[], level: number,\n                   resultNodes: F[], parentMap: boolean[]): void {\n    children.forEach((child, index) => {\n      let childParentMap: boolean[] = parentMap.slice();\n      childParentMap.push(index != children.length - 1);\n      this._flattenNode(child, level + 1, resultNodes, childParentMap);\n    });\n  }\n\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   */\n  flattenNodes(structuredData: T[]): F[] {\n    let resultNodes: F[] = [];\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   */\n  expandFlattenedNodes(nodes: F[], treeControl: TreeControl<F>): F[] {\n    let results: F[] = [];\n    let currentExpand: boolean[] = [];\n    currentExpand[0] = true;\n\n    nodes.forEach(node => {\n      let expand = true;\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n      if (expand) {\n        results.push(node);\n      }\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nexport class MatTreeFlatDataSource<T, F> extends DataSource<F> {\n  _flattenedData = new BehaviorSubject<F[]>([]);\n\n  _expandedData = new BehaviorSubject<F[]>([]);\n\n  _data: BehaviorSubject<T[]>;\n  get data() { return this._data.value; }\n  set data(value: T[]) {\n    this._data.next(value);\n    this._flattenedData.next(this.treeFlattener.flattenNodes(this.data));\n    this.treeControl.dataNodes = this._flattenedData.value;\n  }\n\n  constructor(private treeControl: FlatTreeControl<F>,\n              private treeFlattener: MatTreeFlattener<T, F>,\n              initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n  }\n\n  connect(collectionViewer: CollectionViewer): Observable<F[]> {\n    const changes = [\n      collectionViewer.viewChange,\n      this.treeControl.expansionModel.onChange!,\n      this._flattenedData\n    ];\n    return merge(...changes).pipe(map(() => {\n      this._expandedData.next(\n        this.treeFlattener.expandFlattenedNodes(this._flattenedData.value, this.treeControl));\n      return this._expandedData.value;\n    }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nexport class MatTreeNestedDataSource<T> extends DataSource<T> {\n  _data = new BehaviorSubject<T[]>([]);\n\n  /**\n   * Data for the nested tree\n   */\n  get data() { return this._data.value; }\n  set data(value: T[]) { this._data.next(value); }\n\n  connect(collectionViewer: CollectionViewer): Observable<T[]> {\n    return merge(...[collectionViewer.viewChange, this._data])\n      .pipe(map(() => {\n        return this.data;\n      }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('6.4.7-175194b');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n  ViewportRuler,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {filter, take, switchMap, delay, tap, map} from 'rxjs/operators';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  MatOption,\n  MatOptionSelectionChange,\n} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {Subscription, defer, fromEvent, merge, of as observableOf, Subject, Observable} from 'rxjs';\nimport {MatAutocomplete} from './autocomplete';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    '[attr.autocomplete]': 'autocompleteAttribute',\n    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n    '[attr.aria-activedescendant]': 'activeOption?.id',\n    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n    '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  exportAs: 'matAutocompleteTrigger',\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal;\n  private _componentDestroyed = false;\n  private _autocompleteDisabled = false;\n\n  /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n  private _previousValue: string | number | null;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Subscription to viewport size changes. */\n  private _viewportSubscription = Subscription.EMPTY;\n\n  /**\n   * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n   * closed autocomplete from being reopened if the user switches to another browser tab and then\n   * comes back.\n   */\n  private _canOpenOnNextFocus = true;\n\n  /** Stream of keyboard events that can close the panel. */\n  private readonly _closeKeyEventStream = new Subject<void>();\n\n  /**\n   * Event handler for when the window is blurred. Needs to be an\n   * arrow function in order to preserve the context.\n   */\n  private _windowBlurHandler = () => {\n    // If the user blurred the window while the autocomplete is focused, it means that it'll be\n    // refocused when they come back. In this case we want to skip the first focus event, if the\n    // pane was closed, in order to avoid reopening it unintentionally.\n    this._canOpenOnNextFocus =\n        document.activeElement !== this._element.nativeElement || this.panelOpen;\n  }\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when autocomplete has been touched` */\n  _onTouched = () => {};\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  /**\n   * Reference relative to which to position the autocomplete panel.\n   * Defaults to the autocomplete trigger element.\n   */\n  @Input('matAutocompleteConnectedTo') connectedTo: MatAutocompleteOrigin;\n\n  /**\n   * `autocomplete` attribute to be set on the input element.\n   * @docs-private\n   */\n  @Input('autocomplete') autocompleteAttribute: string = 'off';\n\n  /**\n   * Whether the autocomplete is disabled. When disabled, the element will\n   * act as a regular input and the user won't be able to open the panel.\n   */\n  @Input('matAutocompleteDisabled')\n  get autocompleteDisabled(): boolean { return this._autocompleteDisabled; }\n  set autocompleteDisabled(value: boolean) {\n    this._autocompleteDisabled = coerceBooleanProperty(value);\n  }\n\n  constructor(private _element: ElementRef<HTMLInputElement>, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @breaking-change 7.0.0 Make `_viewportRuler` required.\n              private _viewportRuler?: ViewportRuler) {\n\n    if (typeof window !== 'undefined') {\n      _zone.runOutsideAngular(() => {\n        window.addEventListener('blur', this._windowBlurHandler);\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    if (typeof window !== 'undefined') {\n      window.removeEventListener('blur', this._windowBlurHandler);\n    }\n\n    this._viewportSubscription.unsubscribe();\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._overlayAttached && this.autocomplete.showPanel;\n  }\n  private _overlayAttached: boolean = false;\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (!this._overlayAttached) {\n      return;\n    }\n\n    if (this.panelOpen) {\n      // Only emit if the panel was visible.\n      this.autocomplete.closed.emit();\n    }\n\n    this.autocomplete._isOpen = this._overlayAttached = false;\n\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n\n    // Note that in some cases this can end up being called after the component is destroyed.\n    // Add a check to ensure that we don't try to run change detection on a destroyed view.\n    if (!this._componentDestroyed) {\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange|null> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)),\n      this._closeKeyEventStream,\n      this._outsideClickStream,\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n          observableOf()\n    ).pipe(\n      // Normalize the output so we return a consistent type.\n      map(event => event instanceof MatOptionSelectionChange ? event : null)\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  readonly optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .asObservable()\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  });\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private get _outsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return merge(\n      fromEvent(this._document, 'click'),\n      fromEvent(this._document, 'touchend')\n    )\n    .pipe(filter((event: MouseEvent | TouchEvent) => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._overlayAttached &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n    if (keyCode === ESCAPE) {\n      event.preventDefault();\n    }\n\n    // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n    // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n    if (this.panelOpen && (keyCode === ESCAPE || (keyCode === UP_ARROW && event.altKey))) {\n      this._resetActiveItem();\n      this._closeKeyEventStream.next();\n      event.stopPropagation();\n    } else if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else if (this.autocomplete) {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    let target = event.target as HTMLInputElement;\n    let value: number | string | null = target.value;\n\n    // Based on `NumberValueAccessor` from forms.\n    if (target.type === 'number') {\n      value = value == '' ? null : parseFloat(value);\n    }\n\n    // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._previousValue !== value && document.activeElement === event.target) {\n      this._previousValue = value;\n      this._onChange(value);\n\n      if (this._canOpen()) {\n        this.openPanel();\n      }\n    }\n  }\n\n  _handleFocus(): void {\n    if (!this._canOpenOnNextFocus) {\n      this._canOpenOnNextFocus = true;\n    } else if (this._canOpen()) {\n      this._previousValue = this._element.nativeElement.value;\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const index = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(index,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n\n    const newScrollPosition = _getOptionScrollPosition(\n      index + labelCount,\n      AUTOCOMPLETE_OPTION_HEIGHT,\n      this.autocomplete._getScrollTop(),\n      AUTOCOMPLETE_PANEL_HEIGHT\n    );\n\n    this.autocomplete._setScrollTop(newScrollPosition);\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.reapplyLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n      .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n          this._resetActiveItem();\n          this.autocomplete._setVisibility();\n\n          if (this.panelOpen) {\n            this._overlayRef!.updatePosition();\n          }\n\n          return this.panelClosingActions;\n        }),\n        // when the first closing event occurs...\n        take(1)\n      )\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      this._overlayRef = this._overlay.create(this._getOverlayConfig());\n\n      if (this._viewportRuler) {\n        this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n          if (this.panelOpen && this._overlayRef) {\n            this._overlayRef.updateSize({width: this._getPanelWidth()});\n          }\n        });\n      }\n    } else {\n      // Update the panel width and direction, in case anything has changed.\n      this._overlayRef.updateSize({width: this._getPanelWidth()});\n    }\n\n    if (this._overlayRef && !this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    const wasOpen = this.panelOpen;\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._overlayAttached = true;\n\n    // We need to do an extra `panelOpen` check in here, because the\n    // autocomplete won't be shown if there are no options.\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\n      this.autocomplete.opened.emit();\n    }\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getPanelWidth(),\n      direction: this._dir\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy = this._overlay.position()\n      .flexibleConnectedTo(this._getConnectedElement())\n      .withFlexibleDimensions(false)\n      .withPush(false)\n      .withPositions([\n        {originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top'},\n        {originX: 'start', originY: 'top', overlayX: 'start', overlayY: 'bottom'}\n      ]);\n\n    return this._positionStrategy;\n  }\n\n  private _getConnectedElement(): ElementRef {\n    if (this.connectedTo) {\n      return this.connectedTo.elementRef;\n    }\n\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n  }\n\n  private _getPanelWidth(): number | string {\n    return this.autocomplete.panelWidth || this._getHostWidth();\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n  }\n\n  /** Determines whether the panel can be opened. */\n  private _canOpen(): boolean {\n    const element = this._element.nativeElement;\n    return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n    OCT = 9, NOV = 10, DEC = 11;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  animateChild,\n  group,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/** Animations used by the Material expansion panel. */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '48px'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '64px'}\n    }),\n    transition('expanded <=> collapsed', group([\n      query('@indicatorRotate', animateChild(), {optional: true}),\n      animate(EXPANSION_PANEL_ANIMATION_TIMING),\n    ])),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  SPACE,\n  UP_ARROW,\n  A,\n} from '@angular/cdk/keycodes';\nimport {\n  CdkConnectedOverlay,\n  Overlay,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  ViewportRuler,\n} from '@angular/cdk/overlay';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  CanDisable,\n  CanDisableRipple,\n  CanUpdateErrorState,\n  ErrorStateMatcher,\n  HasTabIndex,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinErrorState,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {defer, merge, Observable, Subject} from 'rxjs';\nimport {\n  filter,\n  map,\n  startWith,\n  switchMap,\n  take,\n  takeUntil,\n  distinctUntilChanged,\n} from 'rxjs/operators';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 20px.\n */\nexport const SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 20;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nexport class MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatSelectMixinBase = mixinDisableRipple(\n    mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_getAriaLabel()',\n    '[attr.aria-labelledby]': '_getAriaLabelledby()',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanel,\n    matSelectAnimations.fadeInContent\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form. */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Whether the panel's animation is done. */\n  _panelDoneAnimating: boolean = false;\n\n  /** Emits when the panel element is finished transforming in. */\n  _panelDoneAnimatingStream = new Subject<string>();\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy = this._scrollStrategyFactory();\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the component is disabling centering of the active option over the trigger. */\n  private _disableOptionCentering: boolean = false;\n\n  /** Whether the select is focused. */\n  get focused(): boolean {\n    return this._focused || this._panelOpen;\n  }\n  /**\n   * @deprecated Setter to be removed as this property is intended to be readonly.\n   * @breaking-change 8.0.0\n   */\n  set focused(value: boolean) {\n    this._focused = value;\n  }\n  private _focused = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger') trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether to center the active option over the trigger. */\n  @Input()\n  get disableOptionCentering(): boolean { return this._disableOptionCentering; }\n  set disableOptionCentering(value: boolean) {\n    this._disableOptionCentering = coerceBooleanProperty(value);\n  }\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.options) {\n      return merge(...this.options.map(option => option.onSelectionChange));\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  });\n\n   /** Event emitted when the select panel has been toggled. */\n   @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the select has been opened. */\n  @Output('opened') readonly _openedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => o), map(() => {}));\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed') readonly _closedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => !o), map(() => {}));\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectChange> =\n      new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) private _scrollStrategyFactory) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple);\n    this.stateChanges.next();\n\n    // We need `distinctUntilChanged` here, because some browsers will\n    // fire the animation end event twice for the same animation. See:\n    // https://github.com/angular/angular/issues/24084\n    this._panelDoneAnimatingStream\n      .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n      .subscribe(() => {\n        if (this.panelOpen) {\n          this._scrollTop = 0;\n          this.openedChange.emit(true);\n        } else {\n          this.openedChange.emit(false);\n          this._panelDoneAnimating = false;\n          this.overlayDir.offsetX = 0;\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this._selectionModel.onChange!.pipe(takeUntil(this._destroy)).subscribe(event => {\n      event.added.forEach(option => option.select());\n      event.removed.forEach(option => option.deselect());\n    });\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes.disabled) {\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);\n\n    this._panelOpen = true;\n    this._keyManager.withHorizontalOrientation(null);\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n        keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else if (this._multiple && keyCode === A && event.ctrlKey) {\n      event.preventDefault();\n      const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n\n      this.options.forEach(option => {\n        if (!option.disabled) {\n          hasDeselectedOptions ? option.select() : option.deselect();\n        }\n      });\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  /**\n   * When the panel content is done fading in, the _panelDoneAnimating property is\n   * set so the proper class can be added to the panel.\n   */\n  _onFadeInDone(): void {\n    this._panelDoneAnimating = this.panelOpen;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this._focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this._focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[]): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._selectionModel.clear();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n      this._sortValues();\n    } else {\n      this._selectionModel.clear();\n      const correspondingOption = this._selectValue(value);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(correspondingOption);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      this._selectionModel.select(correspondingOption);\n    }\n\n    return correspondingOption;\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\n      .withTypeAhead()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n      // Restore focus to the trigger before closing. Ensures that the focus\n      // position won't be lost if the user got focus into the overlay.\n      this.focus();\n      this.close();\n    });\n\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n      this._onSelect(event.source, event.isUserInput);\n\n      if (event.isUserInput && !this.multiple && this._panelOpen) {\n        this.close();\n        this.focus();\n      }\n    });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption, isUserInput: boolean): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    if (option.value == null && !this._multiple) {\n      option.deselect();\n      this._selectionModel.clear();\n      this._propagateChanges(option.value);\n    } else {\n      option.selected ? this._selectionModel.select(option) : this._selectionModel.deselect(option);\n\n      if (isUserInput) {\n        this._keyManager.setActiveItem(option);\n      }\n\n      if (this.multiple) {\n        this._sortValues();\n\n        if (isUserInput) {\n          // In case the user selected the option with their mouse, we\n          // want to restore focus back to the trigger, in order to\n          // prevent the select keyboard controls from clashing with\n          // the ones from `mat-option`.\n          this.focus();\n        }\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n\n    this.stateChanges.next();\n  }\n\n  /** Sorts the selected values in the selected based on their order in the panel. */\n  private _sortValues() {\n    if (this.multiple) {\n      const options = this.options.toArray();\n      this._selectionModel.sort((a, b) => options.indexOf(a) - options.indexOf(b));\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options,\n        this.optionGroups);\n\n    this.panel.nativeElement.scrollTop = _getOptionScrollPosition(\n      activeOptionIndex + labelCount,\n      this._getItemHeight(),\n      this.panel.nativeElement.scrollTop,\n      SELECT_PANEL_MAX_HEIGHT\n    );\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options,\n        this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  _getAriaLabel(): string | null {\n    // If an ariaLabelledby value has been set by the consumer, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Returns the aria-labelledby of the select component. */\n  _getAriaLabelledby(): string | null {\n    if (this.ariaLabelledby) {\n      return this.ariaLabelledby;\n    }\n\n    // Note: we use `_getAriaLabel` here, because we want to check whether there's a\n    // computed label. `this.ariaLabel` is only the user-specified label.\n    if (!this._parentFormField || !this._parentFormField._hasFloatingLabel() ||\n      this._getAriaLabel()) {\n      return null;\n    }\n\n    return this._parentFormField._labelId || null;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n    // blurry content in some browsers.\n    this.overlayDir.offsetX = Math.round(offsetX);\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    // Disable offset if requested by user by returning 0 as value to offset\n    if (this._disableOptionCentering) {\n      return 0;\n    }\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height difference,\n    // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n    // The value is rounded to prevent some browsers from blurring the content.\n    return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {BreakpointObserver, Breakpoints, BreakpointState} from '@angular/cdk/layout';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConnectionPosition,\n  OverlayRef,\n  ScrollDispatcher,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject, Observable} from 'rxjs';\nimport {matTooltipAnimations} from './tooltip-animations';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/** Creates an error to be thrown if the user supplied an invalid tooltip position. */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition({scrollThrottle: SCROLL_THROTTLE_MS});\n}\n\n/** @docs-private */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options', {\n      providedIn: 'root',\n      factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n    });\n\nexport function MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY(): MatTooltipDefaultOptions {\n  return {\n    showDelay: 0,\n    hideDelay: 0,\n    touchendHideDelay: 1500,\n  };\n}\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.io/design/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': '_handleTouchend()',\n  },\n})\nexport class MatTooltip implements OnDestroy {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _portal: ComponentPortal<TooltipComponent>;\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      if (this._overlayRef) {\n        this._updatePosition();\n\n        if (this._tooltipInstance) {\n          this._tooltipInstance!.show(0);\n        }\n\n        this._overlayRef.updatePosition();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay = this._defaultOptions.showDelay;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay = this._defaultOptions.hideDelay;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, EventListenerOrEventListenerObject>();\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    private _platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) private _scrollStrategy,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions: MatTooltipDefaultOptions) {\n\n    const element: HTMLElement = _elementRef.nativeElement;\n\n    // The mouse events shouldn't be bound on mobile devices, because they can prevent the\n    // first tap from firing its click event or can cause the tooltip to open for clicks.\n    if (!_platform.IOS && !_platform.ANDROID) {\n      this._manualListeners\n        .set('mouseenter', () => this.show())\n        .set('mouseleave', () => this.hide())\n        .forEach((listener, event) => element.addEventListener(event, listener));\n    }\n\n    if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS and in Safari, because it will prevent users from typing in inputs.\n      // Since `user-select: none` is not needed for the `longpress` event and can cause unexpected\n      // behavior for text fields, we always clear the `user-select` to avoid such issues.\n      element.style.webkitUserSelect = element.style.userSelect = element.style.msUserSelect = '';\n    }\n\n    // Hammer applies `-webkit-user-drag: none` on all elements by default,\n    // which breaks the native drag&drop. If the consumer explicitly made\n    // the element draggable, clear the `-webkit-user-drag`.\n    if (element.draggable && element.style['webkitUserDrag'] === 'none') {\n      element.style['webkitUserDrag'] = '';\n    }\n\n    _focusMonitor.monitor(element).pipe(takeUntil(this._destroyed)).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin === 'keyboard') {\n        _ngZone.run(() => this.show());\n      }\n    });\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._tooltipInstance = null;\n    }\n\n    // Clean up the event listeners set in the constructor\n    if (!this._platform.IOS) {\n      this._manualListeners.forEach((listener, event) =>\n        this._elementRef.nativeElement.removeEventListener(event, listener));\n\n      this._manualListeners.clear();\n    }\n\n    this._destroyed.next();\n    this._destroyed.complete();\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message) { return; }\n\n    const overlayRef = this._createOverlay();\n\n    this._detach();\n    this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    this._tooltipInstance = overlayRef.attach(this._portal).instance;\n    this._tooltipInstance.afterHidden()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Handles the touchend events on the host element. */\n  _handleTouchend() {\n    this.hide(this._defaultOptions.touchendHideDelay);\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    if (this._overlayRef) {\n      return this._overlayRef;\n    }\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay.position()\n      .flexibleConnectedTo(this._elementRef)\n      .withTransformOriginOn('.mat-tooltip')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8);\n\n    const scrollableAncestors = this._scrollDispatcher\n      .getAncestorScrollContainers(this._elementRef);\n\n    strategy.withScrollableContainers(scrollableAncestors);\n\n    strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        }\n      }\n    });\n\n    this._overlayRef = this._overlay.create({\n      direction: this._dir,\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._updatePosition();\n\n    this._overlayRef.detachments()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n\n    return this._overlayRef;\n  }\n\n  /** Detaches the currently-attached tooltip. */\n  private _detach() {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /** Updates the position of the current tooltip. */\n  private _updatePosition() {\n    const position =\n        this._overlayRef!.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    position.withPositions([\n      {...origin.main, ...overlay.main},\n      {...origin.fallback, ...overlay.fallback}\n    ]);\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let originPosition: OriginConnectionPosition;\n\n    if (position == 'above' || position == 'below') {\n      originPosition = {originX: 'center', originY: position == 'above' ? 'top' : 'bottom'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      originPosition = {originX: 'start', originY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      originPosition = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(originPosition.originX, originPosition.originY);\n\n    return {\n      main: originPosition,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let overlayPosition: OverlayConnectionPosition;\n\n    if (position == 'above') {\n      overlayPosition = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (position == 'below') {\n      overlayPosition = {overlayX: 'center', overlayY: 'top'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      overlayPosition = {overlayX: 'end', overlayY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      overlayPosition = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n    return {\n      main: overlayPosition,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(\n        take(1),\n        takeUntil(this._destroyed)\n      ).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private readonly _onHide: Subject<any> = new Subject();\n\n  /** Stream that emits whether the user has a handset-sized display.  */\n  _isHandset: Observable<BreakpointState> = this._breakpointObserver.observe(Breakpoints.Handset);\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _breakpointObserver: BreakpointObserver) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      this._closeOnInteraction = true;\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.io/design/components/tooltips.html#behavior\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n// TODO(devversion): Workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkPortal = CdkPortal;\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n})\nexport class MatTabLabel extends _CdkPortal {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/** Decorates the `ng-template` tags and reads out the template from it. */\n@Directive({selector: '[matTabContent]'})\nexport class MatTabContent {\n  constructor(public template: TemplateRef<any>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabContent} from './tab-content';\n\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nexport class MatTabBase {}\nexport const _MatTabMixinBase = mixinDisabled(MatTabBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matTab',\n})\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n  @ContentChild(MatTabLabel) templateLabel: MatTabLabel;\n\n  /**\n   * Template provided in the tab content that will be used if present, used to enable lazy-loading\n   */\n  @ContentChild(MatTabContent, {read: TemplateRef}) _explicitContent: TemplateRef<any>;\n\n  /** Template inside the MatTab view that contains an `<ng-content>`. */\n  @ViewChild(TemplateRef) _implicitContent: TemplateRef<any>;\n\n  /** Plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** Aria label for the tab. */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Reference to the element that the tab is labelled by.\n   * Will be cleared if `aria-label` is set at the same time.\n   */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the internal state of the tab changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel') || changes.hasOwnProperty('disabled')) {\n      this._stateChanges.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._stateChanges.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(\n        this._explicitContent || this._implicitContent, this._viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material tabs. */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n\n    // If the tab is either on the left or right, we additionally add a `min-height` of 1px\n    // in order to ensure that the element has a height before its state changes. This is\n    // necessary because Chrome does seem to skip the transition in RTL mode if the element does\n    // not have a static height and is not rendered. See related issue: #9465\n    state('left', style({transform: 'translate3d(-100%, 0, 0)', minHeight: '1px'})),\n    state('right', style({transform: 'translate3d(100%, 0, 0)', minHeight: '1px'})),\n\n    transition('* => left, * => right, left => center, right => center',\n        animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ])\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectorRef,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n  ViewChild,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet, PortalHostDirective} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {Subscription} from 'rxjs';\nimport {matTabsAnimations} from './tabs-animations';\nimport {startWith} from 'rxjs/operators';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]'\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** Subscription to events for when the tab body begins centering. */\n  private _centeringSub = Subscription.EMPTY;\n  /** Subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub = Subscription.EMPTY;\n\n  constructor(\n    componentFactoryResolver: ComponentFactoryResolver,\n    viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\n      super(componentFactoryResolver, viewContainerRef);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    this._centeringSub = this._host._beforeCentering\n      .pipe(startWith(this._host._isCenterPosition(this._host._position)))\n      .subscribe((isCentering: boolean) => {\n        if (isCentering && !this.hasAttached()) {\n          this.attach(this._host._content);\n        }\n      });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  /** Clean up centering subscription. */\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this._centeringSub.unsubscribe();\n    this._leavingSub.unsubscribe();\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  },\n})\nexport class MatTabBody implements OnInit, OnDestroy {\n\n  /** Current position of the tab-body in the tab-group. Zero means that the tab is visible. */\n  private _positionIndex: number;\n\n  /** Subscription to the directionality change observable. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** Tab body position state. Used by the animation trigger for the current state. */\n  _position: MatTabBodyPositionState;\n\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() readonly _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() readonly _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n   /** The portal host inside of this container into which the tab body content will be loaded. */\n  @ViewChild(PortalHostDirective) _portalHost: PortalHostDirective;\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal;\n\n  /** Position that will be used when the tab is immediately becoming visible after creation. */\n  @Input() origin: number;\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  @Input()\n  set position(position: number) {\n    this._positionIndex = position;\n    this._computePositionAnimationState();\n  }\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality,\n              /**\n               * @breaking-change 7.0.0 changeDetectorRef to be made required.\n               */\n              changeDetectorRef?: ChangeDetectorRef) {\n\n    if (this._dir && changeDetectorRef) {\n      this._dirChangeSubscription = this._dir.change.subscribe(dir => {\n        this._computePositionAnimationState(dir);\n        changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this.origin != null) {\n      this._position = this._computePositionFromOrigin();\n    }\n  }\n\n  ngOnDestroy() {\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onTranslateTabStarted(e: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(e.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  _onTranslateTabComplete(e: AnimationEvent): void {\n    // If the transition to the center is complete, emit an event.\n    if (this._isCenterPosition(e.toState) && this._isCenterPosition(this._position)) {\n      this._onCentered.emit();\n    }\n\n    if (this._isCenterPosition(e.fromState) && !this._isCenterPosition(this._position)) {\n      this._afterLeavingCenter.emit();\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\n\n  /** Computes the position state that will be used for the tab-body animation trigger. */\n  private _computePositionAnimationState(dir: Direction = this._getLayoutDirection()) {\n    if (this._positionIndex < 0) {\n      this._position = dir == 'ltr' ? 'left' : 'right';\n    } else if (this._positionIndex > 0) {\n      this._position = dir == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n\n  /**\n   * Computes the position state based on the specified origin position. This is used if the\n   * tab is becoming visible immediately after creation.\n   */\n  private _computePositionFromOrigin(): MatTabBodyPositionState {\n    const dir = this._getLayoutDirection();\n\n    if ((dir == 'ltr' && this.origin <= 0) || (dir == 'rtl' && this.origin > 0)) {\n      return 'left-origin-center';\n    }\n\n    return 'right-origin-center';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nexport class MatTabLabelWrapperBase {}\nexport const _MatTabLabelWrapperMixinBase = mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled',\n    '[attr.aria-disabled]': '!!disabled',\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {END, ENTER, HOME, SPACE} from '@angular/cdk/keycodes';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, mixinDisableRipple} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\n\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n// Boilerplate for applying mixins to MatTabHeader.\n/** @docs-private */\nexport class MatTabHeaderBase {}\nexport const _MatTabHeaderMixinBase = mixinDisableRipple(MatTabHeaderBase);\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends _MatTabHeaderMixinBase\n    implements AfterContentChecked, AfterContentInit, OnDestroy, CanDisableRipple {\n\n  @ContentChildren(MatTabLabelWrapper) _labelWrappers: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer') _tabListContainer: ElementRef;\n  @ViewChild('tabList') _tabList: ElementRef;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  /** Used to manage focus between the tabs. */\n  private _keyManager: FocusKeyManager<MatTabLabelWrapper>;\n\n  private _selectedIndex: number = 0;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number { return this._selectedIndex; }\n  set selectedIndex(value: number) {\n    value = coerceNumberProperty(value);\n    this._selectedIndexChanged = this._selectedIndex != value;\n    this._selectedIndex = value;\n\n    if (this._keyManager) {\n      this._keyManager.updateActiveItemIndex(value);\n    }\n  }\n\n  /** Event emitted when the option is selected. */\n  @Output() readonly selectFocusedIndex = new EventEmitter();\n\n  /** Event emitted when a label is focused. */\n  @Output() readonly indexFocused = new EventEmitter();\n\n  constructor(private _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() private _dir: Directionality,\n              // @breaking-change 8.0.0 `_ngZone` parameter to be made required.\n              private _ngZone?: NgZone) {\n    super();\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this._updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case HOME:\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n        break;\n      case END:\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        event.preventDefault();\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Aligns the ink bar to the selected tab on load.\n   */\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this._updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    this._keyManager = new FocusKeyManager(this._labelWrappers)\n      .withHorizontalOrientation(this._getLayoutDirection())\n      .withWrap();\n\n    this._keyManager.updateActiveItem(0);\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n\n    // On dir change or window resize, realign the ink bar and update the orientation of\n    // the key manager if the direction has changed.\n    merge(dirChange, resize).pipe(takeUntil(this._destroyed)).subscribe(() => {\n      realign();\n      this._keyManager.withHorizontalOrientation(this._getLayoutDirection());\n    });\n\n    // If there is a change in the focus key manager we need to emit the `indexFocused`\n    // event in order to provide a public event that notifies about focus changes. Also we realign\n    // the tabs container by scrolling the new focused tab into the visible section.\n    this._keyManager.change.pipe(takeUntil(this._destroyed)).subscribe(newFocusIndex => {\n      this.indexFocused.emit(newFocusIndex);\n      this._setTabFocus(newFocusIndex);\n    });\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    const zoneCallback = () => {\n      this._updatePagination();\n      this._alignInkBarToSelectedTab();\n      this._changeDetectorRef.markForCheck();\n    };\n\n    // The content observer runs outside the `NgZone` by default, which\n    // means that we need to bring the callback back in ourselves.\n    // @breaking-change 8.0.0 Remove null check for `_ngZone` once it's a required parameter.\n    this._ngZone ? this._ngZone.run(zoneCallback) : zoneCallback();\n  }\n\n  /**\n   * Updating the view whether pagination should be enabled or not\n   */\n  _updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number {\n    return this._keyManager ? this._keyManager.activeItemIndex! : 0;\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this.focusIndex === value || !this._keyManager) {\n      return;\n    }\n\n    this._keyManager.setActiveItem(value);\n  }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    const scrollDistance = this.scrollDistance;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    // Don't use `translate3d` here because we don't want to create a new layer. A new layer\n    // seems to cause flickering and overflow in Internet Explorer. For example, the ink bar\n    // and ripples will exceed the boundaries of the visible tab bar.\n    // See: https://github.com/angular/material2/issues/10276\n    this._tabList.nativeElement.style.transform = `translateX(${translateX}px)`;\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  get scrollDistance(): number { return this._scrollDistance; }\n  set scrollDistance(v: number) {\n    this._scrollDistance = Math.max(0, Math.min(this._getMaxScrollDistance(), v));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n  }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(scrollDir: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    this.scrollDistance += (scrollDir == 'before' ? -1 : 1) * viewLength / 3;\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    const selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    const isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  _alignInkBarToSelectedTab(): void {\n    const selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\n        null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper!);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisableRipple,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette\n} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\n\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nexport class MatTabGroupBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabGroupMixinBase = mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://material.io/design/components/tabs.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\n\n  @ViewChild('tabBodyWrapper') _tabBodyWrapper: ElementRef;\n\n  @ViewChild('tabHeader') _tabHeader: MatTabHeader;\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n  private _dynamicHeight: boolean = false;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() readonly focusChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() readonly selectedTabChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\n\n  private _groupId: number;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super(elementRef);\n    this._groupId = nextId++;\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked() {\n    // Don't clamp the `indexToSelect` immediately in the setter because it can happen that\n    // the amount of tabs changes before the actual change detection runs.\n    const indexToSelect = this._indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect) {\n      const isFirstRun = this._selectedIndex == null;\n\n      if (!isFirstRun) {\n        this.selectedTabChange.emit(this._createChangeEvent(indexToSelect));\n      }\n\n      // Changing these values after change detection has run\n      // since the checked content may contain references to them.\n      Promise.resolve().then(() => {\n        this._tabs.forEach((tab, index) => tab.isActive = index === indexToSelect);\n\n        if (!isFirstRun) {\n          this.selectedIndexChange.emit(indexToSelect);\n        }\n      });\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      const indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n      // Maintain the previously-selected tab if a new tab is added or removed and there is no\n      // explicit change that selects a different tab.\n      if (indexToSelect === this._selectedIndex) {\n        const tabs = this._tabs.toArray();\n\n        for (let i = 0; i < tabs.length; i++) {\n          if (tabs[i].isActive) {\n            // Assign both to the `_indexToSelect` and `_selectedIndex` so we don't fire a changed\n            // event, otherwise the consumer may end up in an infinite loop in some edge cases like\n            // adding a tab within the `selectedIndexChange` event.\n            this._indexToSelect = this._selectedIndex = i;\n            break;\n          }\n        }\n      }\n\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  /** Re-aligns the ink bar to the selected tab element. */\n  realignInkBar() {\n    if (this._tabHeader) {\n      this._tabHeader._alignInkBarToSelectedTab();\n    }\n  }\n\n  _focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(...this._tabs.map(tab => tab._stateChanges))\n      .subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  /** Clamps the given index to the bounds of 0 and the tabs length. */\n  private _clampTabIndex(index: number | null): number {\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    return Math.min(this._tabs.length - 1, Math.max(index || 0, 0));\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    this._tabBodyWrapperHeight = this._tabBodyWrapper.nativeElement.clientHeight;\n    this._tabBodyWrapper.nativeElement.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, idx: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = idx;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex, RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from '../ink-bar';\nimport {FocusMonitor} from '@angular/cdk/a11y';\n\n\n// Boilerplate for applying mixins to MatTabNav.\n/** @docs-private */\nexport class MatTabNavBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabNavMixinBase = mixinDisableRipple(mixinColor(MatTabNavBase, 'primary'));\n\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  exportAs: 'matTabNavBar, matTabNav',\n  inputs: ['color', 'disableRipple'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTabNav extends _MatTabNavMixinBase\n    implements AfterContentChecked, AfterContentInit, CanColor, CanDisableRipple, OnDestroy {\n\n  /** Subject that emits when the component has been destroyed. */\n  private readonly _onDestroy = new Subject<void>();\n\n  private _activeLinkChanged: boolean;\n  private _activeLinkElement: ElementRef<HTMLElement> | null;\n\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n\n  /** Query list of all tab links of the tab navigation. */\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true})\n  _tabLinks: QueryList<MatTabLink>;\n\n  /** Background color of the tab nav. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  constructor(elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler) {\n    super(elementRef);\n  }\n\n  /**\n   * Notifies the component that the active link has been changed.\n   * @breaking-change 7.0.0 `element` parameter to be removed.\n   */\n  updateActiveLink(element: ElementRef) {\n    // Note: keeping the `element` for backwards-compat, but isn't being used for anything.\n    // @breaking-change 7.0.0\n    this._activeLinkChanged = !!element;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  ngAfterContentInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      const dirChange = this._dir ? this._dir.change : observableOf(null);\n\n      return merge(dirChange, this._viewportRuler.change(10))\n          .pipe(takeUntil(this._onDestroy))\n          .subscribe(() => this._alignInkBar());\n    });\n  }\n\n  /** Checks if the active link has been changed and, if so, will update the ink bar. */\n  ngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      const activeTab = this._tabLinks.find(tab => tab.active);\n\n      this._activeLinkElement = activeTab ? activeTab._elementRef : null;\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Aligns the ink bar to the active link. */\n  _alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.show();\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    } else {\n      this._inkBar.hide();\n    }\n  }\n}\n\n\n// Boilerplate for applying mixins to MatTabLink.\nexport class MatTabLinkBase {}\nexport const _MatTabLinkMixinBase =\n  mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\n\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n@Directive({\n  selector: '[mat-tab-link], [matTabLink]',\n  exportAs: 'matTabLink',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-current]': 'active',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabIndex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled',\n    '[class.mat-tab-label-active]': 'active',\n    '(click)': '_handleClick($event)'\n  }\n})\nexport class MatTabLink extends _MatTabLinkMixinBase\n    implements OnDestroy, CanDisable, CanDisableRipple, HasTabIndex, RippleTarget {\n\n  /** Whether the tab link is active or not. */\n  protected _isActive: boolean = false;\n\n  /** Reference to the RippleRenderer for the tab-link. */\n  protected _tabLinkRipple: RippleRenderer;\n\n  /** Whether the ripples are globally disabled through the RippleGlobalOptions */\n  private _ripplesGloballyDisabled = false;\n\n  /** Whether the link is active. */\n  @Input()\n  get active(): boolean { return this._isActive; }\n  set active(value: boolean) {\n    if (value !== this._isActive) {\n      this._isActive = value;\n      this._tabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._tabNavBar.disableRipple ||\n      this._ripplesGloballyDisabled;\n  }\n\n  constructor(private _tabNavBar: MatTabNav,\n              public _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Attribute('tabindex') tabIndex: string,\n              /**\n               * @deprecated\n               * @breaking-change 7.0.0 `_focusMonitor` parameter to be made required.\n               */\n              private _focusMonitor?: FocusMonitor) {\n    super();\n\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._tabLinkRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    if (globalOptions) {\n      this._ripplesGloballyDisabled = !!globalOptions.disabled;\n      // TODO(paul): Once the speedFactor is removed, we no longer need to copy each single option.\n      this.rippleConfig = {\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n        speedFactor: globalOptions.baseSpeedFactor,\n        animation: globalOptions.animation,\n      };\n    }\n\n    if (_focusMonitor) {\n      _focusMonitor.monitor(_elementRef.nativeElement);\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabLinkRipple._removeTriggerEvents();\n\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n  }\n\n  /**\n   * Handles the click event, preventing default navigation if the tab link is disabled.\n   */\n  _handleClick(event: MouseEvent) {\n    if (this.disabled) {\n      event.preventDefault();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabContent} from './tab-content';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n    A11yModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n    MatTabContent,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader,\n    MatTabContent,\n  ],\n})\nexport class MatTabsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nexport class MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatToolbarMixinBase = mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': '_toolbarRows.length > 0',\n    '[class.mat-toolbar-single-row]': '_toolbarRows.length === 0',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n  private _document: Document;\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(\n    elementRef: ElementRef,\n    private _platform: Platform,\n    @Inject(DOCUMENT) document?: any) {\n    super(elementRef);\n\n    // TODO: make the document a required param when doing breaking changes.\n    this._document = document;\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = [].slice.call(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n      .some(node => node.textContent.trim());\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable({providedIn: 'root'})\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkColumnDef} from '@angular/cdk/table';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatSort, MatSortable} from './sort';\nimport {matSortAnimations} from './sort-animations';\nimport {SortDirection} from './sort-direction';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {MatSortHeaderIntl} from './sort-header-intl';\n\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nexport class MatSortHeaderBase {}\nexport const _MatSortHeaderMixinBase = mixinDisabled(MatSortHeaderBase);\n\n/**\n * Valid positions for the arrow to be in for its opacity and translation. If the state is a\n * sort direction, the position of the arrow will be above/below and opacity 0. If the state is\n * hint, the arrow will be in the center with a slight opacity. Active state means the arrow will\n * be fully opaque in the center.\n *\n * @docs-private\n */\nexport type ArrowViewState = SortDirection | 'hint' | 'active';\n\n/**\n * States describing the arrow's animated position (animating fromState to toState).\n * If the fromState is not defined, there will be no animated transition to the toState.\n * @docs-private\n */\nexport interface ArrowViewStateTransition {\n  fromState?: ArrowViewState;\n  toState: ArrowViewState;\n}\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_handleClick()',\n    '(mouseenter)': '_setIndicatorHintVisible(true)',\n    '(longpress)': '_setIndicatorHintVisible(true)',\n    '(mouseleave)': '_setIndicatorHintVisible(false)',\n    '[attr.aria-sort]': '_getAriaSortAttribute()',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.arrowOpacity,\n    matSortAnimations.arrowPosition,\n    matSortAnimations.allowChildren,\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase\n    implements CanDisable, MatSortable, OnDestroy, OnInit {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n   * provide an affordance that the header is sortable by showing on focus and hover.\n   */\n  _showIndicatorHint: boolean = false;\n\n  /**\n   * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n   * position through the animation. If animations are currently disabled, the fromState is removed\n   * so that there is no animation displayed.\n   */\n  _viewState: ArrowViewStateTransition;\n\n  /** The direction the arrow should be facing according to the current state. */\n  _arrowDirection: SortDirection = '';\n\n  /**\n   * Whether the view state animation should show the transition between the `from` and `to` states.\n   */\n  _disableViewStateAnimation = false;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input() start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Optional() public _cdkColumnDef: CdkColumnDef) {\n\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n        .subscribe(() => {\n          if (this._isSorted()) {\n            this._updateArrowDirection();\n          }\n\n          // If this header was recently active and now no longer sorted, animate away the arrow.\n          if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = false;\n            this._setAnimationTransitionState({fromState: 'active', toState: this._arrowDirection});\n          }\n\n          changeDetectorRef.markForCheck();\n        });\n  }\n\n  ngOnInit() {\n    if (!this.id && this._cdkColumnDef) {\n      this.id = this._cdkColumnDef.name;\n    }\n\n    // Initialize the direction of the arrow and set the view state to be immediately that state.\n    this._updateArrowDirection();\n    this._setAnimationTransitionState(\n        {toState: this._isSorted() ? 'active' : this._arrowDirection});\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /**\n   * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n   * user showing what the active sort will become. If set to false, the arrow will fade away.\n   */\n  _setIndicatorHintVisible(visible: boolean) {\n    // No-op if the sort header is disabled - should not make the hint visible.\n    if (this._isDisabled() && visible) { return; }\n\n    this._showIndicatorHint = visible;\n\n    if (!this._isSorted()) {\n      this._updateArrowDirection();\n      if (this._showIndicatorHint) {\n        this._setAnimationTransitionState({fromState: this._arrowDirection, toState: 'hint'});\n      } else {\n        this._setAnimationTransitionState({fromState: 'hint', toState: this._arrowDirection});\n      }\n    }\n  }\n\n  /**\n   * Sets the animation transition view state for the arrow's position and opacity. If the\n   * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n   * no animation appears.\n   */\n  _setAnimationTransitionState(viewState: ArrowViewStateTransition) {\n    this._viewState = viewState;\n\n    // If the animation for arrow position state (opacity/translation) should be disabled,\n    // remove the fromState so that it jumps right to the toState.\n    if (this._disableViewStateAnimation) {\n      this._viewState = {toState: viewState.toState};\n    }\n  }\n\n  /** Triggers the sort on this sort header and removes the indicator hint. */\n  _handleClick() {\n    if (this._isDisabled()) { return; }\n\n    this._sort.sort(this);\n\n    // Do not show the animation if the header was already shown in the right position.\n    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n      this._disableViewStateAnimation = true;\n    }\n\n    // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n    // the direction it is facing.\n    const viewState: ArrowViewStateTransition = this._isSorted() ?\n        {fromState: this._arrowDirection, toState: 'active'} :\n        {fromState: 'active', toState: this._arrowDirection};\n    this._setAnimationTransitionState(viewState);\n\n    this._showIndicatorHint = false;\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  /** Returns the animation state for the arrow direction (indicator and pointers). */\n  _getArrowDirectionState() {\n    return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n  }\n\n  /** Returns the arrow position state (opacity, translation). */\n  _getArrowViewState() {\n    const fromState = this._viewState.fromState;\n    return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n  }\n\n  /**\n   * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n   * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n   * active sorted direction. The reason this is updated through a function is because the direction\n   * should only be changed at specific times - when deactivated but the hint is displayed and when\n   * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n   * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n   * preserving its direction, even though the next sort direction is actually different and should\n   * only be changed once the arrow displays again (hint or activation).\n   */\n  _updateArrowDirection() {\n    this._arrowDirection = this._isSorted() ?\n        this._sort.direction :\n        (this.start || this._sort.start);\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n\n  /**\n   * Gets the aria-sort attribute that should be applied to this sort header. If this header\n   * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n   * says that the aria-sort property should only be present on one header at a time, so removing\n   * ensures this is true.\n   */\n  _getAriaSortAttribute() {\n    if (!this._isSorted()) { return null; }\n\n    return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkStepLabel = CdkStepLabel;\n\n@Directive({\n  selector: '[matStepLabel]',\n})\nexport class MatStepLabel extends _CdkStepLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Stepper data that is required for internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** Label that is rendered below optional steps. */\n  optionalLabel: string = 'Optional';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  TemplateRef,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperIntl} from './stepper-intl';\nimport {MatStepperIconContext} from './stepper-icon';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStepHeader implements OnDestroy {\n  private _intlSubscription: Subscription;\n\n  /** State of the given step. */\n  @Input() state: string;\n\n  /** Label of the given step. */\n  @Input() label: MatStepLabel | string;\n\n  /** Overrides for the header icons, passed in via the stepper. */\n  @Input() iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>};\n\n  /** Index of the given step. */\n  @Input() index: number;\n\n  /** Whether the given step is selected. */\n  @Input() selected: boolean;\n\n  /** Whether the given step label is active. */\n  @Input() active: boolean;\n\n  /** Whether the given step is optional. */\n  @Input() optional: boolean;\n\n  constructor(\n    public _intl: MatStepperIntl,\n    private _focusMonitor: FocusMonitor,\n    private _element: ElementRef<HTMLElement>,\n    changeDetectorRef: ChangeDetectorRef) {\n    _focusMonitor.monitor(_element.nativeElement, true);\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n\n  /** Returns string label of given step if it is a text label. */\n  _stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n\n  /** Returns MatStepLabel if the label of given step is a template label. */\n  _templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n\n  /** Returns the host HTML element. */\n  _getHostElement() {\n    return this._element.nativeElement;\n  }\n\n  /** Template context variables that are exposed to the `matStepperIcon` instances. */\n  _getIconContext(): MatStepperIconContext {\n    return {\n      index: this.index,\n      active: this.active,\n      optional: this.optional\n    };\n  }\n\n  focus() {\n    this._getHostElement().focus();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material steppers. */\nexport const matStepperAnimations: {\n  readonly horizontalStepTransition: AnimationTriggerMetadata;\n  readonly verticalStepTransition: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions the step along the X axis in a horizontal stepper. */\n  horizontalStepTransition: trigger('stepTransition', [\n    state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n    state('current', style({transform: 'none', visibility: 'visible'})),\n    state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n    transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n  ]),\n\n  /** Animation that transitions the step along the Y axis in a vertical stepper. */\n  verticalStepTransition: trigger('stepTransition', [\n    state('previous', style({height: '0px', visibility: 'hidden'})),\n    state('next', style({height: '0px', visibility: 'hidden'})),\n    state('current', style({height: '*', visibility: 'visible'})),\n    transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, TemplateRef} from '@angular/core';\n\n/** Template context available to an attached `matStepperIcon`. */\nexport interface MatStepperIconContext {\n  /** Index of the step. */\n  index: number;\n  /** Whether the step is currently active. */\n  active: boolean;\n  /** Whether the step is optional. */\n  optional: boolean;\n}\n\n/**\n * Template to be used to override the icons inside the step header.\n */\n@Directive({\n  selector: 'ng-template[matStepperIcon]',\n})\nexport class MatStepperIcon {\n  /** Name of the icon to be overridden. */\n  @Input('matStepperIcon') name: 'edit' | 'done' | 'number';\n\n  constructor(public templateRef: TemplateRef<MatStepperIconContext>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {CdkStep, CdkStepper, StepContentPositionState} from '@angular/cdk/stepper';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Optional,\n  Output,\n  QueryList,\n  SkipSelf,\n  TemplateRef,\n  ViewChildren,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {DOCUMENT} from '@angular/common';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {takeUntil} from 'rxjs/operators';\nimport {matStepperAnimations} from './stepper-animations';\nimport {MatStepperIcon, MatStepperIconContext} from './stepper-icon';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkStepper = CdkStepper;\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: ErrorStateMatcher, useExisting: MatStep}],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matStep',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\n  /** Content for step label given by `<ng-template matStepLabel>`. */\n  @ContentChild(MatStepLabel) stepLabel: MatStepLabel;\n\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher) {\n    super(stepper);\n  }\n\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    const customErrorState = !!(control && control.invalid && this.interacted);\n\n    return originalErrorState || customErrorState;\n  }\n}\n\n\n@Directive({\n  selector: '[matStepper]'\n})\nexport class MatStepper extends _CdkStepper implements AfterContentInit {\n  /** The list of step headers of the steps in the stepper. */\n  @ViewChildren(MatStepHeader) _stepHeader: QueryList<MatStepHeader>;\n\n  /** Steps that the stepper holds. */\n  @ContentChildren(MatStep) _steps: QueryList<MatStep>;\n\n  /** Custom icon overrides passed in by the consumer. */\n  @ContentChildren(MatStepperIcon) _icons: QueryList<MatStepperIcon>;\n\n  /** Event emitted when the current step is done transitioning in. */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Consumer-specified template-refs to be used to override the header icons. */\n  _iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>} = {};\n\n  ngAfterContentInit() {\n    const icons = this._icons.toArray();\n\n    ['edit', 'done', 'number'].forEach(name => {\n      const override = icons.find(icon => icon.name === name);\n\n      if (override) {\n        this._iconOverrides[name] = override.templateRef;\n      }\n    });\n\n    // Mark the component for change detection whenever the content children query changes\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\n  }\n\n  _animationDone(event: AnimationEvent) {\n    if ((event.toState as StepContentPositionState) === 'current') {\n      this.animationDone.emit();\n    }\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-horizontal-stepper',\n  exportAs: 'matHorizontalStepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    'aria-orientation': 'horizontal',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.horizontalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatHorizontalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatHorizontalStepper extends MatStepper { }\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-vertical-stepper',\n  exportAs: 'matVerticalStepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'aria-orientation': 'vertical',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.verticalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatVerticalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatVerticalStepper extends MatStepper {\n  constructor(\n    @Optional() dir: Directionality,\n    changeDetectorRef: ChangeDetectorRef,\n    // @breaking-change 8.0.0 `elementRef` and `_document` parameters to become required.\n    elementRef?: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) _document?: any) {\n    super(dir, changeDetectorRef, elementRef, _document);\n    this._orientation = 'vertical';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepper, CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {MatStepper} from './stepper';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkStepperNext = CdkStepperNext;\nexport const _CdkStepperPrevious = CdkStepperPrevious;\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperNext]',\n  host: {\n    '(click)': '_stepper.next()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperNext extends _CdkStepperNext {}\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperPrevious]',\n  host: {\n    '(click)': '_stepper.previous()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperPrevious extends _CdkStepperPrevious {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {ErrorStateMatcher, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nimport {MatStepperIcon} from './stepper-icon';\nimport {MatStepperIntl} from './stepper-intl';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule,\n    MatRippleModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  declarations: [\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  providers: [MatStepperIntl, ErrorStateMatcher],\n})\nexport class MatStepperModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkTable = CdkTable;\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table, table[mat-table]',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTable<T> extends _CdkTable<T> {\n  /** Overrides the sticky CSS class set by the `CdkTable`. */\n  protected stickyCssClass = 'mat-table-sticky';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef, CdkFooterCell, CdkFooterCellDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkCellDef = CdkCellDef;\nexport const _CdkHeaderCellDef = CdkHeaderCellDef;\nexport const _CdkFooterCellDef = CdkFooterCellDef;\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends _CdkCellDef {}\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends _CdkHeaderCellDef {}\n\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matFooterCellDef]',\n  providers: [{provide: CdkFooterCellDef, useExisting: MatFooterCellDef}]\n})\nexport class MatFooterCellDef extends _CdkFooterCellDef {}\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [{provide: CdkColumnDef, useExisting: MatColumnDef}],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n\n  /** Whether this column should be sticky positioned at the start of the row */\n  @Input() sticky: boolean;\n\n  /** Whether this column should be sticky positioned on the end of the row */\n  @Input() stickyEnd: boolean;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell, th[mat-header-cell]',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef<HTMLElement>) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Footer cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-footer-cell, td[mat-footer-cell]',\n  host: {\n    'class': 'mat-footer-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatFooterCell extends CdkFooterCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell, td[mat-cell]',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef<HTMLElement>) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  ViewEncapsulation\n} from '@angular/core';\nimport {\n  CDK_ROW_TEMPLATE, CdkFooterRow, CdkFooterRowDef,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef,\n} from '@angular/cdk/table';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkHeaderRowDef = CdkHeaderRowDef;\nexport const _CdkFooterRowDef = CdkFooterRowDef;\nexport const _CdkRowDef = CdkRowDef;\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef', 'sticky: matHeaderRowDefSticky'],\n})\nexport class MatHeaderRowDef extends _CdkHeaderRowDef {}\n\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\n@Directive({\n  selector: '[matFooterRowDef]',\n  providers: [{provide: CdkFooterRowDef, useExisting: MatFooterRowDef}],\n  inputs: ['columns: matFooterRowDef', 'sticky: matFooterRowDefSticky'],\n})\nexport class MatFooterRowDef extends _CdkFooterRowDef {}\n\n/**\n * Data row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends _CdkRowDef<T> {}\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row, tr[mat-header-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n  providers: [{provide: CdkHeaderRow, useExisting: MatHeaderRow}],\n})\nexport class MatHeaderRow extends CdkHeaderRow { }\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-footer-row, tr[mat-footer-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-footer-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matFooterRow',\n  providers: [{provide: CdkFooterRow, useExisting: MatFooterRow}],\n})\nexport class MatFooterRow extends CdkFooterRow { }\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row, tr[mat-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n  providers: [{provide: CdkRow, useExisting: MatRow}],\n})\nexport class MatRow extends CdkRow { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {\n  MatCell,\n  MatCellDef,\n  MatColumnDef,\n  MatFooterCell,\n  MatFooterCellDef,\n  MatHeaderCell,\n  MatHeaderCellDef\n} from './cell';\nimport {\n  MatFooterRow,\n  MatFooterRowDef,\n  MatHeaderRow,\n  MatHeaderRowDef,\n  MatRow,\n  MatRowDef\n} from './row';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\nconst EXPORTED_DECLARATIONS = [\n  // Table\n  MatTable,\n\n  // Template defs\n  MatHeaderCellDef,\n  MatHeaderRowDef,\n  MatColumnDef,\n  MatCellDef,\n  MatRowDef,\n  MatFooterCellDef,\n  MatFooterRowDef,\n\n  // Cell directives\n  MatHeaderCell,\n  MatCell,\n  MatFooterCell,\n\n  // Row directions\n  MatHeaderRow,\n  MatRow,\n  MatFooterRow,\n];\n\n@NgModule({\n  imports: [CdkTableModule, CommonModule, MatCommonModule],\n  exports: EXPORTED_DECLARATIONS,\n  declarations: EXPORTED_DECLARATIONS,\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {_isNumberValue} from '@angular/cdk/coercion';\nimport {DataSource} from '@angular/cdk/table';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  merge,\n  Observable,\n  of as observableOf,\n  Subscription\n} from 'rxjs';\nimport {MatPaginator, PageEvent} from '@angular/material/paginator';\nimport {MatSort, Sort} from '@angular/material/sort';\nimport {map} from 'rxjs/operators';\n\n/**\n * Corresponds to `Number.MAX_SAFE_INTEGER`. Moved out into a variable here due to\n * flaky browser support and the value not being defined in Closure's typings.\n */\nconst MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport class MatTableDataSource<T> extends DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private readonly _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private readonly _filter = new BehaviorSubject<string>('');\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription = Subscription.EMPTY;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() { return this._data.value; }\n  set data(data: T[]) { this._data.next(data); }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter(): string { return this._filter.value; }\n  set filter(filter: string) { this._filter.next(filter); }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort(): MatSort | null { return this._sort; }\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): MatPaginator | null { return this._paginator; }\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting through\n   * the default sortData function.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value: any = data[sortHeaderId];\n\n    if (_isNumberValue(value)) {\n      const numberValue = Number(value);\n\n      // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we\n      // leave them as strings. For more info: https://goo.gl/y5vbSg\n      return numberValue < MAX_SAFE_INTEGER ? numberValue : value;\n    }\n\n    return value;\n  }\n\n  /**\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n   * By default, the function retrieves the active sort and its direction and compares data\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n   * of data ordering.\n   * @param data The array of data that should be sorted.\n   * @param sort The connected MatSort that holds the current sort state.\n   */\n  sortData: ((data: T[], sort: MatSort) => T[]) = (data: T[], sort: MatSort): T[] => {\n    const active = sort.active;\n    const direction = sort.direction;\n    if (!active || direction == '') { return data; }\n\n    return data.sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n      // one value exists while the other doesn't. In this case, existing value should come first.\n      // This avoids inconsistent results when comparing values to undefined/null.\n      // If neither value exists, return 0 (equal).\n      let comparatorResult = 0;\n      if (valueA != null && valueB != null) {\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      } else if (valueA != null) {\n        comparatorResult = 1;\n      } else if (valueB != null) {\n        comparatorResult = -1;\n      }\n\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const accumulator = (currentTerm, key) => currentTerm + data[key];\n    const dataStr = Object.keys(data).reduce(accumulator, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // The events should emit whenever the component emits a change or initializes, or if no\n    // component is provided, a stream with just a null event should be provided.\n    // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n    // pipeline can progress to the next step. Note that the value from these streams are not used,\n    // they purely act as a signal to progress in the pipeline.\n    const sortChange: Observable<Sort|null> = this._sort ?\n        merge<Sort>(this._sort.sortChange, this._sort.initialized) :\n        observableOf(null);\n    const pageChange: Observable<PageEvent|null> = this._paginator ?\n        merge<PageEvent>(this._paginator.page, this._paginator.initialized) :\n        observableOf(null);\n\n    const dataStream = this._data;\n    // Watch for base data or filter changes to provide a filtered set of data.\n    const filteredData = combineLatest(dataStream, this._filter)\n      .pipe(map(([data]) => this._filterData(data)));\n    // Watch for filtered data or sort changes to provide an ordered set of data.\n    const orderedData = combineLatest(filteredData, sortChange)\n      .pipe(map(([data]) => this._orderData(data)));\n    // Watch for ordered data or page changes to provide a paged set of data.\n    const paginatedData = combineLatest(orderedData, pageChange)\n      .pipe(map(([data]) => this._pageData(data)));\n    // Watched for paged data changes and send the result to the table to render.\n    this._renderChangesSubscription.unsubscribe();\n    this._renderChangesSubscription = paginatedData.subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overridden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) { return data; }\n\n    return this.sortData(data.slice(), this.sort);\n  }\n\n  /**\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice().splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      if (!this.paginator) { return; }\n\n      this.paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (this.paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(this.paginator.length / this.paginator.pageSize) - 1 || 0;\n        this.paginator.pageIndex = Math.min(this.paginator.pageIndex, lastPageIndex);\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Inject, InjectionToken, NgZone} from '@angular/core';\n\n\n/**\n * Interface for a a MatInkBar positioner method, defining the positioning and width of the ink\n * bar in a set of tabs.\n */\n// tslint:disable-next-line class-name Using leading underscore to denote internal interface.\nexport interface _MatInkBarPositioner {\n  (element: HTMLElement): { left: string, width: string };\n}\n\n/** Injection token for the MatInkBar's Positioner. */\nexport const _MAT_INK_BAR_POSITIONER =\n  new InjectionToken<_MatInkBarPositioner>('MatInkBarPositioner', {\n    providedIn: 'root',\n    factory: _MAT_INK_BAR_POSITIONER_FACTORY\n  });\n\n/**\n * The default positioner function for the MatInkBar.\n * @docs-private\n */\nexport function _MAT_INK_BAR_POSITIONER_FACTORY(): _MatInkBarPositioner {\n  const method = (element: HTMLElement) => ({\n    left: element ? (element.offsetLeft || 0) + 'px' : '0',\n    width: element ? (element.offsetWidth || 0) + 'px' : '0',\n  });\n\n  return method;\n}\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(_MAT_INK_BAR_POSITIONER) private _inkBarPositioner: _MatInkBarPositioner) { }\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n  private _setStyles(element: HTMLElement) {\n    const positions = this._inkBarPositioner(element);\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\n\n    inkBar.style.left = positions.left;\n    inkBar.style.width = positions.width;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  HammerInput,\n  HasTabIndex,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {Subscription} from 'rxjs';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nexport class MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSliderMixinBase =\n  mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(click)': '_onClick($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert(): boolean { return this._invert; }\n  set invert(value: boolean) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundToDecimal = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value: boolean) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /** Value of the slider. */\n  @Input()\n  get value(): number | null {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      let value = coerceNumberProperty(v);\n\n      // While incrementing by a decimal we can end up with values like 33.300000000000004.\n      // Truncate it to ensure that it matches the label and to make it easier to work with.\n      if (this._roundToDecimal) {\n        value = parseFloat(value.toFixed(this._roundToDecimal));\n      }\n\n      this._value = value;\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /**\n   * Function that will be used to format the value before it is displayed\n   * in the thumb label. Can be used to format very large number in order\n   * for them to fit into the slider thumb.\n   */\n  @Input() displayWith: (value: number | null) => string | number;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() readonly change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() readonly input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /**\n   * Emits when the raw value of the slider changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<number | null> = new EventEmitter<number | null>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    if (this.displayWith) {\n      return this.displayWith(this.value);\n    }\n\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundToDecimal && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundToDecimal);\n    }\n\n    return this.value || 0;\n  }\n\n  /** set focus to the host element */\n  focus() {\n    this._focusHostElement();\n  }\n\n  /** blur the host element */\n  blur() {\n    this._blurHostElement();\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${1 - this.percent}, 1` : `${1 - this.percent}, 1, 1`;\n    const sign = this._invertMouseCoords ? '-' : '';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${this.percent}, 1` : `${this.percent}, 1, 1`;\n    const sign = this._invertMouseCoords ? '' : '-';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._direction == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._direction == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._direction == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundToDecimal: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper') private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  private get _invertMouseCoords() {\n    return (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private get _direction() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string,\n              // @breaking-change 7.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef.nativeElement, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onClick(event: MouseEvent) {\n    if (this.disabled) {\n      return;\n    }\n\n    let oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    // Emit a change and input event if the value changed.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value && !this.disabled) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled) { return; }\n\n    let oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._direction == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._direction == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n\n    if (this._invertMouseCoords) {\n      percent = 1 - percent;\n    }\n\n    // Since the steps may not divide cleanly into the max value, if the user\n    // slid to 0 or 100 percent, we jump to the min/max value. This approach\n    // is slightly more intuitive than using `Math.ceil` below, because it\n    // follows the user's pointer closer.\n    if (percent === 0) {\n      this.value = this.min;\n    } else if (percent === 1) {\n      this.value = this.max;\n    } else {\n      const exactValue = this._calculateValue(percent);\n\n      // This calculation finds the closest step by finding the closest\n      // whole number divisible by the step relative to the min.\n      const closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n\n      // The value needs to snap to the min and max.\n      this.value = this._clamp(closestValue, this.min, this.max);\n    }\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.valueChange.emit(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Blurs the native element. */\n  private _blurHostElement() {\n    this._elementRef.nativeElement.blur();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable, Subject} from 'rxjs';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n  /** Whether the snack bar was dismissed using the action button. */\n  dismissedByAction: boolean;\n}\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has been dismissed. */\n  private readonly _afterDismissed = new Subject<MatSnackBarDismiss>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private readonly _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  /** Whether the snack bar was dismissed using the action button. */\n  private _dismissedByAction = false;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  dismissWithAction(): void {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * @breaking-change 7.0.0\n   */\n  closeWithAction(): void {\n    this.dismissWithAction();\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<MatSnackBarDismiss> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /**\n   * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n   * component or template, the announcement message will default to the specified message.\n   */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material snack bar. */\nexport const matSnackBarAnimations: {\n  readonly contentFade: AnimationTriggerMetadata;\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  contentFade: trigger('contentFade', [\n    transition(':enter', [\n      style({opacity: '0'}),\n      animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.STANDARD_CURVE}`)\n    ])\n  ]),\n\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('visible-top, visible-bottom', style({transform: 'translateY(0%)'})),\n    transition('visible-top => hidden-top, visible-bottom => hidden-bottom',\n      animate(`${AnimationDurations.EXITING} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible-top, void => visible-bottom',\n      animate(`${AnimationDurations.ENTERING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\nimport {matSnackBarAnimations} from './snack-bar-animations';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matSnackBarAnimations.contentFade],\n  host: {\n    '[@contentFade]': '',\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: { message: string, action: string };\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.dismissWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  CdkPortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  NgZone,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\nimport {matSnackBarAnimations} from './snack-bar-animations';\nimport {MatSnackBarConfig} from './snack-bar-config';\n\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    'role': 'alert',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  readonly _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  readonly _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    /** The snack bar configuration. */\n    public snackBarConfig: MatSnackBarConfig) {\n\n    super();\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState.startsWith('hidden')) {\n      this._completeExit();\n    }\n\n    if (toState.startsWith('visible')) {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = `visible-${this.snackBarConfig.verticalPosition}`;\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    this._animationState = `hidden-${this.snackBarConfig.verticalPosition}`;\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n  private _applySnackBarClasses() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClasses = this.snackBarConfig.panelClass;\n\n    if (panelClasses) {\n      if (Array.isArray(panelClasses)) {\n        // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n        panelClasses.forEach(cssClass => element.classList.add(cssClass));\n      } else {\n        element.classList.add(panelClasses);\n      }\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n  }\n\n  /** Asserts that no content is already attached to the container. */\n  private _assertNotAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatButtonModule,\n    MatCommonModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  EmbeddedViewRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarModule} from './snack-bar-module';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/** Injection token that can be used to specify default snack bar. */\nexport const MAT_SNACK_BAR_DEFAULT_OPTIONS =\n    new InjectionToken<MatSnackBarConfig>('mat-snack-bar-default-options', {\n      providedIn: 'root',\n      factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY(): MatSnackBarConfig {\n  return new MatSnackBarConfig();\n}\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable({providedIn: MatSnackBarModule})\nexport class MatSnackBar {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar,\n      @Inject(MAT_SNACK_BAR_DEFAULT_OPTIONS) private _defaultConfig: MatSnackBarConfig) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig):\n    MatSnackBarRef<T> {\n    return this._attach(component, config) as MatSnackBarRef<T>;\n  }\n\n  /**\n   * Creates and dispatches a snack bar with a custom template for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param template Template to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromTemplate(template: TemplateRef<any>, config?: MatSnackBarConfig):\n    MatSnackBarRef<EmbeddedViewRef<any>> {\n    return this._attach(template, config);\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = {...this._defaultConfig, ...config};\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n\n    if (!_config.announcementMessage) {\n      _config.announcementMessage = message;\n    }\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatSnackBarConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatSnackBarContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component or a template as the content of the snack bar container.\n   */\n  private _attach<T>(content: ComponentType<T> | TemplateRef<T>, userConfig?: MatSnackBarConfig):\n    MatSnackBarRef<T | EmbeddedViewRef<any>> {\n\n    const config = {...new MatSnackBarConfig(), ...this._defaultConfig, ...userConfig};\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T | EmbeddedViewRef<any>>(container, overlayRef);\n\n    if (content instanceof TemplateRef) {\n      const portal = new TemplatePortal(content, null!, {\n        $implicit: config.data,\n        snackBarRef\n      } as any);\n\n      snackBarRef.instance = container.attachTemplatePortal(portal);\n    } else {\n      const injector = this._createInjector(config, snackBarRef);\n      const portal = new ComponentPortal(content, undefined, injector);\n      const contentRef = container.attachComponentPortal<T>(portal);\n\n      // We can't pass this via the injector, because the injector is created earlier.\n      snackBarRef.instance = contentRef.instance;\n    }\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\n      takeUntil(overlayRef.detachments().pipe(take(1)))\n    ).subscribe(state => {\n      if (state.matches) {\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n      } else {\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n      }\n    });\n\n    this._animateSnackBar(snackBarRef, config);\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /** Animates the old snack bar out and the new one in. */\n  private _animateSnackBar(snackBarRef: MatSnackBarRef<any>, config: MatSnackBarConfig) {\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (config.duration && config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration!));\n    }\n\n    if (config.announcementMessage) {\n      this._live.announce(config.announcementMessage, config.politeness);\n    }\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    return new PortalInjector(userInjector || this._injector, new WeakMap<any, any>([\n      [MatSnackBarRef, snackBarRef],\n      [MAT_SNACK_BAR_DATA, config.data]\n    ]));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CanDisable, HasInitialized, mixinDisabled, mixinInitialized} from '@angular/material/core';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError,\n  getSortInvalidDirectionError\n} from './sort-errors';\nimport {Subject} from 'rxjs';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nexport class MatSortBase {}\nexport const _MatSortMixinBase = mixinInitialized(mixinDisabled(MatSortBase));\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase\n    implements CanDisable, HasInitialized, OnChanges, OnDestroy, OnInit {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  get direction(): SortDirection { return this._direction; }\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable): void {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable): void {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable): void {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.emit({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnInit() {\n    this._markInitialized();\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata, query, animateChild,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/** Animations used by MatSort. */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly arrowOpacity: AnimationTriggerMetadata;\n  readonly arrowPosition: AnimationTriggerMetadata;\n  readonly allowChildren: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('active-asc, asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('active-desc, desc', style({transform: 'translateY(10px)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('active-asc, asc', style({transform: 'rotate(-45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('active-asc, asc', style({transform: 'rotate(45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(-45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that controls the arrow opacity. */\n  arrowOpacity: trigger('arrowOpacity', [\n    state('desc-to-active, asc-to-active, active', style({opacity: 1})),\n    state('desc-to-hint, asc-to-hint, hint', style({opacity: .54})),\n    state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc, void',\n        style({opacity: 0})),\n    // Transition between all states except for immediate transitions\n    transition('* => asc, * => desc, * => active, * => hint, * => void', animate('0ms')),\n    transition('* <=> *', animate(SORT_ANIMATION_TRANSITION)),\n  ]),\n\n  /**\n   * Animation for the translation of the arrow as a whole. States are separated into two\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n   * peek, and active. The other states define a specific animation (source-to-destination)\n   * and are determined as a function of their prev user-perceived state and what the next state\n   * should be.\n   */\n  arrowPosition: trigger('arrowPosition', [\n    // Hidden Above => Hint Center\n    transition('* => desc-to-hint, * => desc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(-25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Below\n    transition('* => hint-to-desc, * => active-to-desc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(25%)'})\n        ]))),\n    // Hidden Below => Hint Center\n    transition('* => asc-to-hint, * => asc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Above\n    transition('* => hint-to-asc, * => active-to-asc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(-25%)'})\n        ]))),\n    state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active',\n        style({transform: 'translateY(0)'})),\n    state('hint-to-desc, active-to-desc, desc',\n        style({transform: 'translateY(-25%)'})),\n    state('hint-to-asc, active-to-asc, asc',\n        style({transform: 'translateY(25%)'})),\n  ]),\n\n  /** Necessary trigger that calls animate on children animations. */\n  allowChildren: trigger('allowChildren', [\n    transition('* <=> *', [\n      query('@*', animateChild(), {optional: true})\n    ])\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusMonitor, FocusOrigin, FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {CdkScrollable} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {fromEvent, merge, Observable, Subject} from 'rxjs';\nimport {debounceTime, filter, map, startWith, take, takeUntil} from 'rxjs/operators';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/** Throws an exception when two MatDrawer are matching the same position. */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/** Result of the toggle promise that indicates the state of the drawer. */\nexport type MatDrawerToggleResult = 'open' | 'close';\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n      providedIn: 'root',\n      factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY(): boolean {\n  return false;\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContent implements AfterContentInit {\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) public _container: MatDrawerContainer) {\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMarginChanges.subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value: 'start' | 'end') {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value: 'over' | 'push' | 'side') {\n    this._mode = value;\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** Whether the drawer should focus the first focusable element automatically when opened. */\n  @Input()\n  get autoFocus(): boolean { return this._autoFocus; }\n  set autoFocus(value: boolean) { this._autoFocus = coerceBooleanProperty(value); }\n  private _autoFocus: boolean = true;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new EventEmitter<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() readonly openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer's position changes. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  readonly _modeChanged = new Subject();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              private _ngZone: NgZone,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n\n    /**\n     * Listen to `keydown` events outside the zone so that change detection is not run every\n     * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n     * and we don't have close disabled.\n     */\n    this._ngZone.runOutsideAngular(() => {\n        fromEvent(this._elementRef.nativeElement, 'keydown').pipe(\n            filter((event: KeyboardEvent) => event.keyCode === ESCAPE && !this.disableClose)\n        ).subscribe((event) => this._ngZone.run(() => {\n            this.close();\n            event.stopPropagation();\n        }));\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { this.toggle(coerceBooleanProperty(value)); }\n  private _opened: boolean = false;\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<MatDrawerToggleResult> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<MatDrawerToggleResult> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<MatDrawerToggleResult> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n\n    return new Promise<MatDrawerToggleResult>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n    });\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStarted.emit(event);\n  }\n\n  _onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n        (toState === 'void' && fromState.indexOf('open') === 0)) {\n      this.openedChange.emit(this._opened);\n    }\n  }\n\n  get _width(): number {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n}\n\n\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContainer implements AfterContentInit, DoCheck, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent) _content: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /**\n   * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n   * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n   * mode as well.\n   */\n  @Input()\n  get hasBackdrop() {\n    if (this._backdropOverride == null) {\n      return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n    }\n\n    return this._backdropOverride;\n  }\n  set hasBackdrop(value: any) {\n    this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n  }\n  _backdropOverride: boolean | null;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() readonly backdropClick: EventEmitter<void> = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private readonly _doCheckSubject = new Subject<void>();\n\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _contentMargins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  readonly _contentMarginChanges = new Subject<{left: number|null, right: number|null}>();\n\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n  @ViewChild(CdkScrollable) scrollable: CdkScrollable;\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef<HTMLElement>,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this._updateContentMargins();\n      });\n    }\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this._updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this._updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      takeUntil(this._drawers.changes),\n      filter((event: AnimationEvent) => event.fromState !== event.toState)\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant' && this._animationMode !== 'NoopAnimations') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this._updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this._updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add('mat-drawer-opened');\n    } else {\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (this._dir && this._dir.value === 'rtl') {\n      this._left = this._end;\n      this._right = this._start;\n    } else {\n      this._left = this._start;\n      this._right = this._end;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer))\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||\n           (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end));\n  }\n\n  private _canHaveBackdrop(drawer: MatDrawer): boolean {\n    return drawer.mode !== 'side' || !!this._backdropOverride;\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): drawer is MatDrawer {\n    return drawer != null && drawer.opened;\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  private _updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        let width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        let width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    // If either `right` or `left` is zero, don't set a style to the element. This\n    // allows users to specify a custom size via CSS class in SSR scenarios where the\n    // measured widths will always be zero. Note that we reset to `null` here, rather\n    // than below, in order to ensure that the types in the `if` below are consistent.\n    left = left || null!;\n    right = right || null!;\n\n    if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n      this._contentMargins = {left, right};\n\n      // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n      // to do it only when something changed, otherwise we can end up hitting the zone too often.\n      this._ngZone.run(() => this._contentMarginChanges.next(this._contentMargins));\n    }\n\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  forwardRef,\n  Inject,\n  Input,\n  ViewEncapsulation,\n  QueryList,\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer) {\n    super(changeDetectorRef, container);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers: QueryList<MatSidenav>;\n  @ContentChild(MatSidenavContent) _content: MatSidenavContent;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {ScrollDispatchModule} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    ScrollDispatchModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/** Default `mat-slide-toggle` options that can be overridden. */\nexport interface MatSlideToggleDefaultOptions {\n  /** Whether toggle action triggers value changes in slide toggle. */\n  disableToggleValue?: boolean;\n  /** Whether drag action triggers value changes in slide toggle. */\n  disableDragValue?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-slide-toggle`. */\nexport const MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS =\n  new InjectionToken<MatSlideToggleDefaultOptions>('mat-slide-toggle-default-options', {\n    providedIn: 'root',\n    factory: () => ({disableToggleValue: false, disableDragValue: false})\n  });\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HammerInput,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {\n  MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,\n  MatSlideToggleDefaultOptions\n} from './slide-toggle-config';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nexport class MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSlideToggleMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n    ControlValueAccessor, CanDisable, CanColor, HasTabIndex, CanDisableRipple {\n\n  private onChange = (_: any) => {};\n  private onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Reference to the focus state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Whether the thumb is currently being dragged. */\n  private _dragging = false;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  private _dragPercentage: number;\n\n  /** Reference to the thumb HTMLElement. */\n  @ViewChild('thumbContainer') _thumbEl: ElementRef;\n\n  /** Reference to the thumb bar HTMLElement. */\n  @ViewChild('toggleBar') _thumbBarEl: ElementRef;\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the slide-toggle element is checked or not */\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\n      new EventEmitter<MatSlideToggleChange>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle input is toggled.\n   * This event always fire when user toggle the slide toggle, but does not mean the slide toggle's\n   * value is changed. The event does not fire when user drag to change the slide toggle value.\n   */\n  @Output() readonly toggleChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle is dragged.\n   * This event always fire when user drag the slide toggle to make a change that greater than 50%.\n   * It does not mean the slide toggle's value is changed. The event does not fire when user toggle\n   * the slide toggle to change the slide toggle's value.\n   */\n  @Output() readonly dragChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  /** Reference to the ripple directive on the thumb container. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated The `_platform` parameter to be removed.\n               * @breaking-change 7.0.0\n               */\n              _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string,\n              private _ngZone: NgZone,\n              @Inject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS)\n                  public defaults: MatSlideToggleDefaultOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              @Optional() private _dir?: Directionality) {\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    if (!this._dragging) {\n      this.toggleChange.emit();\n    }\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back. Or when the slide toggle's config\n    // disabled toggle change event by setting `disableToggleValue: true`, the slide toggle's value\n    // does not change, and the checked state of the underlying input needs to be changed back.\n    if (this._dragging || this.defaults.disableToggleValue) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n    this.onChange(this.checked);\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      // For keyboard focus show a persistent ripple as focus indicator.\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n      // Angular does not expect events to be raised during change detection, so any state change\n      // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n      // See https://github.com/angular/angular/issues/17793. To work around this, we defer telling\n      // the form control it has been touched until the next tick.\n      Promise.resolve().then(() => this.onTouched());\n\n      // Fade out and clear the focus ripple if one is currently present.\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this.onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n  _onDragStart() {\n    if (!this.disabled && !this._dragging) {\n      const thumbEl = this._thumbEl.nativeElement;\n      this._thumbBarWidth = this._thumbBarEl.nativeElement.clientWidth - thumbEl.clientWidth;\n      thumbEl.classList.add('mat-dragging');\n\n      this._previousChecked = this.checked;\n      this._dragging = true;\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._dragging) {\n      const direction = this._dir && this._dir.value === 'rtl' ? -1 : 1;\n      this._dragPercentage = this._getDragPercentage(event.deltaX * direction);\n      // Calculate the moved distance based on the thumb bar width.\n      const dragX = (this._dragPercentage / 100) * this._thumbBarWidth * direction;\n      this._thumbEl.nativeElement.style.transform = `translate3d(${dragX}px, 0, 0)`;\n    }\n  }\n\n  _onDragEnd() {\n    if (this._dragging) {\n      const newCheckedValue = this._dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.dragChange.emit();\n        if (!this.defaults.disableDragValue) {\n          this.checked = newCheckedValue;\n          this._emitChangeEvent();\n        }\n      }\n\n      // The drag should be stopped outside of the current event handler, otherwise the\n      // click event will be fired before it and will revert the drag change.\n      this._ngZone.runOutsideAngular(() => setTimeout(() => {\n        if (this._dragging) {\n          this._dragging = false;\n          this._thumbEl.nativeElement.classList.remove('mat-dragging');\n\n          // Reset the transform because the component will take care\n          // of the thumb position after drag.\n          this._thumbEl.nativeElement.style.transform = '';\n        }\n      }));\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the slide-toggle changes.\n    // Since the slide-toggle uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlideToggle} from './slide-toggle';\n\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatSlideToggle, MatCommonModule],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Inject,\n  Input,\n  Optional,\n  ViewEncapsulation,\n  InjectionToken,\n  inject,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {DOCUMENT} from '@angular/common';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\n\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nexport class MatProgressBarBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\nexport const _MatProgressBarMixinBase = mixinColor(MatProgressBarBase, 'primary');\n\n/**\n * Injection token used to provide the current location to `MatProgressBar`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport const MAT_PROGRESS_BAR_LOCATION = new InjectionToken<MatProgressBarLocation>(\n  'mat-progress-bar-location',\n  {providedIn: 'root', factory: MAT_PROGRESS_BAR_LOCATION_FACTORY}\n);\n\n/**\n * Stubbed out location for `MatProgressBar`.\n * @docs-private\n */\nexport interface MatProgressBarLocation {\n  pathname: string;\n}\n\n/** @docs-private */\nexport function MAT_PROGRESS_BAR_LOCATION_FACTORY(): MatProgressBarLocation {\n  const _document = inject(DOCUMENT);\n  const pathname = (_document && _document.location && _document.location.pathname) || '';\n  return {pathname};\n}\n\n\n/** Counter used to generate unique IDs for progress bars. */\nlet progressbarId = 0;\n\n/**\n * `<mat-progress-bar>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n    'class': 'mat-progress-bar',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor {\n  constructor(public _elementRef: ElementRef,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              /**\n               * @deprecated `location` parameter to be made required.\n               * @breaking-change 8.0.0\n               */\n              @Optional() @Inject(MAT_PROGRESS_BAR_LOCATION) location?: MatProgressBarLocation) {\n    super(_elementRef);\n\n    // We need to prefix the SVG reference with the current path, otherwise they won't work\n    // in Safari if the page has a `<base>` tag. Note that we need quotes inside the `url()`,\n    // because named route URLs can contain parentheses (see #12338). Also we don't use\n    // `Location` from `@angular/common` since we can't tell the difference between whether\n    // the consumer is using the hash location strategy or not, because `Location` normalizes\n    // both `/#/foo/bar` and `/foo/bar` to the same thing.\n    const path = location && location.pathname ? location.pathname.split('#')[0] : '';\n    this._rectangleFillValue = `url('${path}#${this.progressbarId}')`;\n  }\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) { this._value = clamp(v || 0); }\n  private _value: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue(): number { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n  private _bufferValue: number = 0;\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** ID of the progress bar. */\n  progressbarId = `mat-progress-bar-${progressbarId++}`;\n\n  /** Attribute to be used for the `fill` attribute on the internal `rect` element. */\n  _rectangleFillValue: string;\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    const scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode === 'buffer') {\n      const scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  Inject,\n  Input,\n  ElementRef,\n  ViewEncapsulation,\n  Optional,\n  InjectionToken,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nexport class MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatProgressSpinnerMixinBase = mixinColor(MatProgressSpinnerBase, 'primary');\n\n/** Default `mat-progress-spinner` options that can be overridden. */\nexport interface MatProgressSpinnerDefaultOptions {\n  /** Diameter of the spinner. */\n  diameter?: number;\n  /** Width of the spinner's stroke. */\n  strokeWidth?: number;\n  /**\n   * Whether the animations should be force to be enabled, ignoring if the current environment is\n   * using NoopAnimationsModule.\n   */\n  _forceAnimations?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-progress-spinner`. */\nexport const MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS =\n    new InjectionToken<MatProgressSpinnerDefaultOptions>('mat-progress-spinner-default-options', {\n      providedIn: 'root',\n      factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY(): MatProgressSpinnerDefaultOptions {\n  return {diameter: BASE_SIZE};\n}\n\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/material2/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * `<mat-progress-spinner>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor {\n\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /** Tracks diameters of existing instances to de-dupe generated styles (default d = 100) */\n  private static diameters = new Set<number>([BASE_SIZE]);\n\n  /**\n   * Used for storing all of the generated keyframe animations.\n   * @dynamic\n   */\n  private static styleTag: HTMLStyleElement|null = null;\n\n  /** Whether the _mat-animation-noopable class should be applied, disabling animations.  */\n  _noopAnimations: boolean = this.animationMode === 'NoopAnimations' && (\n      !!this.defaults && !this.defaults._forceAnimations);\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number { return this._diameter; }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    if (!this._fallbackAnimation && !MatProgressSpinner.diameters.has(this._diameter)) {\n      this._attachStyleNode();\n    }\n  }\n  private _diameter = BASE_SIZE;\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @breaking-change 7.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  private defaults?: MatProgressSpinnerDefaultOptions) {\n\n    super(_elementRef);\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n\n    if (defaults) {\n      if (defaults.diameter) {\n        this.diameter = defaults.diameter;\n      }\n\n      if (defaults.strokeWidth) {\n        this.strokeWidth = defaults.strokeWidth;\n      }\n    }\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    _elementRef.nativeElement.classList.add(animationClass);\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this.diameter * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    let styleTag = MatProgressSpinner.styleTag;\n\n    if (!styleTag) {\n      styleTag = this._document.createElement('style');\n      this._document.head.appendChild(styleTag);\n      MatProgressSpinner.styleTag = styleTag;\n    }\n\n    if (styleTag && styleTag.sheet) {\n      (styleTag.sheet as CSSStyleSheet).insertRule(this._getAnimationText(), 0);\n    }\n\n    MatProgressSpinner.diameters.add(this.diameter);\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n}\n\n\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any,\n              // @breaking-changes 7.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  defaults?: MatProgressSpinnerDefaultOptions) {\n    super(elementRef, platform, document, animationMode, defaults);\n    this.mode = 'indeterminate';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  constructor(\n    /** The MatRadioButton that emits the change event. */\n    public source: MatRadioButton,\n    /** The value of the MatRadioButton. */\n    public value: any) {}\n}\n\n\n// Boilerplate for applying mixins to MatRadioGroup.\n/** @docs-private */\nexport class MatRadioGroupBase { }\nexport const _MatRadioGroupMixinBase = mixinDisabled(MatRadioGroupBase);\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n  inputs: ['disabled'],\n})\nexport class MatRadioGroup extends _MatRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n\n  /** Selected value for the radio group. */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n  set labelPosition(v) {\n    this._labelPosition = v === 'before' ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /**\n   * Value for the radio-group. Should equal the value of the selected radio button if there is\n   * a corresponding radio button with a matching value. If there is not such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value !== newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /**\n   * The currently selected radio button. If set to a new radio button, the radio group value\n   * will be updated to match the new selected button.\n   */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n    if (this._radios && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value === radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new MatRadioChange(this._selected!, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nexport class MatRadioButtonBase {\n  // Since the disabled property is manually defined for the MatRadioButton and isn't set up in\n  // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n  // defined to properly work.\n  disabled: boolean;\n\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nexport const _MatRadioButtonMixinBase =\n    mixinColor(mixinDisableRipple(mixinTabIndex(MatRadioButtonBase)), 'accent');\n\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['color', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, CanDisableRipple, HasTabIndex {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n    if (this._checked !== newCheckedState) {\n      this._checked = newCheckedState;\n      if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value !== value) {\n      this._value = value;\n      if (this.radioGroup !== null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value === value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    const newDisabledState = coerceBooleanProperty(value);\n    if (this._disabled !== newDisabledState) {\n      this._disabled = newDisabledState;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio. */\n  private _value: any = null;\n\n  /** The child ripple instance. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  /** Reference to the current focus ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Unregister function for _radioDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id !== this.id && name === this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    this.change.emit(new MatRadioChange(this, this._value));\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      if (this.radioGroup) {\n        this.radioGroup._touch();\n      }\n\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material drawers. */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    // We remove the `transform` here completely, rather than setting it to zero, because:\n    // 1. Having a transform can cause elements with ripples or an animated\n    //    transform to shift around in Chrome with an RTL layout (see #10023).\n    // 2. 3d transforms causes text to appear blurry on IE and Edge.\n    state('open, open-instant', style({\n      'transform': 'none',\n      'visibility': 'visible',\n    })),\n    state('void', style({\n      // Avoids the shadow showing up when closed in SSR.\n      'box-shadow': 'none',\n      'visibility': 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelect, MatSelectTrigger} from './select';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by MatTooltip. */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('150ms cubic-bezier(0.0, 0.0, 0.2, 1)')),\n    transition('* => hidden', animate('150ms cubic-bezier(0.4, 0.0, 1, 1)')),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatTooltip,\n  TooltipComponent,\n  MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './tooltip';\n\n@NgModule({\n  imports: [\n    A11yModule,\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable({providedIn: 'root'})\nexport class MatPaginatorIntl {\n  /**\n   * Stream to emit from when labels are changed. Use this to notify components when the labels have\n   * changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel: string = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel: string = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel: string = 'Previous page';\n\n  /** A label for the button that moves to the first page. */\n  firstPageLabel: string = 'First page';\n\n  /** A label for the button that moves to the last page. */\n  lastPageLabel: string = 'Last page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatPaginatorIntl} from './paginator-intl';\nimport {HasInitialized, mixinInitialized} from '@angular/material/core';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /**\n   * Index of the page that was selected previously.\n   * @breaking-change 7.0.0 To be made into a required property.\n   */\n  previousPageIndex?: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n// Boilerplate for applying mixins to MatPaginator.\n/** @docs-private */\nexport class MatPaginatorBase {}\nexport const _MatPaginatorBase = mixinInitialized(MatPaginatorBase);\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatPaginator extends _MatPaginatorBase implements OnInit, OnDestroy, HasInitialized {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(value: number) {\n    this._pageIndex = Math.max(coerceNumberProperty(value), 0);\n    this._changeDetectorRef.markForCheck();\n  }\n  _pageIndex: number = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(value: number) {\n    this._length = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  _length: number = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(value: number) {\n    this._pageSize = Math.max(coerceNumberProperty(value), 0);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(value: number[]) {\n    this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Whether to hide the page size selection UI from the user. */\n  @Input()\n  get hidePageSize(): boolean { return this._hidePageSize; }\n  set hidePageSize(value: boolean) {\n    this._hidePageSize = coerceBooleanProperty(value);\n  }\n  private _hidePageSize = false;\n\n\n  /** Whether to show the first/last buttons UI to the user. */\n  @Input()\n  get showFirstLastButtons(): boolean { return this._showFirstLastButtons; }\n  set showFirstLastButtons(value: boolean) {\n    this._showFirstLastButtons = coerceBooleanProperty(value);\n  }\n  private _showFirstLastButtons = false;\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() readonly page: EventEmitter<PageEvent> = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n    this._markInitialized();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage(): void {\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex++;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage(): void {\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex--;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the first page if not already there. */\n  firstPage(): void {\n    // hasPreviousPage being false implies at the start\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = 0;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the last page if not already there. */\n  lastPage(): void {\n    // hasNextPage being false implies at the end\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = this.getNumberOfPages();\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage(): boolean {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage(): boolean {\n    const numberOfPages = this.getNumberOfPages();\n    return this.pageIndex < numberOfPages && this.pageSize != 0;\n  }\n\n  /** Calculate the number of pages */\n  getNumberOfPages(): number {\n    return Math.ceil(this.length / this.pageSize) - 1;\n  }\n\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    const previousPageIndex = this.pageIndex;\n\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n    this.pageSize = pageSize;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) === -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent(previousPageIndex: number) {\n    this.page.emit({\n      previousPageIndex,\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  TemplateRef,\n  ComponentFactoryResolver,\n  ApplicationRef,\n  Injector,\n  ViewContainerRef,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {TemplatePortal, DomPortalOutlet} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {Subject} from 'rxjs';\n\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\n@Directive({\n  selector: 'ng-template[matMenuContent]'\n})\nexport class MatMenuContent implements OnDestroy {\n  private _portal: TemplatePortal<any>;\n  private _outlet: DomPortalOutlet;\n\n  /** Emits when the menu content has been attached. */\n  _attached = new Subject<void>();\n\n  constructor(\n    private _template: TemplateRef<any>,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n    private _injector: Injector,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) private _document: any) {}\n\n  /**\n   * Attaches the content with a particular context.\n   * @docs-private\n   */\n  attach(context: any = {}) {\n    if (!this._portal) {\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n    }\n\n    this.detach();\n\n    if (!this._outlet) {\n      this._outlet = new DomPortalOutlet(this._document.createElement('div'),\n          this._componentFactoryResolver, this._appRef, this._injector);\n    }\n\n    const element: HTMLElement = this._template.elementRef.nativeElement;\n\n    // Because we support opening the same menu from different triggers (which in turn have their\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n    // risk it staying attached to a pane that's no longer in the DOM.\n    element.parentNode!.insertBefore(this._outlet.outletElement, element);\n    this._portal.attach(this._outlet, context);\n    this._attached.next();\n  }\n\n  /**\n   * Detaches the content.\n   * @docs-private\n   */\n  detach() {\n    if (this._portal.isAttached) {\n      this._portal.detach();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._outlet) {\n      this._outlet.dispose();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  query,\n  group,\n  sequence,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: AnimationTriggerMetadata;\n  readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [\n    state('void', style({\n      opacity: 0,\n      // This starts off from 0.01, instead of 0, because there's an issue in the Angular animations\n      // as of 4.2, which causes the animation to be skipped if it starts from 0.\n      transform: 'scale(0.01, 0.01)'\n    })),\n    transition('void => enter', sequence([\n      query('.mat-menu-content', style({opacity: 0})),\n      animate('100ms linear', style({opacity: 1, transform: 'scale(1, 0.5)'})),\n      group([\n        query('.mat-menu-content', animate('400ms cubic-bezier(0.55, 0, 0.55, 0.2)',\n          style({opacity: 1})\n        )),\n        animate('300ms cubic-bezier(0.25, 0.8, 0.25, 1)', style({transform: 'scale(1, 1)'})),\n      ])\n    ])),\n    transition('* => void', animate('150ms 50ms linear', style({opacity: 0})))\n  ]),\n\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n    // TODO(crisbeto): this is inside the `transformMenu`\n    // now. Remove next time we do breaking changes.\n    state('showing', style({opacity: 1})),\n    transition('void => *', [\n      style({opacity: 0}),\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const transformMenu = matMenuAnimations.transformMenu;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EventEmitter, TemplateRef, InjectionToken} from '@angular/core';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {Direction} from '@angular/cdk/bidi';\nimport {FocusOrigin} from '@angular/cdk/a11y';\nimport {MatMenuContent} from './menu-content';\n\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * @docs-private\n */\nexport const MAT_MENU_PANEL = new InjectionToken<MatMenuPanel>('MAT_MENU_PANEL');\n\n/**\n * Interface for a custom menu panel that can be used with `matMenuTriggerFor`.\n * @docs-private\n */\nexport interface MatMenuPanel<T = any> {\n  xPosition: MenuPositionX;\n  yPosition: MenuPositionY;\n  overlapTrigger: boolean;\n  templateRef: TemplateRef<any>;\n  close: EventEmitter<void | 'click' | 'keydown' | 'tab'>;\n  parentMenu?: MatMenuPanel | undefined;\n  direction?: Direction;\n  focusFirstItem: (origin?: FocusOrigin) => void;\n  resetActiveItem: () => void;\n  setPositionClasses?: (x: MenuPositionX, y: MenuPositionY) => void;\n  setElevation?(depth: number): void;\n  lazyContent?: MatMenuContent;\n  backdropClass?: string;\n  hasBackdrop?: boolean;\n  addItem?: (item: T) => void;\n  removeItem?: (item: T) => void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nexport class MatMenuItemBase {}\nexport const _MatMenuItemMixinBase = mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    'role': 'menuitem',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n    '(click)': '_checkDisabled($event)',\n    '(mouseenter)': '_handleMouseEnter()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n\n  private _document: Document;\n\n  /** Stream that emits when the menu item is hovered. */\n  readonly _hovered: Subject<MatMenuItem> = new Subject<MatMenuItem>();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) document?: any,\n    private _focusMonitor?: FocusMonitor,\n    @Inject(MAT_MENU_PANEL) @Optional() private _parentMenu?: MatMenuPanel<MatMenuItem>) {\n\n    // @breaking-change 7.0.0 make `_focusMonitor` and `document` required params.\n    super();\n\n    if (_focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      _focusMonitor.monitor(this._getHostElement(), false);\n    }\n\n    if (_parentMenu && _parentMenu.addItem) {\n      _parentMenu.addItem(this);\n    }\n\n    this._document = document;\n  }\n\n  /** Focuses the menu item. */\n  focus(origin: FocusOrigin = 'program'): void {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin);\n    } else {\n      this._getHostElement().focus();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._getHostElement());\n    }\n\n    if (this._parentMenu && this._parentMenu.removeItem) {\n      this._parentMenu.removeItem(this);\n    }\n\n    this._hovered.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  _handleMouseEnter() {\n    this._hovered.next(this);\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === textNodeType) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager, FocusOrigin} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, LEFT_ARROW, RIGHT_ARROW, DOWN_ARROW, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Output,\n  TemplateRef,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  OnInit,\n} from '@angular/core';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, switchMap, take} from 'rxjs/operators';\nimport {matMenuAnimations} from './menu-animations';\nimport {MatMenuContent} from './menu-content';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {AnimationEvent} from '@angular/animations';\n\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n\n  /** Class to be applied to the menu's backdrop. */\n  backdropClass: string;\n\n  /** Whether the menu has a backdrop. */\n  hasBackdrop?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options', {\n      providedIn: 'root',\n      factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_MENU_DEFAULT_OPTIONS_FACTORY(): MatMenuDefaultOptions {\n  return {\n    overlapTrigger: true,\n    xPosition: 'after',\n    yPosition: 'below',\n    backdropClass: 'cdk-overlay-transparent-backdrop',\n  };\n}\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 2;\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matMenu',\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  providers: [\n    {provide: MAT_MENU_PANEL, useExisting: MatMenu}\n  ]\n})\nexport class MatMenu implements AfterContentInit, MatMenuPanel<MatMenuItem>, OnInit, OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** Menu items inside the current menu. */\n  private _items: MatMenuItem[] = [];\n\n  /** Emits whenever the amount of menu items changes. */\n  private _itemChanges = new Subject<MatMenuItem[]>();\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter' = 'void';\n\n  /** Emits whenever an animation on the menu completes. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  /** Whether the menu is animating. */\n  _isAnimating: boolean;\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Class to be added to the backdrop element. */\n  @Input() backdropClass: string = this._defaultOptions.backdropClass;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition(): MenuPositionX { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition(): MenuPositionY { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) templateRef: TemplateRef<any>;\n\n  /**\n   * List of the items inside of a menu.\n   * @deprecated\n   * @breaking-change 7.0.0\n   */\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\n\n  /**\n   * Menu content that will be rendered lazily.\n   * @docs-private\n   */\n  @ContentChild(MatMenuContent) lazyContent: MatMenuContent;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  get overlapTrigger(): boolean { return this._overlapTrigger; }\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /** Whether the menu has a backdrop. */\n  @Input()\n  get hasBackdrop(): boolean | undefined { return this._hasBackdrop; }\n  set hasBackdrop(value: boolean | undefined) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n  private _hasBackdrop: boolean | undefined = this._defaultOptions.hasBackdrop;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    if (classes && classes.length) {\n      this._classList = classes.split(' ').reduce((obj: any, className: string) => {\n        obj[className] = true;\n        return obj;\n      }, {});\n\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   * @breaking-change 7.0.0\n   */\n  @Input()\n  get classList(): string { return this.panelClass; }\n  set classList(classes: string) { this.panelClass = classes; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() readonly closed: EventEmitter<void | 'click' | 'keydown' | 'tab'> =\n      new EventEmitter<void | 'click' | 'keydown' | 'tab'>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   * @breaking-change 7.0.0\n   */\n  @Output() close = this.closed;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngOnInit() {\n    this.setPositionClasses();\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatMenuItem>(this._items).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n  }\n\n  ngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    return this._itemChanges.pipe(\n      startWith(this._items),\n      switchMap(items => merge(...items.map(item => item._hovered)))\n    );\n  }\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n\n    switch (keyCode) {\n      case ESCAPE:\n        this.closed.emit('keydown');\n        event.stopPropagation();\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      default:\n        if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n          this._keyManager.setFocusOrigin('keyboard');\n        }\n\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n    if (this.lazyContent) {\n      this._ngZone.onStable.asObservable()\n        .pipe(take(1))\n        .subscribe(() => this._keyManager.setFocusOrigin(origin).setFirstItemActive());\n    } else {\n      this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n    }\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /**\n   * Registers a menu item with the menu.\n   * @docs-private\n   */\n  addItem(item: MatMenuItem) {\n    // We register the items through this method, rather than picking them up through\n    // `ContentChildren`, because we need the items to be picked up by their closest\n    // `mat-menu` ancestor. If we used `@ContentChildren(MatMenuItem, {descendants: true})`,\n    // all descendant items will bleed into the top-level menu in the case where the consumer\n    // has `mat-menu` instances nested inside each other.\n    if (this._items.indexOf(item) === -1) {\n      this._items.push(item);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Removes an item from the menu.\n   * @docs-private\n   */\n  removeItem(item: MatMenuItem) {\n    const index = this._items.indexOf(item);\n\n    if (this._items.indexOf(item) > -1) {\n      this._items.splice(index, 1);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Adds classes to the menu panel based on its position. Can be used by\n   * consumers to add specific styling based on the position.\n   * @param posX Position of the menu along the x axis.\n   * @param posY Position of the menu along the y axis.\n   * @docs-private\n   */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    const classes = this._classList;\n    classes['mat-menu-before'] = posX === 'before';\n    classes['mat-menu-after'] = posX === 'after';\n    classes['mat-menu-above'] = posY === 'above';\n    classes['mat-menu-below'] = posY === 'below';\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    // @breaking-change 7.0.0 Combine with _resetAnimation.\n    this._panelAnimationState = 'enter';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    // @breaking-change 7.0.0 Combine with _startAnimation.\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    this._animationDone.next(event);\n    this._isAnimating = false;\n\n    // Scroll the content element to the top once the animation is done. This is necessary, because\n    // we move focus to the first item while it's still being animated, which can throw the browser\n    // off when it determines the scroll position. Alternatively we can move focus when the\n    // animation is done, however moving focus asynchronously will interrupt screen readers\n    // which are in the process of reading out the menu already. We take the `element` from\n    // the `event` since we can't use a `ViewChild` to access the pane.\n    if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n      event.element.scrollTop = 0;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin, isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {asapScheduler, merge, of as observableOf, Subscription} from 'rxjs';\nimport {delay, filter, take, takeUntil} from 'rxjs/operators';\nimport {MatMenu} from './menu-directive';\nimport {throwMatMenuMissingError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '[attr.aria-expanded]': 'menuOpen || null',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closeSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  private _openedByMouse: boolean = false;\n\n  /**\n   * @deprecated\n   * @breaking-change 7.0.0\n   */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel {\n    return this.menu;\n  }\n\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor') menu: MatMenuPanel;\n\n  /** Data to be passed along to any lazily-rendered content. */\n  @Input('matMenuTriggerData') menuData: any;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() readonly menuOpened: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   * @breaking-change 7.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuOpen: EventEmitter<void> = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() readonly menuClosed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   * @breaking-change 7.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuClose: EventEmitter<void> = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef<HTMLElement>,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _parentMenu: MatMenu,\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality,\n              // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n              // @breaking-change 7.0.0\n              private _focusMonitor?: FocusMonitor) {\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n\n    this.menu.close.subscribe(reason => {\n      this._destroyMenu();\n\n      // If a click closed the menu, we should close the entire chain of nested menus.\n      if ((reason === 'click' || reason === 'tab') && this._parentMenu) {\n        this._parentMenu.closed.emit(reason);\n      }\n    });\n\n    this._handleHover();\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._cleanUpSubscriptions();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (this._menuOpen) {\n      return;\n    }\n\n    this._checkMenu();\n\n    const overlayRef = this._createOverlay();\n    this._setPosition(overlayRef.getConfig().positionStrategy as FlexibleConnectedPositionStrategy);\n    overlayRef.attach(this._portal);\n\n    if (this.menu.lazyContent) {\n      this.menu.lazyContent.attach(this.menuData);\n    }\n\n    this._closeSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n    this._initMenu();\n\n    if (this.menu instanceof MatMenu) {\n      this.menu._startAnimation();\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n  focus(origin: FocusOrigin = 'program') {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._element, origin);\n    } else {\n      this._element.nativeElement.focus();\n    }\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (!this._overlayRef || !this.menuOpen) {\n      return;\n    }\n\n    const menu = this.menu;\n\n    this._closeSubscription.unsubscribe();\n    this._overlayRef.detach();\n\n    if (menu instanceof MatMenu) {\n      menu._resetAnimation();\n\n      if (menu.lazyContent) {\n        // Wait for the exit animation to finish before detaching the content.\n        menu._animationDone\n          .pipe(\n            filter(event => event.toState === 'void'),\n            take(1),\n            // Interrupt if the content got re-attached.\n            takeUntil(menu.lazyContent._attached)\n          )\n          .subscribe(() => menu.lazyContent!.detach(), undefined, () => {\n            // No matter whether the content got re-attached, reset the menu.\n            this._resetMenu();\n          });\n      } else {\n        this._resetMenu();\n      }\n    } else {\n      this._resetMenu();\n\n      if (menu.lazyContent) {\n        menu.lazyContent.detach();\n      }\n    }\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n    this.menu.focusFirstItem(this._openedByMouse ? 'mouse' : 'program');\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  /**\n   * This method resets the menu when it's closed, most importantly restoring\n   * focus to the menu trigger if the menu was opened via the keyboard.\n   */\n  private _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (!this._openedByMouse) {\n      // Note that the focus style will show up both for `program` and\n      // `keyboard` so we don't have to specify which one it is.\n      this.focus();\n    } else if (!this.triggersSubmenu()) {\n      this.focus('mouse');\n    }\n\n    this._openedByMouse = false;\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as FlexibleConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._overlay.position()\n          .flexibleConnectedTo(this._element)\n          .withTransformOriginOn('.mat-menu-panel'),\n      hasBackdrop: this.menu.hasBackdrop == null ? !this.triggersSubmenu() : this.menu.hasBackdrop,\n      backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n      scrollStrategy: this._scrollStrategy(),\n      direction: this._dir\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: FlexibleConnectedPositionStrategy): void {\n    if (this.menu.setPositionClasses) {\n      position.positionChanges.subscribe(change => {\n        const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n        const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n        this.menu.setPositionClasses!(posX, posY);\n      });\n    }\n  }\n\n  /**\n   * Sets the appropriate positions on a position strategy\n   * so the overlay connects with the trigger correctly.\n   * @param positionStrategy Strategy whose position to update.\n   */\n  private _setPosition(positionStrategy: FlexibleConnectedPositionStrategy) {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    positionStrategy.withPositions([\n      {originX, originY, overlayX, overlayY, offsetY},\n      {originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY},\n      {\n        originX,\n        originY: originFallbackY,\n        overlayX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      },\n      {\n        originX: originFallbackX,\n        originY: originFallbackY,\n        overlayX: overlayFallbackX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      }\n    ]);\n  }\n\n  /** Cleans up the active subscriptions. */\n  private _cleanUpSubscriptions(): void {\n    this._closeSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMenu ? this._parentMenu.closed : observableOf();\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      this._openedByMouse = true;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n  /** Handles the cases where the user hovers over the trigger. */\n  private _handleHover() {\n    // Subscribe to changes in the hovered item in order to toggle the panel.\n    if (!this.triggersSubmenu()) {\n      return;\n    }\n\n    this._hoverSubscription = this._parentMenu._hovered()\n      // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n      // with different data and triggers), we have to delay it by a tick to ensure that\n      // it won't be closed immediately after it is opened.\n      .pipe(\n        filter(active => active === this._menuItemInstance && !active.disabled),\n        delay(0, asapScheduler)\n      )\n      .subscribe(() => {\n        this._openedByMouse = true;\n\n        // If the same menu is used between multiple triggers, it might still be animating\n        // while the new trigger tries to re-open it. Wait for the animation to finish\n        // before doing so. Also interrupt if the user moves to another item.\n        if (this.menu instanceof MatMenu && this.menu._isAnimating) {\n          this.menu._animationDone\n            .pipe(take(1), takeUntil(this._parentMenu._hovered()))\n            .subscribe(() => this.openMenu());\n        } else {\n          this.openMenu();\n        }\n      });\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatMenuContent} from './menu-content';\nimport {MatMenu} from './menu-directive';\nimport {MatMenuItem} from './menu-item';\nimport {\n  MatMenuTrigger,\n  MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './menu-trigger';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    MatRippleModule,\n    OverlayModule,\n  ],\n  exports: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent, MatCommonModule],\n  declarations: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent],\n  providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  animateChild,\n  group,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n */\nexport const matSelectAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      transform: 'scaleY(0)',\n      minWidth: '100%',\n      opacity: 0\n    })),\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', group([\n      query('@fadeInContent', animateChild()),\n      animate('150ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n    ])),\n    transition('* => void', [\n      animate('250ms 100ms linear', style({opacity: 0}))\n    ])\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {SPACE, ENTER, HOME, END, UP_ARROW, DOWN_ARROW, A} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  MatLine,\n  MatLineSetter,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Subscription} from 'rxjs';\nimport {MatListAvatarCssMatStyler} from './list';\n\n\n/** @docs-private */\nexport class MatSelectionListBase {}\nexport const _MatSelectionListMixinBase = mixinDisableRipple(MatSelectionListBase);\n\n/** @docs-private */\nexport class MatListOptionBase {}\nexport const _MatListOptionMixinBase = mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-with-avatar]': '_avatar',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _selected = false;\n  private _disabled = false;\n\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text') _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Value of the option */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */\n              @Inject(forwardRef(() => MatSelectionList)) public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    // List options that are selected at initialization can't be reported properly to the form\n    // control. This is because it takes some time until the selection-list knows about all\n    // available options. Also it can happen that the ControlValueAccessor has an initial value\n    // that should be used instead. Deferring the value change report to the next tick ensures\n    // that the form control value is not being overwritten.\n    const wasSelected = this._selected;\n\n    Promise.resolve().then(() => {\n      if (this._selected || wasSelected) {\n        this.selected = true;\n        this._changeDetector.markForCheck();\n      }\n    });\n  }\n\n  ngAfterContentInit() {\n    // TODO: consider turning the setter into a function, it doesn't do anything as a class.\n    // tslint:disable-next-line:no-unused-expression\n    new MatLineSetter(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => this.selected = false);\n    }\n\n    this.selectionList._removeOptionFromList(this);\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? (this._text.nativeElement.textContent || '') : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n    }\n  }\n\n  _handleFocus() {\n    this.selectionList._setFocusedOption(this);\n  }\n\n  _handleBlur() {\n    this.selectionList._onTouched();\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. Returns whether the value has changed. */\n  _setSelected(selected: boolean): boolean {\n    if (selected === this._selected) {\n      return false;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n    return true;\n  }\n\n  /**\n   * Notifies Angular that the option needs to be checked in the next change detection run. Mainly\n   * used to trigger an update of the list option if the disabled state of the selection list\n   * changed.\n   */\n  _markForCheck() {\n    this._changeDetector.markForCheck();\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list',\n    '(focus)': 'focus()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\n    CanDisableRipple, AfterContentInit, ControlValueAccessor, OnDestroy {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** Tabindex of the selection list. */\n  @Input() tabIndex: number = 0;\n\n  /**\n   * Function used for comparing an option against the selected value when determining which\n   * options should appear as selected. The first argument is the value of an options. The second\n   * one is a value from the selected value. A boolean must be returned.\n   */\n  @Input() compareWith: (o1: any, o2: any) => boolean;\n\n  /** Whether the selection list is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // The `MatSelectionList` and `MatListOption` are using the `OnPush` change detection\n    // strategy. Therefore the options will not check for any changes if the `MatSelectionList`\n    // changed its state. Since we know that a change to `disabled` property of the list affects\n    // the state of the options, we manually mark each option for check.\n    if (this.options) {\n      this.options.forEach(option => option._markForCheck());\n    }\n  }\n  private _disabled: boolean = false;\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Used for storing the values that were assigned before the options were initialized. */\n  private _tempValues: string[]|null;\n\n  /** Subscription to sync value changes in the SelectionModel back to the SelectionList. */\n  private _modelChanges = Subscription.EMPTY;\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  constructor(private _element: ElementRef<HTMLElement>, @Attribute('tabindex') tabIndex: string) {\n    super();\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options)\n      .withWrap()\n      .withTypeAhead()\n      // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\n      // screenreader users, that allows reading the different options of the list.\n      .skipPredicate(() => false);\n\n    if (this._tempValues) {\n      this._setOptionsFromValues(this._tempValues);\n      this._tempValues = null;\n    }\n\n    // Sync external changes to the model back to the options.\n    this._modelChanges = this.selectedOptions.onChange!.subscribe(event => {\n      if (event.added) {\n        for (let item of event.added) {\n          item.selected = true;\n        }\n      }\n\n      if (event.removed) {\n        for (let item of event.removed) {\n          item.selected = false;\n        }\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this._modelChanges.unsubscribe();\n  }\n\n  /** Focuses the last active list option. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this._setAllOptionsSelected(true);\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this._setAllOptionsSelected(false);\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItemIndex(this._getOptionIndex(option));\n  }\n\n  /** Removes an option from the selection list and updates the active item. */\n  _removeOptionFromList(option: MatListOption) {\n    const optionIndex = this._getOptionIndex(option);\n\n    if (optionIndex > -1 && this._keyManager.activeItemIndex === optionIndex) {\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.setPreviousItemActive();\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.setNextItemActive();\n      }\n    }\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n    const previousFocusIndex = manager.activeItemIndex;\n\n    switch (keyCode) {\n      case SPACE:\n      case ENTER:\n        this._toggleFocusedOption();\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n      case HOME:\n      case END:\n        keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case A:\n        if (event.ctrlKey) {\n          this.options.find(option => !option.selected) ? this.selectAll() : this.deselectAll();\n          event.preventDefault();\n        }\n        break;\n      default:\n        manager.onKeydown(event);\n    }\n\n    if ((keyCode === UP_ARROW || keyCode === DOWN_ARROW) && event.shiftKey &&\n        manager.activeItemIndex !== previousFocusIndex) {\n      this._toggleFocusedOption();\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    if (this.options) {\n      this._onChange(this._getSelectedOptionValues());\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    } else {\n      this._tempValues = values;\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values\n      .map(value => {\n        return this.options.find(option =>\n            this.compareWith ? this.compareWith(option.value, value) : option.value === value);\n      })\n      .filter(Boolean)\n      .forEach(option => option!._setSelected(true));\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the state of the currently focused option if enabled. */\n  private _toggleFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption && !focusedOption.disabled) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n      }\n    }\n  }\n\n  /**\n   * Sets the selected state on all of the options\n   * and emits an event if anything changed.\n   */\n  private _setAllOptionsSelected(isSelected: boolean) {\n    // Keep track of whether anything changed, because we only want to\n    // emit the changed event when something actually changed.\n    let hasChanged = false;\n\n    this.options.forEach(option => {\n      if (option._setSelected(isSelected)) {\n        hasChanged = true;\n      }\n    });\n\n    if (hasChanged) {\n      this._reportValueChange();\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, MatLine, MatLineSetter, mixinDisableRipple} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nexport class MatListBase {}\nexport const _MatListMixinBase = mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nexport class MatListItemBase {}\nexport const _MatListItemMixinBase = mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {'class': 'mat-list'},\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    // @breaking-change 7.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\n    '[class.mat-list-item-avatar]': '_avatar || _icon',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple {\n  private _isNavList: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler) _icon: MatListIconCssMatStyler;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              @Optional() private _navList: MatNavList) {\n    super();\n    this._isNavList = !!_navList;\n  }\n\n  ngAfterContentInit() {\n    // TODO: consider turning the setter into a function, it doesn't do anything as a class.\n    // tslint:disable-next-line:no-unused-expression\n    new MatLineSetter(this._lines, this._element);\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isNavList || this.disableRipple || this._navList.disableRipple;\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatLine, MatLineSetter} from '@angular/material/core';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(private _element: ElementRef<HTMLElement>) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value: number) { this._rowspan = Math.round(coerceNumberProperty(value)); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value: number) { this._colspan = Math.round(coerceNumberProperty(value)); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    this._element.nativeElement.style[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridTileText implements AfterContentInit {\n  /**\n   *  Helper that watches the number of lines in a text area and sets\n   * a class on the host element that matches the line count.\n   */\n  _lineSetter: MatLineSetter;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef<HTMLElement>) {}\n\n  ngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {QueryList} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    let lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  constructor(numColumns: number, tiles: QueryList<MatGridTile>) {\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    let gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile.\n    } while (gapEndIndex - gapStartIndex < tileCols);\n\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'rtl' ? 'right' : 'left';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number);\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList);\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height. */\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['paddingBottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('marginTop', null);\n      tile._setStyle('paddingTop', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string { return `calc(${exp})`; }\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return (value.match(/px|em|rem/)) ? value : value + 'px';\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridList implements OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile, {descendants: true}) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols(): number { return this._cols; }\n  set cols(value: number) {\n    this._cols = Math.max(1, Math.round(coerceNumberProperty(value)));\n  }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize(): string { return this._gutter; }\n  set gutterSize(value: string) { this._gutter = `${value || ''}`; }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  set rowHeight(value: string | number) {\n    const newValue = `${value || ''}`;\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    const tracker = new TileCoordinator(this.cols, this._tiles);\n    const direction = this._dir ? this._dir.value : 'ltr';\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    this._tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      this._element.nativeElement.style[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {HttpClient, HttpErrorResponse} from '@angular/common/http';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n} from '@angular/core';\nimport {DomSanitizer, SafeResourceUrl, SafeHtml} from '@angular/platform-browser';\nimport {forkJoin, Observable, of as observableOf, throwError as observableThrow} from 'rxjs';\nimport {catchError, finalize, map, share, tap} from 'rxjs/operators';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeUrlError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeLiteralError(literal: SafeHtml): Error {\n  return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n               `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  url: SafeResourceUrl | null;\n  svgElement: SVGElement | null;\n\n  constructor(url: SafeResourceUrl);\n  constructor(svgElement: SVGElement);\n  constructor(data: SafeResourceUrl | SVGElement) {\n    // Note that we can't use `instanceof SVGElement` here,\n    // because it'll break during server-side rendering.\n    if (!!(data as any).nodeName) {\n      this.svgElement = data as SVGElement;\n    } else {\n      this.url = data as SafeResourceUrl;\n    }\n  }\n}\n\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable({providedIn: 'root'})\nexport class MatIconRegistry {\n  private _document: Document;\n\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document: any) {\n      this._document = document;\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n\n  /**\n   * Registers an icon using an HTML string in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteral(iconName: string, literal: SafeHtml): this {\n    return this.addSvgIconLiteralInNamespace('', iconName, literal);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon using an HTML string in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteralInNamespace(namespace: string, iconName: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._createSvgElementForSingleIcon(sanitizedLiteral);\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the default namespace.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteral(literal: SafeHtml): this {\n    return this.addSvgIconSetLiteralInNamespace('', literal);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteralInNamespace(namespace: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._svgElementFromString(sanitizedLiteral);\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the `<mat-icon>` element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    const cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg)),\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg)),\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: HttpErrorResponse): Observable<SVGElement | null> => {\n            const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the\n            // combined Observable won't necessarily fail.\n            console.error(`Loading icon set URL: ${url} failed: ${err.message}`);\n            return observableOf(null);\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // If the SVG for this icon set has already been parsed, do nothing.\n    if (config.svgElement) {\n      return observableOf(config.svgElement);\n    }\n\n    return this._fetchUrl(config.url).pipe(map(svgText => {\n      // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n      // only needs to occur if the cache is yet unset.\n      if (!config.svgElement) {\n        config.svgElement = this._svgElementFromString(svgText);\n      }\n\n      return config.svgElement;\n    }));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    const iconSource = iconSet.querySelector('#' + iconName);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.removeAttribute('id');\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    const div = this._document.createElement('DIV');\n    div.innerHTML = str;\n    const svg = div.querySelector('svg') as SVGElement;\n\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n\n    return svg;\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    let svg = this._svgElementFromString('<svg></svg>');\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl | null): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    if (safeUrl == null) {\n      throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finalize` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share(),\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n\n  /**\n   * Registers an icon config by name in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param iconName Name under which to register the config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconConfig(namespace: string, iconName: string, config: SvgIconConfig): this {\n    this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n    return this;\n  }\n\n  /**\n   * Registers an icon set config in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconSetConfig(namespace: string, config: SvgIconConfig): this {\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n\n    return this;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), DOCUMENT as InjectionToken<any>],\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nexport class MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatIconMixinBase = mixinColor(MatIconBase);\n\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon',\n    '[class.mat-icon-inline]': 'inline',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, CanColor {\n  /**\n   * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n   * the element the icon is contained in.\n   */\n  @Input()\n  get inline(): boolean {\n    return this._inline;\n  }\n  set inline(inline: boolean) {\n    this._inline = coerceBooleanProperty(inline);\n  }\n  private _inline: boolean = false;\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  constructor(\n      elementRef: ElementRef<HTMLElement>,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   `'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)`\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    if (changes.svgIcon) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n\n    // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\n    // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\n    // Do this before inserting the element into the DOM, in order to avoid a style recalculation.\n    const styleTags = svg.querySelectorAll('style') as NodeListOf<HTMLStyleElement>;\n\n    for (let i = 0; i < styleTags.length; i++) {\n      styleTags[i].textContent += ' ';\n    }\n\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    let childCount = layoutElement.childNodes.length;\n\n    // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n    // we can't use innerHTML, because IE will throw if the element has a data binding.\n    while (childCount--) {\n      const child = layoutElement.childNodes[childCount];\n\n      // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n      // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n      if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n        layoutElement.removeChild(child);\n      }\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n  group,\n  query,\n  animateChild,\n} from '@angular/animations';\n\n/** Animations used by the Material datepicker. */\nexport const matDatepickerAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n  /** Transforms the height of the datepicker's calendar. */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({opacity: 0, transform: 'scale(1, 0)'})),\n    state('enter', style({opacity: 1, transform: 'scale(1, 1)'})),\n    transition('void => enter', group([\n      query('@fadeInCalendar', animateChild()),\n      animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n    ])),\n    transition('* => void', animate('100ms linear', style({opacity: 0})))\n  ]),\n\n  /** Fades in the content of the calendar. */\n  fadeInCalendar: trigger('fadeInCalendar', [\n    state('void', style({opacity: 0})),\n    state('enter', style({opacity: 1})),\n    transition('void => *', animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {take, filter} from 'rxjs/operators';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n  OnDestroy,\n} from '@angular/core';\nimport {CanColor, DateAdapter, mixinColor, ThemePalette} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {merge, Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatCalendar} from './calendar';\nimport {matDatepickerAnimations} from './datepicker-animations';\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY,\n};\n\n// Boilerplate for applying mixins to MatDatepickerContent.\n/** @docs-private */\nexport class MatDatepickerContentBase {\n  constructor(public _elementRef: ElementRef) { }\n}\nexport const _MatDatepickerContentMixinBase = mixinColor(MatDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[@transformPanel]': '\"enter\"',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n  },\n  animations: [\n    matDatepickerAnimations.transformPanel,\n    matDatepickerAnimations.fadeInCalendar,\n  ],\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color'],\n})\nexport class MatDatepickerContent<D> extends _MatDatepickerContentMixinBase\n  implements AfterViewInit, CanColor {\n\n  /** Reference to the internal calendar component. */\n  @ViewChild(MatCalendar) _calendar: MatCalendar<D>;\n\n  /** Reference to the datepicker that created the overlay. */\n  datepicker: MatDatepicker<D>;\n\n  /** Whether the datepicker is above or below the input. */\n  _isAbove: boolean;\n\n  constructor(elementRef: ElementRef) {\n    super(elementRef);\n  }\n\n  ngAfterViewInit() {\n    this._calendar.focusActiveCell();\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDatepicker<D> implements OnDestroy, CanColor {\n  /** An input indicating the type of the custom header component for the calendar, if set. */\n  @Input() calendarHeaderComponent: ComponentType<any>;\n\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n  /** Color palette to use on the datepicker's calendar. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n        (this._datepickerInput ? this._datepickerInput._getThemePalette() : undefined);\n  }\n  set color(value: ThemePalette) {\n    this._color = value;\n  }\n  _color: ThemePalette;\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits selected year in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected month in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { value ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<MatDatepickerContent<D>> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** Reference to the component instantiated in popup mode. */\n  private _popupComponentRef: ComponentRef<MatDatepickerContent<D>> | null;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  /** Subscription to value changes in the associated input element. */\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  /** Emits new selected date when selected date changes. */\n  readonly _selectedChanged = new Subject<D>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n      this._popupComponentRef = null;\n    }\n  }\n\n  /** Selects the given date */\n  _select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this._selectedChanged.next(date);\n    }\n  }\n\n  /** Emits the selected year in multiyear view */\n  _selectYear(normalizedYear: D): void {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Emits selected month in year view */\n  _selectMonth(normalizedMonth: D): void {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    // Usually this would be handled by `open` which ensures that we can only have one overlay\n    // open at a time, however since we reset the variables in async handlers some overlays\n    // may slip through if the user opens and closes multiple times in quick succession (e.g.\n    // by holding down the enter key).\n    if (this._dialogRef) {\n      this._dialogRef.close();\n    }\n\n    this._dialogRef = this._dialog.open<MatDatepickerContent<D>>(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n    this._setColor();\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal<MatDatepickerContent<D>>(MatDatepickerContent,\n                                                                          this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\n      this._popupComponentRef.instance.datepicker = this;\n      this._setColor();\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir,\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n    this._popupRef.overlayElement.setAttribute('role', 'dialog');\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => {\n        // Closing on alt + up is only valid when there's an input associated with the datepicker.\n        return event.keyCode === ESCAPE ||\n               (this._datepickerInput && event.altKey && event.keyCode === UP_ARROW);\n      }))\n    ).subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .flexibleConnectedTo(this._datepickerInput.getConnectedOverlayOrigin())\n      .withTransformOriginOn('.mat-datepicker-content')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8)\n      .withPush(false)\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom'\n        },\n        {\n          originX: 'end',\n          originY: 'bottom',\n          overlayX: 'end',\n          overlayY: 'top'\n        },\n        {\n          originX: 'end',\n          originY: 'top',\n          overlayX: 'end',\n          overlayY: 'bottom'\n        }\n      ]);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Passes the current theme color along to the calendar overlay. */\n  private _setColor(): void {\n    const color = this.color;\n    if (this._popupComponentRef) {\n      this._popupComponentRef.instance.color = color;\n    }\n    if (this._dialogRef) {\n      this._dialogRef.componentInstance.color = color;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onBlur()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements ControlValueAccessor, OnDestroy, Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    if (!value) {\n      return;\n    }\n\n    this._datepicker = value;\n    this._datepicker._registerInput(this);\n    this._datepickerSubscription.unsubscribe();\n\n    this._datepickerSubscription = this._datepicker._selectedChanged.subscribe((selected: D) => {\n      this.value = selected;\n      this._cvaOnChange(selected);\n      this._onTouched();\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n      this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    });\n  }\n  _datepicker: MatDatepicker<D>;\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(value: (date: D | null) => boolean) {\n    this._dateFilter = value;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    const oldDate = this.value;\n    this._value = value;\n    this._formatValue(value);\n\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    const element = this._elementRef.nativeElement;\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n\n    // We need to null check the `blur` method, because it's undefined during SSR.\n    if (newValue && element.blur) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      element.blur();\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D | null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef<HTMLInputElement>,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** @docs-private */\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * @deprecated\n   * @breaking-change 7.0.0 Use `getConnectedOverlayOrigin` instead\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this.getConnectedOverlayOrigin();\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this._datepicker && event.altKey && event.keyCode === DOWN_ARROW) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n\n    if (!this._dateAdapter.sameDate(date, this._value)) {\n      this._value = date;\n      this._cvaOnChange(date);\n      this._valueChange.emit(date);\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    }\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /** Returns the palette used by the input's form field, if any. */\n  _getThemePalette() {\n    return this._formField ? this._formField.color : undefined;\n  }\n\n  /** Handles blur events on the input. */\n  _onBlur() {\n    // Reformat the input only if we have a valid value.\n    if (this.value) {\n      this._formatValue(this.value);\n    }\n\n    this._onTouched();\n  }\n\n  /** Formats a value and sets it on the input element. */\n  private _formatValue(value: D | null) {\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class MatDatepickerToggleIcon {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'class': 'mat-datepicker-toggle',\n    // Clear out the native tabindex here since we forward it to the underlying button\n    '[attr.tabindex]': 'null',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n    '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n    '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon) _customIcon: MatDatepickerToggleIcon;\n\n  constructor(\n    public _intl: MatDatepickerIntl,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Attribute('tabindex') defaultTabIndex: string) {\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.datepicker) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatCalendar, MatCalendarHeader} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {\n  MatDatepicker,\n  MatDatepickerContent,\n  MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    OverlayModule,\n    A11yModule,\n    PortalModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n    MatCalendarHeader,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-horizontal]': '!vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input()\n  get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [MatDivider, MatCommonModule],\n  declarations: [MatDivider],\n})\nexport class MatDividerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/**\n * Base interface for a `MatAccordion`.\n * @docs-private\n */\nexport interface MatAccordionBase extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  hideToggle: boolean;\n\n  /** Display mode used for all expansion panels in the accordion. */\n  displayMode: MatAccordionDisplayMode;\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown: (event: KeyboardEvent) => void;\n\n  /** Handles focus events on the panel headers. */\n  _handleHeaderFocus: (header: any) => void;\n}\n\n\n/**\n * Token used to provide a `MatAccordion` to `MatExpansionPanel`.\n * Used primarily to avoid circular imports between `MatAccordion` and `MatExpansionPanel`.\n */\nexport const MAT_ACCORDION = new InjectionToken<MatAccordionBase>('MAT_ACCORDION');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  ElementRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  SimpleChanges,\n  SkipSelf,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {filter, startWith, take} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {MAT_ACCORDION, MatAccordionBase} from './accordion-base';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkAccordionItem = CdkAccordionItem;\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  providers: [\n    // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n    // to the same accordion.\n    {provide: MAT_ACCORDION, useValue: undefined},\n  ],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  }\n})\nexport class MatExpansionPanel extends CdkAccordionItem implements AfterContentInit, OnChanges,\n  OnDestroy {\n\n  // @breaking-change 8.0.0 Remove `| undefined` from here\n  // when the `_document` constructor param is required.\n  private _document: Document | undefined;\n\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean {\n    return this._hideToggle || (this.accordion && this.accordion.hideToggle);\n  }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n  private _hideToggle = false;\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordionBase;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent) _lazyContent: MatExpansionPanelContent;\n\n  /** Element containing the panel's user-provided content. */\n  @ViewChild('body') _body: ElementRef<HTMLElement>;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  constructor(@Optional() @SkipSelf() @Inject(MAT_ACCORDION) accordion: MatAccordionBase,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(DOCUMENT) _document?: any) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n    this._document = _document;\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      // We don't need to subscribe to the `stateChanges` of the parent accordion because each time\n      // the [displayMode] input changes, the change detection will also cover the host bindings\n      // of this expansion panel.\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._inputChanges.complete();\n  }\n\n  _bodyAnimation(event: AnimationEvent) {\n    const classList = event.element.classList;\n    const cssClass = 'mat-expanded';\n    const {phaseName, toState} = event;\n\n    // Toggle the body's `overflow: hidden` class when closing starts or when expansion ends in\n    // order to prevent the cases where switching too early would cause the animation to jump.\n    // Note that we do it directly on the DOM element to avoid the slight delay that comes\n    // with doing it via change detection.\n    if (phaseName === 'done' && toState === 'expanded') {\n      classList.add(cssClass);\n    } else if (phaseName === 'start' && toState === 'collapsed') {\n      classList.remove(cssClass);\n    }\n  }\n\n  /** Checks whether the expansion panel's content contains the currently-focused element. */\n  _containsFocus(): boolean {\n    if (this._body && this._document) {\n      const focusedElement = this._document.activeElement;\n      const bodyElement = this._body.nativeElement;\n      return focusedElement === bodyElement || bodyElement.contains(focusedElement);\n    }\n\n    return false;\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusableOption, FocusOrigin} from '@angular/cdk/a11y';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, Subscription, EMPTY} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanel} from './expansion-panel';\n\n\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy, FocusableOption {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n      @Host() public panel: MatExpansionPanel,\n      private _element: ElementRef,\n      private _focusMonitor: FocusMonitor,\n      private _changeDetectorRef: ChangeDetectorRef) {\n\n    const accordionHideToggleChange = panel.accordion ?\n      panel.accordion._stateChanges.pipe(filter(changes => !!changes.hideToggle)) : EMPTY;\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to subscribe and trigger change detection manually.\n    this._parentChangeSubscription = merge(\n      panel.opened,\n      panel.closed,\n      accordionHideToggleChange,\n      panel._inputChanges.pipe(filter(changes => !!(changes.hideToggle || changes.disabled)))\n    )\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Avoids focus being lost if the panel contained the focused element and was closed.\n    panel.closed\n      .pipe(filter(() => panel._containsFocus()))\n      .subscribe(() => _focusMonitor.focusVia(_element, 'program'));\n\n    _focusMonitor.monitor(_element.nativeElement).subscribe(origin => {\n      if (origin && panel.accordion) {\n        panel.accordion._handleHeaderFocus(this);\n      }\n    });\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /**\n   * Whether the associated panel is disabled. Implemented as a part of `FocusableOption`.\n   * @docs-private\n   */\n  get disabled() {\n    return this.panel.disabled;\n  }\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    this.panel.toggle();\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        event.preventDefault();\n        this._toggle();\n        break;\n      default:\n        if (this.panel.accordion) {\n          this.panel.accordion._handleHeaderKeydown(event);\n        }\n\n        return;\n    }\n  }\n\n  /**\n   * Focuses the panel header. Implemented as a part of `FocusableOption`.\n   * @param origin Origin of the action that triggered the focus.\n   * @docs-private\n   */\n  focus(origin: FocusOrigin = 'program') {\n    this._focusMonitor.focusVia(this._element, origin);\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n}\n\n/**\n * `<mat-panel-description>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host: {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * `<mat-panel-title>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host: {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, ContentChildren, QueryList, AfterContentInit} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {HOME, END} from '@angular/cdk/keycodes';\nimport {MAT_ACCORDION, MatAccordionBase, MatAccordionDisplayMode} from './accordion-base';\nimport {MatExpansionPanelHeader} from './expansion-panel-header';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  inputs: ['multi'],\n  providers: [{\n    provide: MAT_ACCORDION,\n    useExisting: MatAccordion\n  }],\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion implements MatAccordionBase, AfterContentInit {\n  private _keyManager: FocusKeyManager<MatExpansionPanelHeader>;\n\n  @ContentChildren(MatExpansionPanelHeader, {descendants: true})\n  _headers: QueryList<MatExpansionPanelHeader>;\n\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * Display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the rest of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager(this._headers).withWrap();\n  }\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown(event: KeyboardEvent) {\n    const {keyCode} = event;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME) {\n      manager.setFirstItemActive();\n      event.preventDefault();\n    } else if (keyCode === END) {\n      manager.setLastItemActive();\n      event.preventDefault();\n    } else {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  _handleHeaderFocus(header: MatExpansionPanelHeader) {\n    this._keyManager.updateActiveItem(header);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanel, MatExpansionPanelActionRow} from './expansion-panel';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  NgZone,\n} from '@angular/core';\nimport {take} from 'rxjs/operators';\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** Whether to allow selection of disabled cells. */\n  @Input() allowDisabledSelection = false;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  constructor(private _elementRef: ElementRef<HTMLElement>, private _ngZone: NgZone) { }\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (!this.allowDisabledSelection && !cell.enabled) {\n      return;\n    }\n    this.selectedValueChange.emit(cell.value);\n  }\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  get _firstRowOffset(): number {\n    return this.rows && this.rows.length && this.rows[0].length ?\n        this.numCols - this.rows[0].length : 0;\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        const activeCell: HTMLElement | null =\n            this._elementRef.nativeElement.querySelector('.mat-calendar-body-active');\n\n        if (activeCell) {\n          activeCell.focus();\n        }\n      });\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n              this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n          this._dateSelected(this._dateAdapter.getDate(this._activeDate));\n          this._userSelection.emit();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(\n            this._dateAdapter.getYear(this.activeDate),\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const enabled = this._shouldEnableDate(date);\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));\n    }\n  }\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new year is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\n    let activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n        this._yearSelected(this._dateAdapter.getYear(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  _getActiveCell(): number {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _shouldEnableYear(year: number) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null ||\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n      return false;\n    }\n\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    const normalizedDate =\n          this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    this.monthSelected.emit(normalizedDate);\n\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n        this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (month === undefined || month === null ||\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentPortal, ComponentType, Portal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView, yearsPerPage} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n/**\n * Possible views for the calendar.\n * @docs-private\n */\nexport type MatCalendarView = 'month' | 'year' | 'multi-year';\n\n/** Default header for MatCalendar */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar-header',\n  templateUrl: 'calendar-header.html',\n  exportAs: 'matCalendarHeader',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarHeader<D> {\n  constructor(private _intl: MatDatepickerIntl,\n              @Inject(forwardRef(() => MatCalendar)) public calendar: MatCalendar<D>,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    this.calendar.stateChanges.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  /** The label for the current calendar view. */\n  get periodButtonText(): string {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter\n          .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\n              .toLocaleUpperCase();\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYearName(this.calendar.activeDate);\n    }\n    const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n    const lastYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  get periodButtonLabel(): string {\n    return this.calendar.currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the the previous button. */\n  get prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** The label for the the next button. */\n  get nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** Handles user clicks on the period label. */\n  currentPeriodClicked(): void {\n    this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  previousClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage\n            );\n  }\n\n  /** Handles user clicks on the next button. */\n  nextClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate,\n                    this.calendar.currentView == 'year' ? 1 : yearsPerPage\n            );\n  }\n\n  /** Whether the previous period button is enabled. */\n  previousEnabled(): boolean {\n    if (!this.calendar.minDate) {\n      return true;\n    }\n    return !this.calendar.minDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  nextEnabled(): boolean {\n    return !this.calendar.maxDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n}\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, AfterViewChecked, OnDestroy, OnChanges {\n  /** An input indicating the type of the header component, if set. */\n  @Input() headerComponent: ComponentType<any>;\n\n  /** A portal containing the header component type for this calendar. */\n  _calendarHeaderPortal: Portal<any>;\n\n  private _intlChanges: Subscription;\n\n  /**\n   * Used for scheduling that focus should be moved to the active cell on the next tick.\n   * We need to schedule it, rather than do it immediately, because we have to wait\n   * for Angular to re-evaluate the view children.\n   */\n  private _moveFocusOnNextTick = false;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: MatCalendarView = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView) multiYearView: MatMultiYearView<D>;\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get activeDate(): D { return this._clampedActiveDate; }\n  set activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n    this.stateChanges.next();\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  get currentView(): MatCalendarView { return this._currentView; }\n  set currentView(value: MatCalendarView) {\n    this._currentView = value;\n    this._moveFocusOnNextTick = true;\n  }\n  private _currentView: MatCalendarView;\n\n  /**\n   * Emits whenever there is a state change that the header may need to respond to.\n   */\n  stateChanges = new Subject<void>();\n\n  constructor(_intl: MatDatepickerIntl,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => {\n      _changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    });\n  }\n\n  ngAfterContentInit() {\n    this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || MatCalendarHeader);\n    this.activeDate = this.startAt || this._dateAdapter.today();\n\n    // Assign to the private property since we don't want to move focus on init.\n    this._currentView = this.startView;\n  }\n\n  ngAfterViewChecked() {\n    if (this._moveFocusOnNextTick) {\n      this._moveFocusOnNextTick = false;\n      this.focusActiveCell();\n    }\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n    this.stateChanges.complete();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change = changes.minDate || changes.maxDate || changes.dateFilter;\n\n    if (change && !change.firstChange) {\n      const view = this._getCurrentViewComponent();\n\n      if (view) {\n        // We need to `detectChanges` manually here, because the `minDate`, `maxDate` etc. are\n        // passed down to the view via data bindings which won't be up-to-date when we call `_init`.\n        this._changeDetectorRef.detectChanges();\n        view._init();\n      }\n    }\n\n    this.stateChanges.next();\n  }\n\n  focusActiveCell() {\n    this._getCurrentViewComponent()._focusActiveCell();\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles year/month selection in the multi-year/year views. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this.activeDate = date;\n    this.currentView = view;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Returns the component instance that corresponds to the current calendar view. */\n  private _getCurrentViewComponent() {\n    return this.monthView || this.yearView || this.multiYearView;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE, HOME, END} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {CanUpdateErrorState, ErrorStateMatcher, mixinErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, takeUntil} from 'rxjs/operators';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipInput} from './chip-input';\n\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nexport class MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatChipListMixinBase = mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for it's similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': 'disabled ? null : _tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)',\n    '[id]': '_uid',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n  ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly controlType: string = 'mat-chip-list';\n\n  /**\n   * When a chip is destroyed, we store the index of the destroyed chip until the chips\n   * query list notifies about the update. This is necessary because we cannot determine an\n   * appropriate chip that should receive focus until the array of chips updated completely.\n   */\n  private _lastDestroyedChipIndex: number | null = null;\n\n  /** Subject that emits when the component has been destroyed. */\n  private _destroyed = new Subject<void>();\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription | null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription | null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription | null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription | null;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipInput;\n\n  /** Uid of the chip list */\n  _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The ARIA role applied to the chip list. */\n  get role(): string | null { return this.empty ? null : 'listbox'; }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n  private _multiple: boolean = false;\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith(): (o1: any, o2: any) => boolean { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  protected _value: any;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get id(): string {\n    return this._chipInput ? this._chipInput.id : this._uid;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  protected _required: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  protected _placeholder: string;\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return (this._chipInput && this._chipInput.focused) || this.chips.some(chip => chip._hasFocus);\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    if (this.chips) {\n      this.chips.forEach(chip => chip.disabled = this._disabled);\n    }\n  }\n  protected _disabled: boolean = false;\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip list is selectable. When a chip list is not selectable,\n   * the selected states for all the chips inside the chip list are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n\n    if (this.chips) {\n      this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n    }\n  }\n  protected _selectable: boolean = true;\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroyed));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipListChange> =\n      new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips)\n      .withWrap()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => this._tabIndex = this._userTabIndex || 0);\n    });\n\n    // When the list changes, re-subscribe\n    this.chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this.stateChanges.complete();\n\n    this._dropSubscriptions();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipInput): void {\n    this._chipInput = inputElement;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() { this.focus(); }\n\n  /**\n   * Focuses the the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(): void {\n    if (this.disabled) {\n      return;\n    }\n\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput();\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput() {\n    if (this._chipInput) {\n      this._chipInput.focus();\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    const target = event.target as HTMLElement;\n\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n    } else if (target && target.classList.contains('mat-chip')) {\n      if (event.keyCode === HOME) {\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n      } else if (event.keyCode === END) {\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        this._keyManager.onKeydown(event);\n      }\n\n      this.stateChanges.next();\n    }\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * If the amount of chips changed, we need to update the\n   * key manager state and focus the next closest chip.\n   */\n  protected _updateFocusForDestroyedChips() {\n    if (this._lastDestroyedChipIndex != null && this.chips.length) {\n      const newChipIndex = Math.min(this._lastDestroyedChipIndex, this.chips.length - 1);\n      this._keyManager.setActiveItem(newChipIndex);\n    }\n\n    this._lastDestroyedChipIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChip);\n        }\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    this._keyManager.setActiveItem(-1);\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n\n    if (this._chipRemoveSubscription) {\n      this._chipRemoveSubscription.unsubscribe();\n      this._chipRemoveSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n      const chip = event.chip;\n      const chipIndex = this.chips.toArray().indexOf(event.chip);\n\n      // In case the chip that will be removed is currently focused, we temporarily store\n      // the index in order to be able to determine an appropriate sibling chip that will\n      // receive focus.\n      if (this._isValidIndex(chipIndex) && chip._hasFocus) {\n        this._lastDestroyedChipIndex = chipIndex;\n      }\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Directive, ElementRef, EventEmitter, Input, Output, Inject, OnChanges} from '@angular/core';\nimport {MatChipList} from './chip-list';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n    '[id]': 'id',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.placeholder]': 'placeholder || null',\n  }\n})\nexport class MatChipInput implements OnChanges {\n  /** Whether the control is focused. */\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  // TODO(tinayuangao): Support Set here\n  @Input('matChipInputSeparatorKeyCodes')\n  separatorKeyCodes: number[] = this._defaultOptions.separatorKeyCodes;\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /** The input's placeholder text. */\n  @Input() placeholder: string = '';\n\n  /** Unique id for the input. */\n  @Input() id: string = `mat-chip-list-input-${nextUniqueId++}`;\n\n  /** Whether the input is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled || (this._chipList && this._chipList.disabled); }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Whether the input is empty. */\n  get empty(): boolean { return !this._inputElement.value; }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement>,\n    @Inject(MAT_CHIPS_DEFAULT_OPTIONS) private _defaultOptions: MatChipsDefaultOptions) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  ngOnChanges() {\n    this._chipList.stateChanges.next();\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this.separatorKeyCodes.indexOf(event.keyCode) > -1) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  /** Focuses the input. */\n  focus(): void { this._inputElement.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChip, MatChipAvatar, MatChipRemove, MatChipTrailingIcon} from './chip';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipInput} from './chip-input';\nimport {MatChipList} from './chip-list';\n\nconst CHIP_DECLARATIONS = [\n  MatChipList,\n  MatChip,\n  MatChipInput,\n  MatChipRemove,\n  MatChipAvatar,\n  MatChipTrailingIcon,\n];\n\n@NgModule({\n  exports: CHIP_DECLARATIONS,\n  declarations: CHIP_DECLARATIONS,\n  providers: [\n    ErrorStateMatcher,\n    {\n      provide: MAT_CHIPS_DEFAULT_OPTIONS,\n      useValue: {\n        separatorKeyCodes: [ENTER]\n      } as MatChipsDefaultOptions\n    }\n  ]\n})\nexport class MatChipsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction;\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /** Whether the dialog should close when the user goes backwards/forwards in history. */\n  closeOnNavigation?: boolean = true;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by MatDialog. */\nexport const matDialogAnimations: {\n  readonly slideDialog: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  slideDialog: trigger('slideDialog', [\n    // Note: The `enter` animation doesn't transition to something like `translate3d(0, 0, 0)\n    // scale(1)`, because for some reason specifying the transform explicitly, causes IE both\n    // to blur the dialog content and decimate the animation performance. Leaving it as `none`\n    // solves both issues.\n    state('enter', style({ transform: 'none', opacity: 1 })),\n    state('void', style({ transform: 'translate3d(0, 25%, 0) scale(0.9)', opacity: 0 })),\n    state('exit', style({ transform: 'translate3d(0, 25%, 0)', opacity: 0 })),\n    transition('* => *', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AnimationEvent} from '@angular/animations';\nimport {matDialogAnimations} from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.slideDialog],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    'aria-modal': 'true',\n    '[attr.id]': '_id',\n    '[attr.role]': '_config.role',\n    '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config.ariaLabel',\n    '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n    '[@slideDialog]': '_state',\n    '(@slideDialog.start)': '_onAnimationStart($event)',\n    '(@slideDialog.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null = null;\n\n  /** ID for the container DOM element. */\n  _id: string;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any,\n    /** The dialog configuration. */\n    public _config: MatDialogConfig) {\n\n    super();\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Note that there is no focus method when rendering on the server.\n      if (this._elementRef.nativeElement.focus) {\n        // Move focus onto the dialog immediately in order to prevent the user from accidentally\n        // opening multiple dialogs at the same time. Needs to be async, because the element\n        // may not be focusable immediately.\n        Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n      }\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {GlobalPositionStrategy, OverlayRef} from '@angular/cdk/overlay';\nimport {Location} from '@angular/common';\nimport {Observable, Subject, Subscription, SubscriptionLike} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {DialogPosition} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private readonly _afterOpen = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private readonly _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private readonly _beforeClose = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  /** Subscription to changes in the user's location. */\n  private _locationChanges: SubscriptionLike = Subscription.EMPTY;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    public _containerInstance: MatDialogContainer,\n    location?: Location,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Pass the id along to the container.\n    _containerInstance._id = id;\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpen.next();\n      this._afterOpen.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    ).subscribe(() => this._overlayRef.dispose());\n\n    _overlayRef.detachments().subscribe(() => {\n      this._beforeClose.next(this._result);\n      this._beforeClose.complete();\n      this._locationChanges.unsubscribe();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n      this._overlayRef.dispose();\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose))\n      .subscribe(() => this.close());\n\n    if (location) {\n      // Close the dialog when the user goes forwards/backwards in history or when the location\n      // hash changes. Note that this usually doesn't include clicking on links (unless the user\n      // is using the `HashLocationStrategy`).\n      this._locationChanges = location.subscribe(() => {\n        if (this._containerInstance._config.closeOnNavigation) {\n          this.close();\n        }\n      });\n    }\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._beforeClose.next(dialogResult);\n      this._beforeClose.complete();\n      this._overlayRef.detachBackdrop();\n    });\n\n    this._containerInstance._startExitAnimation();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpen(): Observable<void> {\n    return this._afterOpen.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this._beforeClose.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = '', height: string = ''): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayContainer,\n  OverlayRef,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {defer, Observable, of as observableOf, Subject} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay: Overlay): ()  => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private readonly _afterAllClosedAtThisLevel = new Subject<void>();\n  private readonly _afterOpenAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpen : this._afterOpenAtThisLevel;\n  }\n\n  get _afterAllClosed() {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  readonly afterAllClosed: Observable<void> = defer<void>(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined)));\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() private _location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) private _scrollStrategy,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {}\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T, R> {\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef = this._attachDialogContent<T, R>(componentOrTemplateRef,\n                                                      dialogContainer,\n                                                      overlayRef,\n                                                      config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpen.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    let i = this.openDialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      this.openDialogs[i].close();\n    }\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatDialogConfig, config]\n    ]));\n    const containerPortal =\n        new ComponentPortal(MatDialogContainer, config.viewContainerRef, injector);\n    const containerRef = overlay.attach<MatDialogContainer>(containerPortal);\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T, R>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T, R> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef =\n        new MatDialogRef<T, R>(overlayRef, dialogContainer, this._location, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    const injectionTokens = new WeakMap<any, any>([\n      [MatDialogContainer, dialogContainer],\n      [MAT_DIALOG_DATA, config.data],\n      [MatDialogRef, dialogRef]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string = 'Close dialog';\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes._matDialogClose || changes._matDialogCloseResult;\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent {}\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions {}\n\n\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef<HTMLElement>, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MatDialog} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogActions,\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTextareaAutosize} from '@angular/cdk/text-field';\nimport {Directive, Input} from '@angular/core';\n\n// TODO(devversion): Workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkTextareaAutosize = CdkTextareaAutosize;\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deprecated Use `cdkTextareaAutosize` from `@angular/cdk/text-field` instead.\n * @breaking-change 7.0.0\n */\n@Directive({\n  selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n  exportAs: 'matTextareaAutosize',\n  inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n  host: {\n    'class': 'cdk-textarea-autosize mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n    '(input)': '_noopInputHandler()',\n  },\n})\nexport class MatTextareaAutosize extends _CdkTextareaAutosize {\n  @Input()\n  get matAutosizeMinRows(): number { return this.minRows; }\n  set matAutosizeMinRows(value: number) { this.minRows = value; }\n\n  @Input()\n  get matAutosizeMaxRows(): number { return this.maxRows; }\n  set matAutosizeMaxRows(value: number) { this.maxRows = value; }\n\n  @Input('mat-autosize')\n  get matAutosize(): boolean { return this.enabled; }\n  set matAutosize(value: boolean) { this.enabled = value; }\n\n  @Input()\n  get matTextareaAutosize(): boolean { return this.enabled; }\n  set matTextareaAutosize(value: boolean) { this.enabled = value; }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Self,\n  NgZone,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {CanUpdateErrorState, ErrorStateMatcher, mixinErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs';\nimport {AutofillMonitor} from '@angular/cdk/text-field';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nexport class MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatInputMixinBase = mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput]`,\n  exportAs: 'matInput',\n  host: {\n    /**\n     * @breaking-change 7.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n     */\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[attr.placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[readonly]': 'readonly',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, OnInit, DoCheck, CanUpdateErrorState {\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _inputValueAccessor: {value: any};\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  focused: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly stateChanges: Subject<void> = new Subject<void>();\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  controlType: string = 'mat-input';\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  autofilled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n  protected _disabled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n  protected _id: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input() placeholder: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  protected _required = false;\n\n  /** Input type of the element. */\n  @Input()\n  get type(): string { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      this._elementRef.nativeElement.type = this._type;\n    }\n  }\n  protected _type = 'text';\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): string { return this._inputValueAccessor.value; }\n  set value(value: string) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\n  private _readonly = false;\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(protected _elementRef: ElementRef<HTMLInputElement>,\n              protected _platform: Platform,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n              private _autofillMonitor: AutofillMonitor,\n              ngZone: NgZone) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || this._elementRef.nativeElement;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      ngZone.runOutsideAngular(() => {\n        _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n          let el = event.target as HTMLInputElement;\n          if (!el.value && !el.selectionStart && !el.selectionEnd) {\n            // Note: Just setting `0, 0` doesn't fix the issue. Setting\n            // `1, 1` fixes it for the first time that you type text and\n            // then hold delete. Toggling to `1, 1` and then back to\n            // `0, 0` seems to completely fix it.\n            el.setSelectionRange(1, 1);\n            el.setSelectionRange(0, 0);\n          }\n        });\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n  }\n\n  ngOnInit() {\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n        this.autofilled = event.isAutofilled;\n        this.stateChanges.next();\n      });\n    }\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n  }\n\n  /** Focuses the input. */\n  focus(): void { this._elementRef.nativeElement.focus(); }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && !this.readonly) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. */\n  protected _isTextarea() {\n    return this._elementRef.nativeElement.nodeName.toLowerCase() === 'textarea';\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n        !this.autofilled;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return this.focused || !this.empty; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() { this.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TextFieldModule} from '@angular/cdk/text-field';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\n\n\n@NgModule({\n  declarations: [MatInput, MatTextareaAutosize],\n  imports: [\n    CommonModule,\n    TextFieldModule,\n    MatFormFieldModule,\n  ],\n  exports: [\n    TextFieldModule,\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher],\n})\nexport class MatInputModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel: string = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel: string = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel: string = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel: string = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel: string = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel: string = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel: string = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel: string = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel: string = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n} from '@angular/core';\n\n\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-content',\n  host: {'class': 'mat-card-content'}\n})\nexport class MatCardContent {}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n})\nexport class MatCardTitle {}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n})\nexport class MatCardSubtitle {}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-actions',\n  exportAs: 'matCardActions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n})\nexport class MatCardActions {\n  /** Position of the actions inside the card. */\n  @Input() align: 'start' | 'end' = 'start';\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n})\nexport class MatCardFooter {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-image], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n})\nexport class MatCardImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n})\nexport class MatCardSmImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-md-image], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n})\nexport class MatCardMdImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n})\nexport class MatCardLgImage {}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n})\nexport class MatCardXlImage {}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-avatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n})\nexport class MatCardAvatar {}\n\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card',\n  exportAs: 'matCard',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card'}\n})\nexport class MatCard {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n})\nexport class MatCardHeader {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n})\nexport class MatCardTitleGroup {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatCard,\n  MatCardActions,\n  MatCardAvatar,\n  MatCardContent,\n  MatCardFooter,\n  MatCardHeader,\n  MatCardImage,\n  MatCardLgImage,\n  MatCardMdImage,\n  MatCardSmImage,\n  MatCardSubtitle,\n  MatCardTitle,\n  MatCardTitleGroup,\n  MatCardXlImage,\n} from './card';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatCard,\n    MatCardHeader,\n    MatCardTitleGroup,\n    MatCardContent,\n    MatCardTitle,\n    MatCardSubtitle,\n    MatCardActions,\n    MatCardFooter,\n    MatCardSmImage,\n    MatCardMdImage,\n    MatCardLgImage,\n    MatCardImage,\n    MatCardXlImage,\n    MatCardAvatar,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n    MatCardXlImage, MatCardAvatar,\n  ],\n})\nexport class MatCardModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterViewInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nexport class MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatCheckboxMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewInit, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  private _required: boolean;\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change: EventEmitter<MatCheckboxChange> =\n      new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  _onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Reference to the focused state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  constructor(elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _ngZone: NgZone,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value != this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked: boolean = false;\n\n  /**\n   * Whether the checkbox is disabled. This fully overrides the implementation provided by\n   * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n   */\n  @Input()\n  get disabled() { return this._disabled; }\n  set disabled(value: any) {\n    if (value != this.disabled) {\n      this._disabled = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean { return this._indeterminate; }\n  set indeterminate(value: boolean) {\n    const changed = value != this._indeterminate;\n    this._indeterminate = value;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n  private _indeterminate: boolean = false;\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the checkbox changes.\n    // Since the checkbox uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n\n      // Remove the animation class to avoid animation when the checkbox is moved between containers\n      const animationClass = this._currentAnimationClass;\n\n      this._ngZone.runOutsideAngular(() => {\n        setTimeout(() => {\n          element.classList.remove(animationClass);\n        }, 1000);\n      });\n    }\n  }\n\n  private _emitChangeEvent() {\n    let event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this.ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n\n      // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n      // Angular does not expect events to be raised during change detection, so any state change\n      // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n      // See https://github.com/angular/angular/issues/17793. To work around this, we defer telling\n      // the form control it has been touched until the next tick.\n      Promise.resolve().then(() => this._onTouched());\n    }\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    // Don't transition if animations are disabled.\n    if (this._animationMode === 'NoopAnimations') {\n      return '';\n    }\n\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule],\n  declarations: [MatCheckbox, MatCheckboxRequiredValidator],\n})\nexport class MatCheckboxModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nexport class MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatChipMixinBase =\n    mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\n\nconst CHIP_ATTRIBUTE_NAMES = ['mat-basic-chip'];\n\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-avatar, [matChipAvatar]',\n  host: {'class': 'mat-chip-avatar'}\n})\nexport class MatChipAvatar {}\n\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n  host: {'class': 'mat-chip-trailing-icon'}\n})\nexport class MatChipTrailingIcon {}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled', 'disableRipple'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[class.mat-chip-with-avatar]': 'avatar',\n    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[class.mat-chip-disabled]': 'disabled',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n  },\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable, CanDisableRipple, RippleTarget {\n\n  /** Reference to the RippleRenderer for the chip. */\n  private _chipRipple: RippleRenderer;\n\n  /** Whether the ripples are globally disabled through the RippleGlobalOptions */\n  private _ripplesGloballyDisabled = false;\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._ripplesGloballyDisabled;\n  }\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether the chip list is selectable */\n  chipListSelectable: boolean = true;\n\n  /** The chip avatar */\n  @ContentChild(MatChipAvatar) avatar: MatChipAvatar;\n\n  /** The chip's trailing icon. */\n  @ContentChild(MatChipTrailingIcon) trailingIcon: MatChipTrailingIcon;\n\n  /** The chip's remove toggler. */\n  @ContentChild(forwardRef(() => MatChipRemove)) removeIcon: MatChipRemove;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) {\n    this._selected = coerceBooleanProperty(value);\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: value\n    });\n  }\n  protected _selected: boolean = false;\n\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n  @Input()\n  get value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(value: any) { this._value = value; }\n  protected _value: any;\n\n  /**\n   * Whether or not the chip is selectable. When a chip is not selectable,\n   * changes to it's selected state are always ignored. By default a chip is\n   * selectable, and it becomes non-selectable if it's parent chip list is\n   * not selectable.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable && this.chipListSelectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  protected _selectable: boolean = true;\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (removed) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  protected _removable: boolean = true;\n\n  /** Emits when the chip is focused. */\n  readonly _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  readonly _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\n      new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** Emitted when a chip is to be removed. */\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** The ARIA selected applied to the chip. */\n  get ariaSelected(): string | null {\n    return this.selectable ? this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef,\n              private _ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions) {\n    super(_elementRef);\n\n    this._addHostClassName();\n\n    this._chipRipple = new RippleRenderer(this, _ngZone, _elementRef, platform);\n    this._chipRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    if (globalOptions) {\n      this._ripplesGloballyDisabled = !!globalOptions.disabled;\n      // TODO(paul): Once the speedFactor is removed, we no longer need to copy each single option.\n      this.rippleConfig = {\n        speedFactor: globalOptions.baseSpeedFactor,\n        animation: globalOptions.animation,\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n      };\n    }\n  }\n\n  _addHostClassName() {\n    // Add class for the different chips\n    for (const attr of CHIP_ATTRIBUTE_NAMES) {\n      if (this._elementRef.nativeElement.hasAttribute(attr) ||\n        this._elementRef.nativeElement.tagName.toLowerCase() === attr) {\n        (this._elementRef.nativeElement as HTMLElement).classList.add(attr);\n        return;\n      }\n    }\n    (this._elementRef.nativeElement as HTMLElement).classList.add('mat-standard-chip');\n  }\n\n  ngOnDestroy() {\n    this.destroyed.emit({chip: this});\n    this._chipRipple._removeTriggerEvents();\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    this._selected = true;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: true\n    });\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    this._selected = false;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: false\n    });\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    this._selected = true;\n    // Emit select event when selected changes.\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: true,\n      selected: true\n    });\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    if (!this._hasFocus) {\n      this._elementRef.nativeElement.focus();\n      this._onFocus.next({chip: this});\n    }\n    this._hasFocus = true;\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Ensures events fire properly upon click. */\n  _handleClick(event: Event) {\n    // Check disabled\n    if (this.disabled) {\n      return;\n    }\n\n    event.preventDefault();\n    event.stopPropagation();\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    // When animations are enabled, Angular may end up removing the chip from the DOM a little\n    // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\n    // that moves focus not the next item. To work around the issue, we defer marking the chip\n    // as not focused until the next time the zone stabilizes.\n    this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1))\n      .subscribe(() => {\n        this._ngZone.run(() => {\n          this._hasFocus = false;\n          this._onBlur.next({chip: this});\n        });\n      });\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove mat-chip-trailing-icon',\n    '(click)': '_handleClick($event)',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {}\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(event: Event): void {\n    if (this._parentChip.removable) {\n      this._parentChip.remove();\n    }\n\n    // We need to stop event propagation because otherwise the event will bubble up to the\n    // form field and cause the `onContainerClick` method to be invoked. This method would then\n    // reset the focused chip that has been focused after chip removal. Usually the parent\n    // the parent click listener of the `MatChip` would prevent propagation, but it can happen\n    // that the chip is being removed before the event bubbles up.\n    event.stopPropagation();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** Default options, for the chips module, that can be overridden. */\nexport interface MatChipsDefaultOptions {\n  /** The list of key codes that will trigger a chipEnd event. */\n  separatorKeyCodes: number[];\n}\n\n/** Injection token to be used to override the default options for the chips module. */\nexport const MAT_CHIPS_DEFAULT_OPTIONS =\n    new InjectionToken<MatChipsDefaultOptions>('mat-chips-default-options');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n  Input,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n/** Default color palette for flat buttons (mat-flat-button) */\nconst DEFAULT_FLAT_BUTTON_COLOR = 'primary';\n\n/**\n * List of classes to add to MatButton instances based on host attributes to\n * style as different variants.\n */\nconst BUTTON_HOST_ATTRIBUTES = [\n  'mat-button',\n  'mat-flat-button',\n  'mat-icon-button',\n  'mat-raised-button',\n  'mat-stroked-button',\n  'mat-mini-fab',\n  'mat-fab',\n];\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nexport class MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatButtonMixinBase = mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\n             button[mat-flat-button]`,\n  exportAs: 'matButton',\n  host: {\n    '[disabled]': 'disabled || null',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n\n  /** Whether the button is round. */\n  readonly isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  readonly isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated Platform checks for SSR are no longer needed\n               * @breaking-change 7.0.0\n               */\n              // tslint:disable-next-line:no-unused-variable\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 7.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // For each of the variant selectors that is prevent in the button's host\n    // attributes, add the correct corresponding class.\n    for (const attr of BUTTON_HOST_ATTRIBUTES) {\n      if (this._hasHostAttributes(attr)) {\n        (elementRef.nativeElement as HTMLElement).classList.add(attr);\n      }\n    }\n\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n\n    if (this.isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    } else if (this._hasHostAttributes('mat-flat-button')) {\n      this.color = DEFAULT_FLAT_BUTTON_COLOR;\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Raised Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    // Note that we ignore the user-specified tabindex when it's disabled for\n    // consistency with the `mat-button` applied on native buttons where even\n    // though they have an index, they're not tabbable.\n    '[attr.tabindex]': 'disabled ? -1 : (tabIndex || 0)',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n  /** Tabindex of the button. */\n  @Input() tabIndex: number;\n\n  constructor(\n    platform: Platform,\n    focusMonitor: FocusMonitor,\n    elementRef: ElementRef,\n    // @breaking-change 7.0.0 `animationMode` parameter to be made required.\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n    super(elementRef, platform, focusMonitor, animationMode);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatAnchor, MatButton} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  Attribute,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {SelectionModel} from '@angular/cdk/collections';\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n// Boilerplate for applying mixins to MatButtonToggleGroup and MatButtonToggleGroupMultiple\n/** @docs-private */\nexport class MatButtonToggleGroupBase {}\nexport const _MatButtonToggleGroupMixinBase = mixinDisabled(MatButtonToggleGroupBase);\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\n/**\n * @deprecated Use `MatButtonToggleGroup` instead.\n * @breaking-change 7.0.0\n */\nexport class MatButtonToggleGroupMultiple {}\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  constructor(\n    /** The MatButtonToggle that emits the event. */\n    public source: MatButtonToggle,\n\n    /** The value assigned to the MatButtonToggle. */\n    public value: any) {}\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group',\n  providers: [\n    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n    {provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup},\n  ],\n  inputs: ['disabled'],\n  host: {\n    'role': 'group',\n    'class': 'mat-button-toggle-group',\n    '[attr.aria-disabled]': 'disabled',\n    '[class.mat-button-toggle-vertical]': 'vertical'\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup extends _MatButtonToggleGroupMixinBase implements\n  ControlValueAccessor, CanDisable, OnInit, AfterContentInit {\n\n  private _vertical = false;\n  private _multiple = false;\n  private _selectionModel: SelectionModel<MatButtonToggle>;\n\n  /**\n   * Reference to the raw value that the consumer tried to assign. The real\n   * value will exclude any values from this one that don't correspond to a\n   * toggle. Useful for the cases where the value is assigned before the toggles\n   * have been initialized or at the same that they're being swapped out.\n   */\n  private _rawValue: any;\n\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle.name = this._name);\n    }\n  }\n  private _name = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any {\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\n\n    if (this.multiple) {\n      return selected.map(toggle => toggle.value);\n    }\n\n    return selected[0] ? selected[0].value : undefined;\n  }\n  set value(newValue: any) {\n    this._setSelectionByValue(newValue);\n    this.valueChange.emit(this.value);\n  }\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() readonly valueChange = new EventEmitter<any>();\n\n  /** Selected button toggles in the group. */\n  get selected() {\n    const selected = this._selectionModel.selected;\n    return this.multiple ? selected : (selected[0] || null);\n  }\n\n  /** Whether multiple button toggles can be selected. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Event emitted when the group's value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatButtonToggle>(this.multiple, undefined, false);\n  }\n\n  ngAfterContentInit() {\n    this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle._markForCheck());\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    const selected = this.selected;\n    const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n    const event = new MatButtonToggleChange(source!, this.value);\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  /**\n   * Syncs a button toggle's selected state with the model value.\n   * @param toggle Toggle to be synced.\n   * @param select Whether the toggle should be selected.\n   * @param isUserInput Whether the change was a result of a user interaction.\n   */\n  _syncButtonToggle(toggle: MatButtonToggle, select: boolean, isUserInput = false) {\n    // Deselect the currently-selected toggle, if we're in single-selection\n    // mode and the button being toggled isn't selected at the moment.\n    if (!this.multiple && this.selected && !toggle.checked) {\n      (this.selected as MatButtonToggle).checked = false;\n    }\n\n    if (select) {\n      this._selectionModel.select(toggle);\n    } else {\n      this._selectionModel.deselect(toggle);\n    }\n\n    // Only emit the change event for user input.\n    if (isUserInput) {\n      this._emitChangeEvent();\n    }\n\n    // Note: we emit this one no matter whether it was a user interaction, because\n    // it is used by Angular to sync up the two-way data binding.\n    this.valueChange.emit(this.value);\n  }\n\n  /** Checks whether a button toggle is selected. */\n  _isSelected(toggle: MatButtonToggle) {\n    return this._selectionModel.isSelected(toggle);\n  }\n\n  /** Determines whether a button toggle should be checked on init. */\n  _isPrechecked(toggle: MatButtonToggle) {\n    if (typeof this._rawValue === 'undefined') {\n      return false;\n    }\n\n    if (this.multiple && Array.isArray(this._rawValue)) {\n      return this._rawValue.some(value => toggle.value != null && value === toggle.value);\n    }\n\n    return toggle.value === this._rawValue;\n  }\n\n  /** Updates the selection state of the toggles in the group based on a value. */\n  private _setSelectionByValue(value: any|any[]) {\n    this._rawValue = value;\n\n    if (!this._buttonToggles) {\n      return;\n    }\n\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw Error('Value must be an array in multiple-selection mode.');\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n    } else {\n      this._clearSelection();\n      this._selectValue(value);\n    }\n  }\n\n  /** Clears the selected toggles. */\n  private _clearSelection() {\n    this._selectionModel.clear();\n    this._buttonToggles.forEach(toggle => toggle.checked = false);\n  }\n\n  /** Selects a value if there's a toggle that corresponds to it. */\n  private _selectValue(value: any) {\n    const correspondingOption = this._buttonToggles.find(toggle => {\n      return toggle.value != null && toggle.value === value;\n    });\n\n    if (correspondingOption) {\n      correspondingOption.checked = true;\n      this._selectionModel.select(correspondingOption);\n    }\n  }\n}\n\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nexport class MatButtonToggleBase {}\nexport const _MatButtonToggleMixinBase = mixinDisableRipple(MatButtonToggleBase);\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disableRipple'],\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    'class': 'mat-button-toggle',\n    // Clear out the native tabindex here since we forward it to the underlying button\n    '[attr.tabindex]': 'null',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatButtonToggle extends _MatButtonToggleMixinBase implements OnInit,\n  CanDisableRipple, OnDestroy {\n\n  private _isSingleSelector = false;\n  private _checked = false;\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  @ViewChild('button') _buttonElement: ElementRef<HTMLButtonElement>;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** Unique ID for the underlying `button` element. */\n  get buttonId(): string { return `${this.id}-button`; }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input() value: any;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean {\n    return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n  }\n  set checked(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._checked) {\n      this._checked = newValue;\n\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n      }\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n  }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Event emitted when the group value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _elementRef: ElementRef<HTMLElement>,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 8.0.0 `defaultTabIndex` to be made a required parameter.\n              @Attribute('tabindex') defaultTabIndex: string) {\n    super();\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n    this.buttonToggleGroup = toggleGroup;\n  }\n\n  ngOnInit() {\n    this._isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n    this._type = this._isSingleSelector ? 'radio' : 'checkbox';\n    this.id = this.id || `mat-button-toggle-${_uniqueIdCounter++}`;\n\n    if (this._isSingleSelector) {\n      this.name = this.buttonToggleGroup.name;\n    }\n\n    if (this.buttonToggleGroup && this.buttonToggleGroup._isPrechecked(this)) {\n      this.checked = true;\n    }\n\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._buttonElement.nativeElement.focus();\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native button. */\n  _onButtonClick() {\n    const newChecked = this._isSingleSelector ? true : !this._checked;\n\n    if (newChecked !== this._checked) {\n      this._checked = newChecked;\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n        this.buttonToggleGroup._onTouched();\n      }\n    }\n    // Emit a change event when it's the single selector\n    this.change.emit(new MatButtonToggleChange(this, this.value));\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When the group value changes, the button will not be notified.\n    // Use `markForCheck` to explicit update button toggle's status.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatButtonToggle, MatButtonToggleGroup} from './button-toggle';\n\n\n@NgModule({\n  imports: [MatCommonModule, MatRippleModule],\n  exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n  declarations: [MatButtonToggleGroup, MatButtonToggle],\n})\nexport class MatButtonToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  ElementRef,\n  Input,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n  EventEmitter,\n  Output,\n  InjectionToken,\n  Inject,\n} from '@angular/core';\nimport {\n  MatOption,\n  MatOptgroup,\n  MAT_OPTION_PARENT_COMPONENT,\n  mixinDisableRipple,\n  CanDisableRipple,\n} from '@angular/material/core';\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected. */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nexport class MatAutocompleteBase {}\nexport const _MatAutocompleteMixinBase = mixinDisableRipple(MatAutocompleteBase);\n\n/** Default `mat-autocomplete` options that can be overridden. */\nexport interface MatAutocompleteDefaultOptions {\n  /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n  autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nexport const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<MatAutocompleteDefaultOptions>('mat-autocomplete-default-options', {\n      providedIn: 'root',\n      factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY(): MatAutocompleteDefaultOptions {\n  return {autoActiveFirstOption: false};\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel: boolean = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean { return this._isOpen && this.showPanel; }\n  _isOpen: boolean = false;\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /**\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n   */\n  @Input()\n  get autoActiveFirstOption(): boolean { return this._autoActiveFirstOption; }\n  set autoActiveFirstOption(value: boolean) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  private _autoActiveFirstOption: boolean;\n\n  /**\n   * Specify the width of the autocomplete panel.  Can be any CSS sizing value, otherwise it will\n   * match the width of its host.\n   */\n  @Input() panelWidth: string | number;\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /** Event that is emitted when the autocomplete panel is opened. */\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event that is emitted when the autocomplete panel is closed. */\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(value: string) {\n    if (value && value.length) {\n      value.split(' ').forEach(className => this._classList[className.trim()] = true);\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS) defaults: MatAutocompleteDefaultOptions) {\n    super();\n\n    this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibility state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._classList['mat-autocomplete-visible'] = this.showPanel;\n    this._classList['mat-autocomplete-hidden'] = !this.showPanel;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\n\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\n@Directive({\n  selector: '[matAutocompleteOrigin]',\n  exportAs: 'matAutocompleteOrigin',\n})\nexport class MatAutocompleteOrigin {\n  constructor(\n      /** Reference to the element on which the directive is applied. */\n      public elementRef: ElementRef<HTMLElement>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './autocomplete-trigger';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [\n    MatAutocomplete,\n    MatOptionModule,\n    MatAutocompleteTrigger,\n    MatAutocompleteOrigin,\n    MatCommonModule\n  ],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n})\nexport class MatAutocompleteModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AriaDescriber} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Renderer2,\n} from '@angular/core';\nimport {ThemePalette} from '@angular/material/core';\n\n\nlet nextId = 0;\n\nexport type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after';\nexport type MatBadgeSize = 'small' | 'medium' | 'large';\n\n/** Directive to display a text badge. */\n@Directive({\n  selector: '[matBadge]',\n  host: {\n    'class': 'mat-badge',\n    '[class.mat-badge-overlap]': 'overlap',\n    '[class.mat-badge-above]': 'isAbove()',\n    '[class.mat-badge-below]': '!isAbove()',\n    '[class.mat-badge-before]': '!isAfter()',\n    '[class.mat-badge-after]': 'isAfter()',\n    '[class.mat-badge-small]': 'size === \"small\"',\n    '[class.mat-badge-medium]': 'size === \"medium\"',\n    '[class.mat-badge-large]': 'size === \"large\"',\n    '[class.mat-badge-hidden]': 'hidden || !_hasContent',\n  },\n})\nexport class MatBadge implements OnDestroy {\n  /** Whether the badge has any content. */\n  _hasContent = false;\n\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n  @Input('matBadgeColor')\n  get color(): ThemePalette { return this._color; }\n  set color(value: ThemePalette) {\n    this._setColor(value);\n    this._color = value;\n  }\n  private _color: ThemePalette = 'primary';\n\n  /** Whether the badge should overlap its contents or not */\n  @Input('matBadgeOverlap')\n  get overlap(): boolean { return this._overlap; }\n  set overlap(val: boolean) {\n    this._overlap = coerceBooleanProperty(val);\n  }\n  private _overlap: boolean = true;\n\n  /**\n   * Position the badge should reside.\n   * Accepts any combination of 'above'|'below' and 'before'|'after'\n   */\n  @Input('matBadgePosition') position: MatBadgePosition = 'above after';\n\n  /** The content for the badge */\n  @Input('matBadge')\n  get content(): string { return this._content; }\n  set content(value: string) {\n    this._content = value;\n    this._hasContent = value != null && `${value}`.trim().length > 0;\n    this._updateTextContent();\n  }\n  private _content: string;\n\n  /** Message used to describe the decorated element via aria-describedby */\n  @Input('matBadgeDescription')\n  get description(): string { return this._description; }\n  set description(newDescription: string) {\n    if (newDescription !== this._description) {\n      this._updateHostAriaDescription(newDescription, this._description);\n      this._description = newDescription;\n    }\n  }\n  private _description: string;\n\n  /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n  @Input('matBadgeSize') size: MatBadgeSize = 'medium';\n\n  /** Whether the badge is hidden. */\n  @Input('matBadgeHidden')\n  get hidden(): boolean { return this._hidden; }\n  set hidden(val: boolean) {\n    this._hidden = coerceBooleanProperty(val);\n  }\n  private _hidden: boolean;\n\n  /** Unique id for the badge */\n  _id: number = nextId++;\n\n  private _badgeElement: HTMLElement;\n\n  constructor(\n      @Optional() @Inject(DOCUMENT) private _document: any,\n      private _ngZone: NgZone,\n      private _elementRef: ElementRef<HTMLElement>,\n      private _ariaDescriber: AriaDescriber,\n      /** @breaking-change 8.0.0 Make _renderer a required param and remove _document. */\n      private _renderer?: Renderer2) {}\n\n  /** Whether the badge is above the host or not */\n  isAbove(): boolean {\n    return this.position.indexOf('below') === -1;\n  }\n\n  /** Whether the badge is after the host or not */\n  isAfter(): boolean {\n    return this.position.indexOf('before') === -1;\n  }\n\n  ngOnDestroy() {\n    if (this.description && this._badgeElement) {\n      this._ariaDescriber.removeDescription(this._badgeElement, this.description);\n    }\n  }\n\n  /** Injects a span element into the DOM with the content. */\n  private _updateTextContent(): HTMLSpanElement {\n    if (!this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n    } else {\n      this._badgeElement.textContent = this.content;\n    }\n    return this._badgeElement;\n  }\n\n  /** Creates the badge element */\n  private _createBadgeElement(): HTMLElement {\n    // @breaking-change 8.0.0 Remove null check for _renderer\n    const rootNode = this._renderer || this._document;\n    const badgeElement = rootNode.createElement('span');\n    const activeClass = 'mat-badge-active';\n\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n    badgeElement.classList.add('mat-badge-content');\n    badgeElement.textContent = this.content;\n\n    if (this.description) {\n      badgeElement.setAttribute('aria-label', this.description);\n    }\n\n    this._elementRef.nativeElement.appendChild(badgeElement);\n\n    // animate in after insertion\n    if (typeof requestAnimationFrame === 'function') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          badgeElement.classList.add(activeClass);\n        });\n      });\n    } else {\n      badgeElement.classList.add(activeClass);\n    }\n\n    return badgeElement;\n  }\n\n  /** Sets the aria-label property on the element */\n  private _updateHostAriaDescription(newDescription: string, oldDescription: string): void {\n    // ensure content available before setting label\n    const content = this._updateTextContent();\n\n    if (oldDescription) {\n      this._ariaDescriber.removeDescription(content, oldDescription);\n    }\n\n    if (newDescription) {\n      this._ariaDescriber.describe(content, newDescription);\n    }\n  }\n\n  /** Adds css theme class given the color to the component host */\n  private _setColor(colorPalette: ThemePalette) {\n    if (colorPalette !== this._color) {\n      if (this._color) {\n        this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\n      }\n      if (colorPalette) {\n        this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatBadge} from './badge';\n\n\n@NgModule({\n  imports: [\n    A11yModule,\n    MatCommonModule\n  ],\n  exports: [MatBadge],\n  declarations: [MatBadge],\n})\nexport class MatBadgeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a bottom sheet. */\nexport const MAT_BOTTOM_SHEET_DATA = new InjectionToken<any>('MatBottomSheetData');\n\n/**\n * Configuration used when opening a bottom sheet.\n */\nexport class MatBottomSheetConfig<D = any> {\n  /** The view container to place the overlay for the bottom sheet into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** Extra CSS classes to be added to the bottom sheet container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the bottom sheet. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Whether the bottom sheet has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop. */\n  backdropClass?: string;\n\n  /** Whether the user can use escape or clicking outside to close the bottom sheet. */\n  disableClose?: boolean = false;\n\n  /** Aria label to assign to the bottom sheet element. */\n  ariaLabel?: string | null = null;\n\n  /** Whether the bottom sheet should close when the user goes backwards/forwards in history. */\n  closeOnNavigation?: boolean = true;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material bottom sheet. */\nexport const matBottomSheetAnimations: {\n  readonly bottomSheetState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a bottom sheet. */\n  bottomSheetState: trigger('state', [\n    state('void, hidden', style({transform: 'translateY(100%)'})),\n    state('visible', style({transform: 'translateY(0%)'})),\n    transition('visible => void, visible => hidden',\n        animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible',\n        animate(`${AnimationDurations.EXITING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  EventEmitter,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {MatBottomSheetConfig} from './bottom-sheet-config';\nimport {matBottomSheetAnimations} from './bottom-sheet-animations';\nimport {Subscription} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\n\n// TODO(crisbeto): consolidate some logic between this, MatDialog and MatSnackBar\n\n/**\n * Internal component that wraps user-provided bottom sheet content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-bottom-sheet-container',\n  templateUrl: 'bottom-sheet-container.html',\n  styleUrls: ['bottom-sheet-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matBottomSheetAnimations.bottomSheetState],\n  host: {\n    'class': 'mat-bottom-sheet-container',\n    'tabindex': '-1',\n    'role': 'dialog',\n    'aria-modal': 'true',\n    '[attr.aria-label]': 'bottomSheetConfig?.ariaLabel',\n    '[@state]': '_animationState',\n    '(@state.start)': '_onAnimationStart($event)',\n    '(@state.done)': '_onAnimationDone($event)'\n  },\n})\nexport class MatBottomSheetContainer extends BasePortalOutlet implements OnDestroy {\n  private _breakpointSubscription: Subscription;\n\n  /** The portal outlet inside of this container into which the content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The state of the bottom sheet animations. */\n  _animationState: 'void' | 'visible' | 'hidden' = 'void';\n\n  /** Emits whenever the state of the animation changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** The class that traps and manages focus within the bottom sheet. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the bottom sheet was opened. */\n  private _elementFocusedBeforeOpened: HTMLElement | null = null;\n\n  /** Server-side rendering-compatible reference to the global document object. */\n  private _document: Document;\n\n  /** Whether the component has been destroyed. */\n  private _destroyed: boolean;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    breakpointObserver: BreakpointObserver,\n    @Optional() @Inject(DOCUMENT) document: any,\n    /** The bottom sheet configuration. */\n    public bottomSheetConfig: MatBottomSheetConfig) {\n    super();\n\n    this._document = document;\n    this._breakpointSubscription = breakpointObserver\n      .observe([Breakpoints.Medium, Breakpoints.Large, Breakpoints.XLarge])\n      .subscribe(() => {\n        this._toggleClass('mat-bottom-sheet-container-medium',\n            breakpointObserver.isMatched(Breakpoints.Medium));\n        this._toggleClass('mat-bottom-sheet-container-large',\n            breakpointObserver.isMatched(Breakpoints.Large));\n        this._toggleClass('mat-bottom-sheet-container-xlarge',\n            breakpointObserver.isMatched(Breakpoints.XLarge));\n      });\n  }\n\n  /** Attach a component portal as content to this bottom sheet container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this bottom sheet container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Begin animation of bottom sheet entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the bottom sheet exiting from view. */\n  exit(): void {\n    if (!this._destroyed) {\n      this._animationState = 'hidden';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._breakpointSubscription.unsubscribe();\n    this._destroyed = true;\n  }\n\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'visible') {\n      this._trapFocus();\n    } else if (event.toState === 'hidden') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  private _toggleClass(cssClass: string, add: boolean) {\n    const classList = this._elementRef.nativeElement.classList;\n    add ? classList.add(cssClass) : classList.remove(cssClass);\n  }\n\n  private _validatePortalAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach bottom sheet content after content is already attached');\n    }\n  }\n\n  private _setPanelClass() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClass = this.bottomSheetConfig.panelClass;\n\n    if (Array.isArray(panelClass)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      panelClass.forEach(cssClass => element.classList.add(cssClass));\n    } else if (panelClass) {\n      element.classList.add(panelClass);\n    }\n  }\n\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    this._focusTrap.focusInitialElementWhenReady();\n  }\n\n  /** Restores focus to the element that was focused before the bottom sheet opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the bottom sheet was opened. */\n  private _savePreviouslyFocusedElement() {\n    this._elementFocusedBeforeOpened = this._document.activeElement as HTMLElement;\n\n    // The `focus` method isn't available during server-side rendering.\n    if (this._elementRef.nativeElement.focus) {\n      Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PortalModule,\n  ],\n  exports: [MatBottomSheetContainer, MatCommonModule],\n  declarations: [MatBottomSheetContainer],\n  entryComponents: [MatBottomSheetContainer],\n})\nexport class MatBottomSheetModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Location} from '@angular/common';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {merge, Observable, Subject, SubscriptionLike, Subscription} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n/**\n * Reference to a bottom sheet dispatched from the bottom sheet service.\n */\nexport class MatBottomSheetRef<T = any, R = any> {\n  /** Instance of the component making up the content of the bottom sheet. */\n  instance: T;\n\n  /**\n   * Instance of the component into which the bottom sheet content is projected.\n   * @docs-private\n   */\n  containerInstance: MatBottomSheetContainer;\n\n  /** Subject for notifying the user that the bottom sheet has been dismissed. */\n  private readonly _afterDismissed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the bottom sheet has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Result to be passed down to the `afterDismissed` stream. */\n  private _result: R | undefined;\n\n  /** Subscription to changes in the user's location. */\n  private _locationChanges: SubscriptionLike = Subscription.EMPTY;\n\n  constructor(\n    containerInstance: MatBottomSheetContainer,\n    private _overlayRef: OverlayRef,\n    location?: Location) {\n    this.containerInstance = containerInstance;\n\n    // Emit when opening animation completes\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'visible'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'hidden'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._locationChanges.unsubscribe();\n      this._overlayRef.dispose();\n      this._afterDismissed.next(this._result);\n      this._afterDismissed.complete();\n    });\n\n    if (!containerInstance.bottomSheetConfig.disableClose) {\n      merge(\n        _overlayRef.backdropClick(),\n        _overlayRef.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE))\n      ).subscribe(() => this.dismiss());\n    }\n\n    if (location) {\n      this._locationChanges = location.subscribe(() => {\n        if (containerInstance.bottomSheetConfig.closeOnNavigation) {\n          this.dismiss();\n        }\n      });\n    }\n  }\n\n  /**\n   * Dismisses the bottom sheet.\n   * @param result Data to be passed back to the bottom sheet opener.\n   */\n  dismiss(result?: R): void {\n    if (!this._afterDismissed.closed) {\n      // Transition the backdrop in parallel to the bottom sheet.\n      this.containerInstance._animationStateChanged.pipe(\n        filter(event => event.phaseName === 'start'),\n        take(1)\n      ).subscribe(() => this._overlayRef.detachBackdrop());\n\n      this._result = result;\n      this.containerInstance.exit();\n    }\n  }\n\n  /** Gets an observable that is notified when the bottom sheet is finished closing. */\n  afterDismissed(): Observable<R | undefined> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the bottom sheet has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {ComponentRef, Injectable, Injector, Optional, SkipSelf, TemplateRef} from '@angular/core';\nimport {Location} from '@angular/common';\nimport {of as observableOf} from 'rxjs';\nimport {MAT_BOTTOM_SHEET_DATA, MatBottomSheetConfig} from './bottom-sheet-config';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\nimport {MatBottomSheetModule} from './bottom-sheet-module';\nimport {MatBottomSheetRef} from './bottom-sheet-ref';\n\n\n/**\n * Service to trigger Material Design bottom sheets.\n */\n@Injectable({providedIn: MatBottomSheetModule})\nexport class MatBottomSheet {\n  private _bottomSheetRefAtThisLevel: MatBottomSheetRef<any> | null = null;\n\n  /** Reference to the currently opened bottom sheet. */\n  get _openedBottomSheetRef(): MatBottomSheetRef<any> | null {\n    const parent = this._parentBottomSheet;\n    return parent ? parent._openedBottomSheetRef : this._bottomSheetRefAtThisLevel;\n  }\n\n  set _openedBottomSheetRef(value: MatBottomSheetRef<any> | null) {\n    if (this._parentBottomSheet) {\n      this._parentBottomSheet._openedBottomSheetRef = value;\n    } else {\n      this._bottomSheetRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() @SkipSelf() private _parentBottomSheet: MatBottomSheet,\n      @Optional() private _location?: Location) {}\n\n  open<T, D = any, R = any>(component: ComponentType<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n  open<T, D = any, R = any>(template: TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R> {\n\n    const _config = _applyConfigDefaults(config);\n    const overlayRef = this._createOverlay(_config);\n    const container = this._attachContainer(overlayRef, _config);\n    const ref = new MatBottomSheetRef<T, R>(container, overlayRef, this._location);\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      container.attachTemplatePortal(new TemplatePortal<T>(componentOrTemplateRef, null!, {\n        $implicit: _config.data,\n        bottomSheetRef: ref\n      } as any));\n    } else {\n      const portal = new ComponentPortal(componentOrTemplateRef, undefined,\n            this._createInjector(_config, ref));\n      const contentRef = container.attachComponentPortal(portal);\n      ref.instance = contentRef.instance;\n    }\n\n    // When the bottom sheet is dismissed, clear the reference to it.\n    ref.afterDismissed().subscribe(() => {\n      // Clear the bottom sheet ref if it hasn't already been replaced by a newer one.\n      if (this._openedBottomSheetRef == ref) {\n        this._openedBottomSheetRef = null;\n      }\n    });\n\n    if (this._openedBottomSheetRef) {\n      // If a bottom sheet is already in view, dismiss it and enter the\n      // new bottom sheet after exit animation is complete.\n      this._openedBottomSheetRef.afterDismissed().subscribe(() => ref.containerInstance.enter());\n      this._openedBottomSheetRef.dismiss();\n    } else {\n      // If no bottom sheet is in view, enter the new bottom sheet.\n      ref.containerInstance.enter();\n    }\n\n    this._openedBottomSheetRef = ref;\n\n    return ref;\n  }\n\n  /**\n   * Dismisses the currently-visible bottom sheet.\n   */\n  dismiss(): void {\n    if (this._openedBottomSheetRef) {\n      this._openedBottomSheetRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the bottom sheet container component to the overlay.\n   */\n  private _attachContainer(overlayRef: OverlayRef,\n                           config: MatBottomSheetConfig): MatBottomSheetContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatBottomSheetConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatBottomSheetContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatBottomSheetContainer> = overlayRef.attach(containerPortal);\n    return containerRef.instance;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified bottom sheet config.\n   */\n  private _createOverlay(config: MatBottomSheetConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig({\n      direction: config.direction,\n      hasBackdrop: config.hasBackdrop,\n      maxWidth: '100%',\n      scrollStrategy: this._overlay.scrollStrategies.block(),\n      positionStrategy: this._overlay.position()\n        .global()\n        .centerHorizontally()\n        .bottom('0')\n    });\n\n    if (config.backdropClass) {\n      overlayConfig.backdropClass = config.backdropClass;\n    }\n\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a bottom sheet component.\n   * @param config Config that was used to create the bottom sheet.\n   * @param bottomSheetRef Reference to the bottom sheet.\n   */\n  private _createInjector<T>(config: MatBottomSheetConfig,\n                             bottomSheetRef: MatBottomSheetRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap<any, any>([\n      [MatBottomSheetRef, bottomSheetRef],\n      [MAT_BOTTOM_SHEET_DATA, config.data]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the bottom sheet config.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(config?: MatBottomSheetConfig): MatBottomSheetConfig {\n  return {...new MatBottomSheetConfig(), ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\nimport {mixinDisabled, CanDisable} from '../common-behaviors/disabled';\n\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nexport class MatOptgroupBase { }\nexport const _MatOptgroupMixinBase = mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  styleUrls: ['optgroup.css'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n})\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {MatOptgroup} from './optgroup';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT =\n    new InjectionToken<MatOptionParentComponent>('MAT_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  styleUrls: ['option.css'],\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption implements AfterViewChecked, OnDestroy {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _mostRecentViewValue = '';\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() { return this._parent && this._parent.multiple; }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** The unique ID of the option. */\n  @Input() id: string = `mat-option-${_uniqueIdCounter++}`;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple() { return this._parent && this._parent.disableRipple; }\n\n  /** Event emitted when the option is selected or deselected. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n\n  /** Emits when the state of the option changes and any parents have to be notified. */\n  readonly _stateChanges = new Subject<void>();\n\n  constructor(\n    private _element: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() readonly group: MatOptgroup) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Sets focus onto this option. */\n  focus(): void {\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * `Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.`\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  ngAfterViewChecked() {\n    // Since parent components could be using the option's label to display the selected values\n    // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n    // relatively cheap, however we still limit them only to selected options in order to avoid\n    // hitting the DOM too often.\n    if (this._selected) {\n      const viewValue = this.viewValue;\n\n      if (viewValue !== this._mostRecentViewValue) {\n        this._mostRecentViewValue = viewValue;\n        this._stateChanges.next();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function _countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n  optionGroups: QueryList<MatOptgroup>): number {\n\n  if (optionGroups.length) {\n    let optionsArray = options.toArray();\n    let groups = optionGroups.toArray();\n    let groupCounter = 0;\n\n    for (let i = 0; i < optionIndex + 1; i++) {\n      if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n        groupCounter++;\n      }\n    }\n\n    return groupCounter;\n  }\n\n  return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function _getOptionScrollPosition(optionIndex: number, optionHeight: number,\n    currentScrollPosition: number, panelHeight: number): number {\n  const optionOffset = optionIndex * optionHeight;\n\n  if (optionOffset < currentScrollPosition) {\n    return optionOffset;\n  }\n\n  if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n    return Math.max(0, optionOffset - panelHeight + optionHeight);\n  }\n\n  return currentScrollPosition;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n\n@NgModule({\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup]\n})\nexport class MatOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MAT_LABEL_GLOBAL_OPTIONS =\n  new InjectionToken<LabelOptions>('mat-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n  /**\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n   * Default behavior is assumed to be `auto`.\n   */\n  float?: FloatLabelType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the MatFormField. */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /**\n   * Whether the input is currently in an autofilled state. If property is not present on the\n   * control it is assumed to be false.\n   */\n  readonly autofilled?: boolean;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/**\n * The placeholder text for an `MatFormField`.\n * @deprecated Use `<mat-label>` to specify the label and the `placeholder` attribute to specify the\n *     placeholder.\n * @breaking-change 8.0.0\n */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed the the front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  FloatLabelType,\n  LabelOptions,\n  MAT_LABEL_GLOBAL_OPTIONS,\n  mixinColor,\n} from '@angular/material/core';\nimport {EMPTY, fromEvent, merge} from 'rxjs';\nimport {startWith, take} from 'rxjs/operators';\nimport {MatError} from './error';\nimport {matFormFieldAnimations} from './form-field-animations';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {Platform} from '@angular/cdk/platform';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nlet nextUniqueId = 0;\nconst floatingLabelScale = 0.75;\nconst outlineGapPadding = 5;\n\n\n/**\n * Boilerplate for applying mixins to MatFormField.\n * @docs-private\n */\nexport class MatFormFieldBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/**\n * Base class to which we're applying the form field mixins.\n * @docs-private\n */\nexport const _MatFormFieldMixinBase = mixinColor(MatFormFieldBase, 'primary');\n\n/** Possible appearance styles for the form field. */\nexport type MatFormFieldAppearance = 'legacy' | 'standard' | 'fill' | 'outline';\n\n/**\n * Represents the default options form the form field that can be configured\n * using the `MAT_FORM_FIELD_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatFormFieldDefaultOptions {\n  appearance?: MatFormFieldAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all form field within an app.\n */\nexport const MAT_FORM_FIELD_DEFAULT_OPTIONS =\n    new InjectionToken<MatFormFieldDefaultOptions>('MAT_FORM_FIELD_DEFAULT_OPTIONS');\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here.\n  // The MatInput styles are fairly minimal so it shouldn't be a big deal for people who\n  // aren't using MatInput.\n  styleUrls: [\n    'form-field.css',\n    'form-field-fill.css',\n    'form-field-legacy.css',\n    'form-field-outline.css',\n    'form-field-standard.css',\n    '../input/input.css',\n  ],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-form-field',\n    '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n    '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n    '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n    '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-form-field-autofilled]': '_control.autofilled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n    '[class._mat-animation-noopable]': '!_animationsEnabled',\n  },\n  inputs: ['color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField extends _MatFormFieldMixinBase\n    implements AfterContentInit, AfterContentChecked, AfterViewInit, CanColor {\n  private _labelOptions: LabelOptions;\n  private _outlineGapCalculationNeeded = false;\n\n  /** The form-field appearance style. */\n  @Input()\n  get appearance(): MatFormFieldAppearance { return this._appearance; }\n  set appearance(value: MatFormFieldAppearance) {\n    const oldValue = this._appearance;\n\n    this._appearance = value || (this._defaults && this._defaults.appearance) || 'legacy';\n\n    if (this._appearance === 'outline' && oldValue !== value) {\n      // @breaking-change 7.0.0 Remove this check and else block once _ngZone is required.\n      if (this._ngZone) {\n        this._ngZone!.onStable.pipe(take(1)).subscribe(() => {\n          this._ngZone!.runOutsideAngular(() => this.updateOutlineGap());\n        });\n      } else {\n        Promise.resolve().then(() => this.updateOutlineGap());\n      }\n    }\n  }\n  _appearance: MatFormFieldAppearance;\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker(): boolean { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: boolean) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat(): boolean {\n    return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat(): boolean { return this.floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel(): string { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  // Unique id for the internal form field label.\n  _labelId = `mat-form-field-label-${nextUniqueId++}`;\n\n  /**\n   * Whether the label should always float, never float or float as the user types.\n   *\n   * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n   * way to make the floating label emulate the behavior of a standard input placeholder. However\n   * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n   * appearances the `never` option has been disabled in favor of just using the placeholder.\n   */\n  @Input()\n  get floatLabel(): FloatLabelType {\n    return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n  }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  /** Whether the Angular animations are enabled. */\n  _animationsEnabled: boolean;\n\n  /**\n   * @deprecated\n   * @breaking-change 7.0.0\n   */\n  @ViewChild('underline') underlineRef: ElementRef;\n\n  @ViewChild('connectionContainer') _connectionContainerRef: ElementRef;\n  @ViewChild('inputContainer') _inputContainerRef: ElementRef;\n  @ViewChild('label') private _label: ElementRef;\n  @ContentChild(MatFormFieldControl) _control: MatFormFieldControl<any>;\n  @ContentChild(MatPlaceholder) _placeholderChild: MatPlaceholder;\n  @ContentChild(MatLabel) _labelChild: MatLabel;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions,\n      @Optional() private _dir: Directionality,\n      @Optional() @Inject(MAT_FORM_FIELD_DEFAULT_OPTIONS)\n          private _defaults: MatFormFieldDefaultOptions,\n      // @breaking-change 7.0.0 _platform, _ngZone and _animationMode to be made required.\n      private _platform?: Platform,\n      private _ngZone?: NgZone,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) _animationMode?: string) {\n    super(_elementRef);\n\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n    this._animationsEnabled = _animationMode !== 'NoopAnimations';\n\n    // Set the default through here so we invoke the setter on the first run.\n    this.appearance = (_defaults && _defaults.appearance) ? _defaults.appearance : 'legacy';\n  }\n\n  /**\n   * Gets an ElementRef for the element that a overlay attached to the form-field should be\n   * positioned relative to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._connectionContainerRef || this._elementRef;\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n    if (this._control.controlType) {\n      this._elementRef.nativeElement.classList\n          .add(`mat-form-field-type-${this._control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    this._control.stateChanges.pipe(startWith(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Run change detection if the value, prefix, or suffix changes.\n    const valueChanges = this._control.ngControl && this._control.ngControl.valueChanges || EMPTY;\n    merge(valueChanges, this._prefixChildren.changes, this._suffixChildren.changes)\n        .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n    if (this._outlineGapCalculationNeeded) {\n      this.updateOutlineGap();\n    }\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: string): boolean {\n    const ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && ngControl[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control && this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this.appearance === 'legacy' && !this._hasLabel() ||\n        this._hasLabel() && !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      // If animations are disabled, we shouldn't go in here,\n      // because the `transitionend` will never fire.\n      if (this._animationsEnabled) {\n        this._showAlwaysAnimate = true;\n\n        fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n          this._showAlwaysAnimate = false;\n        });\n      }\n\n      this.floatLabel = 'always';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align === 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align === 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        const startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        const endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n\n  /**\n   * Updates the width and position of the gap in the outline. Only relevant for the outline\n   * appearance.\n   */\n  updateOutlineGap() {\n    const labelEl = this._label ? this._label.nativeElement : null;\n\n    if (this.appearance !== 'outline' || !labelEl || !labelEl.children.length ||\n        !labelEl.textContent.trim()) {\n      return;\n    }\n\n    if (this._platform && !this._platform.isBrowser) {\n      // getBoundingClientRect isn't available on the server.\n      return;\n    }\n    // If the element is not present in the DOM, the outline gap will need to be calculated\n    // the next time it is checked and in the DOM.\n    if (!document.documentElement.contains(this._elementRef.nativeElement)) {\n      this._outlineGapCalculationNeeded = true;\n      return;\n    }\n\n    let startWidth = 0;\n    let gapWidth = 0;\n    const startEls = this._connectionContainerRef.nativeElement.querySelectorAll(\n      '.mat-form-field-outline-start');\n    const gapEls = this._connectionContainerRef.nativeElement.querySelectorAll(\n        '.mat-form-field-outline-gap');\n    if (this._label && this._label.nativeElement.children.length) {\n      const containerStart = this._getStartEnd(\n          this._connectionContainerRef.nativeElement.getBoundingClientRect());\n      const labelStart = this._getStartEnd(labelEl.children[0].getBoundingClientRect());\n      let labelWidth = 0;\n\n      for (const child of labelEl.children) {\n        labelWidth += child.offsetWidth;\n      }\n      startWidth = labelStart - containerStart - outlineGapPadding;\n      gapWidth = labelWidth > 0 ? labelWidth * floatingLabelScale + outlineGapPadding * 2 : 0;\n    }\n\n    for (let i = 0; i < startEls.length; i++) {\n      startEls.item(i).style.width = `${startWidth}px`;\n    }\n    for (let i = 0; i < gapEls.length; i++) {\n      gapEls.item(i).style.width = `${gapWidth}px`;\n    }\n\n    this._outlineGapCalculationNeeded = false;\n  }\n\n  /** Gets the start end of the rect considering the current directionality. */\n  private _getStartEnd(rect: ClientRect): number {\n    return this._dir && this._dir.value === 'rtl' ? rect.right : rect.left;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n  imports: [\n    CommonModule,\n    ObserversModule,\n  ],\n  exports: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n})\nexport class MatFormFieldModule {}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {BidiModule} from '@angular/cdk/bidi';\n\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks', {\n  providedIn: 'root',\n  factory: MATERIAL_SANITY_CHECKS_FACTORY,\n});\n\n/** @docs-private */\nexport function MATERIAL_SANITY_CHECKS_FACTORY(): boolean {\n  return true;\n}\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  /** Whether we've already checked for HammerJs availability. */\n  private _hasCheckedHammer = false;\n\n  /** Reference to the global `document` object. */\n  private _document = typeof document === 'object' && document ? document : null;\n\n  /** Reference to the global 'window' object. */\n  private _window = typeof window === 'object' && window ? window : null;\n\n  constructor(@Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecksEnabled: boolean) {\n    if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n      this._checkDoctypeIsDefined();\n      this._checkThemeIsPresent();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n\n  /** Whether any sanity checks are enabled */\n  private _areChecksEnabled(): boolean {\n    return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n  }\n\n  /** Whether the code is running in tests. */\n  private _isTestEnv() {\n    return this._window && (this._window['__karma__'] || this._window['jasmine']);\n  }\n\n  private _checkDoctypeIsDefined(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n\n  private _checkThemeIsPresent(): void {\n    // We need to assert that the `body` is defined, because these checks run very early\n    // and the `body` won't be defined if the consumer put their scripts in the `head`.\n    if (this._document && this._document.body && typeof getComputedStyle === 'function') {\n      const testElement = this._document.createElement('div');\n\n      testElement.classList.add('mat-theme-loaded-marker');\n      this._document.body.appendChild(testElement);\n\n      const computedStyle = getComputedStyle(testElement);\n\n      // In some situations the computed style of the test element can be null. For example in\n      // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n      // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n      if (computedStyle && computedStyle.display !== 'none') {\n        console.warn(\n          'Could not find Angular Material core theme. Most Material ' +\n          'components may not work as expected. For more info refer ' +\n          'to the theming guide: https://material.angular.io/guide/theming'\n        );\n      }\n\n      this._document.body.removeChild(testElement);\n    }\n  }\n\n  /** Checks whether HammerJS is available. */\n  _checkHammerIsAvailable(): void {\n    if (this._hasCheckedHammer || !this._window) {\n      return;\n    }\n\n    if (this._areChecksEnabled() && !this._window['Hammer']) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material components may not work correctly.');\n    }\n    this._hasCheckedHammer = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  /** Whether the component is disabled. */\n  disabled: boolean;\n}\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): Constructor<CanDisable> & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled() { return this._disabled; }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  /** Theme color palette for the component. */\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values. */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(base: T,\n    defaultColor?: ThemePalette): Constructor<CanColor> & T {\n  return class extends base {\n    private _color: ThemePalette;\n\n    get color(): ThemePalette { return this._color; }\n    set color(value: ThemePalette) {\n      const colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  /** Whether ripples are disabled. */\n  disableRipple: boolean;\n}\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T)\n    : Constructor<CanDisableRipple> & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n/** @docs-private */\nexport interface HasTabIndex {\n  /** Tabindex of the component. */\n  tabIndex: number;\n}\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : Constructor<HasTabIndex> & T {\n  return class extends base {\n    private _tabIndex: number = defaultTabIndex;\n\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs';\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  updateErrorState();\n  readonly stateChanges: Subject<void>;\n  errorState: boolean;\n  errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n  ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n: Constructor<CanUpdateErrorState> & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping\n     * `MatFormField` needs to run change detection.\n     */\n    readonly stateChanges = new Subject<void>();\n\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable, Subscriber} from 'rxjs';\nimport {Constructor} from './constructor';\n\n\n/**\n * Mixin that adds an initialized property to a directive which, when subscribed to, will emit a\n * value once markInitialized has been called, which should be done during the ngOnInit function.\n * If the subscription is made after it has already been marked as initialized, then it will trigger\n * an emit immediately.\n * @docs-private\n */\nexport interface HasInitialized {\n  /** Stream that emits once during the directive/component's ngOnInit. */\n  initialized: Observable<void>;\n\n  /**\n   * Sets the state as initialized and must be called during ngOnInit to notify subscribers that\n   * the directive has been initialized.\n   * @docs-private\n   */\n  _markInitialized: () => void;\n}\n\n/** Mixin to augment a directive with an initialized property that will emits when ngOnInit ends. */\nexport function mixinInitialized<T extends Constructor<{}>>(base: T):\n    Constructor<HasInitialized> & T {\n  return class extends base {\n    /** Whether this directive has been marked as initialized. */\n    _isInitialized = false;\n\n    /**\n     * List of subscribers that subscribed before the directive was initialized. Should be notified\n     * during _markInitialized. Set to null after pending subscribers are notified, and should\n     * not expect to be populated after.\n     */\n    _pendingSubscribers: Subscriber<void>[] | null = [];\n\n    /**\n     * Observable stream that emits when the directive initializes. If already initialized, the\n     * subscriber is stored to be notified once _markInitialized is called.\n     */\n    initialized = new Observable<void>(subscriber => {\n      // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify\n      // when _markInitialized is called.\n      if (this._isInitialized) {\n        this._notifySubscriber(subscriber);\n      } else {\n        this._pendingSubscribers!.push(subscriber);\n      }\n    });\n\n    constructor(...args: any[]) { super(...args); }\n\n    /**\n     * Marks the state as initialized and notifies pending subscribers. Should be called at the end\n     * of ngOnInit.\n     * @docs-private\n     */\n    _markInitialized(): void {\n      if (this._isInitialized) {\n        throw Error('This directive has already been marked as initialized and ' +\n            'should not be called twice.');\n      }\n\n      this._isInitialized = true;\n\n      this._pendingSubscribers!.forEach(this._notifySubscriber);\n      this._pendingSubscribers = null;\n    }\n\n    /** Emits and completes the subscriber stream (should only emit once). */\n    _notifySubscriber(subscriber: Subscriber<void>): void {\n      subscriber.next();\n      subscriber.complete();\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {inject, InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE', {\n  providedIn: 'root',\n  factory: MAT_DATE_LOCALE_FACTORY,\n});\n\n/** @docs-private */\nexport function MAT_DATE_LOCALE_FACTORY(): string {\n  return inject(LOCALE_ID);\n}\n\n/**\n * No longer needed since MAT_DATE_LOCALE has been changed to a scoped injectable.\n * If you are importing and providing this in your code you can simply remove it.\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges = new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n  private readonly _clampDate: boolean;\n\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   *\n   * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\n   * getting the string representation of a Date object from it's utc representation. We're keeping\n   * it here for sometime, just for precaution, in case we decide to revert some of these changes\n   * though.\n   */\n  useUtcForDisplay: boolean = true;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string, platform: Platform) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    this.useUtcForDisplay = !platform.TRIDENT;\n    this._clampDate = platform.TRIDENT || platform.EDGE;\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {month: style, timeZone: 'utc'});\n      return range(12, i =>\n          this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric', timeZone: 'utc'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {weekday: style, timeZone: 'utc'});\n      return range(7, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric', timeZone: 'utc'});\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    if (SUPPORTS_INTL_API) {\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n        date = this.clone(date);\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n      }\n\n      displayFormat = {...displayFormat, timeZone: 'utc'};\n\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    const result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n\n  /**\n   * When converting Date object to string, javascript built-in functions may return wrong\n   * results because it applies its internal DST rules. The DST rules around the world change\n   * very frequently, and the current valid rule is not always valid in previous years though.\n   * We work around this problem building a new Date object which has its internal UTC\n   * representation with the local date and time.\n   * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\n   *    timeZone set to 'utc' to work fine.\n   * @param date Date from which we want to get the string representation according to dtf\n   * @returns A Date object with its UTC representation based on the passed in date info\n   */\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\n    const d = new Date(Date.UTC(\n        date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n        date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n    return dtf.format(d);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, supportsPassiveEventListeners} from '@angular/cdk/platform';\nimport {isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {RippleRef, RippleState} from './ripple-ref';\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  persistent?: boolean;\n  animation?: RippleAnimationConfig;\n  terminateOnPointerUp?: boolean;\n  /**\n   * @deprecated Use the `animation` property instead.\n   * @breaking-change 7.0.0\n   */\n  speedFactor?: number;\n};\n\n/**\n * Interface that describes the configuration for the animation of a ripple.\n * There are two animation phases with different durations for the ripples.\n */\nexport interface RippleAnimationConfig {\n  /** Duration in milliseconds for the enter animation (expansion from point of contact). */\n  enterDuration?: number;\n  /** Duration in milliseconds for the exit animation (fade-out). */\n  exitDuration?: number;\n}\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nexport const defaultRippleAnimationConfig = {\n  enterDuration: 450,\n  exitDuration: 400\n};\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst ignoreMouseEventsTimeout = 800;\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer {\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /** Events to be registered on the trigger element. */\n  private _triggerEvents = new Map<string, any>();\n\n  /** Set of currently active ripple references. */\n  private _activeRipples = new Set<RippleRef>();\n\n  /** Latest non-persistent ripple that was triggered. */\n  private _mostRecentTransientRipple: RippleRef | null;\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /** Options that apply to all the event listeners that are bound by the renderer. */\n  private _eventOptions = supportsPassiveEventListeners() ? ({passive: true} as any) : false;\n\n  /**\n   * Cached dimensions of the ripple container. Set when the first\n   * ripple is shown and cleared once no more ripples are visible.\n   */\n  private _containerRect: ClientRect | null;\n\n  constructor(private _target: RippleTarget,\n              private _ngZone: NgZone,\n              elementRef: ElementRef<HTMLElement>,\n              platform: Platform) {\n\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents\n        .set('mousedown', this.onMousedown)\n        .set('mouseup', this.onPointerUp)\n        .set('mouseleave', this.onPointerUp)\n\n        .set('touchstart', this.onTouchStart)\n        .set('touchend', this.onPointerUp)\n        .set('touchcancel', this.onPointerUp);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = this._containerRect =\n                          this._containerRect || this._containerElement.getBoundingClientRect();\n    const animationConfig = {...defaultRippleAnimationConfig, ...config.animation};\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n    const duration = animationConfig.enterDuration / (config.speedFactor || 1);\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    if (!config.persistent) {\n      this._mostRecentTransientRipple = rippleRef;\n    }\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      const isMostRecentTransientRipple = rippleRef === this._mostRecentTransientRipple;\n\n      rippleRef.state = RippleState.VISIBLE;\n\n      // When the timer runs out while the user has kept their pointer down, we want to\n      // keep only the persistent ripples and the latest transient ripple. We do this,\n      // because we don't want stacked transient ripples to appear after their enter\n      // animation has finished.\n      if (!config.persistent && (!isMostRecentTransientRipple || !this._isPointerDown)) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    const wasActive = this._activeRipples.delete(rippleRef);\n\n    if (rippleRef === this._mostRecentTransientRipple) {\n      this._mostRecentTransientRipple = null;\n    }\n\n    // Clear out the cached bounding rect if we have no more ripples.\n    if (!this._activeRipples.size) {\n      this._containerRect = null;\n    }\n\n    // For ripples that are not active anymore, don't re-un the fade-out animation.\n    if (!wasActive) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n    const animationConfig = {...defaultRippleAnimationConfig, ...rippleRef.config.animation};\n\n    rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n    rippleEl.style.opacity = '0';\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode!.removeChild(rippleEl);\n    }, animationConfig.exitDuration);\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(element: HTMLElement) {\n    if (!element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n\n    this._ngZone.runOutsideAngular(() => {\n      this._triggerEvents.forEach((fn, type) =>\n          element.addEventListener(type, fn, this._eventOptions));\n    });\n\n    this._triggerElement = element;\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private onMousedown = (event: MouseEvent) => {\n    // Screen readers will fire fake mouse events for space/enter. Skip launching a\n    // ripple in this case for consistency with the non-screen-reader experience.\n    const isFakeMousedown = isFakeMousedownFromScreenReader(event);\n    const isSyntheticEvent = this._lastTouchStartEvent &&\n        Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n\n    if (!this._target.rippleDisabled && !isFakeMousedown && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private onTouchStart = (event: TouchEvent) => {\n    if (!this._target.rippleDisabled) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      this.fadeInRipple(\n          event.touches[0].clientX, event.touches[0].clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private onPointerUp = () => {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      // By default, only ripples that are completely visible will fade out on pointer release.\n      // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\n      const isVisible = ripple.state === RippleState.VISIBLE ||\n        ripple.config.terminateOnPointerUp && ripple.state === RippleState.FADING_IN;\n\n      if (!ripple.config.persistent && isVisible) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n  private runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => {\n        this._triggerElement!.removeEventListener(type, fn, this._eventOptions);\n      });\n    }\n  }\n}\n\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`matMenuTriggerFor: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`xPosition value must be either 'before' or after'.\n      Example: <mat-menu xPosition=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`yPosition value must be either 'above' or below'.\n      Example: <mat-menu yPosition=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Subject} from 'rxjs';\nimport {DateAdapter} from './date-adapter';\n\nexport abstract class MatDateSelection<D> {\n  valueChanges = new Subject<void>();\n\n  constructor(protected readonly adapter: DateAdapter<D>) {}\n\n  dispose() {\n    this.valueChanges.complete();\n  }\n\n  abstract add(date: D): void;\n  abstract clone(): MatDateSelection<D>;\n  abstract getFirstSelectedDate(): D|null;\n  abstract getLastSelectedDate(): D|null;\n  abstract isComplete(): boolean;\n  abstract isSame(other: MatDateSelection<D>): boolean;\n  abstract isValid(): boolean;\n}\n\nexport interface DateRange<D> {\n  start: D | null;\n  end: D | null;\n}\n\n/**\n * Concrete implementation of a MatDateSelection that holds a single date.\n */\nexport class MatSingleDateSelection<D> extends MatDateSelection<D> {\n  private date: D | null = null;\n\n  constructor(adapter: DateAdapter<D>, date?: D | null) {\n    super(adapter);\n\n    if (date) {\n      this.date = date;\n    }\n  }\n\n  add(date: D) {\n    this.date = date;\n    this.valueChanges.next();\n  }\n\n  clone(): MatDateSelection<D> {\n    return new MatSingleDateSelection<D>(this.adapter, this.date);\n  }\n\n  getFirstSelectedDate() { return this.date; }\n\n  getLastSelectedDate() { return this.date; }\n\n  isComplete() { return !!this.date; }\n\n  isSame(other: MatDateSelection<D>): boolean {\n    return other instanceof MatSingleDateSelection &&\n        this.adapter.sameDate(other.getFirstSelectedDate(), this.getFirstSelectedDate());\n  }\n\n  isValid(): boolean {\n    return !!(this.date && this.adapter.isValid(this.date));\n  }\n\n  asDate(): D | null {\n    return this.date;\n  }\n}\n\n/**\n * Concrete implementation of a MatDateSelection that holds a date range, represented by\n * a start date and an end date.\n */\nexport class MatRangeDateSelection<D> extends MatDateSelection<D> {\n  private start: D | null = null;\n  private end: D | null = null;\n\n  constructor(adapter: DateAdapter<D>, start?: D | null, end?: D | null) {\n    super(adapter);\n\n    if (start) {\n      this.start = start;\n    }\n\n    if (end) {\n      this.end = end;\n    }\n  }\n\n  /**\n   * Adds an additional date to the range. If no date is set thus far, it will set it to the\n   * beginning. If the beginning is set, it will set it to the end.\n   * If add is called on a complete selection, it will empty the selection and set it as the start.\n   */\n  add(date: D): void {\n    if (!this.start) {\n      this.start = date;\n    } else if (!this.end) {\n      this.end = date;\n    } else {\n      this.start = date;\n      this.end = null;\n    }\n\n    this.valueChanges.next();\n  }\n\n\n  clone(): MatDateSelection<D> {\n    return new MatRangeDateSelection<D>(this.adapter, this.start, this.end);\n  }\n\n  getFirstSelectedDate() { return this.start; }\n\n  getLastSelectedDate() { return this.end; }\n\n  setFirstSelectedDate(value: D | null) { this.start = value; }\n\n  setLastSelectedDate(value: D | null) { this.end = value; }\n\n  isComplete(): boolean {\n    return !!(this.start && this.end);\n  }\n\n  isSame(other: MatDateSelection<D>): boolean {\n    return other instanceof MatRangeDateSelection &&\n        this.adapter.sameDate(this.getFirstSelectedDate(), other.getFirstSelectedDate()) &&\n        this.adapter.sameDate(this.getLastSelectedDate(), other.getLastSelectedDate());\n  }\n\n  isValid(): boolean {\n    return !!(this.start && this.end &&\n        this.adapter.isValid(this.start!) && this.adapter.isValid(this.end!));\n  }\n\n  asRange(): DateRange<D> {\n    return {\n      start: this.start,\n      end: this.end,\n    };\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {DateAdapter} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\nexport * from './date-selection';\n\n\n@NgModule({\n  imports: [PlatformModule],\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n  ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({providedIn: 'root'})\nexport class ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {\n  HammerStatic,\n  HammerInstance,\n  Recognizer,\n  RecognizerStatic,\n  HammerOptions,\n} from './gesture-annotations';\n\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\n\nconst ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES = [\n  'longpress',\n  'slide',\n  'slidestart',\n  'slideend',\n  'slideright',\n  'slideleft'\n];\n\n/**\n * Fake HammerInstance that is used when a Hammer instance is requested when HammerJS has not\n * been loaded on the page.\n */\nconst noopHammerInstance: HammerInstance = {\n  on: () => {},\n  off: () => {},\n};\n\n/** Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class GestureConfig extends HammerGestureConfig {\n  /** List of new event names to add to the gesture support list */\n  events = ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES;\n\n  constructor(\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\n    @Optional() commonModule?: MatCommonModule) {\n    super();\n    if (commonModule) {\n      commonModule._checkHammerIsAvailable();\n    }\n  }\n\n  /**\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://material.io/design/#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * @param element Element to which to assign the new HammerJS gestures.\n   * @returns Newly-created HammerJS instance.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\n\n    if (!hammer) {\n      // If HammerJS is not loaded here, return the noop HammerInstance. This is necessary to\n      // ensure that omitting HammerJS completely will not cause any errors while *also* supporting\n      // the lazy-loading of HammerJS via the HAMMER_LOADER token introduced in Angular 6.1.\n      // Because we can't depend on HAMMER_LOADER's existance until 7.0, we have to always set\n      // `this.events` to the set we support, instead of conditionally setting it to `[]` if\n      // `HAMMER_LOADER` is present (and then throwing an Error here if `window.Hammer` is\n      // undefined).\n      // @breaking-change 7.0.0\n      return noopHammerInstance;\n    }\n\n    const mc = new hammer(element, this._hammerOptions || undefined);\n\n    // Default Hammer Recognizers.\n    const pan = new hammer.Pan();\n    const swipe = new hammer.Swipe();\n    const press = new hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Since the slide event threshold is set to zero, the slide recognizer can fire and\n    // accidentally reset the longpress recognizer. In order to make sure that the two\n    // recognizers can run simultaneously but don't affect each other, we allow the slide\n    // recognizer to recognize while a longpress is being processed.\n    // See: https://github.com/hammerjs/hammer.js/blob/master/src/manager.js#L123-L124\n    longpress.recognizeWith(slide);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return mc as HammerInstance;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  NgModule,\n  Directive,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport class MatLineSetter {\n  constructor(private _lines: QueryList<MatLine>, private _element: ElementRef<HTMLElement>) {\n    this._setLineClass(this._lines.length);\n\n    this._lines.changes.subscribe(() => {\n      this._setLineClass(this._lines.length);\n    });\n  }\n\n  private _setLineClass(count: number): void {\n    this._resetClasses();\n    if (count === 2 || count === 3) {\n      this._setClass(`mat-${count}-line`, true);\n    } else if (count > 3) {\n      this._setClass(`mat-multi-line`, true);\n    }\n  }\n\n  private _resetClasses(): void {\n    this._setClass('mat-2-line', false);\n    this._setClass('mat-3-line', false);\n    this._setClass('mat-multi-line', false);\n  }\n\n  private _setClass(className: string, isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add(className);\n    } else {\n      this._element.nativeElement.classList.remove(className);\n    }\n  }\n\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\n\n/** Possible states for a ripple element. */\nexport enum RippleState {\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n\n  /** Current state of the ripple reference. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: RippleRenderer,\n    public element: HTMLElement,\n    public config: RippleConfig) {\n  }\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {RippleRef} from './ripple-ref';\nimport {RippleAnimationConfig, RippleConfig, RippleRenderer, RippleTarget} from './ripple-renderer';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * Configuration for the animation duration of the ripples. There are two phases with different\n   * durations for the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  animation?: RippleAnimationConfig;\n\n  /**\n   * If set, the default duration of the fade-in animation is divided by this value. For example,\n   * setting it to 0.5 will cause the ripple fade-in animation to take twice as long.\n   * A changed speedFactor will not affect the fade-out duration of the ripples.\n   * @deprecated Use the `animation` global option instead.\n   * @breaking-change 7.0.0\n   */\n  baseSpeedFactor?: number;\n\n  /**\n   * Whether ripples should start fading out immediately after the mouse our touch is released. By\n   * default, ripples will wait for the enter animation to complete and for mouse or touch release.\n   */\n  terminateOnPointerUp?: boolean;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * If set, the normal duration of ripple animations is divided by this value. For example,\n   * setting it to 0.5 will cause the animations to take twice as long.\n   * A changed speedFactor will not modify the fade-out duration of the ripples.\n   * @deprecated Use the [matRippleAnimation] binding instead.\n   * @breaking-change 7.0.0\n   */\n  @Input('matRippleSpeedFactor') speedFactor: number = 1;\n\n  /**\n   * Configuration for the ripple animation. Allows modifying the enter and exit animation\n   * duration of the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  @Input('matRippleAnimation') animation: RippleAnimationConfig;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() { return this._trigger || this._elementRef.nativeElement; }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** Whether ripple directive is initialized and the input bindings are set. */\n  private _isInitialized: boolean = false;\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n\n    if (animationMode === 'NoopAnimations') {\n      this._globalOptions.animation = {enterDuration: 0, exitDuration: 0};\n    }\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /** Ripple configuration from the directive's input values. */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      radius: this.radius,\n      color: this.color,\n      animation: {...this._globalOptions.animation, ...this.animation},\n      terminateOnPointerUp: this._globalOptions.terminateOnPointerUp,\n      speedFactor: this.speedFactor * (this._globalOptions.baseSpeedFactor || 1),\n    };\n  }\n\n  /** Whether ripples on pointer-down are disabled or not. */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n\n  /**\n   * Launches a manual ripple using the specified ripple configuration.\n   * @param config Configuration for the manual ripple.\n   */\n  launch(config: RippleConfig): RippleRef;\n\n  /**\n   * Launches a manual ripple at the specified coordinates within the element.\n   * @param x Coordinate within the element, along the X axis at which to fade-in the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to fade-in the ripple.\n   * @param config Optional ripple configuration for the manual ripple.\n   */\n  launch(x: number, y: number, config?: RippleConfig): RippleRef;\n\n  /** Launches a manual ripple at the specified coordinated or just by the ripple config. */\n  launch(configOrX: number | RippleConfig, y: number = 0, config?: RippleConfig): RippleRef {\n    if (typeof configOrX === 'number') {\n      return this._rippleRenderer.fadeInRipple(configOrX, y, {...this.rippleConfig, ...config});\n    } else {\n      return this._rippleRenderer.fadeInRipple(0, 0, {...this.rippleConfig, ...configOrX});\n    }\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  Input,\n  ChangeDetectionStrategy,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/**\n * Possible states for a pseudo checkbox.\n * @docs-private\n */\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n\n  constructor(@Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n})\nexport class MatPseudoCheckboxModule { }\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n"],"names":["type","NgModule","args","imports","MatCommonModule","exports","MatToolbar","MatToolbarRow","declarations","MatToolbarModule","MatTreeNodeOutlet","viewContainer","this","Directive","selector","ViewContainerRef","_CdkTreeNodeDef","CdkTreeNodeDef","_MatTreeNodeMixinBase","mixinTabIndex","mixinDisabled","CdkTreeNode","_MatNestedTreeNodeMixinBase","CdkNestedTreeNode","MatTreeNode","_elementRef","_tree","tabIndex","_this","_super","call","role","Number","tslib_1.__extends","exportAs","inputs","host","[attr.aria-expanded]","[attr.aria-level]","[attr.role]","class","providers","provide","useExisting","ElementRef","CdkTree","undefined","decorators","Attribute","Input","MatTreeNodeDef","data","MatNestedTreeNode","_differs","prototype","ngAfterContentInit","ngOnDestroy","IterableDiffers","node","nodeOutlet","ContentChildren","_CdkTreeNodePadding","CdkTreeNodePadding","MatTreeNodePadding","level","indent","_CdkTree","MatTree","Component","template","styles","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","_CdkTreeNodeToggle","CdkTreeNodeToggle","recursive","MatTreeNodeToggle","(click)","MAT_TREE_DIRECTIVES","CdkTreeModule","CommonModule","MatTreeModule","MatTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","_flattenNode","resultNodes","parentMap","flatNode","push","childrenNodes","Array","isArray","_flattenChildren","pipe","take","subscribe","children","forEach","child","index","childParentMap","slice","length","flattenNodes","structuredData","expandFlattenedNodes","nodes","treeControl","results","currentExpand","expand","i","isExpanded","MatTreeFlatDataSource","treeFlattener","initialData","_flattenedData","BehaviorSubject","_expandedData","_data","Object","defineProperty","value","next","dataNodes","connect","collectionViewer","changes","viewChange","expansionModel","merge","apply","map","disconnect","DataSource","MatTreeNestedDataSource","VERSION","Version","SELECT_PANEL_PADDING_X","MatTabLabel","_CdkPortal","MatTabContent","TemplateRef","MatTabBase","_MatTabMixinBase","MatTab","_viewContainerRef","textLabel","_contentPortal","_stateChanges","Subject","position","origin","isActive","ngOnChanges","hasOwnProperty","complete","ngOnInit","TemplatePortal","_explicitContent","_implicitContent","propDecorators","ViewChild","ariaLabel","ariaLabelledby","matTabsAnimations","translateTab","trigger","state","style","transform","minHeight","transition","animate","MatTabBodyPortal","componentFactoryResolver","viewContainerRef","_host","_centeringSub","Subscription","EMPTY","_leavingSub","_beforeCentering","startWith","_isCenterPosition","_position","isCentering","hasAttached","attach","_content","_afterLeavingCenter","detach","unsubscribe","ComponentFactoryResolver","MatTabBody","Inject","forwardRef","CdkPortalOutlet","_dir","changeDetectorRef","_dirChangeSubscription","_onCentering","EventEmitter","_onCentered","change","dir","_computePositionAnimationState","markForCheck","_positionIndex","_computePositionFromOrigin","_onTranslateTabStarted","e","toState","emit","nativeElement","clientHeight","_onTranslateTabComplete","fromState","_getLayoutDirection","animations","ChangeDetectorRef","Output","_portalHost","PortalHostDirective","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","MatTabLabelWrapper","elementRef","focus","getOffsetLeft","offsetLeft","getOffsetWidth","offsetWidth","[class.mat-tab-disabled]","[attr.aria-disabled]","MatTabHeaderBase","_MatTabHeaderMixinBase","mixinDisableRipple","MatTabHeader","_changeDetectorRef","_viewportRuler","_ngZone","_scrollDistance","_selectedIndexChanged","_destroyed","_showPaginationControls","_disableScrollAfter","_disableScrollBefore","_selectedIndex","selectFocusedIndex","indexFocused","coerceNumberProperty","_keyManager","updateActiveItemIndex","ngAfterContentChecked","_tabLabelCount","_labelWrappers","_updatePagination","_scrollToLabel","_checkScrollingControls","_alignInkBarToSelectedTab","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","event","keyCode","HOME","setFirstItemActive","preventDefault","END","setLastItemActive","ENTER","SPACE","focusIndex","onKeydown","dirChange","observableOf","resize","realign","FocusKeyManager","withHorizontalOrientation","withWrap","updateActiveItem","requestAnimationFrame","takeUntil","newFocusIndex","_setTabFocus","_onContentChanges","zoneCallback","run","_checkPaginationEnabled","_isValidIndex","setActiveItem","tab","toArray","disabled","containerEl","_tabListContainer","scrollLeft","scrollWidth","scrollDistance","translateX","_tabList","v","Math","max","min","_getMaxScrollDistance","_scrollHeader","scrollDir","viewLength","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","beforeVisiblePos","afterVisiblePos","isEnabled","selectedLabelWrapper","selectedIndex","_inkBar","alignToElement","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","ViewportRuler","Directionality","Optional","NgZone","nextId","MatTabChangeEvent","MatTabGroupBase","_MatTabGroupMixinBase","mixinColor","MatTabGroup","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","_tabLabelSubscription","_dynamicHeight","headerPosition","selectedIndexChange","focusChange","animationDone","selectedTabChange","_groupId","coerceBooleanProperty","_backgroundColor","classList","remove","backgroundColor","add","indexToSelect","_clampTabIndex","isFirstRun_1","_createChangeEvent","Promise","resolve","then","_tabs","_subscribeToTabLabels","tabs","realignInkBar","_tabHeader","_focusChanged","_getTabLabelId","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","height","offsetHeight","_removeTabBodyWrapperHeight","_handleClick","tabHeader","idx","_getTabIndex","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","dynamicHeight","MatTabNavBase","_MatTabNavMixinBase","MatTabNav","_onDestroy","updateActiveLink","element","_activeLinkChanged","runOutsideAngular","_alignInkBar","activeTab","_tabLinks","find","active","_activeLinkElement","show","hide","MatTabLinkBase","_MatTabLinkMixinBase","_tabNavBar","_focusMonitor","_tabLinkRipple","setupTriggerEvents","parseInt","globalOptions","_ripplesGloballyDisabled","terminateOnPointerUp","speedFactor","baseSpeedFactor","animation","monitor","get","_isActive","enumerable","configurable","stopMonitoring","MatTabLink","[attr.aria-current]","[attr.tabIndex]","[class.mat-tab-label-active]","Platform","MAT_RIPPLE_GLOBAL_OPTIONS","FocusMonitor","PortalModule","MatRippleModule","ObserversModule","A11yModule","MatInkBar","MatTabsModule","MatToolbarBase","_MatToolbarMixinBase","_platform","document","_document","ngAfterViewInit","isDevMode","isBrowser","_checkToolbarMixedModes","_toolbarRows","childNodes","filter","contains","nodeType","COMMENT_NODE","some","textContent","trim","throwToolbarMixedModesError","[class.mat-toolbar-multiple-rows]","[class.mat-toolbar-single-row]","DOCUMENT","sortButtonLabel","id","Injectable","providedIn","MatSortHeaderIntl","MAT_SORT_HEADER_INTL_PROVIDER","deps","SkipSelf","useFactory","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","MatSortHeaderBase","_MatSortHeaderMixinBase","MatSortHeader","_intl","_sort","_cdkColumnDef","_showIndicatorHint","_arrowDirection","_disableViewStateAnimation","arrowPosition","getSortHeaderNotContainedWithinSortError","_rerenderSubscription","sortChange","_isSorted","_updateArrowDirection","_viewState","_setAnimationTransitionState","_disableClear","name","register","deregister","_setIndicatorHintVisible","visible","_isDisabled","viewState","sort","direction","_getArrowDirectionState","_getArrowViewState","start","_getAriaSortAttribute","(mouseenter)","(longpress)","(mouseleave)","[attr.aria-sort]","[class.mat-sort-header-disabled]","matSortAnimations","indicator","leftPointer","rightPointer","arrowOpacity","allowChildren","MatSort","CdkColumnDef","disableClear","MatSortModule","_CdkStepLabel","CdkStepLabel","MatStepLabel","optionalLabel","MatStepperIntl","MatStepHeader","_element","_intlSubscription","_stringLabel","label","_templateLabel","_getHostElement","_getIconContext","optional","iconOverrides","selected","matStepperAnimations","horizontalStepTransition","visibility","verticalStepTransition","MatStepperIcon","templateRef","_CdkStepper","CdkStepper","MatStep","stepper","_errorStateMatcher","isErrorState","control","form","originalErrorState","customErrorState","invalid","interacted","ErrorStateMatcher","MatStepper","arguments","icons","_icons","override","icon","_iconOverrides","_steps","_stateChanged","MatHorizontalStepper","aria-orientation","MatVerticalStepper","ctorParameters","_CdkStepperNext","CdkStepperNext","_CdkStepperPrevious","CdkStepperPrevious","MatStepperNext","[type]","MatStepperPrevious","MatButtonModule","CdkStepperModule","MatIconModule","MatStepperModule","_CdkTable","CdkTable","stickyCssClass","MatTable","CDK_TABLE_TEMPLATE","_CdkCellDef","CdkCellDef","_CdkHeaderCellDef","CdkHeaderCellDef","_CdkFooterCellDef","CdkFooterCellDef","MatCellDef","MatHeaderCellDef","MatFooterCellDef","MatColumnDef","sticky","stickyEnd","MatHeaderCell","columnDef","cssClassFriendlyName","CdkHeaderCell","MatFooterCell","CdkFooterCell","MatCell","CdkCell","_CdkHeaderRowDef","CdkHeaderRowDef","_CdkFooterRowDef","CdkFooterRowDef","_CdkRowDef","CdkRowDef","MatHeaderRowDef","MatFooterRowDef","MatRowDef","MatHeaderRow","CDK_ROW_TEMPLATE","CdkHeaderRow","CdkFooterRow","MatFooterRow","MatRow","CdkRow","EXPORTED_DECLARATIONS","CdkTableModule","MatTableModule","MAX_SAFE_INTEGER","MatTableDataSource","_renderData","_filter","_renderChangesSubscription","sortingDataAccessor","sortHeaderId","_isNumberValue","numberValue","sortData","a","b","valueA","valueB","comparatorResult","filterPredicate","accumulator","currentTerm","key","dataStr","keys","reduce","toLowerCase","transformedFilter","indexOf","_updateChangeSubscription","_paginator","paginator","initialized","pageChange","page","dataStream","filteredData","combineLatest","_a","_filterData","orderedData","_orderData","paginatedData","_pageData","obj","_updatePaginator","startIndex","pageIndex","pageSize","splice","filteredDataLength","lastPageIndex","ceil","_MAT_INK_BAR_POSITIONER","InjectionToken","factory","_MAT_INK_BAR_POSITIONER_FACTORY","_inkBarPositioner","_setStyles","positions","inkBar","left","width","CdkPortal","vertical","invert","MatSlider","percent","_isMinValue","thumbLabel","axis","scale","_invertMouseCoords","_thumbGap","_direction","_tickIntervalPercent","tickSize","backgroundSize","sign","rotate","_invertAxis","detectChanges","_onMouseenter","_sliderDimensions","_getSliderDimensions","_updateTickIntervalPercent","_onClick","oldValue","_isSliding","_focusHostElement","_updateValueFromPosition","x","clientX","y","clientY","_emitInputEvent","_emitChangeEvent","_onSlide","_onSlideStart","center","_valueOnSlideStart","_onSlideEnd","_onFocus","_onBlur","onTouched","_onKeydown","PAGE_UP","_increment","PAGE_DOWN","LEFT_ARROW","UP_ARROW","RIGHT_ARROW","DOWN_ARROW","_onKeyup","numSteps","_clamp","step","pos","offset","top","size","posComponent","exactValue","_calculateValue","closestValue","round","_controlValueAccessorChangeFn","valueChange","input","tickInterval","trackSize","pixelsPerStep","stepsPerTick","pixelsPerTick","MatSliderChange","source","_calculatePercentage","percentage","_sliderWrapper","getBoundingClientRect","_blurHostElement","blur","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","MAT_SLIDER_VALUE_ACCESSOR","(focus)","(blur)","(keydown)","(keyup)","(slide)","(slideend)","(slidestart)","[tabIndex]","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[attr.aria-orientation]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[class.mat-slider-axis-inverted]","[class.mat-slider-sliding]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","[class._mat-animation-noopable]","ANIMATION_MODULE_TYPE","displayWith","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MatSliderModule","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","dismiss","_onExit","_finishDismiss","closed","exit","clearTimeout","_durationTimeoutId","dismissWithAction","closeWithAction","_dismissAfter","duration","setTimeout","_open","dispose","dismissedByAction","afterDismissed","asObservable","afterOpened","_onEnter","MAT_SNACK_BAR_DATA","MatSnackBarConfig","politeness","announcementMessage","horizontalPosition","verticalPosition","matSnackBarAnimations","contentFade","opacity","AnimationDurations","COMPLEX","AnimationCurves","STANDARD_CURVE","snackBarState","EXITING","ACCELERATION_CURVE","ENTERING","DECELERATION_CURVE","SimpleSnackBar","snackBarRef","action","[@contentFade]","MatSnackBarContainer","snackBarConfig","_animationState","attachComponentPortal","portal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","attachTemplatePortal","onAnimationEnd","startsWith","_completeExit","onEnter_1","enter","onMicrotaskEmpty","panelClasses","panelClass","cssClass","Error","[@state]","(@state.done)","OverlayModule","entryComponents","MatSnackBarModule","MAT_SNACK_BAR_DEFAULT_OPTIONS","MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","openFromComponent","component","config","_attach","openFromTemplate","open","message","_config","tslib_1.__assign","_attachSnackBarContainer","overlayRef","userInjector","injector","PortalInjector","WeakMap","containerPortal","ComponentPortal","containerRef","instance","content","userConfig","_createOverlay","container","$implicit","_createInjector","contentRef","observe","Breakpoints","Handset","detachments","matches","overlayElement","_animateSnackBar","announce","overlayConfig","OverlayConfig","positionStrategy","global","isRtl","isLeft","isRight","right","centerHorizontally","bottom","create","Overlay","LiveAnnouncer","Injector","BreakpointObserver","MatSortBase","_MatSortMixinBase","mixinInitialized","sortables","Map","getSortInvalidDirectionError","sortable","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","set","delete","getNextSortDirection","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","_markInitialized","SORT_ANIMATION_TRANSITION","keyframes","query","animateChild","openedChange","opened","_doc","_elementFocusedBeforeDrawerWasOpened","_isFocusTrapEnabled","_focusTrap","_trapFocus","_restoreFocus","close","stopPropagation","MatDrawer","onPositionChanged","_modeChanged","mode","focusInitialElementWhenReady","hasMovedFocus","activeEl","activeElement","HTMLElement","focusVia","_openedVia","enabled","destroy","isOpen","openedVia","_opened","_enableAnimations","matDrawerAnimations","transformDrawer","[@transform]","(@transform.start)","(@transform.done)","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","_openedStream","openedStart","_closedStream","closedStart","_animationMode","backdropClick","_doCheckSubject","_autosize","defaultAutosize","MatDrawerContainer","_drawers","drawer","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","_isDrawerOpen","_start","_end","_updateContentMargins","debounceTime","ngDoCheck","_setContainerClass","throwMatDuplicatedDrawerError","_right","_left","_closeModalDrawer","disableClose","_canHaveBackdrop","_isShowingBackdrop","_width","_contentMarginChanges","_contentMargins","[class.mat-drawer-container-explicit-backdrop]","ContentChild","MatDrawerContent","autosize","hasBackdrop","MatSidenavContent","[style.margin-left.px]","[style.margin-right.px]","MatSidenav","_fixedBottomGap","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","fixedInViewport","MatSidenavContainer","MatSidenavModule","ScrollDispatchModule","PlatformModule","MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS","disableToggleValue","disableDragValue","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlideToggle","multi","MatSlideToggleChange","checked","MatSlideToggleBase","_MatSlideToggleMixinBase","defaults","onChange","_","_uniqueId","_required","_checked","_dragging","labelPosition","toggleChange","dragChange","_inputElement","focusOrigin","_onInputFocusChange","_onChangeEvent","_onInputClick","toggle","_focusRipple","fadeOut","_ripple","launch","persistent","_getDragPercentage","distance","_thumbBarWidth","_previousChecked","_onDragStart","thumbEl","_thumbEl","_thumbBarEl","clientWidth","_onDrag","_dragPercentage","deltaX","dragX","_onDragEnd","newCheckedValue","_onLabelTextChange","[id]","[class.mat-checked]","[class.mat-disabled]","[class.mat-slide-toggle-label-before]","required","MatRipple","MatSlideToggleModule","MatSliderBase","_MatSliderMixinBase","_invert","_max","_min","_step","_thumbLabel","_tickInterval","_value","_vertical","_percent","_roundToDecimal","toString","split","pop","parseFloat","toFixed","MAT_PROGRESS_BAR_LOCATION","MatProgressBar","MatProgressBarModule","BASE_SIZE","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY","INDETERMINATE_ANIMATION_TEMPLATE","MatProgressSpinner","platform","animationMode","_fallbackAnimation","_noopAnimations","_forceAnimations","_diameter","EDGE","TRIDENT","diameter","strokeWidth","animationClass","diameters","_attachStyleNode","_strokeWidth","newValue","viewBox","_circleRadius","PI","_strokeCircumference","styleTag","createElement","head","appendChild","sheet","insertRule","_getAnimationText","replace","Set","[style.width.px]","[style.height.px]","[attr.mode]","MatSpinner","MatProgressSpinnerModule","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MatRadioGroup","MatRadioChange","MatRadioGroupBase","_MatRadioGroupMixinBase","_changeDetector","_name","_selected","_isInitialized","_labelPosition","_disabled","_updateRadioButtonNames","_markRadiosForCheck","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_touch","_radios","radio","isAlreadySelected","_markForCheck","MatRadioButton","descendants","MatRadioButtonBase","_MatRadioButtonMixinBase","radioGroup","_radioDispatcher","_removeUniqueSelectionListener","listen","newCheckedState","notify","newDisabledState","_isRippleDisabled","disableRipple","_onInputChange","groupValueChanged","[class.mat-radio-checked]","[class.mat-radio-disabled]","[attr.id]","UniqueSelectionDispatcher","ariaDescribedby","MatRadioModule","box-shadow","MAT_DRAWER_DEFAULT_AUTOSIZE","MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY","_container","_focusTrapFactory","_mode","_disableClose","_autoFocus","scrollBuffer","panelHeight","_scrollTop","_calculateOverlayScroll","selectedOptionOffset","maxScroll","_offsetY","_calculateOverlayOffsetY","_checkOverlayWithinViewport","MatSelect","itemHeight","_getItemHeight","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","_getAriaLabel","placeholder","_getAriaLabelledby","_parentFormField","_hasFloatingLabel","_labelId","_getAriaActiveDescendant","panelOpen","activeItem","_calculateOverlayOffsetX","offsetX","overlayRect","overlayDir","viewportSize","getViewportSize","_isRtl","paddingWidth","multiple","SELECT_MULTIPLE_PANEL_PADDING_X","_selectionModel","options","first","group","leftOverflow","rightOverflow","updatePosition","optionOffsetFromPanelTop","optionHeightAdjustment","_triggerRect","maxOptionsDisplayed","floor","_disableOptionCentering","firstDisplayedIndex","_getItemCount","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_transformOrigin","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","optionGroups","_triggerFontSize","setDescribedByIds","ids","_ariaDescribedby","join","onContainerClick","_panelOpen","empty","[attr.tabindex]","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","matSelectAnimations","transformPanel","fadeInContent","MatFormFieldControl","MAT_OPTION_PARENT_COMPONENT","NgForm","FormGroupDirective","MatFormField","NgControl","Self","MAT_SELECT_SCROLL_STRATEGY","CdkConnectedOverlay","MatOption","MatOptgroup","customTrigger","MatSelectTrigger","disableOptionCentering","compareWith","errorStateMatcher","selectionChange","MatOptionModule","MatFormFieldModule","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","MatSelectModule","matTooltipAnimations","tooltipState","SCROLL_THROTTLE_MS","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY","MAT_TOOLTIP_DEFAULT_OPTIONS","MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY","MatTooltip","_scrollDispatcher","_ariaDescriber","_scrollStrategy","_defaultOptions","showDelay","hideDelay","_message","_manualListeners","IOS","ANDROID","listener","addEventListener","nodeName","webkitUserSelect","userSelect","msUserSelect","draggable","_updatePosition","_tooltipInstance","removeDescription","_isTooltipVisible","_updateTooltipMessage","describe","_tooltipClass","_setTooltipClass","removeEventListener","clear","delay","_detach","_portal","TooltipComponent","afterHidden","isVisible","ESCAPE","_handleTouchend","touchendHideDelay","strategy","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","scrollableAncestors","getAncestorScrollContainers","withScrollableContainers","positionChanges","scrollableViewProperties","isOverlayClipped","scrollStrategy","getConfig","_getOrigin","overlay","_getOverlayPosition","withPositions","main","fallback","originPosition","isLtr","originX","originY","getMatTooltipInvalidPositionError","_invertPosition","overlayPosition","overlayX","overlayY","tooltipClass","(touchend)","ScrollDispatcher","AriaDescriber","_visibility","_closeOnInteraction","_onHide","_isHandset","_hideTimeoutId","_showTimeoutId","_animationStart","_animationDone","_handleBodyInteraction","aria-hidden","MatTooltipModule","itemsPerPageLabel","nextPageLabel","previousPageLabel","firstPageLabel","lastPageLabel","getRangeLabel","MatPaginatorIntl","MAT_PAGINATOR_INTL_PROVIDER","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","PageEvent","MatPaginatorBase","_MatPaginatorBase","MatPaginator","_pageIndex","_length","_pageSizeOptions","_hidePageSize","_showFirstLastButtons","_intlChanges","_pageSize","_updateDisplayedPageSizeOptions","p","_initialized","nextPage","hasNextPage","previousPageIndex","_emitPageEvent","previousPage","hasPreviousPage","firstPage","lastPage","getNumberOfPages","numberOfPages","_changePageSize","pageSizeOptions","_displayedPageSizeOptions","hidePageSize","showFirstLastButtons","MatPaginatorModule","MatProgressBarBase","_MatProgressBarMixinBase","MAT_PROGRESS_BAR_LOCATION_FACTORY","progressbarId","location","_bufferValue","path","pathname","_rectangleFillValue","clamp","_primaryTransform","_bufferTransform","bufferValue","aria-valuemin","aria-valuemax","_outlet","DomPortalOutlet","_componentFactoryResolver","_appRef","_template","insertBefore","outletElement","context","_attached","MatMenuContent","isAttached","ApplicationRef","matMenuAnimations","transformMenu","sequence","fadeInItems","MAT_MENU_PANEL","MatMenuItemBase","_MatMenuItemMixinBase","MatMenuItem","_parentMenu","_hovered","_highlighted","_triggersSubmenu","addItem","removeItem","_checkDisabled","_handleMouseEnter","getLabel","textNodeType","TEXT_NODE","output","length_1","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","MAT_MENU_DEFAULT_OPTIONS","MAT_MENU_DEFAULT_OPTIONS_FACTORY","MatMenu","_xPosition","xPosition","_yPosition","yPosition","_items","_itemChanges","_tabSubscription","_classList","_panelAnimationState","backdropClass","_overlapTrigger","overlapTrigger","_hasBackdrop","throwMatMenuInvalidPositionX","setPositionClasses","throwMatMenuInvalidPositionY","classes","className","withTypeAhead","tabOut","switchMap","items","item","parentMenu","setFocusOrigin","focusFirstItem","lazyContent","onStable","resetActiveItem","setElevation","depth","newElevation","customElevation","c","_previousElevation","posX","posY","_startAnimation","_resetAnimation","_onAnimationDone","_isAnimating","activeItemIndex","scrollTop","MAT_MENU_SCROLL_STRATEGY","MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_MENU_SCROLL_STRATEGY_FACTORY","MatMenuTrigger","_menuItemInstance","_menuOpen","_closeSubscription","_hoverSubscription","_openedByMouse","menuOpened","onMenuOpen","menuClosed","onMenuClose","triggersSubmenu","menu","_checkMenu","reason","_destroyMenu","_handleHover","_cleanUpSubscriptions","toggleMenu","closeMenu","openMenu","_setPosition","menuData","_menuClosingActions","_initMenu","menuOpen","_resetMenu","_setMenuElevation","_setIsMenuOpen","throwMatMenuMissingError","_getOverlayConfig","_subscribeToPositions","connectionPair","originFallbackX","_b","overlayFallbackY","_c","originFallbackY","_d","overlayFallbackX","offsetY","backdrop","parentClose","hover","_handleMousedown","isFakeMousedownFromScreenReader","asapScheduler","aria-haspopup","(mousedown)","_deprecatedMatMenuTriggerFor","MatMenuModule","minWidth","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinErrorState","_scrollStrategyFactory","_multiple","_compareWith","o1","o2","_uid","_destroy","_onChange","_onTouched","_optionIds","_panelDoneAnimating","_panelDoneAnimatingStream","_positions","_focused","controlType","optionSelectionChanges","defer","option","onSelectionChange","o","valueAccessor","_placeholder","stateChanges","getMatSelectDynamicMultipleError","getMatSelectNonFunctionValueError","_initializeSelection","_id","SelectionModel","distinctUntilChanged","_initKeyManager","added","select","removed","deselect","_resetOptions","updateErrorState","getComputedStyle","_calculateOverlayPosition","_highlightCorrectOption","fontSize","_setSelectionByValue","selectedOptions","viewValue","reverse","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","altKey","manager","A","ctrlKey","hasDeselectedOptions_1","opt","previouslyFocusedIndex","shiftKey","_selectViaInteraction","_onFadeInDone","_onAttached","positionChange","panel","_getPanelTheme","color","isEmpty","getMatSelectNonArrayValueError","currentValue","_selectValue","_sortValues","correspondingOption","error","console","warn","ActiveDescendantKeyManager","withVerticalOrientation","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","isUserInput","_setOptionIds","wasSelected","isSelected","_propagateChanges","options_1","fallbackValue","valueToEmit","activeOptionIndex","labelCount","_countGroupLabelsBeforeOption","_getOptionScrollPosition","_getOptionIndex","result","current","scrollContainerHeight","MAT_SELECTION_LIST_VALUE_ACCESSOR","MatSelectionList","MatListOption","_MatSelectionListMixinBase","MatLineModule","MatPseudoCheckboxModule","MatList","MatNavList","MatListItem","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatListSubheaderCssMatStyler","MatDividerModule","MatListModule","[class.mat-list-item-avatar]","[class.mat-list-item-with-avatar]","_icon","MatSelectionListBase","MatListOptionBase","_MatListOptionMixinBase","MatSelectionListChange","selectionList","checkboxPosition","_setSelected","_reportValueChange","MatLineSetter","_lines","_removeOptionFromList","_text","_handleFocus","_setFocusedOption","_handleBlur","tabindex","[class.mat-list-item-disabled]","[attr.aria-selected]","skipPredicate","_tempValues","_setOptionsFromValues","_modelChanges","_i","optionIndex","setNextItemActive","previousFocusIndex","_toggleFocusedOption","selectAll","deselectAll","_getSelectedOptionValues","values","Boolean","focusedOption","focusedIndex","hasChanged","_MatListMixinBase","_navList","_isNavList","_rowspan","MatGridTile","_colspan","_setStyle","property","MatGridTileText","MatGridAvatarCssMatStyler","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","TileCoordinator","numColumns","tiles","columnIndex","rowIndex","tracker","fill","tile","_trackTile","lastRowMax","rowCount","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","rowspan","row","col","TileStyler","_rows","init","gutterSize","cols","_gutterSize","normalizeUnits","_cols","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","reset","list","_setListStyle","_tiles","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","FitTileStyler","gutterHeightPerTile","MatGridList","_gutter","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","rowHeight","_tileStyler","MatGridListModule","SvgIconConfig","svgElement","url","MatIconRegistry","_httpClient","_sanitizer","_svgIconConfigs","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","iconName","addSvgIconInNamespace","addSvgIconLiteral","literal","addSvgIconLiteralInNamespace","namespace","_addSvgIconConfig","sanitizedLiteral","sanitize","SecurityContext","HTML","getMatIconFailedToSanitizeLiteralError","_createSvgElementForSingleIcon","addSvgIconSet","addSvgIconSetInNamespace","addSvgIconSetLiteral","addSvgIconSetLiteralInNamespace","_addSvgIconSetConfig","_svgElementFromString","registerFontClassAlias","alias","classNameForFontAlias","setDefaultFontSetClass","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","RESOURCE_URL","getMatIconFailedToSanitizeUrlError","cachedIcon","cloneSvg","_loadSvgIconFromConfig","tap","svg","getNamedSvgIcon","iconKey","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","observableThrow","getMatIconNameNotFoundError","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","catchError","err","forkJoin","foundIcon","_extractSvgIconFromSet","_fetchUrl","svgText","responseText","_setSvgAttributes","iconSet","iconSource","querySelector","iconElement","cloneNode","removeAttribute","_toSvgElement","str","div","innerHTML","ELEMENT_NODE","setAttribute","getMatIconNoHttpProviderError","inProgressFetch","req","responseType","finalize","share","configNamespace","HttpClient","DomSanitizer","ICON_REGISTRY_PROVIDER","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","_MatIconMixinBase","MatIcon","_iconRegistry","ariaHidden","_inline","inline","_fontSet","_cleanupFontValue","_fontIcon","_splitIconName","parts","svgIcon","_setSvgElement","log","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","styleTags","querySelectorAll","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","_previousFontSetClass","fontIcon","_previousFontIconClass","[class.mat-icon-inline]","MatListBase","MatListItemBase","_MatListItemMixinBase","fadeInCalendar","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY","MatDatepickerContentBase","_MatDatepickerContentMixinBase","MatDatepickerContent","_calendar","focusActiveCell","[@transformPanel]","[class.mat-datepicker-content-touch]","matDatepickerAnimations","_dateAdapter","createMissingDateImplError","MatDatepicker","_disabledChange","_inputSubscription","_popupRef","_popupComponentRef","date","sameDate","_selectedChanged","_datepickerInput","_valueChange","_focusedElementBeforeOpen","touchUi","_openAsDialog","_openAsPopup","openedStream","_dialogRef","_calendarPortal","completeClose","closedStream","_dialog","afterClosed","componentInstance","datepicker","_setColor","_createPopup","keydownEvents","withPush","MatDialog","DateAdapter","calendarHeaderComponent","startAt","yearSelected","monthSelected","MAT_DATEPICKER_VALUE_ACCESSOR","MatDatepickerInput","MAT_DATEPICKER_VALIDATORS","NG_VALIDATORS","MatDatepickerInputEvent","target","targetElement","_dateFormats","_formField","dateChange","dateInput","_cvaOnChange","_validatorOnChange","_datepickerSubscription","_localeSubscription","_parseValidator","_lastValueValid","matDatepickerParse","text","_minValidator","controlValue","_getValidDateOrNull","deserialize","compareDate","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_filterValidator","_dateFilter","matDatepickerFilter","_validator","Validators","compose","localeChanges","_datepicker","_registerInput","isValid","oldDate","_formatValue","registerOnValidatorChange","validate","getPopupConnectionElementRef","getConnectedOverlayOrigin","_onInput","parse","_getThemePalette","format","display","isDateInstance","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","MAT_DATE_FORMATS","matDatepicker","MatDatepickerToggleIcon","MatDatepickerToggle","defaultTabIndex","parsedTabIndex","_watchStateChanges","datepickerDisabled","inputDisabled","datepickerToggled","[class.mat-accent]","[class.mat-warn]","_customIcon","MatDialogModule","MatCalendar","MatCalendarBody","MatMonthView","MatYearView","MatMultiYearView","MatCalendarHeader","MatDatepickerIntl","MatDatepickerModule","_inset","MatDivider","[class.mat-divider-vertical]","[class.mat-divider-horizontal]","[class.mat-divider-inset]","MAT_ACCORDION","matExpansionAnimations","indicatorRotate","expansionHeaderHeight","params","collapsedHeight","expandedHeight","bodyExpansion","MatExpansionPanelContent","_CdkAccordionItem","CdkAccordionItem","uniqueId","MatExpansionPanel","accordion","_uniqueSelectionDispatcher","_hideToggle","_inputChanges","_headerId","hideToggle","_hasSpacing","expanded","displayMode","_getExpandedState","_lazyContent","_bodyAnimation","phaseName","_containsFocus","_body","focusedElement","bodyElement","outputs","[class.mat-expanded]","[class.mat-expansion-panel-spacing]","MatExpansionPanelActionRow","MatExpansionPanelHeader","_parentChangeSubscription","accordionHideToggleChange","_handleHeaderFocus","_toggle","_isExpanded","_getPanelId","_showToggle","_keydown","_handleHeaderKeydown","[attr.aria-controls]","[@expansionHeight]","MatExpansionPanelDescription","MatExpansionPanelTitle","MatAccordion","_headers","header","CdkAccordion","CdkAccordionModule","MatExpansionModule","aria-readonly","todayValue","selectedValue","labelMinRequiredCells","numCols","allowDisabledSelection","activeCell","cellAspectRatio","selectedValueChange","selectedChange","_userSelection","activeDateChange","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","_weekdays","concat","_activeDate","today","oldActiveDate","validDate","clampDate","minDate","maxDate","_hasSameMonthAndYear","_init","_selectedDate","_getDateInCurrentMonth","_minDate","_maxDate","_dateSelected","selectedYear","getYear","activeDate","selectedMonth","getMonth","selectedDate","createDate","_handleCalendarBodyKeydown","addCalendarDays","getDate","getNumDaysInMonth","addCalendarYears","addCalendarMonths","dateFilter","_focusActiveCell","_todayDate","_monthLabel","getMonthNames","toLocaleUpperCase","firstOfMonth","_firstWeekOffset","getDayOfWeek","_createWeekCells","_matCalendarBody","daysInMonth","dateNames","getDateNames","_weeks","cell","_shouldEnableDate","dateA11yLabel","MatCalendarCell","d1","d2","_selectedYear","_todayYear","activeYear","activeOffset","_years","year","_createCellForYear","_yearSelected","month","yearsPerPage","_getActiveCell","yearName","getYearName","_shouldEnableYear","firstOfYear","_selectedMonth","_getMonthInCurrentYear","_monthSelected","normalizedDate","_todayMonth","_yearLabel","monthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","_shouldEnableMonth","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","maxYear","maxMonth","minYear","minMonth","calendar","currentView","monthYearLabel","switchToMultiYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","multi-year","prevMultiYearLabel","nextMonthLabel","nextYearLabel","nextMultiYearLabel","currentPeriodClicked","previousClicked","nextClicked","previousEnabled","_isSameView","nextEnabled","date1","date2","_moveFocusOnNextTick","_currentView","startView","firstChange","view","_getCurrentViewComponent","headerComponent","monthView","yearView","multiYearView","chip","MatChipListChange","MatChipList","_blur","_chipInput","focused","_markAsTouched","_resetChips","_dropSubscriptions","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","_chipRemoveSubscription","chipSelectionChanges","chips","chipFocusChanges","chipIndex","chipBlurChanges","chipRemoveChanges","_hasFocus","_lastDestroyedChipIndex","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","[class.mat-chip-list-required]","ariaOrientation","selectable","MatChip","MatChipInput","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","registerInput","_emitChipEnd","addOnBlur","_focus","[attr.placeholder]","MAT_CHIPS_DEFAULT_OPTIONS","chipList","CHIP_DECLARATIONS","MatChipRemove","MatChipAvatar","MatChipTrailingIcon","ɵ0","useValue","MatChipsModule","MatDialogConfig","maxWidth","ariaDescribedBy","autoFocus","closeOnNavigation","matDialogAnimations","slideDialog","MatDialogContainer","_elementFocusedBeforeDialogWasOpened","_state","_animationStateChanged","_ariaLabelledBy","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","toFocus","_onAnimationStart","_startExitAnimation","aria-modal","[@slideDialog]","(@slideDialog.start)","(@slideDialog.done)","MatDialogRef","_containerInstance","_afterOpen","_afterClosed","_beforeClose","_locationChanges","_result","dialogResult","detachBackdrop","afterOpen","beforeClose","_getPositionStrategy","centerVertically","updateSize","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","_location","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","componentOrTemplateRef","_applyConfigDefaults","getDialogById","dialogContainer","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","dialog","dialogConfig","maxHeight","injectionTokens","previousValue","overlayContainer","getContainerElement","parentElement","siblings","sibling","hasAttribute","getAttribute","Location","OverlayContainer","dialogElementUid","MatDialogClose","getClosestDialog","proxiedChange","_matDialogClose","MatDialogTitle","MatDialogContent","MatDialogActions","_CdkTextareaAutosize","CdkTextareaAutosize","MatTextareaAutosize","minRows","maxRows","rows","matAutosizeMinRows","matAutosizeMaxRows","matAutosize","matTextareaAutosize","MAT_INPUT_INVALID_TYPES","MatInputBase","_MatInputMixinBase","MatInput","inputValueAccessor","_autofillMonitor","ngZone","_isServer","autofilled","_type","_readonly","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","el","selectionStart","selectionEnd","setSelectionRange","_validateType","_isTextarea","isAutofilled","_dirtyCheckNativeValue","isFocused","readonly","getMatInputUnsupportedTypeError","_isNeverEmpty","_isBadInput","validity","badInput","[class.mat-input-server]","[required]","[readonly]","AutofillMonitor","TextFieldModule","MatInputModule","calendarLabel","openCalendarLabel","displayValue","_cellClicked","_isActiveCell","cellNumber","_firstRowOffset","MatCard","MatCardHeader","MatCardTitleGroup","MatCardContent","MatCardTitle","MatCardSubtitle","MatCardActions","MatCardFooter","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardImage","MatCardXlImage","MatCardAvatar","MatCardModule","MAT_CHECKBOX_CLICK_ACTION","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MatCheckbox","MatCheckboxChange","MatCheckboxBase","_MatCheckboxMixinBase","_clickAction","indeterminateChange","_currentAnimationClass","_currentCheckState","TransitionCheckState","Init","_indeterminate","changed","_transitionCheckState","Indeterminate","Checked","Unchecked","_getAriaChecked","indeterminate","newState","oldState","_getAnimationClassForCheckStateTransition","animationClass_1","ripple","_onInteractionEvent","animSuffix","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","MatCheckboxModule","MatChipSelectionChange","MatChipBase","_MatChipMixinBase","CHIP_ATTRIBUTE_NAMES","rippleConfig","chipListSelectable","_selectable","_removable","destroyed","_addHostClassName","_chipRipple","RippleRenderer","CHIP_ATTRIBUTE_NAMES_1","attr","tagName","_removeTriggerEvents","selectViaInteraction","toggleSelected","removable","DELETE","BACKSPACE","[class.mat-chip-selected]","[class.mat-chip-with-avatar]","[class.mat-chip-with-trailing-icon]","[class.mat-chip-disabled]","avatar","trailingIcon","removeIcon","_parentChip","MatChipListBase","_MatChipListMixinBase","_tabIndex","_userTabIndex","_updateTabIndex","_updateFocusForDestroyedChips","inputElement","_focusInput","_isInputEmpty","newChipIndex","_clearSelection","correspondingChip","skip","MatButton","stopImmediatePropagation","MatAnchor","MatButtonToggleGroupBase","_MatButtonToggleGroupMixinBase","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","MatButtonToggleGroupMultiple","_uniqueIdCounter","MatButtonToggleChange","_buttonToggles","_syncButtonToggle","_isSelected","_isPrechecked","_rawValue","[class.mat-button-toggle-vertical]","MatButtonToggle","MatButtonToggleBase","_MatButtonToggleMixinBase","toggleGroup","_isSingleSelector","buttonToggleGroup","_buttonElement","_onButtonClick","newChecked","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","MatButtonToggleModule","align","[class.mat-card-actions-align-end]","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","MatAutocomplete","showPanel","_isOpen","optionSelected","_uniqueAutocompleteIdCounter","_autoActiveFirstOption","autoActiveFirstOption","_setVisibility","_setScrollTop","_getScrollTop","_emitSelectEvent","MatAutocompleteSelectedEvent","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","panelWidth","MatAutocompleteOrigin","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","_zone","_componentDestroyed","_autocompleteDisabled","_manuallyFloatingLabel","_viewportSubscription","_canOpenOnNextFocus","_closeKeyEventStream","_windowBlurHandler","autocompleteAttribute","_overlayAttached","optionSelections","autocomplete","window","_destroyPanel","openPanel","_attachOverlay","_floatLabel","closePanel","_resetLabel","_closingActionsSubscription","_outsideClickStream","MatOptionSelectionChange","fromEvent","clickTarget","formField","_setTriggerValue","_resetActiveItem","activeOption","prevActiveItem","TAB","_canOpen","_scrollToOption","_handleInput","_previousValue","shouldAnimate","floatLabel","_animateAndLockLabel","newScrollPosition","_subscribeToClosingActions","firstStable","optionChanges","_positionStrategy","reapplyLastPosition","panelClosingActions","_setValueAndClose","toDisplay","inputValue","_control","_clearPreviousSelectedOption","getMatAutocompleteMissingPanelError","_getPanelWidth","wasOpen","_getConnectedElement","connectedTo","_getHostWidth","readOnly","[attr.autocomplete]","[attr.aria-autocomplete]","(focusin)","Host","autocompleteDisabled","MatAutocompleteModule","MatBadge","_renderer","_hasContent","_color","_overlap","val","_updateTextContent","_description","newDescription","_updateHostAriaDescription","_hidden","isAbove","isAfter","description","_badgeElement","_createBadgeElement","rootNode","badgeElement","oldDescription","colorPalette","[class.mat-badge-overlap]","[class.mat-badge-above]","[class.mat-badge-below]","[class.mat-badge-before]","[class.mat-badge-after]","[class.mat-badge-small]","[class.mat-badge-medium]","[class.mat-badge-large]","[class.mat-badge-hidden]","Renderer2","overlap","hidden","MatBadgeModule","MAT_BOTTOM_SHEET_DATA","MatBottomSheetConfig","matBottomSheetAnimations","bottomSheetState","MatBottomSheetContainer","breakpointObserver","bottomSheetConfig","_elementFocusedBeforeOpened","_breakpointSubscription","Medium","Large","XLarge","_toggleClass","isMatched","_validatePortalAttached","_setPanelClass","(@state.start)","FocusTrapFactory","MatBottomSheetModule","MatBottomSheetRef","MatBottomSheet","_parentBottomSheet","_bottomSheetRefAtThisLevel","_openedBottomSheetRef","_attachContainer","ref","bottomSheetRef","scrollStrategies","block","DEFAULT_ROUND_BUTTON_COLOR","DEFAULT_FLAT_BUTTON_COLOR","BUTTON_HOST_ATTRIBUTES","MatButtonBase","_MatButtonMixinBase","isRoundButton","_hasHostAttributes","isIconButton","BUTTON_HOST_ATTRIBUTES_1","attributes","attribute","[class.mat-optgroup-disabled]","_parent","_active","_mostRecentViewValue","_emitSelectionChangeEvent","setActiveStyles","setInactiveStyles","ngAfterViewChecked","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]","MAT_LABEL_GLOBAL_OPTIONS","MatError","matFormFieldAnimations","transitionMessages","[class.mat-right]","MatHint","MatLabel","MatPlaceholder","MatPrefix","MatSuffix","MatFormFieldBase","_MatFormFieldMixinBase","MAT_FORM_FIELD_DEFAULT_OPTIONS","labelOptions","_defaults","_outlineGapCalculationNeeded","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_labelOptions","float","_animationsEnabled","appearance","_appearance","updateOutlineGap","_hideRequiredMarker","_processHints","_connectionContainerRef","_validateControlChild","_validatePlaceholders","_syncDescribedByIds","valueChanges","_prefixChildren","_suffixChildren","_hintChildren","_errorChildren","_shouldForward","prop","_hasPlaceholder","_placeholderChild","_hasLabel","_labelChild","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_getDisplayedMessages","errorState","_label","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","hintLabel","getMatFormFieldDuplicatedHintError","startHint","endHint","getMatFormFieldMissingControlError","labelEl","documentElement","startWidth","gapWidth","startEls","gapEls","containerStart","_getStartEnd","labelStart","labelWidth","outlineGapPadding","rect","[class.mat-form-field-appearance-standard]","[class.mat-form-field-appearance-fill]","[class.mat-form-field-appearance-outline]","[class.mat-form-field-appearance-legacy]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-form-field-autofilled]","[class.mat-focused]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","hideRequiredMarker","underlineRef","_inputContainerRef","MatAutocompleteBase","_MatAutocompleteMixinBase","__extends","d","__","constructor","extendStatics","MATERIAL_SANITY_CHECKS_FACTORY","base","class_1","defaultColor","_disableRipple","matcher","_pendingSubscribers","Observable","subscriber","_notifySubscriber","MAT_DATE_LOCALE_FACTORY","inject","LOCALE_ID","range","valueFunction","valuesArray","enforceStyleRecalculation","getPropertyValue","distanceToFurthestCorner","distX","distY","sqrt","optionsArray","groups","groupCounter","optionOffset","currentScrollPosition","optionHeight","reposition","MAT_DIALOG_SCROLL_STRATEGY_FACTORY","defaultOptions","provider","exp","match","parentRegistry","httpClient","sanitizer","scrollThrottle","parentIntl","sortOrder","setPrototypeOf","__proto__","__assign","assign","s","n","SHARP_CURVE","MATERIAL_SANITY_CHECKS","_sanityChecksEnabled","_hasDoneGlobalChecks","_hasCheckedHammer","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","doctype","body","testElement","computedStyle","_checkHammerIsAvailable","BidiModule","MAT_DATE_LOCALE","MAT_DATE_LOCALE_PROVIDER","_localeChanges","setLocale","locale","second","firstValid","secondValid","SUPPORTS_INTL_API","Intl","DEFAULT_MONTH_NAMES","short","String","DEFAULT_DATE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","NativeDateAdapter","matDateLocale","useUtcForDisplay","_clampDate","getFullYear","getDay","dtf_1","DateTimeFormat","timeZone","_stripDirectionalityCharacters","_format","Date","dtf_2","day","dtf_3","weekday","dtf","_createDateWithOverflow","clone","displayFormat","setFullYear","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","test","isNaN","getTime","NaN","UTC","getHours","getMinutes","getSeconds","getMilliseconds","MAT_NATIVE_DATE_FORMATS","MatDateSelection","adapter","MatSingleDateSelection","getFirstSelectedDate","getLastSelectedDate","isComplete","isSame","other","asDate","MatRangeDateSelection","end","setFirstSelectedDate","setLastSelectedDate","asRange","NativeDateModule","MatNativeDateModule","ShowOnDirtyErrorStateMatcher","dirty","submitted","touched","MAT_HAMMER_OPTIONS","ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES","ɵ1","noopHammerInstance","on","off","_hammerOptions","commonModule","events","buildHammer","hammer","Hammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","MatLine","_setLineClass","count","_resetClasses","_setClass","isAdd","RippleRef","RippleState","HIDDEN","fadeOutRipple","defaultRippleAnimationConfig","enterDuration","exitDuration","ignoreMouseEventsTimeout","_target","_isPointerDown","_triggerEvents","_activeRipples","_eventOptions","supportsPassiveEventListeners","passive","onMousedown","isFakeMousedown","isSyntheticEvent","_lastTouchStartEvent","now","rippleDisabled","fadeInRipple","onTouchStart","touches","onPointerUp","VISIBLE","FADING_IN","_containerElement","containerRect","_containerRect","animationConfig","centered","radius","transitionDuration","rippleRef","_mostRecentTransientRipple","runTimeoutOutsideZone","isMostRecentTransientRipple","wasActive","rippleEl","FADING_OUT","fadeOutAll","_triggerElement","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","_trigger","configOrX","[class.mat-ripple-unbounded]","unbounded","MatPseudoCheckbox","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter"],"mappings":"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"}